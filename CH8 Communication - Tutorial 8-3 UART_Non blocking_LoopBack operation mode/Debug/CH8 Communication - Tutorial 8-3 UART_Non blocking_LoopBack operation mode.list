
CH8 Communication - Tutorial 8-3 UART_Non blocking_LoopBack operation mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038bc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08003a68  08003a68  00013a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b44  08003b44  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08003b44  08003b44  00013b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b4c  08003b4c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b4c  08003b4c  00013b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b50  08003b50  00013b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08003b54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          000000c0  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000144  20000144  00020084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009cf8  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a61  00000000  00000000  00029dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000808  00000000  00000000  0002b810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000760  00000000  00000000  0002c018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023729  00000000  00000000  0002c778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009d33  00000000  00000000  0004fea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2fdd  00000000  00000000  00059bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012cbb1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000262c  00000000  00000000  0012cc04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000084 	.word	0x20000084
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003a50 	.word	0x08003a50

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000088 	.word	0x20000088
 80001e8:	08003a50 	.word	0x08003a50

080001ec <strcmp>:
 80001ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f4:	2a01      	cmp	r2, #1
 80001f6:	bf28      	it	cs
 80001f8:	429a      	cmpcs	r2, r3
 80001fa:	d0f7      	beq.n	80001ec <strcmp>
 80001fc:	1ad0      	subs	r0, r2, r3
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b974 	b.w	8000500 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468e      	mov	lr, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14d      	bne.n	80002da <__udivmoddi4+0xaa>
 800023e:	428a      	cmp	r2, r1
 8000240:	4694      	mov	ip, r2
 8000242:	d969      	bls.n	8000318 <__udivmoddi4+0xe8>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b152      	cbz	r2, 8000260 <__udivmoddi4+0x30>
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	f1c2 0120 	rsb	r1, r2, #32
 8000252:	fa20 f101 	lsr.w	r1, r0, r1
 8000256:	fa0c fc02 	lsl.w	ip, ip, r2
 800025a:	ea41 0e03 	orr.w	lr, r1, r3
 800025e:	4094      	lsls	r4, r2
 8000260:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000264:	0c21      	lsrs	r1, r4, #16
 8000266:	fbbe f6f8 	udiv	r6, lr, r8
 800026a:	fa1f f78c 	uxth.w	r7, ip
 800026e:	fb08 e316 	mls	r3, r8, r6, lr
 8000272:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000276:	fb06 f107 	mul.w	r1, r6, r7
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 811f 	bcs.w	80004c8 <__udivmoddi4+0x298>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 811c 	bls.w	80004c8 <__udivmoddi4+0x298>
 8000290:	3e02      	subs	r6, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 f707 	mul.w	r7, r0, r7
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x92>
 80002ac:	eb1c 0404 	adds.w	r4, ip, r4
 80002b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b4:	f080 810a 	bcs.w	80004cc <__udivmoddi4+0x29c>
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	f240 8107 	bls.w	80004cc <__udivmoddi4+0x29c>
 80002be:	4464      	add	r4, ip
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c6:	1be4      	subs	r4, r4, r7
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa4>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xc2>
 80002de:	2d00      	cmp	r5, #0
 80002e0:	f000 80ef 	beq.w	80004c2 <__udivmoddi4+0x292>
 80002e4:	2600      	movs	r6, #0
 80002e6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ea:	4630      	mov	r0, r6
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f683 	clz	r6, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d14a      	bne.n	8000390 <__udivmoddi4+0x160>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd4>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80f9 	bhi.w	80004f6 <__udivmoddi4+0x2c6>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	469e      	mov	lr, r3
 800030e:	2d00      	cmp	r5, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa4>
 8000312:	e9c5 4e00 	strd	r4, lr, [r5]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa4>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xec>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 8092 	bne.w	800044a <__udivmoddi4+0x21a>
 8000326:	eba1 010c 	sub.w	r1, r1, ip
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2601      	movs	r6, #1
 8000334:	0c20      	lsrs	r0, r4, #16
 8000336:	fbb1 f3f7 	udiv	r3, r1, r7
 800033a:	fb07 1113 	mls	r1, r7, r3, r1
 800033e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000342:	fb0e f003 	mul.w	r0, lr, r3
 8000346:	4288      	cmp	r0, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x12c>
 800034a:	eb1c 0101 	adds.w	r1, ip, r1
 800034e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x12a>
 8000354:	4288      	cmp	r0, r1
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2c0>
 800035a:	4643      	mov	r3, r8
 800035c:	1a09      	subs	r1, r1, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb1 f0f7 	udiv	r0, r1, r7
 8000364:	fb07 1110 	mls	r1, r7, r0, r1
 8000368:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x156>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 31ff 	add.w	r1, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x154>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 8000384:	4608      	mov	r0, r1
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038e:	e79c      	b.n	80002ca <__udivmoddi4+0x9a>
 8000390:	f1c6 0720 	rsb	r7, r6, #32
 8000394:	40b3      	lsls	r3, r6
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa20 f407 	lsr.w	r4, r0, r7
 80003a2:	fa01 f306 	lsl.w	r3, r1, r6
 80003a6:	431c      	orrs	r4, r3
 80003a8:	40f9      	lsrs	r1, r7
 80003aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ae:	fa00 f306 	lsl.w	r3, r0, r6
 80003b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b6:	0c20      	lsrs	r0, r4, #16
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	fb09 1118 	mls	r1, r9, r8, r1
 80003c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c4:	fb08 f00e 	mul.w	r0, r8, lr
 80003c8:	4288      	cmp	r0, r1
 80003ca:	fa02 f206 	lsl.w	r2, r2, r6
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b8>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2bc>
 80003dc:	4288      	cmp	r0, r1
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2bc>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4461      	add	r1, ip
 80003e8:	1a09      	subs	r1, r1, r0
 80003ea:	b2a4      	uxth	r4, r4
 80003ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f0:	fb09 1110 	mls	r1, r9, r0, r1
 80003f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003fc:	458e      	cmp	lr, r1
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1e2>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f100 34ff 	add.w	r4, r0, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2b4>
 800040a:	458e      	cmp	lr, r1
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2b4>
 800040e:	3802      	subs	r0, #2
 8000410:	4461      	add	r1, ip
 8000412:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000416:	fba0 9402 	umull	r9, r4, r0, r2
 800041a:	eba1 010e 	sub.w	r1, r1, lr
 800041e:	42a1      	cmp	r1, r4
 8000420:	46c8      	mov	r8, r9
 8000422:	46a6      	mov	lr, r4
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x2a4>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x2a0>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x212>
 800042a:	ebb3 0208 	subs.w	r2, r3, r8
 800042e:	eb61 010e 	sbc.w	r1, r1, lr
 8000432:	fa01 f707 	lsl.w	r7, r1, r7
 8000436:	fa22 f306 	lsr.w	r3, r2, r6
 800043a:	40f1      	lsrs	r1, r6
 800043c:	431f      	orrs	r7, r3
 800043e:	e9c5 7100 	strd	r7, r1, [r5]
 8000442:	2600      	movs	r6, #0
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	f1c2 0320 	rsb	r3, r2, #32
 800044e:	40d8      	lsrs	r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa21 f303 	lsr.w	r3, r1, r3
 8000458:	4091      	lsls	r1, r2
 800045a:	4301      	orrs	r1, r0
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb3 f0f7 	udiv	r0, r3, r7
 8000468:	fb07 3610 	mls	r6, r7, r0, r3
 800046c:	0c0b      	lsrs	r3, r1, #16
 800046e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000472:	fb00 f60e 	mul.w	r6, r0, lr
 8000476:	429e      	cmp	r6, r3
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x260>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b8>
 8000488:	429e      	cmp	r6, r3
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b8>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1b9b      	subs	r3, r3, r6
 8000492:	b289      	uxth	r1, r1
 8000494:	fbb3 f6f7 	udiv	r6, r3, r7
 8000498:	fb07 3316 	mls	r3, r7, r6, r3
 800049c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a0:	fb06 f30e 	mul.w	r3, r6, lr
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x28a>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 80004b6:	3e02      	subs	r6, #2
 80004b8:	4461      	add	r1, ip
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0x104>
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e705      	b.n	80002d4 <__udivmoddi4+0xa4>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e3      	b.n	8000294 <__udivmoddi4+0x64>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6f8      	b.n	80002c2 <__udivmoddi4+0x92>
 80004d0:	454b      	cmp	r3, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f8>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004dc:	3801      	subs	r0, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f8>
 80004e0:	4646      	mov	r6, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x28a>
 80004e4:	4620      	mov	r0, r4
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1e2>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x260>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b8>
 80004f0:	3b02      	subs	r3, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x12c>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e709      	b.n	800030e <__udivmoddi4+0xde>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x156>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	b29a      	uxth	r2, r3
 8000514:	f04f 33ff 	mov.w	r3, #4294967295
 8000518:	68b9      	ldr	r1, [r7, #8]
 800051a:	4804      	ldr	r0, [pc, #16]	; (800052c <_write+0x28>)
 800051c:	f001 fcfb 	bl	8001f16 <HAL_UART_Transmit>
	return len;
 8000520:	687b      	ldr	r3, [r7, #4]
}
 8000522:	4618      	mov	r0, r3
 8000524:	3710      	adds	r7, #16
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	200000e4 	.word	0x200000e4

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fb88 	bl	8000c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f820 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 f8e2 	bl	8000704 <MX_GPIO_Init>
  MX_UART5_Init();
 8000540:	f000 f88c 	bl	800065c <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000544:	f000 f8b4 	bl	80006b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Allocate memory to ptr serRxData
  serRxData = (uint8_t*) malloc (100);
 8000548:	2064      	movs	r0, #100	; 0x64
 800054a:	f002 fd73 	bl	8003034 <malloc>
 800054e:	4603      	mov	r3, r0
 8000550:	461a      	mov	r2, r3
 8000552:	4b07      	ldr	r3, [pc, #28]	; (8000570 <main+0x40>)
 8000554:	601a      	str	r2, [r3, #0]
  if(serRxData == NULL){
 8000556:	4b06      	ldr	r3, [pc, #24]	; (8000570 <main+0x40>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d103      	bne.n	8000566 <main+0x36>
	  printf("Failure to allocate memory!\r\n");
 800055e:	4805      	ldr	r0, [pc, #20]	; (8000574 <main+0x44>)
 8000560:	f002 fec6 	bl	80032f0 <puts>
 8000564:	e002      	b.n	800056c <main+0x3c>
  }
  else
  {
	  printf("Memory allocated successfully!\r\n");
 8000566:	4804      	ldr	r0, [pc, #16]	; (8000578 <main+0x48>)
 8000568:	f002 fec2 	bl	80032f0 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800056c:	e7fe      	b.n	800056c <main+0x3c>
 800056e:	bf00      	nop
 8000570:	20000128 	.word	0x20000128
 8000574:	08003a68 	.word	0x08003a68
 8000578:	08003a88 	.word	0x08003a88

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	2230      	movs	r2, #48	; 0x30
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f002 fd5a 	bl	8003044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	4b2b      	ldr	r3, [pc, #172]	; (8000654 <SystemClock_Config+0xd8>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a2a      	ldr	r2, [pc, #168]	; (8000654 <SystemClock_Config+0xd8>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	4b28      	ldr	r3, [pc, #160]	; (8000654 <SystemClock_Config+0xd8>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	4b25      	ldr	r3, [pc, #148]	; (8000658 <SystemClock_Config+0xdc>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a24      	ldr	r2, [pc, #144]	; (8000658 <SystemClock_Config+0xdc>)
 80005c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b22      	ldr	r3, [pc, #136]	; (8000658 <SystemClock_Config+0xdc>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d8:	2302      	movs	r3, #2
 80005da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005dc:	2301      	movs	r3, #1
 80005de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e0:	2310      	movs	r3, #16
 80005e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e4:	2302      	movs	r3, #2
 80005e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e8:	2300      	movs	r3, #0
 80005ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005ec:	2308      	movs	r3, #8
 80005ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005f0:	23b4      	movs	r3, #180	; 0xb4
 80005f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005f8:	2307      	movs	r3, #7
 80005fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 0320 	add.w	r3, r7, #32
 8000600:	4618      	mov	r0, r3
 8000602:	f000 ffa3 	bl	800154c <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800060c:	f000 f946 	bl	800089c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000610:	f000 ff4c 	bl	80014ac <HAL_PWREx_EnableOverDrive>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800061a:	f000 f93f 	bl	800089c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061e:	230f      	movs	r3, #15
 8000620:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000622:	2302      	movs	r3, #2
 8000624:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800062a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800062e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000634:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	2105      	movs	r1, #5
 800063c:	4618      	mov	r0, r3
 800063e:	f001 f9fd 	bl	8001a3c <HAL_RCC_ClockConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000648:	f000 f928 	bl	800089c <Error_Handler>
  }
}
 800064c:	bf00      	nop
 800064e:	3750      	adds	r7, #80	; 0x50
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000

0800065c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <MX_UART5_Init+0x4c>)
 8000662:	4a12      	ldr	r2, [pc, #72]	; (80006ac <MX_UART5_Init+0x50>)
 8000664:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000666:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <MX_UART5_Init+0x4c>)
 8000668:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800066c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <MX_UART5_Init+0x4c>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <MX_UART5_Init+0x4c>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <MX_UART5_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_UART5_Init+0x4c>)
 8000682:	220c      	movs	r2, #12
 8000684:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <MX_UART5_Init+0x4c>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MX_UART5_Init+0x4c>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000692:	4805      	ldr	r0, [pc, #20]	; (80006a8 <MX_UART5_Init+0x4c>)
 8000694:	f001 fbf2 	bl	8001e7c <HAL_UART_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800069e:	f000 f8fd 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	200000a0 	.word	0x200000a0
 80006ac:	40005000 	.word	0x40005000

080006b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006b6:	4a12      	ldr	r2, [pc, #72]	; (8000700 <MX_USART1_UART_Init+0x50>)
 80006b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006d6:	2208      	movs	r2, #8
 80006d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_USART1_UART_Init+0x4c>)
 80006e8:	f001 fbc8 	bl	8001e7c <HAL_UART_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006f2:	f000 f8d3 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200000e4 	.word	0x200000e4
 8000700:	40011000 	.word	0x40011000

08000704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	; 0x28
 8000708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
 800071e:	4b32      	ldr	r3, [pc, #200]	; (80007e8 <MX_GPIO_Init+0xe4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a31      	ldr	r2, [pc, #196]	; (80007e8 <MX_GPIO_Init+0xe4>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b2f      	ldr	r3, [pc, #188]	; (80007e8 <MX_GPIO_Init+0xe4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	4b2b      	ldr	r3, [pc, #172]	; (80007e8 <MX_GPIO_Init+0xe4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a2a      	ldr	r2, [pc, #168]	; (80007e8 <MX_GPIO_Init+0xe4>)
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b28      	ldr	r3, [pc, #160]	; (80007e8 <MX_GPIO_Init+0xe4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0304 	and.w	r3, r3, #4
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	4b24      	ldr	r3, [pc, #144]	; (80007e8 <MX_GPIO_Init+0xe4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a23      	ldr	r2, [pc, #140]	; (80007e8 <MX_GPIO_Init+0xe4>)
 800075c:	f043 0308 	orr.w	r3, r3, #8
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b21      	ldr	r3, [pc, #132]	; (80007e8 <MX_GPIO_Init+0xe4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0308 	and.w	r3, r3, #8
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <MX_GPIO_Init+0xe4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a1c      	ldr	r2, [pc, #112]	; (80007e8 <MX_GPIO_Init+0xe4>)
 8000778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_GPIO_Init+0xe4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000790:	4816      	ldr	r0, [pc, #88]	; (80007ec <MX_GPIO_Init+0xe8>)
 8000792:	f000 fe3f 	bl	8001414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000796:	2301      	movs	r3, #1
 8000798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800079a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800079e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4619      	mov	r1, r3
 80007aa:	4811      	ldr	r0, [pc, #68]	; (80007f0 <MX_GPIO_Init+0xec>)
 80007ac:	f000 fc86 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80007b0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	2301      	movs	r3, #1
 80007b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	4808      	ldr	r0, [pc, #32]	; (80007ec <MX_GPIO_Init+0xe8>)
 80007ca:	f000 fc77 	bl	80010bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	2006      	movs	r0, #6
 80007d4:	f000 fba9 	bl	8000f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007d8:	2006      	movs	r0, #6
 80007da:	f000 fbc2 	bl	8000f62 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007de:	bf00      	nop
 80007e0:	3728      	adds	r7, #40	; 0x28
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40021800 	.word	0x40021800
 80007f0:	40020000 	.word	0x40020000

080007f4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0){
 80007fe:	88fb      	ldrh	r3, [r7, #6]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d10b      	bne.n	800081c <HAL_GPIO_EXTI_Callback+0x28>
	// Generate interrupt when transmit complete
	HAL_UART_Transmit_IT(&huart5, serTxData, sizeof(serTxData));
 8000804:	2213      	movs	r2, #19
 8000806:	4907      	ldr	r1, [pc, #28]	; (8000824 <HAL_GPIO_EXTI_Callback+0x30>)
 8000808:	4807      	ldr	r0, [pc, #28]	; (8000828 <HAL_GPIO_EXTI_Callback+0x34>)
 800080a:	f001 fc16 	bl	800203a <HAL_UART_Transmit_IT>
	// Generate interrupt when Receive complete
	HAL_UART_Receive_IT(&huart5, serRxData, sizeof(serTxData));
 800080e:	4b07      	ldr	r3, [pc, #28]	; (800082c <HAL_GPIO_EXTI_Callback+0x38>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2213      	movs	r2, #19
 8000814:	4619      	mov	r1, r3
 8000816:	4804      	ldr	r0, [pc, #16]	; (8000828 <HAL_GPIO_EXTI_Callback+0x34>)
 8000818:	f001 fc54 	bl	80020c4 <HAL_UART_Receive_IT>
	}

}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000000 	.word	0x20000000
 8000828:	200000a0 	.word	0x200000a0
 800082c:	20000128 	.word	0x20000128

08000830 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8000838:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800083c:	4803      	ldr	r0, [pc, #12]	; (800084c <HAL_UART_TxCpltCallback+0x1c>)
 800083e:	f000 fe02 	bl	8001446 <HAL_GPIO_TogglePin>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40021800 	.word	0x40021800

08000850 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	HAL_Delay(2000);  // Introduce time delay between toggling leds for transmit and receive data
 8000858:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800085c:	f000 fa66 	bl	8000d2c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 8000860:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000864:	4809      	ldr	r0, [pc, #36]	; (800088c <HAL_UART_RxCpltCallback+0x3c>)
 8000866:	f000 fdee 	bl	8001446 <HAL_GPIO_TogglePin>
    // When strings are equal strcmp() return 0
	if (!strcmp ((char*)serRxData,(char*)serTxData)){
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <HAL_UART_RxCpltCallback+0x40>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4909      	ldr	r1, [pc, #36]	; (8000894 <HAL_UART_RxCpltCallback+0x44>)
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fcbb 	bl	80001ec <strcmp>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d102      	bne.n	8000882 <HAL_UART_RxCpltCallback+0x32>

		printf("Data received successfully!\r\n");
 800087c:	4806      	ldr	r0, [pc, #24]	; (8000898 <HAL_UART_RxCpltCallback+0x48>)
 800087e:	f002 fd37 	bl	80032f0 <puts>
	}


}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40021800 	.word	0x40021800
 8000890:	20000128 	.word	0x20000128
 8000894:	20000000 	.word	0x20000000
 8000898:	08003aa8 	.word	0x08003aa8

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <Error_Handler+0x8>
	...

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <HAL_MspInit+0x4c>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	4a0f      	ldr	r2, [pc, #60]	; (80008f4 <HAL_MspInit+0x4c>)
 80008b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008bc:	6453      	str	r3, [r2, #68]	; 0x44
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <HAL_MspInit+0x4c>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <HAL_MspInit+0x4c>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	4a08      	ldr	r2, [pc, #32]	; (80008f4 <HAL_MspInit+0x4c>)
 80008d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d8:	6413      	str	r3, [r2, #64]	; 0x40
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_MspInit+0x4c>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 80008e6:	2006      	movs	r0, #6
 80008e8:	f000 fb14 	bl	8000f14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40023800 	.word	0x40023800

080008f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08c      	sub	sp, #48	; 0x30
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a46      	ldr	r2, [pc, #280]	; (8000a30 <HAL_UART_MspInit+0x138>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d153      	bne.n	80009c2 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	61bb      	str	r3, [r7, #24]
 800091e:	4b45      	ldr	r3, [pc, #276]	; (8000a34 <HAL_UART_MspInit+0x13c>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	4a44      	ldr	r2, [pc, #272]	; (8000a34 <HAL_UART_MspInit+0x13c>)
 8000924:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000928:	6413      	str	r3, [r2, #64]	; 0x40
 800092a:	4b42      	ldr	r3, [pc, #264]	; (8000a34 <HAL_UART_MspInit+0x13c>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
 800093a:	4b3e      	ldr	r3, [pc, #248]	; (8000a34 <HAL_UART_MspInit+0x13c>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a3d      	ldr	r2, [pc, #244]	; (8000a34 <HAL_UART_MspInit+0x13c>)
 8000940:	f043 0304 	orr.w	r3, r3, #4
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b3b      	ldr	r3, [pc, #236]	; (8000a34 <HAL_UART_MspInit+0x13c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0304 	and.w	r3, r3, #4
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	4b37      	ldr	r3, [pc, #220]	; (8000a34 <HAL_UART_MspInit+0x13c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a36      	ldr	r2, [pc, #216]	; (8000a34 <HAL_UART_MspInit+0x13c>)
 800095c:	f043 0308 	orr.w	r3, r3, #8
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b34      	ldr	r3, [pc, #208]	; (8000a34 <HAL_UART_MspInit+0x13c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0308 	and.w	r3, r3, #8
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800096e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097c:	2303      	movs	r3, #3
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000980:	2308      	movs	r3, #8
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	482b      	ldr	r0, [pc, #172]	; (8000a38 <HAL_UART_MspInit+0x140>)
 800098c:	f000 fb96 	bl	80010bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000990:	2304      	movs	r3, #4
 8000992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000994:	2302      	movs	r3, #2
 8000996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099c:	2303      	movs	r3, #3
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80009a0:	2308      	movs	r3, #8
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	4824      	ldr	r0, [pc, #144]	; (8000a3c <HAL_UART_MspInit+0x144>)
 80009ac:	f000 fb86 	bl	80010bc <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 1, 0);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2101      	movs	r1, #1
 80009b4:	2035      	movs	r0, #53	; 0x35
 80009b6:	f000 fab8 	bl	8000f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80009ba:	2035      	movs	r0, #53	; 0x35
 80009bc:	f000 fad1 	bl	8000f62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009c0:	e031      	b.n	8000a26 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART1)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a1e      	ldr	r2, [pc, #120]	; (8000a40 <HAL_UART_MspInit+0x148>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d12c      	bne.n	8000a26 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART1_CLK_ENABLE();
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <HAL_UART_MspInit+0x13c>)
 80009d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d4:	4a17      	ldr	r2, [pc, #92]	; (8000a34 <HAL_UART_MspInit+0x13c>)
 80009d6:	f043 0310 	orr.w	r3, r3, #16
 80009da:	6453      	str	r3, [r2, #68]	; 0x44
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <HAL_UART_MspInit+0x13c>)
 80009de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e0:	f003 0310 	and.w	r3, r3, #16
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e8:	2300      	movs	r3, #0
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <HAL_UART_MspInit+0x13c>)
 80009ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f0:	4a10      	ldr	r2, [pc, #64]	; (8000a34 <HAL_UART_MspInit+0x13c>)
 80009f2:	f043 0301 	orr.w	r3, r3, #1
 80009f6:	6313      	str	r3, [r2, #48]	; 0x30
 80009f8:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <HAL_UART_MspInit+0x13c>)
 80009fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a04:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a12:	2303      	movs	r3, #3
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a16:	2307      	movs	r3, #7
 8000a18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4808      	ldr	r0, [pc, #32]	; (8000a44 <HAL_UART_MspInit+0x14c>)
 8000a22:	f000 fb4b 	bl	80010bc <HAL_GPIO_Init>
}
 8000a26:	bf00      	nop
 8000a28:	3730      	adds	r7, #48	; 0x30
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40005000 	.word	0x40005000
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40020800 	.word	0x40020800
 8000a3c:	40020c00 	.word	0x40020c00
 8000a40:	40011000 	.word	0x40011000
 8000a44:	40020000 	.word	0x40020000

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <NMI_Handler+0x4>

08000a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <HardFault_Handler+0x4>

08000a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <MemManage_Handler+0x4>

08000a5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <BusFault_Handler+0x4>

08000a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <UsageFault_Handler+0x4>

08000a66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a94:	f000 f92a 	bl	8000cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	f000 fceb 	bl	800147c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000ab0:	4802      	ldr	r0, [pc, #8]	; (8000abc <UART5_IRQHandler+0x10>)
 8000ab2:	f001 fb37 	bl	8002124 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200000a0 	.word	0x200000a0

08000ac0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	e00a      	b.n	8000ae8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ad2:	f3af 8000 	nop.w
 8000ad6:	4601      	mov	r1, r0
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	1c5a      	adds	r2, r3, #1
 8000adc:	60ba      	str	r2, [r7, #8]
 8000ade:	b2ca      	uxtb	r2, r1
 8000ae0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	697a      	ldr	r2, [r7, #20]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	dbf0      	blt.n	8000ad2 <_read+0x12>
  }

  return len;
 8000af0:	687b      	ldr	r3, [r7, #4]
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <_close>:
  }
  return len;
}

int _close(int file)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
 8000b1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b22:	605a      	str	r2, [r3, #4]
  return 0;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <_isatty>:

int _isatty(int file)
{
 8000b32:	b480      	push	{r7}
 8000b34:	b083      	sub	sp, #12
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b3a:	2301      	movs	r3, #1
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3714      	adds	r7, #20
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
	...

08000b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b6c:	4a14      	ldr	r2, [pc, #80]	; (8000bc0 <_sbrk+0x5c>)
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <_sbrk+0x60>)
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d102      	bne.n	8000b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <_sbrk+0x64>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <_sbrk+0x68>)
 8000b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <_sbrk+0x64>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d207      	bcs.n	8000ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b94:	f002 fa24 	bl	8002fe0 <__errno>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba2:	e009      	b.n	8000bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000baa:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <_sbrk+0x64>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <_sbrk+0x64>)
 8000bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20030000 	.word	0x20030000
 8000bc4:	00000400 	.word	0x00000400
 8000bc8:	2000012c 	.word	0x2000012c
 8000bcc:	20000148 	.word	0x20000148

08000bd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <SystemInit+0x20>)
 8000bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <SystemInit+0x20>)
 8000bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000bf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c2c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bf8:	480d      	ldr	r0, [pc, #52]	; (8000c30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bfa:	490e      	ldr	r1, [pc, #56]	; (8000c34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bfc:	4a0e      	ldr	r2, [pc, #56]	; (8000c38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c00:	e002      	b.n	8000c08 <LoopCopyDataInit>

08000c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c06:	3304      	adds	r3, #4

08000c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c0c:	d3f9      	bcc.n	8000c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0e:	4a0b      	ldr	r2, [pc, #44]	; (8000c3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c10:	4c0b      	ldr	r4, [pc, #44]	; (8000c40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c14:	e001      	b.n	8000c1a <LoopFillZerobss>

08000c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c18:	3204      	adds	r2, #4

08000c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c1c:	d3fb      	bcc.n	8000c16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c1e:	f7ff ffd7 	bl	8000bd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c22:	f002 f9e3 	bl	8002fec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c26:	f7ff fc83 	bl	8000530 <main>
  bx  lr    
 8000c2a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c2c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c34:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000c38:	08003b54 	.word	0x08003b54
  ldr r2, =_sbss
 8000c3c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000c40:	20000144 	.word	0x20000144

08000c44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c44:	e7fe      	b.n	8000c44 <ADC_IRQHandler>
	...

08000c48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0d      	ldr	r2, [pc, #52]	; (8000c88 <HAL_Init+0x40>)
 8000c52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c58:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <HAL_Init+0x40>)
 8000c5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <HAL_Init+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a07      	ldr	r2, [pc, #28]	; (8000c88 <HAL_Init+0x40>)
 8000c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c70:	2003      	movs	r0, #3
 8000c72:	f000 f94f 	bl	8000f14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c76:	2000      	movs	r0, #0
 8000c78:	f000 f808 	bl	8000c8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c7c:	f7ff fe14 	bl	80008a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40023c00 	.word	0x40023c00

08000c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_InitTick+0x54>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_InitTick+0x58>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 f967 	bl	8000f7e <HAL_SYSTICK_Config>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e00e      	b.n	8000cd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2b0f      	cmp	r3, #15
 8000cbe:	d80a      	bhi.n	8000cd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc8:	f000 f92f 	bl	8000f2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ccc:	4a06      	ldr	r2, [pc, #24]	; (8000ce8 <HAL_InitTick+0x5c>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e000      	b.n	8000cd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000014 	.word	0x20000014
 8000ce4:	2000001c 	.word	0x2000001c
 8000ce8:	20000018 	.word	0x20000018

08000cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_IncTick+0x20>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_IncTick+0x24>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <HAL_IncTick+0x24>)
 8000cfe:	6013      	str	r3, [r2, #0]
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	2000001c 	.word	0x2000001c
 8000d10:	20000130 	.word	0x20000130

08000d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return uwTick;
 8000d18:	4b03      	ldr	r3, [pc, #12]	; (8000d28 <HAL_GetTick+0x14>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000130 	.word	0x20000130

08000d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d34:	f7ff ffee 	bl	8000d14 <HAL_GetTick>
 8000d38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d44:	d005      	beq.n	8000d52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <HAL_Delay+0x44>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4413      	add	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d52:	bf00      	nop
 8000d54:	f7ff ffde 	bl	8000d14 <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d8f7      	bhi.n	8000d54 <HAL_Delay+0x28>
  {
  }
}
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	2000001c 	.word	0x2000001c

08000d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d90:	4013      	ands	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da6:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	60d3      	str	r3, [r2, #12]
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	f003 0307 	and.w	r3, r3, #7
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	db0b      	blt.n	8000e02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	f003 021f 	and.w	r2, r3, #31
 8000df0:	4907      	ldr	r1, [pc, #28]	; (8000e10 <__NVIC_EnableIRQ+0x38>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	095b      	lsrs	r3, r3, #5
 8000df8:	2001      	movs	r0, #1
 8000dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000e100 	.word	0xe000e100

08000e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	6039      	str	r1, [r7, #0]
 8000e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	db0a      	blt.n	8000e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	490c      	ldr	r1, [pc, #48]	; (8000e60 <__NVIC_SetPriority+0x4c>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	0112      	lsls	r2, r2, #4
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	440b      	add	r3, r1
 8000e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e3c:	e00a      	b.n	8000e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4908      	ldr	r1, [pc, #32]	; (8000e64 <__NVIC_SetPriority+0x50>)
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	3b04      	subs	r3, #4
 8000e4c:	0112      	lsls	r2, r2, #4
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	440b      	add	r3, r1
 8000e52:	761a      	strb	r2, [r3, #24]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000e100 	.word	0xe000e100
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	; 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f1c3 0307 	rsb	r3, r3, #7
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	bf28      	it	cs
 8000e86:	2304      	movcs	r3, #4
 8000e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	2b06      	cmp	r3, #6
 8000e90:	d902      	bls.n	8000e98 <NVIC_EncodePriority+0x30>
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3b03      	subs	r3, #3
 8000e96:	e000      	b.n	8000e9a <NVIC_EncodePriority+0x32>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43da      	mvns	r2, r3
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	401a      	ands	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	43d9      	mvns	r1, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	4313      	orrs	r3, r2
         );
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3724      	adds	r7, #36	; 0x24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
	...

08000ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ee0:	d301      	bcc.n	8000ee6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00f      	b.n	8000f06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <SysTick_Config+0x40>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eee:	210f      	movs	r1, #15
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef4:	f7ff ff8e 	bl	8000e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <SysTick_Config+0x40>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efe:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <SysTick_Config+0x40>)
 8000f00:	2207      	movs	r2, #7
 8000f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	e000e010 	.word	0xe000e010

08000f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff ff29 	bl	8000d74 <__NVIC_SetPriorityGrouping>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b086      	sub	sp, #24
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
 8000f36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f3c:	f7ff ff3e 	bl	8000dbc <__NVIC_GetPriorityGrouping>
 8000f40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	68b9      	ldr	r1, [r7, #8]
 8000f46:	6978      	ldr	r0, [r7, #20]
 8000f48:	f7ff ff8e 	bl	8000e68 <NVIC_EncodePriority>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f52:	4611      	mov	r1, r2
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff5d 	bl	8000e14 <__NVIC_SetPriority>
}
 8000f5a:	bf00      	nop
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4603      	mov	r3, r0
 8000f6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ff31 	bl	8000dd8 <__NVIC_EnableIRQ>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ffa2 	bl	8000ed0 <SysTick_Config>
 8000f8c:	4603      	mov	r3, r0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b084      	sub	sp, #16
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fa4:	f7ff feb6 	bl	8000d14 <HAL_GetTick>
 8000fa8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d008      	beq.n	8000fc8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2280      	movs	r2, #128	; 0x80
 8000fba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e052      	b.n	800106e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f022 0216 	bic.w	r2, r2, #22
 8000fd6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	695a      	ldr	r2, [r3, #20]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fe6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d103      	bne.n	8000ff8 <HAL_DMA_Abort+0x62>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d007      	beq.n	8001008 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 0208 	bic.w	r2, r2, #8
 8001006:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f022 0201 	bic.w	r2, r2, #1
 8001016:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001018:	e013      	b.n	8001042 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800101a:	f7ff fe7b 	bl	8000d14 <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b05      	cmp	r3, #5
 8001026:	d90c      	bls.n	8001042 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2220      	movs	r2, #32
 800102c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2203      	movs	r2, #3
 8001032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e015      	b.n	800106e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1e4      	bne.n	800101a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001054:	223f      	movs	r2, #63	; 0x3f
 8001056:	409a      	lsls	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2201      	movs	r2, #1
 8001060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d004      	beq.n	8001094 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2280      	movs	r2, #128	; 0x80
 800108e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e00c      	b.n	80010ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2205      	movs	r2, #5
 8001098:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 0201 	bic.w	r2, r2, #1
 80010aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	; 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
 80010d6:	e177      	b.n	80013c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010d8:	2201      	movs	r2, #1
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	f040 8166 	bne.w	80013c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d005      	beq.n	800110e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800110a:	2b02      	cmp	r3, #2
 800110c:	d130      	bne.n	8001170 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	2203      	movs	r2, #3
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	68da      	ldr	r2, [r3, #12]
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001144:	2201      	movs	r2, #1
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	091b      	lsrs	r3, r3, #4
 800115a:	f003 0201 	and.w	r2, r3, #1
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	2b03      	cmp	r3, #3
 800117a:	d017      	beq.n	80011ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	2203      	movs	r2, #3
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d123      	bne.n	8001200 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	08da      	lsrs	r2, r3, #3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3208      	adds	r2, #8
 80011c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	220f      	movs	r2, #15
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	691a      	ldr	r2, [r3, #16]
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	08da      	lsrs	r2, r3, #3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3208      	adds	r2, #8
 80011fa:	69b9      	ldr	r1, [r7, #24]
 80011fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	2203      	movs	r2, #3
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0203 	and.w	r2, r3, #3
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800123c:	2b00      	cmp	r3, #0
 800123e:	f000 80c0 	beq.w	80013c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	4b66      	ldr	r3, [pc, #408]	; (80013e0 <HAL_GPIO_Init+0x324>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	4a65      	ldr	r2, [pc, #404]	; (80013e0 <HAL_GPIO_Init+0x324>)
 800124c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001250:	6453      	str	r3, [r2, #68]	; 0x44
 8001252:	4b63      	ldr	r3, [pc, #396]	; (80013e0 <HAL_GPIO_Init+0x324>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800125e:	4a61      	ldr	r2, [pc, #388]	; (80013e4 <HAL_GPIO_Init+0x328>)
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	089b      	lsrs	r3, r3, #2
 8001264:	3302      	adds	r3, #2
 8001266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	220f      	movs	r2, #15
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a58      	ldr	r2, [pc, #352]	; (80013e8 <HAL_GPIO_Init+0x32c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d037      	beq.n	80012fa <HAL_GPIO_Init+0x23e>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a57      	ldr	r2, [pc, #348]	; (80013ec <HAL_GPIO_Init+0x330>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d031      	beq.n	80012f6 <HAL_GPIO_Init+0x23a>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a56      	ldr	r2, [pc, #344]	; (80013f0 <HAL_GPIO_Init+0x334>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d02b      	beq.n	80012f2 <HAL_GPIO_Init+0x236>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a55      	ldr	r2, [pc, #340]	; (80013f4 <HAL_GPIO_Init+0x338>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d025      	beq.n	80012ee <HAL_GPIO_Init+0x232>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a54      	ldr	r2, [pc, #336]	; (80013f8 <HAL_GPIO_Init+0x33c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d01f      	beq.n	80012ea <HAL_GPIO_Init+0x22e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a53      	ldr	r2, [pc, #332]	; (80013fc <HAL_GPIO_Init+0x340>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d019      	beq.n	80012e6 <HAL_GPIO_Init+0x22a>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a52      	ldr	r2, [pc, #328]	; (8001400 <HAL_GPIO_Init+0x344>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d013      	beq.n	80012e2 <HAL_GPIO_Init+0x226>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a51      	ldr	r2, [pc, #324]	; (8001404 <HAL_GPIO_Init+0x348>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d00d      	beq.n	80012de <HAL_GPIO_Init+0x222>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a50      	ldr	r2, [pc, #320]	; (8001408 <HAL_GPIO_Init+0x34c>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d007      	beq.n	80012da <HAL_GPIO_Init+0x21e>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a4f      	ldr	r2, [pc, #316]	; (800140c <HAL_GPIO_Init+0x350>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d101      	bne.n	80012d6 <HAL_GPIO_Init+0x21a>
 80012d2:	2309      	movs	r3, #9
 80012d4:	e012      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012d6:	230a      	movs	r3, #10
 80012d8:	e010      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012da:	2308      	movs	r3, #8
 80012dc:	e00e      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012de:	2307      	movs	r3, #7
 80012e0:	e00c      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012e2:	2306      	movs	r3, #6
 80012e4:	e00a      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012e6:	2305      	movs	r3, #5
 80012e8:	e008      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012ea:	2304      	movs	r3, #4
 80012ec:	e006      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012ee:	2303      	movs	r3, #3
 80012f0:	e004      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012f2:	2302      	movs	r3, #2
 80012f4:	e002      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e000      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012fa:	2300      	movs	r3, #0
 80012fc:	69fa      	ldr	r2, [r7, #28]
 80012fe:	f002 0203 	and.w	r2, r2, #3
 8001302:	0092      	lsls	r2, r2, #2
 8001304:	4093      	lsls	r3, r2
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800130c:	4935      	ldr	r1, [pc, #212]	; (80013e4 <HAL_GPIO_Init+0x328>)
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	089b      	lsrs	r3, r3, #2
 8001312:	3302      	adds	r3, #2
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800131a:	4b3d      	ldr	r3, [pc, #244]	; (8001410 <HAL_GPIO_Init+0x354>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800133e:	4a34      	ldr	r2, [pc, #208]	; (8001410 <HAL_GPIO_Init+0x354>)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001344:	4b32      	ldr	r3, [pc, #200]	; (8001410 <HAL_GPIO_Init+0x354>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001368:	4a29      	ldr	r2, [pc, #164]	; (8001410 <HAL_GPIO_Init+0x354>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800136e:	4b28      	ldr	r3, [pc, #160]	; (8001410 <HAL_GPIO_Init+0x354>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001392:	4a1f      	ldr	r2, [pc, #124]	; (8001410 <HAL_GPIO_Init+0x354>)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001398:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <HAL_GPIO_Init+0x354>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013bc:	4a14      	ldr	r2, [pc, #80]	; (8001410 <HAL_GPIO_Init+0x354>)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3301      	adds	r3, #1
 80013c6:	61fb      	str	r3, [r7, #28]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	2b0f      	cmp	r3, #15
 80013cc:	f67f ae84 	bls.w	80010d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3724      	adds	r7, #36	; 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40013800 	.word	0x40013800
 80013e8:	40020000 	.word	0x40020000
 80013ec:	40020400 	.word	0x40020400
 80013f0:	40020800 	.word	0x40020800
 80013f4:	40020c00 	.word	0x40020c00
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40021400 	.word	0x40021400
 8001400:	40021800 	.word	0x40021800
 8001404:	40021c00 	.word	0x40021c00
 8001408:	40022000 	.word	0x40022000
 800140c:	40022400 	.word	0x40022400
 8001410:	40013c00 	.word	0x40013c00

08001414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	807b      	strh	r3, [r7, #2]
 8001420:	4613      	mov	r3, r2
 8001422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001424:	787b      	ldrb	r3, [r7, #1]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800142a:	887a      	ldrh	r2, [r7, #2]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001430:	e003      	b.n	800143a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001432:	887b      	ldrh	r3, [r7, #2]
 8001434:	041a      	lsls	r2, r3, #16
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	619a      	str	r2, [r3, #24]
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001446:	b480      	push	{r7}
 8001448:	b085      	sub	sp, #20
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	460b      	mov	r3, r1
 8001450:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001458:	887a      	ldrh	r2, [r7, #2]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	4013      	ands	r3, r2
 800145e:	041a      	lsls	r2, r3, #16
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	43d9      	mvns	r1, r3
 8001464:	887b      	ldrh	r3, [r7, #2]
 8001466:	400b      	ands	r3, r1
 8001468:	431a      	orrs	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	619a      	str	r2, [r3, #24]
}
 800146e:	bf00      	nop
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
	...

0800147c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001488:	695a      	ldr	r2, [r3, #20]
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	4013      	ands	r3, r2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d006      	beq.n	80014a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001492:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff f9aa 	bl	80007f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40013c00 	.word	0x40013c00

080014ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	603b      	str	r3, [r7, #0]
 80014ba:	4b20      	ldr	r3, [pc, #128]	; (800153c <HAL_PWREx_EnableOverDrive+0x90>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	4a1f      	ldr	r2, [pc, #124]	; (800153c <HAL_PWREx_EnableOverDrive+0x90>)
 80014c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c4:	6413      	str	r3, [r2, #64]	; 0x40
 80014c6:	4b1d      	ldr	r3, [pc, #116]	; (800153c <HAL_PWREx_EnableOverDrive+0x90>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80014d2:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <HAL_PWREx_EnableOverDrive+0x94>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014d8:	f7ff fc1c 	bl	8000d14 <HAL_GetTick>
 80014dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014de:	e009      	b.n	80014f4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014e0:	f7ff fc18 	bl	8000d14 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014ee:	d901      	bls.n	80014f4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e01f      	b.n	8001534 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014f4:	4b13      	ldr	r3, [pc, #76]	; (8001544 <HAL_PWREx_EnableOverDrive+0x98>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001500:	d1ee      	bne.n	80014e0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001504:	2201      	movs	r2, #1
 8001506:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001508:	f7ff fc04 	bl	8000d14 <HAL_GetTick>
 800150c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800150e:	e009      	b.n	8001524 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001510:	f7ff fc00 	bl	8000d14 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800151e:	d901      	bls.n	8001524 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e007      	b.n	8001534 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001524:	4b07      	ldr	r3, [pc, #28]	; (8001544 <HAL_PWREx_EnableOverDrive+0x98>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001530:	d1ee      	bne.n	8001510 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40023800 	.word	0x40023800
 8001540:	420e0040 	.word	0x420e0040
 8001544:	40007000 	.word	0x40007000
 8001548:	420e0044 	.word	0x420e0044

0800154c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e267      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d075      	beq.n	8001656 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800156a:	4b88      	ldr	r3, [pc, #544]	; (800178c <HAL_RCC_OscConfig+0x240>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 030c 	and.w	r3, r3, #12
 8001572:	2b04      	cmp	r3, #4
 8001574:	d00c      	beq.n	8001590 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001576:	4b85      	ldr	r3, [pc, #532]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800157e:	2b08      	cmp	r3, #8
 8001580:	d112      	bne.n	80015a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001582:	4b82      	ldr	r3, [pc, #520]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800158a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800158e:	d10b      	bne.n	80015a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001590:	4b7e      	ldr	r3, [pc, #504]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d05b      	beq.n	8001654 <HAL_RCC_OscConfig+0x108>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d157      	bne.n	8001654 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e242      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b0:	d106      	bne.n	80015c0 <HAL_RCC_OscConfig+0x74>
 80015b2:	4b76      	ldr	r3, [pc, #472]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a75      	ldr	r2, [pc, #468]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	e01d      	b.n	80015fc <HAL_RCC_OscConfig+0xb0>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015c8:	d10c      	bne.n	80015e4 <HAL_RCC_OscConfig+0x98>
 80015ca:	4b70      	ldr	r3, [pc, #448]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a6f      	ldr	r2, [pc, #444]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	4b6d      	ldr	r3, [pc, #436]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a6c      	ldr	r2, [pc, #432]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	e00b      	b.n	80015fc <HAL_RCC_OscConfig+0xb0>
 80015e4:	4b69      	ldr	r3, [pc, #420]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a68      	ldr	r2, [pc, #416]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	4b66      	ldr	r3, [pc, #408]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a65      	ldr	r2, [pc, #404]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d013      	beq.n	800162c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7ff fb86 	bl	8000d14 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800160c:	f7ff fb82 	bl	8000d14 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b64      	cmp	r3, #100	; 0x64
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e207      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161e:	4b5b      	ldr	r3, [pc, #364]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0f0      	beq.n	800160c <HAL_RCC_OscConfig+0xc0>
 800162a:	e014      	b.n	8001656 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7ff fb72 	bl	8000d14 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001634:	f7ff fb6e 	bl	8000d14 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b64      	cmp	r3, #100	; 0x64
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e1f3      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001646:	4b51      	ldr	r3, [pc, #324]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0xe8>
 8001652:	e000      	b.n	8001656 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d063      	beq.n	800172a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001662:	4b4a      	ldr	r3, [pc, #296]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00b      	beq.n	8001686 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800166e:	4b47      	ldr	r3, [pc, #284]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001676:	2b08      	cmp	r3, #8
 8001678:	d11c      	bne.n	80016b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800167a:	4b44      	ldr	r3, [pc, #272]	; (800178c <HAL_RCC_OscConfig+0x240>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d116      	bne.n	80016b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001686:	4b41      	ldr	r3, [pc, #260]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d005      	beq.n	800169e <HAL_RCC_OscConfig+0x152>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d001      	beq.n	800169e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e1c7      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169e:	4b3b      	ldr	r3, [pc, #236]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	4937      	ldr	r1, [pc, #220]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b2:	e03a      	b.n	800172a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d020      	beq.n	80016fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016bc:	4b34      	ldr	r3, [pc, #208]	; (8001790 <HAL_RCC_OscConfig+0x244>)
 80016be:	2201      	movs	r2, #1
 80016c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c2:	f7ff fb27 	bl	8000d14 <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ca:	f7ff fb23 	bl	8000d14 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e1a8      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016dc:	4b2b      	ldr	r3, [pc, #172]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0f0      	beq.n	80016ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e8:	4b28      	ldr	r3, [pc, #160]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	4925      	ldr	r1, [pc, #148]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	600b      	str	r3, [r1, #0]
 80016fc:	e015      	b.n	800172a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016fe:	4b24      	ldr	r3, [pc, #144]	; (8001790 <HAL_RCC_OscConfig+0x244>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001704:	f7ff fb06 	bl	8000d14 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800170c:	f7ff fb02 	bl	8000d14 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e187      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171e:	4b1b      	ldr	r3, [pc, #108]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	2b00      	cmp	r3, #0
 8001734:	d036      	beq.n	80017a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d016      	beq.n	800176c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <HAL_RCC_OscConfig+0x248>)
 8001740:	2201      	movs	r2, #1
 8001742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001744:	f7ff fae6 	bl	8000d14 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800174c:	f7ff fae2 	bl	8000d14 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e167      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f0      	beq.n	800174c <HAL_RCC_OscConfig+0x200>
 800176a:	e01b      	b.n	80017a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800176c:	4b09      	ldr	r3, [pc, #36]	; (8001794 <HAL_RCC_OscConfig+0x248>)
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001772:	f7ff facf 	bl	8000d14 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001778:	e00e      	b.n	8001798 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800177a:	f7ff facb 	bl	8000d14 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d907      	bls.n	8001798 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e150      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
 800178c:	40023800 	.word	0x40023800
 8001790:	42470000 	.word	0x42470000
 8001794:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001798:	4b88      	ldr	r3, [pc, #544]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 800179a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1ea      	bne.n	800177a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 8097 	beq.w	80018e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017b2:	2300      	movs	r3, #0
 80017b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017b6:	4b81      	ldr	r3, [pc, #516]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10f      	bne.n	80017e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	4b7d      	ldr	r3, [pc, #500]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	4a7c      	ldr	r2, [pc, #496]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80017cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d0:	6413      	str	r3, [r2, #64]	; 0x40
 80017d2:	4b7a      	ldr	r3, [pc, #488]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017de:	2301      	movs	r3, #1
 80017e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e2:	4b77      	ldr	r3, [pc, #476]	; (80019c0 <HAL_RCC_OscConfig+0x474>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d118      	bne.n	8001820 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ee:	4b74      	ldr	r3, [pc, #464]	; (80019c0 <HAL_RCC_OscConfig+0x474>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a73      	ldr	r2, [pc, #460]	; (80019c0 <HAL_RCC_OscConfig+0x474>)
 80017f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017fa:	f7ff fa8b 	bl	8000d14 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001802:	f7ff fa87 	bl	8000d14 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e10c      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001814:	4b6a      	ldr	r3, [pc, #424]	; (80019c0 <HAL_RCC_OscConfig+0x474>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d106      	bne.n	8001836 <HAL_RCC_OscConfig+0x2ea>
 8001828:	4b64      	ldr	r3, [pc, #400]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 800182a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182c:	4a63      	ldr	r2, [pc, #396]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	6713      	str	r3, [r2, #112]	; 0x70
 8001834:	e01c      	b.n	8001870 <HAL_RCC_OscConfig+0x324>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2b05      	cmp	r3, #5
 800183c:	d10c      	bne.n	8001858 <HAL_RCC_OscConfig+0x30c>
 800183e:	4b5f      	ldr	r3, [pc, #380]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 8001840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001842:	4a5e      	ldr	r2, [pc, #376]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 8001844:	f043 0304 	orr.w	r3, r3, #4
 8001848:	6713      	str	r3, [r2, #112]	; 0x70
 800184a:	4b5c      	ldr	r3, [pc, #368]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 800184c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184e:	4a5b      	ldr	r2, [pc, #364]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6713      	str	r3, [r2, #112]	; 0x70
 8001856:	e00b      	b.n	8001870 <HAL_RCC_OscConfig+0x324>
 8001858:	4b58      	ldr	r3, [pc, #352]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 800185a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185c:	4a57      	ldr	r2, [pc, #348]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 800185e:	f023 0301 	bic.w	r3, r3, #1
 8001862:	6713      	str	r3, [r2, #112]	; 0x70
 8001864:	4b55      	ldr	r3, [pc, #340]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 8001866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001868:	4a54      	ldr	r2, [pc, #336]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 800186a:	f023 0304 	bic.w	r3, r3, #4
 800186e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d015      	beq.n	80018a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001878:	f7ff fa4c 	bl	8000d14 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800187e:	e00a      	b.n	8001896 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001880:	f7ff fa48 	bl	8000d14 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	f241 3288 	movw	r2, #5000	; 0x1388
 800188e:	4293      	cmp	r3, r2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e0cb      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001896:	4b49      	ldr	r3, [pc, #292]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 8001898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0ee      	beq.n	8001880 <HAL_RCC_OscConfig+0x334>
 80018a2:	e014      	b.n	80018ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a4:	f7ff fa36 	bl	8000d14 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018aa:	e00a      	b.n	80018c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ac:	f7ff fa32 	bl	8000d14 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e0b5      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c2:	4b3e      	ldr	r3, [pc, #248]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80018c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1ee      	bne.n	80018ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018ce:	7dfb      	ldrb	r3, [r7, #23]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d105      	bne.n	80018e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018d4:	4b39      	ldr	r3, [pc, #228]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	4a38      	ldr	r2, [pc, #224]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80018da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 80a1 	beq.w	8001a2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018ea:	4b34      	ldr	r3, [pc, #208]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 030c 	and.w	r3, r3, #12
 80018f2:	2b08      	cmp	r3, #8
 80018f4:	d05c      	beq.n	80019b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d141      	bne.n	8001982 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fe:	4b31      	ldr	r3, [pc, #196]	; (80019c4 <HAL_RCC_OscConfig+0x478>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7ff fa06 	bl	8000d14 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800190c:	f7ff fa02 	bl	8000d14 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e087      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800191e:	4b27      	ldr	r3, [pc, #156]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69da      	ldr	r2, [r3, #28]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001938:	019b      	lsls	r3, r3, #6
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001940:	085b      	lsrs	r3, r3, #1
 8001942:	3b01      	subs	r3, #1
 8001944:	041b      	lsls	r3, r3, #16
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194c:	061b      	lsls	r3, r3, #24
 800194e:	491b      	ldr	r1, [pc, #108]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 8001950:	4313      	orrs	r3, r2
 8001952:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001954:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <HAL_RCC_OscConfig+0x478>)
 8001956:	2201      	movs	r2, #1
 8001958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195a:	f7ff f9db 	bl	8000d14 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001962:	f7ff f9d7 	bl	8000d14 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e05c      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001974:	4b11      	ldr	r3, [pc, #68]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f0      	beq.n	8001962 <HAL_RCC_OscConfig+0x416>
 8001980:	e054      	b.n	8001a2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001982:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <HAL_RCC_OscConfig+0x478>)
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001988:	f7ff f9c4 	bl	8000d14 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001990:	f7ff f9c0 	bl	8000d14 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e045      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f0      	bne.n	8001990 <HAL_RCC_OscConfig+0x444>
 80019ae:	e03d      	b.n	8001a2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d107      	bne.n	80019c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e038      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40007000 	.word	0x40007000
 80019c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019c8:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <HAL_RCC_OscConfig+0x4ec>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d028      	beq.n	8001a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d121      	bne.n	8001a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d11a      	bne.n	8001a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019f8:	4013      	ands	r3, r2
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d111      	bne.n	8001a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0e:	085b      	lsrs	r3, r3, #1
 8001a10:	3b01      	subs	r3, #1
 8001a12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d107      	bne.n	8001a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800

08001a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e0cc      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a50:	4b68      	ldr	r3, [pc, #416]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 030f 	and.w	r3, r3, #15
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d90c      	bls.n	8001a78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5e:	4b65      	ldr	r3, [pc, #404]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a66:	4b63      	ldr	r3, [pc, #396]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d001      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e0b8      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d020      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d005      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a90:	4b59      	ldr	r3, [pc, #356]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	4a58      	ldr	r2, [pc, #352]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aa8:	4b53      	ldr	r3, [pc, #332]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	4a52      	ldr	r2, [pc, #328]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ab2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab4:	4b50      	ldr	r3, [pc, #320]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	494d      	ldr	r1, [pc, #308]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d044      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d107      	bne.n	8001aea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ada:	4b47      	ldr	r3, [pc, #284]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d119      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e07f      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d003      	beq.n	8001afa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	d107      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afa:	4b3f      	ldr	r3, [pc, #252]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d109      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e06f      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0a:	4b3b      	ldr	r3, [pc, #236]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e067      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b1a:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f023 0203 	bic.w	r2, r3, #3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	4934      	ldr	r1, [pc, #208]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b2c:	f7ff f8f2 	bl	8000d14 <HAL_GetTick>
 8001b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b32:	e00a      	b.n	8001b4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b34:	f7ff f8ee 	bl	8000d14 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e04f      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4a:	4b2b      	ldr	r3, [pc, #172]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 020c 	and.w	r2, r3, #12
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d1eb      	bne.n	8001b34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b5c:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 030f 	and.w	r3, r3, #15
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d20c      	bcs.n	8001b84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6a:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b72:	4b20      	ldr	r3, [pc, #128]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d001      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e032      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d008      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b90:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	4916      	ldr	r1, [pc, #88]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d009      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bae:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	490e      	ldr	r1, [pc, #56]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bc2:	f000 f821 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	091b      	lsrs	r3, r3, #4
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	490a      	ldr	r1, [pc, #40]	; (8001bfc <HAL_RCC_ClockConfig+0x1c0>)
 8001bd4:	5ccb      	ldrb	r3, [r1, r3]
 8001bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bda:	4a09      	ldr	r2, [pc, #36]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_RCC_ClockConfig+0x1c8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff f852 	bl	8000c8c <HAL_InitTick>

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023c00 	.word	0x40023c00
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	08003ac8 	.word	0x08003ac8
 8001c00:	20000014 	.word	0x20000014
 8001c04:	20000018 	.word	0x20000018

08001c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c0c:	b094      	sub	sp, #80	; 0x50
 8001c0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	647b      	str	r3, [r7, #68]	; 0x44
 8001c14:	2300      	movs	r3, #0
 8001c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c18:	2300      	movs	r3, #0
 8001c1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c20:	4b79      	ldr	r3, [pc, #484]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 030c 	and.w	r3, r3, #12
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d00d      	beq.n	8001c48 <HAL_RCC_GetSysClockFreq+0x40>
 8001c2c:	2b08      	cmp	r3, #8
 8001c2e:	f200 80e1 	bhi.w	8001df4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d002      	beq.n	8001c3c <HAL_RCC_GetSysClockFreq+0x34>
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	d003      	beq.n	8001c42 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c3a:	e0db      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c3c:	4b73      	ldr	r3, [pc, #460]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x204>)
 8001c3e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c40:	e0db      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c42:	4b73      	ldr	r3, [pc, #460]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c46:	e0d8      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c48:	4b6f      	ldr	r3, [pc, #444]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c50:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c52:	4b6d      	ldr	r3, [pc, #436]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d063      	beq.n	8001d26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c5e:	4b6a      	ldr	r3, [pc, #424]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	099b      	lsrs	r3, r3, #6
 8001c64:	2200      	movs	r2, #0
 8001c66:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c70:	633b      	str	r3, [r7, #48]	; 0x30
 8001c72:	2300      	movs	r3, #0
 8001c74:	637b      	str	r3, [r7, #52]	; 0x34
 8001c76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c7a:	4622      	mov	r2, r4
 8001c7c:	462b      	mov	r3, r5
 8001c7e:	f04f 0000 	mov.w	r0, #0
 8001c82:	f04f 0100 	mov.w	r1, #0
 8001c86:	0159      	lsls	r1, r3, #5
 8001c88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c8c:	0150      	lsls	r0, r2, #5
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4621      	mov	r1, r4
 8001c94:	1a51      	subs	r1, r2, r1
 8001c96:	6139      	str	r1, [r7, #16]
 8001c98:	4629      	mov	r1, r5
 8001c9a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001cac:	4659      	mov	r1, fp
 8001cae:	018b      	lsls	r3, r1, #6
 8001cb0:	4651      	mov	r1, sl
 8001cb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cb6:	4651      	mov	r1, sl
 8001cb8:	018a      	lsls	r2, r1, #6
 8001cba:	4651      	mov	r1, sl
 8001cbc:	ebb2 0801 	subs.w	r8, r2, r1
 8001cc0:	4659      	mov	r1, fp
 8001cc2:	eb63 0901 	sbc.w	r9, r3, r1
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cda:	4690      	mov	r8, r2
 8001cdc:	4699      	mov	r9, r3
 8001cde:	4623      	mov	r3, r4
 8001ce0:	eb18 0303 	adds.w	r3, r8, r3
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	462b      	mov	r3, r5
 8001ce8:	eb49 0303 	adc.w	r3, r9, r3
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	f04f 0300 	mov.w	r3, #0
 8001cf6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cfa:	4629      	mov	r1, r5
 8001cfc:	024b      	lsls	r3, r1, #9
 8001cfe:	4621      	mov	r1, r4
 8001d00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d04:	4621      	mov	r1, r4
 8001d06:	024a      	lsls	r2, r1, #9
 8001d08:	4610      	mov	r0, r2
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d0e:	2200      	movs	r2, #0
 8001d10:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d18:	f7fe fa72 	bl	8000200 <__aeabi_uldivmod>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4613      	mov	r3, r2
 8001d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d24:	e058      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d26:	4b38      	ldr	r3, [pc, #224]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	099b      	lsrs	r3, r3, #6
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	4618      	mov	r0, r3
 8001d30:	4611      	mov	r1, r2
 8001d32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d36:	623b      	str	r3, [r7, #32]
 8001d38:	2300      	movs	r3, #0
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d40:	4642      	mov	r2, r8
 8001d42:	464b      	mov	r3, r9
 8001d44:	f04f 0000 	mov.w	r0, #0
 8001d48:	f04f 0100 	mov.w	r1, #0
 8001d4c:	0159      	lsls	r1, r3, #5
 8001d4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d52:	0150      	lsls	r0, r2, #5
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4641      	mov	r1, r8
 8001d5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d5e:	4649      	mov	r1, r9
 8001d60:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	f04f 0300 	mov.w	r3, #0
 8001d6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d78:	ebb2 040a 	subs.w	r4, r2, sl
 8001d7c:	eb63 050b 	sbc.w	r5, r3, fp
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	f04f 0300 	mov.w	r3, #0
 8001d88:	00eb      	lsls	r3, r5, #3
 8001d8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d8e:	00e2      	lsls	r2, r4, #3
 8001d90:	4614      	mov	r4, r2
 8001d92:	461d      	mov	r5, r3
 8001d94:	4643      	mov	r3, r8
 8001d96:	18e3      	adds	r3, r4, r3
 8001d98:	603b      	str	r3, [r7, #0]
 8001d9a:	464b      	mov	r3, r9
 8001d9c:	eb45 0303 	adc.w	r3, r5, r3
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dae:	4629      	mov	r1, r5
 8001db0:	028b      	lsls	r3, r1, #10
 8001db2:	4621      	mov	r1, r4
 8001db4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001db8:	4621      	mov	r1, r4
 8001dba:	028a      	lsls	r2, r1, #10
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	61bb      	str	r3, [r7, #24]
 8001dc6:	61fa      	str	r2, [r7, #28]
 8001dc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dcc:	f7fe fa18 	bl	8000200 <__aeabi_uldivmod>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	0c1b      	lsrs	r3, r3, #16
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	3301      	adds	r3, #1
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001de8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001df2:	e002      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x204>)
 8001df6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3750      	adds	r7, #80	; 0x50
 8001e00:	46bd      	mov	sp, r7
 8001e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	00f42400 	.word	0x00f42400
 8001e10:	007a1200 	.word	0x007a1200

08001e14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e18:	4b03      	ldr	r3, [pc, #12]	; (8001e28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20000014 	.word	0x20000014

08001e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e30:	f7ff fff0 	bl	8001e14 <HAL_RCC_GetHCLKFreq>
 8001e34:	4602      	mov	r2, r0
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	0a9b      	lsrs	r3, r3, #10
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	4903      	ldr	r1, [pc, #12]	; (8001e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e42:	5ccb      	ldrb	r3, [r1, r3]
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	08003ad8 	.word	0x08003ad8

08001e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e58:	f7ff ffdc 	bl	8001e14 <HAL_RCC_GetHCLKFreq>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	0b5b      	lsrs	r3, r3, #13
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	4903      	ldr	r1, [pc, #12]	; (8001e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e6a:	5ccb      	ldrb	r3, [r1, r3]
 8001e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40023800 	.word	0x40023800
 8001e78:	08003ad8 	.word	0x08003ad8

08001e7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e03f      	b.n	8001f0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d106      	bne.n	8001ea8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7fe fd28 	bl	80008f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2224      	movs	r2, #36	; 0x24
 8001eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ebe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 fe19 	bl	8002af8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ed4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	695a      	ldr	r2, [r3, #20]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ee4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ef4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2220      	movs	r2, #32
 8001f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2220      	movs	r2, #32
 8001f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b08a      	sub	sp, #40	; 0x28
 8001f1a:	af02      	add	r7, sp, #8
 8001f1c:	60f8      	str	r0, [r7, #12]
 8001f1e:	60b9      	str	r1, [r7, #8]
 8001f20:	603b      	str	r3, [r7, #0]
 8001f22:	4613      	mov	r3, r2
 8001f24:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b20      	cmp	r3, #32
 8001f34:	d17c      	bne.n	8002030 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d002      	beq.n	8001f42 <HAL_UART_Transmit+0x2c>
 8001f3c:	88fb      	ldrh	r3, [r7, #6]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e075      	b.n	8002032 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d101      	bne.n	8001f54 <HAL_UART_Transmit+0x3e>
 8001f50:	2302      	movs	r3, #2
 8001f52:	e06e      	b.n	8002032 <HAL_UART_Transmit+0x11c>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2221      	movs	r2, #33	; 0x21
 8001f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f6a:	f7fe fed3 	bl	8000d14 <HAL_GetTick>
 8001f6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	88fa      	ldrh	r2, [r7, #6]
 8001f74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	88fa      	ldrh	r2, [r7, #6]
 8001f7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f84:	d108      	bne.n	8001f98 <HAL_UART_Transmit+0x82>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d104      	bne.n	8001f98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	61bb      	str	r3, [r7, #24]
 8001f96:	e003      	b.n	8001fa0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001fa8:	e02a      	b.n	8002000 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2180      	movs	r1, #128	; 0x80
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f000 fb59 	bl	800266c <UART_WaitOnFlagUntilTimeout>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e036      	b.n	8002032 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10b      	bne.n	8001fe2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	3302      	adds	r3, #2
 8001fde:	61bb      	str	r3, [r7, #24]
 8001fe0:	e007      	b.n	8001ff2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	781a      	ldrb	r2, [r3, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002004:	b29b      	uxth	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1cf      	bne.n	8001faa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2200      	movs	r2, #0
 8002012:	2140      	movs	r1, #64	; 0x40
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f000 fb29 	bl	800266c <UART_WaitOnFlagUntilTimeout>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e006      	b.n	8002032 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2220      	movs	r2, #32
 8002028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	e000      	b.n	8002032 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002030:	2302      	movs	r3, #2
  }
}
 8002032:	4618      	mov	r0, r3
 8002034:	3720      	adds	r7, #32
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800203a:	b480      	push	{r7}
 800203c:	b085      	sub	sp, #20
 800203e:	af00      	add	r7, sp, #0
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	4613      	mov	r3, r2
 8002046:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b20      	cmp	r3, #32
 8002052:	d130      	bne.n	80020b6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d002      	beq.n	8002060 <HAL_UART_Transmit_IT+0x26>
 800205a:	88fb      	ldrh	r3, [r7, #6]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e029      	b.n	80020b8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800206a:	2b01      	cmp	r3, #1
 800206c:	d101      	bne.n	8002072 <HAL_UART_Transmit_IT+0x38>
 800206e:	2302      	movs	r3, #2
 8002070:	e022      	b.n	80020b8 <HAL_UART_Transmit_IT+0x7e>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	88fa      	ldrh	r2, [r7, #6]
 8002084:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	88fa      	ldrh	r2, [r7, #6]
 800208a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2221      	movs	r2, #33	; 0x21
 8002096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020b0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	e000      	b.n	80020b8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80020b6:	2302      	movs	r3, #2
  }
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	4613      	mov	r3, r2
 80020d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b20      	cmp	r3, #32
 80020dc:	d11d      	bne.n	800211a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d002      	beq.n	80020ea <HAL_UART_Receive_IT+0x26>
 80020e4:	88fb      	ldrh	r3, [r7, #6]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e016      	b.n	800211c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_UART_Receive_IT+0x38>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e00f      	b.n	800211c <HAL_UART_Receive_IT+0x58>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800210a:	88fb      	ldrh	r3, [r7, #6]
 800210c:	461a      	mov	r2, r3
 800210e:	68b9      	ldr	r1, [r7, #8]
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f000 fb19 	bl	8002748 <UART_Start_Receive_IT>
 8002116:	4603      	mov	r3, r0
 8002118:	e000      	b.n	800211c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800211a:	2302      	movs	r3, #2
  }
}
 800211c:	4618      	mov	r0, r3
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b0ba      	sub	sp, #232	; 0xe8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800214a:	2300      	movs	r3, #0
 800214c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002150:	2300      	movs	r3, #0
 8002152:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002162:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10f      	bne.n	800218a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800216a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800216e:	f003 0320 	and.w	r3, r3, #32
 8002172:	2b00      	cmp	r3, #0
 8002174:	d009      	beq.n	800218a <HAL_UART_IRQHandler+0x66>
 8002176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800217a:	f003 0320 	and.w	r3, r3, #32
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 fbfd 	bl	8002982 <UART_Receive_IT>
      return;
 8002188:	e256      	b.n	8002638 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800218a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 80de 	beq.w	8002350 <HAL_UART_IRQHandler+0x22c>
 8002194:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b00      	cmp	r3, #0
 800219e:	d106      	bne.n	80021ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80021a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 80d1 	beq.w	8002350 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80021ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00b      	beq.n	80021d2 <HAL_UART_IRQHandler+0xae>
 80021ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d005      	beq.n	80021d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f043 0201 	orr.w	r2, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00b      	beq.n	80021f6 <HAL_UART_IRQHandler+0xd2>
 80021de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d005      	beq.n	80021f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f043 0202 	orr.w	r2, r3, #2
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00b      	beq.n	800221a <HAL_UART_IRQHandler+0xf6>
 8002202:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d005      	beq.n	800221a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f043 0204 	orr.w	r2, r3, #4
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800221a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	d011      	beq.n	800224a <HAL_UART_IRQHandler+0x126>
 8002226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800222a:	f003 0320 	and.w	r3, r3, #32
 800222e:	2b00      	cmp	r3, #0
 8002230:	d105      	bne.n	800223e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002232:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d005      	beq.n	800224a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	f043 0208 	orr.w	r2, r3, #8
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 81ed 	beq.w	800262e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002258:	f003 0320 	and.w	r3, r3, #32
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <HAL_UART_IRQHandler+0x14e>
 8002260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002264:	f003 0320 	and.w	r3, r3, #32
 8002268:	2b00      	cmp	r3, #0
 800226a:	d002      	beq.n	8002272 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 fb88 	bl	8002982 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227c:	2b40      	cmp	r3, #64	; 0x40
 800227e:	bf0c      	ite	eq
 8002280:	2301      	moveq	r3, #1
 8002282:	2300      	movne	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f003 0308 	and.w	r3, r3, #8
 8002292:	2b00      	cmp	r3, #0
 8002294:	d103      	bne.n	800229e <HAL_UART_IRQHandler+0x17a>
 8002296:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800229a:	2b00      	cmp	r3, #0
 800229c:	d04f      	beq.n	800233e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 fa90 	bl	80027c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ae:	2b40      	cmp	r3, #64	; 0x40
 80022b0:	d141      	bne.n	8002336 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	3314      	adds	r3, #20
 80022b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022c0:	e853 3f00 	ldrex	r3, [r3]
 80022c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80022c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	3314      	adds	r3, #20
 80022da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80022de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80022e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80022ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80022ee:	e841 2300 	strex	r3, r2, [r1]
 80022f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80022f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1d9      	bne.n	80022b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002302:	2b00      	cmp	r3, #0
 8002304:	d013      	beq.n	800232e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230a:	4a7d      	ldr	r2, [pc, #500]	; (8002500 <HAL_UART_IRQHandler+0x3dc>)
 800230c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe feaf 	bl	8001076 <HAL_DMA_Abort_IT>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d016      	beq.n	800234c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002328:	4610      	mov	r0, r2
 800232a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800232c:	e00e      	b.n	800234c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f986 	bl	8002640 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002334:	e00a      	b.n	800234c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f982 	bl	8002640 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800233c:	e006      	b.n	800234c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f97e 	bl	8002640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800234a:	e170      	b.n	800262e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800234c:	bf00      	nop
    return;
 800234e:	e16e      	b.n	800262e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002354:	2b01      	cmp	r3, #1
 8002356:	f040 814a 	bne.w	80025ee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800235a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800235e:	f003 0310 	and.w	r3, r3, #16
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 8143 	beq.w	80025ee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800236c:	f003 0310 	and.w	r3, r3, #16
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 813c 	beq.w	80025ee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002376:	2300      	movs	r3, #0
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002396:	2b40      	cmp	r3, #64	; 0x40
 8002398:	f040 80b4 	bne.w	8002504 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80023a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 8140 	beq.w	8002632 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80023b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80023ba:	429a      	cmp	r2, r3
 80023bc:	f080 8139 	bcs.w	8002632 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80023c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023d2:	f000 8088 	beq.w	80024e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	330c      	adds	r3, #12
 80023dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023e4:	e853 3f00 	ldrex	r3, [r3]
 80023e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80023ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	330c      	adds	r3, #12
 80023fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002402:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002406:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800240a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800240e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002412:	e841 2300 	strex	r3, r2, [r1]
 8002416:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800241a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1d9      	bne.n	80023d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	3314      	adds	r3, #20
 8002428:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800242a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800242c:	e853 3f00 	ldrex	r3, [r3]
 8002430:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002432:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002434:	f023 0301 	bic.w	r3, r3, #1
 8002438:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	3314      	adds	r3, #20
 8002442:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002446:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800244a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800244c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800244e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002452:	e841 2300 	strex	r3, r2, [r1]
 8002456:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002458:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1e1      	bne.n	8002422 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	3314      	adds	r3, #20
 8002464:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002466:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002468:	e853 3f00 	ldrex	r3, [r3]
 800246c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800246e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002470:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002474:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	3314      	adds	r3, #20
 800247e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002482:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002484:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002486:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002488:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800248a:	e841 2300 	strex	r3, r2, [r1]
 800248e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002490:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1e3      	bne.n	800245e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2220      	movs	r2, #32
 800249a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	330c      	adds	r3, #12
 80024aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ae:	e853 3f00 	ldrex	r3, [r3]
 80024b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80024b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024b6:	f023 0310 	bic.w	r3, r3, #16
 80024ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	330c      	adds	r3, #12
 80024c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80024c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80024ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80024ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80024d0:	e841 2300 	strex	r3, r2, [r1]
 80024d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80024d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1e3      	bne.n	80024a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fe fd58 	bl	8000f96 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	4619      	mov	r1, r3
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f8ac 	bl	8002654 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80024fc:	e099      	b.n	8002632 <HAL_UART_IRQHandler+0x50e>
 80024fe:	bf00      	nop
 8002500:	0800288b 	.word	0x0800288b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800250c:	b29b      	uxth	r3, r3
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002518:	b29b      	uxth	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 808b 	beq.w	8002636 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002520:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 8086 	beq.w	8002636 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	330c      	adds	r3, #12
 8002530:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002534:	e853 3f00 	ldrex	r3, [r3]
 8002538:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800253a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800253c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002540:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	330c      	adds	r3, #12
 800254a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800254e:	647a      	str	r2, [r7, #68]	; 0x44
 8002550:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002552:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002554:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002556:	e841 2300 	strex	r3, r2, [r1]
 800255a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800255c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1e3      	bne.n	800252a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	3314      	adds	r3, #20
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	e853 3f00 	ldrex	r3, [r3]
 8002570:	623b      	str	r3, [r7, #32]
   return(result);
 8002572:	6a3b      	ldr	r3, [r7, #32]
 8002574:	f023 0301 	bic.w	r3, r3, #1
 8002578:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	3314      	adds	r3, #20
 8002582:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002586:	633a      	str	r2, [r7, #48]	; 0x30
 8002588:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800258a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800258c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800258e:	e841 2300 	strex	r3, r2, [r1]
 8002592:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1e3      	bne.n	8002562 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2220      	movs	r2, #32
 800259e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	330c      	adds	r3, #12
 80025ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	e853 3f00 	ldrex	r3, [r3]
 80025b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f023 0310 	bic.w	r3, r3, #16
 80025be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	330c      	adds	r3, #12
 80025c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80025cc:	61fa      	str	r2, [r7, #28]
 80025ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025d0:	69b9      	ldr	r1, [r7, #24]
 80025d2:	69fa      	ldr	r2, [r7, #28]
 80025d4:	e841 2300 	strex	r3, r2, [r1]
 80025d8:	617b      	str	r3, [r7, #20]
   return(result);
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1e3      	bne.n	80025a8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80025e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80025e4:	4619      	mov	r1, r3
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f834 	bl	8002654 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80025ec:	e023      	b.n	8002636 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80025ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d009      	beq.n	800260e <HAL_UART_IRQHandler+0x4ea>
 80025fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f953 	bl	80028b2 <UART_Transmit_IT>
    return;
 800260c:	e014      	b.n	8002638 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800260e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00e      	beq.n	8002638 <HAL_UART_IRQHandler+0x514>
 800261a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800261e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002622:	2b00      	cmp	r3, #0
 8002624:	d008      	beq.n	8002638 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f993 	bl	8002952 <UART_EndTransmit_IT>
    return;
 800262c:	e004      	b.n	8002638 <HAL_UART_IRQHandler+0x514>
    return;
 800262e:	bf00      	nop
 8002630:	e002      	b.n	8002638 <HAL_UART_IRQHandler+0x514>
      return;
 8002632:	bf00      	nop
 8002634:	e000      	b.n	8002638 <HAL_UART_IRQHandler+0x514>
      return;
 8002636:	bf00      	nop
  }
}
 8002638:	37e8      	adds	r7, #232	; 0xe8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop

08002640 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b090      	sub	sp, #64	; 0x40
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	603b      	str	r3, [r7, #0]
 8002678:	4613      	mov	r3, r2
 800267a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800267c:	e050      	b.n	8002720 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800267e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002684:	d04c      	beq.n	8002720 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002686:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002688:	2b00      	cmp	r3, #0
 800268a:	d007      	beq.n	800269c <UART_WaitOnFlagUntilTimeout+0x30>
 800268c:	f7fe fb42 	bl	8000d14 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002698:	429a      	cmp	r2, r3
 800269a:	d241      	bcs.n	8002720 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	330c      	adds	r3, #12
 80026a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a6:	e853 3f00 	ldrex	r3, [r3]
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80026b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	330c      	adds	r3, #12
 80026ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026bc:	637a      	str	r2, [r7, #52]	; 0x34
 80026be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026c4:	e841 2300 	strex	r3, r2, [r1]
 80026c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80026ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1e5      	bne.n	800269c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	3314      	adds	r3, #20
 80026d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	e853 3f00 	ldrex	r3, [r3]
 80026de:	613b      	str	r3, [r7, #16]
   return(result);
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	f023 0301 	bic.w	r3, r3, #1
 80026e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	3314      	adds	r3, #20
 80026ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026f0:	623a      	str	r2, [r7, #32]
 80026f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026f4:	69f9      	ldr	r1, [r7, #28]
 80026f6:	6a3a      	ldr	r2, [r7, #32]
 80026f8:	e841 2300 	strex	r3, r2, [r1]
 80026fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1e5      	bne.n	80026d0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2220      	movs	r2, #32
 8002708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2220      	movs	r2, #32
 8002710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e00f      	b.n	8002740 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	4013      	ands	r3, r2
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	429a      	cmp	r2, r3
 800272e:	bf0c      	ite	eq
 8002730:	2301      	moveq	r3, #1
 8002732:	2300      	movne	r3, #0
 8002734:	b2db      	uxtb	r3, r3
 8002736:	461a      	mov	r2, r3
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	429a      	cmp	r2, r3
 800273c:	d09f      	beq.n	800267e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3740      	adds	r7, #64	; 0x40
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	4613      	mov	r3, r2
 8002754:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	88fa      	ldrh	r2, [r7, #6]
 8002760:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	88fa      	ldrh	r2, [r7, #6]
 8002766:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2222      	movs	r2, #34	; 0x22
 8002772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d007      	beq.n	8002796 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002794:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695a      	ldr	r2, [r3, #20]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f042 0201 	orr.w	r2, r2, #1
 80027a4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f042 0220 	orr.w	r2, r2, #32
 80027b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b095      	sub	sp, #84	; 0x54
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	330c      	adds	r3, #12
 80027d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d6:	e853 3f00 	ldrex	r3, [r3]
 80027da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80027dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80027e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	330c      	adds	r3, #12
 80027ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027ec:	643a      	str	r2, [r7, #64]	; 0x40
 80027ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80027f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80027f4:	e841 2300 	strex	r3, r2, [r1]
 80027f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80027fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1e5      	bne.n	80027cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	3314      	adds	r3, #20
 8002806:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002808:	6a3b      	ldr	r3, [r7, #32]
 800280a:	e853 3f00 	ldrex	r3, [r3]
 800280e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f023 0301 	bic.w	r3, r3, #1
 8002816:	64bb      	str	r3, [r7, #72]	; 0x48
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	3314      	adds	r3, #20
 800281e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002820:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002822:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002824:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002828:	e841 2300 	strex	r3, r2, [r1]
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1e5      	bne.n	8002800 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002838:	2b01      	cmp	r3, #1
 800283a:	d119      	bne.n	8002870 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	330c      	adds	r3, #12
 8002842:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	e853 3f00 	ldrex	r3, [r3]
 800284a:	60bb      	str	r3, [r7, #8]
   return(result);
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f023 0310 	bic.w	r3, r3, #16
 8002852:	647b      	str	r3, [r7, #68]	; 0x44
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	330c      	adds	r3, #12
 800285a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800285c:	61ba      	str	r2, [r7, #24]
 800285e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002860:	6979      	ldr	r1, [r7, #20]
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	e841 2300 	strex	r3, r2, [r1]
 8002868:	613b      	str	r3, [r7, #16]
   return(result);
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1e5      	bne.n	800283c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2220      	movs	r2, #32
 8002874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800287e:	bf00      	nop
 8002880:	3754      	adds	r7, #84	; 0x54
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b084      	sub	sp, #16
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002896:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f7ff fecb 	bl	8002640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b085      	sub	sp, #20
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b21      	cmp	r3, #33	; 0x21
 80028c4:	d13e      	bne.n	8002944 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ce:	d114      	bne.n	80028fa <UART_Transmit_IT+0x48>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d110      	bne.n	80028fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	1c9a      	adds	r2, r3, #2
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	621a      	str	r2, [r3, #32]
 80028f8:	e008      	b.n	800290c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	1c59      	adds	r1, r3, #1
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6211      	str	r1, [r2, #32]
 8002904:	781a      	ldrb	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002910:	b29b      	uxth	r3, r3
 8002912:	3b01      	subs	r3, #1
 8002914:	b29b      	uxth	r3, r3
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	4619      	mov	r1, r3
 800291a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10f      	bne.n	8002940 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68da      	ldr	r2, [r3, #12]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800292e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800293e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	e000      	b.n	8002946 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002944:	2302      	movs	r3, #2
  }
}
 8002946:	4618      	mov	r0, r3
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002968:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2220      	movs	r2, #32
 800296e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7fd ff5c 	bl	8000830 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b08c      	sub	sp, #48	; 0x30
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b22      	cmp	r3, #34	; 0x22
 8002994:	f040 80ab 	bne.w	8002aee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029a0:	d117      	bne.n	80029d2 <UART_Receive_IT+0x50>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d113      	bne.n	80029d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ca:	1c9a      	adds	r2, r3, #2
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	629a      	str	r2, [r3, #40]	; 0x28
 80029d0:	e026      	b.n	8002a20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029e4:	d007      	beq.n	80029f6 <UART_Receive_IT+0x74>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10a      	bne.n	8002a04 <UART_Receive_IT+0x82>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d106      	bne.n	8002a04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a00:	701a      	strb	r2, [r3, #0]
 8002a02:	e008      	b.n	8002a16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1a:	1c5a      	adds	r2, r3, #1
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d15a      	bne.n	8002aea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0220 	bic.w	r2, r2, #32
 8002a42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	695a      	ldr	r2, [r3, #20]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0201 	bic.w	r2, r2, #1
 8002a62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2220      	movs	r2, #32
 8002a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d135      	bne.n	8002ae0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	330c      	adds	r3, #12
 8002a80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	e853 3f00 	ldrex	r3, [r3]
 8002a88:	613b      	str	r3, [r7, #16]
   return(result);
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	f023 0310 	bic.w	r3, r3, #16
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	330c      	adds	r3, #12
 8002a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a9a:	623a      	str	r2, [r7, #32]
 8002a9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a9e:	69f9      	ldr	r1, [r7, #28]
 8002aa0:	6a3a      	ldr	r2, [r7, #32]
 8002aa2:	e841 2300 	strex	r3, r2, [r1]
 8002aa6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1e5      	bne.n	8002a7a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0310 	and.w	r3, r3, #16
 8002ab8:	2b10      	cmp	r3, #16
 8002aba:	d10a      	bne.n	8002ad2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002abc:	2300      	movs	r3, #0
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7ff fdbb 	bl	8002654 <HAL_UARTEx_RxEventCallback>
 8002ade:	e002      	b.n	8002ae6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7fd feb5 	bl	8000850 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	e002      	b.n	8002af0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	e000      	b.n	8002af0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002aee:	2302      	movs	r3, #2
  }
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3730      	adds	r7, #48	; 0x30
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002afc:	b0c0      	sub	sp, #256	; 0x100
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b14:	68d9      	ldr	r1, [r3, #12]
 8002b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	ea40 0301 	orr.w	r3, r0, r1
 8002b20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	431a      	orrs	r2, r3
 8002b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b50:	f021 010c 	bic.w	r1, r1, #12
 8002b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b5e:	430b      	orrs	r3, r1
 8002b60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b72:	6999      	ldr	r1, [r3, #24]
 8002b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	ea40 0301 	orr.w	r3, r0, r1
 8002b7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	4b8f      	ldr	r3, [pc, #572]	; (8002dc4 <UART_SetConfig+0x2cc>)
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d005      	beq.n	8002b98 <UART_SetConfig+0xa0>
 8002b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	4b8d      	ldr	r3, [pc, #564]	; (8002dc8 <UART_SetConfig+0x2d0>)
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d104      	bne.n	8002ba2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b98:	f7ff f95c 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 8002b9c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ba0:	e003      	b.n	8002baa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ba2:	f7ff f943 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 8002ba6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bb4:	f040 810c 	bne.w	8002dd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002bc2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002bc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002bca:	4622      	mov	r2, r4
 8002bcc:	462b      	mov	r3, r5
 8002bce:	1891      	adds	r1, r2, r2
 8002bd0:	65b9      	str	r1, [r7, #88]	; 0x58
 8002bd2:	415b      	adcs	r3, r3
 8002bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002bda:	4621      	mov	r1, r4
 8002bdc:	eb12 0801 	adds.w	r8, r2, r1
 8002be0:	4629      	mov	r1, r5
 8002be2:	eb43 0901 	adc.w	r9, r3, r1
 8002be6:	f04f 0200 	mov.w	r2, #0
 8002bea:	f04f 0300 	mov.w	r3, #0
 8002bee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bfa:	4690      	mov	r8, r2
 8002bfc:	4699      	mov	r9, r3
 8002bfe:	4623      	mov	r3, r4
 8002c00:	eb18 0303 	adds.w	r3, r8, r3
 8002c04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c08:	462b      	mov	r3, r5
 8002c0a:	eb49 0303 	adc.w	r3, r9, r3
 8002c0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c1e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c26:	460b      	mov	r3, r1
 8002c28:	18db      	adds	r3, r3, r3
 8002c2a:	653b      	str	r3, [r7, #80]	; 0x50
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	eb42 0303 	adc.w	r3, r2, r3
 8002c32:	657b      	str	r3, [r7, #84]	; 0x54
 8002c34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c3c:	f7fd fae0 	bl	8000200 <__aeabi_uldivmod>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4b61      	ldr	r3, [pc, #388]	; (8002dcc <UART_SetConfig+0x2d4>)
 8002c46:	fba3 2302 	umull	r2, r3, r3, r2
 8002c4a:	095b      	lsrs	r3, r3, #5
 8002c4c:	011c      	lsls	r4, r3, #4
 8002c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c52:	2200      	movs	r2, #0
 8002c54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c58:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c60:	4642      	mov	r2, r8
 8002c62:	464b      	mov	r3, r9
 8002c64:	1891      	adds	r1, r2, r2
 8002c66:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c68:	415b      	adcs	r3, r3
 8002c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c70:	4641      	mov	r1, r8
 8002c72:	eb12 0a01 	adds.w	sl, r2, r1
 8002c76:	4649      	mov	r1, r9
 8002c78:	eb43 0b01 	adc.w	fp, r3, r1
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c90:	4692      	mov	sl, r2
 8002c92:	469b      	mov	fp, r3
 8002c94:	4643      	mov	r3, r8
 8002c96:	eb1a 0303 	adds.w	r3, sl, r3
 8002c9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c9e:	464b      	mov	r3, r9
 8002ca0:	eb4b 0303 	adc.w	r3, fp, r3
 8002ca4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cb4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002cb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	18db      	adds	r3, r3, r3
 8002cc0:	643b      	str	r3, [r7, #64]	; 0x40
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	eb42 0303 	adc.w	r3, r2, r3
 8002cc8:	647b      	str	r3, [r7, #68]	; 0x44
 8002cca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002cce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002cd2:	f7fd fa95 	bl	8000200 <__aeabi_uldivmod>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4611      	mov	r1, r2
 8002cdc:	4b3b      	ldr	r3, [pc, #236]	; (8002dcc <UART_SetConfig+0x2d4>)
 8002cde:	fba3 2301 	umull	r2, r3, r3, r1
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	2264      	movs	r2, #100	; 0x64
 8002ce6:	fb02 f303 	mul.w	r3, r2, r3
 8002cea:	1acb      	subs	r3, r1, r3
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002cf2:	4b36      	ldr	r3, [pc, #216]	; (8002dcc <UART_SetConfig+0x2d4>)
 8002cf4:	fba3 2302 	umull	r2, r3, r3, r2
 8002cf8:	095b      	lsrs	r3, r3, #5
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d00:	441c      	add	r4, r3
 8002d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d06:	2200      	movs	r2, #0
 8002d08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d0c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002d10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002d14:	4642      	mov	r2, r8
 8002d16:	464b      	mov	r3, r9
 8002d18:	1891      	adds	r1, r2, r2
 8002d1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d1c:	415b      	adcs	r3, r3
 8002d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d24:	4641      	mov	r1, r8
 8002d26:	1851      	adds	r1, r2, r1
 8002d28:	6339      	str	r1, [r7, #48]	; 0x30
 8002d2a:	4649      	mov	r1, r9
 8002d2c:	414b      	adcs	r3, r1
 8002d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	f04f 0300 	mov.w	r3, #0
 8002d38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d3c:	4659      	mov	r1, fp
 8002d3e:	00cb      	lsls	r3, r1, #3
 8002d40:	4651      	mov	r1, sl
 8002d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d46:	4651      	mov	r1, sl
 8002d48:	00ca      	lsls	r2, r1, #3
 8002d4a:	4610      	mov	r0, r2
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4603      	mov	r3, r0
 8002d50:	4642      	mov	r2, r8
 8002d52:	189b      	adds	r3, r3, r2
 8002d54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d58:	464b      	mov	r3, r9
 8002d5a:	460a      	mov	r2, r1
 8002d5c:	eb42 0303 	adc.w	r3, r2, r3
 8002d60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d70:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d78:	460b      	mov	r3, r1
 8002d7a:	18db      	adds	r3, r3, r3
 8002d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d7e:	4613      	mov	r3, r2
 8002d80:	eb42 0303 	adc.w	r3, r2, r3
 8002d84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d8e:	f7fd fa37 	bl	8000200 <__aeabi_uldivmod>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	4b0d      	ldr	r3, [pc, #52]	; (8002dcc <UART_SetConfig+0x2d4>)
 8002d98:	fba3 1302 	umull	r1, r3, r3, r2
 8002d9c:	095b      	lsrs	r3, r3, #5
 8002d9e:	2164      	movs	r1, #100	; 0x64
 8002da0:	fb01 f303 	mul.w	r3, r1, r3
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	3332      	adds	r3, #50	; 0x32
 8002daa:	4a08      	ldr	r2, [pc, #32]	; (8002dcc <UART_SetConfig+0x2d4>)
 8002dac:	fba2 2303 	umull	r2, r3, r2, r3
 8002db0:	095b      	lsrs	r3, r3, #5
 8002db2:	f003 0207 	and.w	r2, r3, #7
 8002db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4422      	add	r2, r4
 8002dbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002dc0:	e105      	b.n	8002fce <UART_SetConfig+0x4d6>
 8002dc2:	bf00      	nop
 8002dc4:	40011000 	.word	0x40011000
 8002dc8:	40011400 	.word	0x40011400
 8002dcc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002dda:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002dde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002de2:	4642      	mov	r2, r8
 8002de4:	464b      	mov	r3, r9
 8002de6:	1891      	adds	r1, r2, r2
 8002de8:	6239      	str	r1, [r7, #32]
 8002dea:	415b      	adcs	r3, r3
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
 8002dee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002df2:	4641      	mov	r1, r8
 8002df4:	1854      	adds	r4, r2, r1
 8002df6:	4649      	mov	r1, r9
 8002df8:	eb43 0501 	adc.w	r5, r3, r1
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	00eb      	lsls	r3, r5, #3
 8002e06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e0a:	00e2      	lsls	r2, r4, #3
 8002e0c:	4614      	mov	r4, r2
 8002e0e:	461d      	mov	r5, r3
 8002e10:	4643      	mov	r3, r8
 8002e12:	18e3      	adds	r3, r4, r3
 8002e14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e18:	464b      	mov	r3, r9
 8002e1a:	eb45 0303 	adc.w	r3, r5, r3
 8002e1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	f04f 0300 	mov.w	r3, #0
 8002e3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e3e:	4629      	mov	r1, r5
 8002e40:	008b      	lsls	r3, r1, #2
 8002e42:	4621      	mov	r1, r4
 8002e44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e48:	4621      	mov	r1, r4
 8002e4a:	008a      	lsls	r2, r1, #2
 8002e4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e50:	f7fd f9d6 	bl	8000200 <__aeabi_uldivmod>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	4b60      	ldr	r3, [pc, #384]	; (8002fdc <UART_SetConfig+0x4e4>)
 8002e5a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e5e:	095b      	lsrs	r3, r3, #5
 8002e60:	011c      	lsls	r4, r3, #4
 8002e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e66:	2200      	movs	r2, #0
 8002e68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002e74:	4642      	mov	r2, r8
 8002e76:	464b      	mov	r3, r9
 8002e78:	1891      	adds	r1, r2, r2
 8002e7a:	61b9      	str	r1, [r7, #24]
 8002e7c:	415b      	adcs	r3, r3
 8002e7e:	61fb      	str	r3, [r7, #28]
 8002e80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e84:	4641      	mov	r1, r8
 8002e86:	1851      	adds	r1, r2, r1
 8002e88:	6139      	str	r1, [r7, #16]
 8002e8a:	4649      	mov	r1, r9
 8002e8c:	414b      	adcs	r3, r1
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	f04f 0300 	mov.w	r3, #0
 8002e98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e9c:	4659      	mov	r1, fp
 8002e9e:	00cb      	lsls	r3, r1, #3
 8002ea0:	4651      	mov	r1, sl
 8002ea2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ea6:	4651      	mov	r1, sl
 8002ea8:	00ca      	lsls	r2, r1, #3
 8002eaa:	4610      	mov	r0, r2
 8002eac:	4619      	mov	r1, r3
 8002eae:	4603      	mov	r3, r0
 8002eb0:	4642      	mov	r2, r8
 8002eb2:	189b      	adds	r3, r3, r2
 8002eb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002eb8:	464b      	mov	r3, r9
 8002eba:	460a      	mov	r2, r1
 8002ebc:	eb42 0303 	adc.w	r3, r2, r3
 8002ec0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ece:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002ed0:	f04f 0200 	mov.w	r2, #0
 8002ed4:	f04f 0300 	mov.w	r3, #0
 8002ed8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002edc:	4649      	mov	r1, r9
 8002ede:	008b      	lsls	r3, r1, #2
 8002ee0:	4641      	mov	r1, r8
 8002ee2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ee6:	4641      	mov	r1, r8
 8002ee8:	008a      	lsls	r2, r1, #2
 8002eea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002eee:	f7fd f987 	bl	8000200 <__aeabi_uldivmod>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4b39      	ldr	r3, [pc, #228]	; (8002fdc <UART_SetConfig+0x4e4>)
 8002ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8002efc:	095b      	lsrs	r3, r3, #5
 8002efe:	2164      	movs	r1, #100	; 0x64
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	3332      	adds	r3, #50	; 0x32
 8002f0a:	4a34      	ldr	r2, [pc, #208]	; (8002fdc <UART_SetConfig+0x4e4>)
 8002f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f10:	095b      	lsrs	r3, r3, #5
 8002f12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f16:	441c      	add	r4, r3
 8002f18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	673b      	str	r3, [r7, #112]	; 0x70
 8002f20:	677a      	str	r2, [r7, #116]	; 0x74
 8002f22:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f26:	4642      	mov	r2, r8
 8002f28:	464b      	mov	r3, r9
 8002f2a:	1891      	adds	r1, r2, r2
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	415b      	adcs	r3, r3
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f36:	4641      	mov	r1, r8
 8002f38:	1851      	adds	r1, r2, r1
 8002f3a:	6039      	str	r1, [r7, #0]
 8002f3c:	4649      	mov	r1, r9
 8002f3e:	414b      	adcs	r3, r1
 8002f40:	607b      	str	r3, [r7, #4]
 8002f42:	f04f 0200 	mov.w	r2, #0
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f4e:	4659      	mov	r1, fp
 8002f50:	00cb      	lsls	r3, r1, #3
 8002f52:	4651      	mov	r1, sl
 8002f54:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f58:	4651      	mov	r1, sl
 8002f5a:	00ca      	lsls	r2, r1, #3
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4603      	mov	r3, r0
 8002f62:	4642      	mov	r2, r8
 8002f64:	189b      	adds	r3, r3, r2
 8002f66:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f68:	464b      	mov	r3, r9
 8002f6a:	460a      	mov	r2, r1
 8002f6c:	eb42 0303 	adc.w	r3, r2, r3
 8002f70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	663b      	str	r3, [r7, #96]	; 0x60
 8002f7c:	667a      	str	r2, [r7, #100]	; 0x64
 8002f7e:	f04f 0200 	mov.w	r2, #0
 8002f82:	f04f 0300 	mov.w	r3, #0
 8002f86:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f8a:	4649      	mov	r1, r9
 8002f8c:	008b      	lsls	r3, r1, #2
 8002f8e:	4641      	mov	r1, r8
 8002f90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f94:	4641      	mov	r1, r8
 8002f96:	008a      	lsls	r2, r1, #2
 8002f98:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f9c:	f7fd f930 	bl	8000200 <__aeabi_uldivmod>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4b0d      	ldr	r3, [pc, #52]	; (8002fdc <UART_SetConfig+0x4e4>)
 8002fa6:	fba3 1302 	umull	r1, r3, r3, r2
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	2164      	movs	r1, #100	; 0x64
 8002fae:	fb01 f303 	mul.w	r3, r1, r3
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	3332      	adds	r3, #50	; 0x32
 8002fb8:	4a08      	ldr	r2, [pc, #32]	; (8002fdc <UART_SetConfig+0x4e4>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	095b      	lsrs	r3, r3, #5
 8002fc0:	f003 020f 	and.w	r2, r3, #15
 8002fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4422      	add	r2, r4
 8002fcc:	609a      	str	r2, [r3, #8]
}
 8002fce:	bf00      	nop
 8002fd0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fda:	bf00      	nop
 8002fdc:	51eb851f 	.word	0x51eb851f

08002fe0 <__errno>:
 8002fe0:	4b01      	ldr	r3, [pc, #4]	; (8002fe8 <__errno+0x8>)
 8002fe2:	6818      	ldr	r0, [r3, #0]
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	20000020 	.word	0x20000020

08002fec <__libc_init_array>:
 8002fec:	b570      	push	{r4, r5, r6, lr}
 8002fee:	4d0d      	ldr	r5, [pc, #52]	; (8003024 <__libc_init_array+0x38>)
 8002ff0:	4c0d      	ldr	r4, [pc, #52]	; (8003028 <__libc_init_array+0x3c>)
 8002ff2:	1b64      	subs	r4, r4, r5
 8002ff4:	10a4      	asrs	r4, r4, #2
 8002ff6:	2600      	movs	r6, #0
 8002ff8:	42a6      	cmp	r6, r4
 8002ffa:	d109      	bne.n	8003010 <__libc_init_array+0x24>
 8002ffc:	4d0b      	ldr	r5, [pc, #44]	; (800302c <__libc_init_array+0x40>)
 8002ffe:	4c0c      	ldr	r4, [pc, #48]	; (8003030 <__libc_init_array+0x44>)
 8003000:	f000 fd26 	bl	8003a50 <_init>
 8003004:	1b64      	subs	r4, r4, r5
 8003006:	10a4      	asrs	r4, r4, #2
 8003008:	2600      	movs	r6, #0
 800300a:	42a6      	cmp	r6, r4
 800300c:	d105      	bne.n	800301a <__libc_init_array+0x2e>
 800300e:	bd70      	pop	{r4, r5, r6, pc}
 8003010:	f855 3b04 	ldr.w	r3, [r5], #4
 8003014:	4798      	blx	r3
 8003016:	3601      	adds	r6, #1
 8003018:	e7ee      	b.n	8002ff8 <__libc_init_array+0xc>
 800301a:	f855 3b04 	ldr.w	r3, [r5], #4
 800301e:	4798      	blx	r3
 8003020:	3601      	adds	r6, #1
 8003022:	e7f2      	b.n	800300a <__libc_init_array+0x1e>
 8003024:	08003b4c 	.word	0x08003b4c
 8003028:	08003b4c 	.word	0x08003b4c
 800302c:	08003b4c 	.word	0x08003b4c
 8003030:	08003b50 	.word	0x08003b50

08003034 <malloc>:
 8003034:	4b02      	ldr	r3, [pc, #8]	; (8003040 <malloc+0xc>)
 8003036:	4601      	mov	r1, r0
 8003038:	6818      	ldr	r0, [r3, #0]
 800303a:	f000 b877 	b.w	800312c <_malloc_r>
 800303e:	bf00      	nop
 8003040:	20000020 	.word	0x20000020

08003044 <memset>:
 8003044:	4402      	add	r2, r0
 8003046:	4603      	mov	r3, r0
 8003048:	4293      	cmp	r3, r2
 800304a:	d100      	bne.n	800304e <memset+0xa>
 800304c:	4770      	bx	lr
 800304e:	f803 1b01 	strb.w	r1, [r3], #1
 8003052:	e7f9      	b.n	8003048 <memset+0x4>

08003054 <_free_r>:
 8003054:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003056:	2900      	cmp	r1, #0
 8003058:	d044      	beq.n	80030e4 <_free_r+0x90>
 800305a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800305e:	9001      	str	r0, [sp, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	f1a1 0404 	sub.w	r4, r1, #4
 8003066:	bfb8      	it	lt
 8003068:	18e4      	addlt	r4, r4, r3
 800306a:	f000 fc39 	bl	80038e0 <__malloc_lock>
 800306e:	4a1e      	ldr	r2, [pc, #120]	; (80030e8 <_free_r+0x94>)
 8003070:	9801      	ldr	r0, [sp, #4]
 8003072:	6813      	ldr	r3, [r2, #0]
 8003074:	b933      	cbnz	r3, 8003084 <_free_r+0x30>
 8003076:	6063      	str	r3, [r4, #4]
 8003078:	6014      	str	r4, [r2, #0]
 800307a:	b003      	add	sp, #12
 800307c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003080:	f000 bc34 	b.w	80038ec <__malloc_unlock>
 8003084:	42a3      	cmp	r3, r4
 8003086:	d908      	bls.n	800309a <_free_r+0x46>
 8003088:	6825      	ldr	r5, [r4, #0]
 800308a:	1961      	adds	r1, r4, r5
 800308c:	428b      	cmp	r3, r1
 800308e:	bf01      	itttt	eq
 8003090:	6819      	ldreq	r1, [r3, #0]
 8003092:	685b      	ldreq	r3, [r3, #4]
 8003094:	1949      	addeq	r1, r1, r5
 8003096:	6021      	streq	r1, [r4, #0]
 8003098:	e7ed      	b.n	8003076 <_free_r+0x22>
 800309a:	461a      	mov	r2, r3
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	b10b      	cbz	r3, 80030a4 <_free_r+0x50>
 80030a0:	42a3      	cmp	r3, r4
 80030a2:	d9fa      	bls.n	800309a <_free_r+0x46>
 80030a4:	6811      	ldr	r1, [r2, #0]
 80030a6:	1855      	adds	r5, r2, r1
 80030a8:	42a5      	cmp	r5, r4
 80030aa:	d10b      	bne.n	80030c4 <_free_r+0x70>
 80030ac:	6824      	ldr	r4, [r4, #0]
 80030ae:	4421      	add	r1, r4
 80030b0:	1854      	adds	r4, r2, r1
 80030b2:	42a3      	cmp	r3, r4
 80030b4:	6011      	str	r1, [r2, #0]
 80030b6:	d1e0      	bne.n	800307a <_free_r+0x26>
 80030b8:	681c      	ldr	r4, [r3, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	6053      	str	r3, [r2, #4]
 80030be:	4421      	add	r1, r4
 80030c0:	6011      	str	r1, [r2, #0]
 80030c2:	e7da      	b.n	800307a <_free_r+0x26>
 80030c4:	d902      	bls.n	80030cc <_free_r+0x78>
 80030c6:	230c      	movs	r3, #12
 80030c8:	6003      	str	r3, [r0, #0]
 80030ca:	e7d6      	b.n	800307a <_free_r+0x26>
 80030cc:	6825      	ldr	r5, [r4, #0]
 80030ce:	1961      	adds	r1, r4, r5
 80030d0:	428b      	cmp	r3, r1
 80030d2:	bf04      	itt	eq
 80030d4:	6819      	ldreq	r1, [r3, #0]
 80030d6:	685b      	ldreq	r3, [r3, #4]
 80030d8:	6063      	str	r3, [r4, #4]
 80030da:	bf04      	itt	eq
 80030dc:	1949      	addeq	r1, r1, r5
 80030de:	6021      	streq	r1, [r4, #0]
 80030e0:	6054      	str	r4, [r2, #4]
 80030e2:	e7ca      	b.n	800307a <_free_r+0x26>
 80030e4:	b003      	add	sp, #12
 80030e6:	bd30      	pop	{r4, r5, pc}
 80030e8:	20000134 	.word	0x20000134

080030ec <sbrk_aligned>:
 80030ec:	b570      	push	{r4, r5, r6, lr}
 80030ee:	4e0e      	ldr	r6, [pc, #56]	; (8003128 <sbrk_aligned+0x3c>)
 80030f0:	460c      	mov	r4, r1
 80030f2:	6831      	ldr	r1, [r6, #0]
 80030f4:	4605      	mov	r5, r0
 80030f6:	b911      	cbnz	r1, 80030fe <sbrk_aligned+0x12>
 80030f8:	f000 f902 	bl	8003300 <_sbrk_r>
 80030fc:	6030      	str	r0, [r6, #0]
 80030fe:	4621      	mov	r1, r4
 8003100:	4628      	mov	r0, r5
 8003102:	f000 f8fd 	bl	8003300 <_sbrk_r>
 8003106:	1c43      	adds	r3, r0, #1
 8003108:	d00a      	beq.n	8003120 <sbrk_aligned+0x34>
 800310a:	1cc4      	adds	r4, r0, #3
 800310c:	f024 0403 	bic.w	r4, r4, #3
 8003110:	42a0      	cmp	r0, r4
 8003112:	d007      	beq.n	8003124 <sbrk_aligned+0x38>
 8003114:	1a21      	subs	r1, r4, r0
 8003116:	4628      	mov	r0, r5
 8003118:	f000 f8f2 	bl	8003300 <_sbrk_r>
 800311c:	3001      	adds	r0, #1
 800311e:	d101      	bne.n	8003124 <sbrk_aligned+0x38>
 8003120:	f04f 34ff 	mov.w	r4, #4294967295
 8003124:	4620      	mov	r0, r4
 8003126:	bd70      	pop	{r4, r5, r6, pc}
 8003128:	20000138 	.word	0x20000138

0800312c <_malloc_r>:
 800312c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003130:	1ccd      	adds	r5, r1, #3
 8003132:	f025 0503 	bic.w	r5, r5, #3
 8003136:	3508      	adds	r5, #8
 8003138:	2d0c      	cmp	r5, #12
 800313a:	bf38      	it	cc
 800313c:	250c      	movcc	r5, #12
 800313e:	2d00      	cmp	r5, #0
 8003140:	4607      	mov	r7, r0
 8003142:	db01      	blt.n	8003148 <_malloc_r+0x1c>
 8003144:	42a9      	cmp	r1, r5
 8003146:	d905      	bls.n	8003154 <_malloc_r+0x28>
 8003148:	230c      	movs	r3, #12
 800314a:	603b      	str	r3, [r7, #0]
 800314c:	2600      	movs	r6, #0
 800314e:	4630      	mov	r0, r6
 8003150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003154:	4e2e      	ldr	r6, [pc, #184]	; (8003210 <_malloc_r+0xe4>)
 8003156:	f000 fbc3 	bl	80038e0 <__malloc_lock>
 800315a:	6833      	ldr	r3, [r6, #0]
 800315c:	461c      	mov	r4, r3
 800315e:	bb34      	cbnz	r4, 80031ae <_malloc_r+0x82>
 8003160:	4629      	mov	r1, r5
 8003162:	4638      	mov	r0, r7
 8003164:	f7ff ffc2 	bl	80030ec <sbrk_aligned>
 8003168:	1c43      	adds	r3, r0, #1
 800316a:	4604      	mov	r4, r0
 800316c:	d14d      	bne.n	800320a <_malloc_r+0xde>
 800316e:	6834      	ldr	r4, [r6, #0]
 8003170:	4626      	mov	r6, r4
 8003172:	2e00      	cmp	r6, #0
 8003174:	d140      	bne.n	80031f8 <_malloc_r+0xcc>
 8003176:	6823      	ldr	r3, [r4, #0]
 8003178:	4631      	mov	r1, r6
 800317a:	4638      	mov	r0, r7
 800317c:	eb04 0803 	add.w	r8, r4, r3
 8003180:	f000 f8be 	bl	8003300 <_sbrk_r>
 8003184:	4580      	cmp	r8, r0
 8003186:	d13a      	bne.n	80031fe <_malloc_r+0xd2>
 8003188:	6821      	ldr	r1, [r4, #0]
 800318a:	3503      	adds	r5, #3
 800318c:	1a6d      	subs	r5, r5, r1
 800318e:	f025 0503 	bic.w	r5, r5, #3
 8003192:	3508      	adds	r5, #8
 8003194:	2d0c      	cmp	r5, #12
 8003196:	bf38      	it	cc
 8003198:	250c      	movcc	r5, #12
 800319a:	4629      	mov	r1, r5
 800319c:	4638      	mov	r0, r7
 800319e:	f7ff ffa5 	bl	80030ec <sbrk_aligned>
 80031a2:	3001      	adds	r0, #1
 80031a4:	d02b      	beq.n	80031fe <_malloc_r+0xd2>
 80031a6:	6823      	ldr	r3, [r4, #0]
 80031a8:	442b      	add	r3, r5
 80031aa:	6023      	str	r3, [r4, #0]
 80031ac:	e00e      	b.n	80031cc <_malloc_r+0xa0>
 80031ae:	6822      	ldr	r2, [r4, #0]
 80031b0:	1b52      	subs	r2, r2, r5
 80031b2:	d41e      	bmi.n	80031f2 <_malloc_r+0xc6>
 80031b4:	2a0b      	cmp	r2, #11
 80031b6:	d916      	bls.n	80031e6 <_malloc_r+0xba>
 80031b8:	1961      	adds	r1, r4, r5
 80031ba:	42a3      	cmp	r3, r4
 80031bc:	6025      	str	r5, [r4, #0]
 80031be:	bf18      	it	ne
 80031c0:	6059      	strne	r1, [r3, #4]
 80031c2:	6863      	ldr	r3, [r4, #4]
 80031c4:	bf08      	it	eq
 80031c6:	6031      	streq	r1, [r6, #0]
 80031c8:	5162      	str	r2, [r4, r5]
 80031ca:	604b      	str	r3, [r1, #4]
 80031cc:	4638      	mov	r0, r7
 80031ce:	f104 060b 	add.w	r6, r4, #11
 80031d2:	f000 fb8b 	bl	80038ec <__malloc_unlock>
 80031d6:	f026 0607 	bic.w	r6, r6, #7
 80031da:	1d23      	adds	r3, r4, #4
 80031dc:	1af2      	subs	r2, r6, r3
 80031de:	d0b6      	beq.n	800314e <_malloc_r+0x22>
 80031e0:	1b9b      	subs	r3, r3, r6
 80031e2:	50a3      	str	r3, [r4, r2]
 80031e4:	e7b3      	b.n	800314e <_malloc_r+0x22>
 80031e6:	6862      	ldr	r2, [r4, #4]
 80031e8:	42a3      	cmp	r3, r4
 80031ea:	bf0c      	ite	eq
 80031ec:	6032      	streq	r2, [r6, #0]
 80031ee:	605a      	strne	r2, [r3, #4]
 80031f0:	e7ec      	b.n	80031cc <_malloc_r+0xa0>
 80031f2:	4623      	mov	r3, r4
 80031f4:	6864      	ldr	r4, [r4, #4]
 80031f6:	e7b2      	b.n	800315e <_malloc_r+0x32>
 80031f8:	4634      	mov	r4, r6
 80031fa:	6876      	ldr	r6, [r6, #4]
 80031fc:	e7b9      	b.n	8003172 <_malloc_r+0x46>
 80031fe:	230c      	movs	r3, #12
 8003200:	603b      	str	r3, [r7, #0]
 8003202:	4638      	mov	r0, r7
 8003204:	f000 fb72 	bl	80038ec <__malloc_unlock>
 8003208:	e7a1      	b.n	800314e <_malloc_r+0x22>
 800320a:	6025      	str	r5, [r4, #0]
 800320c:	e7de      	b.n	80031cc <_malloc_r+0xa0>
 800320e:	bf00      	nop
 8003210:	20000134 	.word	0x20000134

08003214 <_puts_r>:
 8003214:	b570      	push	{r4, r5, r6, lr}
 8003216:	460e      	mov	r6, r1
 8003218:	4605      	mov	r5, r0
 800321a:	b118      	cbz	r0, 8003224 <_puts_r+0x10>
 800321c:	6983      	ldr	r3, [r0, #24]
 800321e:	b90b      	cbnz	r3, 8003224 <_puts_r+0x10>
 8003220:	f000 fa58 	bl	80036d4 <__sinit>
 8003224:	69ab      	ldr	r3, [r5, #24]
 8003226:	68ac      	ldr	r4, [r5, #8]
 8003228:	b913      	cbnz	r3, 8003230 <_puts_r+0x1c>
 800322a:	4628      	mov	r0, r5
 800322c:	f000 fa52 	bl	80036d4 <__sinit>
 8003230:	4b2c      	ldr	r3, [pc, #176]	; (80032e4 <_puts_r+0xd0>)
 8003232:	429c      	cmp	r4, r3
 8003234:	d120      	bne.n	8003278 <_puts_r+0x64>
 8003236:	686c      	ldr	r4, [r5, #4]
 8003238:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800323a:	07db      	lsls	r3, r3, #31
 800323c:	d405      	bmi.n	800324a <_puts_r+0x36>
 800323e:	89a3      	ldrh	r3, [r4, #12]
 8003240:	0598      	lsls	r0, r3, #22
 8003242:	d402      	bmi.n	800324a <_puts_r+0x36>
 8003244:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003246:	f000 fae3 	bl	8003810 <__retarget_lock_acquire_recursive>
 800324a:	89a3      	ldrh	r3, [r4, #12]
 800324c:	0719      	lsls	r1, r3, #28
 800324e:	d51d      	bpl.n	800328c <_puts_r+0x78>
 8003250:	6923      	ldr	r3, [r4, #16]
 8003252:	b1db      	cbz	r3, 800328c <_puts_r+0x78>
 8003254:	3e01      	subs	r6, #1
 8003256:	68a3      	ldr	r3, [r4, #8]
 8003258:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800325c:	3b01      	subs	r3, #1
 800325e:	60a3      	str	r3, [r4, #8]
 8003260:	bb39      	cbnz	r1, 80032b2 <_puts_r+0x9e>
 8003262:	2b00      	cmp	r3, #0
 8003264:	da38      	bge.n	80032d8 <_puts_r+0xc4>
 8003266:	4622      	mov	r2, r4
 8003268:	210a      	movs	r1, #10
 800326a:	4628      	mov	r0, r5
 800326c:	f000 f858 	bl	8003320 <__swbuf_r>
 8003270:	3001      	adds	r0, #1
 8003272:	d011      	beq.n	8003298 <_puts_r+0x84>
 8003274:	250a      	movs	r5, #10
 8003276:	e011      	b.n	800329c <_puts_r+0x88>
 8003278:	4b1b      	ldr	r3, [pc, #108]	; (80032e8 <_puts_r+0xd4>)
 800327a:	429c      	cmp	r4, r3
 800327c:	d101      	bne.n	8003282 <_puts_r+0x6e>
 800327e:	68ac      	ldr	r4, [r5, #8]
 8003280:	e7da      	b.n	8003238 <_puts_r+0x24>
 8003282:	4b1a      	ldr	r3, [pc, #104]	; (80032ec <_puts_r+0xd8>)
 8003284:	429c      	cmp	r4, r3
 8003286:	bf08      	it	eq
 8003288:	68ec      	ldreq	r4, [r5, #12]
 800328a:	e7d5      	b.n	8003238 <_puts_r+0x24>
 800328c:	4621      	mov	r1, r4
 800328e:	4628      	mov	r0, r5
 8003290:	f000 f898 	bl	80033c4 <__swsetup_r>
 8003294:	2800      	cmp	r0, #0
 8003296:	d0dd      	beq.n	8003254 <_puts_r+0x40>
 8003298:	f04f 35ff 	mov.w	r5, #4294967295
 800329c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800329e:	07da      	lsls	r2, r3, #31
 80032a0:	d405      	bmi.n	80032ae <_puts_r+0x9a>
 80032a2:	89a3      	ldrh	r3, [r4, #12]
 80032a4:	059b      	lsls	r3, r3, #22
 80032a6:	d402      	bmi.n	80032ae <_puts_r+0x9a>
 80032a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032aa:	f000 fab2 	bl	8003812 <__retarget_lock_release_recursive>
 80032ae:	4628      	mov	r0, r5
 80032b0:	bd70      	pop	{r4, r5, r6, pc}
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	da04      	bge.n	80032c0 <_puts_r+0xac>
 80032b6:	69a2      	ldr	r2, [r4, #24]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	dc06      	bgt.n	80032ca <_puts_r+0xb6>
 80032bc:	290a      	cmp	r1, #10
 80032be:	d004      	beq.n	80032ca <_puts_r+0xb6>
 80032c0:	6823      	ldr	r3, [r4, #0]
 80032c2:	1c5a      	adds	r2, r3, #1
 80032c4:	6022      	str	r2, [r4, #0]
 80032c6:	7019      	strb	r1, [r3, #0]
 80032c8:	e7c5      	b.n	8003256 <_puts_r+0x42>
 80032ca:	4622      	mov	r2, r4
 80032cc:	4628      	mov	r0, r5
 80032ce:	f000 f827 	bl	8003320 <__swbuf_r>
 80032d2:	3001      	adds	r0, #1
 80032d4:	d1bf      	bne.n	8003256 <_puts_r+0x42>
 80032d6:	e7df      	b.n	8003298 <_puts_r+0x84>
 80032d8:	6823      	ldr	r3, [r4, #0]
 80032da:	250a      	movs	r5, #10
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	6022      	str	r2, [r4, #0]
 80032e0:	701d      	strb	r5, [r3, #0]
 80032e2:	e7db      	b.n	800329c <_puts_r+0x88>
 80032e4:	08003b04 	.word	0x08003b04
 80032e8:	08003b24 	.word	0x08003b24
 80032ec:	08003ae4 	.word	0x08003ae4

080032f0 <puts>:
 80032f0:	4b02      	ldr	r3, [pc, #8]	; (80032fc <puts+0xc>)
 80032f2:	4601      	mov	r1, r0
 80032f4:	6818      	ldr	r0, [r3, #0]
 80032f6:	f7ff bf8d 	b.w	8003214 <_puts_r>
 80032fa:	bf00      	nop
 80032fc:	20000020 	.word	0x20000020

08003300 <_sbrk_r>:
 8003300:	b538      	push	{r3, r4, r5, lr}
 8003302:	4d06      	ldr	r5, [pc, #24]	; (800331c <_sbrk_r+0x1c>)
 8003304:	2300      	movs	r3, #0
 8003306:	4604      	mov	r4, r0
 8003308:	4608      	mov	r0, r1
 800330a:	602b      	str	r3, [r5, #0]
 800330c:	f7fd fc2a 	bl	8000b64 <_sbrk>
 8003310:	1c43      	adds	r3, r0, #1
 8003312:	d102      	bne.n	800331a <_sbrk_r+0x1a>
 8003314:	682b      	ldr	r3, [r5, #0]
 8003316:	b103      	cbz	r3, 800331a <_sbrk_r+0x1a>
 8003318:	6023      	str	r3, [r4, #0]
 800331a:	bd38      	pop	{r3, r4, r5, pc}
 800331c:	20000140 	.word	0x20000140

08003320 <__swbuf_r>:
 8003320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003322:	460e      	mov	r6, r1
 8003324:	4614      	mov	r4, r2
 8003326:	4605      	mov	r5, r0
 8003328:	b118      	cbz	r0, 8003332 <__swbuf_r+0x12>
 800332a:	6983      	ldr	r3, [r0, #24]
 800332c:	b90b      	cbnz	r3, 8003332 <__swbuf_r+0x12>
 800332e:	f000 f9d1 	bl	80036d4 <__sinit>
 8003332:	4b21      	ldr	r3, [pc, #132]	; (80033b8 <__swbuf_r+0x98>)
 8003334:	429c      	cmp	r4, r3
 8003336:	d12b      	bne.n	8003390 <__swbuf_r+0x70>
 8003338:	686c      	ldr	r4, [r5, #4]
 800333a:	69a3      	ldr	r3, [r4, #24]
 800333c:	60a3      	str	r3, [r4, #8]
 800333e:	89a3      	ldrh	r3, [r4, #12]
 8003340:	071a      	lsls	r2, r3, #28
 8003342:	d52f      	bpl.n	80033a4 <__swbuf_r+0x84>
 8003344:	6923      	ldr	r3, [r4, #16]
 8003346:	b36b      	cbz	r3, 80033a4 <__swbuf_r+0x84>
 8003348:	6923      	ldr	r3, [r4, #16]
 800334a:	6820      	ldr	r0, [r4, #0]
 800334c:	1ac0      	subs	r0, r0, r3
 800334e:	6963      	ldr	r3, [r4, #20]
 8003350:	b2f6      	uxtb	r6, r6
 8003352:	4283      	cmp	r3, r0
 8003354:	4637      	mov	r7, r6
 8003356:	dc04      	bgt.n	8003362 <__swbuf_r+0x42>
 8003358:	4621      	mov	r1, r4
 800335a:	4628      	mov	r0, r5
 800335c:	f000 f926 	bl	80035ac <_fflush_r>
 8003360:	bb30      	cbnz	r0, 80033b0 <__swbuf_r+0x90>
 8003362:	68a3      	ldr	r3, [r4, #8]
 8003364:	3b01      	subs	r3, #1
 8003366:	60a3      	str	r3, [r4, #8]
 8003368:	6823      	ldr	r3, [r4, #0]
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	6022      	str	r2, [r4, #0]
 800336e:	701e      	strb	r6, [r3, #0]
 8003370:	6963      	ldr	r3, [r4, #20]
 8003372:	3001      	adds	r0, #1
 8003374:	4283      	cmp	r3, r0
 8003376:	d004      	beq.n	8003382 <__swbuf_r+0x62>
 8003378:	89a3      	ldrh	r3, [r4, #12]
 800337a:	07db      	lsls	r3, r3, #31
 800337c:	d506      	bpl.n	800338c <__swbuf_r+0x6c>
 800337e:	2e0a      	cmp	r6, #10
 8003380:	d104      	bne.n	800338c <__swbuf_r+0x6c>
 8003382:	4621      	mov	r1, r4
 8003384:	4628      	mov	r0, r5
 8003386:	f000 f911 	bl	80035ac <_fflush_r>
 800338a:	b988      	cbnz	r0, 80033b0 <__swbuf_r+0x90>
 800338c:	4638      	mov	r0, r7
 800338e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003390:	4b0a      	ldr	r3, [pc, #40]	; (80033bc <__swbuf_r+0x9c>)
 8003392:	429c      	cmp	r4, r3
 8003394:	d101      	bne.n	800339a <__swbuf_r+0x7a>
 8003396:	68ac      	ldr	r4, [r5, #8]
 8003398:	e7cf      	b.n	800333a <__swbuf_r+0x1a>
 800339a:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <__swbuf_r+0xa0>)
 800339c:	429c      	cmp	r4, r3
 800339e:	bf08      	it	eq
 80033a0:	68ec      	ldreq	r4, [r5, #12]
 80033a2:	e7ca      	b.n	800333a <__swbuf_r+0x1a>
 80033a4:	4621      	mov	r1, r4
 80033a6:	4628      	mov	r0, r5
 80033a8:	f000 f80c 	bl	80033c4 <__swsetup_r>
 80033ac:	2800      	cmp	r0, #0
 80033ae:	d0cb      	beq.n	8003348 <__swbuf_r+0x28>
 80033b0:	f04f 37ff 	mov.w	r7, #4294967295
 80033b4:	e7ea      	b.n	800338c <__swbuf_r+0x6c>
 80033b6:	bf00      	nop
 80033b8:	08003b04 	.word	0x08003b04
 80033bc:	08003b24 	.word	0x08003b24
 80033c0:	08003ae4 	.word	0x08003ae4

080033c4 <__swsetup_r>:
 80033c4:	4b32      	ldr	r3, [pc, #200]	; (8003490 <__swsetup_r+0xcc>)
 80033c6:	b570      	push	{r4, r5, r6, lr}
 80033c8:	681d      	ldr	r5, [r3, #0]
 80033ca:	4606      	mov	r6, r0
 80033cc:	460c      	mov	r4, r1
 80033ce:	b125      	cbz	r5, 80033da <__swsetup_r+0x16>
 80033d0:	69ab      	ldr	r3, [r5, #24]
 80033d2:	b913      	cbnz	r3, 80033da <__swsetup_r+0x16>
 80033d4:	4628      	mov	r0, r5
 80033d6:	f000 f97d 	bl	80036d4 <__sinit>
 80033da:	4b2e      	ldr	r3, [pc, #184]	; (8003494 <__swsetup_r+0xd0>)
 80033dc:	429c      	cmp	r4, r3
 80033de:	d10f      	bne.n	8003400 <__swsetup_r+0x3c>
 80033e0:	686c      	ldr	r4, [r5, #4]
 80033e2:	89a3      	ldrh	r3, [r4, #12]
 80033e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80033e8:	0719      	lsls	r1, r3, #28
 80033ea:	d42c      	bmi.n	8003446 <__swsetup_r+0x82>
 80033ec:	06dd      	lsls	r5, r3, #27
 80033ee:	d411      	bmi.n	8003414 <__swsetup_r+0x50>
 80033f0:	2309      	movs	r3, #9
 80033f2:	6033      	str	r3, [r6, #0]
 80033f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80033f8:	81a3      	strh	r3, [r4, #12]
 80033fa:	f04f 30ff 	mov.w	r0, #4294967295
 80033fe:	e03e      	b.n	800347e <__swsetup_r+0xba>
 8003400:	4b25      	ldr	r3, [pc, #148]	; (8003498 <__swsetup_r+0xd4>)
 8003402:	429c      	cmp	r4, r3
 8003404:	d101      	bne.n	800340a <__swsetup_r+0x46>
 8003406:	68ac      	ldr	r4, [r5, #8]
 8003408:	e7eb      	b.n	80033e2 <__swsetup_r+0x1e>
 800340a:	4b24      	ldr	r3, [pc, #144]	; (800349c <__swsetup_r+0xd8>)
 800340c:	429c      	cmp	r4, r3
 800340e:	bf08      	it	eq
 8003410:	68ec      	ldreq	r4, [r5, #12]
 8003412:	e7e6      	b.n	80033e2 <__swsetup_r+0x1e>
 8003414:	0758      	lsls	r0, r3, #29
 8003416:	d512      	bpl.n	800343e <__swsetup_r+0x7a>
 8003418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800341a:	b141      	cbz	r1, 800342e <__swsetup_r+0x6a>
 800341c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003420:	4299      	cmp	r1, r3
 8003422:	d002      	beq.n	800342a <__swsetup_r+0x66>
 8003424:	4630      	mov	r0, r6
 8003426:	f7ff fe15 	bl	8003054 <_free_r>
 800342a:	2300      	movs	r3, #0
 800342c:	6363      	str	r3, [r4, #52]	; 0x34
 800342e:	89a3      	ldrh	r3, [r4, #12]
 8003430:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003434:	81a3      	strh	r3, [r4, #12]
 8003436:	2300      	movs	r3, #0
 8003438:	6063      	str	r3, [r4, #4]
 800343a:	6923      	ldr	r3, [r4, #16]
 800343c:	6023      	str	r3, [r4, #0]
 800343e:	89a3      	ldrh	r3, [r4, #12]
 8003440:	f043 0308 	orr.w	r3, r3, #8
 8003444:	81a3      	strh	r3, [r4, #12]
 8003446:	6923      	ldr	r3, [r4, #16]
 8003448:	b94b      	cbnz	r3, 800345e <__swsetup_r+0x9a>
 800344a:	89a3      	ldrh	r3, [r4, #12]
 800344c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003454:	d003      	beq.n	800345e <__swsetup_r+0x9a>
 8003456:	4621      	mov	r1, r4
 8003458:	4630      	mov	r0, r6
 800345a:	f000 fa01 	bl	8003860 <__smakebuf_r>
 800345e:	89a0      	ldrh	r0, [r4, #12]
 8003460:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003464:	f010 0301 	ands.w	r3, r0, #1
 8003468:	d00a      	beq.n	8003480 <__swsetup_r+0xbc>
 800346a:	2300      	movs	r3, #0
 800346c:	60a3      	str	r3, [r4, #8]
 800346e:	6963      	ldr	r3, [r4, #20]
 8003470:	425b      	negs	r3, r3
 8003472:	61a3      	str	r3, [r4, #24]
 8003474:	6923      	ldr	r3, [r4, #16]
 8003476:	b943      	cbnz	r3, 800348a <__swsetup_r+0xc6>
 8003478:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800347c:	d1ba      	bne.n	80033f4 <__swsetup_r+0x30>
 800347e:	bd70      	pop	{r4, r5, r6, pc}
 8003480:	0781      	lsls	r1, r0, #30
 8003482:	bf58      	it	pl
 8003484:	6963      	ldrpl	r3, [r4, #20]
 8003486:	60a3      	str	r3, [r4, #8]
 8003488:	e7f4      	b.n	8003474 <__swsetup_r+0xb0>
 800348a:	2000      	movs	r0, #0
 800348c:	e7f7      	b.n	800347e <__swsetup_r+0xba>
 800348e:	bf00      	nop
 8003490:	20000020 	.word	0x20000020
 8003494:	08003b04 	.word	0x08003b04
 8003498:	08003b24 	.word	0x08003b24
 800349c:	08003ae4 	.word	0x08003ae4

080034a0 <__sflush_r>:
 80034a0:	898a      	ldrh	r2, [r1, #12]
 80034a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034a6:	4605      	mov	r5, r0
 80034a8:	0710      	lsls	r0, r2, #28
 80034aa:	460c      	mov	r4, r1
 80034ac:	d458      	bmi.n	8003560 <__sflush_r+0xc0>
 80034ae:	684b      	ldr	r3, [r1, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	dc05      	bgt.n	80034c0 <__sflush_r+0x20>
 80034b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	dc02      	bgt.n	80034c0 <__sflush_r+0x20>
 80034ba:	2000      	movs	r0, #0
 80034bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034c2:	2e00      	cmp	r6, #0
 80034c4:	d0f9      	beq.n	80034ba <__sflush_r+0x1a>
 80034c6:	2300      	movs	r3, #0
 80034c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80034cc:	682f      	ldr	r7, [r5, #0]
 80034ce:	602b      	str	r3, [r5, #0]
 80034d0:	d032      	beq.n	8003538 <__sflush_r+0x98>
 80034d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80034d4:	89a3      	ldrh	r3, [r4, #12]
 80034d6:	075a      	lsls	r2, r3, #29
 80034d8:	d505      	bpl.n	80034e6 <__sflush_r+0x46>
 80034da:	6863      	ldr	r3, [r4, #4]
 80034dc:	1ac0      	subs	r0, r0, r3
 80034de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034e0:	b10b      	cbz	r3, 80034e6 <__sflush_r+0x46>
 80034e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034e4:	1ac0      	subs	r0, r0, r3
 80034e6:	2300      	movs	r3, #0
 80034e8:	4602      	mov	r2, r0
 80034ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034ec:	6a21      	ldr	r1, [r4, #32]
 80034ee:	4628      	mov	r0, r5
 80034f0:	47b0      	blx	r6
 80034f2:	1c43      	adds	r3, r0, #1
 80034f4:	89a3      	ldrh	r3, [r4, #12]
 80034f6:	d106      	bne.n	8003506 <__sflush_r+0x66>
 80034f8:	6829      	ldr	r1, [r5, #0]
 80034fa:	291d      	cmp	r1, #29
 80034fc:	d82c      	bhi.n	8003558 <__sflush_r+0xb8>
 80034fe:	4a2a      	ldr	r2, [pc, #168]	; (80035a8 <__sflush_r+0x108>)
 8003500:	40ca      	lsrs	r2, r1
 8003502:	07d6      	lsls	r6, r2, #31
 8003504:	d528      	bpl.n	8003558 <__sflush_r+0xb8>
 8003506:	2200      	movs	r2, #0
 8003508:	6062      	str	r2, [r4, #4]
 800350a:	04d9      	lsls	r1, r3, #19
 800350c:	6922      	ldr	r2, [r4, #16]
 800350e:	6022      	str	r2, [r4, #0]
 8003510:	d504      	bpl.n	800351c <__sflush_r+0x7c>
 8003512:	1c42      	adds	r2, r0, #1
 8003514:	d101      	bne.n	800351a <__sflush_r+0x7a>
 8003516:	682b      	ldr	r3, [r5, #0]
 8003518:	b903      	cbnz	r3, 800351c <__sflush_r+0x7c>
 800351a:	6560      	str	r0, [r4, #84]	; 0x54
 800351c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800351e:	602f      	str	r7, [r5, #0]
 8003520:	2900      	cmp	r1, #0
 8003522:	d0ca      	beq.n	80034ba <__sflush_r+0x1a>
 8003524:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003528:	4299      	cmp	r1, r3
 800352a:	d002      	beq.n	8003532 <__sflush_r+0x92>
 800352c:	4628      	mov	r0, r5
 800352e:	f7ff fd91 	bl	8003054 <_free_r>
 8003532:	2000      	movs	r0, #0
 8003534:	6360      	str	r0, [r4, #52]	; 0x34
 8003536:	e7c1      	b.n	80034bc <__sflush_r+0x1c>
 8003538:	6a21      	ldr	r1, [r4, #32]
 800353a:	2301      	movs	r3, #1
 800353c:	4628      	mov	r0, r5
 800353e:	47b0      	blx	r6
 8003540:	1c41      	adds	r1, r0, #1
 8003542:	d1c7      	bne.n	80034d4 <__sflush_r+0x34>
 8003544:	682b      	ldr	r3, [r5, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0c4      	beq.n	80034d4 <__sflush_r+0x34>
 800354a:	2b1d      	cmp	r3, #29
 800354c:	d001      	beq.n	8003552 <__sflush_r+0xb2>
 800354e:	2b16      	cmp	r3, #22
 8003550:	d101      	bne.n	8003556 <__sflush_r+0xb6>
 8003552:	602f      	str	r7, [r5, #0]
 8003554:	e7b1      	b.n	80034ba <__sflush_r+0x1a>
 8003556:	89a3      	ldrh	r3, [r4, #12]
 8003558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800355c:	81a3      	strh	r3, [r4, #12]
 800355e:	e7ad      	b.n	80034bc <__sflush_r+0x1c>
 8003560:	690f      	ldr	r7, [r1, #16]
 8003562:	2f00      	cmp	r7, #0
 8003564:	d0a9      	beq.n	80034ba <__sflush_r+0x1a>
 8003566:	0793      	lsls	r3, r2, #30
 8003568:	680e      	ldr	r6, [r1, #0]
 800356a:	bf08      	it	eq
 800356c:	694b      	ldreq	r3, [r1, #20]
 800356e:	600f      	str	r7, [r1, #0]
 8003570:	bf18      	it	ne
 8003572:	2300      	movne	r3, #0
 8003574:	eba6 0807 	sub.w	r8, r6, r7
 8003578:	608b      	str	r3, [r1, #8]
 800357a:	f1b8 0f00 	cmp.w	r8, #0
 800357e:	dd9c      	ble.n	80034ba <__sflush_r+0x1a>
 8003580:	6a21      	ldr	r1, [r4, #32]
 8003582:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003584:	4643      	mov	r3, r8
 8003586:	463a      	mov	r2, r7
 8003588:	4628      	mov	r0, r5
 800358a:	47b0      	blx	r6
 800358c:	2800      	cmp	r0, #0
 800358e:	dc06      	bgt.n	800359e <__sflush_r+0xfe>
 8003590:	89a3      	ldrh	r3, [r4, #12]
 8003592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003596:	81a3      	strh	r3, [r4, #12]
 8003598:	f04f 30ff 	mov.w	r0, #4294967295
 800359c:	e78e      	b.n	80034bc <__sflush_r+0x1c>
 800359e:	4407      	add	r7, r0
 80035a0:	eba8 0800 	sub.w	r8, r8, r0
 80035a4:	e7e9      	b.n	800357a <__sflush_r+0xda>
 80035a6:	bf00      	nop
 80035a8:	20400001 	.word	0x20400001

080035ac <_fflush_r>:
 80035ac:	b538      	push	{r3, r4, r5, lr}
 80035ae:	690b      	ldr	r3, [r1, #16]
 80035b0:	4605      	mov	r5, r0
 80035b2:	460c      	mov	r4, r1
 80035b4:	b913      	cbnz	r3, 80035bc <_fflush_r+0x10>
 80035b6:	2500      	movs	r5, #0
 80035b8:	4628      	mov	r0, r5
 80035ba:	bd38      	pop	{r3, r4, r5, pc}
 80035bc:	b118      	cbz	r0, 80035c6 <_fflush_r+0x1a>
 80035be:	6983      	ldr	r3, [r0, #24]
 80035c0:	b90b      	cbnz	r3, 80035c6 <_fflush_r+0x1a>
 80035c2:	f000 f887 	bl	80036d4 <__sinit>
 80035c6:	4b14      	ldr	r3, [pc, #80]	; (8003618 <_fflush_r+0x6c>)
 80035c8:	429c      	cmp	r4, r3
 80035ca:	d11b      	bne.n	8003604 <_fflush_r+0x58>
 80035cc:	686c      	ldr	r4, [r5, #4]
 80035ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0ef      	beq.n	80035b6 <_fflush_r+0xa>
 80035d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80035d8:	07d0      	lsls	r0, r2, #31
 80035da:	d404      	bmi.n	80035e6 <_fflush_r+0x3a>
 80035dc:	0599      	lsls	r1, r3, #22
 80035de:	d402      	bmi.n	80035e6 <_fflush_r+0x3a>
 80035e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035e2:	f000 f915 	bl	8003810 <__retarget_lock_acquire_recursive>
 80035e6:	4628      	mov	r0, r5
 80035e8:	4621      	mov	r1, r4
 80035ea:	f7ff ff59 	bl	80034a0 <__sflush_r>
 80035ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035f0:	07da      	lsls	r2, r3, #31
 80035f2:	4605      	mov	r5, r0
 80035f4:	d4e0      	bmi.n	80035b8 <_fflush_r+0xc>
 80035f6:	89a3      	ldrh	r3, [r4, #12]
 80035f8:	059b      	lsls	r3, r3, #22
 80035fa:	d4dd      	bmi.n	80035b8 <_fflush_r+0xc>
 80035fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035fe:	f000 f908 	bl	8003812 <__retarget_lock_release_recursive>
 8003602:	e7d9      	b.n	80035b8 <_fflush_r+0xc>
 8003604:	4b05      	ldr	r3, [pc, #20]	; (800361c <_fflush_r+0x70>)
 8003606:	429c      	cmp	r4, r3
 8003608:	d101      	bne.n	800360e <_fflush_r+0x62>
 800360a:	68ac      	ldr	r4, [r5, #8]
 800360c:	e7df      	b.n	80035ce <_fflush_r+0x22>
 800360e:	4b04      	ldr	r3, [pc, #16]	; (8003620 <_fflush_r+0x74>)
 8003610:	429c      	cmp	r4, r3
 8003612:	bf08      	it	eq
 8003614:	68ec      	ldreq	r4, [r5, #12]
 8003616:	e7da      	b.n	80035ce <_fflush_r+0x22>
 8003618:	08003b04 	.word	0x08003b04
 800361c:	08003b24 	.word	0x08003b24
 8003620:	08003ae4 	.word	0x08003ae4

08003624 <std>:
 8003624:	2300      	movs	r3, #0
 8003626:	b510      	push	{r4, lr}
 8003628:	4604      	mov	r4, r0
 800362a:	e9c0 3300 	strd	r3, r3, [r0]
 800362e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003632:	6083      	str	r3, [r0, #8]
 8003634:	8181      	strh	r1, [r0, #12]
 8003636:	6643      	str	r3, [r0, #100]	; 0x64
 8003638:	81c2      	strh	r2, [r0, #14]
 800363a:	6183      	str	r3, [r0, #24]
 800363c:	4619      	mov	r1, r3
 800363e:	2208      	movs	r2, #8
 8003640:	305c      	adds	r0, #92	; 0x5c
 8003642:	f7ff fcff 	bl	8003044 <memset>
 8003646:	4b05      	ldr	r3, [pc, #20]	; (800365c <std+0x38>)
 8003648:	6263      	str	r3, [r4, #36]	; 0x24
 800364a:	4b05      	ldr	r3, [pc, #20]	; (8003660 <std+0x3c>)
 800364c:	62a3      	str	r3, [r4, #40]	; 0x28
 800364e:	4b05      	ldr	r3, [pc, #20]	; (8003664 <std+0x40>)
 8003650:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003652:	4b05      	ldr	r3, [pc, #20]	; (8003668 <std+0x44>)
 8003654:	6224      	str	r4, [r4, #32]
 8003656:	6323      	str	r3, [r4, #48]	; 0x30
 8003658:	bd10      	pop	{r4, pc}
 800365a:	bf00      	nop
 800365c:	080038f9 	.word	0x080038f9
 8003660:	0800391b 	.word	0x0800391b
 8003664:	08003953 	.word	0x08003953
 8003668:	08003977 	.word	0x08003977

0800366c <_cleanup_r>:
 800366c:	4901      	ldr	r1, [pc, #4]	; (8003674 <_cleanup_r+0x8>)
 800366e:	f000 b8af 	b.w	80037d0 <_fwalk_reent>
 8003672:	bf00      	nop
 8003674:	080035ad 	.word	0x080035ad

08003678 <__sfmoreglue>:
 8003678:	b570      	push	{r4, r5, r6, lr}
 800367a:	2268      	movs	r2, #104	; 0x68
 800367c:	1e4d      	subs	r5, r1, #1
 800367e:	4355      	muls	r5, r2
 8003680:	460e      	mov	r6, r1
 8003682:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003686:	f7ff fd51 	bl	800312c <_malloc_r>
 800368a:	4604      	mov	r4, r0
 800368c:	b140      	cbz	r0, 80036a0 <__sfmoreglue+0x28>
 800368e:	2100      	movs	r1, #0
 8003690:	e9c0 1600 	strd	r1, r6, [r0]
 8003694:	300c      	adds	r0, #12
 8003696:	60a0      	str	r0, [r4, #8]
 8003698:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800369c:	f7ff fcd2 	bl	8003044 <memset>
 80036a0:	4620      	mov	r0, r4
 80036a2:	bd70      	pop	{r4, r5, r6, pc}

080036a4 <__sfp_lock_acquire>:
 80036a4:	4801      	ldr	r0, [pc, #4]	; (80036ac <__sfp_lock_acquire+0x8>)
 80036a6:	f000 b8b3 	b.w	8003810 <__retarget_lock_acquire_recursive>
 80036aa:	bf00      	nop
 80036ac:	2000013d 	.word	0x2000013d

080036b0 <__sfp_lock_release>:
 80036b0:	4801      	ldr	r0, [pc, #4]	; (80036b8 <__sfp_lock_release+0x8>)
 80036b2:	f000 b8ae 	b.w	8003812 <__retarget_lock_release_recursive>
 80036b6:	bf00      	nop
 80036b8:	2000013d 	.word	0x2000013d

080036bc <__sinit_lock_acquire>:
 80036bc:	4801      	ldr	r0, [pc, #4]	; (80036c4 <__sinit_lock_acquire+0x8>)
 80036be:	f000 b8a7 	b.w	8003810 <__retarget_lock_acquire_recursive>
 80036c2:	bf00      	nop
 80036c4:	2000013e 	.word	0x2000013e

080036c8 <__sinit_lock_release>:
 80036c8:	4801      	ldr	r0, [pc, #4]	; (80036d0 <__sinit_lock_release+0x8>)
 80036ca:	f000 b8a2 	b.w	8003812 <__retarget_lock_release_recursive>
 80036ce:	bf00      	nop
 80036d0:	2000013e 	.word	0x2000013e

080036d4 <__sinit>:
 80036d4:	b510      	push	{r4, lr}
 80036d6:	4604      	mov	r4, r0
 80036d8:	f7ff fff0 	bl	80036bc <__sinit_lock_acquire>
 80036dc:	69a3      	ldr	r3, [r4, #24]
 80036de:	b11b      	cbz	r3, 80036e8 <__sinit+0x14>
 80036e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036e4:	f7ff bff0 	b.w	80036c8 <__sinit_lock_release>
 80036e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80036ec:	6523      	str	r3, [r4, #80]	; 0x50
 80036ee:	4b13      	ldr	r3, [pc, #76]	; (800373c <__sinit+0x68>)
 80036f0:	4a13      	ldr	r2, [pc, #76]	; (8003740 <__sinit+0x6c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80036f6:	42a3      	cmp	r3, r4
 80036f8:	bf04      	itt	eq
 80036fa:	2301      	moveq	r3, #1
 80036fc:	61a3      	streq	r3, [r4, #24]
 80036fe:	4620      	mov	r0, r4
 8003700:	f000 f820 	bl	8003744 <__sfp>
 8003704:	6060      	str	r0, [r4, #4]
 8003706:	4620      	mov	r0, r4
 8003708:	f000 f81c 	bl	8003744 <__sfp>
 800370c:	60a0      	str	r0, [r4, #8]
 800370e:	4620      	mov	r0, r4
 8003710:	f000 f818 	bl	8003744 <__sfp>
 8003714:	2200      	movs	r2, #0
 8003716:	60e0      	str	r0, [r4, #12]
 8003718:	2104      	movs	r1, #4
 800371a:	6860      	ldr	r0, [r4, #4]
 800371c:	f7ff ff82 	bl	8003624 <std>
 8003720:	68a0      	ldr	r0, [r4, #8]
 8003722:	2201      	movs	r2, #1
 8003724:	2109      	movs	r1, #9
 8003726:	f7ff ff7d 	bl	8003624 <std>
 800372a:	68e0      	ldr	r0, [r4, #12]
 800372c:	2202      	movs	r2, #2
 800372e:	2112      	movs	r1, #18
 8003730:	f7ff ff78 	bl	8003624 <std>
 8003734:	2301      	movs	r3, #1
 8003736:	61a3      	str	r3, [r4, #24]
 8003738:	e7d2      	b.n	80036e0 <__sinit+0xc>
 800373a:	bf00      	nop
 800373c:	08003ae0 	.word	0x08003ae0
 8003740:	0800366d 	.word	0x0800366d

08003744 <__sfp>:
 8003744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003746:	4607      	mov	r7, r0
 8003748:	f7ff ffac 	bl	80036a4 <__sfp_lock_acquire>
 800374c:	4b1e      	ldr	r3, [pc, #120]	; (80037c8 <__sfp+0x84>)
 800374e:	681e      	ldr	r6, [r3, #0]
 8003750:	69b3      	ldr	r3, [r6, #24]
 8003752:	b913      	cbnz	r3, 800375a <__sfp+0x16>
 8003754:	4630      	mov	r0, r6
 8003756:	f7ff ffbd 	bl	80036d4 <__sinit>
 800375a:	3648      	adds	r6, #72	; 0x48
 800375c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003760:	3b01      	subs	r3, #1
 8003762:	d503      	bpl.n	800376c <__sfp+0x28>
 8003764:	6833      	ldr	r3, [r6, #0]
 8003766:	b30b      	cbz	r3, 80037ac <__sfp+0x68>
 8003768:	6836      	ldr	r6, [r6, #0]
 800376a:	e7f7      	b.n	800375c <__sfp+0x18>
 800376c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003770:	b9d5      	cbnz	r5, 80037a8 <__sfp+0x64>
 8003772:	4b16      	ldr	r3, [pc, #88]	; (80037cc <__sfp+0x88>)
 8003774:	60e3      	str	r3, [r4, #12]
 8003776:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800377a:	6665      	str	r5, [r4, #100]	; 0x64
 800377c:	f000 f847 	bl	800380e <__retarget_lock_init_recursive>
 8003780:	f7ff ff96 	bl	80036b0 <__sfp_lock_release>
 8003784:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003788:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800378c:	6025      	str	r5, [r4, #0]
 800378e:	61a5      	str	r5, [r4, #24]
 8003790:	2208      	movs	r2, #8
 8003792:	4629      	mov	r1, r5
 8003794:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003798:	f7ff fc54 	bl	8003044 <memset>
 800379c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80037a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80037a4:	4620      	mov	r0, r4
 80037a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037a8:	3468      	adds	r4, #104	; 0x68
 80037aa:	e7d9      	b.n	8003760 <__sfp+0x1c>
 80037ac:	2104      	movs	r1, #4
 80037ae:	4638      	mov	r0, r7
 80037b0:	f7ff ff62 	bl	8003678 <__sfmoreglue>
 80037b4:	4604      	mov	r4, r0
 80037b6:	6030      	str	r0, [r6, #0]
 80037b8:	2800      	cmp	r0, #0
 80037ba:	d1d5      	bne.n	8003768 <__sfp+0x24>
 80037bc:	f7ff ff78 	bl	80036b0 <__sfp_lock_release>
 80037c0:	230c      	movs	r3, #12
 80037c2:	603b      	str	r3, [r7, #0]
 80037c4:	e7ee      	b.n	80037a4 <__sfp+0x60>
 80037c6:	bf00      	nop
 80037c8:	08003ae0 	.word	0x08003ae0
 80037cc:	ffff0001 	.word	0xffff0001

080037d0 <_fwalk_reent>:
 80037d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037d4:	4606      	mov	r6, r0
 80037d6:	4688      	mov	r8, r1
 80037d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80037dc:	2700      	movs	r7, #0
 80037de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80037e2:	f1b9 0901 	subs.w	r9, r9, #1
 80037e6:	d505      	bpl.n	80037f4 <_fwalk_reent+0x24>
 80037e8:	6824      	ldr	r4, [r4, #0]
 80037ea:	2c00      	cmp	r4, #0
 80037ec:	d1f7      	bne.n	80037de <_fwalk_reent+0xe>
 80037ee:	4638      	mov	r0, r7
 80037f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037f4:	89ab      	ldrh	r3, [r5, #12]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d907      	bls.n	800380a <_fwalk_reent+0x3a>
 80037fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037fe:	3301      	adds	r3, #1
 8003800:	d003      	beq.n	800380a <_fwalk_reent+0x3a>
 8003802:	4629      	mov	r1, r5
 8003804:	4630      	mov	r0, r6
 8003806:	47c0      	blx	r8
 8003808:	4307      	orrs	r7, r0
 800380a:	3568      	adds	r5, #104	; 0x68
 800380c:	e7e9      	b.n	80037e2 <_fwalk_reent+0x12>

0800380e <__retarget_lock_init_recursive>:
 800380e:	4770      	bx	lr

08003810 <__retarget_lock_acquire_recursive>:
 8003810:	4770      	bx	lr

08003812 <__retarget_lock_release_recursive>:
 8003812:	4770      	bx	lr

08003814 <__swhatbuf_r>:
 8003814:	b570      	push	{r4, r5, r6, lr}
 8003816:	460e      	mov	r6, r1
 8003818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800381c:	2900      	cmp	r1, #0
 800381e:	b096      	sub	sp, #88	; 0x58
 8003820:	4614      	mov	r4, r2
 8003822:	461d      	mov	r5, r3
 8003824:	da08      	bge.n	8003838 <__swhatbuf_r+0x24>
 8003826:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	602a      	str	r2, [r5, #0]
 800382e:	061a      	lsls	r2, r3, #24
 8003830:	d410      	bmi.n	8003854 <__swhatbuf_r+0x40>
 8003832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003836:	e00e      	b.n	8003856 <__swhatbuf_r+0x42>
 8003838:	466a      	mov	r2, sp
 800383a:	f000 f8c3 	bl	80039c4 <_fstat_r>
 800383e:	2800      	cmp	r0, #0
 8003840:	dbf1      	blt.n	8003826 <__swhatbuf_r+0x12>
 8003842:	9a01      	ldr	r2, [sp, #4]
 8003844:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003848:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800384c:	425a      	negs	r2, r3
 800384e:	415a      	adcs	r2, r3
 8003850:	602a      	str	r2, [r5, #0]
 8003852:	e7ee      	b.n	8003832 <__swhatbuf_r+0x1e>
 8003854:	2340      	movs	r3, #64	; 0x40
 8003856:	2000      	movs	r0, #0
 8003858:	6023      	str	r3, [r4, #0]
 800385a:	b016      	add	sp, #88	; 0x58
 800385c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003860 <__smakebuf_r>:
 8003860:	898b      	ldrh	r3, [r1, #12]
 8003862:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003864:	079d      	lsls	r5, r3, #30
 8003866:	4606      	mov	r6, r0
 8003868:	460c      	mov	r4, r1
 800386a:	d507      	bpl.n	800387c <__smakebuf_r+0x1c>
 800386c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003870:	6023      	str	r3, [r4, #0]
 8003872:	6123      	str	r3, [r4, #16]
 8003874:	2301      	movs	r3, #1
 8003876:	6163      	str	r3, [r4, #20]
 8003878:	b002      	add	sp, #8
 800387a:	bd70      	pop	{r4, r5, r6, pc}
 800387c:	ab01      	add	r3, sp, #4
 800387e:	466a      	mov	r2, sp
 8003880:	f7ff ffc8 	bl	8003814 <__swhatbuf_r>
 8003884:	9900      	ldr	r1, [sp, #0]
 8003886:	4605      	mov	r5, r0
 8003888:	4630      	mov	r0, r6
 800388a:	f7ff fc4f 	bl	800312c <_malloc_r>
 800388e:	b948      	cbnz	r0, 80038a4 <__smakebuf_r+0x44>
 8003890:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003894:	059a      	lsls	r2, r3, #22
 8003896:	d4ef      	bmi.n	8003878 <__smakebuf_r+0x18>
 8003898:	f023 0303 	bic.w	r3, r3, #3
 800389c:	f043 0302 	orr.w	r3, r3, #2
 80038a0:	81a3      	strh	r3, [r4, #12]
 80038a2:	e7e3      	b.n	800386c <__smakebuf_r+0xc>
 80038a4:	4b0d      	ldr	r3, [pc, #52]	; (80038dc <__smakebuf_r+0x7c>)
 80038a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80038a8:	89a3      	ldrh	r3, [r4, #12]
 80038aa:	6020      	str	r0, [r4, #0]
 80038ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b0:	81a3      	strh	r3, [r4, #12]
 80038b2:	9b00      	ldr	r3, [sp, #0]
 80038b4:	6163      	str	r3, [r4, #20]
 80038b6:	9b01      	ldr	r3, [sp, #4]
 80038b8:	6120      	str	r0, [r4, #16]
 80038ba:	b15b      	cbz	r3, 80038d4 <__smakebuf_r+0x74>
 80038bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038c0:	4630      	mov	r0, r6
 80038c2:	f000 f891 	bl	80039e8 <_isatty_r>
 80038c6:	b128      	cbz	r0, 80038d4 <__smakebuf_r+0x74>
 80038c8:	89a3      	ldrh	r3, [r4, #12]
 80038ca:	f023 0303 	bic.w	r3, r3, #3
 80038ce:	f043 0301 	orr.w	r3, r3, #1
 80038d2:	81a3      	strh	r3, [r4, #12]
 80038d4:	89a0      	ldrh	r0, [r4, #12]
 80038d6:	4305      	orrs	r5, r0
 80038d8:	81a5      	strh	r5, [r4, #12]
 80038da:	e7cd      	b.n	8003878 <__smakebuf_r+0x18>
 80038dc:	0800366d 	.word	0x0800366d

080038e0 <__malloc_lock>:
 80038e0:	4801      	ldr	r0, [pc, #4]	; (80038e8 <__malloc_lock+0x8>)
 80038e2:	f7ff bf95 	b.w	8003810 <__retarget_lock_acquire_recursive>
 80038e6:	bf00      	nop
 80038e8:	2000013c 	.word	0x2000013c

080038ec <__malloc_unlock>:
 80038ec:	4801      	ldr	r0, [pc, #4]	; (80038f4 <__malloc_unlock+0x8>)
 80038ee:	f7ff bf90 	b.w	8003812 <__retarget_lock_release_recursive>
 80038f2:	bf00      	nop
 80038f4:	2000013c 	.word	0x2000013c

080038f8 <__sread>:
 80038f8:	b510      	push	{r4, lr}
 80038fa:	460c      	mov	r4, r1
 80038fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003900:	f000 f894 	bl	8003a2c <_read_r>
 8003904:	2800      	cmp	r0, #0
 8003906:	bfab      	itete	ge
 8003908:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800390a:	89a3      	ldrhlt	r3, [r4, #12]
 800390c:	181b      	addge	r3, r3, r0
 800390e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003912:	bfac      	ite	ge
 8003914:	6563      	strge	r3, [r4, #84]	; 0x54
 8003916:	81a3      	strhlt	r3, [r4, #12]
 8003918:	bd10      	pop	{r4, pc}

0800391a <__swrite>:
 800391a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800391e:	461f      	mov	r7, r3
 8003920:	898b      	ldrh	r3, [r1, #12]
 8003922:	05db      	lsls	r3, r3, #23
 8003924:	4605      	mov	r5, r0
 8003926:	460c      	mov	r4, r1
 8003928:	4616      	mov	r6, r2
 800392a:	d505      	bpl.n	8003938 <__swrite+0x1e>
 800392c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003930:	2302      	movs	r3, #2
 8003932:	2200      	movs	r2, #0
 8003934:	f000 f868 	bl	8003a08 <_lseek_r>
 8003938:	89a3      	ldrh	r3, [r4, #12]
 800393a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800393e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003942:	81a3      	strh	r3, [r4, #12]
 8003944:	4632      	mov	r2, r6
 8003946:	463b      	mov	r3, r7
 8003948:	4628      	mov	r0, r5
 800394a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800394e:	f000 b817 	b.w	8003980 <_write_r>

08003952 <__sseek>:
 8003952:	b510      	push	{r4, lr}
 8003954:	460c      	mov	r4, r1
 8003956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800395a:	f000 f855 	bl	8003a08 <_lseek_r>
 800395e:	1c43      	adds	r3, r0, #1
 8003960:	89a3      	ldrh	r3, [r4, #12]
 8003962:	bf15      	itete	ne
 8003964:	6560      	strne	r0, [r4, #84]	; 0x54
 8003966:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800396a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800396e:	81a3      	strheq	r3, [r4, #12]
 8003970:	bf18      	it	ne
 8003972:	81a3      	strhne	r3, [r4, #12]
 8003974:	bd10      	pop	{r4, pc}

08003976 <__sclose>:
 8003976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800397a:	f000 b813 	b.w	80039a4 <_close_r>
	...

08003980 <_write_r>:
 8003980:	b538      	push	{r3, r4, r5, lr}
 8003982:	4d07      	ldr	r5, [pc, #28]	; (80039a0 <_write_r+0x20>)
 8003984:	4604      	mov	r4, r0
 8003986:	4608      	mov	r0, r1
 8003988:	4611      	mov	r1, r2
 800398a:	2200      	movs	r2, #0
 800398c:	602a      	str	r2, [r5, #0]
 800398e:	461a      	mov	r2, r3
 8003990:	f7fc fdb8 	bl	8000504 <_write>
 8003994:	1c43      	adds	r3, r0, #1
 8003996:	d102      	bne.n	800399e <_write_r+0x1e>
 8003998:	682b      	ldr	r3, [r5, #0]
 800399a:	b103      	cbz	r3, 800399e <_write_r+0x1e>
 800399c:	6023      	str	r3, [r4, #0]
 800399e:	bd38      	pop	{r3, r4, r5, pc}
 80039a0:	20000140 	.word	0x20000140

080039a4 <_close_r>:
 80039a4:	b538      	push	{r3, r4, r5, lr}
 80039a6:	4d06      	ldr	r5, [pc, #24]	; (80039c0 <_close_r+0x1c>)
 80039a8:	2300      	movs	r3, #0
 80039aa:	4604      	mov	r4, r0
 80039ac:	4608      	mov	r0, r1
 80039ae:	602b      	str	r3, [r5, #0]
 80039b0:	f7fd f8a3 	bl	8000afa <_close>
 80039b4:	1c43      	adds	r3, r0, #1
 80039b6:	d102      	bne.n	80039be <_close_r+0x1a>
 80039b8:	682b      	ldr	r3, [r5, #0]
 80039ba:	b103      	cbz	r3, 80039be <_close_r+0x1a>
 80039bc:	6023      	str	r3, [r4, #0]
 80039be:	bd38      	pop	{r3, r4, r5, pc}
 80039c0:	20000140 	.word	0x20000140

080039c4 <_fstat_r>:
 80039c4:	b538      	push	{r3, r4, r5, lr}
 80039c6:	4d07      	ldr	r5, [pc, #28]	; (80039e4 <_fstat_r+0x20>)
 80039c8:	2300      	movs	r3, #0
 80039ca:	4604      	mov	r4, r0
 80039cc:	4608      	mov	r0, r1
 80039ce:	4611      	mov	r1, r2
 80039d0:	602b      	str	r3, [r5, #0]
 80039d2:	f7fd f89e 	bl	8000b12 <_fstat>
 80039d6:	1c43      	adds	r3, r0, #1
 80039d8:	d102      	bne.n	80039e0 <_fstat_r+0x1c>
 80039da:	682b      	ldr	r3, [r5, #0]
 80039dc:	b103      	cbz	r3, 80039e0 <_fstat_r+0x1c>
 80039de:	6023      	str	r3, [r4, #0]
 80039e0:	bd38      	pop	{r3, r4, r5, pc}
 80039e2:	bf00      	nop
 80039e4:	20000140 	.word	0x20000140

080039e8 <_isatty_r>:
 80039e8:	b538      	push	{r3, r4, r5, lr}
 80039ea:	4d06      	ldr	r5, [pc, #24]	; (8003a04 <_isatty_r+0x1c>)
 80039ec:	2300      	movs	r3, #0
 80039ee:	4604      	mov	r4, r0
 80039f0:	4608      	mov	r0, r1
 80039f2:	602b      	str	r3, [r5, #0]
 80039f4:	f7fd f89d 	bl	8000b32 <_isatty>
 80039f8:	1c43      	adds	r3, r0, #1
 80039fa:	d102      	bne.n	8003a02 <_isatty_r+0x1a>
 80039fc:	682b      	ldr	r3, [r5, #0]
 80039fe:	b103      	cbz	r3, 8003a02 <_isatty_r+0x1a>
 8003a00:	6023      	str	r3, [r4, #0]
 8003a02:	bd38      	pop	{r3, r4, r5, pc}
 8003a04:	20000140 	.word	0x20000140

08003a08 <_lseek_r>:
 8003a08:	b538      	push	{r3, r4, r5, lr}
 8003a0a:	4d07      	ldr	r5, [pc, #28]	; (8003a28 <_lseek_r+0x20>)
 8003a0c:	4604      	mov	r4, r0
 8003a0e:	4608      	mov	r0, r1
 8003a10:	4611      	mov	r1, r2
 8003a12:	2200      	movs	r2, #0
 8003a14:	602a      	str	r2, [r5, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	f7fd f896 	bl	8000b48 <_lseek>
 8003a1c:	1c43      	adds	r3, r0, #1
 8003a1e:	d102      	bne.n	8003a26 <_lseek_r+0x1e>
 8003a20:	682b      	ldr	r3, [r5, #0]
 8003a22:	b103      	cbz	r3, 8003a26 <_lseek_r+0x1e>
 8003a24:	6023      	str	r3, [r4, #0]
 8003a26:	bd38      	pop	{r3, r4, r5, pc}
 8003a28:	20000140 	.word	0x20000140

08003a2c <_read_r>:
 8003a2c:	b538      	push	{r3, r4, r5, lr}
 8003a2e:	4d07      	ldr	r5, [pc, #28]	; (8003a4c <_read_r+0x20>)
 8003a30:	4604      	mov	r4, r0
 8003a32:	4608      	mov	r0, r1
 8003a34:	4611      	mov	r1, r2
 8003a36:	2200      	movs	r2, #0
 8003a38:	602a      	str	r2, [r5, #0]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	f7fd f840 	bl	8000ac0 <_read>
 8003a40:	1c43      	adds	r3, r0, #1
 8003a42:	d102      	bne.n	8003a4a <_read_r+0x1e>
 8003a44:	682b      	ldr	r3, [r5, #0]
 8003a46:	b103      	cbz	r3, 8003a4a <_read_r+0x1e>
 8003a48:	6023      	str	r3, [r4, #0]
 8003a4a:	bd38      	pop	{r3, r4, r5, pc}
 8003a4c:	20000140 	.word	0x20000140

08003a50 <_init>:
 8003a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a52:	bf00      	nop
 8003a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a56:	bc08      	pop	{r3}
 8003a58:	469e      	mov	lr, r3
 8003a5a:	4770      	bx	lr

08003a5c <_fini>:
 8003a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a5e:	bf00      	nop
 8003a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a62:	bc08      	pop	{r3}
 8003a64:	469e      	mov	lr, r3
 8003a66:	4770      	bx	lr
