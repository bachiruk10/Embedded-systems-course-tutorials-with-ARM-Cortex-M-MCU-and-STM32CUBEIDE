
CH8 8-3 UART_Non blocking_LoopBack operation mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003894  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08003a40  08003a40  00013a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b1c  08003b1c  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08003b1c  08003b1c  00013b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b24  08003b24  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b24  08003b24  00013b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b28  08003b28  00013b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08003b2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          000000c0  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000144  20000144  00020084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009cd0  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a61  00000000  00000000  00029d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000808  00000000  00000000  0002b7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000760  00000000  00000000  0002bff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023729  00000000  00000000  0002c750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009d33  00000000  00000000  0004fe79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2fa8  00000000  00000000  00059bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012cb54  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000260c  00000000  00000000  0012cba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000084 	.word	0x20000084
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003a28 	.word	0x08003a28

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000088 	.word	0x20000088
 80001e8:	08003a28 	.word	0x08003a28

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	b29a      	uxth	r2, r3
 8000500:	f04f 33ff 	mov.w	r3, #4294967295
 8000504:	68b9      	ldr	r1, [r7, #8]
 8000506:	4804      	ldr	r0, [pc, #16]	; (8000518 <_write+0x28>)
 8000508:	f001 fcf1 	bl	8001eee <HAL_UART_Transmit>
	return len;
 800050c:	687b      	ldr	r3, [r7, #4]
}
 800050e:	4618      	mov	r0, r3
 8000510:	3710      	adds	r7, #16
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	200000e4 	.word	0x200000e4

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fb7e 	bl	8000c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f820 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f8e2 	bl	80006f0 <MX_GPIO_Init>
  MX_UART5_Init();
 800052c:	f000 f88c 	bl	8000648 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000530:	f000 f8b4 	bl	800069c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Allocate memory to ptr serRxData
  serRxData = (uint8_t*) malloc (100);
 8000534:	2064      	movs	r0, #100	; 0x64
 8000536:	f002 fd69 	bl	800300c <malloc>
 800053a:	4603      	mov	r3, r0
 800053c:	461a      	mov	r2, r3
 800053e:	4b07      	ldr	r3, [pc, #28]	; (800055c <main+0x40>)
 8000540:	601a      	str	r2, [r3, #0]
  if(serRxData == NULL){
 8000542:	4b06      	ldr	r3, [pc, #24]	; (800055c <main+0x40>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d103      	bne.n	8000552 <main+0x36>
	  printf("Failure to allocate memory!\r\n");
 800054a:	4805      	ldr	r0, [pc, #20]	; (8000560 <main+0x44>)
 800054c:	f002 febc 	bl	80032c8 <puts>
 8000550:	e002      	b.n	8000558 <main+0x3c>
  }
  else
  {
	  printf("Memory allocated successfully!\r\n");
 8000552:	4804      	ldr	r0, [pc, #16]	; (8000564 <main+0x48>)
 8000554:	f002 feb8 	bl	80032c8 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000558:	e7fe      	b.n	8000558 <main+0x3c>
 800055a:	bf00      	nop
 800055c:	20000128 	.word	0x20000128
 8000560:	08003a40 	.word	0x08003a40
 8000564:	08003a60 	.word	0x08003a60

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2230      	movs	r2, #48	; 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f002 fd50 	bl	800301c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b2b      	ldr	r3, [pc, #172]	; (8000640 <SystemClock_Config+0xd8>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a2a      	ldr	r2, [pc, #168]	; (8000640 <SystemClock_Config+0xd8>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
 800059c:	4b28      	ldr	r3, [pc, #160]	; (8000640 <SystemClock_Config+0xd8>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b25      	ldr	r3, [pc, #148]	; (8000644 <SystemClock_Config+0xdc>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a24      	ldr	r2, [pc, #144]	; (8000644 <SystemClock_Config+0xdc>)
 80005b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b22      	ldr	r3, [pc, #136]	; (8000644 <SystemClock_Config+0xdc>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c4:	2302      	movs	r3, #2
 80005c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c8:	2301      	movs	r3, #1
 80005ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005cc:	2310      	movs	r3, #16
 80005ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d0:	2302      	movs	r3, #2
 80005d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d4:	2300      	movs	r3, #0
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d8:	2308      	movs	r3, #8
 80005da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005dc:	23b4      	movs	r3, #180	; 0xb4
 80005de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e4:	2307      	movs	r3, #7
 80005e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 0320 	add.w	r3, r7, #32
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 ff99 	bl	8001524 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f8:	f000 f93c 	bl	8000874 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005fc:	f000 ff42 	bl	8001484 <HAL_PWREx_EnableOverDrive>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000606:	f000 f935 	bl	8000874 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060a:	230f      	movs	r3, #15
 800060c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060e:	2302      	movs	r3, #2
 8000610:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000616:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800061a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800061c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000620:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	2105      	movs	r1, #5
 8000628:	4618      	mov	r0, r3
 800062a:	f001 f9f3 	bl	8001a14 <HAL_RCC_ClockConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000634:	f000 f91e 	bl	8000874 <Error_Handler>
  }
}
 8000638:	bf00      	nop
 800063a:	3750      	adds	r7, #80	; 0x50
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40023800 	.word	0x40023800
 8000644:	40007000 	.word	0x40007000

08000648 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_UART5_Init+0x4c>)
 800064e:	4a12      	ldr	r2, [pc, #72]	; (8000698 <MX_UART5_Init+0x50>)
 8000650:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <MX_UART5_Init+0x4c>)
 8000654:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000658:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <MX_UART5_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_UART5_Init+0x4c>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000666:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <MX_UART5_Init+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_UART5_Init+0x4c>)
 800066e:	220c      	movs	r2, #12
 8000670:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <MX_UART5_Init+0x4c>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_UART5_Init+0x4c>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800067e:	4805      	ldr	r0, [pc, #20]	; (8000694 <MX_UART5_Init+0x4c>)
 8000680:	f001 fbe8 	bl	8001e54 <HAL_UART_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800068a:	f000 f8f3 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	200000a0 	.word	0x200000a0
 8000698:	40005000 	.word	0x40005000

0800069c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <MX_USART1_UART_Init+0x50>)
 80006a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006c2:	2208      	movs	r2, #8
 80006c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006d4:	f001 fbbe 	bl	8001e54 <HAL_UART_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006de:	f000 f8c9 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200000e4 	.word	0x200000e4
 80006ec:	40011000 	.word	0x40011000

080006f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	; 0x28
 80006f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
 800070a:	4b32      	ldr	r3, [pc, #200]	; (80007d4 <MX_GPIO_Init+0xe4>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a31      	ldr	r2, [pc, #196]	; (80007d4 <MX_GPIO_Init+0xe4>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b2f      	ldr	r3, [pc, #188]	; (80007d4 <MX_GPIO_Init+0xe4>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <MX_GPIO_Init+0xe4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a2a      	ldr	r2, [pc, #168]	; (80007d4 <MX_GPIO_Init+0xe4>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <MX_GPIO_Init+0xe4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	4b24      	ldr	r3, [pc, #144]	; (80007d4 <MX_GPIO_Init+0xe4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a23      	ldr	r2, [pc, #140]	; (80007d4 <MX_GPIO_Init+0xe4>)
 8000748:	f043 0308 	orr.w	r3, r3, #8
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b21      	ldr	r3, [pc, #132]	; (80007d4 <MX_GPIO_Init+0xe4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0308 	and.w	r3, r3, #8
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <MX_GPIO_Init+0xe4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a1c      	ldr	r2, [pc, #112]	; (80007d4 <MX_GPIO_Init+0xe4>)
 8000764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_GPIO_Init+0xe4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800077c:	4816      	ldr	r0, [pc, #88]	; (80007d8 <MX_GPIO_Init+0xe8>)
 800077e:	f000 fe35 	bl	80013ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000782:	2301      	movs	r3, #1
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000786:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800078a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	4811      	ldr	r0, [pc, #68]	; (80007dc <MX_GPIO_Init+0xec>)
 8000798:	f000 fc7c 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800079c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80007a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a2:	2301      	movs	r3, #1
 80007a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2300      	movs	r3, #0
 80007ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4619      	mov	r1, r3
 80007b4:	4808      	ldr	r0, [pc, #32]	; (80007d8 <MX_GPIO_Init+0xe8>)
 80007b6:	f000 fc6d 	bl	8001094 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	2006      	movs	r0, #6
 80007c0:	f000 fb9f 	bl	8000f02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007c4:	2006      	movs	r0, #6
 80007c6:	f000 fbb8 	bl	8000f3a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ca:	bf00      	nop
 80007cc:	3728      	adds	r7, #40	; 0x28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40021800 	.word	0x40021800
 80007dc:	40020000 	.word	0x40020000

080007e0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0){
 80007ea:	88fb      	ldrh	r3, [r7, #6]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d10b      	bne.n	8000808 <HAL_GPIO_EXTI_Callback+0x28>
	// Generate interrupt when transmit complete
	HAL_UART_Transmit_IT(&huart5, serTxData, sizeof(serTxData));
 80007f0:	2213      	movs	r2, #19
 80007f2:	4907      	ldr	r1, [pc, #28]	; (8000810 <HAL_GPIO_EXTI_Callback+0x30>)
 80007f4:	4807      	ldr	r0, [pc, #28]	; (8000814 <HAL_GPIO_EXTI_Callback+0x34>)
 80007f6:	f001 fc0c 	bl	8002012 <HAL_UART_Transmit_IT>
	// Generate interrupt when Receive complete
	HAL_UART_Receive_IT(&huart5, serRxData, sizeof(serTxData));
 80007fa:	4b07      	ldr	r3, [pc, #28]	; (8000818 <HAL_GPIO_EXTI_Callback+0x38>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2213      	movs	r2, #19
 8000800:	4619      	mov	r1, r3
 8000802:	4804      	ldr	r0, [pc, #16]	; (8000814 <HAL_GPIO_EXTI_Callback+0x34>)
 8000804:	f001 fc4a 	bl	800209c <HAL_UART_Receive_IT>
	}

}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000000 	.word	0x20000000
 8000814:	200000a0 	.word	0x200000a0
 8000818:	20000128 	.word	0x20000128

0800081c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8000824:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000828:	4803      	ldr	r0, [pc, #12]	; (8000838 <HAL_UART_TxCpltCallback+0x1c>)
 800082a:	f000 fdf8 	bl	800141e <HAL_GPIO_TogglePin>
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40021800 	.word	0x40021800

0800083c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	HAL_Delay(5000);  // Introduce time delay between toggling leds for transmit and receive data
 8000844:	f241 3088 	movw	r0, #5000	; 0x1388
 8000848:	f000 fa5c 	bl	8000d04 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 800084c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000850:	4806      	ldr	r0, [pc, #24]	; (800086c <HAL_UART_RxCpltCallback+0x30>)
 8000852:	f000 fde4 	bl	800141e <HAL_GPIO_TogglePin>
	if (!strcmp ((char*)serTxData,(char*)serTxData)){
 8000856:	2300      	movs	r3, #0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d102      	bne.n	8000862 <HAL_UART_RxCpltCallback+0x26>

		printf("Data received successfully!\r\n");
 800085c:	4804      	ldr	r0, [pc, #16]	; (8000870 <HAL_UART_RxCpltCallback+0x34>)
 800085e:	f002 fd33 	bl	80032c8 <puts>
	}


}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40021800 	.word	0x40021800
 8000870:	08003a80 	.word	0x08003a80

08000874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000878:	b672      	cpsid	i
}
 800087a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087c:	e7fe      	b.n	800087c <Error_Handler+0x8>
	...

08000880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <HAL_MspInit+0x4c>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088e:	4a0f      	ldr	r2, [pc, #60]	; (80008cc <HAL_MspInit+0x4c>)
 8000890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000894:	6453      	str	r3, [r2, #68]	; 0x44
 8000896:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <HAL_MspInit+0x4c>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <HAL_MspInit+0x4c>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	4a08      	ldr	r2, [pc, #32]	; (80008cc <HAL_MspInit+0x4c>)
 80008ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b0:	6413      	str	r3, [r2, #64]	; 0x40
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <HAL_MspInit+0x4c>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 80008be:	2006      	movs	r0, #6
 80008c0:	f000 fb14 	bl	8000eec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800

080008d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08c      	sub	sp, #48	; 0x30
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a46      	ldr	r2, [pc, #280]	; (8000a08 <HAL_UART_MspInit+0x138>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d153      	bne.n	800099a <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	61bb      	str	r3, [r7, #24]
 80008f6:	4b45      	ldr	r3, [pc, #276]	; (8000a0c <HAL_UART_MspInit+0x13c>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	4a44      	ldr	r2, [pc, #272]	; (8000a0c <HAL_UART_MspInit+0x13c>)
 80008fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000900:	6413      	str	r3, [r2, #64]	; 0x40
 8000902:	4b42      	ldr	r3, [pc, #264]	; (8000a0c <HAL_UART_MspInit+0x13c>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800090a:	61bb      	str	r3, [r7, #24]
 800090c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
 8000912:	4b3e      	ldr	r3, [pc, #248]	; (8000a0c <HAL_UART_MspInit+0x13c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a3d      	ldr	r2, [pc, #244]	; (8000a0c <HAL_UART_MspInit+0x13c>)
 8000918:	f043 0304 	orr.w	r3, r3, #4
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b3b      	ldr	r3, [pc, #236]	; (8000a0c <HAL_UART_MspInit+0x13c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0304 	and.w	r3, r3, #4
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	4b37      	ldr	r3, [pc, #220]	; (8000a0c <HAL_UART_MspInit+0x13c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a36      	ldr	r2, [pc, #216]	; (8000a0c <HAL_UART_MspInit+0x13c>)
 8000934:	f043 0308 	orr.w	r3, r3, #8
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b34      	ldr	r3, [pc, #208]	; (8000a0c <HAL_UART_MspInit+0x13c>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0308 	and.w	r3, r3, #8
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000946:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
 800094e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000954:	2303      	movs	r3, #3
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000958:	2308      	movs	r3, #8
 800095a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	482b      	ldr	r0, [pc, #172]	; (8000a10 <HAL_UART_MspInit+0x140>)
 8000964:	f000 fb96 	bl	8001094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000968:	2304      	movs	r3, #4
 800096a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000974:	2303      	movs	r3, #3
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000978:	2308      	movs	r3, #8
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	4824      	ldr	r0, [pc, #144]	; (8000a14 <HAL_UART_MspInit+0x144>)
 8000984:	f000 fb86 	bl	8001094 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 1, 0);
 8000988:	2200      	movs	r2, #0
 800098a:	2101      	movs	r1, #1
 800098c:	2035      	movs	r0, #53	; 0x35
 800098e:	f000 fab8 	bl	8000f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000992:	2035      	movs	r0, #53	; 0x35
 8000994:	f000 fad1 	bl	8000f3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000998:	e031      	b.n	80009fe <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART1)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a1e      	ldr	r2, [pc, #120]	; (8000a18 <HAL_UART_MspInit+0x148>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d12c      	bne.n	80009fe <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART1_CLK_ENABLE();
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <HAL_UART_MspInit+0x13c>)
 80009aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ac:	4a17      	ldr	r2, [pc, #92]	; (8000a0c <HAL_UART_MspInit+0x13c>)
 80009ae:	f043 0310 	orr.w	r3, r3, #16
 80009b2:	6453      	str	r3, [r2, #68]	; 0x44
 80009b4:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <HAL_UART_MspInit+0x13c>)
 80009b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b8:	f003 0310 	and.w	r3, r3, #16
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c0:	2300      	movs	r3, #0
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <HAL_UART_MspInit+0x13c>)
 80009c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c8:	4a10      	ldr	r2, [pc, #64]	; (8000a0c <HAL_UART_MspInit+0x13c>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	6313      	str	r3, [r2, #48]	; 0x30
 80009d0:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <HAL_UART_MspInit+0x13c>)
 80009d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009dc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	2302      	movs	r3, #2
 80009e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ea:	2303      	movs	r3, #3
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009ee:	2307      	movs	r3, #7
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4808      	ldr	r0, [pc, #32]	; (8000a1c <HAL_UART_MspInit+0x14c>)
 80009fa:	f000 fb4b 	bl	8001094 <HAL_GPIO_Init>
}
 80009fe:	bf00      	nop
 8000a00:	3730      	adds	r7, #48	; 0x30
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40005000 	.word	0x40005000
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020800 	.word	0x40020800
 8000a14:	40020c00 	.word	0x40020c00
 8000a18:	40011000 	.word	0x40011000
 8000a1c:	40020000 	.word	0x40020000

08000a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <NMI_Handler+0x4>

08000a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <HardFault_Handler+0x4>

08000a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <MemManage_Handler+0x4>

08000a32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <BusFault_Handler+0x4>

08000a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <UsageFault_Handler+0x4>

08000a3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a6c:	f000 f92a 	bl	8000cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a78:	2001      	movs	r0, #1
 8000a7a:	f000 fceb 	bl	8001454 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <UART5_IRQHandler+0x10>)
 8000a8a:	f001 fb37 	bl	80020fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200000a0 	.word	0x200000a0

08000a98 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	e00a      	b.n	8000ac0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000aaa:	f3af 8000 	nop.w
 8000aae:	4601      	mov	r1, r0
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	1c5a      	adds	r2, r3, #1
 8000ab4:	60ba      	str	r2, [r7, #8]
 8000ab6:	b2ca      	uxtb	r2, r1
 8000ab8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	3301      	adds	r3, #1
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	697a      	ldr	r2, [r7, #20]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	dbf0      	blt.n	8000aaa <_read+0x12>
  }

  return len;
 8000ac8:	687b      	ldr	r3, [r7, #4]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aea:	b480      	push	{r7}
 8000aec:	b083      	sub	sp, #12
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
 8000af2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000afa:	605a      	str	r2, [r3, #4]
  return 0;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <_isatty>:

int _isatty(int file)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b12:	2301      	movs	r3, #1
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
	...

08000b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b44:	4a14      	ldr	r2, [pc, #80]	; (8000b98 <_sbrk+0x5c>)
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <_sbrk+0x60>)
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d102      	bne.n	8000b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <_sbrk+0x64>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <_sbrk+0x68>)
 8000b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <_sbrk+0x64>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d207      	bcs.n	8000b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b6c:	f002 fa24 	bl	8002fb8 <__errno>
 8000b70:	4603      	mov	r3, r0
 8000b72:	220c      	movs	r2, #12
 8000b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7a:	e009      	b.n	8000b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <_sbrk+0x64>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b82:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <_sbrk+0x64>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	4a05      	ldr	r2, [pc, #20]	; (8000ba0 <_sbrk+0x64>)
 8000b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20030000 	.word	0x20030000
 8000b9c:	00000400 	.word	0x00000400
 8000ba0:	2000012c 	.word	0x2000012c
 8000ba4:	20000148 	.word	0x20000148

08000ba8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <SystemInit+0x20>)
 8000bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <SystemInit+0x20>)
 8000bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c04 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd0:	480d      	ldr	r0, [pc, #52]	; (8000c08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bd2:	490e      	ldr	r1, [pc, #56]	; (8000c0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bd4:	4a0e      	ldr	r2, [pc, #56]	; (8000c10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd8:	e002      	b.n	8000be0 <LoopCopyDataInit>

08000bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bde:	3304      	adds	r3, #4

08000be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be4:	d3f9      	bcc.n	8000bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be6:	4a0b      	ldr	r2, [pc, #44]	; (8000c14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000be8:	4c0b      	ldr	r4, [pc, #44]	; (8000c18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bec:	e001      	b.n	8000bf2 <LoopFillZerobss>

08000bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf0:	3204      	adds	r2, #4

08000bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf4:	d3fb      	bcc.n	8000bee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bf6:	f7ff ffd7 	bl	8000ba8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bfa:	f002 f9e3 	bl	8002fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfe:	f7ff fc8d 	bl	800051c <main>
  bx  lr    
 8000c02:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c04:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c0c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000c10:	08003b2c 	.word	0x08003b2c
  ldr r2, =_sbss
 8000c14:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000c18:	20000144 	.word	0x20000144

08000c1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC_IRQHandler>
	...

08000c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c24:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <HAL_Init+0x40>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a0d      	ldr	r2, [pc, #52]	; (8000c60 <HAL_Init+0x40>)
 8000c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c30:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <HAL_Init+0x40>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <HAL_Init+0x40>)
 8000c36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <HAL_Init+0x40>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a07      	ldr	r2, [pc, #28]	; (8000c60 <HAL_Init+0x40>)
 8000c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c48:	2003      	movs	r0, #3
 8000c4a:	f000 f94f 	bl	8000eec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f000 f808 	bl	8000c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c54:	f7ff fe14 	bl	8000880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40023c00 	.word	0x40023c00

08000c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HAL_InitTick+0x54>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <HAL_InitTick+0x58>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	4619      	mov	r1, r3
 8000c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f967 	bl	8000f56 <HAL_SYSTICK_Config>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e00e      	b.n	8000cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b0f      	cmp	r3, #15
 8000c96:	d80a      	bhi.n	8000cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca0:	f000 f92f 	bl	8000f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca4:	4a06      	ldr	r2, [pc, #24]	; (8000cc0 <HAL_InitTick+0x5c>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000caa:	2300      	movs	r3, #0
 8000cac:	e000      	b.n	8000cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000014 	.word	0x20000014
 8000cbc:	2000001c 	.word	0x2000001c
 8000cc0:	20000018 	.word	0x20000018

08000cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_IncTick+0x20>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_IncTick+0x24>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <HAL_IncTick+0x24>)
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	2000001c 	.word	0x2000001c
 8000ce8:	20000130 	.word	0x20000130

08000cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <HAL_GetTick+0x14>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	20000130 	.word	0x20000130

08000d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d0c:	f7ff ffee 	bl	8000cec <HAL_GetTick>
 8000d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d1c:	d005      	beq.n	8000d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <HAL_Delay+0x44>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	461a      	mov	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4413      	add	r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d2a:	bf00      	nop
 8000d2c:	f7ff ffde 	bl	8000cec <HAL_GetTick>
 8000d30:	4602      	mov	r2, r0
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d8f7      	bhi.n	8000d2c <HAL_Delay+0x28>
  {
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	2000001c 	.word	0x2000001c

08000d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7e:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	60d3      	str	r3, [r2, #12]
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <__NVIC_GetPriorityGrouping+0x18>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	0a1b      	lsrs	r3, r3, #8
 8000d9e:	f003 0307 	and.w	r3, r3, #7
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	db0b      	blt.n	8000dda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	f003 021f 	and.w	r2, r3, #31
 8000dc8:	4907      	ldr	r1, [pc, #28]	; (8000de8 <__NVIC_EnableIRQ+0x38>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	095b      	lsrs	r3, r3, #5
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000e100 	.word	0xe000e100

08000dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	db0a      	blt.n	8000e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	490c      	ldr	r1, [pc, #48]	; (8000e38 <__NVIC_SetPriority+0x4c>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	0112      	lsls	r2, r2, #4
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	440b      	add	r3, r1
 8000e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e14:	e00a      	b.n	8000e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4908      	ldr	r1, [pc, #32]	; (8000e3c <__NVIC_SetPriority+0x50>)
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	3b04      	subs	r3, #4
 8000e24:	0112      	lsls	r2, r2, #4
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	440b      	add	r3, r1
 8000e2a:	761a      	strb	r2, [r3, #24]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000e100 	.word	0xe000e100
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	; 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f1c3 0307 	rsb	r3, r3, #7
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	bf28      	it	cs
 8000e5e:	2304      	movcs	r3, #4
 8000e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3304      	adds	r3, #4
 8000e66:	2b06      	cmp	r3, #6
 8000e68:	d902      	bls.n	8000e70 <NVIC_EncodePriority+0x30>
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3b03      	subs	r3, #3
 8000e6e:	e000      	b.n	8000e72 <NVIC_EncodePriority+0x32>
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	f04f 32ff 	mov.w	r2, #4294967295
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	401a      	ands	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e88:	f04f 31ff 	mov.w	r1, #4294967295
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e92:	43d9      	mvns	r1, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	4313      	orrs	r3, r2
         );
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3724      	adds	r7, #36	; 0x24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
	...

08000ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb8:	d301      	bcc.n	8000ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00f      	b.n	8000ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <SysTick_Config+0x40>)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec6:	210f      	movs	r1, #15
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f7ff ff8e 	bl	8000dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed0:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <SysTick_Config+0x40>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed6:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <SysTick_Config+0x40>)
 8000ed8:	2207      	movs	r2, #7
 8000eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	e000e010 	.word	0xe000e010

08000eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff ff29 	bl	8000d4c <__NVIC_SetPriorityGrouping>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b086      	sub	sp, #24
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4603      	mov	r3, r0
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	607a      	str	r2, [r7, #4]
 8000f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f14:	f7ff ff3e 	bl	8000d94 <__NVIC_GetPriorityGrouping>
 8000f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	68b9      	ldr	r1, [r7, #8]
 8000f1e:	6978      	ldr	r0, [r7, #20]
 8000f20:	f7ff ff8e 	bl	8000e40 <NVIC_EncodePriority>
 8000f24:	4602      	mov	r2, r0
 8000f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff5d 	bl	8000dec <__NVIC_SetPriority>
}
 8000f32:	bf00      	nop
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	4603      	mov	r3, r0
 8000f42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff31 	bl	8000db0 <__NVIC_EnableIRQ>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff ffa2 	bl	8000ea8 <SysTick_Config>
 8000f64:	4603      	mov	r3, r0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b084      	sub	sp, #16
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f7c:	f7ff feb6 	bl	8000cec <HAL_GetTick>
 8000f80:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d008      	beq.n	8000fa0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2280      	movs	r2, #128	; 0x80
 8000f92:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e052      	b.n	8001046 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f022 0216 	bic.w	r2, r2, #22
 8000fae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	695a      	ldr	r2, [r3, #20]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fbe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d103      	bne.n	8000fd0 <HAL_DMA_Abort+0x62>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d007      	beq.n	8000fe0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f022 0208 	bic.w	r2, r2, #8
 8000fde:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f022 0201 	bic.w	r2, r2, #1
 8000fee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ff0:	e013      	b.n	800101a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ff2:	f7ff fe7b 	bl	8000cec <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b05      	cmp	r3, #5
 8000ffe:	d90c      	bls.n	800101a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2220      	movs	r2, #32
 8001004:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2203      	movs	r2, #3
 800100a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e015      	b.n	8001046 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1e4      	bne.n	8000ff2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800102c:	223f      	movs	r2, #63	; 0x3f
 800102e:	409a      	lsls	r2, r3
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2201      	movs	r2, #1
 8001038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d004      	beq.n	800106c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2280      	movs	r2, #128	; 0x80
 8001066:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e00c      	b.n	8001086 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2205      	movs	r2, #5
 8001070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f022 0201 	bic.w	r2, r2, #1
 8001082:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	; 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
 80010ae:	e177      	b.n	80013a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010b0:	2201      	movs	r2, #1
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	f040 8166 	bne.w	800139a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 0303 	and.w	r3, r3, #3
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d005      	beq.n	80010e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d130      	bne.n	8001148 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	2203      	movs	r2, #3
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	68da      	ldr	r2, [r3, #12]
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800111c:	2201      	movs	r2, #1
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	091b      	lsrs	r3, r3, #4
 8001132:	f003 0201 	and.w	r2, r3, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	2b03      	cmp	r3, #3
 8001152:	d017      	beq.n	8001184 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	2203      	movs	r2, #3
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d123      	bne.n	80011d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	08da      	lsrs	r2, r3, #3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3208      	adds	r2, #8
 8001198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800119c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	f003 0307 	and.w	r3, r3, #7
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	220f      	movs	r2, #15
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	691a      	ldr	r2, [r3, #16]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	08da      	lsrs	r2, r3, #3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3208      	adds	r2, #8
 80011d2:	69b9      	ldr	r1, [r7, #24]
 80011d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0203 	and.w	r2, r3, #3
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001214:	2b00      	cmp	r3, #0
 8001216:	f000 80c0 	beq.w	800139a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	4b66      	ldr	r3, [pc, #408]	; (80013b8 <HAL_GPIO_Init+0x324>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	4a65      	ldr	r2, [pc, #404]	; (80013b8 <HAL_GPIO_Init+0x324>)
 8001224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001228:	6453      	str	r3, [r2, #68]	; 0x44
 800122a:	4b63      	ldr	r3, [pc, #396]	; (80013b8 <HAL_GPIO_Init+0x324>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001236:	4a61      	ldr	r2, [pc, #388]	; (80013bc <HAL_GPIO_Init+0x328>)
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	089b      	lsrs	r3, r3, #2
 800123c:	3302      	adds	r3, #2
 800123e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	220f      	movs	r2, #15
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a58      	ldr	r2, [pc, #352]	; (80013c0 <HAL_GPIO_Init+0x32c>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d037      	beq.n	80012d2 <HAL_GPIO_Init+0x23e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a57      	ldr	r2, [pc, #348]	; (80013c4 <HAL_GPIO_Init+0x330>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d031      	beq.n	80012ce <HAL_GPIO_Init+0x23a>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a56      	ldr	r2, [pc, #344]	; (80013c8 <HAL_GPIO_Init+0x334>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d02b      	beq.n	80012ca <HAL_GPIO_Init+0x236>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a55      	ldr	r2, [pc, #340]	; (80013cc <HAL_GPIO_Init+0x338>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d025      	beq.n	80012c6 <HAL_GPIO_Init+0x232>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a54      	ldr	r2, [pc, #336]	; (80013d0 <HAL_GPIO_Init+0x33c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d01f      	beq.n	80012c2 <HAL_GPIO_Init+0x22e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a53      	ldr	r2, [pc, #332]	; (80013d4 <HAL_GPIO_Init+0x340>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d019      	beq.n	80012be <HAL_GPIO_Init+0x22a>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a52      	ldr	r2, [pc, #328]	; (80013d8 <HAL_GPIO_Init+0x344>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d013      	beq.n	80012ba <HAL_GPIO_Init+0x226>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a51      	ldr	r2, [pc, #324]	; (80013dc <HAL_GPIO_Init+0x348>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d00d      	beq.n	80012b6 <HAL_GPIO_Init+0x222>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a50      	ldr	r2, [pc, #320]	; (80013e0 <HAL_GPIO_Init+0x34c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d007      	beq.n	80012b2 <HAL_GPIO_Init+0x21e>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a4f      	ldr	r2, [pc, #316]	; (80013e4 <HAL_GPIO_Init+0x350>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d101      	bne.n	80012ae <HAL_GPIO_Init+0x21a>
 80012aa:	2309      	movs	r3, #9
 80012ac:	e012      	b.n	80012d4 <HAL_GPIO_Init+0x240>
 80012ae:	230a      	movs	r3, #10
 80012b0:	e010      	b.n	80012d4 <HAL_GPIO_Init+0x240>
 80012b2:	2308      	movs	r3, #8
 80012b4:	e00e      	b.n	80012d4 <HAL_GPIO_Init+0x240>
 80012b6:	2307      	movs	r3, #7
 80012b8:	e00c      	b.n	80012d4 <HAL_GPIO_Init+0x240>
 80012ba:	2306      	movs	r3, #6
 80012bc:	e00a      	b.n	80012d4 <HAL_GPIO_Init+0x240>
 80012be:	2305      	movs	r3, #5
 80012c0:	e008      	b.n	80012d4 <HAL_GPIO_Init+0x240>
 80012c2:	2304      	movs	r3, #4
 80012c4:	e006      	b.n	80012d4 <HAL_GPIO_Init+0x240>
 80012c6:	2303      	movs	r3, #3
 80012c8:	e004      	b.n	80012d4 <HAL_GPIO_Init+0x240>
 80012ca:	2302      	movs	r3, #2
 80012cc:	e002      	b.n	80012d4 <HAL_GPIO_Init+0x240>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e000      	b.n	80012d4 <HAL_GPIO_Init+0x240>
 80012d2:	2300      	movs	r3, #0
 80012d4:	69fa      	ldr	r2, [r7, #28]
 80012d6:	f002 0203 	and.w	r2, r2, #3
 80012da:	0092      	lsls	r2, r2, #2
 80012dc:	4093      	lsls	r3, r2
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012e4:	4935      	ldr	r1, [pc, #212]	; (80013bc <HAL_GPIO_Init+0x328>)
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	089b      	lsrs	r3, r3, #2
 80012ea:	3302      	adds	r3, #2
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012f2:	4b3d      	ldr	r3, [pc, #244]	; (80013e8 <HAL_GPIO_Init+0x354>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001316:	4a34      	ldr	r2, [pc, #208]	; (80013e8 <HAL_GPIO_Init+0x354>)
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800131c:	4b32      	ldr	r3, [pc, #200]	; (80013e8 <HAL_GPIO_Init+0x354>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001340:	4a29      	ldr	r2, [pc, #164]	; (80013e8 <HAL_GPIO_Init+0x354>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001346:	4b28      	ldr	r3, [pc, #160]	; (80013e8 <HAL_GPIO_Init+0x354>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800136a:	4a1f      	ldr	r2, [pc, #124]	; (80013e8 <HAL_GPIO_Init+0x354>)
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001370:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <HAL_GPIO_Init+0x354>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001394:	4a14      	ldr	r2, [pc, #80]	; (80013e8 <HAL_GPIO_Init+0x354>)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3301      	adds	r3, #1
 800139e:	61fb      	str	r3, [r7, #28]
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	2b0f      	cmp	r3, #15
 80013a4:	f67f ae84 	bls.w	80010b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013a8:	bf00      	nop
 80013aa:	bf00      	nop
 80013ac:	3724      	adds	r7, #36	; 0x24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40013800 	.word	0x40013800
 80013c0:	40020000 	.word	0x40020000
 80013c4:	40020400 	.word	0x40020400
 80013c8:	40020800 	.word	0x40020800
 80013cc:	40020c00 	.word	0x40020c00
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40021400 	.word	0x40021400
 80013d8:	40021800 	.word	0x40021800
 80013dc:	40021c00 	.word	0x40021c00
 80013e0:	40022000 	.word	0x40022000
 80013e4:	40022400 	.word	0x40022400
 80013e8:	40013c00 	.word	0x40013c00

080013ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	807b      	strh	r3, [r7, #2]
 80013f8:	4613      	mov	r3, r2
 80013fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013fc:	787b      	ldrb	r3, [r7, #1]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001402:	887a      	ldrh	r2, [r7, #2]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001408:	e003      	b.n	8001412 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800140a:	887b      	ldrh	r3, [r7, #2]
 800140c:	041a      	lsls	r2, r3, #16
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	619a      	str	r2, [r3, #24]
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800141e:	b480      	push	{r7}
 8001420:	b085      	sub	sp, #20
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	460b      	mov	r3, r1
 8001428:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001430:	887a      	ldrh	r2, [r7, #2]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	4013      	ands	r3, r2
 8001436:	041a      	lsls	r2, r3, #16
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	43d9      	mvns	r1, r3
 800143c:	887b      	ldrh	r3, [r7, #2]
 800143e:	400b      	ands	r3, r1
 8001440:	431a      	orrs	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	619a      	str	r2, [r3, #24]
}
 8001446:	bf00      	nop
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001460:	695a      	ldr	r2, [r3, #20]
 8001462:	88fb      	ldrh	r3, [r7, #6]
 8001464:	4013      	ands	r3, r2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d006      	beq.n	8001478 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800146a:	4a05      	ldr	r2, [pc, #20]	; (8001480 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800146c:	88fb      	ldrh	r3, [r7, #6]
 800146e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001470:	88fb      	ldrh	r3, [r7, #6]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff f9b4 	bl	80007e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40013c00 	.word	0x40013c00

08001484 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	603b      	str	r3, [r7, #0]
 8001492:	4b20      	ldr	r3, [pc, #128]	; (8001514 <HAL_PWREx_EnableOverDrive+0x90>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	4a1f      	ldr	r2, [pc, #124]	; (8001514 <HAL_PWREx_EnableOverDrive+0x90>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149c:	6413      	str	r3, [r2, #64]	; 0x40
 800149e:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <HAL_PWREx_EnableOverDrive+0x90>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80014aa:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <HAL_PWREx_EnableOverDrive+0x94>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014b0:	f7ff fc1c 	bl	8000cec <HAL_GetTick>
 80014b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014b6:	e009      	b.n	80014cc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014b8:	f7ff fc18 	bl	8000cec <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014c6:	d901      	bls.n	80014cc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e01f      	b.n	800150c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014cc:	4b13      	ldr	r3, [pc, #76]	; (800151c <HAL_PWREx_EnableOverDrive+0x98>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d8:	d1ee      	bne.n	80014b8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014dc:	2201      	movs	r2, #1
 80014de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014e0:	f7ff fc04 	bl	8000cec <HAL_GetTick>
 80014e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014e6:	e009      	b.n	80014fc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014e8:	f7ff fc00 	bl	8000cec <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014f6:	d901      	bls.n	80014fc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e007      	b.n	800150c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <HAL_PWREx_EnableOverDrive+0x98>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001504:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001508:	d1ee      	bne.n	80014e8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40023800 	.word	0x40023800
 8001518:	420e0040 	.word	0x420e0040
 800151c:	40007000 	.word	0x40007000
 8001520:	420e0044 	.word	0x420e0044

08001524 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e267      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d075      	beq.n	800162e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001542:	4b88      	ldr	r3, [pc, #544]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 030c 	and.w	r3, r3, #12
 800154a:	2b04      	cmp	r3, #4
 800154c:	d00c      	beq.n	8001568 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800154e:	4b85      	ldr	r3, [pc, #532]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001556:	2b08      	cmp	r3, #8
 8001558:	d112      	bne.n	8001580 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800155a:	4b82      	ldr	r3, [pc, #520]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001562:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001566:	d10b      	bne.n	8001580 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001568:	4b7e      	ldr	r3, [pc, #504]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d05b      	beq.n	800162c <HAL_RCC_OscConfig+0x108>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d157      	bne.n	800162c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e242      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001588:	d106      	bne.n	8001598 <HAL_RCC_OscConfig+0x74>
 800158a:	4b76      	ldr	r3, [pc, #472]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a75      	ldr	r2, [pc, #468]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 8001590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	e01d      	b.n	80015d4 <HAL_RCC_OscConfig+0xb0>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015a0:	d10c      	bne.n	80015bc <HAL_RCC_OscConfig+0x98>
 80015a2:	4b70      	ldr	r3, [pc, #448]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a6f      	ldr	r2, [pc, #444]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 80015a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	4b6d      	ldr	r3, [pc, #436]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a6c      	ldr	r2, [pc, #432]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 80015b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	e00b      	b.n	80015d4 <HAL_RCC_OscConfig+0xb0>
 80015bc:	4b69      	ldr	r3, [pc, #420]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a68      	ldr	r2, [pc, #416]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 80015c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	4b66      	ldr	r3, [pc, #408]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a65      	ldr	r2, [pc, #404]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 80015ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d013      	beq.n	8001604 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015dc:	f7ff fb86 	bl	8000cec <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015e4:	f7ff fb82 	bl	8000cec <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b64      	cmp	r3, #100	; 0x64
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e207      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f6:	4b5b      	ldr	r3, [pc, #364]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0f0      	beq.n	80015e4 <HAL_RCC_OscConfig+0xc0>
 8001602:	e014      	b.n	800162e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7ff fb72 	bl	8000cec <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800160c:	f7ff fb6e 	bl	8000cec <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b64      	cmp	r3, #100	; 0x64
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e1f3      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800161e:	4b51      	ldr	r3, [pc, #324]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0xe8>
 800162a:	e000      	b.n	800162e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800162c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d063      	beq.n	8001702 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800163a:	4b4a      	ldr	r3, [pc, #296]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 030c 	and.w	r3, r3, #12
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00b      	beq.n	800165e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001646:	4b47      	ldr	r3, [pc, #284]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800164e:	2b08      	cmp	r3, #8
 8001650:	d11c      	bne.n	800168c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001652:	4b44      	ldr	r3, [pc, #272]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d116      	bne.n	800168c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165e:	4b41      	ldr	r3, [pc, #260]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d005      	beq.n	8001676 <HAL_RCC_OscConfig+0x152>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d001      	beq.n	8001676 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e1c7      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001676:	4b3b      	ldr	r3, [pc, #236]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	4937      	ldr	r1, [pc, #220]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 8001686:	4313      	orrs	r3, r2
 8001688:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800168a:	e03a      	b.n	8001702 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d020      	beq.n	80016d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001694:	4b34      	ldr	r3, [pc, #208]	; (8001768 <HAL_RCC_OscConfig+0x244>)
 8001696:	2201      	movs	r2, #1
 8001698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169a:	f7ff fb27 	bl	8000cec <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016a2:	f7ff fb23 	bl	8000cec <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e1a8      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b4:	4b2b      	ldr	r3, [pc, #172]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0f0      	beq.n	80016a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c0:	4b28      	ldr	r3, [pc, #160]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	4925      	ldr	r1, [pc, #148]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	600b      	str	r3, [r1, #0]
 80016d4:	e015      	b.n	8001702 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016d6:	4b24      	ldr	r3, [pc, #144]	; (8001768 <HAL_RCC_OscConfig+0x244>)
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016dc:	f7ff fb06 	bl	8000cec <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016e4:	f7ff fb02 	bl	8000cec <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e187      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016f6:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f0      	bne.n	80016e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	2b00      	cmp	r3, #0
 800170c:	d036      	beq.n	800177c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d016      	beq.n	8001744 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <HAL_RCC_OscConfig+0x248>)
 8001718:	2201      	movs	r2, #1
 800171a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171c:	f7ff fae6 	bl	8000cec <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001724:	f7ff fae2 	bl	8000cec <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e167      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 8001738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0f0      	beq.n	8001724 <HAL_RCC_OscConfig+0x200>
 8001742:	e01b      	b.n	800177c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_RCC_OscConfig+0x248>)
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174a:	f7ff facf 	bl	8000cec <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001750:	e00e      	b.n	8001770 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001752:	f7ff facb 	bl	8000cec <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d907      	bls.n	8001770 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e150      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e2>
 8001764:	40023800 	.word	0x40023800
 8001768:	42470000 	.word	0x42470000
 800176c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001770:	4b88      	ldr	r3, [pc, #544]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 8001772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1ea      	bne.n	8001752 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	2b00      	cmp	r3, #0
 8001786:	f000 8097 	beq.w	80018b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800178a:	2300      	movs	r3, #0
 800178c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800178e:	4b81      	ldr	r3, [pc, #516]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d10f      	bne.n	80017ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	4b7d      	ldr	r3, [pc, #500]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	4a7c      	ldr	r2, [pc, #496]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 80017a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a8:	6413      	str	r3, [r2, #64]	; 0x40
 80017aa:	4b7a      	ldr	r3, [pc, #488]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017b6:	2301      	movs	r3, #1
 80017b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ba:	4b77      	ldr	r3, [pc, #476]	; (8001998 <HAL_RCC_OscConfig+0x474>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d118      	bne.n	80017f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017c6:	4b74      	ldr	r3, [pc, #464]	; (8001998 <HAL_RCC_OscConfig+0x474>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a73      	ldr	r2, [pc, #460]	; (8001998 <HAL_RCC_OscConfig+0x474>)
 80017cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017d2:	f7ff fa8b 	bl	8000cec <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017da:	f7ff fa87 	bl	8000cec <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e10c      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ec:	4b6a      	ldr	r3, [pc, #424]	; (8001998 <HAL_RCC_OscConfig+0x474>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0f0      	beq.n	80017da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d106      	bne.n	800180e <HAL_RCC_OscConfig+0x2ea>
 8001800:	4b64      	ldr	r3, [pc, #400]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 8001802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001804:	4a63      	ldr	r2, [pc, #396]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	6713      	str	r3, [r2, #112]	; 0x70
 800180c:	e01c      	b.n	8001848 <HAL_RCC_OscConfig+0x324>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	2b05      	cmp	r3, #5
 8001814:	d10c      	bne.n	8001830 <HAL_RCC_OscConfig+0x30c>
 8001816:	4b5f      	ldr	r3, [pc, #380]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 8001818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181a:	4a5e      	ldr	r2, [pc, #376]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 800181c:	f043 0304 	orr.w	r3, r3, #4
 8001820:	6713      	str	r3, [r2, #112]	; 0x70
 8001822:	4b5c      	ldr	r3, [pc, #368]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 8001824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001826:	4a5b      	ldr	r2, [pc, #364]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6713      	str	r3, [r2, #112]	; 0x70
 800182e:	e00b      	b.n	8001848 <HAL_RCC_OscConfig+0x324>
 8001830:	4b58      	ldr	r3, [pc, #352]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 8001832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001834:	4a57      	ldr	r2, [pc, #348]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 8001836:	f023 0301 	bic.w	r3, r3, #1
 800183a:	6713      	str	r3, [r2, #112]	; 0x70
 800183c:	4b55      	ldr	r3, [pc, #340]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 800183e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001840:	4a54      	ldr	r2, [pc, #336]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 8001842:	f023 0304 	bic.w	r3, r3, #4
 8001846:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d015      	beq.n	800187c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001850:	f7ff fa4c 	bl	8000cec <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001856:	e00a      	b.n	800186e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001858:	f7ff fa48 	bl	8000cec <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f241 3288 	movw	r2, #5000	; 0x1388
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e0cb      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186e:	4b49      	ldr	r3, [pc, #292]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 8001870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d0ee      	beq.n	8001858 <HAL_RCC_OscConfig+0x334>
 800187a:	e014      	b.n	80018a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187c:	f7ff fa36 	bl	8000cec <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001882:	e00a      	b.n	800189a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001884:	f7ff fa32 	bl	8000cec <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001892:	4293      	cmp	r3, r2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e0b5      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800189a:	4b3e      	ldr	r3, [pc, #248]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 800189c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1ee      	bne.n	8001884 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018a6:	7dfb      	ldrb	r3, [r7, #23]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d105      	bne.n	80018b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ac:	4b39      	ldr	r3, [pc, #228]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 80018ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b0:	4a38      	ldr	r2, [pc, #224]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 80018b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f000 80a1 	beq.w	8001a04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018c2:	4b34      	ldr	r3, [pc, #208]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 030c 	and.w	r3, r3, #12
 80018ca:	2b08      	cmp	r3, #8
 80018cc:	d05c      	beq.n	8001988 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d141      	bne.n	800195a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d6:	4b31      	ldr	r3, [pc, #196]	; (800199c <HAL_RCC_OscConfig+0x478>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018dc:	f7ff fa06 	bl	8000cec <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e4:	f7ff fa02 	bl	8000cec <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e087      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f6:	4b27      	ldr	r3, [pc, #156]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69da      	ldr	r2, [r3, #28]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a1b      	ldr	r3, [r3, #32]
 800190a:	431a      	orrs	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	019b      	lsls	r3, r3, #6
 8001912:	431a      	orrs	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001918:	085b      	lsrs	r3, r3, #1
 800191a:	3b01      	subs	r3, #1
 800191c:	041b      	lsls	r3, r3, #16
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001924:	061b      	lsls	r3, r3, #24
 8001926:	491b      	ldr	r1, [pc, #108]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 8001928:	4313      	orrs	r3, r2
 800192a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800192c:	4b1b      	ldr	r3, [pc, #108]	; (800199c <HAL_RCC_OscConfig+0x478>)
 800192e:	2201      	movs	r2, #1
 8001930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001932:	f7ff f9db 	bl	8000cec <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800193a:	f7ff f9d7 	bl	8000cec <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e05c      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0f0      	beq.n	800193a <HAL_RCC_OscConfig+0x416>
 8001958:	e054      	b.n	8001a04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <HAL_RCC_OscConfig+0x478>)
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001960:	f7ff f9c4 	bl	8000cec <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001968:	f7ff f9c0 	bl	8000cec <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e045      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x444>
 8001986:	e03d      	b.n	8001a04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d107      	bne.n	80019a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e038      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e2>
 8001994:	40023800 	.word	0x40023800
 8001998:	40007000 	.word	0x40007000
 800199c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019a0:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <HAL_RCC_OscConfig+0x4ec>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d028      	beq.n	8001a00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d121      	bne.n	8001a00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d11a      	bne.n	8001a00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019d0:	4013      	ands	r3, r2
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019d8:	4293      	cmp	r3, r2
 80019da:	d111      	bne.n	8001a00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e6:	085b      	lsrs	r3, r3, #1
 80019e8:	3b01      	subs	r3, #1
 80019ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d107      	bne.n	8001a00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d001      	beq.n	8001a04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e000      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023800 	.word	0x40023800

08001a14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e0cc      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a28:	4b68      	ldr	r3, [pc, #416]	; (8001bcc <HAL_RCC_ClockConfig+0x1b8>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 030f 	and.w	r3, r3, #15
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d90c      	bls.n	8001a50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a36:	4b65      	ldr	r3, [pc, #404]	; (8001bcc <HAL_RCC_ClockConfig+0x1b8>)
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3e:	4b63      	ldr	r3, [pc, #396]	; (8001bcc <HAL_RCC_ClockConfig+0x1b8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e0b8      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d020      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a68:	4b59      	ldr	r3, [pc, #356]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	4a58      	ldr	r2, [pc, #352]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0308 	and.w	r3, r3, #8
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d005      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a80:	4b53      	ldr	r3, [pc, #332]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	4a52      	ldr	r2, [pc, #328]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a8c:	4b50      	ldr	r3, [pc, #320]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	494d      	ldr	r1, [pc, #308]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d044      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d107      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab2:	4b47      	ldr	r3, [pc, #284]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d119      	bne.n	8001af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e07f      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d003      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	d107      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad2:	4b3f      	ldr	r3, [pc, #252]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d109      	bne.n	8001af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e06f      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae2:	4b3b      	ldr	r3, [pc, #236]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e067      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001af2:	4b37      	ldr	r3, [pc, #220]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f023 0203 	bic.w	r2, r3, #3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	4934      	ldr	r1, [pc, #208]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b04:	f7ff f8f2 	bl	8000cec <HAL_GetTick>
 8001b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0a:	e00a      	b.n	8001b22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b0c:	f7ff f8ee 	bl	8000cec <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e04f      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b22:	4b2b      	ldr	r3, [pc, #172]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 020c 	and.w	r2, r3, #12
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d1eb      	bne.n	8001b0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b34:	4b25      	ldr	r3, [pc, #148]	; (8001bcc <HAL_RCC_ClockConfig+0x1b8>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 030f 	and.w	r3, r3, #15
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d20c      	bcs.n	8001b5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b42:	4b22      	ldr	r3, [pc, #136]	; (8001bcc <HAL_RCC_ClockConfig+0x1b8>)
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4a:	4b20      	ldr	r3, [pc, #128]	; (8001bcc <HAL_RCC_ClockConfig+0x1b8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d001      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e032      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d008      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b68:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	4916      	ldr	r1, [pc, #88]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d009      	beq.n	8001b9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b86:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	490e      	ldr	r1, [pc, #56]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b9a:	f000 f821 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	091b      	lsrs	r3, r3, #4
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	490a      	ldr	r1, [pc, #40]	; (8001bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001bac:	5ccb      	ldrb	r3, [r1, r3]
 8001bae:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb2:	4a09      	ldr	r2, [pc, #36]	; (8001bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_RCC_ClockConfig+0x1c8>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff f852 	bl	8000c64 <HAL_InitTick>

  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40023c00 	.word	0x40023c00
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	08003aa0 	.word	0x08003aa0
 8001bd8:	20000014 	.word	0x20000014
 8001bdc:	20000018 	.word	0x20000018

08001be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001be0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001be4:	b094      	sub	sp, #80	; 0x50
 8001be6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	647b      	str	r3, [r7, #68]	; 0x44
 8001bec:	2300      	movs	r3, #0
 8001bee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bf8:	4b79      	ldr	r3, [pc, #484]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 030c 	and.w	r3, r3, #12
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d00d      	beq.n	8001c20 <HAL_RCC_GetSysClockFreq+0x40>
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	f200 80e1 	bhi.w	8001dcc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d002      	beq.n	8001c14 <HAL_RCC_GetSysClockFreq+0x34>
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	d003      	beq.n	8001c1a <HAL_RCC_GetSysClockFreq+0x3a>
 8001c12:	e0db      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c14:	4b73      	ldr	r3, [pc, #460]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c16:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c18:	e0db      	b.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c1a:	4b73      	ldr	r3, [pc, #460]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c1e:	e0d8      	b.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c20:	4b6f      	ldr	r3, [pc, #444]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c28:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c2a:	4b6d      	ldr	r3, [pc, #436]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d063      	beq.n	8001cfe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c36:	4b6a      	ldr	r3, [pc, #424]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	099b      	lsrs	r3, r3, #6
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c40:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c48:	633b      	str	r3, [r7, #48]	; 0x30
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	637b      	str	r3, [r7, #52]	; 0x34
 8001c4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c52:	4622      	mov	r2, r4
 8001c54:	462b      	mov	r3, r5
 8001c56:	f04f 0000 	mov.w	r0, #0
 8001c5a:	f04f 0100 	mov.w	r1, #0
 8001c5e:	0159      	lsls	r1, r3, #5
 8001c60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c64:	0150      	lsls	r0, r2, #5
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4621      	mov	r1, r4
 8001c6c:	1a51      	subs	r1, r2, r1
 8001c6e:	6139      	str	r1, [r7, #16]
 8001c70:	4629      	mov	r1, r5
 8001c72:	eb63 0301 	sbc.w	r3, r3, r1
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	f04f 0300 	mov.w	r3, #0
 8001c80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c84:	4659      	mov	r1, fp
 8001c86:	018b      	lsls	r3, r1, #6
 8001c88:	4651      	mov	r1, sl
 8001c8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c8e:	4651      	mov	r1, sl
 8001c90:	018a      	lsls	r2, r1, #6
 8001c92:	4651      	mov	r1, sl
 8001c94:	ebb2 0801 	subs.w	r8, r2, r1
 8001c98:	4659      	mov	r1, fp
 8001c9a:	eb63 0901 	sbc.w	r9, r3, r1
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001caa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cb2:	4690      	mov	r8, r2
 8001cb4:	4699      	mov	r9, r3
 8001cb6:	4623      	mov	r3, r4
 8001cb8:	eb18 0303 	adds.w	r3, r8, r3
 8001cbc:	60bb      	str	r3, [r7, #8]
 8001cbe:	462b      	mov	r3, r5
 8001cc0:	eb49 0303 	adc.w	r3, r9, r3
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cd2:	4629      	mov	r1, r5
 8001cd4:	024b      	lsls	r3, r1, #9
 8001cd6:	4621      	mov	r1, r4
 8001cd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cdc:	4621      	mov	r1, r4
 8001cde:	024a      	lsls	r2, r1, #9
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001cf0:	f7fe fa7c 	bl	80001ec <__aeabi_uldivmod>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cfc:	e058      	b.n	8001db0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cfe:	4b38      	ldr	r3, [pc, #224]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	099b      	lsrs	r3, r3, #6
 8001d04:	2200      	movs	r2, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	4611      	mov	r1, r2
 8001d0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d0e:	623b      	str	r3, [r7, #32]
 8001d10:	2300      	movs	r3, #0
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
 8001d14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d18:	4642      	mov	r2, r8
 8001d1a:	464b      	mov	r3, r9
 8001d1c:	f04f 0000 	mov.w	r0, #0
 8001d20:	f04f 0100 	mov.w	r1, #0
 8001d24:	0159      	lsls	r1, r3, #5
 8001d26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d2a:	0150      	lsls	r0, r2, #5
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4641      	mov	r1, r8
 8001d32:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d36:	4649      	mov	r1, r9
 8001d38:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	f04f 0300 	mov.w	r3, #0
 8001d44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d50:	ebb2 040a 	subs.w	r4, r2, sl
 8001d54:	eb63 050b 	sbc.w	r5, r3, fp
 8001d58:	f04f 0200 	mov.w	r2, #0
 8001d5c:	f04f 0300 	mov.w	r3, #0
 8001d60:	00eb      	lsls	r3, r5, #3
 8001d62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d66:	00e2      	lsls	r2, r4, #3
 8001d68:	4614      	mov	r4, r2
 8001d6a:	461d      	mov	r5, r3
 8001d6c:	4643      	mov	r3, r8
 8001d6e:	18e3      	adds	r3, r4, r3
 8001d70:	603b      	str	r3, [r7, #0]
 8001d72:	464b      	mov	r3, r9
 8001d74:	eb45 0303 	adc.w	r3, r5, r3
 8001d78:	607b      	str	r3, [r7, #4]
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	f04f 0300 	mov.w	r3, #0
 8001d82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d86:	4629      	mov	r1, r5
 8001d88:	028b      	lsls	r3, r1, #10
 8001d8a:	4621      	mov	r1, r4
 8001d8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d90:	4621      	mov	r1, r4
 8001d92:	028a      	lsls	r2, r1, #10
 8001d94:	4610      	mov	r0, r2
 8001d96:	4619      	mov	r1, r3
 8001d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	61bb      	str	r3, [r7, #24]
 8001d9e:	61fa      	str	r2, [r7, #28]
 8001da0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001da4:	f7fe fa22 	bl	80001ec <__aeabi_uldivmod>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4613      	mov	r3, r2
 8001dae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001db0:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	0c1b      	lsrs	r3, r3, #16
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	3301      	adds	r3, #1
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001dc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dca:	e002      	b.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dcc:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001dce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3750      	adds	r7, #80	; 0x50
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dde:	bf00      	nop
 8001de0:	40023800 	.word	0x40023800
 8001de4:	00f42400 	.word	0x00f42400
 8001de8:	007a1200 	.word	0x007a1200

08001dec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001df0:	4b03      	ldr	r3, [pc, #12]	; (8001e00 <HAL_RCC_GetHCLKFreq+0x14>)
 8001df2:	681b      	ldr	r3, [r3, #0]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	20000014 	.word	0x20000014

08001e04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e08:	f7ff fff0 	bl	8001dec <HAL_RCC_GetHCLKFreq>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	0a9b      	lsrs	r3, r3, #10
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	4903      	ldr	r1, [pc, #12]	; (8001e28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e1a:	5ccb      	ldrb	r3, [r1, r3]
 8001e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40023800 	.word	0x40023800
 8001e28:	08003ab0 	.word	0x08003ab0

08001e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e30:	f7ff ffdc 	bl	8001dec <HAL_RCC_GetHCLKFreq>
 8001e34:	4602      	mov	r2, r0
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	0b5b      	lsrs	r3, r3, #13
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	4903      	ldr	r1, [pc, #12]	; (8001e50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e42:	5ccb      	ldrb	r3, [r1, r3]
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	08003ab0 	.word	0x08003ab0

08001e54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e03f      	b.n	8001ee6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d106      	bne.n	8001e80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7fe fd28 	bl	80008d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2224      	movs	r2, #36	; 0x24
 8001e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68da      	ldr	r2, [r3, #12]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 fe19 	bl	8002ad0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	691a      	ldr	r2, [r3, #16]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001eac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	695a      	ldr	r2, [r3, #20]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ebc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ecc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2220      	movs	r2, #32
 8001ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b08a      	sub	sp, #40	; 0x28
 8001ef2:	af02      	add	r7, sp, #8
 8001ef4:	60f8      	str	r0, [r7, #12]
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	603b      	str	r3, [r7, #0]
 8001efa:	4613      	mov	r3, r2
 8001efc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b20      	cmp	r3, #32
 8001f0c:	d17c      	bne.n	8002008 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d002      	beq.n	8001f1a <HAL_UART_Transmit+0x2c>
 8001f14:	88fb      	ldrh	r3, [r7, #6]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e075      	b.n	800200a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d101      	bne.n	8001f2c <HAL_UART_Transmit+0x3e>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e06e      	b.n	800200a <HAL_UART_Transmit+0x11c>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2221      	movs	r2, #33	; 0x21
 8001f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f42:	f7fe fed3 	bl	8000cec <HAL_GetTick>
 8001f46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	88fa      	ldrh	r2, [r7, #6]
 8001f4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	88fa      	ldrh	r2, [r7, #6]
 8001f52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f5c:	d108      	bne.n	8001f70 <HAL_UART_Transmit+0x82>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d104      	bne.n	8001f70 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	61bb      	str	r3, [r7, #24]
 8001f6e:	e003      	b.n	8001f78 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001f80:	e02a      	b.n	8001fd8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2180      	movs	r1, #128	; 0x80
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f000 fb59 	bl	8002644 <UART_WaitOnFlagUntilTimeout>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e036      	b.n	800200a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10b      	bne.n	8001fba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	61bb      	str	r3, [r7, #24]
 8001fb8:	e007      	b.n	8001fca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	781a      	ldrb	r2, [r3, #0]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1cf      	bne.n	8001f82 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2140      	movs	r1, #64	; 0x40
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f000 fb29 	bl	8002644 <UART_WaitOnFlagUntilTimeout>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e006      	b.n	800200a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2220      	movs	r2, #32
 8002000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	e000      	b.n	800200a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002008:	2302      	movs	r3, #2
  }
}
 800200a:	4618      	mov	r0, r3
 800200c:	3720      	adds	r7, #32
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002012:	b480      	push	{r7}
 8002014:	b085      	sub	sp, #20
 8002016:	af00      	add	r7, sp, #0
 8002018:	60f8      	str	r0, [r7, #12]
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	4613      	mov	r3, r2
 800201e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b20      	cmp	r3, #32
 800202a:	d130      	bne.n	800208e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d002      	beq.n	8002038 <HAL_UART_Transmit_IT+0x26>
 8002032:	88fb      	ldrh	r3, [r7, #6]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e029      	b.n	8002090 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <HAL_UART_Transmit_IT+0x38>
 8002046:	2302      	movs	r3, #2
 8002048:	e022      	b.n	8002090 <HAL_UART_Transmit_IT+0x7e>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	68ba      	ldr	r2, [r7, #8]
 8002056:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	88fa      	ldrh	r2, [r7, #6]
 800205c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	88fa      	ldrh	r2, [r7, #6]
 8002062:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2221      	movs	r2, #33	; 0x21
 800206e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002088:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	e000      	b.n	8002090 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800208e:	2302      	movs	r3, #2
  }
}
 8002090:	4618      	mov	r0, r3
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	4613      	mov	r3, r2
 80020a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b20      	cmp	r3, #32
 80020b4:	d11d      	bne.n	80020f2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d002      	beq.n	80020c2 <HAL_UART_Receive_IT+0x26>
 80020bc:	88fb      	ldrh	r3, [r7, #6]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e016      	b.n	80020f4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <HAL_UART_Receive_IT+0x38>
 80020d0:	2302      	movs	r3, #2
 80020d2:	e00f      	b.n	80020f4 <HAL_UART_Receive_IT+0x58>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80020e2:	88fb      	ldrh	r3, [r7, #6]
 80020e4:	461a      	mov	r2, r3
 80020e6:	68b9      	ldr	r1, [r7, #8]
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 fb19 	bl	8002720 <UART_Start_Receive_IT>
 80020ee:	4603      	mov	r3, r0
 80020f0:	e000      	b.n	80020f4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80020f2:	2302      	movs	r3, #2
  }
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b0ba      	sub	sp, #232	; 0xe8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002122:	2300      	movs	r3, #0
 8002124:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002128:	2300      	movs	r3, #0
 800212a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800212e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800213a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10f      	bne.n	8002162 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002146:	f003 0320 	and.w	r3, r3, #32
 800214a:	2b00      	cmp	r3, #0
 800214c:	d009      	beq.n	8002162 <HAL_UART_IRQHandler+0x66>
 800214e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002152:	f003 0320 	and.w	r3, r3, #32
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 fbfd 	bl	800295a <UART_Receive_IT>
      return;
 8002160:	e256      	b.n	8002610 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002162:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 80de 	beq.w	8002328 <HAL_UART_IRQHandler+0x22c>
 800216c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b00      	cmp	r3, #0
 8002176:	d106      	bne.n	8002186 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800217c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 80d1 	beq.w	8002328 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00b      	beq.n	80021aa <HAL_UART_IRQHandler+0xae>
 8002192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219a:	2b00      	cmp	r3, #0
 800219c:	d005      	beq.n	80021aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	f043 0201 	orr.w	r2, r3, #1
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021ae:	f003 0304 	and.w	r3, r3, #4
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00b      	beq.n	80021ce <HAL_UART_IRQHandler+0xd2>
 80021b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d005      	beq.n	80021ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f043 0202 	orr.w	r2, r3, #2
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00b      	beq.n	80021f2 <HAL_UART_IRQHandler+0xf6>
 80021da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d005      	beq.n	80021f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f043 0204 	orr.w	r2, r3, #4
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80021f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d011      	beq.n	8002222 <HAL_UART_IRQHandler+0x126>
 80021fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002202:	f003 0320 	and.w	r3, r3, #32
 8002206:	2b00      	cmp	r3, #0
 8002208:	d105      	bne.n	8002216 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800220a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d005      	beq.n	8002222 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	f043 0208 	orr.w	r2, r3, #8
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 81ed 	beq.w	8002606 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800222c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002230:	f003 0320 	and.w	r3, r3, #32
 8002234:	2b00      	cmp	r3, #0
 8002236:	d008      	beq.n	800224a <HAL_UART_IRQHandler+0x14e>
 8002238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800223c:	f003 0320 	and.w	r3, r3, #32
 8002240:	2b00      	cmp	r3, #0
 8002242:	d002      	beq.n	800224a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 fb88 	bl	800295a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002254:	2b40      	cmp	r3, #64	; 0x40
 8002256:	bf0c      	ite	eq
 8002258:	2301      	moveq	r3, #1
 800225a:	2300      	movne	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	2b00      	cmp	r3, #0
 800226c:	d103      	bne.n	8002276 <HAL_UART_IRQHandler+0x17a>
 800226e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002272:	2b00      	cmp	r3, #0
 8002274:	d04f      	beq.n	8002316 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 fa90 	bl	800279c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002286:	2b40      	cmp	r3, #64	; 0x40
 8002288:	d141      	bne.n	800230e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	3314      	adds	r3, #20
 8002290:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002294:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002298:	e853 3f00 	ldrex	r3, [r3]
 800229c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80022a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	3314      	adds	r3, #20
 80022b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80022b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80022ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80022c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80022c6:	e841 2300 	strex	r3, r2, [r1]
 80022ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80022ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1d9      	bne.n	800228a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d013      	beq.n	8002306 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e2:	4a7d      	ldr	r2, [pc, #500]	; (80024d8 <HAL_UART_IRQHandler+0x3dc>)
 80022e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe feaf 	bl	800104e <HAL_DMA_Abort_IT>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d016      	beq.n	8002324 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002300:	4610      	mov	r0, r2
 8002302:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002304:	e00e      	b.n	8002324 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f986 	bl	8002618 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800230c:	e00a      	b.n	8002324 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f982 	bl	8002618 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002314:	e006      	b.n	8002324 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f97e 	bl	8002618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002322:	e170      	b.n	8002606 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002324:	bf00      	nop
    return;
 8002326:	e16e      	b.n	8002606 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	2b01      	cmp	r3, #1
 800232e:	f040 814a 	bne.w	80025c6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002336:	f003 0310 	and.w	r3, r3, #16
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 8143 	beq.w	80025c6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002344:	f003 0310 	and.w	r3, r3, #16
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 813c 	beq.w	80025c6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800234e:	2300      	movs	r3, #0
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800236e:	2b40      	cmp	r3, #64	; 0x40
 8002370:	f040 80b4 	bne.w	80024dc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002380:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 8140 	beq.w	800260a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800238e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002392:	429a      	cmp	r2, r3
 8002394:	f080 8139 	bcs.w	800260a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800239e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023aa:	f000 8088 	beq.w	80024be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	330c      	adds	r3, #12
 80023b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023bc:	e853 3f00 	ldrex	r3, [r3]
 80023c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80023c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	330c      	adds	r3, #12
 80023d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80023da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80023de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80023e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80023ea:	e841 2300 	strex	r3, r2, [r1]
 80023ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80023f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1d9      	bne.n	80023ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	3314      	adds	r3, #20
 8002400:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002402:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002404:	e853 3f00 	ldrex	r3, [r3]
 8002408:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800240a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800240c:	f023 0301 	bic.w	r3, r3, #1
 8002410:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	3314      	adds	r3, #20
 800241a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800241e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002422:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002424:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002426:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800242a:	e841 2300 	strex	r3, r2, [r1]
 800242e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002430:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1e1      	bne.n	80023fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	3314      	adds	r3, #20
 800243c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800243e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002440:	e853 3f00 	ldrex	r3, [r3]
 8002444:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800244c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	3314      	adds	r3, #20
 8002456:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800245a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800245c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800245e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002460:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002462:	e841 2300 	strex	r3, r2, [r1]
 8002466:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002468:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1e3      	bne.n	8002436 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2220      	movs	r2, #32
 8002472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	330c      	adds	r3, #12
 8002482:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002486:	e853 3f00 	ldrex	r3, [r3]
 800248a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800248c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800248e:	f023 0310 	bic.w	r3, r3, #16
 8002492:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	330c      	adds	r3, #12
 800249c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80024a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80024a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80024a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80024a8:	e841 2300 	strex	r3, r2, [r1]
 80024ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80024ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1e3      	bne.n	800247c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe fd58 	bl	8000f6e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	4619      	mov	r1, r3
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f8ac 	bl	800262c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80024d4:	e099      	b.n	800260a <HAL_UART_IRQHandler+0x50e>
 80024d6:	bf00      	nop
 80024d8:	08002863 	.word	0x08002863
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 808b 	beq.w	800260e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80024f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 8086 	beq.w	800260e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	330c      	adds	r3, #12
 8002508:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800250a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800250c:	e853 3f00 	ldrex	r3, [r3]
 8002510:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002514:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002518:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	330c      	adds	r3, #12
 8002522:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002526:	647a      	str	r2, [r7, #68]	; 0x44
 8002528:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800252a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800252c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800252e:	e841 2300 	strex	r3, r2, [r1]
 8002532:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1e3      	bne.n	8002502 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	3314      	adds	r3, #20
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	e853 3f00 	ldrex	r3, [r3]
 8002548:	623b      	str	r3, [r7, #32]
   return(result);
 800254a:	6a3b      	ldr	r3, [r7, #32]
 800254c:	f023 0301 	bic.w	r3, r3, #1
 8002550:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	3314      	adds	r3, #20
 800255a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800255e:	633a      	str	r2, [r7, #48]	; 0x30
 8002560:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002562:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002566:	e841 2300 	strex	r3, r2, [r1]
 800256a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800256c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1e3      	bne.n	800253a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2220      	movs	r2, #32
 8002576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	330c      	adds	r3, #12
 8002586:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	e853 3f00 	ldrex	r3, [r3]
 800258e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f023 0310 	bic.w	r3, r3, #16
 8002596:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	330c      	adds	r3, #12
 80025a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80025a4:	61fa      	str	r2, [r7, #28]
 80025a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025a8:	69b9      	ldr	r1, [r7, #24]
 80025aa:	69fa      	ldr	r2, [r7, #28]
 80025ac:	e841 2300 	strex	r3, r2, [r1]
 80025b0:	617b      	str	r3, [r7, #20]
   return(result);
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1e3      	bne.n	8002580 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80025b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80025bc:	4619      	mov	r1, r3
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f834 	bl	800262c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80025c4:	e023      	b.n	800260e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80025c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d009      	beq.n	80025e6 <HAL_UART_IRQHandler+0x4ea>
 80025d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f953 	bl	800288a <UART_Transmit_IT>
    return;
 80025e4:	e014      	b.n	8002610 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80025e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00e      	beq.n	8002610 <HAL_UART_IRQHandler+0x514>
 80025f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d008      	beq.n	8002610 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f993 	bl	800292a <UART_EndTransmit_IT>
    return;
 8002604:	e004      	b.n	8002610 <HAL_UART_IRQHandler+0x514>
    return;
 8002606:	bf00      	nop
 8002608:	e002      	b.n	8002610 <HAL_UART_IRQHandler+0x514>
      return;
 800260a:	bf00      	nop
 800260c:	e000      	b.n	8002610 <HAL_UART_IRQHandler+0x514>
      return;
 800260e:	bf00      	nop
  }
}
 8002610:	37e8      	adds	r7, #232	; 0xe8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop

08002618 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b090      	sub	sp, #64	; 0x40
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	603b      	str	r3, [r7, #0]
 8002650:	4613      	mov	r3, r2
 8002652:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002654:	e050      	b.n	80026f8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265c:	d04c      	beq.n	80026f8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800265e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002660:	2b00      	cmp	r3, #0
 8002662:	d007      	beq.n	8002674 <UART_WaitOnFlagUntilTimeout+0x30>
 8002664:	f7fe fb42 	bl	8000cec <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002670:	429a      	cmp	r2, r3
 8002672:	d241      	bcs.n	80026f8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	330c      	adds	r3, #12
 800267a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800267c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267e:	e853 3f00 	ldrex	r3, [r3]
 8002682:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800268a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	330c      	adds	r3, #12
 8002692:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002694:	637a      	str	r2, [r7, #52]	; 0x34
 8002696:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002698:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800269a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800269c:	e841 2300 	strex	r3, r2, [r1]
 80026a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80026a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1e5      	bne.n	8002674 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	3314      	adds	r3, #20
 80026ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	e853 3f00 	ldrex	r3, [r3]
 80026b6:	613b      	str	r3, [r7, #16]
   return(result);
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	f023 0301 	bic.w	r3, r3, #1
 80026be:	63bb      	str	r3, [r7, #56]	; 0x38
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	3314      	adds	r3, #20
 80026c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026c8:	623a      	str	r2, [r7, #32]
 80026ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026cc:	69f9      	ldr	r1, [r7, #28]
 80026ce:	6a3a      	ldr	r2, [r7, #32]
 80026d0:	e841 2300 	strex	r3, r2, [r1]
 80026d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1e5      	bne.n	80026a8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2220      	movs	r2, #32
 80026e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e00f      	b.n	8002718 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	4013      	ands	r3, r2
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	429a      	cmp	r2, r3
 8002706:	bf0c      	ite	eq
 8002708:	2301      	moveq	r3, #1
 800270a:	2300      	movne	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	461a      	mov	r2, r3
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	429a      	cmp	r2, r3
 8002714:	d09f      	beq.n	8002656 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3740      	adds	r7, #64	; 0x40
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	4613      	mov	r3, r2
 800272c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	88fa      	ldrh	r2, [r7, #6]
 8002738:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	88fa      	ldrh	r2, [r7, #6]
 800273e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2222      	movs	r2, #34	; 0x22
 800274a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d007      	beq.n	800276e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68da      	ldr	r2, [r3, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800276c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	695a      	ldr	r2, [r3, #20]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f042 0201 	orr.w	r2, r2, #1
 800277c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68da      	ldr	r2, [r3, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f042 0220 	orr.w	r2, r2, #32
 800278c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800279c:	b480      	push	{r7}
 800279e:	b095      	sub	sp, #84	; 0x54
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	330c      	adds	r3, #12
 80027aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ae:	e853 3f00 	ldrex	r3, [r3]
 80027b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80027b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80027ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	330c      	adds	r3, #12
 80027c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027c4:	643a      	str	r2, [r7, #64]	; 0x40
 80027c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80027ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80027cc:	e841 2300 	strex	r3, r2, [r1]
 80027d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80027d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1e5      	bne.n	80027a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	3314      	adds	r3, #20
 80027de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	e853 3f00 	ldrex	r3, [r3]
 80027e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f023 0301 	bic.w	r3, r3, #1
 80027ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	3314      	adds	r3, #20
 80027f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002800:	e841 2300 	strex	r3, r2, [r1]
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1e5      	bne.n	80027d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002810:	2b01      	cmp	r3, #1
 8002812:	d119      	bne.n	8002848 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	330c      	adds	r3, #12
 800281a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	e853 3f00 	ldrex	r3, [r3]
 8002822:	60bb      	str	r3, [r7, #8]
   return(result);
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	f023 0310 	bic.w	r3, r3, #16
 800282a:	647b      	str	r3, [r7, #68]	; 0x44
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	330c      	adds	r3, #12
 8002832:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002834:	61ba      	str	r2, [r7, #24]
 8002836:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002838:	6979      	ldr	r1, [r7, #20]
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	e841 2300 	strex	r3, r2, [r1]
 8002840:	613b      	str	r3, [r7, #16]
   return(result);
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1e5      	bne.n	8002814 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2220      	movs	r2, #32
 800284c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002856:	bf00      	nop
 8002858:	3754      	adds	r7, #84	; 0x54
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b084      	sub	sp, #16
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f7ff fecb 	bl	8002618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002882:	bf00      	nop
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800288a:	b480      	push	{r7}
 800288c:	b085      	sub	sp, #20
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b21      	cmp	r3, #33	; 0x21
 800289c:	d13e      	bne.n	800291c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a6:	d114      	bne.n	80028d2 <UART_Transmit_IT+0x48>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d110      	bne.n	80028d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	1c9a      	adds	r2, r3, #2
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	621a      	str	r2, [r3, #32]
 80028d0:	e008      	b.n	80028e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	1c59      	adds	r1, r3, #1
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6211      	str	r1, [r2, #32]
 80028dc:	781a      	ldrb	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	4619      	mov	r1, r3
 80028f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10f      	bne.n	8002918 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68da      	ldr	r2, [r3, #12]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002906:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68da      	ldr	r2, [r3, #12]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002916:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	e000      	b.n	800291e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800291c:	2302      	movs	r3, #2
  }
}
 800291e:	4618      	mov	r0, r3
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b082      	sub	sp, #8
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002940:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2220      	movs	r2, #32
 8002946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7fd ff66 	bl	800081c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b08c      	sub	sp, #48	; 0x30
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b22      	cmp	r3, #34	; 0x22
 800296c:	f040 80ab 	bne.w	8002ac6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002978:	d117      	bne.n	80029aa <UART_Receive_IT+0x50>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d113      	bne.n	80029aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002982:	2300      	movs	r3, #0
 8002984:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	b29b      	uxth	r3, r3
 8002994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002998:	b29a      	uxth	r2, r3
 800299a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a2:	1c9a      	adds	r2, r3, #2
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	629a      	str	r2, [r3, #40]	; 0x28
 80029a8:	e026      	b.n	80029f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029bc:	d007      	beq.n	80029ce <UART_Receive_IT+0x74>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10a      	bne.n	80029dc <UART_Receive_IT+0x82>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d106      	bne.n	80029dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d8:	701a      	strb	r2, [r3, #0]
 80029da:	e008      	b.n	80029ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	3b01      	subs	r3, #1
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	4619      	mov	r1, r3
 8002a06:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d15a      	bne.n	8002ac2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0220 	bic.w	r2, r2, #32
 8002a1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695a      	ldr	r2, [r3, #20]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0201 	bic.w	r2, r2, #1
 8002a3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2220      	movs	r2, #32
 8002a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d135      	bne.n	8002ab8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	330c      	adds	r3, #12
 8002a58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	e853 3f00 	ldrex	r3, [r3]
 8002a60:	613b      	str	r3, [r7, #16]
   return(result);
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	f023 0310 	bic.w	r3, r3, #16
 8002a68:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	330c      	adds	r3, #12
 8002a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a72:	623a      	str	r2, [r7, #32]
 8002a74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a76:	69f9      	ldr	r1, [r7, #28]
 8002a78:	6a3a      	ldr	r2, [r7, #32]
 8002a7a:	e841 2300 	strex	r3, r2, [r1]
 8002a7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1e5      	bne.n	8002a52 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0310 	and.w	r3, r3, #16
 8002a90:	2b10      	cmp	r3, #16
 8002a92:	d10a      	bne.n	8002aaa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a94:	2300      	movs	r3, #0
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002aae:	4619      	mov	r1, r3
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7ff fdbb 	bl	800262c <HAL_UARTEx_RxEventCallback>
 8002ab6:	e002      	b.n	8002abe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7fd febf 	bl	800083c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	e002      	b.n	8002ac8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e000      	b.n	8002ac8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002ac6:	2302      	movs	r3, #2
  }
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3730      	adds	r7, #48	; 0x30
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ad4:	b0c0      	sub	sp, #256	; 0x100
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aec:	68d9      	ldr	r1, [r3, #12]
 8002aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	ea40 0301 	orr.w	r3, r0, r1
 8002af8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	431a      	orrs	r2, r3
 8002b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b28:	f021 010c 	bic.w	r1, r1, #12
 8002b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b36:	430b      	orrs	r3, r1
 8002b38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b4a:	6999      	ldr	r1, [r3, #24]
 8002b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	ea40 0301 	orr.w	r3, r0, r1
 8002b56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	4b8f      	ldr	r3, [pc, #572]	; (8002d9c <UART_SetConfig+0x2cc>)
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d005      	beq.n	8002b70 <UART_SetConfig+0xa0>
 8002b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	4b8d      	ldr	r3, [pc, #564]	; (8002da0 <UART_SetConfig+0x2d0>)
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d104      	bne.n	8002b7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b70:	f7ff f95c 	bl	8001e2c <HAL_RCC_GetPCLK2Freq>
 8002b74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b78:	e003      	b.n	8002b82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b7a:	f7ff f943 	bl	8001e04 <HAL_RCC_GetPCLK1Freq>
 8002b7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b8c:	f040 810c 	bne.w	8002da8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b94:	2200      	movs	r2, #0
 8002b96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002ba2:	4622      	mov	r2, r4
 8002ba4:	462b      	mov	r3, r5
 8002ba6:	1891      	adds	r1, r2, r2
 8002ba8:	65b9      	str	r1, [r7, #88]	; 0x58
 8002baa:	415b      	adcs	r3, r3
 8002bac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002bb2:	4621      	mov	r1, r4
 8002bb4:	eb12 0801 	adds.w	r8, r2, r1
 8002bb8:	4629      	mov	r1, r5
 8002bba:	eb43 0901 	adc.w	r9, r3, r1
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bd2:	4690      	mov	r8, r2
 8002bd4:	4699      	mov	r9, r3
 8002bd6:	4623      	mov	r3, r4
 8002bd8:	eb18 0303 	adds.w	r3, r8, r3
 8002bdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002be0:	462b      	mov	r3, r5
 8002be2:	eb49 0303 	adc.w	r3, r9, r3
 8002be6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002bf6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002bfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002bfe:	460b      	mov	r3, r1
 8002c00:	18db      	adds	r3, r3, r3
 8002c02:	653b      	str	r3, [r7, #80]	; 0x50
 8002c04:	4613      	mov	r3, r2
 8002c06:	eb42 0303 	adc.w	r3, r2, r3
 8002c0a:	657b      	str	r3, [r7, #84]	; 0x54
 8002c0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c14:	f7fd faea 	bl	80001ec <__aeabi_uldivmod>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4b61      	ldr	r3, [pc, #388]	; (8002da4 <UART_SetConfig+0x2d4>)
 8002c1e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	011c      	lsls	r4, r3, #4
 8002c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c38:	4642      	mov	r2, r8
 8002c3a:	464b      	mov	r3, r9
 8002c3c:	1891      	adds	r1, r2, r2
 8002c3e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c40:	415b      	adcs	r3, r3
 8002c42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c48:	4641      	mov	r1, r8
 8002c4a:	eb12 0a01 	adds.w	sl, r2, r1
 8002c4e:	4649      	mov	r1, r9
 8002c50:	eb43 0b01 	adc.w	fp, r3, r1
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c68:	4692      	mov	sl, r2
 8002c6a:	469b      	mov	fp, r3
 8002c6c:	4643      	mov	r3, r8
 8002c6e:	eb1a 0303 	adds.w	r3, sl, r3
 8002c72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c76:	464b      	mov	r3, r9
 8002c78:	eb4b 0303 	adc.w	r3, fp, r3
 8002c7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c94:	460b      	mov	r3, r1
 8002c96:	18db      	adds	r3, r3, r3
 8002c98:	643b      	str	r3, [r7, #64]	; 0x40
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	eb42 0303 	adc.w	r3, r2, r3
 8002ca0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ca2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ca6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002caa:	f7fd fa9f 	bl	80001ec <__aeabi_uldivmod>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	4b3b      	ldr	r3, [pc, #236]	; (8002da4 <UART_SetConfig+0x2d4>)
 8002cb6:	fba3 2301 	umull	r2, r3, r3, r1
 8002cba:	095b      	lsrs	r3, r3, #5
 8002cbc:	2264      	movs	r2, #100	; 0x64
 8002cbe:	fb02 f303 	mul.w	r3, r2, r3
 8002cc2:	1acb      	subs	r3, r1, r3
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002cca:	4b36      	ldr	r3, [pc, #216]	; (8002da4 <UART_SetConfig+0x2d4>)
 8002ccc:	fba3 2302 	umull	r2, r3, r3, r2
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cd8:	441c      	add	r4, r3
 8002cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ce4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002ce8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002cec:	4642      	mov	r2, r8
 8002cee:	464b      	mov	r3, r9
 8002cf0:	1891      	adds	r1, r2, r2
 8002cf2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002cf4:	415b      	adcs	r3, r3
 8002cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cf8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002cfc:	4641      	mov	r1, r8
 8002cfe:	1851      	adds	r1, r2, r1
 8002d00:	6339      	str	r1, [r7, #48]	; 0x30
 8002d02:	4649      	mov	r1, r9
 8002d04:	414b      	adcs	r3, r1
 8002d06:	637b      	str	r3, [r7, #52]	; 0x34
 8002d08:	f04f 0200 	mov.w	r2, #0
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d14:	4659      	mov	r1, fp
 8002d16:	00cb      	lsls	r3, r1, #3
 8002d18:	4651      	mov	r1, sl
 8002d1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d1e:	4651      	mov	r1, sl
 8002d20:	00ca      	lsls	r2, r1, #3
 8002d22:	4610      	mov	r0, r2
 8002d24:	4619      	mov	r1, r3
 8002d26:	4603      	mov	r3, r0
 8002d28:	4642      	mov	r2, r8
 8002d2a:	189b      	adds	r3, r3, r2
 8002d2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d30:	464b      	mov	r3, r9
 8002d32:	460a      	mov	r2, r1
 8002d34:	eb42 0303 	adc.w	r3, r2, r3
 8002d38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d50:	460b      	mov	r3, r1
 8002d52:	18db      	adds	r3, r3, r3
 8002d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d56:	4613      	mov	r3, r2
 8002d58:	eb42 0303 	adc.w	r3, r2, r3
 8002d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d66:	f7fd fa41 	bl	80001ec <__aeabi_uldivmod>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4b0d      	ldr	r3, [pc, #52]	; (8002da4 <UART_SetConfig+0x2d4>)
 8002d70:	fba3 1302 	umull	r1, r3, r3, r2
 8002d74:	095b      	lsrs	r3, r3, #5
 8002d76:	2164      	movs	r1, #100	; 0x64
 8002d78:	fb01 f303 	mul.w	r3, r1, r3
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	3332      	adds	r3, #50	; 0x32
 8002d82:	4a08      	ldr	r2, [pc, #32]	; (8002da4 <UART_SetConfig+0x2d4>)
 8002d84:	fba2 2303 	umull	r2, r3, r2, r3
 8002d88:	095b      	lsrs	r3, r3, #5
 8002d8a:	f003 0207 	and.w	r2, r3, #7
 8002d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4422      	add	r2, r4
 8002d96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d98:	e105      	b.n	8002fa6 <UART_SetConfig+0x4d6>
 8002d9a:	bf00      	nop
 8002d9c:	40011000 	.word	0x40011000
 8002da0:	40011400 	.word	0x40011400
 8002da4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002da8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dac:	2200      	movs	r2, #0
 8002dae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002db2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002db6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002dba:	4642      	mov	r2, r8
 8002dbc:	464b      	mov	r3, r9
 8002dbe:	1891      	adds	r1, r2, r2
 8002dc0:	6239      	str	r1, [r7, #32]
 8002dc2:	415b      	adcs	r3, r3
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dca:	4641      	mov	r1, r8
 8002dcc:	1854      	adds	r4, r2, r1
 8002dce:	4649      	mov	r1, r9
 8002dd0:	eb43 0501 	adc.w	r5, r3, r1
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	00eb      	lsls	r3, r5, #3
 8002dde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002de2:	00e2      	lsls	r2, r4, #3
 8002de4:	4614      	mov	r4, r2
 8002de6:	461d      	mov	r5, r3
 8002de8:	4643      	mov	r3, r8
 8002dea:	18e3      	adds	r3, r4, r3
 8002dec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002df0:	464b      	mov	r3, r9
 8002df2:	eb45 0303 	adc.w	r3, r5, r3
 8002df6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e16:	4629      	mov	r1, r5
 8002e18:	008b      	lsls	r3, r1, #2
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e20:	4621      	mov	r1, r4
 8002e22:	008a      	lsls	r2, r1, #2
 8002e24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e28:	f7fd f9e0 	bl	80001ec <__aeabi_uldivmod>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4b60      	ldr	r3, [pc, #384]	; (8002fb4 <UART_SetConfig+0x4e4>)
 8002e32:	fba3 2302 	umull	r2, r3, r3, r2
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	011c      	lsls	r4, r3, #4
 8002e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002e4c:	4642      	mov	r2, r8
 8002e4e:	464b      	mov	r3, r9
 8002e50:	1891      	adds	r1, r2, r2
 8002e52:	61b9      	str	r1, [r7, #24]
 8002e54:	415b      	adcs	r3, r3
 8002e56:	61fb      	str	r3, [r7, #28]
 8002e58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e5c:	4641      	mov	r1, r8
 8002e5e:	1851      	adds	r1, r2, r1
 8002e60:	6139      	str	r1, [r7, #16]
 8002e62:	4649      	mov	r1, r9
 8002e64:	414b      	adcs	r3, r1
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e74:	4659      	mov	r1, fp
 8002e76:	00cb      	lsls	r3, r1, #3
 8002e78:	4651      	mov	r1, sl
 8002e7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e7e:	4651      	mov	r1, sl
 8002e80:	00ca      	lsls	r2, r1, #3
 8002e82:	4610      	mov	r0, r2
 8002e84:	4619      	mov	r1, r3
 8002e86:	4603      	mov	r3, r0
 8002e88:	4642      	mov	r2, r8
 8002e8a:	189b      	adds	r3, r3, r2
 8002e8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e90:	464b      	mov	r3, r9
 8002e92:	460a      	mov	r2, r1
 8002e94:	eb42 0303 	adc.w	r3, r2, r3
 8002e98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ea6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002eb4:	4649      	mov	r1, r9
 8002eb6:	008b      	lsls	r3, r1, #2
 8002eb8:	4641      	mov	r1, r8
 8002eba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ebe:	4641      	mov	r1, r8
 8002ec0:	008a      	lsls	r2, r1, #2
 8002ec2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002ec6:	f7fd f991 	bl	80001ec <__aeabi_uldivmod>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4b39      	ldr	r3, [pc, #228]	; (8002fb4 <UART_SetConfig+0x4e4>)
 8002ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ed4:	095b      	lsrs	r3, r3, #5
 8002ed6:	2164      	movs	r1, #100	; 0x64
 8002ed8:	fb01 f303 	mul.w	r3, r1, r3
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	3332      	adds	r3, #50	; 0x32
 8002ee2:	4a34      	ldr	r2, [pc, #208]	; (8002fb4 <UART_SetConfig+0x4e4>)
 8002ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee8:	095b      	lsrs	r3, r3, #5
 8002eea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eee:	441c      	add	r4, r3
 8002ef0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	673b      	str	r3, [r7, #112]	; 0x70
 8002ef8:	677a      	str	r2, [r7, #116]	; 0x74
 8002efa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002efe:	4642      	mov	r2, r8
 8002f00:	464b      	mov	r3, r9
 8002f02:	1891      	adds	r1, r2, r2
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	415b      	adcs	r3, r3
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f0e:	4641      	mov	r1, r8
 8002f10:	1851      	adds	r1, r2, r1
 8002f12:	6039      	str	r1, [r7, #0]
 8002f14:	4649      	mov	r1, r9
 8002f16:	414b      	adcs	r3, r1
 8002f18:	607b      	str	r3, [r7, #4]
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f26:	4659      	mov	r1, fp
 8002f28:	00cb      	lsls	r3, r1, #3
 8002f2a:	4651      	mov	r1, sl
 8002f2c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f30:	4651      	mov	r1, sl
 8002f32:	00ca      	lsls	r2, r1, #3
 8002f34:	4610      	mov	r0, r2
 8002f36:	4619      	mov	r1, r3
 8002f38:	4603      	mov	r3, r0
 8002f3a:	4642      	mov	r2, r8
 8002f3c:	189b      	adds	r3, r3, r2
 8002f3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f40:	464b      	mov	r3, r9
 8002f42:	460a      	mov	r2, r1
 8002f44:	eb42 0303 	adc.w	r3, r2, r3
 8002f48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	663b      	str	r3, [r7, #96]	; 0x60
 8002f54:	667a      	str	r2, [r7, #100]	; 0x64
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	f04f 0300 	mov.w	r3, #0
 8002f5e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f62:	4649      	mov	r1, r9
 8002f64:	008b      	lsls	r3, r1, #2
 8002f66:	4641      	mov	r1, r8
 8002f68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f6c:	4641      	mov	r1, r8
 8002f6e:	008a      	lsls	r2, r1, #2
 8002f70:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f74:	f7fd f93a 	bl	80001ec <__aeabi_uldivmod>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4b0d      	ldr	r3, [pc, #52]	; (8002fb4 <UART_SetConfig+0x4e4>)
 8002f7e:	fba3 1302 	umull	r1, r3, r3, r2
 8002f82:	095b      	lsrs	r3, r3, #5
 8002f84:	2164      	movs	r1, #100	; 0x64
 8002f86:	fb01 f303 	mul.w	r3, r1, r3
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	3332      	adds	r3, #50	; 0x32
 8002f90:	4a08      	ldr	r2, [pc, #32]	; (8002fb4 <UART_SetConfig+0x4e4>)
 8002f92:	fba2 2303 	umull	r2, r3, r2, r3
 8002f96:	095b      	lsrs	r3, r3, #5
 8002f98:	f003 020f 	and.w	r2, r3, #15
 8002f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4422      	add	r2, r4
 8002fa4:	609a      	str	r2, [r3, #8]
}
 8002fa6:	bf00      	nop
 8002fa8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002fac:	46bd      	mov	sp, r7
 8002fae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fb2:	bf00      	nop
 8002fb4:	51eb851f 	.word	0x51eb851f

08002fb8 <__errno>:
 8002fb8:	4b01      	ldr	r3, [pc, #4]	; (8002fc0 <__errno+0x8>)
 8002fba:	6818      	ldr	r0, [r3, #0]
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	20000020 	.word	0x20000020

08002fc4 <__libc_init_array>:
 8002fc4:	b570      	push	{r4, r5, r6, lr}
 8002fc6:	4d0d      	ldr	r5, [pc, #52]	; (8002ffc <__libc_init_array+0x38>)
 8002fc8:	4c0d      	ldr	r4, [pc, #52]	; (8003000 <__libc_init_array+0x3c>)
 8002fca:	1b64      	subs	r4, r4, r5
 8002fcc:	10a4      	asrs	r4, r4, #2
 8002fce:	2600      	movs	r6, #0
 8002fd0:	42a6      	cmp	r6, r4
 8002fd2:	d109      	bne.n	8002fe8 <__libc_init_array+0x24>
 8002fd4:	4d0b      	ldr	r5, [pc, #44]	; (8003004 <__libc_init_array+0x40>)
 8002fd6:	4c0c      	ldr	r4, [pc, #48]	; (8003008 <__libc_init_array+0x44>)
 8002fd8:	f000 fd26 	bl	8003a28 <_init>
 8002fdc:	1b64      	subs	r4, r4, r5
 8002fde:	10a4      	asrs	r4, r4, #2
 8002fe0:	2600      	movs	r6, #0
 8002fe2:	42a6      	cmp	r6, r4
 8002fe4:	d105      	bne.n	8002ff2 <__libc_init_array+0x2e>
 8002fe6:	bd70      	pop	{r4, r5, r6, pc}
 8002fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fec:	4798      	blx	r3
 8002fee:	3601      	adds	r6, #1
 8002ff0:	e7ee      	b.n	8002fd0 <__libc_init_array+0xc>
 8002ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ff6:	4798      	blx	r3
 8002ff8:	3601      	adds	r6, #1
 8002ffa:	e7f2      	b.n	8002fe2 <__libc_init_array+0x1e>
 8002ffc:	08003b24 	.word	0x08003b24
 8003000:	08003b24 	.word	0x08003b24
 8003004:	08003b24 	.word	0x08003b24
 8003008:	08003b28 	.word	0x08003b28

0800300c <malloc>:
 800300c:	4b02      	ldr	r3, [pc, #8]	; (8003018 <malloc+0xc>)
 800300e:	4601      	mov	r1, r0
 8003010:	6818      	ldr	r0, [r3, #0]
 8003012:	f000 b877 	b.w	8003104 <_malloc_r>
 8003016:	bf00      	nop
 8003018:	20000020 	.word	0x20000020

0800301c <memset>:
 800301c:	4402      	add	r2, r0
 800301e:	4603      	mov	r3, r0
 8003020:	4293      	cmp	r3, r2
 8003022:	d100      	bne.n	8003026 <memset+0xa>
 8003024:	4770      	bx	lr
 8003026:	f803 1b01 	strb.w	r1, [r3], #1
 800302a:	e7f9      	b.n	8003020 <memset+0x4>

0800302c <_free_r>:
 800302c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800302e:	2900      	cmp	r1, #0
 8003030:	d044      	beq.n	80030bc <_free_r+0x90>
 8003032:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003036:	9001      	str	r0, [sp, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	f1a1 0404 	sub.w	r4, r1, #4
 800303e:	bfb8      	it	lt
 8003040:	18e4      	addlt	r4, r4, r3
 8003042:	f000 fc39 	bl	80038b8 <__malloc_lock>
 8003046:	4a1e      	ldr	r2, [pc, #120]	; (80030c0 <_free_r+0x94>)
 8003048:	9801      	ldr	r0, [sp, #4]
 800304a:	6813      	ldr	r3, [r2, #0]
 800304c:	b933      	cbnz	r3, 800305c <_free_r+0x30>
 800304e:	6063      	str	r3, [r4, #4]
 8003050:	6014      	str	r4, [r2, #0]
 8003052:	b003      	add	sp, #12
 8003054:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003058:	f000 bc34 	b.w	80038c4 <__malloc_unlock>
 800305c:	42a3      	cmp	r3, r4
 800305e:	d908      	bls.n	8003072 <_free_r+0x46>
 8003060:	6825      	ldr	r5, [r4, #0]
 8003062:	1961      	adds	r1, r4, r5
 8003064:	428b      	cmp	r3, r1
 8003066:	bf01      	itttt	eq
 8003068:	6819      	ldreq	r1, [r3, #0]
 800306a:	685b      	ldreq	r3, [r3, #4]
 800306c:	1949      	addeq	r1, r1, r5
 800306e:	6021      	streq	r1, [r4, #0]
 8003070:	e7ed      	b.n	800304e <_free_r+0x22>
 8003072:	461a      	mov	r2, r3
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	b10b      	cbz	r3, 800307c <_free_r+0x50>
 8003078:	42a3      	cmp	r3, r4
 800307a:	d9fa      	bls.n	8003072 <_free_r+0x46>
 800307c:	6811      	ldr	r1, [r2, #0]
 800307e:	1855      	adds	r5, r2, r1
 8003080:	42a5      	cmp	r5, r4
 8003082:	d10b      	bne.n	800309c <_free_r+0x70>
 8003084:	6824      	ldr	r4, [r4, #0]
 8003086:	4421      	add	r1, r4
 8003088:	1854      	adds	r4, r2, r1
 800308a:	42a3      	cmp	r3, r4
 800308c:	6011      	str	r1, [r2, #0]
 800308e:	d1e0      	bne.n	8003052 <_free_r+0x26>
 8003090:	681c      	ldr	r4, [r3, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	6053      	str	r3, [r2, #4]
 8003096:	4421      	add	r1, r4
 8003098:	6011      	str	r1, [r2, #0]
 800309a:	e7da      	b.n	8003052 <_free_r+0x26>
 800309c:	d902      	bls.n	80030a4 <_free_r+0x78>
 800309e:	230c      	movs	r3, #12
 80030a0:	6003      	str	r3, [r0, #0]
 80030a2:	e7d6      	b.n	8003052 <_free_r+0x26>
 80030a4:	6825      	ldr	r5, [r4, #0]
 80030a6:	1961      	adds	r1, r4, r5
 80030a8:	428b      	cmp	r3, r1
 80030aa:	bf04      	itt	eq
 80030ac:	6819      	ldreq	r1, [r3, #0]
 80030ae:	685b      	ldreq	r3, [r3, #4]
 80030b0:	6063      	str	r3, [r4, #4]
 80030b2:	bf04      	itt	eq
 80030b4:	1949      	addeq	r1, r1, r5
 80030b6:	6021      	streq	r1, [r4, #0]
 80030b8:	6054      	str	r4, [r2, #4]
 80030ba:	e7ca      	b.n	8003052 <_free_r+0x26>
 80030bc:	b003      	add	sp, #12
 80030be:	bd30      	pop	{r4, r5, pc}
 80030c0:	20000134 	.word	0x20000134

080030c4 <sbrk_aligned>:
 80030c4:	b570      	push	{r4, r5, r6, lr}
 80030c6:	4e0e      	ldr	r6, [pc, #56]	; (8003100 <sbrk_aligned+0x3c>)
 80030c8:	460c      	mov	r4, r1
 80030ca:	6831      	ldr	r1, [r6, #0]
 80030cc:	4605      	mov	r5, r0
 80030ce:	b911      	cbnz	r1, 80030d6 <sbrk_aligned+0x12>
 80030d0:	f000 f902 	bl	80032d8 <_sbrk_r>
 80030d4:	6030      	str	r0, [r6, #0]
 80030d6:	4621      	mov	r1, r4
 80030d8:	4628      	mov	r0, r5
 80030da:	f000 f8fd 	bl	80032d8 <_sbrk_r>
 80030de:	1c43      	adds	r3, r0, #1
 80030e0:	d00a      	beq.n	80030f8 <sbrk_aligned+0x34>
 80030e2:	1cc4      	adds	r4, r0, #3
 80030e4:	f024 0403 	bic.w	r4, r4, #3
 80030e8:	42a0      	cmp	r0, r4
 80030ea:	d007      	beq.n	80030fc <sbrk_aligned+0x38>
 80030ec:	1a21      	subs	r1, r4, r0
 80030ee:	4628      	mov	r0, r5
 80030f0:	f000 f8f2 	bl	80032d8 <_sbrk_r>
 80030f4:	3001      	adds	r0, #1
 80030f6:	d101      	bne.n	80030fc <sbrk_aligned+0x38>
 80030f8:	f04f 34ff 	mov.w	r4, #4294967295
 80030fc:	4620      	mov	r0, r4
 80030fe:	bd70      	pop	{r4, r5, r6, pc}
 8003100:	20000138 	.word	0x20000138

08003104 <_malloc_r>:
 8003104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003108:	1ccd      	adds	r5, r1, #3
 800310a:	f025 0503 	bic.w	r5, r5, #3
 800310e:	3508      	adds	r5, #8
 8003110:	2d0c      	cmp	r5, #12
 8003112:	bf38      	it	cc
 8003114:	250c      	movcc	r5, #12
 8003116:	2d00      	cmp	r5, #0
 8003118:	4607      	mov	r7, r0
 800311a:	db01      	blt.n	8003120 <_malloc_r+0x1c>
 800311c:	42a9      	cmp	r1, r5
 800311e:	d905      	bls.n	800312c <_malloc_r+0x28>
 8003120:	230c      	movs	r3, #12
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	2600      	movs	r6, #0
 8003126:	4630      	mov	r0, r6
 8003128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800312c:	4e2e      	ldr	r6, [pc, #184]	; (80031e8 <_malloc_r+0xe4>)
 800312e:	f000 fbc3 	bl	80038b8 <__malloc_lock>
 8003132:	6833      	ldr	r3, [r6, #0]
 8003134:	461c      	mov	r4, r3
 8003136:	bb34      	cbnz	r4, 8003186 <_malloc_r+0x82>
 8003138:	4629      	mov	r1, r5
 800313a:	4638      	mov	r0, r7
 800313c:	f7ff ffc2 	bl	80030c4 <sbrk_aligned>
 8003140:	1c43      	adds	r3, r0, #1
 8003142:	4604      	mov	r4, r0
 8003144:	d14d      	bne.n	80031e2 <_malloc_r+0xde>
 8003146:	6834      	ldr	r4, [r6, #0]
 8003148:	4626      	mov	r6, r4
 800314a:	2e00      	cmp	r6, #0
 800314c:	d140      	bne.n	80031d0 <_malloc_r+0xcc>
 800314e:	6823      	ldr	r3, [r4, #0]
 8003150:	4631      	mov	r1, r6
 8003152:	4638      	mov	r0, r7
 8003154:	eb04 0803 	add.w	r8, r4, r3
 8003158:	f000 f8be 	bl	80032d8 <_sbrk_r>
 800315c:	4580      	cmp	r8, r0
 800315e:	d13a      	bne.n	80031d6 <_malloc_r+0xd2>
 8003160:	6821      	ldr	r1, [r4, #0]
 8003162:	3503      	adds	r5, #3
 8003164:	1a6d      	subs	r5, r5, r1
 8003166:	f025 0503 	bic.w	r5, r5, #3
 800316a:	3508      	adds	r5, #8
 800316c:	2d0c      	cmp	r5, #12
 800316e:	bf38      	it	cc
 8003170:	250c      	movcc	r5, #12
 8003172:	4629      	mov	r1, r5
 8003174:	4638      	mov	r0, r7
 8003176:	f7ff ffa5 	bl	80030c4 <sbrk_aligned>
 800317a:	3001      	adds	r0, #1
 800317c:	d02b      	beq.n	80031d6 <_malloc_r+0xd2>
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	442b      	add	r3, r5
 8003182:	6023      	str	r3, [r4, #0]
 8003184:	e00e      	b.n	80031a4 <_malloc_r+0xa0>
 8003186:	6822      	ldr	r2, [r4, #0]
 8003188:	1b52      	subs	r2, r2, r5
 800318a:	d41e      	bmi.n	80031ca <_malloc_r+0xc6>
 800318c:	2a0b      	cmp	r2, #11
 800318e:	d916      	bls.n	80031be <_malloc_r+0xba>
 8003190:	1961      	adds	r1, r4, r5
 8003192:	42a3      	cmp	r3, r4
 8003194:	6025      	str	r5, [r4, #0]
 8003196:	bf18      	it	ne
 8003198:	6059      	strne	r1, [r3, #4]
 800319a:	6863      	ldr	r3, [r4, #4]
 800319c:	bf08      	it	eq
 800319e:	6031      	streq	r1, [r6, #0]
 80031a0:	5162      	str	r2, [r4, r5]
 80031a2:	604b      	str	r3, [r1, #4]
 80031a4:	4638      	mov	r0, r7
 80031a6:	f104 060b 	add.w	r6, r4, #11
 80031aa:	f000 fb8b 	bl	80038c4 <__malloc_unlock>
 80031ae:	f026 0607 	bic.w	r6, r6, #7
 80031b2:	1d23      	adds	r3, r4, #4
 80031b4:	1af2      	subs	r2, r6, r3
 80031b6:	d0b6      	beq.n	8003126 <_malloc_r+0x22>
 80031b8:	1b9b      	subs	r3, r3, r6
 80031ba:	50a3      	str	r3, [r4, r2]
 80031bc:	e7b3      	b.n	8003126 <_malloc_r+0x22>
 80031be:	6862      	ldr	r2, [r4, #4]
 80031c0:	42a3      	cmp	r3, r4
 80031c2:	bf0c      	ite	eq
 80031c4:	6032      	streq	r2, [r6, #0]
 80031c6:	605a      	strne	r2, [r3, #4]
 80031c8:	e7ec      	b.n	80031a4 <_malloc_r+0xa0>
 80031ca:	4623      	mov	r3, r4
 80031cc:	6864      	ldr	r4, [r4, #4]
 80031ce:	e7b2      	b.n	8003136 <_malloc_r+0x32>
 80031d0:	4634      	mov	r4, r6
 80031d2:	6876      	ldr	r6, [r6, #4]
 80031d4:	e7b9      	b.n	800314a <_malloc_r+0x46>
 80031d6:	230c      	movs	r3, #12
 80031d8:	603b      	str	r3, [r7, #0]
 80031da:	4638      	mov	r0, r7
 80031dc:	f000 fb72 	bl	80038c4 <__malloc_unlock>
 80031e0:	e7a1      	b.n	8003126 <_malloc_r+0x22>
 80031e2:	6025      	str	r5, [r4, #0]
 80031e4:	e7de      	b.n	80031a4 <_malloc_r+0xa0>
 80031e6:	bf00      	nop
 80031e8:	20000134 	.word	0x20000134

080031ec <_puts_r>:
 80031ec:	b570      	push	{r4, r5, r6, lr}
 80031ee:	460e      	mov	r6, r1
 80031f0:	4605      	mov	r5, r0
 80031f2:	b118      	cbz	r0, 80031fc <_puts_r+0x10>
 80031f4:	6983      	ldr	r3, [r0, #24]
 80031f6:	b90b      	cbnz	r3, 80031fc <_puts_r+0x10>
 80031f8:	f000 fa58 	bl	80036ac <__sinit>
 80031fc:	69ab      	ldr	r3, [r5, #24]
 80031fe:	68ac      	ldr	r4, [r5, #8]
 8003200:	b913      	cbnz	r3, 8003208 <_puts_r+0x1c>
 8003202:	4628      	mov	r0, r5
 8003204:	f000 fa52 	bl	80036ac <__sinit>
 8003208:	4b2c      	ldr	r3, [pc, #176]	; (80032bc <_puts_r+0xd0>)
 800320a:	429c      	cmp	r4, r3
 800320c:	d120      	bne.n	8003250 <_puts_r+0x64>
 800320e:	686c      	ldr	r4, [r5, #4]
 8003210:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003212:	07db      	lsls	r3, r3, #31
 8003214:	d405      	bmi.n	8003222 <_puts_r+0x36>
 8003216:	89a3      	ldrh	r3, [r4, #12]
 8003218:	0598      	lsls	r0, r3, #22
 800321a:	d402      	bmi.n	8003222 <_puts_r+0x36>
 800321c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800321e:	f000 fae3 	bl	80037e8 <__retarget_lock_acquire_recursive>
 8003222:	89a3      	ldrh	r3, [r4, #12]
 8003224:	0719      	lsls	r1, r3, #28
 8003226:	d51d      	bpl.n	8003264 <_puts_r+0x78>
 8003228:	6923      	ldr	r3, [r4, #16]
 800322a:	b1db      	cbz	r3, 8003264 <_puts_r+0x78>
 800322c:	3e01      	subs	r6, #1
 800322e:	68a3      	ldr	r3, [r4, #8]
 8003230:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003234:	3b01      	subs	r3, #1
 8003236:	60a3      	str	r3, [r4, #8]
 8003238:	bb39      	cbnz	r1, 800328a <_puts_r+0x9e>
 800323a:	2b00      	cmp	r3, #0
 800323c:	da38      	bge.n	80032b0 <_puts_r+0xc4>
 800323e:	4622      	mov	r2, r4
 8003240:	210a      	movs	r1, #10
 8003242:	4628      	mov	r0, r5
 8003244:	f000 f858 	bl	80032f8 <__swbuf_r>
 8003248:	3001      	adds	r0, #1
 800324a:	d011      	beq.n	8003270 <_puts_r+0x84>
 800324c:	250a      	movs	r5, #10
 800324e:	e011      	b.n	8003274 <_puts_r+0x88>
 8003250:	4b1b      	ldr	r3, [pc, #108]	; (80032c0 <_puts_r+0xd4>)
 8003252:	429c      	cmp	r4, r3
 8003254:	d101      	bne.n	800325a <_puts_r+0x6e>
 8003256:	68ac      	ldr	r4, [r5, #8]
 8003258:	e7da      	b.n	8003210 <_puts_r+0x24>
 800325a:	4b1a      	ldr	r3, [pc, #104]	; (80032c4 <_puts_r+0xd8>)
 800325c:	429c      	cmp	r4, r3
 800325e:	bf08      	it	eq
 8003260:	68ec      	ldreq	r4, [r5, #12]
 8003262:	e7d5      	b.n	8003210 <_puts_r+0x24>
 8003264:	4621      	mov	r1, r4
 8003266:	4628      	mov	r0, r5
 8003268:	f000 f898 	bl	800339c <__swsetup_r>
 800326c:	2800      	cmp	r0, #0
 800326e:	d0dd      	beq.n	800322c <_puts_r+0x40>
 8003270:	f04f 35ff 	mov.w	r5, #4294967295
 8003274:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003276:	07da      	lsls	r2, r3, #31
 8003278:	d405      	bmi.n	8003286 <_puts_r+0x9a>
 800327a:	89a3      	ldrh	r3, [r4, #12]
 800327c:	059b      	lsls	r3, r3, #22
 800327e:	d402      	bmi.n	8003286 <_puts_r+0x9a>
 8003280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003282:	f000 fab2 	bl	80037ea <__retarget_lock_release_recursive>
 8003286:	4628      	mov	r0, r5
 8003288:	bd70      	pop	{r4, r5, r6, pc}
 800328a:	2b00      	cmp	r3, #0
 800328c:	da04      	bge.n	8003298 <_puts_r+0xac>
 800328e:	69a2      	ldr	r2, [r4, #24]
 8003290:	429a      	cmp	r2, r3
 8003292:	dc06      	bgt.n	80032a2 <_puts_r+0xb6>
 8003294:	290a      	cmp	r1, #10
 8003296:	d004      	beq.n	80032a2 <_puts_r+0xb6>
 8003298:	6823      	ldr	r3, [r4, #0]
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	6022      	str	r2, [r4, #0]
 800329e:	7019      	strb	r1, [r3, #0]
 80032a0:	e7c5      	b.n	800322e <_puts_r+0x42>
 80032a2:	4622      	mov	r2, r4
 80032a4:	4628      	mov	r0, r5
 80032a6:	f000 f827 	bl	80032f8 <__swbuf_r>
 80032aa:	3001      	adds	r0, #1
 80032ac:	d1bf      	bne.n	800322e <_puts_r+0x42>
 80032ae:	e7df      	b.n	8003270 <_puts_r+0x84>
 80032b0:	6823      	ldr	r3, [r4, #0]
 80032b2:	250a      	movs	r5, #10
 80032b4:	1c5a      	adds	r2, r3, #1
 80032b6:	6022      	str	r2, [r4, #0]
 80032b8:	701d      	strb	r5, [r3, #0]
 80032ba:	e7db      	b.n	8003274 <_puts_r+0x88>
 80032bc:	08003adc 	.word	0x08003adc
 80032c0:	08003afc 	.word	0x08003afc
 80032c4:	08003abc 	.word	0x08003abc

080032c8 <puts>:
 80032c8:	4b02      	ldr	r3, [pc, #8]	; (80032d4 <puts+0xc>)
 80032ca:	4601      	mov	r1, r0
 80032cc:	6818      	ldr	r0, [r3, #0]
 80032ce:	f7ff bf8d 	b.w	80031ec <_puts_r>
 80032d2:	bf00      	nop
 80032d4:	20000020 	.word	0x20000020

080032d8 <_sbrk_r>:
 80032d8:	b538      	push	{r3, r4, r5, lr}
 80032da:	4d06      	ldr	r5, [pc, #24]	; (80032f4 <_sbrk_r+0x1c>)
 80032dc:	2300      	movs	r3, #0
 80032de:	4604      	mov	r4, r0
 80032e0:	4608      	mov	r0, r1
 80032e2:	602b      	str	r3, [r5, #0]
 80032e4:	f7fd fc2a 	bl	8000b3c <_sbrk>
 80032e8:	1c43      	adds	r3, r0, #1
 80032ea:	d102      	bne.n	80032f2 <_sbrk_r+0x1a>
 80032ec:	682b      	ldr	r3, [r5, #0]
 80032ee:	b103      	cbz	r3, 80032f2 <_sbrk_r+0x1a>
 80032f0:	6023      	str	r3, [r4, #0]
 80032f2:	bd38      	pop	{r3, r4, r5, pc}
 80032f4:	20000140 	.word	0x20000140

080032f8 <__swbuf_r>:
 80032f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032fa:	460e      	mov	r6, r1
 80032fc:	4614      	mov	r4, r2
 80032fe:	4605      	mov	r5, r0
 8003300:	b118      	cbz	r0, 800330a <__swbuf_r+0x12>
 8003302:	6983      	ldr	r3, [r0, #24]
 8003304:	b90b      	cbnz	r3, 800330a <__swbuf_r+0x12>
 8003306:	f000 f9d1 	bl	80036ac <__sinit>
 800330a:	4b21      	ldr	r3, [pc, #132]	; (8003390 <__swbuf_r+0x98>)
 800330c:	429c      	cmp	r4, r3
 800330e:	d12b      	bne.n	8003368 <__swbuf_r+0x70>
 8003310:	686c      	ldr	r4, [r5, #4]
 8003312:	69a3      	ldr	r3, [r4, #24]
 8003314:	60a3      	str	r3, [r4, #8]
 8003316:	89a3      	ldrh	r3, [r4, #12]
 8003318:	071a      	lsls	r2, r3, #28
 800331a:	d52f      	bpl.n	800337c <__swbuf_r+0x84>
 800331c:	6923      	ldr	r3, [r4, #16]
 800331e:	b36b      	cbz	r3, 800337c <__swbuf_r+0x84>
 8003320:	6923      	ldr	r3, [r4, #16]
 8003322:	6820      	ldr	r0, [r4, #0]
 8003324:	1ac0      	subs	r0, r0, r3
 8003326:	6963      	ldr	r3, [r4, #20]
 8003328:	b2f6      	uxtb	r6, r6
 800332a:	4283      	cmp	r3, r0
 800332c:	4637      	mov	r7, r6
 800332e:	dc04      	bgt.n	800333a <__swbuf_r+0x42>
 8003330:	4621      	mov	r1, r4
 8003332:	4628      	mov	r0, r5
 8003334:	f000 f926 	bl	8003584 <_fflush_r>
 8003338:	bb30      	cbnz	r0, 8003388 <__swbuf_r+0x90>
 800333a:	68a3      	ldr	r3, [r4, #8]
 800333c:	3b01      	subs	r3, #1
 800333e:	60a3      	str	r3, [r4, #8]
 8003340:	6823      	ldr	r3, [r4, #0]
 8003342:	1c5a      	adds	r2, r3, #1
 8003344:	6022      	str	r2, [r4, #0]
 8003346:	701e      	strb	r6, [r3, #0]
 8003348:	6963      	ldr	r3, [r4, #20]
 800334a:	3001      	adds	r0, #1
 800334c:	4283      	cmp	r3, r0
 800334e:	d004      	beq.n	800335a <__swbuf_r+0x62>
 8003350:	89a3      	ldrh	r3, [r4, #12]
 8003352:	07db      	lsls	r3, r3, #31
 8003354:	d506      	bpl.n	8003364 <__swbuf_r+0x6c>
 8003356:	2e0a      	cmp	r6, #10
 8003358:	d104      	bne.n	8003364 <__swbuf_r+0x6c>
 800335a:	4621      	mov	r1, r4
 800335c:	4628      	mov	r0, r5
 800335e:	f000 f911 	bl	8003584 <_fflush_r>
 8003362:	b988      	cbnz	r0, 8003388 <__swbuf_r+0x90>
 8003364:	4638      	mov	r0, r7
 8003366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003368:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <__swbuf_r+0x9c>)
 800336a:	429c      	cmp	r4, r3
 800336c:	d101      	bne.n	8003372 <__swbuf_r+0x7a>
 800336e:	68ac      	ldr	r4, [r5, #8]
 8003370:	e7cf      	b.n	8003312 <__swbuf_r+0x1a>
 8003372:	4b09      	ldr	r3, [pc, #36]	; (8003398 <__swbuf_r+0xa0>)
 8003374:	429c      	cmp	r4, r3
 8003376:	bf08      	it	eq
 8003378:	68ec      	ldreq	r4, [r5, #12]
 800337a:	e7ca      	b.n	8003312 <__swbuf_r+0x1a>
 800337c:	4621      	mov	r1, r4
 800337e:	4628      	mov	r0, r5
 8003380:	f000 f80c 	bl	800339c <__swsetup_r>
 8003384:	2800      	cmp	r0, #0
 8003386:	d0cb      	beq.n	8003320 <__swbuf_r+0x28>
 8003388:	f04f 37ff 	mov.w	r7, #4294967295
 800338c:	e7ea      	b.n	8003364 <__swbuf_r+0x6c>
 800338e:	bf00      	nop
 8003390:	08003adc 	.word	0x08003adc
 8003394:	08003afc 	.word	0x08003afc
 8003398:	08003abc 	.word	0x08003abc

0800339c <__swsetup_r>:
 800339c:	4b32      	ldr	r3, [pc, #200]	; (8003468 <__swsetup_r+0xcc>)
 800339e:	b570      	push	{r4, r5, r6, lr}
 80033a0:	681d      	ldr	r5, [r3, #0]
 80033a2:	4606      	mov	r6, r0
 80033a4:	460c      	mov	r4, r1
 80033a6:	b125      	cbz	r5, 80033b2 <__swsetup_r+0x16>
 80033a8:	69ab      	ldr	r3, [r5, #24]
 80033aa:	b913      	cbnz	r3, 80033b2 <__swsetup_r+0x16>
 80033ac:	4628      	mov	r0, r5
 80033ae:	f000 f97d 	bl	80036ac <__sinit>
 80033b2:	4b2e      	ldr	r3, [pc, #184]	; (800346c <__swsetup_r+0xd0>)
 80033b4:	429c      	cmp	r4, r3
 80033b6:	d10f      	bne.n	80033d8 <__swsetup_r+0x3c>
 80033b8:	686c      	ldr	r4, [r5, #4]
 80033ba:	89a3      	ldrh	r3, [r4, #12]
 80033bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80033c0:	0719      	lsls	r1, r3, #28
 80033c2:	d42c      	bmi.n	800341e <__swsetup_r+0x82>
 80033c4:	06dd      	lsls	r5, r3, #27
 80033c6:	d411      	bmi.n	80033ec <__swsetup_r+0x50>
 80033c8:	2309      	movs	r3, #9
 80033ca:	6033      	str	r3, [r6, #0]
 80033cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80033d0:	81a3      	strh	r3, [r4, #12]
 80033d2:	f04f 30ff 	mov.w	r0, #4294967295
 80033d6:	e03e      	b.n	8003456 <__swsetup_r+0xba>
 80033d8:	4b25      	ldr	r3, [pc, #148]	; (8003470 <__swsetup_r+0xd4>)
 80033da:	429c      	cmp	r4, r3
 80033dc:	d101      	bne.n	80033e2 <__swsetup_r+0x46>
 80033de:	68ac      	ldr	r4, [r5, #8]
 80033e0:	e7eb      	b.n	80033ba <__swsetup_r+0x1e>
 80033e2:	4b24      	ldr	r3, [pc, #144]	; (8003474 <__swsetup_r+0xd8>)
 80033e4:	429c      	cmp	r4, r3
 80033e6:	bf08      	it	eq
 80033e8:	68ec      	ldreq	r4, [r5, #12]
 80033ea:	e7e6      	b.n	80033ba <__swsetup_r+0x1e>
 80033ec:	0758      	lsls	r0, r3, #29
 80033ee:	d512      	bpl.n	8003416 <__swsetup_r+0x7a>
 80033f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033f2:	b141      	cbz	r1, 8003406 <__swsetup_r+0x6a>
 80033f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033f8:	4299      	cmp	r1, r3
 80033fa:	d002      	beq.n	8003402 <__swsetup_r+0x66>
 80033fc:	4630      	mov	r0, r6
 80033fe:	f7ff fe15 	bl	800302c <_free_r>
 8003402:	2300      	movs	r3, #0
 8003404:	6363      	str	r3, [r4, #52]	; 0x34
 8003406:	89a3      	ldrh	r3, [r4, #12]
 8003408:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800340c:	81a3      	strh	r3, [r4, #12]
 800340e:	2300      	movs	r3, #0
 8003410:	6063      	str	r3, [r4, #4]
 8003412:	6923      	ldr	r3, [r4, #16]
 8003414:	6023      	str	r3, [r4, #0]
 8003416:	89a3      	ldrh	r3, [r4, #12]
 8003418:	f043 0308 	orr.w	r3, r3, #8
 800341c:	81a3      	strh	r3, [r4, #12]
 800341e:	6923      	ldr	r3, [r4, #16]
 8003420:	b94b      	cbnz	r3, 8003436 <__swsetup_r+0x9a>
 8003422:	89a3      	ldrh	r3, [r4, #12]
 8003424:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800342c:	d003      	beq.n	8003436 <__swsetup_r+0x9a>
 800342e:	4621      	mov	r1, r4
 8003430:	4630      	mov	r0, r6
 8003432:	f000 fa01 	bl	8003838 <__smakebuf_r>
 8003436:	89a0      	ldrh	r0, [r4, #12]
 8003438:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800343c:	f010 0301 	ands.w	r3, r0, #1
 8003440:	d00a      	beq.n	8003458 <__swsetup_r+0xbc>
 8003442:	2300      	movs	r3, #0
 8003444:	60a3      	str	r3, [r4, #8]
 8003446:	6963      	ldr	r3, [r4, #20]
 8003448:	425b      	negs	r3, r3
 800344a:	61a3      	str	r3, [r4, #24]
 800344c:	6923      	ldr	r3, [r4, #16]
 800344e:	b943      	cbnz	r3, 8003462 <__swsetup_r+0xc6>
 8003450:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003454:	d1ba      	bne.n	80033cc <__swsetup_r+0x30>
 8003456:	bd70      	pop	{r4, r5, r6, pc}
 8003458:	0781      	lsls	r1, r0, #30
 800345a:	bf58      	it	pl
 800345c:	6963      	ldrpl	r3, [r4, #20]
 800345e:	60a3      	str	r3, [r4, #8]
 8003460:	e7f4      	b.n	800344c <__swsetup_r+0xb0>
 8003462:	2000      	movs	r0, #0
 8003464:	e7f7      	b.n	8003456 <__swsetup_r+0xba>
 8003466:	bf00      	nop
 8003468:	20000020 	.word	0x20000020
 800346c:	08003adc 	.word	0x08003adc
 8003470:	08003afc 	.word	0x08003afc
 8003474:	08003abc 	.word	0x08003abc

08003478 <__sflush_r>:
 8003478:	898a      	ldrh	r2, [r1, #12]
 800347a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800347e:	4605      	mov	r5, r0
 8003480:	0710      	lsls	r0, r2, #28
 8003482:	460c      	mov	r4, r1
 8003484:	d458      	bmi.n	8003538 <__sflush_r+0xc0>
 8003486:	684b      	ldr	r3, [r1, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	dc05      	bgt.n	8003498 <__sflush_r+0x20>
 800348c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800348e:	2b00      	cmp	r3, #0
 8003490:	dc02      	bgt.n	8003498 <__sflush_r+0x20>
 8003492:	2000      	movs	r0, #0
 8003494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003498:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800349a:	2e00      	cmp	r6, #0
 800349c:	d0f9      	beq.n	8003492 <__sflush_r+0x1a>
 800349e:	2300      	movs	r3, #0
 80034a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80034a4:	682f      	ldr	r7, [r5, #0]
 80034a6:	602b      	str	r3, [r5, #0]
 80034a8:	d032      	beq.n	8003510 <__sflush_r+0x98>
 80034aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80034ac:	89a3      	ldrh	r3, [r4, #12]
 80034ae:	075a      	lsls	r2, r3, #29
 80034b0:	d505      	bpl.n	80034be <__sflush_r+0x46>
 80034b2:	6863      	ldr	r3, [r4, #4]
 80034b4:	1ac0      	subs	r0, r0, r3
 80034b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034b8:	b10b      	cbz	r3, 80034be <__sflush_r+0x46>
 80034ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034bc:	1ac0      	subs	r0, r0, r3
 80034be:	2300      	movs	r3, #0
 80034c0:	4602      	mov	r2, r0
 80034c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034c4:	6a21      	ldr	r1, [r4, #32]
 80034c6:	4628      	mov	r0, r5
 80034c8:	47b0      	blx	r6
 80034ca:	1c43      	adds	r3, r0, #1
 80034cc:	89a3      	ldrh	r3, [r4, #12]
 80034ce:	d106      	bne.n	80034de <__sflush_r+0x66>
 80034d0:	6829      	ldr	r1, [r5, #0]
 80034d2:	291d      	cmp	r1, #29
 80034d4:	d82c      	bhi.n	8003530 <__sflush_r+0xb8>
 80034d6:	4a2a      	ldr	r2, [pc, #168]	; (8003580 <__sflush_r+0x108>)
 80034d8:	40ca      	lsrs	r2, r1
 80034da:	07d6      	lsls	r6, r2, #31
 80034dc:	d528      	bpl.n	8003530 <__sflush_r+0xb8>
 80034de:	2200      	movs	r2, #0
 80034e0:	6062      	str	r2, [r4, #4]
 80034e2:	04d9      	lsls	r1, r3, #19
 80034e4:	6922      	ldr	r2, [r4, #16]
 80034e6:	6022      	str	r2, [r4, #0]
 80034e8:	d504      	bpl.n	80034f4 <__sflush_r+0x7c>
 80034ea:	1c42      	adds	r2, r0, #1
 80034ec:	d101      	bne.n	80034f2 <__sflush_r+0x7a>
 80034ee:	682b      	ldr	r3, [r5, #0]
 80034f0:	b903      	cbnz	r3, 80034f4 <__sflush_r+0x7c>
 80034f2:	6560      	str	r0, [r4, #84]	; 0x54
 80034f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034f6:	602f      	str	r7, [r5, #0]
 80034f8:	2900      	cmp	r1, #0
 80034fa:	d0ca      	beq.n	8003492 <__sflush_r+0x1a>
 80034fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003500:	4299      	cmp	r1, r3
 8003502:	d002      	beq.n	800350a <__sflush_r+0x92>
 8003504:	4628      	mov	r0, r5
 8003506:	f7ff fd91 	bl	800302c <_free_r>
 800350a:	2000      	movs	r0, #0
 800350c:	6360      	str	r0, [r4, #52]	; 0x34
 800350e:	e7c1      	b.n	8003494 <__sflush_r+0x1c>
 8003510:	6a21      	ldr	r1, [r4, #32]
 8003512:	2301      	movs	r3, #1
 8003514:	4628      	mov	r0, r5
 8003516:	47b0      	blx	r6
 8003518:	1c41      	adds	r1, r0, #1
 800351a:	d1c7      	bne.n	80034ac <__sflush_r+0x34>
 800351c:	682b      	ldr	r3, [r5, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0c4      	beq.n	80034ac <__sflush_r+0x34>
 8003522:	2b1d      	cmp	r3, #29
 8003524:	d001      	beq.n	800352a <__sflush_r+0xb2>
 8003526:	2b16      	cmp	r3, #22
 8003528:	d101      	bne.n	800352e <__sflush_r+0xb6>
 800352a:	602f      	str	r7, [r5, #0]
 800352c:	e7b1      	b.n	8003492 <__sflush_r+0x1a>
 800352e:	89a3      	ldrh	r3, [r4, #12]
 8003530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003534:	81a3      	strh	r3, [r4, #12]
 8003536:	e7ad      	b.n	8003494 <__sflush_r+0x1c>
 8003538:	690f      	ldr	r7, [r1, #16]
 800353a:	2f00      	cmp	r7, #0
 800353c:	d0a9      	beq.n	8003492 <__sflush_r+0x1a>
 800353e:	0793      	lsls	r3, r2, #30
 8003540:	680e      	ldr	r6, [r1, #0]
 8003542:	bf08      	it	eq
 8003544:	694b      	ldreq	r3, [r1, #20]
 8003546:	600f      	str	r7, [r1, #0]
 8003548:	bf18      	it	ne
 800354a:	2300      	movne	r3, #0
 800354c:	eba6 0807 	sub.w	r8, r6, r7
 8003550:	608b      	str	r3, [r1, #8]
 8003552:	f1b8 0f00 	cmp.w	r8, #0
 8003556:	dd9c      	ble.n	8003492 <__sflush_r+0x1a>
 8003558:	6a21      	ldr	r1, [r4, #32]
 800355a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800355c:	4643      	mov	r3, r8
 800355e:	463a      	mov	r2, r7
 8003560:	4628      	mov	r0, r5
 8003562:	47b0      	blx	r6
 8003564:	2800      	cmp	r0, #0
 8003566:	dc06      	bgt.n	8003576 <__sflush_r+0xfe>
 8003568:	89a3      	ldrh	r3, [r4, #12]
 800356a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800356e:	81a3      	strh	r3, [r4, #12]
 8003570:	f04f 30ff 	mov.w	r0, #4294967295
 8003574:	e78e      	b.n	8003494 <__sflush_r+0x1c>
 8003576:	4407      	add	r7, r0
 8003578:	eba8 0800 	sub.w	r8, r8, r0
 800357c:	e7e9      	b.n	8003552 <__sflush_r+0xda>
 800357e:	bf00      	nop
 8003580:	20400001 	.word	0x20400001

08003584 <_fflush_r>:
 8003584:	b538      	push	{r3, r4, r5, lr}
 8003586:	690b      	ldr	r3, [r1, #16]
 8003588:	4605      	mov	r5, r0
 800358a:	460c      	mov	r4, r1
 800358c:	b913      	cbnz	r3, 8003594 <_fflush_r+0x10>
 800358e:	2500      	movs	r5, #0
 8003590:	4628      	mov	r0, r5
 8003592:	bd38      	pop	{r3, r4, r5, pc}
 8003594:	b118      	cbz	r0, 800359e <_fflush_r+0x1a>
 8003596:	6983      	ldr	r3, [r0, #24]
 8003598:	b90b      	cbnz	r3, 800359e <_fflush_r+0x1a>
 800359a:	f000 f887 	bl	80036ac <__sinit>
 800359e:	4b14      	ldr	r3, [pc, #80]	; (80035f0 <_fflush_r+0x6c>)
 80035a0:	429c      	cmp	r4, r3
 80035a2:	d11b      	bne.n	80035dc <_fflush_r+0x58>
 80035a4:	686c      	ldr	r4, [r5, #4]
 80035a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0ef      	beq.n	800358e <_fflush_r+0xa>
 80035ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80035b0:	07d0      	lsls	r0, r2, #31
 80035b2:	d404      	bmi.n	80035be <_fflush_r+0x3a>
 80035b4:	0599      	lsls	r1, r3, #22
 80035b6:	d402      	bmi.n	80035be <_fflush_r+0x3a>
 80035b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035ba:	f000 f915 	bl	80037e8 <__retarget_lock_acquire_recursive>
 80035be:	4628      	mov	r0, r5
 80035c0:	4621      	mov	r1, r4
 80035c2:	f7ff ff59 	bl	8003478 <__sflush_r>
 80035c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035c8:	07da      	lsls	r2, r3, #31
 80035ca:	4605      	mov	r5, r0
 80035cc:	d4e0      	bmi.n	8003590 <_fflush_r+0xc>
 80035ce:	89a3      	ldrh	r3, [r4, #12]
 80035d0:	059b      	lsls	r3, r3, #22
 80035d2:	d4dd      	bmi.n	8003590 <_fflush_r+0xc>
 80035d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035d6:	f000 f908 	bl	80037ea <__retarget_lock_release_recursive>
 80035da:	e7d9      	b.n	8003590 <_fflush_r+0xc>
 80035dc:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <_fflush_r+0x70>)
 80035de:	429c      	cmp	r4, r3
 80035e0:	d101      	bne.n	80035e6 <_fflush_r+0x62>
 80035e2:	68ac      	ldr	r4, [r5, #8]
 80035e4:	e7df      	b.n	80035a6 <_fflush_r+0x22>
 80035e6:	4b04      	ldr	r3, [pc, #16]	; (80035f8 <_fflush_r+0x74>)
 80035e8:	429c      	cmp	r4, r3
 80035ea:	bf08      	it	eq
 80035ec:	68ec      	ldreq	r4, [r5, #12]
 80035ee:	e7da      	b.n	80035a6 <_fflush_r+0x22>
 80035f0:	08003adc 	.word	0x08003adc
 80035f4:	08003afc 	.word	0x08003afc
 80035f8:	08003abc 	.word	0x08003abc

080035fc <std>:
 80035fc:	2300      	movs	r3, #0
 80035fe:	b510      	push	{r4, lr}
 8003600:	4604      	mov	r4, r0
 8003602:	e9c0 3300 	strd	r3, r3, [r0]
 8003606:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800360a:	6083      	str	r3, [r0, #8]
 800360c:	8181      	strh	r1, [r0, #12]
 800360e:	6643      	str	r3, [r0, #100]	; 0x64
 8003610:	81c2      	strh	r2, [r0, #14]
 8003612:	6183      	str	r3, [r0, #24]
 8003614:	4619      	mov	r1, r3
 8003616:	2208      	movs	r2, #8
 8003618:	305c      	adds	r0, #92	; 0x5c
 800361a:	f7ff fcff 	bl	800301c <memset>
 800361e:	4b05      	ldr	r3, [pc, #20]	; (8003634 <std+0x38>)
 8003620:	6263      	str	r3, [r4, #36]	; 0x24
 8003622:	4b05      	ldr	r3, [pc, #20]	; (8003638 <std+0x3c>)
 8003624:	62a3      	str	r3, [r4, #40]	; 0x28
 8003626:	4b05      	ldr	r3, [pc, #20]	; (800363c <std+0x40>)
 8003628:	62e3      	str	r3, [r4, #44]	; 0x2c
 800362a:	4b05      	ldr	r3, [pc, #20]	; (8003640 <std+0x44>)
 800362c:	6224      	str	r4, [r4, #32]
 800362e:	6323      	str	r3, [r4, #48]	; 0x30
 8003630:	bd10      	pop	{r4, pc}
 8003632:	bf00      	nop
 8003634:	080038d1 	.word	0x080038d1
 8003638:	080038f3 	.word	0x080038f3
 800363c:	0800392b 	.word	0x0800392b
 8003640:	0800394f 	.word	0x0800394f

08003644 <_cleanup_r>:
 8003644:	4901      	ldr	r1, [pc, #4]	; (800364c <_cleanup_r+0x8>)
 8003646:	f000 b8af 	b.w	80037a8 <_fwalk_reent>
 800364a:	bf00      	nop
 800364c:	08003585 	.word	0x08003585

08003650 <__sfmoreglue>:
 8003650:	b570      	push	{r4, r5, r6, lr}
 8003652:	2268      	movs	r2, #104	; 0x68
 8003654:	1e4d      	subs	r5, r1, #1
 8003656:	4355      	muls	r5, r2
 8003658:	460e      	mov	r6, r1
 800365a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800365e:	f7ff fd51 	bl	8003104 <_malloc_r>
 8003662:	4604      	mov	r4, r0
 8003664:	b140      	cbz	r0, 8003678 <__sfmoreglue+0x28>
 8003666:	2100      	movs	r1, #0
 8003668:	e9c0 1600 	strd	r1, r6, [r0]
 800366c:	300c      	adds	r0, #12
 800366e:	60a0      	str	r0, [r4, #8]
 8003670:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003674:	f7ff fcd2 	bl	800301c <memset>
 8003678:	4620      	mov	r0, r4
 800367a:	bd70      	pop	{r4, r5, r6, pc}

0800367c <__sfp_lock_acquire>:
 800367c:	4801      	ldr	r0, [pc, #4]	; (8003684 <__sfp_lock_acquire+0x8>)
 800367e:	f000 b8b3 	b.w	80037e8 <__retarget_lock_acquire_recursive>
 8003682:	bf00      	nop
 8003684:	2000013d 	.word	0x2000013d

08003688 <__sfp_lock_release>:
 8003688:	4801      	ldr	r0, [pc, #4]	; (8003690 <__sfp_lock_release+0x8>)
 800368a:	f000 b8ae 	b.w	80037ea <__retarget_lock_release_recursive>
 800368e:	bf00      	nop
 8003690:	2000013d 	.word	0x2000013d

08003694 <__sinit_lock_acquire>:
 8003694:	4801      	ldr	r0, [pc, #4]	; (800369c <__sinit_lock_acquire+0x8>)
 8003696:	f000 b8a7 	b.w	80037e8 <__retarget_lock_acquire_recursive>
 800369a:	bf00      	nop
 800369c:	2000013e 	.word	0x2000013e

080036a0 <__sinit_lock_release>:
 80036a0:	4801      	ldr	r0, [pc, #4]	; (80036a8 <__sinit_lock_release+0x8>)
 80036a2:	f000 b8a2 	b.w	80037ea <__retarget_lock_release_recursive>
 80036a6:	bf00      	nop
 80036a8:	2000013e 	.word	0x2000013e

080036ac <__sinit>:
 80036ac:	b510      	push	{r4, lr}
 80036ae:	4604      	mov	r4, r0
 80036b0:	f7ff fff0 	bl	8003694 <__sinit_lock_acquire>
 80036b4:	69a3      	ldr	r3, [r4, #24]
 80036b6:	b11b      	cbz	r3, 80036c0 <__sinit+0x14>
 80036b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036bc:	f7ff bff0 	b.w	80036a0 <__sinit_lock_release>
 80036c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80036c4:	6523      	str	r3, [r4, #80]	; 0x50
 80036c6:	4b13      	ldr	r3, [pc, #76]	; (8003714 <__sinit+0x68>)
 80036c8:	4a13      	ldr	r2, [pc, #76]	; (8003718 <__sinit+0x6c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80036ce:	42a3      	cmp	r3, r4
 80036d0:	bf04      	itt	eq
 80036d2:	2301      	moveq	r3, #1
 80036d4:	61a3      	streq	r3, [r4, #24]
 80036d6:	4620      	mov	r0, r4
 80036d8:	f000 f820 	bl	800371c <__sfp>
 80036dc:	6060      	str	r0, [r4, #4]
 80036de:	4620      	mov	r0, r4
 80036e0:	f000 f81c 	bl	800371c <__sfp>
 80036e4:	60a0      	str	r0, [r4, #8]
 80036e6:	4620      	mov	r0, r4
 80036e8:	f000 f818 	bl	800371c <__sfp>
 80036ec:	2200      	movs	r2, #0
 80036ee:	60e0      	str	r0, [r4, #12]
 80036f0:	2104      	movs	r1, #4
 80036f2:	6860      	ldr	r0, [r4, #4]
 80036f4:	f7ff ff82 	bl	80035fc <std>
 80036f8:	68a0      	ldr	r0, [r4, #8]
 80036fa:	2201      	movs	r2, #1
 80036fc:	2109      	movs	r1, #9
 80036fe:	f7ff ff7d 	bl	80035fc <std>
 8003702:	68e0      	ldr	r0, [r4, #12]
 8003704:	2202      	movs	r2, #2
 8003706:	2112      	movs	r1, #18
 8003708:	f7ff ff78 	bl	80035fc <std>
 800370c:	2301      	movs	r3, #1
 800370e:	61a3      	str	r3, [r4, #24]
 8003710:	e7d2      	b.n	80036b8 <__sinit+0xc>
 8003712:	bf00      	nop
 8003714:	08003ab8 	.word	0x08003ab8
 8003718:	08003645 	.word	0x08003645

0800371c <__sfp>:
 800371c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371e:	4607      	mov	r7, r0
 8003720:	f7ff ffac 	bl	800367c <__sfp_lock_acquire>
 8003724:	4b1e      	ldr	r3, [pc, #120]	; (80037a0 <__sfp+0x84>)
 8003726:	681e      	ldr	r6, [r3, #0]
 8003728:	69b3      	ldr	r3, [r6, #24]
 800372a:	b913      	cbnz	r3, 8003732 <__sfp+0x16>
 800372c:	4630      	mov	r0, r6
 800372e:	f7ff ffbd 	bl	80036ac <__sinit>
 8003732:	3648      	adds	r6, #72	; 0x48
 8003734:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003738:	3b01      	subs	r3, #1
 800373a:	d503      	bpl.n	8003744 <__sfp+0x28>
 800373c:	6833      	ldr	r3, [r6, #0]
 800373e:	b30b      	cbz	r3, 8003784 <__sfp+0x68>
 8003740:	6836      	ldr	r6, [r6, #0]
 8003742:	e7f7      	b.n	8003734 <__sfp+0x18>
 8003744:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003748:	b9d5      	cbnz	r5, 8003780 <__sfp+0x64>
 800374a:	4b16      	ldr	r3, [pc, #88]	; (80037a4 <__sfp+0x88>)
 800374c:	60e3      	str	r3, [r4, #12]
 800374e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003752:	6665      	str	r5, [r4, #100]	; 0x64
 8003754:	f000 f847 	bl	80037e6 <__retarget_lock_init_recursive>
 8003758:	f7ff ff96 	bl	8003688 <__sfp_lock_release>
 800375c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003760:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003764:	6025      	str	r5, [r4, #0]
 8003766:	61a5      	str	r5, [r4, #24]
 8003768:	2208      	movs	r2, #8
 800376a:	4629      	mov	r1, r5
 800376c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003770:	f7ff fc54 	bl	800301c <memset>
 8003774:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003778:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800377c:	4620      	mov	r0, r4
 800377e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003780:	3468      	adds	r4, #104	; 0x68
 8003782:	e7d9      	b.n	8003738 <__sfp+0x1c>
 8003784:	2104      	movs	r1, #4
 8003786:	4638      	mov	r0, r7
 8003788:	f7ff ff62 	bl	8003650 <__sfmoreglue>
 800378c:	4604      	mov	r4, r0
 800378e:	6030      	str	r0, [r6, #0]
 8003790:	2800      	cmp	r0, #0
 8003792:	d1d5      	bne.n	8003740 <__sfp+0x24>
 8003794:	f7ff ff78 	bl	8003688 <__sfp_lock_release>
 8003798:	230c      	movs	r3, #12
 800379a:	603b      	str	r3, [r7, #0]
 800379c:	e7ee      	b.n	800377c <__sfp+0x60>
 800379e:	bf00      	nop
 80037a0:	08003ab8 	.word	0x08003ab8
 80037a4:	ffff0001 	.word	0xffff0001

080037a8 <_fwalk_reent>:
 80037a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037ac:	4606      	mov	r6, r0
 80037ae:	4688      	mov	r8, r1
 80037b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80037b4:	2700      	movs	r7, #0
 80037b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80037ba:	f1b9 0901 	subs.w	r9, r9, #1
 80037be:	d505      	bpl.n	80037cc <_fwalk_reent+0x24>
 80037c0:	6824      	ldr	r4, [r4, #0]
 80037c2:	2c00      	cmp	r4, #0
 80037c4:	d1f7      	bne.n	80037b6 <_fwalk_reent+0xe>
 80037c6:	4638      	mov	r0, r7
 80037c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037cc:	89ab      	ldrh	r3, [r5, #12]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d907      	bls.n	80037e2 <_fwalk_reent+0x3a>
 80037d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037d6:	3301      	adds	r3, #1
 80037d8:	d003      	beq.n	80037e2 <_fwalk_reent+0x3a>
 80037da:	4629      	mov	r1, r5
 80037dc:	4630      	mov	r0, r6
 80037de:	47c0      	blx	r8
 80037e0:	4307      	orrs	r7, r0
 80037e2:	3568      	adds	r5, #104	; 0x68
 80037e4:	e7e9      	b.n	80037ba <_fwalk_reent+0x12>

080037e6 <__retarget_lock_init_recursive>:
 80037e6:	4770      	bx	lr

080037e8 <__retarget_lock_acquire_recursive>:
 80037e8:	4770      	bx	lr

080037ea <__retarget_lock_release_recursive>:
 80037ea:	4770      	bx	lr

080037ec <__swhatbuf_r>:
 80037ec:	b570      	push	{r4, r5, r6, lr}
 80037ee:	460e      	mov	r6, r1
 80037f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037f4:	2900      	cmp	r1, #0
 80037f6:	b096      	sub	sp, #88	; 0x58
 80037f8:	4614      	mov	r4, r2
 80037fa:	461d      	mov	r5, r3
 80037fc:	da08      	bge.n	8003810 <__swhatbuf_r+0x24>
 80037fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	602a      	str	r2, [r5, #0]
 8003806:	061a      	lsls	r2, r3, #24
 8003808:	d410      	bmi.n	800382c <__swhatbuf_r+0x40>
 800380a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800380e:	e00e      	b.n	800382e <__swhatbuf_r+0x42>
 8003810:	466a      	mov	r2, sp
 8003812:	f000 f8c3 	bl	800399c <_fstat_r>
 8003816:	2800      	cmp	r0, #0
 8003818:	dbf1      	blt.n	80037fe <__swhatbuf_r+0x12>
 800381a:	9a01      	ldr	r2, [sp, #4]
 800381c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003820:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003824:	425a      	negs	r2, r3
 8003826:	415a      	adcs	r2, r3
 8003828:	602a      	str	r2, [r5, #0]
 800382a:	e7ee      	b.n	800380a <__swhatbuf_r+0x1e>
 800382c:	2340      	movs	r3, #64	; 0x40
 800382e:	2000      	movs	r0, #0
 8003830:	6023      	str	r3, [r4, #0]
 8003832:	b016      	add	sp, #88	; 0x58
 8003834:	bd70      	pop	{r4, r5, r6, pc}
	...

08003838 <__smakebuf_r>:
 8003838:	898b      	ldrh	r3, [r1, #12]
 800383a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800383c:	079d      	lsls	r5, r3, #30
 800383e:	4606      	mov	r6, r0
 8003840:	460c      	mov	r4, r1
 8003842:	d507      	bpl.n	8003854 <__smakebuf_r+0x1c>
 8003844:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003848:	6023      	str	r3, [r4, #0]
 800384a:	6123      	str	r3, [r4, #16]
 800384c:	2301      	movs	r3, #1
 800384e:	6163      	str	r3, [r4, #20]
 8003850:	b002      	add	sp, #8
 8003852:	bd70      	pop	{r4, r5, r6, pc}
 8003854:	ab01      	add	r3, sp, #4
 8003856:	466a      	mov	r2, sp
 8003858:	f7ff ffc8 	bl	80037ec <__swhatbuf_r>
 800385c:	9900      	ldr	r1, [sp, #0]
 800385e:	4605      	mov	r5, r0
 8003860:	4630      	mov	r0, r6
 8003862:	f7ff fc4f 	bl	8003104 <_malloc_r>
 8003866:	b948      	cbnz	r0, 800387c <__smakebuf_r+0x44>
 8003868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800386c:	059a      	lsls	r2, r3, #22
 800386e:	d4ef      	bmi.n	8003850 <__smakebuf_r+0x18>
 8003870:	f023 0303 	bic.w	r3, r3, #3
 8003874:	f043 0302 	orr.w	r3, r3, #2
 8003878:	81a3      	strh	r3, [r4, #12]
 800387a:	e7e3      	b.n	8003844 <__smakebuf_r+0xc>
 800387c:	4b0d      	ldr	r3, [pc, #52]	; (80038b4 <__smakebuf_r+0x7c>)
 800387e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003880:	89a3      	ldrh	r3, [r4, #12]
 8003882:	6020      	str	r0, [r4, #0]
 8003884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003888:	81a3      	strh	r3, [r4, #12]
 800388a:	9b00      	ldr	r3, [sp, #0]
 800388c:	6163      	str	r3, [r4, #20]
 800388e:	9b01      	ldr	r3, [sp, #4]
 8003890:	6120      	str	r0, [r4, #16]
 8003892:	b15b      	cbz	r3, 80038ac <__smakebuf_r+0x74>
 8003894:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003898:	4630      	mov	r0, r6
 800389a:	f000 f891 	bl	80039c0 <_isatty_r>
 800389e:	b128      	cbz	r0, 80038ac <__smakebuf_r+0x74>
 80038a0:	89a3      	ldrh	r3, [r4, #12]
 80038a2:	f023 0303 	bic.w	r3, r3, #3
 80038a6:	f043 0301 	orr.w	r3, r3, #1
 80038aa:	81a3      	strh	r3, [r4, #12]
 80038ac:	89a0      	ldrh	r0, [r4, #12]
 80038ae:	4305      	orrs	r5, r0
 80038b0:	81a5      	strh	r5, [r4, #12]
 80038b2:	e7cd      	b.n	8003850 <__smakebuf_r+0x18>
 80038b4:	08003645 	.word	0x08003645

080038b8 <__malloc_lock>:
 80038b8:	4801      	ldr	r0, [pc, #4]	; (80038c0 <__malloc_lock+0x8>)
 80038ba:	f7ff bf95 	b.w	80037e8 <__retarget_lock_acquire_recursive>
 80038be:	bf00      	nop
 80038c0:	2000013c 	.word	0x2000013c

080038c4 <__malloc_unlock>:
 80038c4:	4801      	ldr	r0, [pc, #4]	; (80038cc <__malloc_unlock+0x8>)
 80038c6:	f7ff bf90 	b.w	80037ea <__retarget_lock_release_recursive>
 80038ca:	bf00      	nop
 80038cc:	2000013c 	.word	0x2000013c

080038d0 <__sread>:
 80038d0:	b510      	push	{r4, lr}
 80038d2:	460c      	mov	r4, r1
 80038d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038d8:	f000 f894 	bl	8003a04 <_read_r>
 80038dc:	2800      	cmp	r0, #0
 80038de:	bfab      	itete	ge
 80038e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80038e2:	89a3      	ldrhlt	r3, [r4, #12]
 80038e4:	181b      	addge	r3, r3, r0
 80038e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80038ea:	bfac      	ite	ge
 80038ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80038ee:	81a3      	strhlt	r3, [r4, #12]
 80038f0:	bd10      	pop	{r4, pc}

080038f2 <__swrite>:
 80038f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038f6:	461f      	mov	r7, r3
 80038f8:	898b      	ldrh	r3, [r1, #12]
 80038fa:	05db      	lsls	r3, r3, #23
 80038fc:	4605      	mov	r5, r0
 80038fe:	460c      	mov	r4, r1
 8003900:	4616      	mov	r6, r2
 8003902:	d505      	bpl.n	8003910 <__swrite+0x1e>
 8003904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003908:	2302      	movs	r3, #2
 800390a:	2200      	movs	r2, #0
 800390c:	f000 f868 	bl	80039e0 <_lseek_r>
 8003910:	89a3      	ldrh	r3, [r4, #12]
 8003912:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003916:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800391a:	81a3      	strh	r3, [r4, #12]
 800391c:	4632      	mov	r2, r6
 800391e:	463b      	mov	r3, r7
 8003920:	4628      	mov	r0, r5
 8003922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003926:	f000 b817 	b.w	8003958 <_write_r>

0800392a <__sseek>:
 800392a:	b510      	push	{r4, lr}
 800392c:	460c      	mov	r4, r1
 800392e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003932:	f000 f855 	bl	80039e0 <_lseek_r>
 8003936:	1c43      	adds	r3, r0, #1
 8003938:	89a3      	ldrh	r3, [r4, #12]
 800393a:	bf15      	itete	ne
 800393c:	6560      	strne	r0, [r4, #84]	; 0x54
 800393e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003942:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003946:	81a3      	strheq	r3, [r4, #12]
 8003948:	bf18      	it	ne
 800394a:	81a3      	strhne	r3, [r4, #12]
 800394c:	bd10      	pop	{r4, pc}

0800394e <__sclose>:
 800394e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003952:	f000 b813 	b.w	800397c <_close_r>
	...

08003958 <_write_r>:
 8003958:	b538      	push	{r3, r4, r5, lr}
 800395a:	4d07      	ldr	r5, [pc, #28]	; (8003978 <_write_r+0x20>)
 800395c:	4604      	mov	r4, r0
 800395e:	4608      	mov	r0, r1
 8003960:	4611      	mov	r1, r2
 8003962:	2200      	movs	r2, #0
 8003964:	602a      	str	r2, [r5, #0]
 8003966:	461a      	mov	r2, r3
 8003968:	f7fc fdc2 	bl	80004f0 <_write>
 800396c:	1c43      	adds	r3, r0, #1
 800396e:	d102      	bne.n	8003976 <_write_r+0x1e>
 8003970:	682b      	ldr	r3, [r5, #0]
 8003972:	b103      	cbz	r3, 8003976 <_write_r+0x1e>
 8003974:	6023      	str	r3, [r4, #0]
 8003976:	bd38      	pop	{r3, r4, r5, pc}
 8003978:	20000140 	.word	0x20000140

0800397c <_close_r>:
 800397c:	b538      	push	{r3, r4, r5, lr}
 800397e:	4d06      	ldr	r5, [pc, #24]	; (8003998 <_close_r+0x1c>)
 8003980:	2300      	movs	r3, #0
 8003982:	4604      	mov	r4, r0
 8003984:	4608      	mov	r0, r1
 8003986:	602b      	str	r3, [r5, #0]
 8003988:	f7fd f8a3 	bl	8000ad2 <_close>
 800398c:	1c43      	adds	r3, r0, #1
 800398e:	d102      	bne.n	8003996 <_close_r+0x1a>
 8003990:	682b      	ldr	r3, [r5, #0]
 8003992:	b103      	cbz	r3, 8003996 <_close_r+0x1a>
 8003994:	6023      	str	r3, [r4, #0]
 8003996:	bd38      	pop	{r3, r4, r5, pc}
 8003998:	20000140 	.word	0x20000140

0800399c <_fstat_r>:
 800399c:	b538      	push	{r3, r4, r5, lr}
 800399e:	4d07      	ldr	r5, [pc, #28]	; (80039bc <_fstat_r+0x20>)
 80039a0:	2300      	movs	r3, #0
 80039a2:	4604      	mov	r4, r0
 80039a4:	4608      	mov	r0, r1
 80039a6:	4611      	mov	r1, r2
 80039a8:	602b      	str	r3, [r5, #0]
 80039aa:	f7fd f89e 	bl	8000aea <_fstat>
 80039ae:	1c43      	adds	r3, r0, #1
 80039b0:	d102      	bne.n	80039b8 <_fstat_r+0x1c>
 80039b2:	682b      	ldr	r3, [r5, #0]
 80039b4:	b103      	cbz	r3, 80039b8 <_fstat_r+0x1c>
 80039b6:	6023      	str	r3, [r4, #0]
 80039b8:	bd38      	pop	{r3, r4, r5, pc}
 80039ba:	bf00      	nop
 80039bc:	20000140 	.word	0x20000140

080039c0 <_isatty_r>:
 80039c0:	b538      	push	{r3, r4, r5, lr}
 80039c2:	4d06      	ldr	r5, [pc, #24]	; (80039dc <_isatty_r+0x1c>)
 80039c4:	2300      	movs	r3, #0
 80039c6:	4604      	mov	r4, r0
 80039c8:	4608      	mov	r0, r1
 80039ca:	602b      	str	r3, [r5, #0]
 80039cc:	f7fd f89d 	bl	8000b0a <_isatty>
 80039d0:	1c43      	adds	r3, r0, #1
 80039d2:	d102      	bne.n	80039da <_isatty_r+0x1a>
 80039d4:	682b      	ldr	r3, [r5, #0]
 80039d6:	b103      	cbz	r3, 80039da <_isatty_r+0x1a>
 80039d8:	6023      	str	r3, [r4, #0]
 80039da:	bd38      	pop	{r3, r4, r5, pc}
 80039dc:	20000140 	.word	0x20000140

080039e0 <_lseek_r>:
 80039e0:	b538      	push	{r3, r4, r5, lr}
 80039e2:	4d07      	ldr	r5, [pc, #28]	; (8003a00 <_lseek_r+0x20>)
 80039e4:	4604      	mov	r4, r0
 80039e6:	4608      	mov	r0, r1
 80039e8:	4611      	mov	r1, r2
 80039ea:	2200      	movs	r2, #0
 80039ec:	602a      	str	r2, [r5, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	f7fd f896 	bl	8000b20 <_lseek>
 80039f4:	1c43      	adds	r3, r0, #1
 80039f6:	d102      	bne.n	80039fe <_lseek_r+0x1e>
 80039f8:	682b      	ldr	r3, [r5, #0]
 80039fa:	b103      	cbz	r3, 80039fe <_lseek_r+0x1e>
 80039fc:	6023      	str	r3, [r4, #0]
 80039fe:	bd38      	pop	{r3, r4, r5, pc}
 8003a00:	20000140 	.word	0x20000140

08003a04 <_read_r>:
 8003a04:	b538      	push	{r3, r4, r5, lr}
 8003a06:	4d07      	ldr	r5, [pc, #28]	; (8003a24 <_read_r+0x20>)
 8003a08:	4604      	mov	r4, r0
 8003a0a:	4608      	mov	r0, r1
 8003a0c:	4611      	mov	r1, r2
 8003a0e:	2200      	movs	r2, #0
 8003a10:	602a      	str	r2, [r5, #0]
 8003a12:	461a      	mov	r2, r3
 8003a14:	f7fd f840 	bl	8000a98 <_read>
 8003a18:	1c43      	adds	r3, r0, #1
 8003a1a:	d102      	bne.n	8003a22 <_read_r+0x1e>
 8003a1c:	682b      	ldr	r3, [r5, #0]
 8003a1e:	b103      	cbz	r3, 8003a22 <_read_r+0x1e>
 8003a20:	6023      	str	r3, [r4, #0]
 8003a22:	bd38      	pop	{r3, r4, r5, pc}
 8003a24:	20000140 	.word	0x20000140

08003a28 <_init>:
 8003a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a2a:	bf00      	nop
 8003a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a2e:	bc08      	pop	{r3}
 8003a30:	469e      	mov	lr, r3
 8003a32:	4770      	bx	lr

08003a34 <_fini>:
 8003a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a36:	bf00      	nop
 8003a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a3a:	bc08      	pop	{r3}
 8003a3c:	469e      	mov	lr, r3
 8003a3e:	4770      	bx	lr
