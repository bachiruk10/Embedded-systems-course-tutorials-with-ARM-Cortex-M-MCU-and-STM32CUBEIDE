
CH10 FreeRTOS - Tutorial 10-13 Mutex Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063a0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08006550  08006550  00016550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800665c  0800665c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800665c  0800665c  0001665c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006664  08006664  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006664  08006664  00016664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006668  08006668  00016668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800666c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00004bac  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004c18  20004c18  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015240  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003241  00000000  00000000  0003531f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012d0  00000000  00000000  00038560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e6a  00000000  00000000  00039830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00004437  00000000  00000000  0003a69a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014768  00000000  00000000  0003ead1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e418b  00000000  00000000  00053239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000055f8  00000000  00000000  001373c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a0  00000000  00000000  0013c9bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006538 	.word	0x08006538

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08006538 	.word	0x08006538

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d013      	beq.n	80005cc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005ac:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d00b      	beq.n	80005cc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005b4:	e000      	b.n	80005b8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005b6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d0f9      	beq.n	80005b6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005c2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	b2d2      	uxtb	r2, r2
 80005ca:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005cc:	687b      	ldr	r3, [r7, #4]
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr

080005da <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*Function needed to use printf on CONSOLE*/
int _write(int file, char *ptr, int len){
 80005da:	b580      	push	{r7, lr}
 80005dc:	b086      	sub	sp, #24
 80005de:	af00      	add	r7, sp, #0
 80005e0:	60f8      	str	r0, [r7, #12]
 80005e2:	60b9      	str	r1, [r7, #8]
 80005e4:	607a      	str	r2, [r7, #4]
	  int i = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
	  for (i=0; i<len; i++)
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	e009      	b.n	8000604 <_write+0x2a>
		  ITM_SendChar((*ptr++));
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	1c5a      	adds	r2, r3, #1
 80005f4:	60ba      	str	r2, [r7, #8]
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff ffc7 	bl	800058c <ITM_SendChar>
	  for (i=0; i<len; i++)
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	3301      	adds	r3, #1
 8000602:	617b      	str	r3, [r7, #20]
 8000604:	697a      	ldr	r2, [r7, #20]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	429a      	cmp	r2, r3
 800060a:	dbf1      	blt.n	80005f0 <_write+0x16>
	  return len;
 800060c:	687b      	ldr	r3, [r7, #4]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3718      	adds	r7, #24
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
	...

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061c:	f000 fad2 	bl	8000bc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000620:	f000 f832 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000624:	f000 f8a0 	bl	8000768 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  printf("PROGRAM START \n\r");
 8000628:	480e      	ldr	r0, [pc, #56]	; (8000664 <main+0x4c>)
 800062a:	f005 f851 	bl	80056d0 <iprintf>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800062e:	f001 fdc3 	bl	80021b8 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  Mutex1Handle = osMutexNew(&Mutex1_attributes);
 8000632:	480d      	ldr	r0, [pc, #52]	; (8000668 <main+0x50>)
 8000634:	f001 fed7 	bl	80023e6 <osMutexNew>
 8000638:	4603      	mov	r3, r0
 800063a:	4a0c      	ldr	r2, [pc, #48]	; (800066c <main+0x54>)
 800063c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800063e:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <main+0x58>)
 8000640:	2100      	movs	r1, #0
 8000642:	480c      	ldr	r0, [pc, #48]	; (8000674 <main+0x5c>)
 8000644:	f001 fe02 	bl	800224c <osThreadNew>
 8000648:	4603      	mov	r3, r0
 800064a:	4a0b      	ldr	r2, [pc, #44]	; (8000678 <main+0x60>)
 800064c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  myTask02Handle = osThreadNew(StartmyTask02, NULL, &myTask02_attributes);
 800064e:	4a0b      	ldr	r2, [pc, #44]	; (800067c <main+0x64>)
 8000650:	2100      	movs	r1, #0
 8000652:	480b      	ldr	r0, [pc, #44]	; (8000680 <main+0x68>)
 8000654:	f001 fdfa 	bl	800224c <osThreadNew>
 8000658:	4603      	mov	r3, r0
 800065a:	4a0a      	ldr	r2, [pc, #40]	; (8000684 <main+0x6c>)
 800065c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800065e:	f001 fdcf 	bl	8002200 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000662:	e7fe      	b.n	8000662 <main+0x4a>
 8000664:	08006570 	.word	0x08006570
 8000668:	08006600 	.word	0x08006600
 800066c:	20000090 	.word	0x20000090
 8000670:	080065b8 	.word	0x080065b8
 8000674:	080007f1 	.word	0x080007f1
 8000678:	20000088 	.word	0x20000088
 800067c:	080065dc 	.word	0x080065dc
 8000680:	08000811 	.word	0x08000811
 8000684:	2000008c 	.word	0x2000008c

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b094      	sub	sp, #80	; 0x50
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0320 	add.w	r3, r7, #32
 8000692:	2230      	movs	r2, #48	; 0x30
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f005 f960 	bl	800595c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	4b2b      	ldr	r3, [pc, #172]	; (8000760 <SystemClock_Config+0xd8>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	4a2a      	ldr	r2, [pc, #168]	; (8000760 <SystemClock_Config+0xd8>)
 80006b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ba:	6413      	str	r3, [r2, #64]	; 0x40
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <SystemClock_Config+0xd8>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	4b25      	ldr	r3, [pc, #148]	; (8000764 <SystemClock_Config+0xdc>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a24      	ldr	r2, [pc, #144]	; (8000764 <SystemClock_Config+0xdc>)
 80006d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b22      	ldr	r3, [pc, #136]	; (8000764 <SystemClock_Config+0xdc>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e4:	2301      	movs	r3, #1
 80006e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ee:	2302      	movs	r3, #2
 80006f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006f8:	2304      	movs	r3, #4
 80006fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006fc:	23b4      	movs	r3, #180	; 0xb4
 80006fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000700:	2302      	movs	r3, #2
 8000702:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000704:	2307      	movs	r3, #7
 8000706:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0320 	add.w	r3, r7, #32
 800070c:	4618      	mov	r0, r3
 800070e:	f000 fdb7 	bl	8001280 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000718:	f000 f8c2 	bl	80008a0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800071c:	f000 fd60 	bl	80011e0 <HAL_PWREx_EnableOverDrive>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000726:	f000 f8bb 	bl	80008a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072a:	230f      	movs	r3, #15
 800072c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072e:	2302      	movs	r3, #2
 8000730:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000736:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800073a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000740:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	2105      	movs	r1, #5
 8000748:	4618      	mov	r0, r3
 800074a:	f001 f811 	bl	8001770 <HAL_RCC_ClockConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000754:	f000 f8a4 	bl	80008a0 <Error_Handler>
  }
}
 8000758:	bf00      	nop
 800075a:	3750      	adds	r7, #80	; 0x50
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <MX_GPIO_Init+0x80>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a18      	ldr	r2, [pc, #96]	; (80007e8 <MX_GPIO_Init+0x80>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <MX_GPIO_Init+0x80>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <MX_GPIO_Init+0x80>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a11      	ldr	r2, [pc, #68]	; (80007e8 <MX_GPIO_Init+0x80>)
 80007a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_GPIO_Init+0x80>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80007bc:	480b      	ldr	r0, [pc, #44]	; (80007ec <MX_GPIO_Init+0x84>)
 80007be:	f000 fcf5 	bl	80011ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80007c2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80007c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	4619      	mov	r1, r3
 80007da:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_GPIO_Init+0x84>)
 80007dc:	f000 fb3a 	bl	8000e54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e0:	bf00      	nop
 80007e2:	3720      	adds	r7, #32
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40021800 	.word	0x40021800

080007f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	  printf("DefaultTask \n\r");
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <StartDefaultTask+0x1c>)
 80007fa:	f004 ff69 	bl	80056d0 <iprintf>
	  ledChange(0);
 80007fe:	2000      	movs	r0, #0
 8000800:	f000 f818 	bl	8000834 <ledChange>
	  osThreadYield();
 8000804:	f001 fdb4 	bl	8002370 <osThreadYield>
	  printf("DefaultTask \n\r");
 8000808:	e7f6      	b.n	80007f8 <StartDefaultTask+0x8>
 800080a:	bf00      	nop
 800080c:	08006584 	.word	0x08006584

08000810 <StartmyTask02>:
  }
  /* USER CODE END 5 */
}

void StartmyTask02(void *argument)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	  printf("myTask02 \n");
 8000818:	4805      	ldr	r0, [pc, #20]	; (8000830 <StartmyTask02+0x20>)
 800081a:	f004 ffbf 	bl	800579c <puts>
	  ledChange(1);
 800081e:	2001      	movs	r0, #1
 8000820:	f000 f808 	bl	8000834 <ledChange>
	  osDelay(500);
 8000824:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000828:	f001 fdc2 	bl	80023b0 <osDelay>
	  printf("myTask02 \n");
 800082c:	e7f4      	b.n	8000818 <StartmyTask02+0x8>
 800082e:	bf00      	nop
 8000830:	08006594 	.word	0x08006594

08000834 <ledChange>:
  }
  /* USER CODE END 5 */
}


void ledChange(int condition){
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	osMutexAcquire(Mutex1Handle, 1000);
 800083c:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <ledChange+0x40>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000844:	4618      	mov	r0, r3
 8000846:	f001 fe54 	bl	80024f2 <osMutexAcquire>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, condition);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	b2db      	uxtb	r3, r3
 800084e:	461a      	mov	r2, r3
 8000850:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000854:	4808      	ldr	r0, [pc, #32]	; (8000878 <ledChange+0x44>)
 8000856:	f000 fca9 	bl	80011ac <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800085a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800085e:	f000 f9f3 	bl	8000c48 <HAL_Delay>
	osMutexRelease(Mutex1Handle);
 8000862:	4b04      	ldr	r3, [pc, #16]	; (8000874 <ledChange+0x40>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4618      	mov	r0, r3
 8000868:	f001 fe8e 	bl	8002588 <osMutexRelease>

}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000090 	.word	0x20000090
 8000878:	40021800 	.word	0x40021800

0800087c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a04      	ldr	r2, [pc, #16]	; (800089c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d101      	bne.n	8000892 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800088e:	f000 f9bb 	bl	8000c08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40001000 	.word	0x40001000

080008a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a4:	b672      	cpsid	i
}
 80008a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <Error_Handler+0x8>
	...

080008ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b12      	ldr	r3, [pc, #72]	; (8000900 <HAL_MspInit+0x54>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ba:	4a11      	ldr	r2, [pc, #68]	; (8000900 <HAL_MspInit+0x54>)
 80008bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c0:	6453      	str	r3, [r2, #68]	; 0x44
 80008c2:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <HAL_MspInit+0x54>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <HAL_MspInit+0x54>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	4a0a      	ldr	r2, [pc, #40]	; (8000900 <HAL_MspInit+0x54>)
 80008d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008dc:	6413      	str	r3, [r2, #64]	; 0x40
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <HAL_MspInit+0x54>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	210f      	movs	r1, #15
 80008ee:	f06f 0001 	mvn.w	r0, #1
 80008f2:	f000 fa85 	bl	8000e00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800

08000904 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08e      	sub	sp, #56	; 0x38
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800090c:	2300      	movs	r3, #0
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000910:	2300      	movs	r3, #0
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	4b33      	ldr	r3, [pc, #204]	; (80009e8 <HAL_InitTick+0xe4>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	4a32      	ldr	r2, [pc, #200]	; (80009e8 <HAL_InitTick+0xe4>)
 800091e:	f043 0310 	orr.w	r3, r3, #16
 8000922:	6413      	str	r3, [r2, #64]	; 0x40
 8000924:	4b30      	ldr	r3, [pc, #192]	; (80009e8 <HAL_InitTick+0xe4>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	f003 0310 	and.w	r3, r3, #16
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000930:	f107 0210 	add.w	r2, r7, #16
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4611      	mov	r1, r2
 800093a:	4618      	mov	r0, r3
 800093c:	f001 f924 	bl	8001b88 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000940:	6a3b      	ldr	r3, [r7, #32]
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000946:	2b00      	cmp	r3, #0
 8000948:	d103      	bne.n	8000952 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800094a:	f001 f909 	bl	8001b60 <HAL_RCC_GetPCLK1Freq>
 800094e:	6378      	str	r0, [r7, #52]	; 0x34
 8000950:	e004      	b.n	800095c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000952:	f001 f905 	bl	8001b60 <HAL_RCC_GetPCLK1Freq>
 8000956:	4603      	mov	r3, r0
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800095c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800095e:	4a23      	ldr	r2, [pc, #140]	; (80009ec <HAL_InitTick+0xe8>)
 8000960:	fba2 2303 	umull	r2, r3, r2, r3
 8000964:	0c9b      	lsrs	r3, r3, #18
 8000966:	3b01      	subs	r3, #1
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800096a:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <HAL_InitTick+0xec>)
 800096c:	4a21      	ldr	r2, [pc, #132]	; (80009f4 <HAL_InitTick+0xf0>)
 800096e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000970:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <HAL_InitTick+0xec>)
 8000972:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000976:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000978:	4a1d      	ldr	r2, [pc, #116]	; (80009f0 <HAL_InitTick+0xec>)
 800097a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800097c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800097e:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <HAL_InitTick+0xec>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000984:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <HAL_InitTick+0xec>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098a:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <HAL_InitTick+0xec>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000990:	4817      	ldr	r0, [pc, #92]	; (80009f0 <HAL_InitTick+0xec>)
 8000992:	f001 f92b 	bl	8001bec <HAL_TIM_Base_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800099c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d11b      	bne.n	80009dc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80009a4:	4812      	ldr	r0, [pc, #72]	; (80009f0 <HAL_InitTick+0xec>)
 80009a6:	f001 f97b 	bl	8001ca0 <HAL_TIM_Base_Start_IT>
 80009aa:	4603      	mov	r3, r0
 80009ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80009b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d111      	bne.n	80009dc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009b8:	2036      	movs	r0, #54	; 0x36
 80009ba:	f000 fa3d 	bl	8000e38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2b0f      	cmp	r3, #15
 80009c2:	d808      	bhi.n	80009d6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80009c4:	2200      	movs	r2, #0
 80009c6:	6879      	ldr	r1, [r7, #4]
 80009c8:	2036      	movs	r0, #54	; 0x36
 80009ca:	f000 fa19 	bl	8000e00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ce:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <HAL_InitTick+0xf4>)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6013      	str	r3, [r2, #0]
 80009d4:	e002      	b.n	80009dc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3738      	adds	r7, #56	; 0x38
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40023800 	.word	0x40023800
 80009ec:	431bde83 	.word	0x431bde83
 80009f0:	20000094 	.word	0x20000094
 80009f4:	40001000 	.word	0x40001000
 80009f8:	20000004 	.word	0x20000004

080009fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a00:	e7fe      	b.n	8000a00 <NMI_Handler+0x4>

08000a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <MemManage_Handler+0x4>

08000a0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <TIM6_DAC_IRQHandler+0x10>)
 8000a2e:	f001 f9a7 	bl	8001d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000094 	.word	0x20000094

08000a3c <_read>:
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	e00a      	b.n	8000a64 <_read+0x28>
 8000a4e:	f3af 8000 	nop.w
 8000a52:	4601      	mov	r1, r0
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	1c5a      	adds	r2, r3, #1
 8000a58:	60ba      	str	r2, [r7, #8]
 8000a5a:	b2ca      	uxtb	r2, r1
 8000a5c:	701a      	strb	r2, [r3, #0]
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	3301      	adds	r3, #1
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697a      	ldr	r2, [r7, #20]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	dbf0      	blt.n	8000a4e <_read+0x12>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <_close>:
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a82:	4618      	mov	r0, r3
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <_fstat>:
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	6039      	str	r1, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <_isatty>:
 8000aae:	b480      	push	{r7}
 8000ab0:	b083      	sub	sp, #12
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	4618      	mov	r0, r3
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <_lseek>:
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
	...

08000ae0 <_sbrk>:
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <_sbrk+0x5c>)
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <_sbrk+0x60>)
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <_sbrk+0x64>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d102      	bne.n	8000b02 <_sbrk+0x22>
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <_sbrk+0x64>)
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <_sbrk+0x68>)
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <_sbrk+0x64>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4413      	add	r3, r2
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d207      	bcs.n	8000b20 <_sbrk+0x40>
 8000b10:	f004 ffc8 	bl	8005aa4 <__errno>
 8000b14:	4603      	mov	r3, r0
 8000b16:	220c      	movs	r2, #12
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1e:	e009      	b.n	8000b34 <_sbrk+0x54>
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <_sbrk+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <_sbrk+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <_sbrk+0x64>)
 8000b30:	6013      	str	r3, [r2, #0]
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	4618      	mov	r0, r3
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20030000 	.word	0x20030000
 8000b40:	00000400 	.word	0x00000400
 8000b44:	200000dc 	.word	0x200000dc
 8000b48:	20004c18 	.word	0x20004c18

08000b4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <SystemInit+0x20>)
 8000b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b56:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <SystemInit+0x20>)
 8000b58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <Reset_Handler>:
 8000b70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ba8 <LoopFillZerobss+0xe>
 8000b74:	f7ff ffea 	bl	8000b4c <SystemInit>
 8000b78:	480c      	ldr	r0, [pc, #48]	; (8000bac <LoopFillZerobss+0x12>)
 8000b7a:	490d      	ldr	r1, [pc, #52]	; (8000bb0 <LoopFillZerobss+0x16>)
 8000b7c:	4a0d      	ldr	r2, [pc, #52]	; (8000bb4 <LoopFillZerobss+0x1a>)
 8000b7e:	2300      	movs	r3, #0
 8000b80:	e002      	b.n	8000b88 <LoopCopyDataInit>

08000b82 <CopyDataInit>:
 8000b82:	58d4      	ldr	r4, [r2, r3]
 8000b84:	50c4      	str	r4, [r0, r3]
 8000b86:	3304      	adds	r3, #4

08000b88 <LoopCopyDataInit>:
 8000b88:	18c4      	adds	r4, r0, r3
 8000b8a:	428c      	cmp	r4, r1
 8000b8c:	d3f9      	bcc.n	8000b82 <CopyDataInit>
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	; (8000bb8 <LoopFillZerobss+0x1e>)
 8000b90:	4c0a      	ldr	r4, [pc, #40]	; (8000bbc <LoopFillZerobss+0x22>)
 8000b92:	2300      	movs	r3, #0
 8000b94:	e001      	b.n	8000b9a <LoopFillZerobss>

08000b96 <FillZerobss>:
 8000b96:	6013      	str	r3, [r2, #0]
 8000b98:	3204      	adds	r2, #4

08000b9a <LoopFillZerobss>:
 8000b9a:	42a2      	cmp	r2, r4
 8000b9c:	d3fb      	bcc.n	8000b96 <FillZerobss>
 8000b9e:	f004 ff87 	bl	8005ab0 <__libc_init_array>
 8000ba2:	f7ff fd39 	bl	8000618 <main>
 8000ba6:	4770      	bx	lr
 8000ba8:	20030000 	.word	0x20030000
 8000bac:	20000000 	.word	0x20000000
 8000bb0:	2000006c 	.word	0x2000006c
 8000bb4:	0800666c 	.word	0x0800666c
 8000bb8:	2000006c 	.word	0x2000006c
 8000bbc:	20004c18 	.word	0x20004c18

08000bc0 <ADC_IRQHandler>:
 8000bc0:	e7fe      	b.n	8000bc0 <ADC_IRQHandler>
	...

08000bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <HAL_Init+0x40>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	; (8000c04 <HAL_Init+0x40>)
 8000bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <HAL_Init+0x40>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <HAL_Init+0x40>)
 8000bda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <HAL_Init+0x40>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <HAL_Init+0x40>)
 8000be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f000 f8fc 	bl	8000dea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f7ff fe86 	bl	8000904 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf8:	f7ff fe58 	bl	80008ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023c00 	.word	0x40023c00

08000c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_IncTick+0x20>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	461a      	mov	r2, r3
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_IncTick+0x24>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4413      	add	r3, r2
 8000c18:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <HAL_IncTick+0x24>)
 8000c1a:	6013      	str	r3, [r2, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	200000e0 	.word	0x200000e0

08000c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return uwTick;
 8000c34:	4b03      	ldr	r3, [pc, #12]	; (8000c44 <HAL_GetTick+0x14>)
 8000c36:	681b      	ldr	r3, [r3, #0]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	200000e0 	.word	0x200000e0

08000c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c50:	f7ff ffee 	bl	8000c30 <HAL_GetTick>
 8000c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c60:	d005      	beq.n	8000c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <HAL_Delay+0x44>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	461a      	mov	r2, r3
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c6e:	bf00      	nop
 8000c70:	f7ff ffde 	bl	8000c30 <HAL_GetTick>
 8000c74:	4602      	mov	r2, r0
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d8f7      	bhi.n	8000c70 <HAL_Delay+0x28>
  {
  }
}
 8000c80:	bf00      	nop
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000008 	.word	0x20000008

08000c90 <__NVIC_SetPriorityGrouping>:
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cac:	4013      	ands	r3, r2
 8000cae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc2:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	60d3      	str	r3, [r2, #12]
}
 8000cc8:	bf00      	nop
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_GetPriorityGrouping>:
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	0a1b      	lsrs	r3, r3, #8
 8000ce2:	f003 0307 	and.w	r3, r3, #7
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <__NVIC_EnableIRQ>:
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	db0b      	blt.n	8000d1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	f003 021f 	and.w	r2, r3, #31
 8000d0c:	4907      	ldr	r1, [pc, #28]	; (8000d2c <__NVIC_EnableIRQ+0x38>)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	095b      	lsrs	r3, r3, #5
 8000d14:	2001      	movs	r0, #1
 8000d16:	fa00 f202 	lsl.w	r2, r0, r2
 8000d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000e100 	.word	0xe000e100

08000d30 <__NVIC_SetPriority>:
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	db0a      	blt.n	8000d5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	490c      	ldr	r1, [pc, #48]	; (8000d7c <__NVIC_SetPriority+0x4c>)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	0112      	lsls	r2, r2, #4
 8000d50:	b2d2      	uxtb	r2, r2
 8000d52:	440b      	add	r3, r1
 8000d54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d58:	e00a      	b.n	8000d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4908      	ldr	r1, [pc, #32]	; (8000d80 <__NVIC_SetPriority+0x50>)
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	f003 030f 	and.w	r3, r3, #15
 8000d66:	3b04      	subs	r3, #4
 8000d68:	0112      	lsls	r2, r2, #4
 8000d6a:	b2d2      	uxtb	r2, r2
 8000d6c:	440b      	add	r3, r1
 8000d6e:	761a      	strb	r2, [r3, #24]
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000e100 	.word	0xe000e100
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <NVIC_EncodePriority>:
{
 8000d84:	b480      	push	{r7}
 8000d86:	b089      	sub	sp, #36	; 0x24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	f1c3 0307 	rsb	r3, r3, #7
 8000d9e:	2b04      	cmp	r3, #4
 8000da0:	bf28      	it	cs
 8000da2:	2304      	movcs	r3, #4
 8000da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3304      	adds	r3, #4
 8000daa:	2b06      	cmp	r3, #6
 8000dac:	d902      	bls.n	8000db4 <NVIC_EncodePriority+0x30>
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3b03      	subs	r3, #3
 8000db2:	e000      	b.n	8000db6 <NVIC_EncodePriority+0x32>
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43da      	mvns	r2, r3
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	401a      	ands	r2, r3
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd6:	43d9      	mvns	r1, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	4313      	orrs	r3, r2
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3724      	adds	r7, #36	; 0x24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f7ff ff4c 	bl	8000c90 <__NVIC_SetPriorityGrouping>
}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
 8000e0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e12:	f7ff ff61 	bl	8000cd8 <__NVIC_GetPriorityGrouping>
 8000e16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	68b9      	ldr	r1, [r7, #8]
 8000e1c:	6978      	ldr	r0, [r7, #20]
 8000e1e:	f7ff ffb1 	bl	8000d84 <NVIC_EncodePriority>
 8000e22:	4602      	mov	r2, r0
 8000e24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e28:	4611      	mov	r1, r2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff ff80 	bl	8000d30 <__NVIC_SetPriority>
}
 8000e30:	bf00      	nop
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff ff54 	bl	8000cf4 <__NVIC_EnableIRQ>
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	; 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
 8000e6e:	e177      	b.n	8001160 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e70:	2201      	movs	r2, #1
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	697a      	ldr	r2, [r7, #20]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	f040 8166 	bne.w	800115a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f003 0303 	and.w	r3, r3, #3
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d005      	beq.n	8000ea6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d130      	bne.n	8000f08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	68da      	ldr	r2, [r3, #12]
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000edc:	2201      	movs	r2, #1
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	091b      	lsrs	r3, r3, #4
 8000ef2:	f003 0201 	and.w	r2, r3, #1
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	d017      	beq.n	8000f44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0303 	and.w	r3, r3, #3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d123      	bne.n	8000f98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	08da      	lsrs	r2, r3, #3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3208      	adds	r2, #8
 8000f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	f003 0307 	and.w	r3, r3, #7
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	220f      	movs	r2, #15
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	691a      	ldr	r2, [r3, #16]
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	08da      	lsrs	r2, r3, #3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	3208      	adds	r2, #8
 8000f92:	69b9      	ldr	r1, [r7, #24]
 8000f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 0203 	and.w	r2, r3, #3
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	f000 80c0 	beq.w	800115a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	4b66      	ldr	r3, [pc, #408]	; (8001178 <HAL_GPIO_Init+0x324>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	4a65      	ldr	r2, [pc, #404]	; (8001178 <HAL_GPIO_Init+0x324>)
 8000fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fea:	4b63      	ldr	r3, [pc, #396]	; (8001178 <HAL_GPIO_Init+0x324>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ff6:	4a61      	ldr	r2, [pc, #388]	; (800117c <HAL_GPIO_Init+0x328>)
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	089b      	lsrs	r3, r3, #2
 8000ffc:	3302      	adds	r3, #2
 8000ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f003 0303 	and.w	r3, r3, #3
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	220f      	movs	r2, #15
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a58      	ldr	r2, [pc, #352]	; (8001180 <HAL_GPIO_Init+0x32c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d037      	beq.n	8001092 <HAL_GPIO_Init+0x23e>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a57      	ldr	r2, [pc, #348]	; (8001184 <HAL_GPIO_Init+0x330>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d031      	beq.n	800108e <HAL_GPIO_Init+0x23a>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a56      	ldr	r2, [pc, #344]	; (8001188 <HAL_GPIO_Init+0x334>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d02b      	beq.n	800108a <HAL_GPIO_Init+0x236>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a55      	ldr	r2, [pc, #340]	; (800118c <HAL_GPIO_Init+0x338>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d025      	beq.n	8001086 <HAL_GPIO_Init+0x232>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a54      	ldr	r2, [pc, #336]	; (8001190 <HAL_GPIO_Init+0x33c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d01f      	beq.n	8001082 <HAL_GPIO_Init+0x22e>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a53      	ldr	r2, [pc, #332]	; (8001194 <HAL_GPIO_Init+0x340>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d019      	beq.n	800107e <HAL_GPIO_Init+0x22a>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a52      	ldr	r2, [pc, #328]	; (8001198 <HAL_GPIO_Init+0x344>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d013      	beq.n	800107a <HAL_GPIO_Init+0x226>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a51      	ldr	r2, [pc, #324]	; (800119c <HAL_GPIO_Init+0x348>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d00d      	beq.n	8001076 <HAL_GPIO_Init+0x222>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a50      	ldr	r2, [pc, #320]	; (80011a0 <HAL_GPIO_Init+0x34c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d007      	beq.n	8001072 <HAL_GPIO_Init+0x21e>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4f      	ldr	r2, [pc, #316]	; (80011a4 <HAL_GPIO_Init+0x350>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d101      	bne.n	800106e <HAL_GPIO_Init+0x21a>
 800106a:	2309      	movs	r3, #9
 800106c:	e012      	b.n	8001094 <HAL_GPIO_Init+0x240>
 800106e:	230a      	movs	r3, #10
 8001070:	e010      	b.n	8001094 <HAL_GPIO_Init+0x240>
 8001072:	2308      	movs	r3, #8
 8001074:	e00e      	b.n	8001094 <HAL_GPIO_Init+0x240>
 8001076:	2307      	movs	r3, #7
 8001078:	e00c      	b.n	8001094 <HAL_GPIO_Init+0x240>
 800107a:	2306      	movs	r3, #6
 800107c:	e00a      	b.n	8001094 <HAL_GPIO_Init+0x240>
 800107e:	2305      	movs	r3, #5
 8001080:	e008      	b.n	8001094 <HAL_GPIO_Init+0x240>
 8001082:	2304      	movs	r3, #4
 8001084:	e006      	b.n	8001094 <HAL_GPIO_Init+0x240>
 8001086:	2303      	movs	r3, #3
 8001088:	e004      	b.n	8001094 <HAL_GPIO_Init+0x240>
 800108a:	2302      	movs	r3, #2
 800108c:	e002      	b.n	8001094 <HAL_GPIO_Init+0x240>
 800108e:	2301      	movs	r3, #1
 8001090:	e000      	b.n	8001094 <HAL_GPIO_Init+0x240>
 8001092:	2300      	movs	r3, #0
 8001094:	69fa      	ldr	r2, [r7, #28]
 8001096:	f002 0203 	and.w	r2, r2, #3
 800109a:	0092      	lsls	r2, r2, #2
 800109c:	4093      	lsls	r3, r2
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010a4:	4935      	ldr	r1, [pc, #212]	; (800117c <HAL_GPIO_Init+0x328>)
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	089b      	lsrs	r3, r3, #2
 80010aa:	3302      	adds	r3, #2
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010b2:	4b3d      	ldr	r3, [pc, #244]	; (80011a8 <HAL_GPIO_Init+0x354>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010d6:	4a34      	ldr	r2, [pc, #208]	; (80011a8 <HAL_GPIO_Init+0x354>)
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010dc:	4b32      	ldr	r3, [pc, #200]	; (80011a8 <HAL_GPIO_Init+0x354>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001100:	4a29      	ldr	r2, [pc, #164]	; (80011a8 <HAL_GPIO_Init+0x354>)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001106:	4b28      	ldr	r3, [pc, #160]	; (80011a8 <HAL_GPIO_Init+0x354>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800112a:	4a1f      	ldr	r2, [pc, #124]	; (80011a8 <HAL_GPIO_Init+0x354>)
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001130:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <HAL_GPIO_Init+0x354>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001154:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <HAL_GPIO_Init+0x354>)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3301      	adds	r3, #1
 800115e:	61fb      	str	r3, [r7, #28]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	2b0f      	cmp	r3, #15
 8001164:	f67f ae84 	bls.w	8000e70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	3724      	adds	r7, #36	; 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800
 800117c:	40013800 	.word	0x40013800
 8001180:	40020000 	.word	0x40020000
 8001184:	40020400 	.word	0x40020400
 8001188:	40020800 	.word	0x40020800
 800118c:	40020c00 	.word	0x40020c00
 8001190:	40021000 	.word	0x40021000
 8001194:	40021400 	.word	0x40021400
 8001198:	40021800 	.word	0x40021800
 800119c:	40021c00 	.word	0x40021c00
 80011a0:	40022000 	.word	0x40022000
 80011a4:	40022400 	.word	0x40022400
 80011a8:	40013c00 	.word	0x40013c00

080011ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	807b      	strh	r3, [r7, #2]
 80011b8:	4613      	mov	r3, r2
 80011ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011bc:	787b      	ldrb	r3, [r7, #1]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011c2:	887a      	ldrh	r2, [r7, #2]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011c8:	e003      	b.n	80011d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ca:	887b      	ldrh	r3, [r7, #2]
 80011cc:	041a      	lsls	r2, r3, #16
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	619a      	str	r2, [r3, #24]
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
	...

080011e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	603b      	str	r3, [r7, #0]
 80011ee:	4b20      	ldr	r3, [pc, #128]	; (8001270 <HAL_PWREx_EnableOverDrive+0x90>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	4a1f      	ldr	r2, [pc, #124]	; (8001270 <HAL_PWREx_EnableOverDrive+0x90>)
 80011f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f8:	6413      	str	r3, [r2, #64]	; 0x40
 80011fa:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <HAL_PWREx_EnableOverDrive+0x90>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001206:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <HAL_PWREx_EnableOverDrive+0x94>)
 8001208:	2201      	movs	r2, #1
 800120a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800120c:	f7ff fd10 	bl	8000c30 <HAL_GetTick>
 8001210:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001212:	e009      	b.n	8001228 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001214:	f7ff fd0c 	bl	8000c30 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001222:	d901      	bls.n	8001228 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e01f      	b.n	8001268 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001228:	4b13      	ldr	r3, [pc, #76]	; (8001278 <HAL_PWREx_EnableOverDrive+0x98>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001234:	d1ee      	bne.n	8001214 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001238:	2201      	movs	r2, #1
 800123a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800123c:	f7ff fcf8 	bl	8000c30 <HAL_GetTick>
 8001240:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001242:	e009      	b.n	8001258 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001244:	f7ff fcf4 	bl	8000c30 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001252:	d901      	bls.n	8001258 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e007      	b.n	8001268 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001258:	4b07      	ldr	r3, [pc, #28]	; (8001278 <HAL_PWREx_EnableOverDrive+0x98>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001260:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001264:	d1ee      	bne.n	8001244 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001266:	2300      	movs	r3, #0
}
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40023800 	.word	0x40023800
 8001274:	420e0040 	.word	0x420e0040
 8001278:	40007000 	.word	0x40007000
 800127c:	420e0044 	.word	0x420e0044

08001280 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e267      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b00      	cmp	r3, #0
 800129c:	d075      	beq.n	800138a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800129e:	4b88      	ldr	r3, [pc, #544]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 030c 	and.w	r3, r3, #12
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d00c      	beq.n	80012c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012aa:	4b85      	ldr	r3, [pc, #532]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012b2:	2b08      	cmp	r3, #8
 80012b4:	d112      	bne.n	80012dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012b6:	4b82      	ldr	r3, [pc, #520]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012c2:	d10b      	bne.n	80012dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c4:	4b7e      	ldr	r3, [pc, #504]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d05b      	beq.n	8001388 <HAL_RCC_OscConfig+0x108>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d157      	bne.n	8001388 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e242      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012e4:	d106      	bne.n	80012f4 <HAL_RCC_OscConfig+0x74>
 80012e6:	4b76      	ldr	r3, [pc, #472]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a75      	ldr	r2, [pc, #468]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 80012ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	e01d      	b.n	8001330 <HAL_RCC_OscConfig+0xb0>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012fc:	d10c      	bne.n	8001318 <HAL_RCC_OscConfig+0x98>
 80012fe:	4b70      	ldr	r3, [pc, #448]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a6f      	ldr	r2, [pc, #444]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 8001304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	4b6d      	ldr	r3, [pc, #436]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a6c      	ldr	r2, [pc, #432]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 8001310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	e00b      	b.n	8001330 <HAL_RCC_OscConfig+0xb0>
 8001318:	4b69      	ldr	r3, [pc, #420]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a68      	ldr	r2, [pc, #416]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 800131e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	4b66      	ldr	r3, [pc, #408]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a65      	ldr	r2, [pc, #404]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 800132a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800132e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d013      	beq.n	8001360 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001338:	f7ff fc7a 	bl	8000c30 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001340:	f7ff fc76 	bl	8000c30 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b64      	cmp	r3, #100	; 0x64
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e207      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001352:	4b5b      	ldr	r3, [pc, #364]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0f0      	beq.n	8001340 <HAL_RCC_OscConfig+0xc0>
 800135e:	e014      	b.n	800138a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001360:	f7ff fc66 	bl	8000c30 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001368:	f7ff fc62 	bl	8000c30 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b64      	cmp	r3, #100	; 0x64
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e1f3      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137a:	4b51      	ldr	r3, [pc, #324]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1f0      	bne.n	8001368 <HAL_RCC_OscConfig+0xe8>
 8001386:	e000      	b.n	800138a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d063      	beq.n	800145e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001396:	4b4a      	ldr	r3, [pc, #296]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 030c 	and.w	r3, r3, #12
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00b      	beq.n	80013ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013a2:	4b47      	ldr	r3, [pc, #284]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013aa:	2b08      	cmp	r3, #8
 80013ac:	d11c      	bne.n	80013e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ae:	4b44      	ldr	r3, [pc, #272]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d116      	bne.n	80013e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ba:	4b41      	ldr	r3, [pc, #260]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d005      	beq.n	80013d2 <HAL_RCC_OscConfig+0x152>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d001      	beq.n	80013d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e1c7      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d2:	4b3b      	ldr	r3, [pc, #236]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	4937      	ldr	r1, [pc, #220]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e6:	e03a      	b.n	800145e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d020      	beq.n	8001432 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f0:	4b34      	ldr	r3, [pc, #208]	; (80014c4 <HAL_RCC_OscConfig+0x244>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f6:	f7ff fc1b 	bl	8000c30 <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013fe:	f7ff fc17 	bl	8000c30 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e1a8      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001410:	4b2b      	ldr	r3, [pc, #172]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0f0      	beq.n	80013fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141c:	4b28      	ldr	r3, [pc, #160]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	4925      	ldr	r1, [pc, #148]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 800142c:	4313      	orrs	r3, r2
 800142e:	600b      	str	r3, [r1, #0]
 8001430:	e015      	b.n	800145e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001432:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <HAL_RCC_OscConfig+0x244>)
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001438:	f7ff fbfa 	bl	8000c30 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001440:	f7ff fbf6 	bl	8000c30 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e187      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001452:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	2b00      	cmp	r3, #0
 8001468:	d036      	beq.n	80014d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d016      	beq.n	80014a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <HAL_RCC_OscConfig+0x248>)
 8001474:	2201      	movs	r2, #1
 8001476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001478:	f7ff fbda 	bl	8000c30 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001480:	f7ff fbd6 	bl	8000c30 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e167      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 8001494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f0      	beq.n	8001480 <HAL_RCC_OscConfig+0x200>
 800149e:	e01b      	b.n	80014d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a0:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <HAL_RCC_OscConfig+0x248>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a6:	f7ff fbc3 	bl	8000c30 <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ac:	e00e      	b.n	80014cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ae:	f7ff fbbf 	bl	8000c30 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d907      	bls.n	80014cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e150      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
 80014c0:	40023800 	.word	0x40023800
 80014c4:	42470000 	.word	0x42470000
 80014c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014cc:	4b88      	ldr	r3, [pc, #544]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 80014ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1ea      	bne.n	80014ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 8097 	beq.w	8001614 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014e6:	2300      	movs	r3, #0
 80014e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ea:	4b81      	ldr	r3, [pc, #516]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d10f      	bne.n	8001516 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	4b7d      	ldr	r3, [pc, #500]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	4a7c      	ldr	r2, [pc, #496]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 8001500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001504:	6413      	str	r3, [r2, #64]	; 0x40
 8001506:	4b7a      	ldr	r3, [pc, #488]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001512:	2301      	movs	r3, #1
 8001514:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001516:	4b77      	ldr	r3, [pc, #476]	; (80016f4 <HAL_RCC_OscConfig+0x474>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151e:	2b00      	cmp	r3, #0
 8001520:	d118      	bne.n	8001554 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001522:	4b74      	ldr	r3, [pc, #464]	; (80016f4 <HAL_RCC_OscConfig+0x474>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a73      	ldr	r2, [pc, #460]	; (80016f4 <HAL_RCC_OscConfig+0x474>)
 8001528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800152c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800152e:	f7ff fb7f 	bl	8000c30 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001536:	f7ff fb7b 	bl	8000c30 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e10c      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001548:	4b6a      	ldr	r3, [pc, #424]	; (80016f4 <HAL_RCC_OscConfig+0x474>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0f0      	beq.n	8001536 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d106      	bne.n	800156a <HAL_RCC_OscConfig+0x2ea>
 800155c:	4b64      	ldr	r3, [pc, #400]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 800155e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001560:	4a63      	ldr	r2, [pc, #396]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	6713      	str	r3, [r2, #112]	; 0x70
 8001568:	e01c      	b.n	80015a4 <HAL_RCC_OscConfig+0x324>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	2b05      	cmp	r3, #5
 8001570:	d10c      	bne.n	800158c <HAL_RCC_OscConfig+0x30c>
 8001572:	4b5f      	ldr	r3, [pc, #380]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 8001574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001576:	4a5e      	ldr	r2, [pc, #376]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 8001578:	f043 0304 	orr.w	r3, r3, #4
 800157c:	6713      	str	r3, [r2, #112]	; 0x70
 800157e:	4b5c      	ldr	r3, [pc, #368]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 8001580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001582:	4a5b      	ldr	r2, [pc, #364]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6713      	str	r3, [r2, #112]	; 0x70
 800158a:	e00b      	b.n	80015a4 <HAL_RCC_OscConfig+0x324>
 800158c:	4b58      	ldr	r3, [pc, #352]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 800158e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001590:	4a57      	ldr	r2, [pc, #348]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 8001592:	f023 0301 	bic.w	r3, r3, #1
 8001596:	6713      	str	r3, [r2, #112]	; 0x70
 8001598:	4b55      	ldr	r3, [pc, #340]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 800159a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159c:	4a54      	ldr	r2, [pc, #336]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 800159e:	f023 0304 	bic.w	r3, r3, #4
 80015a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d015      	beq.n	80015d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ac:	f7ff fb40 	bl	8000c30 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b2:	e00a      	b.n	80015ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b4:	f7ff fb3c 	bl	8000c30 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e0cb      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ca:	4b49      	ldr	r3, [pc, #292]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 80015cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0ee      	beq.n	80015b4 <HAL_RCC_OscConfig+0x334>
 80015d6:	e014      	b.n	8001602 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d8:	f7ff fb2a 	bl	8000c30 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015de:	e00a      	b.n	80015f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e0:	f7ff fb26 	bl	8000c30 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e0b5      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f6:	4b3e      	ldr	r3, [pc, #248]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 80015f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1ee      	bne.n	80015e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001602:	7dfb      	ldrb	r3, [r7, #23]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d105      	bne.n	8001614 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001608:	4b39      	ldr	r3, [pc, #228]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	4a38      	ldr	r2, [pc, #224]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 800160e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001612:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 80a1 	beq.w	8001760 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800161e:	4b34      	ldr	r3, [pc, #208]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 030c 	and.w	r3, r3, #12
 8001626:	2b08      	cmp	r3, #8
 8001628:	d05c      	beq.n	80016e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	2b02      	cmp	r3, #2
 8001630:	d141      	bne.n	80016b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001632:	4b31      	ldr	r3, [pc, #196]	; (80016f8 <HAL_RCC_OscConfig+0x478>)
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001638:	f7ff fafa 	bl	8000c30 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001640:	f7ff faf6 	bl	8000c30 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e087      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001652:	4b27      	ldr	r3, [pc, #156]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f0      	bne.n	8001640 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69da      	ldr	r2, [r3, #28]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	431a      	orrs	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166c:	019b      	lsls	r3, r3, #6
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001674:	085b      	lsrs	r3, r3, #1
 8001676:	3b01      	subs	r3, #1
 8001678:	041b      	lsls	r3, r3, #16
 800167a:	431a      	orrs	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001680:	061b      	lsls	r3, r3, #24
 8001682:	491b      	ldr	r1, [pc, #108]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 8001684:	4313      	orrs	r3, r2
 8001686:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001688:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <HAL_RCC_OscConfig+0x478>)
 800168a:	2201      	movs	r2, #1
 800168c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168e:	f7ff facf 	bl	8000c30 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001696:	f7ff facb 	bl	8000c30 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e05c      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a8:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0x416>
 80016b4:	e054      	b.n	8001760 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b6:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <HAL_RCC_OscConfig+0x478>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016bc:	f7ff fab8 	bl	8000c30 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c4:	f7ff fab4 	bl	8000c30 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e045      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f0      	bne.n	80016c4 <HAL_RCC_OscConfig+0x444>
 80016e2:	e03d      	b.n	8001760 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d107      	bne.n	80016fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e038      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40007000 	.word	0x40007000
 80016f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016fc:	4b1b      	ldr	r3, [pc, #108]	; (800176c <HAL_RCC_OscConfig+0x4ec>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d028      	beq.n	800175c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001714:	429a      	cmp	r2, r3
 8001716:	d121      	bne.n	800175c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001722:	429a      	cmp	r2, r3
 8001724:	d11a      	bne.n	800175c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800172c:	4013      	ands	r3, r2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001732:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001734:	4293      	cmp	r3, r2
 8001736:	d111      	bne.n	800175c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001742:	085b      	lsrs	r3, r3, #1
 8001744:	3b01      	subs	r3, #1
 8001746:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001748:	429a      	cmp	r2, r3
 800174a:	d107      	bne.n	800175c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001756:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001758:	429a      	cmp	r2, r3
 800175a:	d001      	beq.n	8001760 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e000      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800

08001770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d101      	bne.n	8001784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e0cc      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001784:	4b68      	ldr	r3, [pc, #416]	; (8001928 <HAL_RCC_ClockConfig+0x1b8>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 030f 	and.w	r3, r3, #15
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d90c      	bls.n	80017ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001792:	4b65      	ldr	r3, [pc, #404]	; (8001928 <HAL_RCC_ClockConfig+0x1b8>)
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800179a:	4b63      	ldr	r3, [pc, #396]	; (8001928 <HAL_RCC_ClockConfig+0x1b8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d001      	beq.n	80017ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e0b8      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d020      	beq.n	80017fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d005      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017c4:	4b59      	ldr	r3, [pc, #356]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	4a58      	ldr	r2, [pc, #352]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0308 	and.w	r3, r3, #8
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d005      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017dc:	4b53      	ldr	r3, [pc, #332]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	4a52      	ldr	r2, [pc, #328]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e8:	4b50      	ldr	r3, [pc, #320]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	494d      	ldr	r1, [pc, #308]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	d044      	beq.n	8001890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d107      	bne.n	800181e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180e:	4b47      	ldr	r3, [pc, #284]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d119      	bne.n	800184e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e07f      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b02      	cmp	r3, #2
 8001824:	d003      	beq.n	800182e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800182a:	2b03      	cmp	r3, #3
 800182c:	d107      	bne.n	800183e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800182e:	4b3f      	ldr	r3, [pc, #252]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d109      	bne.n	800184e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e06f      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183e:	4b3b      	ldr	r3, [pc, #236]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e067      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800184e:	4b37      	ldr	r3, [pc, #220]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f023 0203 	bic.w	r2, r3, #3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	4934      	ldr	r1, [pc, #208]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	4313      	orrs	r3, r2
 800185e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001860:	f7ff f9e6 	bl	8000c30 <HAL_GetTick>
 8001864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001866:	e00a      	b.n	800187e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001868:	f7ff f9e2 	bl	8000c30 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	f241 3288 	movw	r2, #5000	; 0x1388
 8001876:	4293      	cmp	r3, r2
 8001878:	d901      	bls.n	800187e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e04f      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187e:	4b2b      	ldr	r3, [pc, #172]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 020c 	and.w	r2, r3, #12
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	429a      	cmp	r2, r3
 800188e:	d1eb      	bne.n	8001868 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001890:	4b25      	ldr	r3, [pc, #148]	; (8001928 <HAL_RCC_ClockConfig+0x1b8>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 030f 	and.w	r3, r3, #15
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	429a      	cmp	r2, r3
 800189c:	d20c      	bcs.n	80018b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189e:	4b22      	ldr	r3, [pc, #136]	; (8001928 <HAL_RCC_ClockConfig+0x1b8>)
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a6:	4b20      	ldr	r3, [pc, #128]	; (8001928 <HAL_RCC_ClockConfig+0x1b8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d001      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e032      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d008      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c4:	4b19      	ldr	r3, [pc, #100]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	4916      	ldr	r1, [pc, #88]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0308 	and.w	r3, r3, #8
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d009      	beq.n	80018f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018e2:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	490e      	ldr	r1, [pc, #56]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018f6:	f000 f821 	bl	800193c <HAL_RCC_GetSysClockFreq>
 80018fa:	4602      	mov	r2, r0
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	091b      	lsrs	r3, r3, #4
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	490a      	ldr	r1, [pc, #40]	; (8001930 <HAL_RCC_ClockConfig+0x1c0>)
 8001908:	5ccb      	ldrb	r3, [r1, r3]
 800190a:	fa22 f303 	lsr.w	r3, r2, r3
 800190e:	4a09      	ldr	r2, [pc, #36]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 8001910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_RCC_ClockConfig+0x1c8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fff4 	bl	8000904 <HAL_InitTick>

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40023c00 	.word	0x40023c00
 800192c:	40023800 	.word	0x40023800
 8001930:	08006610 	.word	0x08006610
 8001934:	20000000 	.word	0x20000000
 8001938:	20000004 	.word	0x20000004

0800193c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800193c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001940:	b094      	sub	sp, #80	; 0x50
 8001942:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	647b      	str	r3, [r7, #68]	; 0x44
 8001948:	2300      	movs	r3, #0
 800194a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800194c:	2300      	movs	r3, #0
 800194e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001954:	4b79      	ldr	r3, [pc, #484]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 030c 	and.w	r3, r3, #12
 800195c:	2b08      	cmp	r3, #8
 800195e:	d00d      	beq.n	800197c <HAL_RCC_GetSysClockFreq+0x40>
 8001960:	2b08      	cmp	r3, #8
 8001962:	f200 80e1 	bhi.w	8001b28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001966:	2b00      	cmp	r3, #0
 8001968:	d002      	beq.n	8001970 <HAL_RCC_GetSysClockFreq+0x34>
 800196a:	2b04      	cmp	r3, #4
 800196c:	d003      	beq.n	8001976 <HAL_RCC_GetSysClockFreq+0x3a>
 800196e:	e0db      	b.n	8001b28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001970:	4b73      	ldr	r3, [pc, #460]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x204>)
 8001972:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001974:	e0db      	b.n	8001b2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001976:	4b73      	ldr	r3, [pc, #460]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x208>)
 8001978:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800197a:	e0d8      	b.n	8001b2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800197c:	4b6f      	ldr	r3, [pc, #444]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x200>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001984:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001986:	4b6d      	ldr	r3, [pc, #436]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d063      	beq.n	8001a5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001992:	4b6a      	ldr	r3, [pc, #424]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	099b      	lsrs	r3, r3, #6
 8001998:	2200      	movs	r2, #0
 800199a:	63bb      	str	r3, [r7, #56]	; 0x38
 800199c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800199e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019a4:	633b      	str	r3, [r7, #48]	; 0x30
 80019a6:	2300      	movs	r3, #0
 80019a8:	637b      	str	r3, [r7, #52]	; 0x34
 80019aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019ae:	4622      	mov	r2, r4
 80019b0:	462b      	mov	r3, r5
 80019b2:	f04f 0000 	mov.w	r0, #0
 80019b6:	f04f 0100 	mov.w	r1, #0
 80019ba:	0159      	lsls	r1, r3, #5
 80019bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019c0:	0150      	lsls	r0, r2, #5
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4621      	mov	r1, r4
 80019c8:	1a51      	subs	r1, r2, r1
 80019ca:	6139      	str	r1, [r7, #16]
 80019cc:	4629      	mov	r1, r5
 80019ce:	eb63 0301 	sbc.w	r3, r3, r1
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019e0:	4659      	mov	r1, fp
 80019e2:	018b      	lsls	r3, r1, #6
 80019e4:	4651      	mov	r1, sl
 80019e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019ea:	4651      	mov	r1, sl
 80019ec:	018a      	lsls	r2, r1, #6
 80019ee:	4651      	mov	r1, sl
 80019f0:	ebb2 0801 	subs.w	r8, r2, r1
 80019f4:	4659      	mov	r1, fp
 80019f6:	eb63 0901 	sbc.w	r9, r3, r1
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a0e:	4690      	mov	r8, r2
 8001a10:	4699      	mov	r9, r3
 8001a12:	4623      	mov	r3, r4
 8001a14:	eb18 0303 	adds.w	r3, r8, r3
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	462b      	mov	r3, r5
 8001a1c:	eb49 0303 	adc.w	r3, r9, r3
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	f04f 0200 	mov.w	r2, #0
 8001a26:	f04f 0300 	mov.w	r3, #0
 8001a2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a2e:	4629      	mov	r1, r5
 8001a30:	024b      	lsls	r3, r1, #9
 8001a32:	4621      	mov	r1, r4
 8001a34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a38:	4621      	mov	r1, r4
 8001a3a:	024a      	lsls	r2, r1, #9
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a42:	2200      	movs	r2, #0
 8001a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a4c:	f7fe fc20 	bl	8000290 <__aeabi_uldivmod>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4613      	mov	r3, r2
 8001a56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a58:	e058      	b.n	8001b0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a5a:	4b38      	ldr	r3, [pc, #224]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	099b      	lsrs	r3, r3, #6
 8001a60:	2200      	movs	r2, #0
 8001a62:	4618      	mov	r0, r3
 8001a64:	4611      	mov	r1, r2
 8001a66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a6a:	623b      	str	r3, [r7, #32]
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a74:	4642      	mov	r2, r8
 8001a76:	464b      	mov	r3, r9
 8001a78:	f04f 0000 	mov.w	r0, #0
 8001a7c:	f04f 0100 	mov.w	r1, #0
 8001a80:	0159      	lsls	r1, r3, #5
 8001a82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a86:	0150      	lsls	r0, r2, #5
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4641      	mov	r1, r8
 8001a8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a92:	4649      	mov	r1, r9
 8001a94:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	f04f 0300 	mov.w	r3, #0
 8001aa0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001aa4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001aa8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001aac:	ebb2 040a 	subs.w	r4, r2, sl
 8001ab0:	eb63 050b 	sbc.w	r5, r3, fp
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	f04f 0300 	mov.w	r3, #0
 8001abc:	00eb      	lsls	r3, r5, #3
 8001abe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ac2:	00e2      	lsls	r2, r4, #3
 8001ac4:	4614      	mov	r4, r2
 8001ac6:	461d      	mov	r5, r3
 8001ac8:	4643      	mov	r3, r8
 8001aca:	18e3      	adds	r3, r4, r3
 8001acc:	603b      	str	r3, [r7, #0]
 8001ace:	464b      	mov	r3, r9
 8001ad0:	eb45 0303 	adc.w	r3, r5, r3
 8001ad4:	607b      	str	r3, [r7, #4]
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ae2:	4629      	mov	r1, r5
 8001ae4:	028b      	lsls	r3, r1, #10
 8001ae6:	4621      	mov	r1, r4
 8001ae8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001aec:	4621      	mov	r1, r4
 8001aee:	028a      	lsls	r2, r1, #10
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001af6:	2200      	movs	r2, #0
 8001af8:	61bb      	str	r3, [r7, #24]
 8001afa:	61fa      	str	r2, [r7, #28]
 8001afc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b00:	f7fe fbc6 	bl	8000290 <__aeabi_uldivmod>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4613      	mov	r3, r2
 8001b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	0c1b      	lsrs	r3, r3, #16
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	3301      	adds	r3, #1
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b26:	e002      	b.n	8001b2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3750      	adds	r7, #80	; 0x50
 8001b34:	46bd      	mov	sp, r7
 8001b36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	00f42400 	.word	0x00f42400
 8001b44:	007a1200 	.word	0x007a1200

08001b48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b4c:	4b03      	ldr	r3, [pc, #12]	; (8001b5c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	20000000 	.word	0x20000000

08001b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b64:	f7ff fff0 	bl	8001b48 <HAL_RCC_GetHCLKFreq>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	0a9b      	lsrs	r3, r3, #10
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	4903      	ldr	r1, [pc, #12]	; (8001b84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b76:	5ccb      	ldrb	r3, [r1, r3]
 8001b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40023800 	.word	0x40023800
 8001b84:	08006620 	.word	0x08006620

08001b88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	220f      	movs	r2, #15
 8001b96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b98:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 0203 	and.w	r2, r3, #3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <HAL_RCC_GetClockConfig+0x5c>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <HAL_RCC_GetClockConfig+0x5c>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <HAL_RCC_GetClockConfig+0x5c>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	08db      	lsrs	r3, r3, #3
 8001bc2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bca:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <HAL_RCC_GetClockConfig+0x60>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 020f 	and.w	r2, r3, #15
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	601a      	str	r2, [r3, #0]
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40023c00 	.word	0x40023c00

08001bec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e041      	b.n	8001c82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d106      	bne.n	8001c18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f839 	bl	8001c8a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3304      	adds	r3, #4
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	f000 f9c0 	bl	8001fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
	...

08001ca0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d001      	beq.n	8001cb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e04e      	b.n	8001d56 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2202      	movs	r2, #2
 8001cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f042 0201 	orr.w	r2, r2, #1
 8001cce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a23      	ldr	r2, [pc, #140]	; (8001d64 <HAL_TIM_Base_Start_IT+0xc4>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d022      	beq.n	8001d20 <HAL_TIM_Base_Start_IT+0x80>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce2:	d01d      	beq.n	8001d20 <HAL_TIM_Base_Start_IT+0x80>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a1f      	ldr	r2, [pc, #124]	; (8001d68 <HAL_TIM_Base_Start_IT+0xc8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d018      	beq.n	8001d20 <HAL_TIM_Base_Start_IT+0x80>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a1e      	ldr	r2, [pc, #120]	; (8001d6c <HAL_TIM_Base_Start_IT+0xcc>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d013      	beq.n	8001d20 <HAL_TIM_Base_Start_IT+0x80>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a1c      	ldr	r2, [pc, #112]	; (8001d70 <HAL_TIM_Base_Start_IT+0xd0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d00e      	beq.n	8001d20 <HAL_TIM_Base_Start_IT+0x80>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a1b      	ldr	r2, [pc, #108]	; (8001d74 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d009      	beq.n	8001d20 <HAL_TIM_Base_Start_IT+0x80>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a19      	ldr	r2, [pc, #100]	; (8001d78 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d004      	beq.n	8001d20 <HAL_TIM_Base_Start_IT+0x80>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a18      	ldr	r2, [pc, #96]	; (8001d7c <HAL_TIM_Base_Start_IT+0xdc>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d111      	bne.n	8001d44 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2b06      	cmp	r3, #6
 8001d30:	d010      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f042 0201 	orr.w	r2, r2, #1
 8001d40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d42:	e007      	b.n	8001d54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 0201 	orr.w	r2, r2, #1
 8001d52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40010000 	.word	0x40010000
 8001d68:	40000400 	.word	0x40000400
 8001d6c:	40000800 	.word	0x40000800
 8001d70:	40000c00 	.word	0x40000c00
 8001d74:	40010400 	.word	0x40010400
 8001d78:	40014000 	.word	0x40014000
 8001d7c:	40001800 	.word	0x40001800

08001d80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d020      	beq.n	8001de4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d01b      	beq.n	8001de4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f06f 0202 	mvn.w	r2, #2
 8001db4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f8d2 	bl	8001f74 <HAL_TIM_IC_CaptureCallback>
 8001dd0:	e005      	b.n	8001dde <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f8c4 	bl	8001f60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f8d5 	bl	8001f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	f003 0304 	and.w	r3, r3, #4
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d020      	beq.n	8001e30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d01b      	beq.n	8001e30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f06f 0204 	mvn.w	r2, #4
 8001e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2202      	movs	r2, #2
 8001e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f8ac 	bl	8001f74 <HAL_TIM_IC_CaptureCallback>
 8001e1c:	e005      	b.n	8001e2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f89e 	bl	8001f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f8af 	bl	8001f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d020      	beq.n	8001e7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f003 0308 	and.w	r3, r3, #8
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d01b      	beq.n	8001e7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f06f 0208 	mvn.w	r2, #8
 8001e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2204      	movs	r2, #4
 8001e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f886 	bl	8001f74 <HAL_TIM_IC_CaptureCallback>
 8001e68:	e005      	b.n	8001e76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f878 	bl	8001f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f889 	bl	8001f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d020      	beq.n	8001ec8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f003 0310 	and.w	r3, r3, #16
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d01b      	beq.n	8001ec8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f06f 0210 	mvn.w	r2, #16
 8001e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2208      	movs	r2, #8
 8001e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f860 	bl	8001f74 <HAL_TIM_IC_CaptureCallback>
 8001eb4:	e005      	b.n	8001ec2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f852 	bl	8001f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f863 	bl	8001f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00c      	beq.n	8001eec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d007      	beq.n	8001eec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f06f 0201 	mvn.w	r2, #1
 8001ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7fe fcc8 	bl	800087c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00c      	beq.n	8001f10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d007      	beq.n	8001f10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f906 	bl	800211c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00c      	beq.n	8001f34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d007      	beq.n	8001f34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f834 	bl	8001f9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	f003 0320 	and.w	r3, r3, #32
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00c      	beq.n	8001f58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f003 0320 	and.w	r3, r3, #32
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d007      	beq.n	8001f58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f06f 0220 	mvn.w	r2, #32
 8001f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f8d8 	bl	8002108 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f58:	bf00      	nop
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a46      	ldr	r2, [pc, #280]	; (80020dc <TIM_Base_SetConfig+0x12c>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d013      	beq.n	8001ff0 <TIM_Base_SetConfig+0x40>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fce:	d00f      	beq.n	8001ff0 <TIM_Base_SetConfig+0x40>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a43      	ldr	r2, [pc, #268]	; (80020e0 <TIM_Base_SetConfig+0x130>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d00b      	beq.n	8001ff0 <TIM_Base_SetConfig+0x40>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a42      	ldr	r2, [pc, #264]	; (80020e4 <TIM_Base_SetConfig+0x134>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d007      	beq.n	8001ff0 <TIM_Base_SetConfig+0x40>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a41      	ldr	r2, [pc, #260]	; (80020e8 <TIM_Base_SetConfig+0x138>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d003      	beq.n	8001ff0 <TIM_Base_SetConfig+0x40>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a40      	ldr	r2, [pc, #256]	; (80020ec <TIM_Base_SetConfig+0x13c>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d108      	bne.n	8002002 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a35      	ldr	r2, [pc, #212]	; (80020dc <TIM_Base_SetConfig+0x12c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d02b      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002010:	d027      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a32      	ldr	r2, [pc, #200]	; (80020e0 <TIM_Base_SetConfig+0x130>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d023      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a31      	ldr	r2, [pc, #196]	; (80020e4 <TIM_Base_SetConfig+0x134>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d01f      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a30      	ldr	r2, [pc, #192]	; (80020e8 <TIM_Base_SetConfig+0x138>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d01b      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a2f      	ldr	r2, [pc, #188]	; (80020ec <TIM_Base_SetConfig+0x13c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d017      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a2e      	ldr	r2, [pc, #184]	; (80020f0 <TIM_Base_SetConfig+0x140>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d013      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a2d      	ldr	r2, [pc, #180]	; (80020f4 <TIM_Base_SetConfig+0x144>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d00f      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a2c      	ldr	r2, [pc, #176]	; (80020f8 <TIM_Base_SetConfig+0x148>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d00b      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a2b      	ldr	r2, [pc, #172]	; (80020fc <TIM_Base_SetConfig+0x14c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d007      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a2a      	ldr	r2, [pc, #168]	; (8002100 <TIM_Base_SetConfig+0x150>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d003      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a29      	ldr	r2, [pc, #164]	; (8002104 <TIM_Base_SetConfig+0x154>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d108      	bne.n	8002074 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002068:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	4313      	orrs	r3, r2
 8002072:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	4313      	orrs	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a10      	ldr	r2, [pc, #64]	; (80020dc <TIM_Base_SetConfig+0x12c>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d003      	beq.n	80020a8 <TIM_Base_SetConfig+0xf8>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a12      	ldr	r2, [pc, #72]	; (80020ec <TIM_Base_SetConfig+0x13c>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d103      	bne.n	80020b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	691a      	ldr	r2, [r3, #16]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d105      	bne.n	80020ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	f023 0201 	bic.w	r2, r3, #1
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	611a      	str	r2, [r3, #16]
  }
}
 80020ce:	bf00      	nop
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40010000 	.word	0x40010000
 80020e0:	40000400 	.word	0x40000400
 80020e4:	40000800 	.word	0x40000800
 80020e8:	40000c00 	.word	0x40000c00
 80020ec:	40010400 	.word	0x40010400
 80020f0:	40014000 	.word	0x40014000
 80020f4:	40014400 	.word	0x40014400
 80020f8:	40014800 	.word	0x40014800
 80020fc:	40001800 	.word	0x40001800
 8002100:	40001c00 	.word	0x40001c00
 8002104:	40002000 	.word	0x40002000

08002108 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <__NVIC_SetPriority>:
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	6039      	str	r1, [r7, #0]
 800213a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002140:	2b00      	cmp	r3, #0
 8002142:	db0a      	blt.n	800215a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	b2da      	uxtb	r2, r3
 8002148:	490c      	ldr	r1, [pc, #48]	; (800217c <__NVIC_SetPriority+0x4c>)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	0112      	lsls	r2, r2, #4
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	440b      	add	r3, r1
 8002154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002158:	e00a      	b.n	8002170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4908      	ldr	r1, [pc, #32]	; (8002180 <__NVIC_SetPriority+0x50>)
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	3b04      	subs	r3, #4
 8002168:	0112      	lsls	r2, r2, #4
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	440b      	add	r3, r1
 800216e:	761a      	strb	r2, [r3, #24]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000e100 	.word	0xe000e100
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002188:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <SysTick_Handler+0x1c>)
 800218a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800218c:	f002 f87a 	bl	8004284 <xTaskGetSchedulerState>
 8002190:	4603      	mov	r3, r0
 8002192:	2b01      	cmp	r3, #1
 8002194:	d001      	beq.n	800219a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002196:	f002 ff5f 	bl	8005058 <xPortSysTickHandler>
  }
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	e000e010 	.word	0xe000e010

080021a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80021a8:	2100      	movs	r1, #0
 80021aa:	f06f 0004 	mvn.w	r0, #4
 80021ae:	f7ff ffbf 	bl	8002130 <__NVIC_SetPriority>
#endif
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021be:	f3ef 8305 	mrs	r3, IPSR
 80021c2:	603b      	str	r3, [r7, #0]
  return(result);
 80021c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80021ca:	f06f 0305 	mvn.w	r3, #5
 80021ce:	607b      	str	r3, [r7, #4]
 80021d0:	e00c      	b.n	80021ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80021d2:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <osKernelInitialize+0x44>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d105      	bne.n	80021e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80021da:	4b08      	ldr	r3, [pc, #32]	; (80021fc <osKernelInitialize+0x44>)
 80021dc:	2201      	movs	r2, #1
 80021de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	607b      	str	r3, [r7, #4]
 80021e4:	e002      	b.n	80021ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80021e6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80021ec:	687b      	ldr	r3, [r7, #4]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	200000e4 	.word	0x200000e4

08002200 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002206:	f3ef 8305 	mrs	r3, IPSR
 800220a:	603b      	str	r3, [r7, #0]
  return(result);
 800220c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002212:	f06f 0305 	mvn.w	r3, #5
 8002216:	607b      	str	r3, [r7, #4]
 8002218:	e010      	b.n	800223c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800221a:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <osKernelStart+0x48>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d109      	bne.n	8002236 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002222:	f7ff ffbf 	bl	80021a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002226:	4b08      	ldr	r3, [pc, #32]	; (8002248 <osKernelStart+0x48>)
 8002228:	2202      	movs	r2, #2
 800222a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800222c:	f001 fbbe 	bl	80039ac <vTaskStartScheduler>
      stat = osOK;
 8002230:	2300      	movs	r3, #0
 8002232:	607b      	str	r3, [r7, #4]
 8002234:	e002      	b.n	800223c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002236:	f04f 33ff 	mov.w	r3, #4294967295
 800223a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800223c:	687b      	ldr	r3, [r7, #4]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	200000e4 	.word	0x200000e4

0800224c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800224c:	b580      	push	{r7, lr}
 800224e:	b08e      	sub	sp, #56	; 0x38
 8002250:	af04      	add	r7, sp, #16
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002258:	2300      	movs	r3, #0
 800225a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800225c:	f3ef 8305 	mrs	r3, IPSR
 8002260:	617b      	str	r3, [r7, #20]
  return(result);
 8002262:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002264:	2b00      	cmp	r3, #0
 8002266:	d17e      	bne.n	8002366 <osThreadNew+0x11a>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d07b      	beq.n	8002366 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800226e:	2380      	movs	r3, #128	; 0x80
 8002270:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002272:	2318      	movs	r3, #24
 8002274:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002276:	2300      	movs	r3, #0
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800227a:	f04f 33ff 	mov.w	r3, #4294967295
 800227e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d045      	beq.n	8002312 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d002      	beq.n	8002294 <osThreadNew+0x48>
        name = attr->name;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d002      	beq.n	80022a2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d008      	beq.n	80022ba <osThreadNew+0x6e>
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	2b38      	cmp	r3, #56	; 0x38
 80022ac:	d805      	bhi.n	80022ba <osThreadNew+0x6e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <osThreadNew+0x72>
        return (NULL);
 80022ba:	2300      	movs	r3, #0
 80022bc:	e054      	b.n	8002368 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	089b      	lsrs	r3, r3, #2
 80022cc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00e      	beq.n	80022f4 <osThreadNew+0xa8>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	2ba7      	cmp	r3, #167	; 0xa7
 80022dc:	d90a      	bls.n	80022f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d006      	beq.n	80022f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d002      	beq.n	80022f4 <osThreadNew+0xa8>
        mem = 1;
 80022ee:	2301      	movs	r3, #1
 80022f0:	61bb      	str	r3, [r7, #24]
 80022f2:	e010      	b.n	8002316 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10c      	bne.n	8002316 <osThreadNew+0xca>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d108      	bne.n	8002316 <osThreadNew+0xca>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d104      	bne.n	8002316 <osThreadNew+0xca>
          mem = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	61bb      	str	r3, [r7, #24]
 8002310:	e001      	b.n	8002316 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002312:	2300      	movs	r3, #0
 8002314:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d110      	bne.n	800233e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002324:	9202      	str	r2, [sp, #8]
 8002326:	9301      	str	r3, [sp, #4]
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	6a3a      	ldr	r2, [r7, #32]
 8002330:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f001 f94e 	bl	80035d4 <xTaskCreateStatic>
 8002338:	4603      	mov	r3, r0
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	e013      	b.n	8002366 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d110      	bne.n	8002366 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	b29a      	uxth	r2, r3
 8002348:	f107 0310 	add.w	r3, r7, #16
 800234c:	9301      	str	r3, [sp, #4]
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f001 f999 	bl	800368e <xTaskCreate>
 800235c:	4603      	mov	r3, r0
 800235e:	2b01      	cmp	r3, #1
 8002360:	d001      	beq.n	8002366 <osThreadNew+0x11a>
            hTask = NULL;
 8002362:	2300      	movs	r3, #0
 8002364:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002366:	693b      	ldr	r3, [r7, #16]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3728      	adds	r7, #40	; 0x28
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002376:	f3ef 8305 	mrs	r3, IPSR
 800237a:	603b      	str	r3, [r7, #0]
  return(result);
 800237c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <osThreadYield+0x1a>
    stat = osErrorISR;
 8002382:	f06f 0305 	mvn.w	r3, #5
 8002386:	607b      	str	r3, [r7, #4]
 8002388:	e009      	b.n	800239e <osThreadYield+0x2e>
  } else {
    stat = osOK;
 800238a:	2300      	movs	r3, #0
 800238c:	607b      	str	r3, [r7, #4]
    taskYIELD();
 800238e:	4b07      	ldr	r3, [pc, #28]	; (80023ac <osThreadYield+0x3c>)
 8002390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	f3bf 8f4f 	dsb	sy
 800239a:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800239e:	687b      	ldr	r3, [r7, #4]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	e000ed04 	.word	0xe000ed04

080023b0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023b8:	f3ef 8305 	mrs	r3, IPSR
 80023bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80023be:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <osDelay+0x1c>
    stat = osErrorISR;
 80023c4:	f06f 0305 	mvn.w	r3, #5
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	e007      	b.n	80023dc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d002      	beq.n	80023dc <osDelay+0x2c>
      vTaskDelay(ticks);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f001 fab4 	bl	8003944 <vTaskDelay>
    }
  }

  return (stat);
 80023dc:	68fb      	ldr	r3, [r7, #12]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b088      	sub	sp, #32
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023f2:	f3ef 8305 	mrs	r3, IPSR
 80023f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80023f8:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d174      	bne.n	80024e8 <osMutexNew+0x102>
    if (attr != NULL) {
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <osMutexNew+0x26>
      type = attr->attr_bits;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	61bb      	str	r3, [r7, #24]
 800240a:	e001      	b.n	8002410 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d002      	beq.n	8002420 <osMutexNew+0x3a>
      rmtx = 1U;
 800241a:	2301      	movs	r3, #1
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	e001      	b.n	8002424 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d15c      	bne.n	80024e8 <osMutexNew+0x102>
      mem = -1;
 800242e:	f04f 33ff 	mov.w	r3, #4294967295
 8002432:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d015      	beq.n	8002466 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d006      	beq.n	8002450 <osMutexNew+0x6a>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	2b4f      	cmp	r3, #79	; 0x4f
 8002448:	d902      	bls.n	8002450 <osMutexNew+0x6a>
          mem = 1;
 800244a:	2301      	movs	r3, #1
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	e00c      	b.n	800246a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d108      	bne.n	800246a <osMutexNew+0x84>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d104      	bne.n	800246a <osMutexNew+0x84>
            mem = 0;
 8002460:	2300      	movs	r3, #0
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	e001      	b.n	800246a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d112      	bne.n	8002496 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d007      	beq.n	8002486 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	4619      	mov	r1, r3
 800247c:	2004      	movs	r0, #4
 800247e:	f000 fb18 	bl	8002ab2 <xQueueCreateMutexStatic>
 8002482:	61f8      	str	r0, [r7, #28]
 8002484:	e016      	b.n	80024b4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	4619      	mov	r1, r3
 800248c:	2001      	movs	r0, #1
 800248e:	f000 fb10 	bl	8002ab2 <xQueueCreateMutexStatic>
 8002492:	61f8      	str	r0, [r7, #28]
 8002494:	e00e      	b.n	80024b4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10b      	bne.n	80024b4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d004      	beq.n	80024ac <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80024a2:	2004      	movs	r0, #4
 80024a4:	f000 faed 	bl	8002a82 <xQueueCreateMutex>
 80024a8:	61f8      	str	r0, [r7, #28]
 80024aa:	e003      	b.n	80024b4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80024ac:	2001      	movs	r0, #1
 80024ae:	f000 fae8 	bl	8002a82 <xQueueCreateMutex>
 80024b2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00c      	beq.n	80024d4 <osMutexNew+0xee>
        if (attr != NULL) {
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <osMutexNew+0xe2>
          name = attr->name;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	e001      	b.n	80024cc <osMutexNew+0xe6>
        } else {
          name = NULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80024cc:	68f9      	ldr	r1, [r7, #12]
 80024ce:	69f8      	ldr	r0, [r7, #28]
 80024d0:	f001 f822 	bl	8003518 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d006      	beq.n	80024e8 <osMutexNew+0x102>
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d003      	beq.n	80024e8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80024e8:	69fb      	ldr	r3, [r7, #28]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3720      	adds	r7, #32
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b086      	sub	sp, #24
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f023 0301 	bic.w	r3, r3, #1
 8002502:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002510:	f3ef 8305 	mrs	r3, IPSR
 8002514:	60bb      	str	r3, [r7, #8]
  return(result);
 8002516:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800251c:	f06f 0305 	mvn.w	r3, #5
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	e02c      	b.n	800257e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d103      	bne.n	8002532 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800252a:	f06f 0303 	mvn.w	r3, #3
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	e025      	b.n	800257e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d011      	beq.n	800255c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8002538:	6839      	ldr	r1, [r7, #0]
 800253a:	6938      	ldr	r0, [r7, #16]
 800253c:	f000 fb08 	bl	8002b50 <xQueueTakeMutexRecursive>
 8002540:	4603      	mov	r3, r0
 8002542:	2b01      	cmp	r3, #1
 8002544:	d01b      	beq.n	800257e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800254c:	f06f 0301 	mvn.w	r3, #1
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	e014      	b.n	800257e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8002554:	f06f 0302 	mvn.w	r3, #2
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	e010      	b.n	800257e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800255c:	6839      	ldr	r1, [r7, #0]
 800255e:	6938      	ldr	r0, [r7, #16]
 8002560:	f000 fda6 	bl	80030b0 <xQueueSemaphoreTake>
 8002564:	4603      	mov	r3, r0
 8002566:	2b01      	cmp	r3, #1
 8002568:	d009      	beq.n	800257e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8002570:	f06f 0301 	mvn.w	r3, #1
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	e002      	b.n	800257e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8002578:	f06f 0302 	mvn.w	r3, #2
 800257c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800257e:	697b      	ldr	r3, [r7, #20]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f023 0301 	bic.w	r3, r3, #1
 8002596:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025a4:	f3ef 8305 	mrs	r3, IPSR
 80025a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80025aa:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <osMutexRelease+0x30>
    stat = osErrorISR;
 80025b0:	f06f 0305 	mvn.w	r3, #5
 80025b4:	617b      	str	r3, [r7, #20]
 80025b6:	e01f      	b.n	80025f8 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d103      	bne.n	80025c6 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80025be:	f06f 0303 	mvn.w	r3, #3
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	e018      	b.n	80025f8 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d009      	beq.n	80025e0 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80025cc:	6938      	ldr	r0, [r7, #16]
 80025ce:	f000 fa8b 	bl	8002ae8 <xQueueGiveMutexRecursive>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d00f      	beq.n	80025f8 <osMutexRelease+0x70>
        stat = osErrorResource;
 80025d8:	f06f 0302 	mvn.w	r3, #2
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	e00b      	b.n	80025f8 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80025e0:	2300      	movs	r3, #0
 80025e2:	2200      	movs	r2, #0
 80025e4:	2100      	movs	r1, #0
 80025e6:	6938      	ldr	r0, [r7, #16]
 80025e8:	f000 fae8 	bl	8002bbc <xQueueGenericSend>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d002      	beq.n	80025f8 <osMutexRelease+0x70>
        stat = osErrorResource;
 80025f2:	f06f 0302 	mvn.w	r3, #2
 80025f6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80025f8:	697b      	ldr	r3, [r7, #20]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4a07      	ldr	r2, [pc, #28]	; (8002630 <vApplicationGetIdleTaskMemory+0x2c>)
 8002614:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	4a06      	ldr	r2, [pc, #24]	; (8002634 <vApplicationGetIdleTaskMemory+0x30>)
 800261a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2280      	movs	r2, #128	; 0x80
 8002620:	601a      	str	r2, [r3, #0]
}
 8002622:	bf00      	nop
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	200000e8 	.word	0x200000e8
 8002634:	20000190 	.word	0x20000190

08002638 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4a07      	ldr	r2, [pc, #28]	; (8002664 <vApplicationGetTimerTaskMemory+0x2c>)
 8002648:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	4a06      	ldr	r2, [pc, #24]	; (8002668 <vApplicationGetTimerTaskMemory+0x30>)
 800264e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002656:	601a      	str	r2, [r3, #0]
}
 8002658:	bf00      	nop
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	20000390 	.word	0x20000390
 8002668:	20000438 	.word	0x20000438

0800266c <vListInitialise>:
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f103 0208 	add.w	r2, r3, #8
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f04f 32ff 	mov.w	r2, #4294967295
 8002684:	609a      	str	r2, [r3, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f103 0208 	add.w	r2, r3, #8
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	60da      	str	r2, [r3, #12]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f103 0208 	add.w	r2, r3, #8
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	611a      	str	r2, [r3, #16]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <vListInitialiseItem>:
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	611a      	str	r2, [r3, #16]
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <vListInsertEnd>:
 80026c6:	b480      	push	{r7}
 80026c8:	b085      	sub	sp, #20
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
 80026ce:	6039      	str	r1, [r7, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	605a      	str	r2, [r3, #4]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	605a      	str	r2, [r3, #4]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	609a      	str	r2, [r3, #8]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	611a      	str	r2, [r3, #16]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	bf00      	nop
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <vListInsert>:
 800270e:	b480      	push	{r7}
 8002710:	b085      	sub	sp, #20
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	6039      	str	r1, [r7, #0]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002724:	d103      	bne.n	800272e <vListInsert+0x20>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	e00c      	b.n	8002748 <vListInsert+0x3a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	3308      	adds	r3, #8
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	e002      	b.n	800273c <vListInsert+0x2e>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	429a      	cmp	r2, r3
 8002746:	d2f6      	bcs.n	8002736 <vListInsert+0x28>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	605a      	str	r2, [r3, #4]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	609a      	str	r2, [r3, #8]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	605a      	str	r2, [r3, #4]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	611a      	str	r2, [r3, #16]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <uxListRemove>:
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6892      	ldr	r2, [r2, #8]
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6852      	ldr	r2, [r2, #4]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d103      	bne.n	80027b4 <uxListRemove+0x34>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	605a      	str	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	611a      	str	r2, [r3, #16]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	1e5a      	subs	r2, r3, #1
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <xQueueGenericReset>:
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10a      	bne.n	80027fe <xQueueGenericReset+0x2a>
 80027e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ec:	f383 8811 	msr	BASEPRI, r3
 80027f0:	f3bf 8f6f 	isb	sy
 80027f4:	f3bf 8f4f 	dsb	sy
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	bf00      	nop
 80027fc:	e7fe      	b.n	80027fc <xQueueGenericReset+0x28>
 80027fe:	f002 fb99 	bl	8004f34 <vPortEnterCritical>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280a:	68f9      	ldr	r1, [r7, #12]
 800280c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800280e:	fb01 f303 	mul.w	r3, r1, r3
 8002812:	441a      	add	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	639a      	str	r2, [r3, #56]	; 0x38
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282e:	3b01      	subs	r3, #1
 8002830:	68f9      	ldr	r1, [r7, #12]
 8002832:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002834:	fb01 f303 	mul.w	r3, r1, r3
 8002838:	441a      	add	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	60da      	str	r2, [r3, #12]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	22ff      	movs	r2, #255	; 0xff
 8002842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	22ff      	movs	r2, #255	; 0xff
 800284a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d114      	bne.n	800287e <xQueueGenericReset+0xaa>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d01a      	beq.n	8002892 <xQueueGenericReset+0xbe>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	3310      	adds	r3, #16
 8002860:	4618      	mov	r0, r3
 8002862:	f001 fb3d 	bl	8003ee0 <xTaskRemoveFromEventList>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d012      	beq.n	8002892 <xQueueGenericReset+0xbe>
 800286c:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <xQueueGenericReset+0xcc>)
 800286e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	f3bf 8f4f 	dsb	sy
 8002878:	f3bf 8f6f 	isb	sy
 800287c:	e009      	b.n	8002892 <xQueueGenericReset+0xbe>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	3310      	adds	r3, #16
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff fef2 	bl	800266c <vListInitialise>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	3324      	adds	r3, #36	; 0x24
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff feed 	bl	800266c <vListInitialise>
 8002892:	f002 fb7f 	bl	8004f94 <vPortExitCritical>
 8002896:	2301      	movs	r3, #1
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	e000ed04 	.word	0xe000ed04

080028a4 <xQueueGenericCreateStatic>:
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b08e      	sub	sp, #56	; 0x38
 80028a8:	af02      	add	r7, sp, #8
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
 80028b0:	603b      	str	r3, [r7, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10a      	bne.n	80028ce <xQueueGenericCreateStatic+0x2a>
 80028b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028bc:	f383 8811 	msr	BASEPRI, r3
 80028c0:	f3bf 8f6f 	isb	sy
 80028c4:	f3bf 8f4f 	dsb	sy
 80028c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ca:	bf00      	nop
 80028cc:	e7fe      	b.n	80028cc <xQueueGenericCreateStatic+0x28>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10a      	bne.n	80028ea <xQueueGenericCreateStatic+0x46>
 80028d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d8:	f383 8811 	msr	BASEPRI, r3
 80028dc:	f3bf 8f6f 	isb	sy
 80028e0:	f3bf 8f4f 	dsb	sy
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
 80028e6:	bf00      	nop
 80028e8:	e7fe      	b.n	80028e8 <xQueueGenericCreateStatic+0x44>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d002      	beq.n	80028f6 <xQueueGenericCreateStatic+0x52>
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <xQueueGenericCreateStatic+0x56>
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <xQueueGenericCreateStatic+0x58>
 80028fa:	2300      	movs	r3, #0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10a      	bne.n	8002916 <xQueueGenericCreateStatic+0x72>
 8002900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002904:	f383 8811 	msr	BASEPRI, r3
 8002908:	f3bf 8f6f 	isb	sy
 800290c:	f3bf 8f4f 	dsb	sy
 8002910:	623b      	str	r3, [r7, #32]
 8002912:	bf00      	nop
 8002914:	e7fe      	b.n	8002914 <xQueueGenericCreateStatic+0x70>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d102      	bne.n	8002922 <xQueueGenericCreateStatic+0x7e>
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <xQueueGenericCreateStatic+0x82>
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <xQueueGenericCreateStatic+0x84>
 8002926:	2300      	movs	r3, #0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10a      	bne.n	8002942 <xQueueGenericCreateStatic+0x9e>
 800292c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002930:	f383 8811 	msr	BASEPRI, r3
 8002934:	f3bf 8f6f 	isb	sy
 8002938:	f3bf 8f4f 	dsb	sy
 800293c:	61fb      	str	r3, [r7, #28]
 800293e:	bf00      	nop
 8002940:	e7fe      	b.n	8002940 <xQueueGenericCreateStatic+0x9c>
 8002942:	2350      	movs	r3, #80	; 0x50
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2b50      	cmp	r3, #80	; 0x50
 800294a:	d00a      	beq.n	8002962 <xQueueGenericCreateStatic+0xbe>
 800294c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002950:	f383 8811 	msr	BASEPRI, r3
 8002954:	f3bf 8f6f 	isb	sy
 8002958:	f3bf 8f4f 	dsb	sy
 800295c:	61bb      	str	r3, [r7, #24]
 800295e:	bf00      	nop
 8002960:	e7fe      	b.n	8002960 <xQueueGenericCreateStatic+0xbc>
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00d      	beq.n	800298a <xQueueGenericCreateStatic+0xe6>
 800296e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002976:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800297a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	4613      	mov	r3, r2
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	68b9      	ldr	r1, [r7, #8]
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 f83f 	bl	8002a08 <prvInitialiseNewQueue>
 800298a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298c:	4618      	mov	r0, r3
 800298e:	3730      	adds	r7, #48	; 0x30
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <xQueueGenericCreate>:
 8002994:	b580      	push	{r7, lr}
 8002996:	b08a      	sub	sp, #40	; 0x28
 8002998:	af02      	add	r7, sp, #8
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	4613      	mov	r3, r2
 80029a0:	71fb      	strb	r3, [r7, #7]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10a      	bne.n	80029be <xQueueGenericCreate+0x2a>
 80029a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ac:	f383 8811 	msr	BASEPRI, r3
 80029b0:	f3bf 8f6f 	isb	sy
 80029b4:	f3bf 8f4f 	dsb	sy
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	bf00      	nop
 80029bc:	e7fe      	b.n	80029bc <xQueueGenericCreate+0x28>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	fb02 f303 	mul.w	r3, r2, r3
 80029c6:	61fb      	str	r3, [r7, #28]
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	3350      	adds	r3, #80	; 0x50
 80029cc:	4618      	mov	r0, r3
 80029ce:	f002 fbd3 	bl	8005178 <pvPortMalloc>
 80029d2:	61b8      	str	r0, [r7, #24]
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d011      	beq.n	80029fe <xQueueGenericCreate+0x6a>
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	617b      	str	r3, [r7, #20]
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	3350      	adds	r3, #80	; 0x50
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80029ec:	79fa      	ldrb	r2, [r7, #7]
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	4613      	mov	r3, r2
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	68b9      	ldr	r1, [r7, #8]
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f000 f805 	bl	8002a08 <prvInitialiseNewQueue>
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	4618      	mov	r0, r3
 8002a02:	3720      	adds	r7, #32
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <prvInitialiseNewQueue>:
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
 8002a14:	70fb      	strb	r3, [r7, #3]
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d103      	bne.n	8002a24 <prvInitialiseNewQueue+0x1c>
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	e002      	b.n	8002a2a <prvInitialiseNewQueue+0x22>
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	641a      	str	r2, [r3, #64]	; 0x40
 8002a36:	2101      	movs	r1, #1
 8002a38:	69b8      	ldr	r0, [r7, #24]
 8002a3a:	f7ff fecb 	bl	80027d4 <xQueueGenericReset>
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	78fa      	ldrb	r2, [r7, #3]
 8002a42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8002a46:	bf00      	nop
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <prvInitialiseMutex>:
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00e      	beq.n	8002a7a <prvInitialiseMutex+0x2c>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	609a      	str	r2, [r3, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	2300      	movs	r3, #0
 8002a70:	2200      	movs	r2, #0
 8002a72:	2100      	movs	r1, #0
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f8a1 	bl	8002bbc <xQueueGenericSend>
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <xQueueCreateMutex>:
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b086      	sub	sp, #24
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	4603      	mov	r3, r0
 8002a8a:	71fb      	strb	r3, [r7, #7]
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	2300      	movs	r3, #0
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	79fb      	ldrb	r3, [r7, #7]
 8002a96:	461a      	mov	r2, r3
 8002a98:	6939      	ldr	r1, [r7, #16]
 8002a9a:	6978      	ldr	r0, [r7, #20]
 8002a9c:	f7ff ff7a 	bl	8002994 <xQueueGenericCreate>
 8002aa0:	60f8      	str	r0, [r7, #12]
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f7ff ffd3 	bl	8002a4e <prvInitialiseMutex>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <xQueueCreateMutexStatic>:
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b088      	sub	sp, #32
 8002ab6:	af02      	add	r7, sp, #8
 8002ab8:	4603      	mov	r3, r0
 8002aba:	6039      	str	r1, [r7, #0]
 8002abc:	71fb      	strb	r3, [r7, #7]
 8002abe:	2301      	movs	r3, #1
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2200      	movs	r2, #0
 8002ace:	6939      	ldr	r1, [r7, #16]
 8002ad0:	6978      	ldr	r0, [r7, #20]
 8002ad2:	f7ff fee7 	bl	80028a4 <xQueueGenericCreateStatic>
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f7ff ffb8 	bl	8002a4e <prvInitialiseMutex>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <xQueueGiveMutexRecursive>:
 8002ae8:	b590      	push	{r4, r7, lr}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10a      	bne.n	8002b10 <xQueueGiveMutexRecursive+0x28>
 8002afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afe:	f383 8811 	msr	BASEPRI, r3
 8002b02:	f3bf 8f6f 	isb	sy
 8002b06:	f3bf 8f4f 	dsb	sy
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	bf00      	nop
 8002b0e:	e7fe      	b.n	8002b0e <xQueueGiveMutexRecursive+0x26>
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	689c      	ldr	r4, [r3, #8]
 8002b14:	f001 fba6 	bl	8004264 <xTaskGetCurrentTaskHandle>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	429c      	cmp	r4, r3
 8002b1c:	d111      	bne.n	8002b42 <xQueueGiveMutexRecursive+0x5a>
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	1e5a      	subs	r2, r3, #1
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	60da      	str	r2, [r3, #12]
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d105      	bne.n	8002b3c <xQueueGiveMutexRecursive+0x54>
 8002b30:	2300      	movs	r3, #0
 8002b32:	2200      	movs	r2, #0
 8002b34:	2100      	movs	r1, #0
 8002b36:	6938      	ldr	r0, [r7, #16]
 8002b38:	f000 f840 	bl	8002bbc <xQueueGenericSend>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	e001      	b.n	8002b46 <xQueueGiveMutexRecursive+0x5e>
 8002b42:	2300      	movs	r3, #0
 8002b44:	617b      	str	r3, [r7, #20]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	371c      	adds	r7, #28
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd90      	pop	{r4, r7, pc}

08002b50 <xQueueTakeMutexRecursive>:
 8002b50:	b590      	push	{r4, r7, lr}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10a      	bne.n	8002b7a <xQueueTakeMutexRecursive+0x2a>
 8002b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b68:	f383 8811 	msr	BASEPRI, r3
 8002b6c:	f3bf 8f6f 	isb	sy
 8002b70:	f3bf 8f4f 	dsb	sy
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	bf00      	nop
 8002b78:	e7fe      	b.n	8002b78 <xQueueTakeMutexRecursive+0x28>
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	689c      	ldr	r4, [r3, #8]
 8002b7e:	f001 fb71 	bl	8004264 <xTaskGetCurrentTaskHandle>
 8002b82:	4603      	mov	r3, r0
 8002b84:	429c      	cmp	r4, r3
 8002b86:	d107      	bne.n	8002b98 <xQueueTakeMutexRecursive+0x48>
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	60da      	str	r2, [r3, #12]
 8002b92:	2301      	movs	r3, #1
 8002b94:	617b      	str	r3, [r7, #20]
 8002b96:	e00c      	b.n	8002bb2 <xQueueTakeMutexRecursive+0x62>
 8002b98:	6839      	ldr	r1, [r7, #0]
 8002b9a:	6938      	ldr	r0, [r7, #16]
 8002b9c:	f000 fa88 	bl	80030b0 <xQueueSemaphoreTake>
 8002ba0:	6178      	str	r0, [r7, #20]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d004      	beq.n	8002bb2 <xQueueTakeMutexRecursive+0x62>
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	60da      	str	r2, [r3, #12]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	371c      	adds	r7, #28
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd90      	pop	{r4, r7, pc}

08002bbc <xQueueGenericSend>:
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08e      	sub	sp, #56	; 0x38
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	603b      	str	r3, [r7, #0]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	633b      	str	r3, [r7, #48]	; 0x30
 8002bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10a      	bne.n	8002bee <xQueueGenericSend+0x32>
 8002bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bdc:	f383 8811 	msr	BASEPRI, r3
 8002be0:	f3bf 8f6f 	isb	sy
 8002be4:	f3bf 8f4f 	dsb	sy
 8002be8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bea:	bf00      	nop
 8002bec:	e7fe      	b.n	8002bec <xQueueGenericSend+0x30>
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d103      	bne.n	8002bfc <xQueueGenericSend+0x40>
 8002bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <xQueueGenericSend+0x44>
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e000      	b.n	8002c02 <xQueueGenericSend+0x46>
 8002c00:	2300      	movs	r3, #0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10a      	bne.n	8002c1c <xQueueGenericSend+0x60>
 8002c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0a:	f383 8811 	msr	BASEPRI, r3
 8002c0e:	f3bf 8f6f 	isb	sy
 8002c12:	f3bf 8f4f 	dsb	sy
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
 8002c18:	bf00      	nop
 8002c1a:	e7fe      	b.n	8002c1a <xQueueGenericSend+0x5e>
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d103      	bne.n	8002c2a <xQueueGenericSend+0x6e>
 8002c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d101      	bne.n	8002c2e <xQueueGenericSend+0x72>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e000      	b.n	8002c30 <xQueueGenericSend+0x74>
 8002c2e:	2300      	movs	r3, #0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10a      	bne.n	8002c4a <xQueueGenericSend+0x8e>
 8002c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c38:	f383 8811 	msr	BASEPRI, r3
 8002c3c:	f3bf 8f6f 	isb	sy
 8002c40:	f3bf 8f4f 	dsb	sy
 8002c44:	623b      	str	r3, [r7, #32]
 8002c46:	bf00      	nop
 8002c48:	e7fe      	b.n	8002c48 <xQueueGenericSend+0x8c>
 8002c4a:	f001 fb1b 	bl	8004284 <xTaskGetSchedulerState>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d102      	bne.n	8002c5a <xQueueGenericSend+0x9e>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <xQueueGenericSend+0xa2>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <xQueueGenericSend+0xa4>
 8002c5e:	2300      	movs	r3, #0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10a      	bne.n	8002c7a <xQueueGenericSend+0xbe>
 8002c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c68:	f383 8811 	msr	BASEPRI, r3
 8002c6c:	f3bf 8f6f 	isb	sy
 8002c70:	f3bf 8f4f 	dsb	sy
 8002c74:	61fb      	str	r3, [r7, #28]
 8002c76:	bf00      	nop
 8002c78:	e7fe      	b.n	8002c78 <xQueueGenericSend+0xbc>
 8002c7a:	f002 f95b 	bl	8004f34 <vPortEnterCritical>
 8002c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d302      	bcc.n	8002c90 <xQueueGenericSend+0xd4>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d129      	bne.n	8002ce4 <xQueueGenericSend+0x128>
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	68b9      	ldr	r1, [r7, #8]
 8002c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c96:	f000 fb2f 	bl	80032f8 <prvCopyDataToQueue>
 8002c9a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d010      	beq.n	8002cc6 <xQueueGenericSend+0x10a>
 8002ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca6:	3324      	adds	r3, #36	; 0x24
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f001 f919 	bl	8003ee0 <xTaskRemoveFromEventList>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d013      	beq.n	8002cdc <xQueueGenericSend+0x120>
 8002cb4:	4b3f      	ldr	r3, [pc, #252]	; (8002db4 <xQueueGenericSend+0x1f8>)
 8002cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	f3bf 8f4f 	dsb	sy
 8002cc0:	f3bf 8f6f 	isb	sy
 8002cc4:	e00a      	b.n	8002cdc <xQueueGenericSend+0x120>
 8002cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d007      	beq.n	8002cdc <xQueueGenericSend+0x120>
 8002ccc:	4b39      	ldr	r3, [pc, #228]	; (8002db4 <xQueueGenericSend+0x1f8>)
 8002cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	f3bf 8f4f 	dsb	sy
 8002cd8:	f3bf 8f6f 	isb	sy
 8002cdc:	f002 f95a 	bl	8004f94 <vPortExitCritical>
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e063      	b.n	8002dac <xQueueGenericSend+0x1f0>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d103      	bne.n	8002cf2 <xQueueGenericSend+0x136>
 8002cea:	f002 f953 	bl	8004f94 <vPortExitCritical>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	e05c      	b.n	8002dac <xQueueGenericSend+0x1f0>
 8002cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d106      	bne.n	8002d06 <xQueueGenericSend+0x14a>
 8002cf8:	f107 0314 	add.w	r3, r7, #20
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f001 f953 	bl	8003fa8 <vTaskInternalSetTimeOutState>
 8002d02:	2301      	movs	r3, #1
 8002d04:	637b      	str	r3, [r7, #52]	; 0x34
 8002d06:	f002 f945 	bl	8004f94 <vPortExitCritical>
 8002d0a:	f000 febf 	bl	8003a8c <vTaskSuspendAll>
 8002d0e:	f002 f911 	bl	8004f34 <vPortEnterCritical>
 8002d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d18:	b25b      	sxtb	r3, r3
 8002d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1e:	d103      	bne.n	8002d28 <xQueueGenericSend+0x16c>
 8002d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d2e:	b25b      	sxtb	r3, r3
 8002d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d34:	d103      	bne.n	8002d3e <xQueueGenericSend+0x182>
 8002d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d3e:	f002 f929 	bl	8004f94 <vPortExitCritical>
 8002d42:	1d3a      	adds	r2, r7, #4
 8002d44:	f107 0314 	add.w	r3, r7, #20
 8002d48:	4611      	mov	r1, r2
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f001 f942 	bl	8003fd4 <xTaskCheckForTimeOut>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d124      	bne.n	8002da0 <xQueueGenericSend+0x1e4>
 8002d56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d58:	f000 fbc6 	bl	80034e8 <prvIsQueueFull>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d018      	beq.n	8002d94 <xQueueGenericSend+0x1d8>
 8002d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d64:	3310      	adds	r3, #16
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	4611      	mov	r1, r2
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f001 f868 	bl	8003e40 <vTaskPlaceOnEventList>
 8002d70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d72:	f000 fb51 	bl	8003418 <prvUnlockQueue>
 8002d76:	f000 fe97 	bl	8003aa8 <xTaskResumeAll>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f47f af7c 	bne.w	8002c7a <xQueueGenericSend+0xbe>
 8002d82:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <xQueueGenericSend+0x1f8>)
 8002d84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	f3bf 8f4f 	dsb	sy
 8002d8e:	f3bf 8f6f 	isb	sy
 8002d92:	e772      	b.n	8002c7a <xQueueGenericSend+0xbe>
 8002d94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d96:	f000 fb3f 	bl	8003418 <prvUnlockQueue>
 8002d9a:	f000 fe85 	bl	8003aa8 <xTaskResumeAll>
 8002d9e:	e76c      	b.n	8002c7a <xQueueGenericSend+0xbe>
 8002da0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002da2:	f000 fb39 	bl	8003418 <prvUnlockQueue>
 8002da6:	f000 fe7f 	bl	8003aa8 <xTaskResumeAll>
 8002daa:	2300      	movs	r3, #0
 8002dac:	4618      	mov	r0, r3
 8002dae:	3738      	adds	r7, #56	; 0x38
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	e000ed04 	.word	0xe000ed04

08002db8 <xQueueGenericSendFromISR>:
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b090      	sub	sp, #64	; 0x40
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
 8002dc4:	603b      	str	r3, [r7, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10a      	bne.n	8002de6 <xQueueGenericSendFromISR+0x2e>
 8002dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd4:	f383 8811 	msr	BASEPRI, r3
 8002dd8:	f3bf 8f6f 	isb	sy
 8002ddc:	f3bf 8f4f 	dsb	sy
 8002de0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002de2:	bf00      	nop
 8002de4:	e7fe      	b.n	8002de4 <xQueueGenericSendFromISR+0x2c>
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d103      	bne.n	8002df4 <xQueueGenericSendFromISR+0x3c>
 8002dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <xQueueGenericSendFromISR+0x40>
 8002df4:	2301      	movs	r3, #1
 8002df6:	e000      	b.n	8002dfa <xQueueGenericSendFromISR+0x42>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10a      	bne.n	8002e14 <xQueueGenericSendFromISR+0x5c>
 8002dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e02:	f383 8811 	msr	BASEPRI, r3
 8002e06:	f3bf 8f6f 	isb	sy
 8002e0a:	f3bf 8f4f 	dsb	sy
 8002e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e10:	bf00      	nop
 8002e12:	e7fe      	b.n	8002e12 <xQueueGenericSendFromISR+0x5a>
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d103      	bne.n	8002e22 <xQueueGenericSendFromISR+0x6a>
 8002e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d101      	bne.n	8002e26 <xQueueGenericSendFromISR+0x6e>
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <xQueueGenericSendFromISR+0x70>
 8002e26:	2300      	movs	r3, #0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10a      	bne.n	8002e42 <xQueueGenericSendFromISR+0x8a>
 8002e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e30:	f383 8811 	msr	BASEPRI, r3
 8002e34:	f3bf 8f6f 	isb	sy
 8002e38:	f3bf 8f4f 	dsb	sy
 8002e3c:	623b      	str	r3, [r7, #32]
 8002e3e:	bf00      	nop
 8002e40:	e7fe      	b.n	8002e40 <xQueueGenericSendFromISR+0x88>
 8002e42:	f002 f959 	bl	80050f8 <vPortValidateInterruptPriority>
 8002e46:	f3ef 8211 	mrs	r2, BASEPRI
 8002e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4e:	f383 8811 	msr	BASEPRI, r3
 8002e52:	f3bf 8f6f 	isb	sy
 8002e56:	f3bf 8f4f 	dsb	sy
 8002e5a:	61fa      	str	r2, [r7, #28]
 8002e5c:	61bb      	str	r3, [r7, #24]
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	637b      	str	r3, [r7, #52]	; 0x34
 8002e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d302      	bcc.n	8002e74 <xQueueGenericSendFromISR+0xbc>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d12f      	bne.n	8002ed4 <xQueueGenericSendFromISR+0x11c>
 8002e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	68b9      	ldr	r1, [r7, #8]
 8002e88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002e8a:	f000 fa35 	bl	80032f8 <prvCopyDataToQueue>
 8002e8e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e96:	d112      	bne.n	8002ebe <xQueueGenericSendFromISR+0x106>
 8002e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d016      	beq.n	8002ece <xQueueGenericSendFromISR+0x116>
 8002ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea2:	3324      	adds	r3, #36	; 0x24
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f001 f81b 	bl	8003ee0 <xTaskRemoveFromEventList>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00e      	beq.n	8002ece <xQueueGenericSendFromISR+0x116>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00b      	beq.n	8002ece <xQueueGenericSendFromISR+0x116>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	e007      	b.n	8002ece <xQueueGenericSendFromISR+0x116>
 8002ebe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	b25a      	sxtb	r2, r3
 8002ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ece:	2301      	movs	r3, #1
 8002ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ed2:	e001      	b.n	8002ed8 <xQueueGenericSendFromISR+0x120>
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	f383 8811 	msr	BASEPRI, r3
 8002ee2:	bf00      	nop
 8002ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3740      	adds	r7, #64	; 0x40
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <xQueueReceive>:
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08c      	sub	sp, #48	; 0x30
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
 8002efc:	2300      	movs	r3, #0
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10a      	bne.n	8002f20 <xQueueReceive+0x30>
 8002f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0e:	f383 8811 	msr	BASEPRI, r3
 8002f12:	f3bf 8f6f 	isb	sy
 8002f16:	f3bf 8f4f 	dsb	sy
 8002f1a:	623b      	str	r3, [r7, #32]
 8002f1c:	bf00      	nop
 8002f1e:	e7fe      	b.n	8002f1e <xQueueReceive+0x2e>
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d103      	bne.n	8002f2e <xQueueReceive+0x3e>
 8002f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <xQueueReceive+0x42>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <xQueueReceive+0x44>
 8002f32:	2300      	movs	r3, #0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10a      	bne.n	8002f4e <xQueueReceive+0x5e>
 8002f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3c:	f383 8811 	msr	BASEPRI, r3
 8002f40:	f3bf 8f6f 	isb	sy
 8002f44:	f3bf 8f4f 	dsb	sy
 8002f48:	61fb      	str	r3, [r7, #28]
 8002f4a:	bf00      	nop
 8002f4c:	e7fe      	b.n	8002f4c <xQueueReceive+0x5c>
 8002f4e:	f001 f999 	bl	8004284 <xTaskGetSchedulerState>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d102      	bne.n	8002f5e <xQueueReceive+0x6e>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <xQueueReceive+0x72>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <xQueueReceive+0x74>
 8002f62:	2300      	movs	r3, #0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10a      	bne.n	8002f7e <xQueueReceive+0x8e>
 8002f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6c:	f383 8811 	msr	BASEPRI, r3
 8002f70:	f3bf 8f6f 	isb	sy
 8002f74:	f3bf 8f4f 	dsb	sy
 8002f78:	61bb      	str	r3, [r7, #24]
 8002f7a:	bf00      	nop
 8002f7c:	e7fe      	b.n	8002f7c <xQueueReceive+0x8c>
 8002f7e:	f001 ffd9 	bl	8004f34 <vPortEnterCritical>
 8002f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f86:	627b      	str	r3, [r7, #36]	; 0x24
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d01f      	beq.n	8002fce <xQueueReceive+0xde>
 8002f8e:	68b9      	ldr	r1, [r7, #8]
 8002f90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f92:	f000 fa1b 	bl	80033cc <prvCopyDataFromQueue>
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	1e5a      	subs	r2, r3, #1
 8002f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9c:	639a      	str	r2, [r3, #56]	; 0x38
 8002f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00f      	beq.n	8002fc6 <xQueueReceive+0xd6>
 8002fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa8:	3310      	adds	r3, #16
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 ff98 	bl	8003ee0 <xTaskRemoveFromEventList>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d007      	beq.n	8002fc6 <xQueueReceive+0xd6>
 8002fb6:	4b3d      	ldr	r3, [pc, #244]	; (80030ac <xQueueReceive+0x1bc>)
 8002fb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	f3bf 8f4f 	dsb	sy
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	f001 ffe5 	bl	8004f94 <vPortExitCritical>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e069      	b.n	80030a2 <xQueueReceive+0x1b2>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d103      	bne.n	8002fdc <xQueueReceive+0xec>
 8002fd4:	f001 ffde 	bl	8004f94 <vPortExitCritical>
 8002fd8:	2300      	movs	r3, #0
 8002fda:	e062      	b.n	80030a2 <xQueueReceive+0x1b2>
 8002fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d106      	bne.n	8002ff0 <xQueueReceive+0x100>
 8002fe2:	f107 0310 	add.w	r3, r7, #16
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 ffde 	bl	8003fa8 <vTaskInternalSetTimeOutState>
 8002fec:	2301      	movs	r3, #1
 8002fee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ff0:	f001 ffd0 	bl	8004f94 <vPortExitCritical>
 8002ff4:	f000 fd4a 	bl	8003a8c <vTaskSuspendAll>
 8002ff8:	f001 ff9c 	bl	8004f34 <vPortEnterCritical>
 8002ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003002:	b25b      	sxtb	r3, r3
 8003004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003008:	d103      	bne.n	8003012 <xQueueReceive+0x122>
 800300a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003014:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003018:	b25b      	sxtb	r3, r3
 800301a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301e:	d103      	bne.n	8003028 <xQueueReceive+0x138>
 8003020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003028:	f001 ffb4 	bl	8004f94 <vPortExitCritical>
 800302c:	1d3a      	adds	r2, r7, #4
 800302e:	f107 0310 	add.w	r3, r7, #16
 8003032:	4611      	mov	r1, r2
 8003034:	4618      	mov	r0, r3
 8003036:	f000 ffcd 	bl	8003fd4 <xTaskCheckForTimeOut>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d123      	bne.n	8003088 <xQueueReceive+0x198>
 8003040:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003042:	f000 fa3b 	bl	80034bc <prvIsQueueEmpty>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d017      	beq.n	800307c <xQueueReceive+0x18c>
 800304c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304e:	3324      	adds	r3, #36	; 0x24
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	4611      	mov	r1, r2
 8003054:	4618      	mov	r0, r3
 8003056:	f000 fef3 	bl	8003e40 <vTaskPlaceOnEventList>
 800305a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800305c:	f000 f9dc 	bl	8003418 <prvUnlockQueue>
 8003060:	f000 fd22 	bl	8003aa8 <xTaskResumeAll>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d189      	bne.n	8002f7e <xQueueReceive+0x8e>
 800306a:	4b10      	ldr	r3, [pc, #64]	; (80030ac <xQueueReceive+0x1bc>)
 800306c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	f3bf 8f4f 	dsb	sy
 8003076:	f3bf 8f6f 	isb	sy
 800307a:	e780      	b.n	8002f7e <xQueueReceive+0x8e>
 800307c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800307e:	f000 f9cb 	bl	8003418 <prvUnlockQueue>
 8003082:	f000 fd11 	bl	8003aa8 <xTaskResumeAll>
 8003086:	e77a      	b.n	8002f7e <xQueueReceive+0x8e>
 8003088:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800308a:	f000 f9c5 	bl	8003418 <prvUnlockQueue>
 800308e:	f000 fd0b 	bl	8003aa8 <xTaskResumeAll>
 8003092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003094:	f000 fa12 	bl	80034bc <prvIsQueueEmpty>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	f43f af6f 	beq.w	8002f7e <xQueueReceive+0x8e>
 80030a0:	2300      	movs	r3, #0
 80030a2:	4618      	mov	r0, r3
 80030a4:	3730      	adds	r7, #48	; 0x30
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	e000ed04 	.word	0xe000ed04

080030b0 <xQueueSemaphoreTake>:
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08e      	sub	sp, #56	; 0x38
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
 80030ba:	2300      	movs	r3, #0
 80030bc:	637b      	str	r3, [r7, #52]	; 0x34
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030c2:	2300      	movs	r3, #0
 80030c4:	633b      	str	r3, [r7, #48]	; 0x30
 80030c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10a      	bne.n	80030e2 <xQueueSemaphoreTake+0x32>
 80030cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d0:	f383 8811 	msr	BASEPRI, r3
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	f3bf 8f4f 	dsb	sy
 80030dc:	623b      	str	r3, [r7, #32]
 80030de:	bf00      	nop
 80030e0:	e7fe      	b.n	80030e0 <xQueueSemaphoreTake+0x30>
 80030e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <xQueueSemaphoreTake+0x50>
 80030ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ee:	f383 8811 	msr	BASEPRI, r3
 80030f2:	f3bf 8f6f 	isb	sy
 80030f6:	f3bf 8f4f 	dsb	sy
 80030fa:	61fb      	str	r3, [r7, #28]
 80030fc:	bf00      	nop
 80030fe:	e7fe      	b.n	80030fe <xQueueSemaphoreTake+0x4e>
 8003100:	f001 f8c0 	bl	8004284 <xTaskGetSchedulerState>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d102      	bne.n	8003110 <xQueueSemaphoreTake+0x60>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <xQueueSemaphoreTake+0x64>
 8003110:	2301      	movs	r3, #1
 8003112:	e000      	b.n	8003116 <xQueueSemaphoreTake+0x66>
 8003114:	2300      	movs	r3, #0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10a      	bne.n	8003130 <xQueueSemaphoreTake+0x80>
 800311a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311e:	f383 8811 	msr	BASEPRI, r3
 8003122:	f3bf 8f6f 	isb	sy
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	61bb      	str	r3, [r7, #24]
 800312c:	bf00      	nop
 800312e:	e7fe      	b.n	800312e <xQueueSemaphoreTake+0x7e>
 8003130:	f001 ff00 	bl	8004f34 <vPortEnterCritical>
 8003134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003138:	62bb      	str	r3, [r7, #40]	; 0x28
 800313a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313c:	2b00      	cmp	r3, #0
 800313e:	d024      	beq.n	800318a <xQueueSemaphoreTake+0xda>
 8003140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003142:	1e5a      	subs	r2, r3, #1
 8003144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003146:	639a      	str	r2, [r3, #56]	; 0x38
 8003148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d104      	bne.n	800315a <xQueueSemaphoreTake+0xaa>
 8003150:	f001 fa0e 	bl	8004570 <pvTaskIncrementMutexHeldCount>
 8003154:	4602      	mov	r2, r0
 8003156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003158:	609a      	str	r2, [r3, #8]
 800315a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00f      	beq.n	8003182 <xQueueSemaphoreTake+0xd2>
 8003162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003164:	3310      	adds	r3, #16
 8003166:	4618      	mov	r0, r3
 8003168:	f000 feba 	bl	8003ee0 <xTaskRemoveFromEventList>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d007      	beq.n	8003182 <xQueueSemaphoreTake+0xd2>
 8003172:	4b54      	ldr	r3, [pc, #336]	; (80032c4 <xQueueSemaphoreTake+0x214>)
 8003174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	f3bf 8f4f 	dsb	sy
 800317e:	f3bf 8f6f 	isb	sy
 8003182:	f001 ff07 	bl	8004f94 <vPortExitCritical>
 8003186:	2301      	movs	r3, #1
 8003188:	e097      	b.n	80032ba <xQueueSemaphoreTake+0x20a>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d111      	bne.n	80031b4 <xQueueSemaphoreTake+0x104>
 8003190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <xQueueSemaphoreTake+0xfc>
 8003196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319a:	f383 8811 	msr	BASEPRI, r3
 800319e:	f3bf 8f6f 	isb	sy
 80031a2:	f3bf 8f4f 	dsb	sy
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	bf00      	nop
 80031aa:	e7fe      	b.n	80031aa <xQueueSemaphoreTake+0xfa>
 80031ac:	f001 fef2 	bl	8004f94 <vPortExitCritical>
 80031b0:	2300      	movs	r3, #0
 80031b2:	e082      	b.n	80032ba <xQueueSemaphoreTake+0x20a>
 80031b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d106      	bne.n	80031c8 <xQueueSemaphoreTake+0x118>
 80031ba:	f107 030c 	add.w	r3, r7, #12
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 fef2 	bl	8003fa8 <vTaskInternalSetTimeOutState>
 80031c4:	2301      	movs	r3, #1
 80031c6:	637b      	str	r3, [r7, #52]	; 0x34
 80031c8:	f001 fee4 	bl	8004f94 <vPortExitCritical>
 80031cc:	f000 fc5e 	bl	8003a8c <vTaskSuspendAll>
 80031d0:	f001 feb0 	bl	8004f34 <vPortEnterCritical>
 80031d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031da:	b25b      	sxtb	r3, r3
 80031dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e0:	d103      	bne.n	80031ea <xQueueSemaphoreTake+0x13a>
 80031e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031f0:	b25b      	sxtb	r3, r3
 80031f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f6:	d103      	bne.n	8003200 <xQueueSemaphoreTake+0x150>
 80031f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003200:	f001 fec8 	bl	8004f94 <vPortExitCritical>
 8003204:	463a      	mov	r2, r7
 8003206:	f107 030c 	add.w	r3, r7, #12
 800320a:	4611      	mov	r1, r2
 800320c:	4618      	mov	r0, r3
 800320e:	f000 fee1 	bl	8003fd4 <xTaskCheckForTimeOut>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d132      	bne.n	800327e <xQueueSemaphoreTake+0x1ce>
 8003218:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800321a:	f000 f94f 	bl	80034bc <prvIsQueueEmpty>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d026      	beq.n	8003272 <xQueueSemaphoreTake+0x1c2>
 8003224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d109      	bne.n	8003240 <xQueueSemaphoreTake+0x190>
 800322c:	f001 fe82 	bl	8004f34 <vPortEnterCritical>
 8003230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	4618      	mov	r0, r3
 8003236:	f001 f843 	bl	80042c0 <xTaskPriorityInherit>
 800323a:	6338      	str	r0, [r7, #48]	; 0x30
 800323c:	f001 feaa 	bl	8004f94 <vPortExitCritical>
 8003240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003242:	3324      	adds	r3, #36	; 0x24
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	4611      	mov	r1, r2
 8003248:	4618      	mov	r0, r3
 800324a:	f000 fdf9 	bl	8003e40 <vTaskPlaceOnEventList>
 800324e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003250:	f000 f8e2 	bl	8003418 <prvUnlockQueue>
 8003254:	f000 fc28 	bl	8003aa8 <xTaskResumeAll>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	f47f af68 	bne.w	8003130 <xQueueSemaphoreTake+0x80>
 8003260:	4b18      	ldr	r3, [pc, #96]	; (80032c4 <xQueueSemaphoreTake+0x214>)
 8003262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	f3bf 8f4f 	dsb	sy
 800326c:	f3bf 8f6f 	isb	sy
 8003270:	e75e      	b.n	8003130 <xQueueSemaphoreTake+0x80>
 8003272:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003274:	f000 f8d0 	bl	8003418 <prvUnlockQueue>
 8003278:	f000 fc16 	bl	8003aa8 <xTaskResumeAll>
 800327c:	e758      	b.n	8003130 <xQueueSemaphoreTake+0x80>
 800327e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003280:	f000 f8ca 	bl	8003418 <prvUnlockQueue>
 8003284:	f000 fc10 	bl	8003aa8 <xTaskResumeAll>
 8003288:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800328a:	f000 f917 	bl	80034bc <prvIsQueueEmpty>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	f43f af4d 	beq.w	8003130 <xQueueSemaphoreTake+0x80>
 8003296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00d      	beq.n	80032b8 <xQueueSemaphoreTake+0x208>
 800329c:	f001 fe4a 	bl	8004f34 <vPortEnterCritical>
 80032a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032a2:	f000 f811 	bl	80032c8 <prvGetDisinheritPriorityAfterTimeout>
 80032a6:	6278      	str	r0, [r7, #36]	; 0x24
 80032a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032ae:	4618      	mov	r0, r3
 80032b0:	f001 f8dc 	bl	800446c <vTaskPriorityDisinheritAfterTimeout>
 80032b4:	f001 fe6e 	bl	8004f94 <vPortExitCritical>
 80032b8:	2300      	movs	r3, #0
 80032ba:	4618      	mov	r0, r3
 80032bc:	3738      	adds	r7, #56	; 0x38
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	e000ed04 	.word	0xe000ed04

080032c8 <prvGetDisinheritPriorityAfterTimeout>:
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d006      	beq.n	80032e6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	e001      	b.n	80032ea <prvGetDisinheritPriorityAfterTimeout+0x22>
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4618      	mov	r0, r3
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <prvCopyDataToQueue>:
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
 8003304:	2300      	movs	r3, #0
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	613b      	str	r3, [r7, #16]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10d      	bne.n	8003332 <prvCopyDataToQueue+0x3a>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d14d      	bne.n	80033ba <prvCopyDataToQueue+0xc2>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	4618      	mov	r0, r3
 8003324:	f001 f834 	bl	8004390 <xTaskPriorityDisinherit>
 8003328:	6178      	str	r0, [r7, #20]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	609a      	str	r2, [r3, #8]
 8003330:	e043      	b.n	80033ba <prvCopyDataToQueue+0xc2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d119      	bne.n	800336c <prvCopyDataToQueue+0x74>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6858      	ldr	r0, [r3, #4]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	461a      	mov	r2, r3
 8003342:	68b9      	ldr	r1, [r7, #8]
 8003344:	f002 fbdb 	bl	8005afe <memcpy>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	441a      	add	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	605a      	str	r2, [r3, #4]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	429a      	cmp	r2, r3
 8003360:	d32b      	bcc.n	80033ba <prvCopyDataToQueue+0xc2>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	605a      	str	r2, [r3, #4]
 800336a:	e026      	b.n	80033ba <prvCopyDataToQueue+0xc2>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	68d8      	ldr	r0, [r3, #12]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003374:	461a      	mov	r2, r3
 8003376:	68b9      	ldr	r1, [r7, #8]
 8003378:	f002 fbc1 	bl	8005afe <memcpy>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	425b      	negs	r3, r3
 8003386:	441a      	add	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	60da      	str	r2, [r3, #12]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d207      	bcs.n	80033a8 <prvCopyDataToQueue+0xb0>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	425b      	negs	r3, r3
 80033a2:	441a      	add	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	60da      	str	r2, [r3, #12]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d105      	bne.n	80033ba <prvCopyDataToQueue+0xc2>
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d002      	beq.n	80033ba <prvCopyDataToQueue+0xc2>
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	613b      	str	r3, [r7, #16]
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1c5a      	adds	r2, r3, #1
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	639a      	str	r2, [r3, #56]	; 0x38
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	4618      	mov	r0, r3
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <prvCopyDataFromQueue>:
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d018      	beq.n	8003410 <prvCopyDataFromQueue+0x44>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	441a      	add	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	60da      	str	r2, [r3, #12]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68da      	ldr	r2, [r3, #12]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d303      	bcc.n	8003400 <prvCopyDataFromQueue+0x34>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	60da      	str	r2, [r3, #12]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68d9      	ldr	r1, [r3, #12]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	461a      	mov	r2, r3
 800340a:	6838      	ldr	r0, [r7, #0]
 800340c:	f002 fb77 	bl	8005afe <memcpy>
 8003410:	bf00      	nop
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <prvUnlockQueue>:
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	f001 fd88 	bl	8004f34 <vPortEnterCritical>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800342a:	73fb      	strb	r3, [r7, #15]
 800342c:	e011      	b.n	8003452 <prvUnlockQueue+0x3a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	2b00      	cmp	r3, #0
 8003434:	d012      	beq.n	800345c <prvUnlockQueue+0x44>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3324      	adds	r3, #36	; 0x24
 800343a:	4618      	mov	r0, r3
 800343c:	f000 fd50 	bl	8003ee0 <xTaskRemoveFromEventList>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <prvUnlockQueue+0x32>
 8003446:	f000 fe27 	bl	8004098 <vTaskMissedYield>
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	3b01      	subs	r3, #1
 800344e:	b2db      	uxtb	r3, r3
 8003450:	73fb      	strb	r3, [r7, #15]
 8003452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003456:	2b00      	cmp	r3, #0
 8003458:	dce9      	bgt.n	800342e <prvUnlockQueue+0x16>
 800345a:	e000      	b.n	800345e <prvUnlockQueue+0x46>
 800345c:	bf00      	nop
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	22ff      	movs	r2, #255	; 0xff
 8003462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003466:	f001 fd95 	bl	8004f94 <vPortExitCritical>
 800346a:	f001 fd63 	bl	8004f34 <vPortEnterCritical>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003474:	73bb      	strb	r3, [r7, #14]
 8003476:	e011      	b.n	800349c <prvUnlockQueue+0x84>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d012      	beq.n	80034a6 <prvUnlockQueue+0x8e>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3310      	adds	r3, #16
 8003484:	4618      	mov	r0, r3
 8003486:	f000 fd2b 	bl	8003ee0 <xTaskRemoveFromEventList>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <prvUnlockQueue+0x7c>
 8003490:	f000 fe02 	bl	8004098 <vTaskMissedYield>
 8003494:	7bbb      	ldrb	r3, [r7, #14]
 8003496:	3b01      	subs	r3, #1
 8003498:	b2db      	uxtb	r3, r3
 800349a:	73bb      	strb	r3, [r7, #14]
 800349c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	dce9      	bgt.n	8003478 <prvUnlockQueue+0x60>
 80034a4:	e000      	b.n	80034a8 <prvUnlockQueue+0x90>
 80034a6:	bf00      	nop
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	22ff      	movs	r2, #255	; 0xff
 80034ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034b0:	f001 fd70 	bl	8004f94 <vPortExitCritical>
 80034b4:	bf00      	nop
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <prvIsQueueEmpty>:
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	f001 fd36 	bl	8004f34 <vPortEnterCritical>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d102      	bne.n	80034d6 <prvIsQueueEmpty+0x1a>
 80034d0:	2301      	movs	r3, #1
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	e001      	b.n	80034da <prvIsQueueEmpty+0x1e>
 80034d6:	2300      	movs	r3, #0
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	f001 fd5b 	bl	8004f94 <vPortExitCritical>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <prvIsQueueFull>:
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	f001 fd20 	bl	8004f34 <vPortEnterCritical>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d102      	bne.n	8003506 <prvIsQueueFull+0x1e>
 8003500:	2301      	movs	r3, #1
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	e001      	b.n	800350a <prvIsQueueFull+0x22>
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	f001 fd43 	bl	8004f94 <vPortExitCritical>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <vQueueAddToRegistry>:
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
 8003522:	2300      	movs	r3, #0
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	e014      	b.n	8003552 <vQueueAddToRegistry+0x3a>
 8003528:	4a0f      	ldr	r2, [pc, #60]	; (8003568 <vQueueAddToRegistry+0x50>)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10b      	bne.n	800354c <vQueueAddToRegistry+0x34>
 8003534:	490c      	ldr	r1, [pc, #48]	; (8003568 <vQueueAddToRegistry+0x50>)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800353e:	4a0a      	ldr	r2, [pc, #40]	; (8003568 <vQueueAddToRegistry+0x50>)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	4413      	add	r3, r2
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	605a      	str	r2, [r3, #4]
 800354a:	e006      	b.n	800355a <vQueueAddToRegistry+0x42>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	3301      	adds	r3, #1
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2b07      	cmp	r3, #7
 8003556:	d9e7      	bls.n	8003528 <vQueueAddToRegistry+0x10>
 8003558:	bf00      	nop
 800355a:	bf00      	nop
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	20000838 	.word	0x20000838

0800356c <vQueueWaitForMessageRestricted>:
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	f001 fcda 	bl	8004f34 <vPortEnterCritical>
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003586:	b25b      	sxtb	r3, r3
 8003588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358c:	d103      	bne.n	8003596 <vQueueWaitForMessageRestricted+0x2a>
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800359c:	b25b      	sxtb	r3, r3
 800359e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a2:	d103      	bne.n	80035ac <vQueueWaitForMessageRestricted+0x40>
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035ac:	f001 fcf2 	bl	8004f94 <vPortExitCritical>
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d106      	bne.n	80035c6 <vQueueWaitForMessageRestricted+0x5a>
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	3324      	adds	r3, #36	; 0x24
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	68b9      	ldr	r1, [r7, #8]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 fc61 	bl	8003e88 <vTaskPlaceOnEventListRestricted>
 80035c6:	6978      	ldr	r0, [r7, #20]
 80035c8:	f7ff ff26 	bl	8003418 <prvUnlockQueue>
 80035cc:	bf00      	nop
 80035ce:	3718      	adds	r7, #24
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <xTaskCreateStatic>:
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b08e      	sub	sp, #56	; 0x38
 80035d8:	af04      	add	r7, sp, #16
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
 80035e0:	603b      	str	r3, [r7, #0]
 80035e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10a      	bne.n	80035fe <xTaskCreateStatic+0x2a>
 80035e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ec:	f383 8811 	msr	BASEPRI, r3
 80035f0:	f3bf 8f6f 	isb	sy
 80035f4:	f3bf 8f4f 	dsb	sy
 80035f8:	623b      	str	r3, [r7, #32]
 80035fa:	bf00      	nop
 80035fc:	e7fe      	b.n	80035fc <xTaskCreateStatic+0x28>
 80035fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10a      	bne.n	800361a <xTaskCreateStatic+0x46>
 8003604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003608:	f383 8811 	msr	BASEPRI, r3
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	61fb      	str	r3, [r7, #28]
 8003616:	bf00      	nop
 8003618:	e7fe      	b.n	8003618 <xTaskCreateStatic+0x44>
 800361a:	23a8      	movs	r3, #168	; 0xa8
 800361c:	613b      	str	r3, [r7, #16]
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	2ba8      	cmp	r3, #168	; 0xa8
 8003622:	d00a      	beq.n	800363a <xTaskCreateStatic+0x66>
 8003624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003628:	f383 8811 	msr	BASEPRI, r3
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	61bb      	str	r3, [r7, #24]
 8003636:	bf00      	nop
 8003638:	e7fe      	b.n	8003638 <xTaskCreateStatic+0x64>
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363e:	2b00      	cmp	r3, #0
 8003640:	d01e      	beq.n	8003680 <xTaskCreateStatic+0xac>
 8003642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003644:	2b00      	cmp	r3, #0
 8003646:	d01b      	beq.n	8003680 <xTaskCreateStatic+0xac>
 8003648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364a:	627b      	str	r3, [r7, #36]	; 0x24
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003650:	631a      	str	r2, [r3, #48]	; 0x30
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	2202      	movs	r2, #2
 8003656:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 800365a:	2300      	movs	r3, #0
 800365c:	9303      	str	r3, [sp, #12]
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	9302      	str	r3, [sp, #8]
 8003662:	f107 0314 	add.w	r3, r7, #20
 8003666:	9301      	str	r3, [sp, #4]
 8003668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 f850 	bl	8003718 <prvInitialiseNewTask>
 8003678:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800367a:	f000 f8f3 	bl	8003864 <prvAddNewTaskToReadyList>
 800367e:	e001      	b.n	8003684 <xTaskCreateStatic+0xb0>
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	4618      	mov	r0, r3
 8003688:	3728      	adds	r7, #40	; 0x28
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <xTaskCreate>:
 800368e:	b580      	push	{r7, lr}
 8003690:	b08c      	sub	sp, #48	; 0x30
 8003692:	af04      	add	r7, sp, #16
 8003694:	60f8      	str	r0, [r7, #12]
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	603b      	str	r3, [r7, #0]
 800369a:	4613      	mov	r3, r2
 800369c:	80fb      	strh	r3, [r7, #6]
 800369e:	88fb      	ldrh	r3, [r7, #6]
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4618      	mov	r0, r3
 80036a4:	f001 fd68 	bl	8005178 <pvPortMalloc>
 80036a8:	6178      	str	r0, [r7, #20]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00e      	beq.n	80036ce <xTaskCreate+0x40>
 80036b0:	20a8      	movs	r0, #168	; 0xa8
 80036b2:	f001 fd61 	bl	8005178 <pvPortMalloc>
 80036b6:	61f8      	str	r0, [r7, #28]
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <xTaskCreate+0x38>
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	631a      	str	r2, [r3, #48]	; 0x30
 80036c4:	e005      	b.n	80036d2 <xTaskCreate+0x44>
 80036c6:	6978      	ldr	r0, [r7, #20]
 80036c8:	f001 fe22 	bl	8005310 <vPortFree>
 80036cc:	e001      	b.n	80036d2 <xTaskCreate+0x44>
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d017      	beq.n	8003708 <xTaskCreate+0x7a>
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 80036e0:	88fa      	ldrh	r2, [r7, #6]
 80036e2:	2300      	movs	r3, #0
 80036e4:	9303      	str	r3, [sp, #12]
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	9302      	str	r3, [sp, #8]
 80036ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ec:	9301      	str	r3, [sp, #4]
 80036ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	68b9      	ldr	r1, [r7, #8]
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 f80e 	bl	8003718 <prvInitialiseNewTask>
 80036fc:	69f8      	ldr	r0, [r7, #28]
 80036fe:	f000 f8b1 	bl	8003864 <prvAddNewTaskToReadyList>
 8003702:	2301      	movs	r3, #1
 8003704:	61bb      	str	r3, [r7, #24]
 8003706:	e002      	b.n	800370e <xTaskCreate+0x80>
 8003708:	f04f 33ff 	mov.w	r3, #4294967295
 800370c:	61bb      	str	r3, [r7, #24]
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	4618      	mov	r0, r3
 8003712:	3720      	adds	r7, #32
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <prvInitialiseNewTask>:
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
 8003724:	603b      	str	r3, [r7, #0]
 8003726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003728:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	461a      	mov	r2, r3
 8003730:	21a5      	movs	r1, #165	; 0xa5
 8003732:	f002 f913 	bl	800595c <memset>
 8003736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003740:	3b01      	subs	r3, #1
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	f023 0307 	bic.w	r3, r3, #7
 800374e:	61bb      	str	r3, [r7, #24]
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <prvInitialiseNewTask+0x58>
 800375a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375e:	f383 8811 	msr	BASEPRI, r3
 8003762:	f3bf 8f6f 	isb	sy
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	617b      	str	r3, [r7, #20]
 800376c:	bf00      	nop
 800376e:	e7fe      	b.n	800376e <prvInitialiseNewTask+0x56>
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d01f      	beq.n	80037b6 <prvInitialiseNewTask+0x9e>
 8003776:	2300      	movs	r3, #0
 8003778:	61fb      	str	r3, [r7, #28]
 800377a:	e012      	b.n	80037a2 <prvInitialiseNewTask+0x8a>
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	4413      	add	r3, r2
 8003782:	7819      	ldrb	r1, [r3, #0]
 8003784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	4413      	add	r3, r2
 800378a:	3334      	adds	r3, #52	; 0x34
 800378c:	460a      	mov	r2, r1
 800378e:	701a      	strb	r2, [r3, #0]
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	4413      	add	r3, r2
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d006      	beq.n	80037aa <prvInitialiseNewTask+0x92>
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	3301      	adds	r3, #1
 80037a0:	61fb      	str	r3, [r7, #28]
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	2b0f      	cmp	r3, #15
 80037a6:	d9e9      	bls.n	800377c <prvInitialiseNewTask+0x64>
 80037a8:	e000      	b.n	80037ac <prvInitialiseNewTask+0x94>
 80037aa:	bf00      	nop
 80037ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037b4:	e003      	b.n	80037be <prvInitialiseNewTask+0xa6>
 80037b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80037be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c0:	2b37      	cmp	r3, #55	; 0x37
 80037c2:	d901      	bls.n	80037c8 <prvInitialiseNewTask+0xb0>
 80037c4:	2337      	movs	r3, #55	; 0x37
 80037c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80037c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80037ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037d2:	64da      	str	r2, [r3, #76]	; 0x4c
 80037d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d6:	2200      	movs	r2, #0
 80037d8:	651a      	str	r2, [r3, #80]	; 0x50
 80037da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037dc:	3304      	adds	r3, #4
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fe ff64 	bl	80026ac <vListInitialiseItem>
 80037e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e6:	3318      	adds	r3, #24
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fe ff5f 	bl	80026ac <vListInitialiseItem>
 80037ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037f2:	611a      	str	r2, [r3, #16]
 80037f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80037fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fc:	619a      	str	r2, [r3, #24]
 80037fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003802:	625a      	str	r2, [r3, #36]	; 0x24
 8003804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003806:	2200      	movs	r2, #0
 8003808:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800380c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380e:	2200      	movs	r2, #0
 8003810:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 8003814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003816:	3354      	adds	r3, #84	; 0x54
 8003818:	224c      	movs	r2, #76	; 0x4c
 800381a:	2100      	movs	r1, #0
 800381c:	4618      	mov	r0, r3
 800381e:	f002 f89d 	bl	800595c <memset>
 8003822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003824:	4a0c      	ldr	r2, [pc, #48]	; (8003858 <prvInitialiseNewTask+0x140>)
 8003826:	659a      	str	r2, [r3, #88]	; 0x58
 8003828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382a:	4a0c      	ldr	r2, [pc, #48]	; (800385c <prvInitialiseNewTask+0x144>)
 800382c:	65da      	str	r2, [r3, #92]	; 0x5c
 800382e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003830:	4a0b      	ldr	r2, [pc, #44]	; (8003860 <prvInitialiseNewTask+0x148>)
 8003832:	661a      	str	r2, [r3, #96]	; 0x60
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	68f9      	ldr	r1, [r7, #12]
 8003838:	69b8      	ldr	r0, [r7, #24]
 800383a:	f001 fa4f 	bl	8004cdc <pxPortInitialiseStack>
 800383e:	4602      	mov	r2, r0
 8003840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003846:	2b00      	cmp	r3, #0
 8003848:	d002      	beq.n	8003850 <prvInitialiseNewTask+0x138>
 800384a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	bf00      	nop
 8003852:	3720      	adds	r7, #32
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	20004acc 	.word	0x20004acc
 800385c:	20004b34 	.word	0x20004b34
 8003860:	20004b9c 	.word	0x20004b9c

08003864 <prvAddNewTaskToReadyList>:
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	f001 fb62 	bl	8004f34 <vPortEnterCritical>
 8003870:	4b2d      	ldr	r3, [pc, #180]	; (8003928 <prvAddNewTaskToReadyList+0xc4>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3301      	adds	r3, #1
 8003876:	4a2c      	ldr	r2, [pc, #176]	; (8003928 <prvAddNewTaskToReadyList+0xc4>)
 8003878:	6013      	str	r3, [r2, #0]
 800387a:	4b2c      	ldr	r3, [pc, #176]	; (800392c <prvAddNewTaskToReadyList+0xc8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d109      	bne.n	8003896 <prvAddNewTaskToReadyList+0x32>
 8003882:	4a2a      	ldr	r2, [pc, #168]	; (800392c <prvAddNewTaskToReadyList+0xc8>)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6013      	str	r3, [r2, #0]
 8003888:	4b27      	ldr	r3, [pc, #156]	; (8003928 <prvAddNewTaskToReadyList+0xc4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d110      	bne.n	80038b2 <prvAddNewTaskToReadyList+0x4e>
 8003890:	f000 fc26 	bl	80040e0 <prvInitialiseTaskLists>
 8003894:	e00d      	b.n	80038b2 <prvAddNewTaskToReadyList+0x4e>
 8003896:	4b26      	ldr	r3, [pc, #152]	; (8003930 <prvAddNewTaskToReadyList+0xcc>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d109      	bne.n	80038b2 <prvAddNewTaskToReadyList+0x4e>
 800389e:	4b23      	ldr	r3, [pc, #140]	; (800392c <prvAddNewTaskToReadyList+0xc8>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d802      	bhi.n	80038b2 <prvAddNewTaskToReadyList+0x4e>
 80038ac:	4a1f      	ldr	r2, [pc, #124]	; (800392c <prvAddNewTaskToReadyList+0xc8>)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	4b20      	ldr	r3, [pc, #128]	; (8003934 <prvAddNewTaskToReadyList+0xd0>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	3301      	adds	r3, #1
 80038b8:	4a1e      	ldr	r2, [pc, #120]	; (8003934 <prvAddNewTaskToReadyList+0xd0>)
 80038ba:	6013      	str	r3, [r2, #0]
 80038bc:	4b1d      	ldr	r3, [pc, #116]	; (8003934 <prvAddNewTaskToReadyList+0xd0>)
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	645a      	str	r2, [r3, #68]	; 0x44
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c8:	4b1b      	ldr	r3, [pc, #108]	; (8003938 <prvAddNewTaskToReadyList+0xd4>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d903      	bls.n	80038d8 <prvAddNewTaskToReadyList+0x74>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	4a18      	ldr	r2, [pc, #96]	; (8003938 <prvAddNewTaskToReadyList+0xd4>)
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038dc:	4613      	mov	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4a15      	ldr	r2, [pc, #84]	; (800393c <prvAddNewTaskToReadyList+0xd8>)
 80038e6:	441a      	add	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3304      	adds	r3, #4
 80038ec:	4619      	mov	r1, r3
 80038ee:	4610      	mov	r0, r2
 80038f0:	f7fe fee9 	bl	80026c6 <vListInsertEnd>
 80038f4:	f001 fb4e 	bl	8004f94 <vPortExitCritical>
 80038f8:	4b0d      	ldr	r3, [pc, #52]	; (8003930 <prvAddNewTaskToReadyList+0xcc>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00e      	beq.n	800391e <prvAddNewTaskToReadyList+0xba>
 8003900:	4b0a      	ldr	r3, [pc, #40]	; (800392c <prvAddNewTaskToReadyList+0xc8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390a:	429a      	cmp	r2, r3
 800390c:	d207      	bcs.n	800391e <prvAddNewTaskToReadyList+0xba>
 800390e:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <prvAddNewTaskToReadyList+0xdc>)
 8003910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	f3bf 8f4f 	dsb	sy
 800391a:	f3bf 8f6f 	isb	sy
 800391e:	bf00      	nop
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	20000d4c 	.word	0x20000d4c
 800392c:	20000878 	.word	0x20000878
 8003930:	20000d58 	.word	0x20000d58
 8003934:	20000d68 	.word	0x20000d68
 8003938:	20000d54 	.word	0x20000d54
 800393c:	2000087c 	.word	0x2000087c
 8003940:	e000ed04 	.word	0xe000ed04

08003944 <vTaskDelay>:
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	2300      	movs	r3, #0
 800394e:	60fb      	str	r3, [r7, #12]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d017      	beq.n	8003986 <vTaskDelay+0x42>
 8003956:	4b13      	ldr	r3, [pc, #76]	; (80039a4 <vTaskDelay+0x60>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00a      	beq.n	8003974 <vTaskDelay+0x30>
 800395e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003962:	f383 8811 	msr	BASEPRI, r3
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	60bb      	str	r3, [r7, #8]
 8003970:	bf00      	nop
 8003972:	e7fe      	b.n	8003972 <vTaskDelay+0x2e>
 8003974:	f000 f88a 	bl	8003a8c <vTaskSuspendAll>
 8003978:	2100      	movs	r1, #0
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 fe0c 	bl	8004598 <prvAddCurrentTaskToDelayedList>
 8003980:	f000 f892 	bl	8003aa8 <xTaskResumeAll>
 8003984:	60f8      	str	r0, [r7, #12]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d107      	bne.n	800399c <vTaskDelay+0x58>
 800398c:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <vTaskDelay+0x64>)
 800398e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	f3bf 8f4f 	dsb	sy
 8003998:	f3bf 8f6f 	isb	sy
 800399c:	bf00      	nop
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	20000d74 	.word	0x20000d74
 80039a8:	e000ed04 	.word	0xe000ed04

080039ac <vTaskStartScheduler>:
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b08a      	sub	sp, #40	; 0x28
 80039b0:	af04      	add	r7, sp, #16
 80039b2:	2300      	movs	r3, #0
 80039b4:	60bb      	str	r3, [r7, #8]
 80039b6:	2300      	movs	r3, #0
 80039b8:	607b      	str	r3, [r7, #4]
 80039ba:	463a      	mov	r2, r7
 80039bc:	1d39      	adds	r1, r7, #4
 80039be:	f107 0308 	add.w	r3, r7, #8
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fe fe1e 	bl	8002604 <vApplicationGetIdleTaskMemory>
 80039c8:	6839      	ldr	r1, [r7, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	9202      	str	r2, [sp, #8]
 80039d0:	9301      	str	r3, [sp, #4]
 80039d2:	2300      	movs	r3, #0
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	2300      	movs	r3, #0
 80039d8:	460a      	mov	r2, r1
 80039da:	4924      	ldr	r1, [pc, #144]	; (8003a6c <vTaskStartScheduler+0xc0>)
 80039dc:	4824      	ldr	r0, [pc, #144]	; (8003a70 <vTaskStartScheduler+0xc4>)
 80039de:	f7ff fdf9 	bl	80035d4 <xTaskCreateStatic>
 80039e2:	4603      	mov	r3, r0
 80039e4:	4a23      	ldr	r2, [pc, #140]	; (8003a74 <vTaskStartScheduler+0xc8>)
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	4b22      	ldr	r3, [pc, #136]	; (8003a74 <vTaskStartScheduler+0xc8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d002      	beq.n	80039f6 <vTaskStartScheduler+0x4a>
 80039f0:	2301      	movs	r3, #1
 80039f2:	617b      	str	r3, [r7, #20]
 80039f4:	e001      	b.n	80039fa <vTaskStartScheduler+0x4e>
 80039f6:	2300      	movs	r3, #0
 80039f8:	617b      	str	r3, [r7, #20]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d102      	bne.n	8003a06 <vTaskStartScheduler+0x5a>
 8003a00:	f000 fe1e 	bl	8004640 <xTimerCreateTimerTask>
 8003a04:	6178      	str	r0, [r7, #20]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d11b      	bne.n	8003a44 <vTaskStartScheduler+0x98>
 8003a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a10:	f383 8811 	msr	BASEPRI, r3
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	613b      	str	r3, [r7, #16]
 8003a1e:	bf00      	nop
 8003a20:	4b15      	ldr	r3, [pc, #84]	; (8003a78 <vTaskStartScheduler+0xcc>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	3354      	adds	r3, #84	; 0x54
 8003a26:	4a15      	ldr	r2, [pc, #84]	; (8003a7c <vTaskStartScheduler+0xd0>)
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	4b15      	ldr	r3, [pc, #84]	; (8003a80 <vTaskStartScheduler+0xd4>)
 8003a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	4b14      	ldr	r3, [pc, #80]	; (8003a84 <vTaskStartScheduler+0xd8>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	4b13      	ldr	r3, [pc, #76]	; (8003a88 <vTaskStartScheduler+0xdc>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	f001 f9d7 	bl	8004df0 <xPortStartScheduler>
 8003a42:	e00e      	b.n	8003a62 <vTaskStartScheduler+0xb6>
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4a:	d10a      	bne.n	8003a62 <vTaskStartScheduler+0xb6>
 8003a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a50:	f383 8811 	msr	BASEPRI, r3
 8003a54:	f3bf 8f6f 	isb	sy
 8003a58:	f3bf 8f4f 	dsb	sy
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	bf00      	nop
 8003a60:	e7fe      	b.n	8003a60 <vTaskStartScheduler+0xb4>
 8003a62:	bf00      	nop
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	080065a0 	.word	0x080065a0
 8003a70:	080040b1 	.word	0x080040b1
 8003a74:	20000d70 	.word	0x20000d70
 8003a78:	20000878 	.word	0x20000878
 8003a7c:	20000068 	.word	0x20000068
 8003a80:	20000d6c 	.word	0x20000d6c
 8003a84:	20000d58 	.word	0x20000d58
 8003a88:	20000d50 	.word	0x20000d50

08003a8c <vTaskSuspendAll>:
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	4b04      	ldr	r3, [pc, #16]	; (8003aa4 <vTaskSuspendAll+0x18>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	3301      	adds	r3, #1
 8003a96:	4a03      	ldr	r2, [pc, #12]	; (8003aa4 <vTaskSuspendAll+0x18>)
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	bf00      	nop
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr
 8003aa4:	20000d74 	.word	0x20000d74

08003aa8 <xTaskResumeAll>:
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60bb      	str	r3, [r7, #8]
 8003ab6:	4b42      	ldr	r3, [pc, #264]	; (8003bc0 <xTaskResumeAll+0x118>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10a      	bne.n	8003ad4 <xTaskResumeAll+0x2c>
 8003abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac2:	f383 8811 	msr	BASEPRI, r3
 8003ac6:	f3bf 8f6f 	isb	sy
 8003aca:	f3bf 8f4f 	dsb	sy
 8003ace:	603b      	str	r3, [r7, #0]
 8003ad0:	bf00      	nop
 8003ad2:	e7fe      	b.n	8003ad2 <xTaskResumeAll+0x2a>
 8003ad4:	f001 fa2e 	bl	8004f34 <vPortEnterCritical>
 8003ad8:	4b39      	ldr	r3, [pc, #228]	; (8003bc0 <xTaskResumeAll+0x118>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3b01      	subs	r3, #1
 8003ade:	4a38      	ldr	r2, [pc, #224]	; (8003bc0 <xTaskResumeAll+0x118>)
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	4b37      	ldr	r3, [pc, #220]	; (8003bc0 <xTaskResumeAll+0x118>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d162      	bne.n	8003bb0 <xTaskResumeAll+0x108>
 8003aea:	4b36      	ldr	r3, [pc, #216]	; (8003bc4 <xTaskResumeAll+0x11c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d05e      	beq.n	8003bb0 <xTaskResumeAll+0x108>
 8003af2:	e02f      	b.n	8003b54 <xTaskResumeAll+0xac>
 8003af4:	4b34      	ldr	r3, [pc, #208]	; (8003bc8 <xTaskResumeAll+0x120>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	3318      	adds	r3, #24
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fe fe3d 	bl	8002780 <uxListRemove>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	3304      	adds	r3, #4
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fe fe38 	bl	8002780 <uxListRemove>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b14:	4b2d      	ldr	r3, [pc, #180]	; (8003bcc <xTaskResumeAll+0x124>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d903      	bls.n	8003b24 <xTaskResumeAll+0x7c>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b20:	4a2a      	ldr	r2, [pc, #168]	; (8003bcc <xTaskResumeAll+0x124>)
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b28:	4613      	mov	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4a27      	ldr	r2, [pc, #156]	; (8003bd0 <xTaskResumeAll+0x128>)
 8003b32:	441a      	add	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	3304      	adds	r3, #4
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	f7fe fdc3 	bl	80026c6 <vListInsertEnd>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b44:	4b23      	ldr	r3, [pc, #140]	; (8003bd4 <xTaskResumeAll+0x12c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d302      	bcc.n	8003b54 <xTaskResumeAll+0xac>
 8003b4e:	4b22      	ldr	r3, [pc, #136]	; (8003bd8 <xTaskResumeAll+0x130>)
 8003b50:	2201      	movs	r2, #1
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	4b1c      	ldr	r3, [pc, #112]	; (8003bc8 <xTaskResumeAll+0x120>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1cb      	bne.n	8003af4 <xTaskResumeAll+0x4c>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <xTaskResumeAll+0xbe>
 8003b62:	f000 fb5f 	bl	8004224 <prvResetNextTaskUnblockTime>
 8003b66:	4b1d      	ldr	r3, [pc, #116]	; (8003bdc <xTaskResumeAll+0x134>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	607b      	str	r3, [r7, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d010      	beq.n	8003b94 <xTaskResumeAll+0xec>
 8003b72:	f000 f847 	bl	8003c04 <xTaskIncrementTick>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d002      	beq.n	8003b82 <xTaskResumeAll+0xda>
 8003b7c:	4b16      	ldr	r3, [pc, #88]	; (8003bd8 <xTaskResumeAll+0x130>)
 8003b7e:	2201      	movs	r2, #1
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	3b01      	subs	r3, #1
 8003b86:	607b      	str	r3, [r7, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f1      	bne.n	8003b72 <xTaskResumeAll+0xca>
 8003b8e:	4b13      	ldr	r3, [pc, #76]	; (8003bdc <xTaskResumeAll+0x134>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	4b10      	ldr	r3, [pc, #64]	; (8003bd8 <xTaskResumeAll+0x130>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d009      	beq.n	8003bb0 <xTaskResumeAll+0x108>
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	60bb      	str	r3, [r7, #8]
 8003ba0:	4b0f      	ldr	r3, [pc, #60]	; (8003be0 <xTaskResumeAll+0x138>)
 8003ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	f3bf 8f4f 	dsb	sy
 8003bac:	f3bf 8f6f 	isb	sy
 8003bb0:	f001 f9f0 	bl	8004f94 <vPortExitCritical>
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20000d74 	.word	0x20000d74
 8003bc4:	20000d4c 	.word	0x20000d4c
 8003bc8:	20000d0c 	.word	0x20000d0c
 8003bcc:	20000d54 	.word	0x20000d54
 8003bd0:	2000087c 	.word	0x2000087c
 8003bd4:	20000878 	.word	0x20000878
 8003bd8:	20000d60 	.word	0x20000d60
 8003bdc:	20000d5c 	.word	0x20000d5c
 8003be0:	e000ed04 	.word	0xe000ed04

08003be4 <xTaskGetTickCount>:
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <xTaskGetTickCount+0x1c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	607b      	str	r3, [r7, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	20000d50 	.word	0x20000d50

08003c04 <xTaskIncrementTick>:
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	617b      	str	r3, [r7, #20]
 8003c0e:	4b4f      	ldr	r3, [pc, #316]	; (8003d4c <xTaskIncrementTick+0x148>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f040 808f 	bne.w	8003d36 <xTaskIncrementTick+0x132>
 8003c18:	4b4d      	ldr	r3, [pc, #308]	; (8003d50 <xTaskIncrementTick+0x14c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	613b      	str	r3, [r7, #16]
 8003c20:	4a4b      	ldr	r2, [pc, #300]	; (8003d50 <xTaskIncrementTick+0x14c>)
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d120      	bne.n	8003c6e <xTaskIncrementTick+0x6a>
 8003c2c:	4b49      	ldr	r3, [pc, #292]	; (8003d54 <xTaskIncrementTick+0x150>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <xTaskIncrementTick+0x48>
 8003c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3a:	f383 8811 	msr	BASEPRI, r3
 8003c3e:	f3bf 8f6f 	isb	sy
 8003c42:	f3bf 8f4f 	dsb	sy
 8003c46:	603b      	str	r3, [r7, #0]
 8003c48:	bf00      	nop
 8003c4a:	e7fe      	b.n	8003c4a <xTaskIncrementTick+0x46>
 8003c4c:	4b41      	ldr	r3, [pc, #260]	; (8003d54 <xTaskIncrementTick+0x150>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	4b41      	ldr	r3, [pc, #260]	; (8003d58 <xTaskIncrementTick+0x154>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a3f      	ldr	r2, [pc, #252]	; (8003d54 <xTaskIncrementTick+0x150>)
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	4a3f      	ldr	r2, [pc, #252]	; (8003d58 <xTaskIncrementTick+0x154>)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	4b3e      	ldr	r3, [pc, #248]	; (8003d5c <xTaskIncrementTick+0x158>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	3301      	adds	r3, #1
 8003c66:	4a3d      	ldr	r2, [pc, #244]	; (8003d5c <xTaskIncrementTick+0x158>)
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	f000 fadb 	bl	8004224 <prvResetNextTaskUnblockTime>
 8003c6e:	4b3c      	ldr	r3, [pc, #240]	; (8003d60 <xTaskIncrementTick+0x15c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d349      	bcc.n	8003d0c <xTaskIncrementTick+0x108>
 8003c78:	4b36      	ldr	r3, [pc, #216]	; (8003d54 <xTaskIncrementTick+0x150>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d104      	bne.n	8003c8c <xTaskIncrementTick+0x88>
 8003c82:	4b37      	ldr	r3, [pc, #220]	; (8003d60 <xTaskIncrementTick+0x15c>)
 8003c84:	f04f 32ff 	mov.w	r2, #4294967295
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	e03f      	b.n	8003d0c <xTaskIncrementTick+0x108>
 8003c8c:	4b31      	ldr	r3, [pc, #196]	; (8003d54 <xTaskIncrementTick+0x150>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	60bb      	str	r3, [r7, #8]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	607b      	str	r3, [r7, #4]
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d203      	bcs.n	8003cac <xTaskIncrementTick+0xa8>
 8003ca4:	4a2e      	ldr	r2, [pc, #184]	; (8003d60 <xTaskIncrementTick+0x15c>)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	e02f      	b.n	8003d0c <xTaskIncrementTick+0x108>
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	3304      	adds	r3, #4
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fe fd65 	bl	8002780 <uxListRemove>
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d004      	beq.n	8003cc8 <xTaskIncrementTick+0xc4>
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	3318      	adds	r3, #24
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fe fd5c 	bl	8002780 <uxListRemove>
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ccc:	4b25      	ldr	r3, [pc, #148]	; (8003d64 <xTaskIncrementTick+0x160>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d903      	bls.n	8003cdc <xTaskIncrementTick+0xd8>
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd8:	4a22      	ldr	r2, [pc, #136]	; (8003d64 <xTaskIncrementTick+0x160>)
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4a1f      	ldr	r2, [pc, #124]	; (8003d68 <xTaskIncrementTick+0x164>)
 8003cea:	441a      	add	r2, r3
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4610      	mov	r0, r2
 8003cf4:	f7fe fce7 	bl	80026c6 <vListInsertEnd>
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfc:	4b1b      	ldr	r3, [pc, #108]	; (8003d6c <xTaskIncrementTick+0x168>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d3b8      	bcc.n	8003c78 <xTaskIncrementTick+0x74>
 8003d06:	2301      	movs	r3, #1
 8003d08:	617b      	str	r3, [r7, #20]
 8003d0a:	e7b5      	b.n	8003c78 <xTaskIncrementTick+0x74>
 8003d0c:	4b17      	ldr	r3, [pc, #92]	; (8003d6c <xTaskIncrementTick+0x168>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d12:	4915      	ldr	r1, [pc, #84]	; (8003d68 <xTaskIncrementTick+0x164>)
 8003d14:	4613      	mov	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4413      	add	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d901      	bls.n	8003d28 <xTaskIncrementTick+0x124>
 8003d24:	2301      	movs	r3, #1
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	4b11      	ldr	r3, [pc, #68]	; (8003d70 <xTaskIncrementTick+0x16c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d007      	beq.n	8003d40 <xTaskIncrementTick+0x13c>
 8003d30:	2301      	movs	r3, #1
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	e004      	b.n	8003d40 <xTaskIncrementTick+0x13c>
 8003d36:	4b0f      	ldr	r3, [pc, #60]	; (8003d74 <xTaskIncrementTick+0x170>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	4a0d      	ldr	r2, [pc, #52]	; (8003d74 <xTaskIncrementTick+0x170>)
 8003d3e:	6013      	str	r3, [r2, #0]
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	4618      	mov	r0, r3
 8003d44:	3718      	adds	r7, #24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	20000d74 	.word	0x20000d74
 8003d50:	20000d50 	.word	0x20000d50
 8003d54:	20000d04 	.word	0x20000d04
 8003d58:	20000d08 	.word	0x20000d08
 8003d5c:	20000d64 	.word	0x20000d64
 8003d60:	20000d6c 	.word	0x20000d6c
 8003d64:	20000d54 	.word	0x20000d54
 8003d68:	2000087c 	.word	0x2000087c
 8003d6c:	20000878 	.word	0x20000878
 8003d70:	20000d60 	.word	0x20000d60
 8003d74:	20000d5c 	.word	0x20000d5c

08003d78 <vTaskSwitchContext>:
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	4b2a      	ldr	r3, [pc, #168]	; (8003e28 <vTaskSwitchContext+0xb0>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <vTaskSwitchContext+0x16>
 8003d86:	4b29      	ldr	r3, [pc, #164]	; (8003e2c <vTaskSwitchContext+0xb4>)
 8003d88:	2201      	movs	r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	e046      	b.n	8003e1c <vTaskSwitchContext+0xa4>
 8003d8e:	4b27      	ldr	r3, [pc, #156]	; (8003e2c <vTaskSwitchContext+0xb4>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	4b26      	ldr	r3, [pc, #152]	; (8003e30 <vTaskSwitchContext+0xb8>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	e010      	b.n	8003dbe <vTaskSwitchContext+0x46>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10a      	bne.n	8003db8 <vTaskSwitchContext+0x40>
 8003da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da6:	f383 8811 	msr	BASEPRI, r3
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	607b      	str	r3, [r7, #4]
 8003db4:	bf00      	nop
 8003db6:	e7fe      	b.n	8003db6 <vTaskSwitchContext+0x3e>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	491d      	ldr	r1, [pc, #116]	; (8003e34 <vTaskSwitchContext+0xbc>)
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	440b      	add	r3, r1
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0e4      	beq.n	8003d9c <vTaskSwitchContext+0x24>
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4a15      	ldr	r2, [pc, #84]	; (8003e34 <vTaskSwitchContext+0xbc>)
 8003dde:	4413      	add	r3, r2
 8003de0:	60bb      	str	r3, [r7, #8]
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	605a      	str	r2, [r3, #4]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	3308      	adds	r3, #8
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d104      	bne.n	8003e02 <vTaskSwitchContext+0x8a>
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	605a      	str	r2, [r3, #4]
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	4a0b      	ldr	r2, [pc, #44]	; (8003e38 <vTaskSwitchContext+0xc0>)
 8003e0a:	6013      	str	r3, [r2, #0]
 8003e0c:	4a08      	ldr	r2, [pc, #32]	; (8003e30 <vTaskSwitchContext+0xb8>)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	4b09      	ldr	r3, [pc, #36]	; (8003e38 <vTaskSwitchContext+0xc0>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3354      	adds	r3, #84	; 0x54
 8003e18:	4a08      	ldr	r2, [pc, #32]	; (8003e3c <vTaskSwitchContext+0xc4>)
 8003e1a:	6013      	str	r3, [r2, #0]
 8003e1c:	bf00      	nop
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	20000d74 	.word	0x20000d74
 8003e2c:	20000d60 	.word	0x20000d60
 8003e30:	20000d54 	.word	0x20000d54
 8003e34:	2000087c 	.word	0x2000087c
 8003e38:	20000878 	.word	0x20000878
 8003e3c:	20000068 	.word	0x20000068

08003e40 <vTaskPlaceOnEventList>:
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10a      	bne.n	8003e66 <vTaskPlaceOnEventList+0x26>
 8003e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e54:	f383 8811 	msr	BASEPRI, r3
 8003e58:	f3bf 8f6f 	isb	sy
 8003e5c:	f3bf 8f4f 	dsb	sy
 8003e60:	60fb      	str	r3, [r7, #12]
 8003e62:	bf00      	nop
 8003e64:	e7fe      	b.n	8003e64 <vTaskPlaceOnEventList+0x24>
 8003e66:	4b07      	ldr	r3, [pc, #28]	; (8003e84 <vTaskPlaceOnEventList+0x44>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	3318      	adds	r3, #24
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7fe fc4d 	bl	800270e <vListInsert>
 8003e74:	2101      	movs	r1, #1
 8003e76:	6838      	ldr	r0, [r7, #0]
 8003e78:	f000 fb8e 	bl	8004598 <prvAddCurrentTaskToDelayedList>
 8003e7c:	bf00      	nop
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	20000878 	.word	0x20000878

08003e88 <vTaskPlaceOnEventListRestricted>:
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10a      	bne.n	8003eb0 <vTaskPlaceOnEventListRestricted+0x28>
 8003e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9e:	f383 8811 	msr	BASEPRI, r3
 8003ea2:	f3bf 8f6f 	isb	sy
 8003ea6:	f3bf 8f4f 	dsb	sy
 8003eaa:	617b      	str	r3, [r7, #20]
 8003eac:	bf00      	nop
 8003eae:	e7fe      	b.n	8003eae <vTaskPlaceOnEventListRestricted+0x26>
 8003eb0:	4b0a      	ldr	r3, [pc, #40]	; (8003edc <vTaskPlaceOnEventListRestricted+0x54>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	3318      	adds	r3, #24
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f7fe fc04 	bl	80026c6 <vListInsertEnd>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <vTaskPlaceOnEventListRestricted+0x42>
 8003ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec8:	60bb      	str	r3, [r7, #8]
 8003eca:	6879      	ldr	r1, [r7, #4]
 8003ecc:	68b8      	ldr	r0, [r7, #8]
 8003ece:	f000 fb63 	bl	8004598 <prvAddCurrentTaskToDelayedList>
 8003ed2:	bf00      	nop
 8003ed4:	3718      	adds	r7, #24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	20000878 	.word	0x20000878

08003ee0 <xTaskRemoveFromEventList>:
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	613b      	str	r3, [r7, #16]
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10a      	bne.n	8003f0c <xTaskRemoveFromEventList+0x2c>
 8003ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efa:	f383 8811 	msr	BASEPRI, r3
 8003efe:	f3bf 8f6f 	isb	sy
 8003f02:	f3bf 8f4f 	dsb	sy
 8003f06:	60fb      	str	r3, [r7, #12]
 8003f08:	bf00      	nop
 8003f0a:	e7fe      	b.n	8003f0a <xTaskRemoveFromEventList+0x2a>
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	3318      	adds	r3, #24
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fe fc35 	bl	8002780 <uxListRemove>
 8003f16:	4b1e      	ldr	r3, [pc, #120]	; (8003f90 <xTaskRemoveFromEventList+0xb0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d11d      	bne.n	8003f5a <xTaskRemoveFromEventList+0x7a>
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	3304      	adds	r3, #4
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fe fc2c 	bl	8002780 <uxListRemove>
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f2c:	4b19      	ldr	r3, [pc, #100]	; (8003f94 <xTaskRemoveFromEventList+0xb4>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d903      	bls.n	8003f3c <xTaskRemoveFromEventList+0x5c>
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f38:	4a16      	ldr	r2, [pc, #88]	; (8003f94 <xTaskRemoveFromEventList+0xb4>)
 8003f3a:	6013      	str	r3, [r2, #0]
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f40:	4613      	mov	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4a13      	ldr	r2, [pc, #76]	; (8003f98 <xTaskRemoveFromEventList+0xb8>)
 8003f4a:	441a      	add	r2, r3
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	3304      	adds	r3, #4
 8003f50:	4619      	mov	r1, r3
 8003f52:	4610      	mov	r0, r2
 8003f54:	f7fe fbb7 	bl	80026c6 <vListInsertEnd>
 8003f58:	e005      	b.n	8003f66 <xTaskRemoveFromEventList+0x86>
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	3318      	adds	r3, #24
 8003f5e:	4619      	mov	r1, r3
 8003f60:	480e      	ldr	r0, [pc, #56]	; (8003f9c <xTaskRemoveFromEventList+0xbc>)
 8003f62:	f7fe fbb0 	bl	80026c6 <vListInsertEnd>
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f6a:	4b0d      	ldr	r3, [pc, #52]	; (8003fa0 <xTaskRemoveFromEventList+0xc0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d905      	bls.n	8003f80 <xTaskRemoveFromEventList+0xa0>
 8003f74:	2301      	movs	r3, #1
 8003f76:	617b      	str	r3, [r7, #20]
 8003f78:	4b0a      	ldr	r3, [pc, #40]	; (8003fa4 <xTaskRemoveFromEventList+0xc4>)
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	e001      	b.n	8003f84 <xTaskRemoveFromEventList+0xa4>
 8003f80:	2300      	movs	r3, #0
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000d74 	.word	0x20000d74
 8003f94:	20000d54 	.word	0x20000d54
 8003f98:	2000087c 	.word	0x2000087c
 8003f9c:	20000d0c 	.word	0x20000d0c
 8003fa0:	20000878 	.word	0x20000878
 8003fa4:	20000d60 	.word	0x20000d60

08003fa8 <vTaskInternalSetTimeOutState>:
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	4b06      	ldr	r3, [pc, #24]	; (8003fcc <vTaskInternalSetTimeOutState+0x24>)
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <vTaskInternalSetTimeOutState+0x28>)
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	605a      	str	r2, [r3, #4]
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	20000d64 	.word	0x20000d64
 8003fd0:	20000d50 	.word	0x20000d50

08003fd4 <xTaskCheckForTimeOut>:
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b088      	sub	sp, #32
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10a      	bne.n	8003ffa <xTaskCheckForTimeOut+0x26>
 8003fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe8:	f383 8811 	msr	BASEPRI, r3
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	613b      	str	r3, [r7, #16]
 8003ff6:	bf00      	nop
 8003ff8:	e7fe      	b.n	8003ff8 <xTaskCheckForTimeOut+0x24>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10a      	bne.n	8004016 <xTaskCheckForTimeOut+0x42>
 8004000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004004:	f383 8811 	msr	BASEPRI, r3
 8004008:	f3bf 8f6f 	isb	sy
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	bf00      	nop
 8004014:	e7fe      	b.n	8004014 <xTaskCheckForTimeOut+0x40>
 8004016:	f000 ff8d 	bl	8004f34 <vPortEnterCritical>
 800401a:	4b1d      	ldr	r3, [pc, #116]	; (8004090 <xTaskCheckForTimeOut+0xbc>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	61bb      	str	r3, [r7, #24]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004032:	d102      	bne.n	800403a <xTaskCheckForTimeOut+0x66>
 8004034:	2300      	movs	r3, #0
 8004036:	61fb      	str	r3, [r7, #28]
 8004038:	e023      	b.n	8004082 <xTaskCheckForTimeOut+0xae>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	4b15      	ldr	r3, [pc, #84]	; (8004094 <xTaskCheckForTimeOut+0xc0>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	429a      	cmp	r2, r3
 8004044:	d007      	beq.n	8004056 <xTaskCheckForTimeOut+0x82>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	429a      	cmp	r2, r3
 800404e:	d302      	bcc.n	8004056 <xTaskCheckForTimeOut+0x82>
 8004050:	2301      	movs	r3, #1
 8004052:	61fb      	str	r3, [r7, #28]
 8004054:	e015      	b.n	8004082 <xTaskCheckForTimeOut+0xae>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	429a      	cmp	r2, r3
 800405e:	d20b      	bcs.n	8004078 <xTaskCheckForTimeOut+0xa4>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	1ad2      	subs	r2, r2, r3
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f7ff ff9b 	bl	8003fa8 <vTaskInternalSetTimeOutState>
 8004072:	2300      	movs	r3, #0
 8004074:	61fb      	str	r3, [r7, #28]
 8004076:	e004      	b.n	8004082 <xTaskCheckForTimeOut+0xae>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	2200      	movs	r2, #0
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	2301      	movs	r3, #1
 8004080:	61fb      	str	r3, [r7, #28]
 8004082:	f000 ff87 	bl	8004f94 <vPortExitCritical>
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	4618      	mov	r0, r3
 800408a:	3720      	adds	r7, #32
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	20000d50 	.word	0x20000d50
 8004094:	20000d64 	.word	0x20000d64

08004098 <vTaskMissedYield>:
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
 800409c:	4b03      	ldr	r3, [pc, #12]	; (80040ac <vTaskMissedYield+0x14>)
 800409e:	2201      	movs	r2, #1
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	bf00      	nop
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	20000d60 	.word	0x20000d60

080040b0 <prvIdleTask>:
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	f000 f852 	bl	8004160 <prvCheckTasksWaitingTermination>
 80040bc:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <prvIdleTask+0x28>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d9f9      	bls.n	80040b8 <prvIdleTask+0x8>
 80040c4:	4b05      	ldr	r3, [pc, #20]	; (80040dc <prvIdleTask+0x2c>)
 80040c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040ca:	601a      	str	r2, [r3, #0]
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	f3bf 8f6f 	isb	sy
 80040d4:	e7f0      	b.n	80040b8 <prvIdleTask+0x8>
 80040d6:	bf00      	nop
 80040d8:	2000087c 	.word	0x2000087c
 80040dc:	e000ed04 	.word	0xe000ed04

080040e0 <prvInitialiseTaskLists>:
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	2300      	movs	r3, #0
 80040e8:	607b      	str	r3, [r7, #4]
 80040ea:	e00c      	b.n	8004106 <prvInitialiseTaskLists+0x26>
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	4613      	mov	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4413      	add	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4a12      	ldr	r2, [pc, #72]	; (8004140 <prvInitialiseTaskLists+0x60>)
 80040f8:	4413      	add	r3, r2
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fe fab6 	bl	800266c <vListInitialise>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3301      	adds	r3, #1
 8004104:	607b      	str	r3, [r7, #4]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b37      	cmp	r3, #55	; 0x37
 800410a:	d9ef      	bls.n	80040ec <prvInitialiseTaskLists+0xc>
 800410c:	480d      	ldr	r0, [pc, #52]	; (8004144 <prvInitialiseTaskLists+0x64>)
 800410e:	f7fe faad 	bl	800266c <vListInitialise>
 8004112:	480d      	ldr	r0, [pc, #52]	; (8004148 <prvInitialiseTaskLists+0x68>)
 8004114:	f7fe faaa 	bl	800266c <vListInitialise>
 8004118:	480c      	ldr	r0, [pc, #48]	; (800414c <prvInitialiseTaskLists+0x6c>)
 800411a:	f7fe faa7 	bl	800266c <vListInitialise>
 800411e:	480c      	ldr	r0, [pc, #48]	; (8004150 <prvInitialiseTaskLists+0x70>)
 8004120:	f7fe faa4 	bl	800266c <vListInitialise>
 8004124:	480b      	ldr	r0, [pc, #44]	; (8004154 <prvInitialiseTaskLists+0x74>)
 8004126:	f7fe faa1 	bl	800266c <vListInitialise>
 800412a:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <prvInitialiseTaskLists+0x78>)
 800412c:	4a05      	ldr	r2, [pc, #20]	; (8004144 <prvInitialiseTaskLists+0x64>)
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	4b0a      	ldr	r3, [pc, #40]	; (800415c <prvInitialiseTaskLists+0x7c>)
 8004132:	4a05      	ldr	r2, [pc, #20]	; (8004148 <prvInitialiseTaskLists+0x68>)
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	bf00      	nop
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	2000087c 	.word	0x2000087c
 8004144:	20000cdc 	.word	0x20000cdc
 8004148:	20000cf0 	.word	0x20000cf0
 800414c:	20000d0c 	.word	0x20000d0c
 8004150:	20000d20 	.word	0x20000d20
 8004154:	20000d38 	.word	0x20000d38
 8004158:	20000d04 	.word	0x20000d04
 800415c:	20000d08 	.word	0x20000d08

08004160 <prvCheckTasksWaitingTermination>:
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	e019      	b.n	800419c <prvCheckTasksWaitingTermination+0x3c>
 8004168:	f000 fee4 	bl	8004f34 <vPortEnterCritical>
 800416c:	4b10      	ldr	r3, [pc, #64]	; (80041b0 <prvCheckTasksWaitingTermination+0x50>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	607b      	str	r3, [r7, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3304      	adds	r3, #4
 8004178:	4618      	mov	r0, r3
 800417a:	f7fe fb01 	bl	8002780 <uxListRemove>
 800417e:	4b0d      	ldr	r3, [pc, #52]	; (80041b4 <prvCheckTasksWaitingTermination+0x54>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3b01      	subs	r3, #1
 8004184:	4a0b      	ldr	r2, [pc, #44]	; (80041b4 <prvCheckTasksWaitingTermination+0x54>)
 8004186:	6013      	str	r3, [r2, #0]
 8004188:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <prvCheckTasksWaitingTermination+0x58>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3b01      	subs	r3, #1
 800418e:	4a0a      	ldr	r2, [pc, #40]	; (80041b8 <prvCheckTasksWaitingTermination+0x58>)
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	f000 feff 	bl	8004f94 <vPortExitCritical>
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f810 	bl	80041bc <prvDeleteTCB>
 800419c:	4b06      	ldr	r3, [pc, #24]	; (80041b8 <prvCheckTasksWaitingTermination+0x58>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1e1      	bne.n	8004168 <prvCheckTasksWaitingTermination+0x8>
 80041a4:	bf00      	nop
 80041a6:	bf00      	nop
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20000d20 	.word	0x20000d20
 80041b4:	20000d4c 	.word	0x20000d4c
 80041b8:	20000d34 	.word	0x20000d34

080041bc <prvDeleteTCB>:
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3354      	adds	r3, #84	; 0x54
 80041c8:	4618      	mov	r0, r3
 80041ca:	f001 fbdf 	bl	800598c <_reclaim_reent>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d108      	bne.n	80041ea <prvDeleteTCB+0x2e>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041dc:	4618      	mov	r0, r3
 80041de:	f001 f897 	bl	8005310 <vPortFree>
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f001 f894 	bl	8005310 <vPortFree>
 80041e8:	e018      	b.n	800421c <prvDeleteTCB+0x60>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d103      	bne.n	80041fc <prvDeleteTCB+0x40>
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f001 f88b 	bl	8005310 <vPortFree>
 80041fa:	e00f      	b.n	800421c <prvDeleteTCB+0x60>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004202:	2b02      	cmp	r3, #2
 8004204:	d00a      	beq.n	800421c <prvDeleteTCB+0x60>
 8004206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420a:	f383 8811 	msr	BASEPRI, r3
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f3bf 8f4f 	dsb	sy
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	bf00      	nop
 800421a:	e7fe      	b.n	800421a <prvDeleteTCB+0x5e>
 800421c:	bf00      	nop
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <prvResetNextTaskUnblockTime>:
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	4b0c      	ldr	r3, [pc, #48]	; (800425c <prvResetNextTaskUnblockTime+0x38>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d104      	bne.n	800423e <prvResetNextTaskUnblockTime+0x1a>
 8004234:	4b0a      	ldr	r3, [pc, #40]	; (8004260 <prvResetNextTaskUnblockTime+0x3c>)
 8004236:	f04f 32ff 	mov.w	r2, #4294967295
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	e008      	b.n	8004250 <prvResetNextTaskUnblockTime+0x2c>
 800423e:	4b07      	ldr	r3, [pc, #28]	; (800425c <prvResetNextTaskUnblockTime+0x38>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	607b      	str	r3, [r7, #4]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	4a04      	ldr	r2, [pc, #16]	; (8004260 <prvResetNextTaskUnblockTime+0x3c>)
 800424e:	6013      	str	r3, [r2, #0]
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	20000d04 	.word	0x20000d04
 8004260:	20000d6c 	.word	0x20000d6c

08004264 <xTaskGetCurrentTaskHandle>:
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	4b05      	ldr	r3, [pc, #20]	; (8004280 <xTaskGetCurrentTaskHandle+0x1c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	607b      	str	r3, [r7, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4618      	mov	r0, r3
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	20000878 	.word	0x20000878

08004284 <xTaskGetSchedulerState>:
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <xTaskGetSchedulerState+0x34>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d102      	bne.n	8004298 <xTaskGetSchedulerState+0x14>
 8004292:	2301      	movs	r3, #1
 8004294:	607b      	str	r3, [r7, #4]
 8004296:	e008      	b.n	80042aa <xTaskGetSchedulerState+0x26>
 8004298:	4b08      	ldr	r3, [pc, #32]	; (80042bc <xTaskGetSchedulerState+0x38>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d102      	bne.n	80042a6 <xTaskGetSchedulerState+0x22>
 80042a0:	2302      	movs	r3, #2
 80042a2:	607b      	str	r3, [r7, #4]
 80042a4:	e001      	b.n	80042aa <xTaskGetSchedulerState+0x26>
 80042a6:	2300      	movs	r3, #0
 80042a8:	607b      	str	r3, [r7, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4618      	mov	r0, r3
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	20000d58 	.word	0x20000d58
 80042bc:	20000d74 	.word	0x20000d74

080042c0 <xTaskPriorityInherit>:
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	60bb      	str	r3, [r7, #8]
 80042cc:	2300      	movs	r3, #0
 80042ce:	60fb      	str	r3, [r7, #12]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d051      	beq.n	800437a <xTaskPriorityInherit+0xba>
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042da:	4b2a      	ldr	r3, [pc, #168]	; (8004384 <xTaskPriorityInherit+0xc4>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d241      	bcs.n	8004368 <xTaskPriorityInherit+0xa8>
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	db06      	blt.n	80042fa <xTaskPriorityInherit+0x3a>
 80042ec:	4b25      	ldr	r3, [pc, #148]	; (8004384 <xTaskPriorityInherit+0xc4>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	619a      	str	r2, [r3, #24]
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	6959      	ldr	r1, [r3, #20]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004302:	4613      	mov	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4a1f      	ldr	r2, [pc, #124]	; (8004388 <xTaskPriorityInherit+0xc8>)
 800430c:	4413      	add	r3, r2
 800430e:	4299      	cmp	r1, r3
 8004310:	d122      	bne.n	8004358 <xTaskPriorityInherit+0x98>
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	3304      	adds	r3, #4
 8004316:	4618      	mov	r0, r3
 8004318:	f7fe fa32 	bl	8002780 <uxListRemove>
 800431c:	4b19      	ldr	r3, [pc, #100]	; (8004384 <xTaskPriorityInherit+0xc4>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	62da      	str	r2, [r3, #44]	; 0x2c
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800432a:	4b18      	ldr	r3, [pc, #96]	; (800438c <xTaskPriorityInherit+0xcc>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d903      	bls.n	800433a <xTaskPriorityInherit+0x7a>
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004336:	4a15      	ldr	r2, [pc, #84]	; (800438c <xTaskPriorityInherit+0xcc>)
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800433e:	4613      	mov	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4413      	add	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4a10      	ldr	r2, [pc, #64]	; (8004388 <xTaskPriorityInherit+0xc8>)
 8004348:	441a      	add	r2, r3
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	3304      	adds	r3, #4
 800434e:	4619      	mov	r1, r3
 8004350:	4610      	mov	r0, r2
 8004352:	f7fe f9b8 	bl	80026c6 <vListInsertEnd>
 8004356:	e004      	b.n	8004362 <xTaskPriorityInherit+0xa2>
 8004358:	4b0a      	ldr	r3, [pc, #40]	; (8004384 <xTaskPriorityInherit+0xc4>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	62da      	str	r2, [r3, #44]	; 0x2c
 8004362:	2301      	movs	r3, #1
 8004364:	60fb      	str	r3, [r7, #12]
 8004366:	e008      	b.n	800437a <xTaskPriorityInherit+0xba>
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800436c:	4b05      	ldr	r3, [pc, #20]	; (8004384 <xTaskPriorityInherit+0xc4>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004372:	429a      	cmp	r2, r3
 8004374:	d201      	bcs.n	800437a <xTaskPriorityInherit+0xba>
 8004376:	2301      	movs	r3, #1
 8004378:	60fb      	str	r3, [r7, #12]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	20000878 	.word	0x20000878
 8004388:	2000087c 	.word	0x2000087c
 800438c:	20000d54 	.word	0x20000d54

08004390 <xTaskPriorityDisinherit>:
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	613b      	str	r3, [r7, #16]
 800439c:	2300      	movs	r3, #0
 800439e:	617b      	str	r3, [r7, #20]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d056      	beq.n	8004454 <xTaskPriorityDisinherit+0xc4>
 80043a6:	4b2e      	ldr	r3, [pc, #184]	; (8004460 <xTaskPriorityDisinherit+0xd0>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d00a      	beq.n	80043c6 <xTaskPriorityDisinherit+0x36>
 80043b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	f3bf 8f6f 	isb	sy
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	60fb      	str	r3, [r7, #12]
 80043c2:	bf00      	nop
 80043c4:	e7fe      	b.n	80043c4 <xTaskPriorityDisinherit+0x34>
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10a      	bne.n	80043e4 <xTaskPriorityDisinherit+0x54>
 80043ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d2:	f383 8811 	msr	BASEPRI, r3
 80043d6:	f3bf 8f6f 	isb	sy
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	60bb      	str	r3, [r7, #8]
 80043e0:	bf00      	nop
 80043e2:	e7fe      	b.n	80043e2 <xTaskPriorityDisinherit+0x52>
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e8:	1e5a      	subs	r2, r3, #1
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	651a      	str	r2, [r3, #80]	; 0x50
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d02c      	beq.n	8004454 <xTaskPriorityDisinherit+0xc4>
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d128      	bne.n	8004454 <xTaskPriorityDisinherit+0xc4>
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	3304      	adds	r3, #4
 8004406:	4618      	mov	r0, r3
 8004408:	f7fe f9ba 	bl	8002780 <uxListRemove>
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	62da      	str	r2, [r3, #44]	; 0x2c
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004418:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	619a      	str	r2, [r3, #24]
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004424:	4b0f      	ldr	r3, [pc, #60]	; (8004464 <xTaskPriorityDisinherit+0xd4>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	429a      	cmp	r2, r3
 800442a:	d903      	bls.n	8004434 <xTaskPriorityDisinherit+0xa4>
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004430:	4a0c      	ldr	r2, [pc, #48]	; (8004464 <xTaskPriorityDisinherit+0xd4>)
 8004432:	6013      	str	r3, [r2, #0]
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004438:	4613      	mov	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4a09      	ldr	r2, [pc, #36]	; (8004468 <xTaskPriorityDisinherit+0xd8>)
 8004442:	441a      	add	r2, r3
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	3304      	adds	r3, #4
 8004448:	4619      	mov	r1, r3
 800444a:	4610      	mov	r0, r2
 800444c:	f7fe f93b 	bl	80026c6 <vListInsertEnd>
 8004450:	2301      	movs	r3, #1
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	4618      	mov	r0, r3
 8004458:	3718      	adds	r7, #24
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	20000878 	.word	0x20000878
 8004464:	20000d54 	.word	0x20000d54
 8004468:	2000087c 	.word	0x2000087c

0800446c <vTaskPriorityDisinheritAfterTimeout>:
 800446c:	b580      	push	{r7, lr}
 800446e:	b088      	sub	sp, #32
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	61bb      	str	r3, [r7, #24]
 800447a:	2301      	movs	r3, #1
 800447c:	617b      	str	r3, [r7, #20]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d06a      	beq.n	800455a <vTaskPriorityDisinheritAfterTimeout+0xee>
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10a      	bne.n	80044a2 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800448c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004490:	f383 8811 	msr	BASEPRI, r3
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	60fb      	str	r3, [r7, #12]
 800449e:	bf00      	nop
 80044a0:	e7fe      	b.n	80044a0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d902      	bls.n	80044b2 <vTaskPriorityDisinheritAfterTimeout+0x46>
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	61fb      	str	r3, [r7, #28]
 80044b0:	e002      	b.n	80044b8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b6:	61fb      	str	r3, [r7, #28]
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	69fa      	ldr	r2, [r7, #28]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d04b      	beq.n	800455a <vTaskPriorityDisinheritAfterTimeout+0xee>
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d146      	bne.n	800455a <vTaskPriorityDisinheritAfterTimeout+0xee>
 80044cc:	4b25      	ldr	r3, [pc, #148]	; (8004564 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d10a      	bne.n	80044ec <vTaskPriorityDisinheritAfterTimeout+0x80>
 80044d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044da:	f383 8811 	msr	BASEPRI, r3
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	60bb      	str	r3, [r7, #8]
 80044e8:	bf00      	nop
 80044ea:	e7fe      	b.n	80044ea <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	613b      	str	r3, [r7, #16]
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	69fa      	ldr	r2, [r7, #28]
 80044f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	db04      	blt.n	800450a <vTaskPriorityDisinheritAfterTimeout+0x9e>
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	619a      	str	r2, [r3, #24]
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	6959      	ldr	r1, [r3, #20]
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	4613      	mov	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4a13      	ldr	r2, [pc, #76]	; (8004568 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800451a:	4413      	add	r3, r2
 800451c:	4299      	cmp	r1, r3
 800451e:	d11c      	bne.n	800455a <vTaskPriorityDisinheritAfterTimeout+0xee>
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	3304      	adds	r3, #4
 8004524:	4618      	mov	r0, r3
 8004526:	f7fe f92b 	bl	8002780 <uxListRemove>
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452e:	4b0f      	ldr	r3, [pc, #60]	; (800456c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	429a      	cmp	r2, r3
 8004534:	d903      	bls.n	800453e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453a:	4a0c      	ldr	r2, [pc, #48]	; (800456c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004542:	4613      	mov	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4a07      	ldr	r2, [pc, #28]	; (8004568 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800454c:	441a      	add	r2, r3
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	3304      	adds	r3, #4
 8004552:	4619      	mov	r1, r3
 8004554:	4610      	mov	r0, r2
 8004556:	f7fe f8b6 	bl	80026c6 <vListInsertEnd>
 800455a:	bf00      	nop
 800455c:	3720      	adds	r7, #32
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	20000878 	.word	0x20000878
 8004568:	2000087c 	.word	0x2000087c
 800456c:	20000d54 	.word	0x20000d54

08004570 <pvTaskIncrementMutexHeldCount>:
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
 8004574:	4b07      	ldr	r3, [pc, #28]	; (8004594 <pvTaskIncrementMutexHeldCount+0x24>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d004      	beq.n	8004586 <pvTaskIncrementMutexHeldCount+0x16>
 800457c:	4b05      	ldr	r3, [pc, #20]	; (8004594 <pvTaskIncrementMutexHeldCount+0x24>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004582:	3201      	adds	r2, #1
 8004584:	651a      	str	r2, [r3, #80]	; 0x50
 8004586:	4b03      	ldr	r3, [pc, #12]	; (8004594 <pvTaskIncrementMutexHeldCount+0x24>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	20000878 	.word	0x20000878

08004598 <prvAddCurrentTaskToDelayedList>:
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
 80045a2:	4b21      	ldr	r3, [pc, #132]	; (8004628 <prvAddCurrentTaskToDelayedList+0x90>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	4b20      	ldr	r3, [pc, #128]	; (800462c <prvAddCurrentTaskToDelayedList+0x94>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	3304      	adds	r3, #4
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fe f8e6 	bl	8002780 <uxListRemove>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ba:	d10a      	bne.n	80045d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d007      	beq.n	80045d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80045c2:	4b1a      	ldr	r3, [pc, #104]	; (800462c <prvAddCurrentTaskToDelayedList+0x94>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	3304      	adds	r3, #4
 80045c8:	4619      	mov	r1, r3
 80045ca:	4819      	ldr	r0, [pc, #100]	; (8004630 <prvAddCurrentTaskToDelayedList+0x98>)
 80045cc:	f7fe f87b 	bl	80026c6 <vListInsertEnd>
 80045d0:	e026      	b.n	8004620 <prvAddCurrentTaskToDelayedList+0x88>
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4413      	add	r3, r2
 80045d8:	60bb      	str	r3, [r7, #8]
 80045da:	4b14      	ldr	r3, [pc, #80]	; (800462c <prvAddCurrentTaskToDelayedList+0x94>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	605a      	str	r2, [r3, #4]
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d209      	bcs.n	80045fe <prvAddCurrentTaskToDelayedList+0x66>
 80045ea:	4b12      	ldr	r3, [pc, #72]	; (8004634 <prvAddCurrentTaskToDelayedList+0x9c>)
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	4b0f      	ldr	r3, [pc, #60]	; (800462c <prvAddCurrentTaskToDelayedList+0x94>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3304      	adds	r3, #4
 80045f4:	4619      	mov	r1, r3
 80045f6:	4610      	mov	r0, r2
 80045f8:	f7fe f889 	bl	800270e <vListInsert>
 80045fc:	e010      	b.n	8004620 <prvAddCurrentTaskToDelayedList+0x88>
 80045fe:	4b0e      	ldr	r3, [pc, #56]	; (8004638 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	4b0a      	ldr	r3, [pc, #40]	; (800462c <prvAddCurrentTaskToDelayedList+0x94>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3304      	adds	r3, #4
 8004608:	4619      	mov	r1, r3
 800460a:	4610      	mov	r0, r2
 800460c:	f7fe f87f 	bl	800270e <vListInsert>
 8004610:	4b0a      	ldr	r3, [pc, #40]	; (800463c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	429a      	cmp	r2, r3
 8004618:	d202      	bcs.n	8004620 <prvAddCurrentTaskToDelayedList+0x88>
 800461a:	4a08      	ldr	r2, [pc, #32]	; (800463c <prvAddCurrentTaskToDelayedList+0xa4>)
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	6013      	str	r3, [r2, #0]
 8004620:	bf00      	nop
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	20000d50 	.word	0x20000d50
 800462c:	20000878 	.word	0x20000878
 8004630:	20000d38 	.word	0x20000d38
 8004634:	20000d08 	.word	0x20000d08
 8004638:	20000d04 	.word	0x20000d04
 800463c:	20000d6c 	.word	0x20000d6c

08004640 <xTimerCreateTimerTask>:
 8004640:	b580      	push	{r7, lr}
 8004642:	b08a      	sub	sp, #40	; 0x28
 8004644:	af04      	add	r7, sp, #16
 8004646:	2300      	movs	r3, #0
 8004648:	617b      	str	r3, [r7, #20]
 800464a:	f000 fb07 	bl	8004c5c <prvCheckForValidListAndQueue>
 800464e:	4b1c      	ldr	r3, [pc, #112]	; (80046c0 <xTimerCreateTimerTask+0x80>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d021      	beq.n	800469a <xTimerCreateTimerTask+0x5a>
 8004656:	2300      	movs	r3, #0
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	2300      	movs	r3, #0
 800465c:	60bb      	str	r3, [r7, #8]
 800465e:	1d3a      	adds	r2, r7, #4
 8004660:	f107 0108 	add.w	r1, r7, #8
 8004664:	f107 030c 	add.w	r3, r7, #12
 8004668:	4618      	mov	r0, r3
 800466a:	f7fd ffe5 	bl	8002638 <vApplicationGetTimerTaskMemory>
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	9202      	str	r2, [sp, #8]
 8004676:	9301      	str	r3, [sp, #4]
 8004678:	2302      	movs	r3, #2
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	2300      	movs	r3, #0
 800467e:	460a      	mov	r2, r1
 8004680:	4910      	ldr	r1, [pc, #64]	; (80046c4 <xTimerCreateTimerTask+0x84>)
 8004682:	4811      	ldr	r0, [pc, #68]	; (80046c8 <xTimerCreateTimerTask+0x88>)
 8004684:	f7fe ffa6 	bl	80035d4 <xTaskCreateStatic>
 8004688:	4603      	mov	r3, r0
 800468a:	4a10      	ldr	r2, [pc, #64]	; (80046cc <xTimerCreateTimerTask+0x8c>)
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	4b0f      	ldr	r3, [pc, #60]	; (80046cc <xTimerCreateTimerTask+0x8c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <xTimerCreateTimerTask+0x5a>
 8004696:	2301      	movs	r3, #1
 8004698:	617b      	str	r3, [r7, #20]
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10a      	bne.n	80046b6 <xTimerCreateTimerTask+0x76>
 80046a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a4:	f383 8811 	msr	BASEPRI, r3
 80046a8:	f3bf 8f6f 	isb	sy
 80046ac:	f3bf 8f4f 	dsb	sy
 80046b0:	613b      	str	r3, [r7, #16]
 80046b2:	bf00      	nop
 80046b4:	e7fe      	b.n	80046b4 <xTimerCreateTimerTask+0x74>
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	4618      	mov	r0, r3
 80046ba:	3718      	adds	r7, #24
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	20000da8 	.word	0x20000da8
 80046c4:	080065a8 	.word	0x080065a8
 80046c8:	08004805 	.word	0x08004805
 80046cc:	20000dac 	.word	0x20000dac

080046d0 <xTimerGenericCommand>:
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b08a      	sub	sp, #40	; 0x28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
 80046dc:	603b      	str	r3, [r7, #0]
 80046de:	2300      	movs	r3, #0
 80046e0:	627b      	str	r3, [r7, #36]	; 0x24
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10a      	bne.n	80046fe <xTimerGenericCommand+0x2e>
 80046e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ec:	f383 8811 	msr	BASEPRI, r3
 80046f0:	f3bf 8f6f 	isb	sy
 80046f4:	f3bf 8f4f 	dsb	sy
 80046f8:	623b      	str	r3, [r7, #32]
 80046fa:	bf00      	nop
 80046fc:	e7fe      	b.n	80046fc <xTimerGenericCommand+0x2c>
 80046fe:	4b1a      	ldr	r3, [pc, #104]	; (8004768 <xTimerGenericCommand+0x98>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d02a      	beq.n	800475c <xTimerGenericCommand+0x8c>
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	613b      	str	r3, [r7, #16]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	617b      	str	r3, [r7, #20]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	61bb      	str	r3, [r7, #24]
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2b05      	cmp	r3, #5
 8004716:	dc18      	bgt.n	800474a <xTimerGenericCommand+0x7a>
 8004718:	f7ff fdb4 	bl	8004284 <xTaskGetSchedulerState>
 800471c:	4603      	mov	r3, r0
 800471e:	2b02      	cmp	r3, #2
 8004720:	d109      	bne.n	8004736 <xTimerGenericCommand+0x66>
 8004722:	4b11      	ldr	r3, [pc, #68]	; (8004768 <xTimerGenericCommand+0x98>)
 8004724:	6818      	ldr	r0, [r3, #0]
 8004726:	f107 0110 	add.w	r1, r7, #16
 800472a:	2300      	movs	r3, #0
 800472c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800472e:	f7fe fa45 	bl	8002bbc <xQueueGenericSend>
 8004732:	6278      	str	r0, [r7, #36]	; 0x24
 8004734:	e012      	b.n	800475c <xTimerGenericCommand+0x8c>
 8004736:	4b0c      	ldr	r3, [pc, #48]	; (8004768 <xTimerGenericCommand+0x98>)
 8004738:	6818      	ldr	r0, [r3, #0]
 800473a:	f107 0110 	add.w	r1, r7, #16
 800473e:	2300      	movs	r3, #0
 8004740:	2200      	movs	r2, #0
 8004742:	f7fe fa3b 	bl	8002bbc <xQueueGenericSend>
 8004746:	6278      	str	r0, [r7, #36]	; 0x24
 8004748:	e008      	b.n	800475c <xTimerGenericCommand+0x8c>
 800474a:	4b07      	ldr	r3, [pc, #28]	; (8004768 <xTimerGenericCommand+0x98>)
 800474c:	6818      	ldr	r0, [r3, #0]
 800474e:	f107 0110 	add.w	r1, r7, #16
 8004752:	2300      	movs	r3, #0
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	f7fe fb2f 	bl	8002db8 <xQueueGenericSendFromISR>
 800475a:	6278      	str	r0, [r7, #36]	; 0x24
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	4618      	mov	r0, r3
 8004760:	3728      	adds	r7, #40	; 0x28
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	20000da8 	.word	0x20000da8

0800476c <prvProcessExpiredTimer>:
 800476c:	b580      	push	{r7, lr}
 800476e:	b088      	sub	sp, #32
 8004770:	af02      	add	r7, sp, #8
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
 8004776:	4b22      	ldr	r3, [pc, #136]	; (8004800 <prvProcessExpiredTimer+0x94>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	3304      	adds	r3, #4
 8004784:	4618      	mov	r0, r3
 8004786:	f7fd fffb 	bl	8002780 <uxListRemove>
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004790:	f003 0304 	and.w	r3, r3, #4
 8004794:	2b00      	cmp	r3, #0
 8004796:	d022      	beq.n	80047de <prvProcessExpiredTimer+0x72>
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	699a      	ldr	r2, [r3, #24]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	18d1      	adds	r1, r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	6978      	ldr	r0, [r7, #20]
 80047a6:	f000 f8d1 	bl	800494c <prvInsertTimerInActiveList>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d01f      	beq.n	80047f0 <prvProcessExpiredTimer+0x84>
 80047b0:	2300      	movs	r3, #0
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	2300      	movs	r3, #0
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	2100      	movs	r1, #0
 80047ba:	6978      	ldr	r0, [r7, #20]
 80047bc:	f7ff ff88 	bl	80046d0 <xTimerGenericCommand>
 80047c0:	6138      	str	r0, [r7, #16]
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d113      	bne.n	80047f0 <prvProcessExpiredTimer+0x84>
 80047c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047cc:	f383 8811 	msr	BASEPRI, r3
 80047d0:	f3bf 8f6f 	isb	sy
 80047d4:	f3bf 8f4f 	dsb	sy
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	bf00      	nop
 80047dc:	e7fe      	b.n	80047dc <prvProcessExpiredTimer+0x70>
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047e4:	f023 0301 	bic.w	r3, r3, #1
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	6978      	ldr	r0, [r7, #20]
 80047f6:	4798      	blx	r3
 80047f8:	bf00      	nop
 80047fa:	3718      	adds	r7, #24
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	20000da0 	.word	0x20000da0

08004804 <prvTimerTask>:
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	f107 0308 	add.w	r3, r7, #8
 8004810:	4618      	mov	r0, r3
 8004812:	f000 f857 	bl	80048c4 <prvGetNextExpireTime>
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	4619      	mov	r1, r3
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 f803 	bl	8004828 <prvProcessTimerOrBlockTask>
 8004822:	f000 f8d5 	bl	80049d0 <prvProcessReceivedCommands>
 8004826:	e7f1      	b.n	800480c <prvTimerTask+0x8>

08004828 <prvProcessTimerOrBlockTask>:
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
 8004832:	f7ff f92b 	bl	8003a8c <vTaskSuspendAll>
 8004836:	f107 0308 	add.w	r3, r7, #8
 800483a:	4618      	mov	r0, r3
 800483c:	f000 f866 	bl	800490c <prvSampleTimeNow>
 8004840:	60f8      	str	r0, [r7, #12]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d130      	bne.n	80048aa <prvProcessTimerOrBlockTask+0x82>
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10a      	bne.n	8004864 <prvProcessTimerOrBlockTask+0x3c>
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	429a      	cmp	r2, r3
 8004854:	d806      	bhi.n	8004864 <prvProcessTimerOrBlockTask+0x3c>
 8004856:	f7ff f927 	bl	8003aa8 <xTaskResumeAll>
 800485a:	68f9      	ldr	r1, [r7, #12]
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f7ff ff85 	bl	800476c <prvProcessExpiredTimer>
 8004862:	e024      	b.n	80048ae <prvProcessTimerOrBlockTask+0x86>
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d008      	beq.n	800487c <prvProcessTimerOrBlockTask+0x54>
 800486a:	4b13      	ldr	r3, [pc, #76]	; (80048b8 <prvProcessTimerOrBlockTask+0x90>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <prvProcessTimerOrBlockTask+0x50>
 8004874:	2301      	movs	r3, #1
 8004876:	e000      	b.n	800487a <prvProcessTimerOrBlockTask+0x52>
 8004878:	2300      	movs	r3, #0
 800487a:	603b      	str	r3, [r7, #0]
 800487c:	4b0f      	ldr	r3, [pc, #60]	; (80048bc <prvProcessTimerOrBlockTask+0x94>)
 800487e:	6818      	ldr	r0, [r3, #0]
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	4619      	mov	r1, r3
 800488a:	f7fe fe6f 	bl	800356c <vQueueWaitForMessageRestricted>
 800488e:	f7ff f90b 	bl	8003aa8 <xTaskResumeAll>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10a      	bne.n	80048ae <prvProcessTimerOrBlockTask+0x86>
 8004898:	4b09      	ldr	r3, [pc, #36]	; (80048c0 <prvProcessTimerOrBlockTask+0x98>)
 800489a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	f3bf 8f4f 	dsb	sy
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	e001      	b.n	80048ae <prvProcessTimerOrBlockTask+0x86>
 80048aa:	f7ff f8fd 	bl	8003aa8 <xTaskResumeAll>
 80048ae:	bf00      	nop
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	20000da4 	.word	0x20000da4
 80048bc:	20000da8 	.word	0x20000da8
 80048c0:	e000ed04 	.word	0xe000ed04

080048c4 <prvGetNextExpireTime>:
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	4b0e      	ldr	r3, [pc, #56]	; (8004908 <prvGetNextExpireTime+0x44>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <prvGetNextExpireTime+0x16>
 80048d6:	2201      	movs	r2, #1
 80048d8:	e000      	b.n	80048dc <prvGetNextExpireTime+0x18>
 80048da:	2200      	movs	r2, #0
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d105      	bne.n	80048f4 <prvGetNextExpireTime+0x30>
 80048e8:	4b07      	ldr	r3, [pc, #28]	; (8004908 <prvGetNextExpireTime+0x44>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	60fb      	str	r3, [r7, #12]
 80048f2:	e001      	b.n	80048f8 <prvGetNextExpireTime+0x34>
 80048f4:	2300      	movs	r3, #0
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4618      	mov	r0, r3
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	20000da0 	.word	0x20000da0

0800490c <prvSampleTimeNow>:
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	f7ff f966 	bl	8003be4 <xTaskGetTickCount>
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	4b0b      	ldr	r3, [pc, #44]	; (8004948 <prvSampleTimeNow+0x3c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	429a      	cmp	r2, r3
 8004922:	d205      	bcs.n	8004930 <prvSampleTimeNow+0x24>
 8004924:	f000 f936 	bl	8004b94 <prvSwitchTimerLists>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	e002      	b.n	8004936 <prvSampleTimeNow+0x2a>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	4a04      	ldr	r2, [pc, #16]	; (8004948 <prvSampleTimeNow+0x3c>)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6013      	str	r3, [r2, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	20000db0 	.word	0x20000db0

0800494c <prvInsertTimerInActiveList>:
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
 8004958:	603b      	str	r3, [r7, #0]
 800495a:	2300      	movs	r3, #0
 800495c:	617b      	str	r3, [r7, #20]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	605a      	str	r2, [r3, #4]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	611a      	str	r2, [r3, #16]
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	429a      	cmp	r2, r3
 8004970:	d812      	bhi.n	8004998 <prvInsertTimerInActiveList+0x4c>
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	1ad2      	subs	r2, r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	429a      	cmp	r2, r3
 800497e:	d302      	bcc.n	8004986 <prvInsertTimerInActiveList+0x3a>
 8004980:	2301      	movs	r3, #1
 8004982:	617b      	str	r3, [r7, #20]
 8004984:	e01b      	b.n	80049be <prvInsertTimerInActiveList+0x72>
 8004986:	4b10      	ldr	r3, [pc, #64]	; (80049c8 <prvInsertTimerInActiveList+0x7c>)
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	3304      	adds	r3, #4
 800498e:	4619      	mov	r1, r3
 8004990:	4610      	mov	r0, r2
 8004992:	f7fd febc 	bl	800270e <vListInsert>
 8004996:	e012      	b.n	80049be <prvInsertTimerInActiveList+0x72>
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	429a      	cmp	r2, r3
 800499e:	d206      	bcs.n	80049ae <prvInsertTimerInActiveList+0x62>
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d302      	bcc.n	80049ae <prvInsertTimerInActiveList+0x62>
 80049a8:	2301      	movs	r3, #1
 80049aa:	617b      	str	r3, [r7, #20]
 80049ac:	e007      	b.n	80049be <prvInsertTimerInActiveList+0x72>
 80049ae:	4b07      	ldr	r3, [pc, #28]	; (80049cc <prvInsertTimerInActiveList+0x80>)
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	3304      	adds	r3, #4
 80049b6:	4619      	mov	r1, r3
 80049b8:	4610      	mov	r0, r2
 80049ba:	f7fd fea8 	bl	800270e <vListInsert>
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	4618      	mov	r0, r3
 80049c2:	3718      	adds	r7, #24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	20000da4 	.word	0x20000da4
 80049cc:	20000da0 	.word	0x20000da0

080049d0 <prvProcessReceivedCommands>:
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b08e      	sub	sp, #56	; 0x38
 80049d4:	af02      	add	r7, sp, #8
 80049d6:	e0ca      	b.n	8004b6e <prvProcessReceivedCommands+0x19e>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	da18      	bge.n	8004a10 <prvProcessReceivedCommands+0x40>
 80049de:	1d3b      	adds	r3, r7, #4
 80049e0:	3304      	adds	r3, #4
 80049e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10a      	bne.n	8004a00 <prvProcessReceivedCommands+0x30>
 80049ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ee:	f383 8811 	msr	BASEPRI, r3
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	61fb      	str	r3, [r7, #28]
 80049fc:	bf00      	nop
 80049fe:	e7fe      	b.n	80049fe <prvProcessReceivedCommands+0x2e>
 8004a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a06:	6850      	ldr	r0, [r2, #4]
 8004a08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a0a:	6892      	ldr	r2, [r2, #8]
 8004a0c:	4611      	mov	r1, r2
 8004a0e:	4798      	blx	r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f2c0 80ab 	blt.w	8004b6e <prvProcessReceivedCommands+0x19e>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d004      	beq.n	8004a2e <prvProcessReceivedCommands+0x5e>
 8004a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a26:	3304      	adds	r3, #4
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7fd fea9 	bl	8002780 <uxListRemove>
 8004a2e:	463b      	mov	r3, r7
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7ff ff6b 	bl	800490c <prvSampleTimeNow>
 8004a36:	6278      	str	r0, [r7, #36]	; 0x24
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b09      	cmp	r3, #9
 8004a3c:	f200 8096 	bhi.w	8004b6c <prvProcessReceivedCommands+0x19c>
 8004a40:	a201      	add	r2, pc, #4	; (adr r2, 8004a48 <prvProcessReceivedCommands+0x78>)
 8004a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a46:	bf00      	nop
 8004a48:	08004a71 	.word	0x08004a71
 8004a4c:	08004a71 	.word	0x08004a71
 8004a50:	08004a71 	.word	0x08004a71
 8004a54:	08004ae5 	.word	0x08004ae5
 8004a58:	08004af9 	.word	0x08004af9
 8004a5c:	08004b43 	.word	0x08004b43
 8004a60:	08004a71 	.word	0x08004a71
 8004a64:	08004a71 	.word	0x08004a71
 8004a68:	08004ae5 	.word	0x08004ae5
 8004a6c:	08004af9 	.word	0x08004af9
 8004a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a76:	f043 0301 	orr.w	r3, r3, #1
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	18d1      	adds	r1, r2, r3
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a90:	f7ff ff5c 	bl	800494c <prvInsertTimerInActiveList>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d069      	beq.n	8004b6e <prvProcessReceivedCommands+0x19e>
 8004a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aa0:	4798      	blx	r3
 8004aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d05e      	beq.n	8004b6e <prvProcessReceivedCommands+0x19e>
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	441a      	add	r2, r3
 8004ab8:	2300      	movs	r3, #0
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	2300      	movs	r3, #0
 8004abe:	2100      	movs	r1, #0
 8004ac0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ac2:	f7ff fe05 	bl	80046d0 <xTimerGenericCommand>
 8004ac6:	6238      	str	r0, [r7, #32]
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d14f      	bne.n	8004b6e <prvProcessReceivedCommands+0x19e>
 8004ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	61bb      	str	r3, [r7, #24]
 8004ae0:	bf00      	nop
 8004ae2:	e7fe      	b.n	8004ae2 <prvProcessReceivedCommands+0x112>
 8004ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004aea:	f023 0301 	bic.w	r3, r3, #1
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004af6:	e03a      	b.n	8004b6e <prvProcessReceivedCommands+0x19e>
 8004af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004afe:	f043 0301 	orr.w	r3, r3, #1
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0e:	619a      	str	r2, [r3, #24]
 8004b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10a      	bne.n	8004b2e <prvProcessReceivedCommands+0x15e>
 8004b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1c:	f383 8811 	msr	BASEPRI, r3
 8004b20:	f3bf 8f6f 	isb	sy
 8004b24:	f3bf 8f4f 	dsb	sy
 8004b28:	617b      	str	r3, [r7, #20]
 8004b2a:	bf00      	nop
 8004b2c:	e7fe      	b.n	8004b2c <prvProcessReceivedCommands+0x15c>
 8004b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b30:	699a      	ldr	r2, [r3, #24]
 8004b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b34:	18d1      	adds	r1, r2, r3
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b3c:	f7ff ff06 	bl	800494c <prvInsertTimerInActiveList>
 8004b40:	e015      	b.n	8004b6e <prvProcessReceivedCommands+0x19e>
 8004b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d103      	bne.n	8004b58 <prvProcessReceivedCommands+0x188>
 8004b50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b52:	f000 fbdd 	bl	8005310 <vPortFree>
 8004b56:	e00a      	b.n	8004b6e <prvProcessReceivedCommands+0x19e>
 8004b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b5e:	f023 0301 	bic.w	r3, r3, #1
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004b6a:	e000      	b.n	8004b6e <prvProcessReceivedCommands+0x19e>
 8004b6c:	bf00      	nop
 8004b6e:	4b08      	ldr	r3, [pc, #32]	; (8004b90 <prvProcessReceivedCommands+0x1c0>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	1d39      	adds	r1, r7, #4
 8004b74:	2200      	movs	r2, #0
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fe f9ba 	bl	8002ef0 <xQueueReceive>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f47f af2a 	bne.w	80049d8 <prvProcessReceivedCommands+0x8>
 8004b84:	bf00      	nop
 8004b86:	bf00      	nop
 8004b88:	3730      	adds	r7, #48	; 0x30
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	20000da8 	.word	0x20000da8

08004b94 <prvSwitchTimerLists>:
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b088      	sub	sp, #32
 8004b98:	af02      	add	r7, sp, #8
 8004b9a:	e048      	b.n	8004c2e <prvSwitchTimerLists+0x9a>
 8004b9c:	4b2d      	ldr	r3, [pc, #180]	; (8004c54 <prvSwitchTimerLists+0xc0>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	613b      	str	r3, [r7, #16]
 8004ba6:	4b2b      	ldr	r3, [pc, #172]	; (8004c54 <prvSwitchTimerLists+0xc0>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7fd fde3 	bl	8002780 <uxListRemove>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	4798      	blx	r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d02e      	beq.n	8004c2e <prvSwitchTimerLists+0x9a>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	60bb      	str	r3, [r7, #8]
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d90e      	bls.n	8004c00 <prvSwitchTimerLists+0x6c>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	605a      	str	r2, [r3, #4]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	611a      	str	r2, [r3, #16]
 8004bee:	4b19      	ldr	r3, [pc, #100]	; (8004c54 <prvSwitchTimerLists+0xc0>)
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	3304      	adds	r3, #4
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	4610      	mov	r0, r2
 8004bfa:	f7fd fd88 	bl	800270e <vListInsert>
 8004bfe:	e016      	b.n	8004c2e <prvSwitchTimerLists+0x9a>
 8004c00:	2300      	movs	r3, #0
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	2300      	movs	r3, #0
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	2100      	movs	r1, #0
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f7ff fd60 	bl	80046d0 <xTimerGenericCommand>
 8004c10:	6078      	str	r0, [r7, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10a      	bne.n	8004c2e <prvSwitchTimerLists+0x9a>
 8004c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1c:	f383 8811 	msr	BASEPRI, r3
 8004c20:	f3bf 8f6f 	isb	sy
 8004c24:	f3bf 8f4f 	dsb	sy
 8004c28:	603b      	str	r3, [r7, #0]
 8004c2a:	bf00      	nop
 8004c2c:	e7fe      	b.n	8004c2c <prvSwitchTimerLists+0x98>
 8004c2e:	4b09      	ldr	r3, [pc, #36]	; (8004c54 <prvSwitchTimerLists+0xc0>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1b1      	bne.n	8004b9c <prvSwitchTimerLists+0x8>
 8004c38:	4b06      	ldr	r3, [pc, #24]	; (8004c54 <prvSwitchTimerLists+0xc0>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	617b      	str	r3, [r7, #20]
 8004c3e:	4b06      	ldr	r3, [pc, #24]	; (8004c58 <prvSwitchTimerLists+0xc4>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a04      	ldr	r2, [pc, #16]	; (8004c54 <prvSwitchTimerLists+0xc0>)
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	4a04      	ldr	r2, [pc, #16]	; (8004c58 <prvSwitchTimerLists+0xc4>)
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	6013      	str	r3, [r2, #0]
 8004c4c:	bf00      	nop
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	20000da0 	.word	0x20000da0
 8004c58:	20000da4 	.word	0x20000da4

08004c5c <prvCheckForValidListAndQueue>:
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	f000 f967 	bl	8004f34 <vPortEnterCritical>
 8004c66:	4b15      	ldr	r3, [pc, #84]	; (8004cbc <prvCheckForValidListAndQueue+0x60>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d120      	bne.n	8004cb0 <prvCheckForValidListAndQueue+0x54>
 8004c6e:	4814      	ldr	r0, [pc, #80]	; (8004cc0 <prvCheckForValidListAndQueue+0x64>)
 8004c70:	f7fd fcfc 	bl	800266c <vListInitialise>
 8004c74:	4813      	ldr	r0, [pc, #76]	; (8004cc4 <prvCheckForValidListAndQueue+0x68>)
 8004c76:	f7fd fcf9 	bl	800266c <vListInitialise>
 8004c7a:	4b13      	ldr	r3, [pc, #76]	; (8004cc8 <prvCheckForValidListAndQueue+0x6c>)
 8004c7c:	4a10      	ldr	r2, [pc, #64]	; (8004cc0 <prvCheckForValidListAndQueue+0x64>)
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	4b12      	ldr	r3, [pc, #72]	; (8004ccc <prvCheckForValidListAndQueue+0x70>)
 8004c82:	4a10      	ldr	r2, [pc, #64]	; (8004cc4 <prvCheckForValidListAndQueue+0x68>)
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	2300      	movs	r3, #0
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	4b11      	ldr	r3, [pc, #68]	; (8004cd0 <prvCheckForValidListAndQueue+0x74>)
 8004c8c:	4a11      	ldr	r2, [pc, #68]	; (8004cd4 <prvCheckForValidListAndQueue+0x78>)
 8004c8e:	2110      	movs	r1, #16
 8004c90:	200a      	movs	r0, #10
 8004c92:	f7fd fe07 	bl	80028a4 <xQueueGenericCreateStatic>
 8004c96:	4603      	mov	r3, r0
 8004c98:	4a08      	ldr	r2, [pc, #32]	; (8004cbc <prvCheckForValidListAndQueue+0x60>)
 8004c9a:	6013      	str	r3, [r2, #0]
 8004c9c:	4b07      	ldr	r3, [pc, #28]	; (8004cbc <prvCheckForValidListAndQueue+0x60>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d005      	beq.n	8004cb0 <prvCheckForValidListAndQueue+0x54>
 8004ca4:	4b05      	ldr	r3, [pc, #20]	; (8004cbc <prvCheckForValidListAndQueue+0x60>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	490b      	ldr	r1, [pc, #44]	; (8004cd8 <prvCheckForValidListAndQueue+0x7c>)
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fe fc34 	bl	8003518 <vQueueAddToRegistry>
 8004cb0:	f000 f970 	bl	8004f94 <vPortExitCritical>
 8004cb4:	bf00      	nop
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	20000da8 	.word	0x20000da8
 8004cc0:	20000d78 	.word	0x20000d78
 8004cc4:	20000d8c 	.word	0x20000d8c
 8004cc8:	20000da0 	.word	0x20000da0
 8004ccc:	20000da4 	.word	0x20000da4
 8004cd0:	20000e54 	.word	0x20000e54
 8004cd4:	20000db4 	.word	0x20000db4
 8004cd8:	080065b0 	.word	0x080065b0

08004cdc <pxPortInitialiseStack>:
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	3b04      	subs	r3, #4
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	3b04      	subs	r3, #4
 8004cfa:	60fb      	str	r3, [r7, #12]
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	f023 0201 	bic.w	r2, r3, #1
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	601a      	str	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	3b04      	subs	r3, #4
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	4a0c      	ldr	r2, [pc, #48]	; (8004d40 <pxPortInitialiseStack+0x64>)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	3b14      	subs	r3, #20
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	601a      	str	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	3b04      	subs	r3, #4
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f06f 0202 	mvn.w	r2, #2
 8004d2a:	601a      	str	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	3b20      	subs	r3, #32
 8004d30:	60fb      	str	r3, [r7, #12]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	4618      	mov	r0, r3
 8004d36:	3714      	adds	r7, #20
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	08004d45 	.word	0x08004d45

08004d44 <prvTaskExitError>:
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	607b      	str	r3, [r7, #4]
 8004d4e:	4b12      	ldr	r3, [pc, #72]	; (8004d98 <prvTaskExitError+0x54>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d56:	d00a      	beq.n	8004d6e <prvTaskExitError+0x2a>
 8004d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5c:	f383 8811 	msr	BASEPRI, r3
 8004d60:	f3bf 8f6f 	isb	sy
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	60fb      	str	r3, [r7, #12]
 8004d6a:	bf00      	nop
 8004d6c:	e7fe      	b.n	8004d6c <prvTaskExitError+0x28>
 8004d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	60bb      	str	r3, [r7, #8]
 8004d80:	bf00      	nop
 8004d82:	bf00      	nop
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d0fc      	beq.n	8004d84 <prvTaskExitError+0x40>
 8004d8a:	bf00      	nop
 8004d8c:	bf00      	nop
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	2000000c 	.word	0x2000000c
 8004d9c:	00000000 	.word	0x00000000

08004da0 <SVC_Handler>:
 8004da0:	4b07      	ldr	r3, [pc, #28]	; (8004dc0 <pxCurrentTCBConst2>)
 8004da2:	6819      	ldr	r1, [r3, #0]
 8004da4:	6808      	ldr	r0, [r1, #0]
 8004da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004daa:	f380 8809 	msr	PSP, r0
 8004dae:	f3bf 8f6f 	isb	sy
 8004db2:	f04f 0000 	mov.w	r0, #0
 8004db6:	f380 8811 	msr	BASEPRI, r0
 8004dba:	4770      	bx	lr
 8004dbc:	f3af 8000 	nop.w

08004dc0 <pxCurrentTCBConst2>:
 8004dc0:	20000878 	.word	0x20000878
 8004dc4:	bf00      	nop
 8004dc6:	bf00      	nop

08004dc8 <prvPortStartFirstTask>:
 8004dc8:	4808      	ldr	r0, [pc, #32]	; (8004dec <prvPortStartFirstTask+0x24>)
 8004dca:	6800      	ldr	r0, [r0, #0]
 8004dcc:	6800      	ldr	r0, [r0, #0]
 8004dce:	f380 8808 	msr	MSP, r0
 8004dd2:	f04f 0000 	mov.w	r0, #0
 8004dd6:	f380 8814 	msr	CONTROL, r0
 8004dda:	b662      	cpsie	i
 8004ddc:	b661      	cpsie	f
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	f3bf 8f6f 	isb	sy
 8004de6:	df00      	svc	0
 8004de8:	bf00      	nop
 8004dea:	bf00      	nop
 8004dec:	e000ed08 	.word	0xe000ed08

08004df0 <xPortStartScheduler>:
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	4b46      	ldr	r3, [pc, #280]	; (8004f10 <xPortStartScheduler+0x120>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a46      	ldr	r2, [pc, #280]	; (8004f14 <xPortStartScheduler+0x124>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d10a      	bne.n	8004e16 <xPortStartScheduler+0x26>
 8004e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e04:	f383 8811 	msr	BASEPRI, r3
 8004e08:	f3bf 8f6f 	isb	sy
 8004e0c:	f3bf 8f4f 	dsb	sy
 8004e10:	613b      	str	r3, [r7, #16]
 8004e12:	bf00      	nop
 8004e14:	e7fe      	b.n	8004e14 <xPortStartScheduler+0x24>
 8004e16:	4b3e      	ldr	r3, [pc, #248]	; (8004f10 <xPortStartScheduler+0x120>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a3f      	ldr	r2, [pc, #252]	; (8004f18 <xPortStartScheduler+0x128>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d10a      	bne.n	8004e36 <xPortStartScheduler+0x46>
 8004e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e24:	f383 8811 	msr	BASEPRI, r3
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	bf00      	nop
 8004e34:	e7fe      	b.n	8004e34 <xPortStartScheduler+0x44>
 8004e36:	4b39      	ldr	r3, [pc, #228]	; (8004f1c <xPortStartScheduler+0x12c>)
 8004e38:	617b      	str	r3, [r7, #20]
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	607b      	str	r3, [r7, #4]
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	22ff      	movs	r2, #255	; 0xff
 8004e46:	701a      	strb	r2, [r3, #0]
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	70fb      	strb	r3, [r7, #3]
 8004e50:	78fb      	ldrb	r3, [r7, #3]
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e58:	b2da      	uxtb	r2, r3
 8004e5a:	4b31      	ldr	r3, [pc, #196]	; (8004f20 <xPortStartScheduler+0x130>)
 8004e5c:	701a      	strb	r2, [r3, #0]
 8004e5e:	4b31      	ldr	r3, [pc, #196]	; (8004f24 <xPortStartScheduler+0x134>)
 8004e60:	2207      	movs	r2, #7
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	e009      	b.n	8004e7a <xPortStartScheduler+0x8a>
 8004e66:	4b2f      	ldr	r3, [pc, #188]	; (8004f24 <xPortStartScheduler+0x134>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	4a2d      	ldr	r2, [pc, #180]	; (8004f24 <xPortStartScheduler+0x134>)
 8004e6e:	6013      	str	r3, [r2, #0]
 8004e70:	78fb      	ldrb	r3, [r7, #3]
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	005b      	lsls	r3, r3, #1
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	70fb      	strb	r3, [r7, #3]
 8004e7a:	78fb      	ldrb	r3, [r7, #3]
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e82:	2b80      	cmp	r3, #128	; 0x80
 8004e84:	d0ef      	beq.n	8004e66 <xPortStartScheduler+0x76>
 8004e86:	4b27      	ldr	r3, [pc, #156]	; (8004f24 <xPortStartScheduler+0x134>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f1c3 0307 	rsb	r3, r3, #7
 8004e8e:	2b04      	cmp	r3, #4
 8004e90:	d00a      	beq.n	8004ea8 <xPortStartScheduler+0xb8>
 8004e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	60bb      	str	r3, [r7, #8]
 8004ea4:	bf00      	nop
 8004ea6:	e7fe      	b.n	8004ea6 <xPortStartScheduler+0xb6>
 8004ea8:	4b1e      	ldr	r3, [pc, #120]	; (8004f24 <xPortStartScheduler+0x134>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	021b      	lsls	r3, r3, #8
 8004eae:	4a1d      	ldr	r2, [pc, #116]	; (8004f24 <xPortStartScheduler+0x134>)
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	4b1c      	ldr	r3, [pc, #112]	; (8004f24 <xPortStartScheduler+0x134>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004eba:	4a1a      	ldr	r2, [pc, #104]	; (8004f24 <xPortStartScheduler+0x134>)
 8004ebc:	6013      	str	r3, [r2, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	701a      	strb	r2, [r3, #0]
 8004ec6:	4b18      	ldr	r3, [pc, #96]	; (8004f28 <xPortStartScheduler+0x138>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a17      	ldr	r2, [pc, #92]	; (8004f28 <xPortStartScheduler+0x138>)
 8004ecc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	4b15      	ldr	r3, [pc, #84]	; (8004f28 <xPortStartScheduler+0x138>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a14      	ldr	r2, [pc, #80]	; (8004f28 <xPortStartScheduler+0x138>)
 8004ed8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004edc:	6013      	str	r3, [r2, #0]
 8004ede:	f000 f8dd 	bl	800509c <vPortSetupTimerInterrupt>
 8004ee2:	4b12      	ldr	r3, [pc, #72]	; (8004f2c <xPortStartScheduler+0x13c>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	f000 f8fc 	bl	80050e4 <vPortEnableVFP>
 8004eec:	4b10      	ldr	r3, [pc, #64]	; (8004f30 <xPortStartScheduler+0x140>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a0f      	ldr	r2, [pc, #60]	; (8004f30 <xPortStartScheduler+0x140>)
 8004ef2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004ef6:	6013      	str	r3, [r2, #0]
 8004ef8:	f7ff ff66 	bl	8004dc8 <prvPortStartFirstTask>
 8004efc:	f7fe ff3c 	bl	8003d78 <vTaskSwitchContext>
 8004f00:	f7ff ff20 	bl	8004d44 <prvTaskExitError>
 8004f04:	2300      	movs	r3, #0
 8004f06:	4618      	mov	r0, r3
 8004f08:	3718      	adds	r7, #24
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	e000ed00 	.word	0xe000ed00
 8004f14:	410fc271 	.word	0x410fc271
 8004f18:	410fc270 	.word	0x410fc270
 8004f1c:	e000e400 	.word	0xe000e400
 8004f20:	20000ea4 	.word	0x20000ea4
 8004f24:	20000ea8 	.word	0x20000ea8
 8004f28:	e000ed20 	.word	0xe000ed20
 8004f2c:	2000000c 	.word	0x2000000c
 8004f30:	e000ef34 	.word	0xe000ef34

08004f34 <vPortEnterCritical>:
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3e:	f383 8811 	msr	BASEPRI, r3
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	607b      	str	r3, [r7, #4]
 8004f4c:	bf00      	nop
 8004f4e:	4b0f      	ldr	r3, [pc, #60]	; (8004f8c <vPortEnterCritical+0x58>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3301      	adds	r3, #1
 8004f54:	4a0d      	ldr	r2, [pc, #52]	; (8004f8c <vPortEnterCritical+0x58>)
 8004f56:	6013      	str	r3, [r2, #0]
 8004f58:	4b0c      	ldr	r3, [pc, #48]	; (8004f8c <vPortEnterCritical+0x58>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d10f      	bne.n	8004f80 <vPortEnterCritical+0x4c>
 8004f60:	4b0b      	ldr	r3, [pc, #44]	; (8004f90 <vPortEnterCritical+0x5c>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <vPortEnterCritical+0x4c>
 8004f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6e:	f383 8811 	msr	BASEPRI, r3
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	f3bf 8f4f 	dsb	sy
 8004f7a:	603b      	str	r3, [r7, #0]
 8004f7c:	bf00      	nop
 8004f7e:	e7fe      	b.n	8004f7e <vPortEnterCritical+0x4a>
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	2000000c 	.word	0x2000000c
 8004f90:	e000ed04 	.word	0xe000ed04

08004f94 <vPortExitCritical>:
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	4b12      	ldr	r3, [pc, #72]	; (8004fe4 <vPortExitCritical+0x50>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10a      	bne.n	8004fb8 <vPortExitCritical+0x24>
 8004fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	607b      	str	r3, [r7, #4]
 8004fb4:	bf00      	nop
 8004fb6:	e7fe      	b.n	8004fb6 <vPortExitCritical+0x22>
 8004fb8:	4b0a      	ldr	r3, [pc, #40]	; (8004fe4 <vPortExitCritical+0x50>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	4a09      	ldr	r2, [pc, #36]	; (8004fe4 <vPortExitCritical+0x50>)
 8004fc0:	6013      	str	r3, [r2, #0]
 8004fc2:	4b08      	ldr	r3, [pc, #32]	; (8004fe4 <vPortExitCritical+0x50>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d105      	bne.n	8004fd6 <vPortExitCritical+0x42>
 8004fca:	2300      	movs	r3, #0
 8004fcc:	603b      	str	r3, [r7, #0]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	f383 8811 	msr	BASEPRI, r3
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	2000000c 	.word	0x2000000c
	...

08004ff0 <PendSV_Handler>:
 8004ff0:	f3ef 8009 	mrs	r0, PSP
 8004ff4:	f3bf 8f6f 	isb	sy
 8004ff8:	4b15      	ldr	r3, [pc, #84]	; (8005050 <pxCurrentTCBConst>)
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	f01e 0f10 	tst.w	lr, #16
 8005000:	bf08      	it	eq
 8005002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800500a:	6010      	str	r0, [r2, #0]
 800500c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005010:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005014:	f380 8811 	msr	BASEPRI, r0
 8005018:	f3bf 8f4f 	dsb	sy
 800501c:	f3bf 8f6f 	isb	sy
 8005020:	f7fe feaa 	bl	8003d78 <vTaskSwitchContext>
 8005024:	f04f 0000 	mov.w	r0, #0
 8005028:	f380 8811 	msr	BASEPRI, r0
 800502c:	bc09      	pop	{r0, r3}
 800502e:	6819      	ldr	r1, [r3, #0]
 8005030:	6808      	ldr	r0, [r1, #0]
 8005032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005036:	f01e 0f10 	tst.w	lr, #16
 800503a:	bf08      	it	eq
 800503c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005040:	f380 8809 	msr	PSP, r0
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	f3af 8000 	nop.w

08005050 <pxCurrentTCBConst>:
 8005050:	20000878 	.word	0x20000878
 8005054:	bf00      	nop
 8005056:	bf00      	nop

08005058 <xPortSysTickHandler>:
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005062:	f383 8811 	msr	BASEPRI, r3
 8005066:	f3bf 8f6f 	isb	sy
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	607b      	str	r3, [r7, #4]
 8005070:	bf00      	nop
 8005072:	f7fe fdc7 	bl	8003c04 <xTaskIncrementTick>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d003      	beq.n	8005084 <xPortSysTickHandler+0x2c>
 800507c:	4b06      	ldr	r3, [pc, #24]	; (8005098 <xPortSysTickHandler+0x40>)
 800507e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	2300      	movs	r3, #0
 8005086:	603b      	str	r3, [r7, #0]
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	f383 8811 	msr	BASEPRI, r3
 800508e:	bf00      	nop
 8005090:	bf00      	nop
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	e000ed04 	.word	0xe000ed04

0800509c <vPortSetupTimerInterrupt>:
 800509c:	b480      	push	{r7}
 800509e:	af00      	add	r7, sp, #0
 80050a0:	4b0b      	ldr	r3, [pc, #44]	; (80050d0 <vPortSetupTimerInterrupt+0x34>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	4b0b      	ldr	r3, [pc, #44]	; (80050d4 <vPortSetupTimerInterrupt+0x38>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	4b0a      	ldr	r3, [pc, #40]	; (80050d8 <vPortSetupTimerInterrupt+0x3c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a0a      	ldr	r2, [pc, #40]	; (80050dc <vPortSetupTimerInterrupt+0x40>)
 80050b2:	fba2 2303 	umull	r2, r3, r2, r3
 80050b6:	099b      	lsrs	r3, r3, #6
 80050b8:	4a09      	ldr	r2, [pc, #36]	; (80050e0 <vPortSetupTimerInterrupt+0x44>)
 80050ba:	3b01      	subs	r3, #1
 80050bc:	6013      	str	r3, [r2, #0]
 80050be:	4b04      	ldr	r3, [pc, #16]	; (80050d0 <vPortSetupTimerInterrupt+0x34>)
 80050c0:	2207      	movs	r2, #7
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	bf00      	nop
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	e000e010 	.word	0xe000e010
 80050d4:	e000e018 	.word	0xe000e018
 80050d8:	20000000 	.word	0x20000000
 80050dc:	10624dd3 	.word	0x10624dd3
 80050e0:	e000e014 	.word	0xe000e014

080050e4 <vPortEnableVFP>:
 80050e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80050f4 <vPortEnableVFP+0x10>
 80050e8:	6801      	ldr	r1, [r0, #0]
 80050ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80050ee:	6001      	str	r1, [r0, #0]
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	e000ed88 	.word	0xe000ed88

080050f8 <vPortValidateInterruptPriority>:
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	f3ef 8305 	mrs	r3, IPSR
 8005102:	60fb      	str	r3, [r7, #12]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2b0f      	cmp	r3, #15
 8005108:	d914      	bls.n	8005134 <vPortValidateInterruptPriority+0x3c>
 800510a:	4a17      	ldr	r2, [pc, #92]	; (8005168 <vPortValidateInterruptPriority+0x70>)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4413      	add	r3, r2
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	72fb      	strb	r3, [r7, #11]
 8005114:	4b15      	ldr	r3, [pc, #84]	; (800516c <vPortValidateInterruptPriority+0x74>)
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	7afa      	ldrb	r2, [r7, #11]
 800511a:	429a      	cmp	r2, r3
 800511c:	d20a      	bcs.n	8005134 <vPortValidateInterruptPriority+0x3c>
 800511e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	607b      	str	r3, [r7, #4]
 8005130:	bf00      	nop
 8005132:	e7fe      	b.n	8005132 <vPortValidateInterruptPriority+0x3a>
 8005134:	4b0e      	ldr	r3, [pc, #56]	; (8005170 <vPortValidateInterruptPriority+0x78>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800513c:	4b0d      	ldr	r3, [pc, #52]	; (8005174 <vPortValidateInterruptPriority+0x7c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	429a      	cmp	r2, r3
 8005142:	d90a      	bls.n	800515a <vPortValidateInterruptPriority+0x62>
 8005144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005148:	f383 8811 	msr	BASEPRI, r3
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	f3bf 8f4f 	dsb	sy
 8005154:	603b      	str	r3, [r7, #0]
 8005156:	bf00      	nop
 8005158:	e7fe      	b.n	8005158 <vPortValidateInterruptPriority+0x60>
 800515a:	bf00      	nop
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	e000e3f0 	.word	0xe000e3f0
 800516c:	20000ea4 	.word	0x20000ea4
 8005170:	e000ed0c 	.word	0xe000ed0c
 8005174:	20000ea8 	.word	0x20000ea8

08005178 <pvPortMalloc>:
 8005178:	b580      	push	{r7, lr}
 800517a:	b08a      	sub	sp, #40	; 0x28
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	2300      	movs	r3, #0
 8005182:	61fb      	str	r3, [r7, #28]
 8005184:	f7fe fc82 	bl	8003a8c <vTaskSuspendAll>
 8005188:	4b5b      	ldr	r3, [pc, #364]	; (80052f8 <pvPortMalloc+0x180>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <pvPortMalloc+0x1c>
 8005190:	f000 f920 	bl	80053d4 <prvHeapInit>
 8005194:	4b59      	ldr	r3, [pc, #356]	; (80052fc <pvPortMalloc+0x184>)
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4013      	ands	r3, r2
 800519c:	2b00      	cmp	r3, #0
 800519e:	f040 8093 	bne.w	80052c8 <pvPortMalloc+0x150>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d01d      	beq.n	80051e4 <pvPortMalloc+0x6c>
 80051a8:	2208      	movs	r2, #8
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4413      	add	r3, r2
 80051ae:	607b      	str	r3, [r7, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f003 0307 	and.w	r3, r3, #7
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d014      	beq.n	80051e4 <pvPortMalloc+0x6c>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f023 0307 	bic.w	r3, r3, #7
 80051c0:	3308      	adds	r3, #8
 80051c2:	607b      	str	r3, [r7, #4]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f003 0307 	and.w	r3, r3, #7
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00a      	beq.n	80051e4 <pvPortMalloc+0x6c>
 80051ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	617b      	str	r3, [r7, #20]
 80051e0:	bf00      	nop
 80051e2:	e7fe      	b.n	80051e2 <pvPortMalloc+0x6a>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d06e      	beq.n	80052c8 <pvPortMalloc+0x150>
 80051ea:	4b45      	ldr	r3, [pc, #276]	; (8005300 <pvPortMalloc+0x188>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d869      	bhi.n	80052c8 <pvPortMalloc+0x150>
 80051f4:	4b43      	ldr	r3, [pc, #268]	; (8005304 <pvPortMalloc+0x18c>)
 80051f6:	623b      	str	r3, [r7, #32]
 80051f8:	4b42      	ldr	r3, [pc, #264]	; (8005304 <pvPortMalloc+0x18c>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	627b      	str	r3, [r7, #36]	; 0x24
 80051fe:	e004      	b.n	800520a <pvPortMalloc+0x92>
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	623b      	str	r3, [r7, #32]
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	627b      	str	r3, [r7, #36]	; 0x24
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	429a      	cmp	r2, r3
 8005212:	d903      	bls.n	800521c <pvPortMalloc+0xa4>
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1f1      	bne.n	8005200 <pvPortMalloc+0x88>
 800521c:	4b36      	ldr	r3, [pc, #216]	; (80052f8 <pvPortMalloc+0x180>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005222:	429a      	cmp	r2, r3
 8005224:	d050      	beq.n	80052c8 <pvPortMalloc+0x150>
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2208      	movs	r2, #8
 800522c:	4413      	add	r3, r2
 800522e:	61fb      	str	r3, [r7, #28]
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	601a      	str	r2, [r3, #0]
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	1ad2      	subs	r2, r2, r3
 8005240:	2308      	movs	r3, #8
 8005242:	005b      	lsls	r3, r3, #1
 8005244:	429a      	cmp	r2, r3
 8005246:	d91f      	bls.n	8005288 <pvPortMalloc+0x110>
 8005248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4413      	add	r3, r2
 800524e:	61bb      	str	r3, [r7, #24]
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	f003 0307 	and.w	r3, r3, #7
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00a      	beq.n	8005270 <pvPortMalloc+0xf8>
 800525a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525e:	f383 8811 	msr	BASEPRI, r3
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	613b      	str	r3, [r7, #16]
 800526c:	bf00      	nop
 800526e:	e7fe      	b.n	800526e <pvPortMalloc+0xf6>
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	1ad2      	subs	r2, r2, r3
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	605a      	str	r2, [r3, #4]
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	605a      	str	r2, [r3, #4]
 8005282:	69b8      	ldr	r0, [r7, #24]
 8005284:	f000 f908 	bl	8005498 <prvInsertBlockIntoFreeList>
 8005288:	4b1d      	ldr	r3, [pc, #116]	; (8005300 <pvPortMalloc+0x188>)
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	4a1b      	ldr	r2, [pc, #108]	; (8005300 <pvPortMalloc+0x188>)
 8005294:	6013      	str	r3, [r2, #0]
 8005296:	4b1a      	ldr	r3, [pc, #104]	; (8005300 <pvPortMalloc+0x188>)
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	4b1b      	ldr	r3, [pc, #108]	; (8005308 <pvPortMalloc+0x190>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d203      	bcs.n	80052aa <pvPortMalloc+0x132>
 80052a2:	4b17      	ldr	r3, [pc, #92]	; (8005300 <pvPortMalloc+0x188>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a18      	ldr	r2, [pc, #96]	; (8005308 <pvPortMalloc+0x190>)
 80052a8:	6013      	str	r3, [r2, #0]
 80052aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	4b13      	ldr	r3, [pc, #76]	; (80052fc <pvPortMalloc+0x184>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	431a      	orrs	r2, r3
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	605a      	str	r2, [r3, #4]
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	2200      	movs	r2, #0
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	4b13      	ldr	r3, [pc, #76]	; (800530c <pvPortMalloc+0x194>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	3301      	adds	r3, #1
 80052c4:	4a11      	ldr	r2, [pc, #68]	; (800530c <pvPortMalloc+0x194>)
 80052c6:	6013      	str	r3, [r2, #0]
 80052c8:	f7fe fbee 	bl	8003aa8 <xTaskResumeAll>
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	f003 0307 	and.w	r3, r3, #7
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00a      	beq.n	80052ec <pvPortMalloc+0x174>
 80052d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	bf00      	nop
 80052ea:	e7fe      	b.n	80052ea <pvPortMalloc+0x172>
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	4618      	mov	r0, r3
 80052f0:	3728      	adds	r7, #40	; 0x28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	20004ab4 	.word	0x20004ab4
 80052fc:	20004ac8 	.word	0x20004ac8
 8005300:	20004ab8 	.word	0x20004ab8
 8005304:	20004aac 	.word	0x20004aac
 8005308:	20004abc 	.word	0x20004abc
 800530c:	20004ac0 	.word	0x20004ac0

08005310 <vPortFree>:
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	617b      	str	r3, [r7, #20]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d04d      	beq.n	80053be <vPortFree+0xae>
 8005322:	2308      	movs	r3, #8
 8005324:	425b      	negs	r3, r3
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	4413      	add	r3, r2
 800532a:	617b      	str	r3, [r7, #20]
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	613b      	str	r3, [r7, #16]
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	4b24      	ldr	r3, [pc, #144]	; (80053c8 <vPortFree+0xb8>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4013      	ands	r3, r2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10a      	bne.n	8005354 <vPortFree+0x44>
 800533e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005342:	f383 8811 	msr	BASEPRI, r3
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	60fb      	str	r3, [r7, #12]
 8005350:	bf00      	nop
 8005352:	e7fe      	b.n	8005352 <vPortFree+0x42>
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00a      	beq.n	8005372 <vPortFree+0x62>
 800535c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005360:	f383 8811 	msr	BASEPRI, r3
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	60bb      	str	r3, [r7, #8]
 800536e:	bf00      	nop
 8005370:	e7fe      	b.n	8005370 <vPortFree+0x60>
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	4b14      	ldr	r3, [pc, #80]	; (80053c8 <vPortFree+0xb8>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4013      	ands	r3, r2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d01e      	beq.n	80053be <vPortFree+0xae>
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d11a      	bne.n	80053be <vPortFree+0xae>
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	4b0e      	ldr	r3, [pc, #56]	; (80053c8 <vPortFree+0xb8>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	43db      	mvns	r3, r3
 8005392:	401a      	ands	r2, r3
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	605a      	str	r2, [r3, #4]
 8005398:	f7fe fb78 	bl	8003a8c <vTaskSuspendAll>
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	4b0a      	ldr	r3, [pc, #40]	; (80053cc <vPortFree+0xbc>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4413      	add	r3, r2
 80053a6:	4a09      	ldr	r2, [pc, #36]	; (80053cc <vPortFree+0xbc>)
 80053a8:	6013      	str	r3, [r2, #0]
 80053aa:	6938      	ldr	r0, [r7, #16]
 80053ac:	f000 f874 	bl	8005498 <prvInsertBlockIntoFreeList>
 80053b0:	4b07      	ldr	r3, [pc, #28]	; (80053d0 <vPortFree+0xc0>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	3301      	adds	r3, #1
 80053b6:	4a06      	ldr	r2, [pc, #24]	; (80053d0 <vPortFree+0xc0>)
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	f7fe fb75 	bl	8003aa8 <xTaskResumeAll>
 80053be:	bf00      	nop
 80053c0:	3718      	adds	r7, #24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	20004ac8 	.word	0x20004ac8
 80053cc:	20004ab8 	.word	0x20004ab8
 80053d0:	20004ac4 	.word	0x20004ac4

080053d4 <prvHeapInit>:
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80053de:	60bb      	str	r3, [r7, #8]
 80053e0:	4b27      	ldr	r3, [pc, #156]	; (8005480 <prvHeapInit+0xac>)
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f003 0307 	and.w	r3, r3, #7
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00c      	beq.n	8005408 <prvHeapInit+0x34>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	3307      	adds	r3, #7
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f023 0307 	bic.w	r3, r3, #7
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	4a1f      	ldr	r2, [pc, #124]	; (8005480 <prvHeapInit+0xac>)
 8005404:	4413      	add	r3, r2
 8005406:	60bb      	str	r3, [r7, #8]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	607b      	str	r3, [r7, #4]
 800540c:	4a1d      	ldr	r2, [pc, #116]	; (8005484 <prvHeapInit+0xb0>)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6013      	str	r3, [r2, #0]
 8005412:	4b1c      	ldr	r3, [pc, #112]	; (8005484 <prvHeapInit+0xb0>)
 8005414:	2200      	movs	r2, #0
 8005416:	605a      	str	r2, [r3, #4]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	4413      	add	r3, r2
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	2208      	movs	r2, #8
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	1a9b      	subs	r3, r3, r2
 8005426:	60fb      	str	r3, [r7, #12]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f023 0307 	bic.w	r3, r3, #7
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4a15      	ldr	r2, [pc, #84]	; (8005488 <prvHeapInit+0xb4>)
 8005434:	6013      	str	r3, [r2, #0]
 8005436:	4b14      	ldr	r3, [pc, #80]	; (8005488 <prvHeapInit+0xb4>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2200      	movs	r2, #0
 800543c:	605a      	str	r2, [r3, #4]
 800543e:	4b12      	ldr	r3, [pc, #72]	; (8005488 <prvHeapInit+0xb4>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2200      	movs	r2, #0
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	603b      	str	r3, [r7, #0]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	1ad2      	subs	r2, r2, r3
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	605a      	str	r2, [r3, #4]
 8005454:	4b0c      	ldr	r3, [pc, #48]	; (8005488 <prvHeapInit+0xb4>)
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	601a      	str	r2, [r3, #0]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	4a0a      	ldr	r2, [pc, #40]	; (800548c <prvHeapInit+0xb8>)
 8005462:	6013      	str	r3, [r2, #0]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	4a09      	ldr	r2, [pc, #36]	; (8005490 <prvHeapInit+0xbc>)
 800546a:	6013      	str	r3, [r2, #0]
 800546c:	4b09      	ldr	r3, [pc, #36]	; (8005494 <prvHeapInit+0xc0>)
 800546e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	bf00      	nop
 8005476:	3714      	adds	r7, #20
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	20000eac 	.word	0x20000eac
 8005484:	20004aac 	.word	0x20004aac
 8005488:	20004ab4 	.word	0x20004ab4
 800548c:	20004abc 	.word	0x20004abc
 8005490:	20004ab8 	.word	0x20004ab8
 8005494:	20004ac8 	.word	0x20004ac8

08005498 <prvInsertBlockIntoFreeList>:
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	4b28      	ldr	r3, [pc, #160]	; (8005544 <prvInsertBlockIntoFreeList+0xac>)
 80054a2:	60fb      	str	r3, [r7, #12]
 80054a4:	e002      	b.n	80054ac <prvInsertBlockIntoFreeList+0x14>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	60fb      	str	r3, [r7, #12]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d8f7      	bhi.n	80054a6 <prvInsertBlockIntoFreeList+0xe>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	60bb      	str	r3, [r7, #8]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	4413      	add	r3, r2
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d108      	bne.n	80054da <prvInsertBlockIntoFreeList+0x42>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	441a      	add	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	605a      	str	r2, [r3, #4]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	607b      	str	r3, [r7, #4]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	60bb      	str	r3, [r7, #8]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	441a      	add	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d118      	bne.n	8005520 <prvInsertBlockIntoFreeList+0x88>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	4b15      	ldr	r3, [pc, #84]	; (8005548 <prvInsertBlockIntoFreeList+0xb0>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d00d      	beq.n	8005516 <prvInsertBlockIntoFreeList+0x7e>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	441a      	add	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	605a      	str	r2, [r3, #4]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	e008      	b.n	8005528 <prvInsertBlockIntoFreeList+0x90>
 8005516:	4b0c      	ldr	r3, [pc, #48]	; (8005548 <prvInsertBlockIntoFreeList+0xb0>)
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	e003      	b.n	8005528 <prvInsertBlockIntoFreeList+0x90>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	429a      	cmp	r2, r3
 800552e:	d002      	beq.n	8005536 <prvInsertBlockIntoFreeList+0x9e>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	bf00      	nop
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	20004aac 	.word	0x20004aac
 8005548:	20004ab4 	.word	0x20004ab4

0800554c <std>:
 800554c:	2300      	movs	r3, #0
 800554e:	b510      	push	{r4, lr}
 8005550:	4604      	mov	r4, r0
 8005552:	e9c0 3300 	strd	r3, r3, [r0]
 8005556:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800555a:	6083      	str	r3, [r0, #8]
 800555c:	8181      	strh	r1, [r0, #12]
 800555e:	6643      	str	r3, [r0, #100]	; 0x64
 8005560:	81c2      	strh	r2, [r0, #14]
 8005562:	6183      	str	r3, [r0, #24]
 8005564:	4619      	mov	r1, r3
 8005566:	2208      	movs	r2, #8
 8005568:	305c      	adds	r0, #92	; 0x5c
 800556a:	f000 f9f7 	bl	800595c <memset>
 800556e:	4b0d      	ldr	r3, [pc, #52]	; (80055a4 <std+0x58>)
 8005570:	6263      	str	r3, [r4, #36]	; 0x24
 8005572:	4b0d      	ldr	r3, [pc, #52]	; (80055a8 <std+0x5c>)
 8005574:	62a3      	str	r3, [r4, #40]	; 0x28
 8005576:	4b0d      	ldr	r3, [pc, #52]	; (80055ac <std+0x60>)
 8005578:	62e3      	str	r3, [r4, #44]	; 0x2c
 800557a:	4b0d      	ldr	r3, [pc, #52]	; (80055b0 <std+0x64>)
 800557c:	6323      	str	r3, [r4, #48]	; 0x30
 800557e:	4b0d      	ldr	r3, [pc, #52]	; (80055b4 <std+0x68>)
 8005580:	6224      	str	r4, [r4, #32]
 8005582:	429c      	cmp	r4, r3
 8005584:	d006      	beq.n	8005594 <std+0x48>
 8005586:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800558a:	4294      	cmp	r4, r2
 800558c:	d002      	beq.n	8005594 <std+0x48>
 800558e:	33d0      	adds	r3, #208	; 0xd0
 8005590:	429c      	cmp	r4, r3
 8005592:	d105      	bne.n	80055a0 <std+0x54>
 8005594:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800559c:	f000 baac 	b.w	8005af8 <__retarget_lock_init_recursive>
 80055a0:	bd10      	pop	{r4, pc}
 80055a2:	bf00      	nop
 80055a4:	080057ad 	.word	0x080057ad
 80055a8:	080057cf 	.word	0x080057cf
 80055ac:	08005807 	.word	0x08005807
 80055b0:	0800582b 	.word	0x0800582b
 80055b4:	20004acc 	.word	0x20004acc

080055b8 <stdio_exit_handler>:
 80055b8:	4a02      	ldr	r2, [pc, #8]	; (80055c4 <stdio_exit_handler+0xc>)
 80055ba:	4903      	ldr	r1, [pc, #12]	; (80055c8 <stdio_exit_handler+0x10>)
 80055bc:	4803      	ldr	r0, [pc, #12]	; (80055cc <stdio_exit_handler+0x14>)
 80055be:	f000 b869 	b.w	8005694 <_fwalk_sglue>
 80055c2:	bf00      	nop
 80055c4:	20000010 	.word	0x20000010
 80055c8:	080063c1 	.word	0x080063c1
 80055cc:	2000001c 	.word	0x2000001c

080055d0 <cleanup_stdio>:
 80055d0:	6841      	ldr	r1, [r0, #4]
 80055d2:	4b0c      	ldr	r3, [pc, #48]	; (8005604 <cleanup_stdio+0x34>)
 80055d4:	4299      	cmp	r1, r3
 80055d6:	b510      	push	{r4, lr}
 80055d8:	4604      	mov	r4, r0
 80055da:	d001      	beq.n	80055e0 <cleanup_stdio+0x10>
 80055dc:	f000 fef0 	bl	80063c0 <_fflush_r>
 80055e0:	68a1      	ldr	r1, [r4, #8]
 80055e2:	4b09      	ldr	r3, [pc, #36]	; (8005608 <cleanup_stdio+0x38>)
 80055e4:	4299      	cmp	r1, r3
 80055e6:	d002      	beq.n	80055ee <cleanup_stdio+0x1e>
 80055e8:	4620      	mov	r0, r4
 80055ea:	f000 fee9 	bl	80063c0 <_fflush_r>
 80055ee:	68e1      	ldr	r1, [r4, #12]
 80055f0:	4b06      	ldr	r3, [pc, #24]	; (800560c <cleanup_stdio+0x3c>)
 80055f2:	4299      	cmp	r1, r3
 80055f4:	d004      	beq.n	8005600 <cleanup_stdio+0x30>
 80055f6:	4620      	mov	r0, r4
 80055f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055fc:	f000 bee0 	b.w	80063c0 <_fflush_r>
 8005600:	bd10      	pop	{r4, pc}
 8005602:	bf00      	nop
 8005604:	20004acc 	.word	0x20004acc
 8005608:	20004b34 	.word	0x20004b34
 800560c:	20004b9c 	.word	0x20004b9c

08005610 <global_stdio_init.part.0>:
 8005610:	b510      	push	{r4, lr}
 8005612:	4b0b      	ldr	r3, [pc, #44]	; (8005640 <global_stdio_init.part.0+0x30>)
 8005614:	4c0b      	ldr	r4, [pc, #44]	; (8005644 <global_stdio_init.part.0+0x34>)
 8005616:	4a0c      	ldr	r2, [pc, #48]	; (8005648 <global_stdio_init.part.0+0x38>)
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	4620      	mov	r0, r4
 800561c:	2200      	movs	r2, #0
 800561e:	2104      	movs	r1, #4
 8005620:	f7ff ff94 	bl	800554c <std>
 8005624:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005628:	2201      	movs	r2, #1
 800562a:	2109      	movs	r1, #9
 800562c:	f7ff ff8e 	bl	800554c <std>
 8005630:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005634:	2202      	movs	r2, #2
 8005636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800563a:	2112      	movs	r1, #18
 800563c:	f7ff bf86 	b.w	800554c <std>
 8005640:	20004c04 	.word	0x20004c04
 8005644:	20004acc 	.word	0x20004acc
 8005648:	080055b9 	.word	0x080055b9

0800564c <__sfp_lock_acquire>:
 800564c:	4801      	ldr	r0, [pc, #4]	; (8005654 <__sfp_lock_acquire+0x8>)
 800564e:	f000 ba54 	b.w	8005afa <__retarget_lock_acquire_recursive>
 8005652:	bf00      	nop
 8005654:	20004c0d 	.word	0x20004c0d

08005658 <__sfp_lock_release>:
 8005658:	4801      	ldr	r0, [pc, #4]	; (8005660 <__sfp_lock_release+0x8>)
 800565a:	f000 ba4f 	b.w	8005afc <__retarget_lock_release_recursive>
 800565e:	bf00      	nop
 8005660:	20004c0d 	.word	0x20004c0d

08005664 <__sinit>:
 8005664:	b510      	push	{r4, lr}
 8005666:	4604      	mov	r4, r0
 8005668:	f7ff fff0 	bl	800564c <__sfp_lock_acquire>
 800566c:	6a23      	ldr	r3, [r4, #32]
 800566e:	b11b      	cbz	r3, 8005678 <__sinit+0x14>
 8005670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005674:	f7ff bff0 	b.w	8005658 <__sfp_lock_release>
 8005678:	4b04      	ldr	r3, [pc, #16]	; (800568c <__sinit+0x28>)
 800567a:	6223      	str	r3, [r4, #32]
 800567c:	4b04      	ldr	r3, [pc, #16]	; (8005690 <__sinit+0x2c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1f5      	bne.n	8005670 <__sinit+0xc>
 8005684:	f7ff ffc4 	bl	8005610 <global_stdio_init.part.0>
 8005688:	e7f2      	b.n	8005670 <__sinit+0xc>
 800568a:	bf00      	nop
 800568c:	080055d1 	.word	0x080055d1
 8005690:	20004c04 	.word	0x20004c04

08005694 <_fwalk_sglue>:
 8005694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005698:	4607      	mov	r7, r0
 800569a:	4688      	mov	r8, r1
 800569c:	4614      	mov	r4, r2
 800569e:	2600      	movs	r6, #0
 80056a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056a4:	f1b9 0901 	subs.w	r9, r9, #1
 80056a8:	d505      	bpl.n	80056b6 <_fwalk_sglue+0x22>
 80056aa:	6824      	ldr	r4, [r4, #0]
 80056ac:	2c00      	cmp	r4, #0
 80056ae:	d1f7      	bne.n	80056a0 <_fwalk_sglue+0xc>
 80056b0:	4630      	mov	r0, r6
 80056b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056b6:	89ab      	ldrh	r3, [r5, #12]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d907      	bls.n	80056cc <_fwalk_sglue+0x38>
 80056bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056c0:	3301      	adds	r3, #1
 80056c2:	d003      	beq.n	80056cc <_fwalk_sglue+0x38>
 80056c4:	4629      	mov	r1, r5
 80056c6:	4638      	mov	r0, r7
 80056c8:	47c0      	blx	r8
 80056ca:	4306      	orrs	r6, r0
 80056cc:	3568      	adds	r5, #104	; 0x68
 80056ce:	e7e9      	b.n	80056a4 <_fwalk_sglue+0x10>

080056d0 <iprintf>:
 80056d0:	b40f      	push	{r0, r1, r2, r3}
 80056d2:	b507      	push	{r0, r1, r2, lr}
 80056d4:	4906      	ldr	r1, [pc, #24]	; (80056f0 <iprintf+0x20>)
 80056d6:	ab04      	add	r3, sp, #16
 80056d8:	6808      	ldr	r0, [r1, #0]
 80056da:	f853 2b04 	ldr.w	r2, [r3], #4
 80056de:	6881      	ldr	r1, [r0, #8]
 80056e0:	9301      	str	r3, [sp, #4]
 80056e2:	f000 fb3d 	bl	8005d60 <_vfiprintf_r>
 80056e6:	b003      	add	sp, #12
 80056e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80056ec:	b004      	add	sp, #16
 80056ee:	4770      	bx	lr
 80056f0:	20000068 	.word	0x20000068

080056f4 <_puts_r>:
 80056f4:	6a03      	ldr	r3, [r0, #32]
 80056f6:	b570      	push	{r4, r5, r6, lr}
 80056f8:	6884      	ldr	r4, [r0, #8]
 80056fa:	4605      	mov	r5, r0
 80056fc:	460e      	mov	r6, r1
 80056fe:	b90b      	cbnz	r3, 8005704 <_puts_r+0x10>
 8005700:	f7ff ffb0 	bl	8005664 <__sinit>
 8005704:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005706:	07db      	lsls	r3, r3, #31
 8005708:	d405      	bmi.n	8005716 <_puts_r+0x22>
 800570a:	89a3      	ldrh	r3, [r4, #12]
 800570c:	0598      	lsls	r0, r3, #22
 800570e:	d402      	bmi.n	8005716 <_puts_r+0x22>
 8005710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005712:	f000 f9f2 	bl	8005afa <__retarget_lock_acquire_recursive>
 8005716:	89a3      	ldrh	r3, [r4, #12]
 8005718:	0719      	lsls	r1, r3, #28
 800571a:	d513      	bpl.n	8005744 <_puts_r+0x50>
 800571c:	6923      	ldr	r3, [r4, #16]
 800571e:	b18b      	cbz	r3, 8005744 <_puts_r+0x50>
 8005720:	3e01      	subs	r6, #1
 8005722:	68a3      	ldr	r3, [r4, #8]
 8005724:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005728:	3b01      	subs	r3, #1
 800572a:	60a3      	str	r3, [r4, #8]
 800572c:	b9e9      	cbnz	r1, 800576a <_puts_r+0x76>
 800572e:	2b00      	cmp	r3, #0
 8005730:	da2e      	bge.n	8005790 <_puts_r+0x9c>
 8005732:	4622      	mov	r2, r4
 8005734:	210a      	movs	r1, #10
 8005736:	4628      	mov	r0, r5
 8005738:	f000 f87b 	bl	8005832 <__swbuf_r>
 800573c:	3001      	adds	r0, #1
 800573e:	d007      	beq.n	8005750 <_puts_r+0x5c>
 8005740:	250a      	movs	r5, #10
 8005742:	e007      	b.n	8005754 <_puts_r+0x60>
 8005744:	4621      	mov	r1, r4
 8005746:	4628      	mov	r0, r5
 8005748:	f000 f8b0 	bl	80058ac <__swsetup_r>
 800574c:	2800      	cmp	r0, #0
 800574e:	d0e7      	beq.n	8005720 <_puts_r+0x2c>
 8005750:	f04f 35ff 	mov.w	r5, #4294967295
 8005754:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005756:	07da      	lsls	r2, r3, #31
 8005758:	d405      	bmi.n	8005766 <_puts_r+0x72>
 800575a:	89a3      	ldrh	r3, [r4, #12]
 800575c:	059b      	lsls	r3, r3, #22
 800575e:	d402      	bmi.n	8005766 <_puts_r+0x72>
 8005760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005762:	f000 f9cb 	bl	8005afc <__retarget_lock_release_recursive>
 8005766:	4628      	mov	r0, r5
 8005768:	bd70      	pop	{r4, r5, r6, pc}
 800576a:	2b00      	cmp	r3, #0
 800576c:	da04      	bge.n	8005778 <_puts_r+0x84>
 800576e:	69a2      	ldr	r2, [r4, #24]
 8005770:	429a      	cmp	r2, r3
 8005772:	dc06      	bgt.n	8005782 <_puts_r+0x8e>
 8005774:	290a      	cmp	r1, #10
 8005776:	d004      	beq.n	8005782 <_puts_r+0x8e>
 8005778:	6823      	ldr	r3, [r4, #0]
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	6022      	str	r2, [r4, #0]
 800577e:	7019      	strb	r1, [r3, #0]
 8005780:	e7cf      	b.n	8005722 <_puts_r+0x2e>
 8005782:	4622      	mov	r2, r4
 8005784:	4628      	mov	r0, r5
 8005786:	f000 f854 	bl	8005832 <__swbuf_r>
 800578a:	3001      	adds	r0, #1
 800578c:	d1c9      	bne.n	8005722 <_puts_r+0x2e>
 800578e:	e7df      	b.n	8005750 <_puts_r+0x5c>
 8005790:	6823      	ldr	r3, [r4, #0]
 8005792:	250a      	movs	r5, #10
 8005794:	1c5a      	adds	r2, r3, #1
 8005796:	6022      	str	r2, [r4, #0]
 8005798:	701d      	strb	r5, [r3, #0]
 800579a:	e7db      	b.n	8005754 <_puts_r+0x60>

0800579c <puts>:
 800579c:	4b02      	ldr	r3, [pc, #8]	; (80057a8 <puts+0xc>)
 800579e:	4601      	mov	r1, r0
 80057a0:	6818      	ldr	r0, [r3, #0]
 80057a2:	f7ff bfa7 	b.w	80056f4 <_puts_r>
 80057a6:	bf00      	nop
 80057a8:	20000068 	.word	0x20000068

080057ac <__sread>:
 80057ac:	b510      	push	{r4, lr}
 80057ae:	460c      	mov	r4, r1
 80057b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057b4:	f000 f952 	bl	8005a5c <_read_r>
 80057b8:	2800      	cmp	r0, #0
 80057ba:	bfab      	itete	ge
 80057bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80057be:	89a3      	ldrhlt	r3, [r4, #12]
 80057c0:	181b      	addge	r3, r3, r0
 80057c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80057c6:	bfac      	ite	ge
 80057c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80057ca:	81a3      	strhlt	r3, [r4, #12]
 80057cc:	bd10      	pop	{r4, pc}

080057ce <__swrite>:
 80057ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057d2:	461f      	mov	r7, r3
 80057d4:	898b      	ldrh	r3, [r1, #12]
 80057d6:	05db      	lsls	r3, r3, #23
 80057d8:	4605      	mov	r5, r0
 80057da:	460c      	mov	r4, r1
 80057dc:	4616      	mov	r6, r2
 80057de:	d505      	bpl.n	80057ec <__swrite+0x1e>
 80057e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057e4:	2302      	movs	r3, #2
 80057e6:	2200      	movs	r2, #0
 80057e8:	f000 f926 	bl	8005a38 <_lseek_r>
 80057ec:	89a3      	ldrh	r3, [r4, #12]
 80057ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057f6:	81a3      	strh	r3, [r4, #12]
 80057f8:	4632      	mov	r2, r6
 80057fa:	463b      	mov	r3, r7
 80057fc:	4628      	mov	r0, r5
 80057fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005802:	f000 b93d 	b.w	8005a80 <_write_r>

08005806 <__sseek>:
 8005806:	b510      	push	{r4, lr}
 8005808:	460c      	mov	r4, r1
 800580a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800580e:	f000 f913 	bl	8005a38 <_lseek_r>
 8005812:	1c43      	adds	r3, r0, #1
 8005814:	89a3      	ldrh	r3, [r4, #12]
 8005816:	bf15      	itete	ne
 8005818:	6560      	strne	r0, [r4, #84]	; 0x54
 800581a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800581e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005822:	81a3      	strheq	r3, [r4, #12]
 8005824:	bf18      	it	ne
 8005826:	81a3      	strhne	r3, [r4, #12]
 8005828:	bd10      	pop	{r4, pc}

0800582a <__sclose>:
 800582a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800582e:	f000 b89d 	b.w	800596c <_close_r>

08005832 <__swbuf_r>:
 8005832:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005834:	460e      	mov	r6, r1
 8005836:	4614      	mov	r4, r2
 8005838:	4605      	mov	r5, r0
 800583a:	b118      	cbz	r0, 8005844 <__swbuf_r+0x12>
 800583c:	6a03      	ldr	r3, [r0, #32]
 800583e:	b90b      	cbnz	r3, 8005844 <__swbuf_r+0x12>
 8005840:	f7ff ff10 	bl	8005664 <__sinit>
 8005844:	69a3      	ldr	r3, [r4, #24]
 8005846:	60a3      	str	r3, [r4, #8]
 8005848:	89a3      	ldrh	r3, [r4, #12]
 800584a:	071a      	lsls	r2, r3, #28
 800584c:	d525      	bpl.n	800589a <__swbuf_r+0x68>
 800584e:	6923      	ldr	r3, [r4, #16]
 8005850:	b31b      	cbz	r3, 800589a <__swbuf_r+0x68>
 8005852:	6823      	ldr	r3, [r4, #0]
 8005854:	6922      	ldr	r2, [r4, #16]
 8005856:	1a98      	subs	r0, r3, r2
 8005858:	6963      	ldr	r3, [r4, #20]
 800585a:	b2f6      	uxtb	r6, r6
 800585c:	4283      	cmp	r3, r0
 800585e:	4637      	mov	r7, r6
 8005860:	dc04      	bgt.n	800586c <__swbuf_r+0x3a>
 8005862:	4621      	mov	r1, r4
 8005864:	4628      	mov	r0, r5
 8005866:	f000 fdab 	bl	80063c0 <_fflush_r>
 800586a:	b9e0      	cbnz	r0, 80058a6 <__swbuf_r+0x74>
 800586c:	68a3      	ldr	r3, [r4, #8]
 800586e:	3b01      	subs	r3, #1
 8005870:	60a3      	str	r3, [r4, #8]
 8005872:	6823      	ldr	r3, [r4, #0]
 8005874:	1c5a      	adds	r2, r3, #1
 8005876:	6022      	str	r2, [r4, #0]
 8005878:	701e      	strb	r6, [r3, #0]
 800587a:	6962      	ldr	r2, [r4, #20]
 800587c:	1c43      	adds	r3, r0, #1
 800587e:	429a      	cmp	r2, r3
 8005880:	d004      	beq.n	800588c <__swbuf_r+0x5a>
 8005882:	89a3      	ldrh	r3, [r4, #12]
 8005884:	07db      	lsls	r3, r3, #31
 8005886:	d506      	bpl.n	8005896 <__swbuf_r+0x64>
 8005888:	2e0a      	cmp	r6, #10
 800588a:	d104      	bne.n	8005896 <__swbuf_r+0x64>
 800588c:	4621      	mov	r1, r4
 800588e:	4628      	mov	r0, r5
 8005890:	f000 fd96 	bl	80063c0 <_fflush_r>
 8005894:	b938      	cbnz	r0, 80058a6 <__swbuf_r+0x74>
 8005896:	4638      	mov	r0, r7
 8005898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800589a:	4621      	mov	r1, r4
 800589c:	4628      	mov	r0, r5
 800589e:	f000 f805 	bl	80058ac <__swsetup_r>
 80058a2:	2800      	cmp	r0, #0
 80058a4:	d0d5      	beq.n	8005852 <__swbuf_r+0x20>
 80058a6:	f04f 37ff 	mov.w	r7, #4294967295
 80058aa:	e7f4      	b.n	8005896 <__swbuf_r+0x64>

080058ac <__swsetup_r>:
 80058ac:	b538      	push	{r3, r4, r5, lr}
 80058ae:	4b2a      	ldr	r3, [pc, #168]	; (8005958 <__swsetup_r+0xac>)
 80058b0:	4605      	mov	r5, r0
 80058b2:	6818      	ldr	r0, [r3, #0]
 80058b4:	460c      	mov	r4, r1
 80058b6:	b118      	cbz	r0, 80058c0 <__swsetup_r+0x14>
 80058b8:	6a03      	ldr	r3, [r0, #32]
 80058ba:	b90b      	cbnz	r3, 80058c0 <__swsetup_r+0x14>
 80058bc:	f7ff fed2 	bl	8005664 <__sinit>
 80058c0:	89a3      	ldrh	r3, [r4, #12]
 80058c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058c6:	0718      	lsls	r0, r3, #28
 80058c8:	d422      	bmi.n	8005910 <__swsetup_r+0x64>
 80058ca:	06d9      	lsls	r1, r3, #27
 80058cc:	d407      	bmi.n	80058de <__swsetup_r+0x32>
 80058ce:	2309      	movs	r3, #9
 80058d0:	602b      	str	r3, [r5, #0]
 80058d2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80058d6:	81a3      	strh	r3, [r4, #12]
 80058d8:	f04f 30ff 	mov.w	r0, #4294967295
 80058dc:	e034      	b.n	8005948 <__swsetup_r+0x9c>
 80058de:	0758      	lsls	r0, r3, #29
 80058e0:	d512      	bpl.n	8005908 <__swsetup_r+0x5c>
 80058e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058e4:	b141      	cbz	r1, 80058f8 <__swsetup_r+0x4c>
 80058e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058ea:	4299      	cmp	r1, r3
 80058ec:	d002      	beq.n	80058f4 <__swsetup_r+0x48>
 80058ee:	4628      	mov	r0, r5
 80058f0:	f000 f914 	bl	8005b1c <_free_r>
 80058f4:	2300      	movs	r3, #0
 80058f6:	6363      	str	r3, [r4, #52]	; 0x34
 80058f8:	89a3      	ldrh	r3, [r4, #12]
 80058fa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80058fe:	81a3      	strh	r3, [r4, #12]
 8005900:	2300      	movs	r3, #0
 8005902:	6063      	str	r3, [r4, #4]
 8005904:	6923      	ldr	r3, [r4, #16]
 8005906:	6023      	str	r3, [r4, #0]
 8005908:	89a3      	ldrh	r3, [r4, #12]
 800590a:	f043 0308 	orr.w	r3, r3, #8
 800590e:	81a3      	strh	r3, [r4, #12]
 8005910:	6923      	ldr	r3, [r4, #16]
 8005912:	b94b      	cbnz	r3, 8005928 <__swsetup_r+0x7c>
 8005914:	89a3      	ldrh	r3, [r4, #12]
 8005916:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800591a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800591e:	d003      	beq.n	8005928 <__swsetup_r+0x7c>
 8005920:	4621      	mov	r1, r4
 8005922:	4628      	mov	r0, r5
 8005924:	f000 fd9a 	bl	800645c <__smakebuf_r>
 8005928:	89a0      	ldrh	r0, [r4, #12]
 800592a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800592e:	f010 0301 	ands.w	r3, r0, #1
 8005932:	d00a      	beq.n	800594a <__swsetup_r+0x9e>
 8005934:	2300      	movs	r3, #0
 8005936:	60a3      	str	r3, [r4, #8]
 8005938:	6963      	ldr	r3, [r4, #20]
 800593a:	425b      	negs	r3, r3
 800593c:	61a3      	str	r3, [r4, #24]
 800593e:	6923      	ldr	r3, [r4, #16]
 8005940:	b943      	cbnz	r3, 8005954 <__swsetup_r+0xa8>
 8005942:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005946:	d1c4      	bne.n	80058d2 <__swsetup_r+0x26>
 8005948:	bd38      	pop	{r3, r4, r5, pc}
 800594a:	0781      	lsls	r1, r0, #30
 800594c:	bf58      	it	pl
 800594e:	6963      	ldrpl	r3, [r4, #20]
 8005950:	60a3      	str	r3, [r4, #8]
 8005952:	e7f4      	b.n	800593e <__swsetup_r+0x92>
 8005954:	2000      	movs	r0, #0
 8005956:	e7f7      	b.n	8005948 <__swsetup_r+0x9c>
 8005958:	20000068 	.word	0x20000068

0800595c <memset>:
 800595c:	4402      	add	r2, r0
 800595e:	4603      	mov	r3, r0
 8005960:	4293      	cmp	r3, r2
 8005962:	d100      	bne.n	8005966 <memset+0xa>
 8005964:	4770      	bx	lr
 8005966:	f803 1b01 	strb.w	r1, [r3], #1
 800596a:	e7f9      	b.n	8005960 <memset+0x4>

0800596c <_close_r>:
 800596c:	b538      	push	{r3, r4, r5, lr}
 800596e:	4d06      	ldr	r5, [pc, #24]	; (8005988 <_close_r+0x1c>)
 8005970:	2300      	movs	r3, #0
 8005972:	4604      	mov	r4, r0
 8005974:	4608      	mov	r0, r1
 8005976:	602b      	str	r3, [r5, #0]
 8005978:	f7fb f87d 	bl	8000a76 <_close>
 800597c:	1c43      	adds	r3, r0, #1
 800597e:	d102      	bne.n	8005986 <_close_r+0x1a>
 8005980:	682b      	ldr	r3, [r5, #0]
 8005982:	b103      	cbz	r3, 8005986 <_close_r+0x1a>
 8005984:	6023      	str	r3, [r4, #0]
 8005986:	bd38      	pop	{r3, r4, r5, pc}
 8005988:	20004c08 	.word	0x20004c08

0800598c <_reclaim_reent>:
 800598c:	4b29      	ldr	r3, [pc, #164]	; (8005a34 <_reclaim_reent+0xa8>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4283      	cmp	r3, r0
 8005992:	b570      	push	{r4, r5, r6, lr}
 8005994:	4604      	mov	r4, r0
 8005996:	d04b      	beq.n	8005a30 <_reclaim_reent+0xa4>
 8005998:	69c3      	ldr	r3, [r0, #28]
 800599a:	b143      	cbz	r3, 80059ae <_reclaim_reent+0x22>
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d144      	bne.n	8005a2c <_reclaim_reent+0xa0>
 80059a2:	69e3      	ldr	r3, [r4, #28]
 80059a4:	6819      	ldr	r1, [r3, #0]
 80059a6:	b111      	cbz	r1, 80059ae <_reclaim_reent+0x22>
 80059a8:	4620      	mov	r0, r4
 80059aa:	f000 f8b7 	bl	8005b1c <_free_r>
 80059ae:	6961      	ldr	r1, [r4, #20]
 80059b0:	b111      	cbz	r1, 80059b8 <_reclaim_reent+0x2c>
 80059b2:	4620      	mov	r0, r4
 80059b4:	f000 f8b2 	bl	8005b1c <_free_r>
 80059b8:	69e1      	ldr	r1, [r4, #28]
 80059ba:	b111      	cbz	r1, 80059c2 <_reclaim_reent+0x36>
 80059bc:	4620      	mov	r0, r4
 80059be:	f000 f8ad 	bl	8005b1c <_free_r>
 80059c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80059c4:	b111      	cbz	r1, 80059cc <_reclaim_reent+0x40>
 80059c6:	4620      	mov	r0, r4
 80059c8:	f000 f8a8 	bl	8005b1c <_free_r>
 80059cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059ce:	b111      	cbz	r1, 80059d6 <_reclaim_reent+0x4a>
 80059d0:	4620      	mov	r0, r4
 80059d2:	f000 f8a3 	bl	8005b1c <_free_r>
 80059d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80059d8:	b111      	cbz	r1, 80059e0 <_reclaim_reent+0x54>
 80059da:	4620      	mov	r0, r4
 80059dc:	f000 f89e 	bl	8005b1c <_free_r>
 80059e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80059e2:	b111      	cbz	r1, 80059ea <_reclaim_reent+0x5e>
 80059e4:	4620      	mov	r0, r4
 80059e6:	f000 f899 	bl	8005b1c <_free_r>
 80059ea:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80059ec:	b111      	cbz	r1, 80059f4 <_reclaim_reent+0x68>
 80059ee:	4620      	mov	r0, r4
 80059f0:	f000 f894 	bl	8005b1c <_free_r>
 80059f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80059f6:	b111      	cbz	r1, 80059fe <_reclaim_reent+0x72>
 80059f8:	4620      	mov	r0, r4
 80059fa:	f000 f88f 	bl	8005b1c <_free_r>
 80059fe:	6a23      	ldr	r3, [r4, #32]
 8005a00:	b1b3      	cbz	r3, 8005a30 <_reclaim_reent+0xa4>
 8005a02:	4620      	mov	r0, r4
 8005a04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005a08:	4718      	bx	r3
 8005a0a:	5949      	ldr	r1, [r1, r5]
 8005a0c:	b941      	cbnz	r1, 8005a20 <_reclaim_reent+0x94>
 8005a0e:	3504      	adds	r5, #4
 8005a10:	69e3      	ldr	r3, [r4, #28]
 8005a12:	2d80      	cmp	r5, #128	; 0x80
 8005a14:	68d9      	ldr	r1, [r3, #12]
 8005a16:	d1f8      	bne.n	8005a0a <_reclaim_reent+0x7e>
 8005a18:	4620      	mov	r0, r4
 8005a1a:	f000 f87f 	bl	8005b1c <_free_r>
 8005a1e:	e7c0      	b.n	80059a2 <_reclaim_reent+0x16>
 8005a20:	680e      	ldr	r6, [r1, #0]
 8005a22:	4620      	mov	r0, r4
 8005a24:	f000 f87a 	bl	8005b1c <_free_r>
 8005a28:	4631      	mov	r1, r6
 8005a2a:	e7ef      	b.n	8005a0c <_reclaim_reent+0x80>
 8005a2c:	2500      	movs	r5, #0
 8005a2e:	e7ef      	b.n	8005a10 <_reclaim_reent+0x84>
 8005a30:	bd70      	pop	{r4, r5, r6, pc}
 8005a32:	bf00      	nop
 8005a34:	20000068 	.word	0x20000068

08005a38 <_lseek_r>:
 8005a38:	b538      	push	{r3, r4, r5, lr}
 8005a3a:	4d07      	ldr	r5, [pc, #28]	; (8005a58 <_lseek_r+0x20>)
 8005a3c:	4604      	mov	r4, r0
 8005a3e:	4608      	mov	r0, r1
 8005a40:	4611      	mov	r1, r2
 8005a42:	2200      	movs	r2, #0
 8005a44:	602a      	str	r2, [r5, #0]
 8005a46:	461a      	mov	r2, r3
 8005a48:	f7fb f83c 	bl	8000ac4 <_lseek>
 8005a4c:	1c43      	adds	r3, r0, #1
 8005a4e:	d102      	bne.n	8005a56 <_lseek_r+0x1e>
 8005a50:	682b      	ldr	r3, [r5, #0]
 8005a52:	b103      	cbz	r3, 8005a56 <_lseek_r+0x1e>
 8005a54:	6023      	str	r3, [r4, #0]
 8005a56:	bd38      	pop	{r3, r4, r5, pc}
 8005a58:	20004c08 	.word	0x20004c08

08005a5c <_read_r>:
 8005a5c:	b538      	push	{r3, r4, r5, lr}
 8005a5e:	4d07      	ldr	r5, [pc, #28]	; (8005a7c <_read_r+0x20>)
 8005a60:	4604      	mov	r4, r0
 8005a62:	4608      	mov	r0, r1
 8005a64:	4611      	mov	r1, r2
 8005a66:	2200      	movs	r2, #0
 8005a68:	602a      	str	r2, [r5, #0]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	f7fa ffe6 	bl	8000a3c <_read>
 8005a70:	1c43      	adds	r3, r0, #1
 8005a72:	d102      	bne.n	8005a7a <_read_r+0x1e>
 8005a74:	682b      	ldr	r3, [r5, #0]
 8005a76:	b103      	cbz	r3, 8005a7a <_read_r+0x1e>
 8005a78:	6023      	str	r3, [r4, #0]
 8005a7a:	bd38      	pop	{r3, r4, r5, pc}
 8005a7c:	20004c08 	.word	0x20004c08

08005a80 <_write_r>:
 8005a80:	b538      	push	{r3, r4, r5, lr}
 8005a82:	4d07      	ldr	r5, [pc, #28]	; (8005aa0 <_write_r+0x20>)
 8005a84:	4604      	mov	r4, r0
 8005a86:	4608      	mov	r0, r1
 8005a88:	4611      	mov	r1, r2
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	602a      	str	r2, [r5, #0]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f7fa fda3 	bl	80005da <_write>
 8005a94:	1c43      	adds	r3, r0, #1
 8005a96:	d102      	bne.n	8005a9e <_write_r+0x1e>
 8005a98:	682b      	ldr	r3, [r5, #0]
 8005a9a:	b103      	cbz	r3, 8005a9e <_write_r+0x1e>
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	bd38      	pop	{r3, r4, r5, pc}
 8005aa0:	20004c08 	.word	0x20004c08

08005aa4 <__errno>:
 8005aa4:	4b01      	ldr	r3, [pc, #4]	; (8005aac <__errno+0x8>)
 8005aa6:	6818      	ldr	r0, [r3, #0]
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	20000068 	.word	0x20000068

08005ab0 <__libc_init_array>:
 8005ab0:	b570      	push	{r4, r5, r6, lr}
 8005ab2:	4d0d      	ldr	r5, [pc, #52]	; (8005ae8 <__libc_init_array+0x38>)
 8005ab4:	4c0d      	ldr	r4, [pc, #52]	; (8005aec <__libc_init_array+0x3c>)
 8005ab6:	1b64      	subs	r4, r4, r5
 8005ab8:	10a4      	asrs	r4, r4, #2
 8005aba:	2600      	movs	r6, #0
 8005abc:	42a6      	cmp	r6, r4
 8005abe:	d109      	bne.n	8005ad4 <__libc_init_array+0x24>
 8005ac0:	4d0b      	ldr	r5, [pc, #44]	; (8005af0 <__libc_init_array+0x40>)
 8005ac2:	4c0c      	ldr	r4, [pc, #48]	; (8005af4 <__libc_init_array+0x44>)
 8005ac4:	f000 fd38 	bl	8006538 <_init>
 8005ac8:	1b64      	subs	r4, r4, r5
 8005aca:	10a4      	asrs	r4, r4, #2
 8005acc:	2600      	movs	r6, #0
 8005ace:	42a6      	cmp	r6, r4
 8005ad0:	d105      	bne.n	8005ade <__libc_init_array+0x2e>
 8005ad2:	bd70      	pop	{r4, r5, r6, pc}
 8005ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ad8:	4798      	blx	r3
 8005ada:	3601      	adds	r6, #1
 8005adc:	e7ee      	b.n	8005abc <__libc_init_array+0xc>
 8005ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ae2:	4798      	blx	r3
 8005ae4:	3601      	adds	r6, #1
 8005ae6:	e7f2      	b.n	8005ace <__libc_init_array+0x1e>
 8005ae8:	08006664 	.word	0x08006664
 8005aec:	08006664 	.word	0x08006664
 8005af0:	08006664 	.word	0x08006664
 8005af4:	08006668 	.word	0x08006668

08005af8 <__retarget_lock_init_recursive>:
 8005af8:	4770      	bx	lr

08005afa <__retarget_lock_acquire_recursive>:
 8005afa:	4770      	bx	lr

08005afc <__retarget_lock_release_recursive>:
 8005afc:	4770      	bx	lr

08005afe <memcpy>:
 8005afe:	440a      	add	r2, r1
 8005b00:	4291      	cmp	r1, r2
 8005b02:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b06:	d100      	bne.n	8005b0a <memcpy+0xc>
 8005b08:	4770      	bx	lr
 8005b0a:	b510      	push	{r4, lr}
 8005b0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b14:	4291      	cmp	r1, r2
 8005b16:	d1f9      	bne.n	8005b0c <memcpy+0xe>
 8005b18:	bd10      	pop	{r4, pc}
	...

08005b1c <_free_r>:
 8005b1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b1e:	2900      	cmp	r1, #0
 8005b20:	d044      	beq.n	8005bac <_free_r+0x90>
 8005b22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b26:	9001      	str	r0, [sp, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f1a1 0404 	sub.w	r4, r1, #4
 8005b2e:	bfb8      	it	lt
 8005b30:	18e4      	addlt	r4, r4, r3
 8005b32:	f000 f8df 	bl	8005cf4 <__malloc_lock>
 8005b36:	4a1e      	ldr	r2, [pc, #120]	; (8005bb0 <_free_r+0x94>)
 8005b38:	9801      	ldr	r0, [sp, #4]
 8005b3a:	6813      	ldr	r3, [r2, #0]
 8005b3c:	b933      	cbnz	r3, 8005b4c <_free_r+0x30>
 8005b3e:	6063      	str	r3, [r4, #4]
 8005b40:	6014      	str	r4, [r2, #0]
 8005b42:	b003      	add	sp, #12
 8005b44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b48:	f000 b8da 	b.w	8005d00 <__malloc_unlock>
 8005b4c:	42a3      	cmp	r3, r4
 8005b4e:	d908      	bls.n	8005b62 <_free_r+0x46>
 8005b50:	6825      	ldr	r5, [r4, #0]
 8005b52:	1961      	adds	r1, r4, r5
 8005b54:	428b      	cmp	r3, r1
 8005b56:	bf01      	itttt	eq
 8005b58:	6819      	ldreq	r1, [r3, #0]
 8005b5a:	685b      	ldreq	r3, [r3, #4]
 8005b5c:	1949      	addeq	r1, r1, r5
 8005b5e:	6021      	streq	r1, [r4, #0]
 8005b60:	e7ed      	b.n	8005b3e <_free_r+0x22>
 8005b62:	461a      	mov	r2, r3
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	b10b      	cbz	r3, 8005b6c <_free_r+0x50>
 8005b68:	42a3      	cmp	r3, r4
 8005b6a:	d9fa      	bls.n	8005b62 <_free_r+0x46>
 8005b6c:	6811      	ldr	r1, [r2, #0]
 8005b6e:	1855      	adds	r5, r2, r1
 8005b70:	42a5      	cmp	r5, r4
 8005b72:	d10b      	bne.n	8005b8c <_free_r+0x70>
 8005b74:	6824      	ldr	r4, [r4, #0]
 8005b76:	4421      	add	r1, r4
 8005b78:	1854      	adds	r4, r2, r1
 8005b7a:	42a3      	cmp	r3, r4
 8005b7c:	6011      	str	r1, [r2, #0]
 8005b7e:	d1e0      	bne.n	8005b42 <_free_r+0x26>
 8005b80:	681c      	ldr	r4, [r3, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	6053      	str	r3, [r2, #4]
 8005b86:	440c      	add	r4, r1
 8005b88:	6014      	str	r4, [r2, #0]
 8005b8a:	e7da      	b.n	8005b42 <_free_r+0x26>
 8005b8c:	d902      	bls.n	8005b94 <_free_r+0x78>
 8005b8e:	230c      	movs	r3, #12
 8005b90:	6003      	str	r3, [r0, #0]
 8005b92:	e7d6      	b.n	8005b42 <_free_r+0x26>
 8005b94:	6825      	ldr	r5, [r4, #0]
 8005b96:	1961      	adds	r1, r4, r5
 8005b98:	428b      	cmp	r3, r1
 8005b9a:	bf04      	itt	eq
 8005b9c:	6819      	ldreq	r1, [r3, #0]
 8005b9e:	685b      	ldreq	r3, [r3, #4]
 8005ba0:	6063      	str	r3, [r4, #4]
 8005ba2:	bf04      	itt	eq
 8005ba4:	1949      	addeq	r1, r1, r5
 8005ba6:	6021      	streq	r1, [r4, #0]
 8005ba8:	6054      	str	r4, [r2, #4]
 8005baa:	e7ca      	b.n	8005b42 <_free_r+0x26>
 8005bac:	b003      	add	sp, #12
 8005bae:	bd30      	pop	{r4, r5, pc}
 8005bb0:	20004c10 	.word	0x20004c10

08005bb4 <sbrk_aligned>:
 8005bb4:	b570      	push	{r4, r5, r6, lr}
 8005bb6:	4e0e      	ldr	r6, [pc, #56]	; (8005bf0 <sbrk_aligned+0x3c>)
 8005bb8:	460c      	mov	r4, r1
 8005bba:	6831      	ldr	r1, [r6, #0]
 8005bbc:	4605      	mov	r5, r0
 8005bbe:	b911      	cbnz	r1, 8005bc6 <sbrk_aligned+0x12>
 8005bc0:	f000 fcaa 	bl	8006518 <_sbrk_r>
 8005bc4:	6030      	str	r0, [r6, #0]
 8005bc6:	4621      	mov	r1, r4
 8005bc8:	4628      	mov	r0, r5
 8005bca:	f000 fca5 	bl	8006518 <_sbrk_r>
 8005bce:	1c43      	adds	r3, r0, #1
 8005bd0:	d00a      	beq.n	8005be8 <sbrk_aligned+0x34>
 8005bd2:	1cc4      	adds	r4, r0, #3
 8005bd4:	f024 0403 	bic.w	r4, r4, #3
 8005bd8:	42a0      	cmp	r0, r4
 8005bda:	d007      	beq.n	8005bec <sbrk_aligned+0x38>
 8005bdc:	1a21      	subs	r1, r4, r0
 8005bde:	4628      	mov	r0, r5
 8005be0:	f000 fc9a 	bl	8006518 <_sbrk_r>
 8005be4:	3001      	adds	r0, #1
 8005be6:	d101      	bne.n	8005bec <sbrk_aligned+0x38>
 8005be8:	f04f 34ff 	mov.w	r4, #4294967295
 8005bec:	4620      	mov	r0, r4
 8005bee:	bd70      	pop	{r4, r5, r6, pc}
 8005bf0:	20004c14 	.word	0x20004c14

08005bf4 <_malloc_r>:
 8005bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bf8:	1ccd      	adds	r5, r1, #3
 8005bfa:	f025 0503 	bic.w	r5, r5, #3
 8005bfe:	3508      	adds	r5, #8
 8005c00:	2d0c      	cmp	r5, #12
 8005c02:	bf38      	it	cc
 8005c04:	250c      	movcc	r5, #12
 8005c06:	2d00      	cmp	r5, #0
 8005c08:	4607      	mov	r7, r0
 8005c0a:	db01      	blt.n	8005c10 <_malloc_r+0x1c>
 8005c0c:	42a9      	cmp	r1, r5
 8005c0e:	d905      	bls.n	8005c1c <_malloc_r+0x28>
 8005c10:	230c      	movs	r3, #12
 8005c12:	603b      	str	r3, [r7, #0]
 8005c14:	2600      	movs	r6, #0
 8005c16:	4630      	mov	r0, r6
 8005c18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005cf0 <_malloc_r+0xfc>
 8005c20:	f000 f868 	bl	8005cf4 <__malloc_lock>
 8005c24:	f8d8 3000 	ldr.w	r3, [r8]
 8005c28:	461c      	mov	r4, r3
 8005c2a:	bb5c      	cbnz	r4, 8005c84 <_malloc_r+0x90>
 8005c2c:	4629      	mov	r1, r5
 8005c2e:	4638      	mov	r0, r7
 8005c30:	f7ff ffc0 	bl	8005bb4 <sbrk_aligned>
 8005c34:	1c43      	adds	r3, r0, #1
 8005c36:	4604      	mov	r4, r0
 8005c38:	d155      	bne.n	8005ce6 <_malloc_r+0xf2>
 8005c3a:	f8d8 4000 	ldr.w	r4, [r8]
 8005c3e:	4626      	mov	r6, r4
 8005c40:	2e00      	cmp	r6, #0
 8005c42:	d145      	bne.n	8005cd0 <_malloc_r+0xdc>
 8005c44:	2c00      	cmp	r4, #0
 8005c46:	d048      	beq.n	8005cda <_malloc_r+0xe6>
 8005c48:	6823      	ldr	r3, [r4, #0]
 8005c4a:	4631      	mov	r1, r6
 8005c4c:	4638      	mov	r0, r7
 8005c4e:	eb04 0903 	add.w	r9, r4, r3
 8005c52:	f000 fc61 	bl	8006518 <_sbrk_r>
 8005c56:	4581      	cmp	r9, r0
 8005c58:	d13f      	bne.n	8005cda <_malloc_r+0xe6>
 8005c5a:	6821      	ldr	r1, [r4, #0]
 8005c5c:	1a6d      	subs	r5, r5, r1
 8005c5e:	4629      	mov	r1, r5
 8005c60:	4638      	mov	r0, r7
 8005c62:	f7ff ffa7 	bl	8005bb4 <sbrk_aligned>
 8005c66:	3001      	adds	r0, #1
 8005c68:	d037      	beq.n	8005cda <_malloc_r+0xe6>
 8005c6a:	6823      	ldr	r3, [r4, #0]
 8005c6c:	442b      	add	r3, r5
 8005c6e:	6023      	str	r3, [r4, #0]
 8005c70:	f8d8 3000 	ldr.w	r3, [r8]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d038      	beq.n	8005cea <_malloc_r+0xf6>
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	42a2      	cmp	r2, r4
 8005c7c:	d12b      	bne.n	8005cd6 <_malloc_r+0xe2>
 8005c7e:	2200      	movs	r2, #0
 8005c80:	605a      	str	r2, [r3, #4]
 8005c82:	e00f      	b.n	8005ca4 <_malloc_r+0xb0>
 8005c84:	6822      	ldr	r2, [r4, #0]
 8005c86:	1b52      	subs	r2, r2, r5
 8005c88:	d41f      	bmi.n	8005cca <_malloc_r+0xd6>
 8005c8a:	2a0b      	cmp	r2, #11
 8005c8c:	d917      	bls.n	8005cbe <_malloc_r+0xca>
 8005c8e:	1961      	adds	r1, r4, r5
 8005c90:	42a3      	cmp	r3, r4
 8005c92:	6025      	str	r5, [r4, #0]
 8005c94:	bf18      	it	ne
 8005c96:	6059      	strne	r1, [r3, #4]
 8005c98:	6863      	ldr	r3, [r4, #4]
 8005c9a:	bf08      	it	eq
 8005c9c:	f8c8 1000 	streq.w	r1, [r8]
 8005ca0:	5162      	str	r2, [r4, r5]
 8005ca2:	604b      	str	r3, [r1, #4]
 8005ca4:	4638      	mov	r0, r7
 8005ca6:	f104 060b 	add.w	r6, r4, #11
 8005caa:	f000 f829 	bl	8005d00 <__malloc_unlock>
 8005cae:	f026 0607 	bic.w	r6, r6, #7
 8005cb2:	1d23      	adds	r3, r4, #4
 8005cb4:	1af2      	subs	r2, r6, r3
 8005cb6:	d0ae      	beq.n	8005c16 <_malloc_r+0x22>
 8005cb8:	1b9b      	subs	r3, r3, r6
 8005cba:	50a3      	str	r3, [r4, r2]
 8005cbc:	e7ab      	b.n	8005c16 <_malloc_r+0x22>
 8005cbe:	42a3      	cmp	r3, r4
 8005cc0:	6862      	ldr	r2, [r4, #4]
 8005cc2:	d1dd      	bne.n	8005c80 <_malloc_r+0x8c>
 8005cc4:	f8c8 2000 	str.w	r2, [r8]
 8005cc8:	e7ec      	b.n	8005ca4 <_malloc_r+0xb0>
 8005cca:	4623      	mov	r3, r4
 8005ccc:	6864      	ldr	r4, [r4, #4]
 8005cce:	e7ac      	b.n	8005c2a <_malloc_r+0x36>
 8005cd0:	4634      	mov	r4, r6
 8005cd2:	6876      	ldr	r6, [r6, #4]
 8005cd4:	e7b4      	b.n	8005c40 <_malloc_r+0x4c>
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	e7cc      	b.n	8005c74 <_malloc_r+0x80>
 8005cda:	230c      	movs	r3, #12
 8005cdc:	603b      	str	r3, [r7, #0]
 8005cde:	4638      	mov	r0, r7
 8005ce0:	f000 f80e 	bl	8005d00 <__malloc_unlock>
 8005ce4:	e797      	b.n	8005c16 <_malloc_r+0x22>
 8005ce6:	6025      	str	r5, [r4, #0]
 8005ce8:	e7dc      	b.n	8005ca4 <_malloc_r+0xb0>
 8005cea:	605b      	str	r3, [r3, #4]
 8005cec:	deff      	udf	#255	; 0xff
 8005cee:	bf00      	nop
 8005cf0:	20004c10 	.word	0x20004c10

08005cf4 <__malloc_lock>:
 8005cf4:	4801      	ldr	r0, [pc, #4]	; (8005cfc <__malloc_lock+0x8>)
 8005cf6:	f7ff bf00 	b.w	8005afa <__retarget_lock_acquire_recursive>
 8005cfa:	bf00      	nop
 8005cfc:	20004c0c 	.word	0x20004c0c

08005d00 <__malloc_unlock>:
 8005d00:	4801      	ldr	r0, [pc, #4]	; (8005d08 <__malloc_unlock+0x8>)
 8005d02:	f7ff befb 	b.w	8005afc <__retarget_lock_release_recursive>
 8005d06:	bf00      	nop
 8005d08:	20004c0c 	.word	0x20004c0c

08005d0c <__sfputc_r>:
 8005d0c:	6893      	ldr	r3, [r2, #8]
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	b410      	push	{r4}
 8005d14:	6093      	str	r3, [r2, #8]
 8005d16:	da08      	bge.n	8005d2a <__sfputc_r+0x1e>
 8005d18:	6994      	ldr	r4, [r2, #24]
 8005d1a:	42a3      	cmp	r3, r4
 8005d1c:	db01      	blt.n	8005d22 <__sfputc_r+0x16>
 8005d1e:	290a      	cmp	r1, #10
 8005d20:	d103      	bne.n	8005d2a <__sfputc_r+0x1e>
 8005d22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d26:	f7ff bd84 	b.w	8005832 <__swbuf_r>
 8005d2a:	6813      	ldr	r3, [r2, #0]
 8005d2c:	1c58      	adds	r0, r3, #1
 8005d2e:	6010      	str	r0, [r2, #0]
 8005d30:	7019      	strb	r1, [r3, #0]
 8005d32:	4608      	mov	r0, r1
 8005d34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <__sfputs_r>:
 8005d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d3c:	4606      	mov	r6, r0
 8005d3e:	460f      	mov	r7, r1
 8005d40:	4614      	mov	r4, r2
 8005d42:	18d5      	adds	r5, r2, r3
 8005d44:	42ac      	cmp	r4, r5
 8005d46:	d101      	bne.n	8005d4c <__sfputs_r+0x12>
 8005d48:	2000      	movs	r0, #0
 8005d4a:	e007      	b.n	8005d5c <__sfputs_r+0x22>
 8005d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d50:	463a      	mov	r2, r7
 8005d52:	4630      	mov	r0, r6
 8005d54:	f7ff ffda 	bl	8005d0c <__sfputc_r>
 8005d58:	1c43      	adds	r3, r0, #1
 8005d5a:	d1f3      	bne.n	8005d44 <__sfputs_r+0xa>
 8005d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d60 <_vfiprintf_r>:
 8005d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d64:	460d      	mov	r5, r1
 8005d66:	b09d      	sub	sp, #116	; 0x74
 8005d68:	4614      	mov	r4, r2
 8005d6a:	4698      	mov	r8, r3
 8005d6c:	4606      	mov	r6, r0
 8005d6e:	b118      	cbz	r0, 8005d78 <_vfiprintf_r+0x18>
 8005d70:	6a03      	ldr	r3, [r0, #32]
 8005d72:	b90b      	cbnz	r3, 8005d78 <_vfiprintf_r+0x18>
 8005d74:	f7ff fc76 	bl	8005664 <__sinit>
 8005d78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d7a:	07d9      	lsls	r1, r3, #31
 8005d7c:	d405      	bmi.n	8005d8a <_vfiprintf_r+0x2a>
 8005d7e:	89ab      	ldrh	r3, [r5, #12]
 8005d80:	059a      	lsls	r2, r3, #22
 8005d82:	d402      	bmi.n	8005d8a <_vfiprintf_r+0x2a>
 8005d84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d86:	f7ff feb8 	bl	8005afa <__retarget_lock_acquire_recursive>
 8005d8a:	89ab      	ldrh	r3, [r5, #12]
 8005d8c:	071b      	lsls	r3, r3, #28
 8005d8e:	d501      	bpl.n	8005d94 <_vfiprintf_r+0x34>
 8005d90:	692b      	ldr	r3, [r5, #16]
 8005d92:	b99b      	cbnz	r3, 8005dbc <_vfiprintf_r+0x5c>
 8005d94:	4629      	mov	r1, r5
 8005d96:	4630      	mov	r0, r6
 8005d98:	f7ff fd88 	bl	80058ac <__swsetup_r>
 8005d9c:	b170      	cbz	r0, 8005dbc <_vfiprintf_r+0x5c>
 8005d9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005da0:	07dc      	lsls	r4, r3, #31
 8005da2:	d504      	bpl.n	8005dae <_vfiprintf_r+0x4e>
 8005da4:	f04f 30ff 	mov.w	r0, #4294967295
 8005da8:	b01d      	add	sp, #116	; 0x74
 8005daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dae:	89ab      	ldrh	r3, [r5, #12]
 8005db0:	0598      	lsls	r0, r3, #22
 8005db2:	d4f7      	bmi.n	8005da4 <_vfiprintf_r+0x44>
 8005db4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005db6:	f7ff fea1 	bl	8005afc <__retarget_lock_release_recursive>
 8005dba:	e7f3      	b.n	8005da4 <_vfiprintf_r+0x44>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8005dc0:	2320      	movs	r3, #32
 8005dc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005dc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005dca:	2330      	movs	r3, #48	; 0x30
 8005dcc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005f80 <_vfiprintf_r+0x220>
 8005dd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005dd4:	f04f 0901 	mov.w	r9, #1
 8005dd8:	4623      	mov	r3, r4
 8005dda:	469a      	mov	sl, r3
 8005ddc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005de0:	b10a      	cbz	r2, 8005de6 <_vfiprintf_r+0x86>
 8005de2:	2a25      	cmp	r2, #37	; 0x25
 8005de4:	d1f9      	bne.n	8005dda <_vfiprintf_r+0x7a>
 8005de6:	ebba 0b04 	subs.w	fp, sl, r4
 8005dea:	d00b      	beq.n	8005e04 <_vfiprintf_r+0xa4>
 8005dec:	465b      	mov	r3, fp
 8005dee:	4622      	mov	r2, r4
 8005df0:	4629      	mov	r1, r5
 8005df2:	4630      	mov	r0, r6
 8005df4:	f7ff ffa1 	bl	8005d3a <__sfputs_r>
 8005df8:	3001      	adds	r0, #1
 8005dfa:	f000 80a9 	beq.w	8005f50 <_vfiprintf_r+0x1f0>
 8005dfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e00:	445a      	add	r2, fp
 8005e02:	9209      	str	r2, [sp, #36]	; 0x24
 8005e04:	f89a 3000 	ldrb.w	r3, [sl]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f000 80a1 	beq.w	8005f50 <_vfiprintf_r+0x1f0>
 8005e0e:	2300      	movs	r3, #0
 8005e10:	f04f 32ff 	mov.w	r2, #4294967295
 8005e14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e18:	f10a 0a01 	add.w	sl, sl, #1
 8005e1c:	9304      	str	r3, [sp, #16]
 8005e1e:	9307      	str	r3, [sp, #28]
 8005e20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e24:	931a      	str	r3, [sp, #104]	; 0x68
 8005e26:	4654      	mov	r4, sl
 8005e28:	2205      	movs	r2, #5
 8005e2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e2e:	4854      	ldr	r0, [pc, #336]	; (8005f80 <_vfiprintf_r+0x220>)
 8005e30:	f7fa f9de 	bl	80001f0 <memchr>
 8005e34:	9a04      	ldr	r2, [sp, #16]
 8005e36:	b9d8      	cbnz	r0, 8005e70 <_vfiprintf_r+0x110>
 8005e38:	06d1      	lsls	r1, r2, #27
 8005e3a:	bf44      	itt	mi
 8005e3c:	2320      	movmi	r3, #32
 8005e3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e42:	0713      	lsls	r3, r2, #28
 8005e44:	bf44      	itt	mi
 8005e46:	232b      	movmi	r3, #43	; 0x2b
 8005e48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e4c:	f89a 3000 	ldrb.w	r3, [sl]
 8005e50:	2b2a      	cmp	r3, #42	; 0x2a
 8005e52:	d015      	beq.n	8005e80 <_vfiprintf_r+0x120>
 8005e54:	9a07      	ldr	r2, [sp, #28]
 8005e56:	4654      	mov	r4, sl
 8005e58:	2000      	movs	r0, #0
 8005e5a:	f04f 0c0a 	mov.w	ip, #10
 8005e5e:	4621      	mov	r1, r4
 8005e60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e64:	3b30      	subs	r3, #48	; 0x30
 8005e66:	2b09      	cmp	r3, #9
 8005e68:	d94d      	bls.n	8005f06 <_vfiprintf_r+0x1a6>
 8005e6a:	b1b0      	cbz	r0, 8005e9a <_vfiprintf_r+0x13a>
 8005e6c:	9207      	str	r2, [sp, #28]
 8005e6e:	e014      	b.n	8005e9a <_vfiprintf_r+0x13a>
 8005e70:	eba0 0308 	sub.w	r3, r0, r8
 8005e74:	fa09 f303 	lsl.w	r3, r9, r3
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	9304      	str	r3, [sp, #16]
 8005e7c:	46a2      	mov	sl, r4
 8005e7e:	e7d2      	b.n	8005e26 <_vfiprintf_r+0xc6>
 8005e80:	9b03      	ldr	r3, [sp, #12]
 8005e82:	1d19      	adds	r1, r3, #4
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	9103      	str	r1, [sp, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	bfbb      	ittet	lt
 8005e8c:	425b      	neglt	r3, r3
 8005e8e:	f042 0202 	orrlt.w	r2, r2, #2
 8005e92:	9307      	strge	r3, [sp, #28]
 8005e94:	9307      	strlt	r3, [sp, #28]
 8005e96:	bfb8      	it	lt
 8005e98:	9204      	strlt	r2, [sp, #16]
 8005e9a:	7823      	ldrb	r3, [r4, #0]
 8005e9c:	2b2e      	cmp	r3, #46	; 0x2e
 8005e9e:	d10c      	bne.n	8005eba <_vfiprintf_r+0x15a>
 8005ea0:	7863      	ldrb	r3, [r4, #1]
 8005ea2:	2b2a      	cmp	r3, #42	; 0x2a
 8005ea4:	d134      	bne.n	8005f10 <_vfiprintf_r+0x1b0>
 8005ea6:	9b03      	ldr	r3, [sp, #12]
 8005ea8:	1d1a      	adds	r2, r3, #4
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	9203      	str	r2, [sp, #12]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	bfb8      	it	lt
 8005eb2:	f04f 33ff 	movlt.w	r3, #4294967295
 8005eb6:	3402      	adds	r4, #2
 8005eb8:	9305      	str	r3, [sp, #20]
 8005eba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005f90 <_vfiprintf_r+0x230>
 8005ebe:	7821      	ldrb	r1, [r4, #0]
 8005ec0:	2203      	movs	r2, #3
 8005ec2:	4650      	mov	r0, sl
 8005ec4:	f7fa f994 	bl	80001f0 <memchr>
 8005ec8:	b138      	cbz	r0, 8005eda <_vfiprintf_r+0x17a>
 8005eca:	9b04      	ldr	r3, [sp, #16]
 8005ecc:	eba0 000a 	sub.w	r0, r0, sl
 8005ed0:	2240      	movs	r2, #64	; 0x40
 8005ed2:	4082      	lsls	r2, r0
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	3401      	adds	r4, #1
 8005ed8:	9304      	str	r3, [sp, #16]
 8005eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ede:	4829      	ldr	r0, [pc, #164]	; (8005f84 <_vfiprintf_r+0x224>)
 8005ee0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ee4:	2206      	movs	r2, #6
 8005ee6:	f7fa f983 	bl	80001f0 <memchr>
 8005eea:	2800      	cmp	r0, #0
 8005eec:	d03f      	beq.n	8005f6e <_vfiprintf_r+0x20e>
 8005eee:	4b26      	ldr	r3, [pc, #152]	; (8005f88 <_vfiprintf_r+0x228>)
 8005ef0:	bb1b      	cbnz	r3, 8005f3a <_vfiprintf_r+0x1da>
 8005ef2:	9b03      	ldr	r3, [sp, #12]
 8005ef4:	3307      	adds	r3, #7
 8005ef6:	f023 0307 	bic.w	r3, r3, #7
 8005efa:	3308      	adds	r3, #8
 8005efc:	9303      	str	r3, [sp, #12]
 8005efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f00:	443b      	add	r3, r7
 8005f02:	9309      	str	r3, [sp, #36]	; 0x24
 8005f04:	e768      	b.n	8005dd8 <_vfiprintf_r+0x78>
 8005f06:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f0a:	460c      	mov	r4, r1
 8005f0c:	2001      	movs	r0, #1
 8005f0e:	e7a6      	b.n	8005e5e <_vfiprintf_r+0xfe>
 8005f10:	2300      	movs	r3, #0
 8005f12:	3401      	adds	r4, #1
 8005f14:	9305      	str	r3, [sp, #20]
 8005f16:	4619      	mov	r1, r3
 8005f18:	f04f 0c0a 	mov.w	ip, #10
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f22:	3a30      	subs	r2, #48	; 0x30
 8005f24:	2a09      	cmp	r2, #9
 8005f26:	d903      	bls.n	8005f30 <_vfiprintf_r+0x1d0>
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d0c6      	beq.n	8005eba <_vfiprintf_r+0x15a>
 8005f2c:	9105      	str	r1, [sp, #20]
 8005f2e:	e7c4      	b.n	8005eba <_vfiprintf_r+0x15a>
 8005f30:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f34:	4604      	mov	r4, r0
 8005f36:	2301      	movs	r3, #1
 8005f38:	e7f0      	b.n	8005f1c <_vfiprintf_r+0x1bc>
 8005f3a:	ab03      	add	r3, sp, #12
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	462a      	mov	r2, r5
 8005f40:	4b12      	ldr	r3, [pc, #72]	; (8005f8c <_vfiprintf_r+0x22c>)
 8005f42:	a904      	add	r1, sp, #16
 8005f44:	4630      	mov	r0, r6
 8005f46:	f3af 8000 	nop.w
 8005f4a:	4607      	mov	r7, r0
 8005f4c:	1c78      	adds	r0, r7, #1
 8005f4e:	d1d6      	bne.n	8005efe <_vfiprintf_r+0x19e>
 8005f50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f52:	07d9      	lsls	r1, r3, #31
 8005f54:	d405      	bmi.n	8005f62 <_vfiprintf_r+0x202>
 8005f56:	89ab      	ldrh	r3, [r5, #12]
 8005f58:	059a      	lsls	r2, r3, #22
 8005f5a:	d402      	bmi.n	8005f62 <_vfiprintf_r+0x202>
 8005f5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f5e:	f7ff fdcd 	bl	8005afc <__retarget_lock_release_recursive>
 8005f62:	89ab      	ldrh	r3, [r5, #12]
 8005f64:	065b      	lsls	r3, r3, #25
 8005f66:	f53f af1d 	bmi.w	8005da4 <_vfiprintf_r+0x44>
 8005f6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f6c:	e71c      	b.n	8005da8 <_vfiprintf_r+0x48>
 8005f6e:	ab03      	add	r3, sp, #12
 8005f70:	9300      	str	r3, [sp, #0]
 8005f72:	462a      	mov	r2, r5
 8005f74:	4b05      	ldr	r3, [pc, #20]	; (8005f8c <_vfiprintf_r+0x22c>)
 8005f76:	a904      	add	r1, sp, #16
 8005f78:	4630      	mov	r0, r6
 8005f7a:	f000 f879 	bl	8006070 <_printf_i>
 8005f7e:	e7e4      	b.n	8005f4a <_vfiprintf_r+0x1ea>
 8005f80:	08006628 	.word	0x08006628
 8005f84:	08006632 	.word	0x08006632
 8005f88:	00000000 	.word	0x00000000
 8005f8c:	08005d3b 	.word	0x08005d3b
 8005f90:	0800662e 	.word	0x0800662e

08005f94 <_printf_common>:
 8005f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f98:	4616      	mov	r6, r2
 8005f9a:	4699      	mov	r9, r3
 8005f9c:	688a      	ldr	r2, [r1, #8]
 8005f9e:	690b      	ldr	r3, [r1, #16]
 8005fa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	bfb8      	it	lt
 8005fa8:	4613      	movlt	r3, r2
 8005faa:	6033      	str	r3, [r6, #0]
 8005fac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fb0:	4607      	mov	r7, r0
 8005fb2:	460c      	mov	r4, r1
 8005fb4:	b10a      	cbz	r2, 8005fba <_printf_common+0x26>
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	6033      	str	r3, [r6, #0]
 8005fba:	6823      	ldr	r3, [r4, #0]
 8005fbc:	0699      	lsls	r1, r3, #26
 8005fbe:	bf42      	ittt	mi
 8005fc0:	6833      	ldrmi	r3, [r6, #0]
 8005fc2:	3302      	addmi	r3, #2
 8005fc4:	6033      	strmi	r3, [r6, #0]
 8005fc6:	6825      	ldr	r5, [r4, #0]
 8005fc8:	f015 0506 	ands.w	r5, r5, #6
 8005fcc:	d106      	bne.n	8005fdc <_printf_common+0x48>
 8005fce:	f104 0a19 	add.w	sl, r4, #25
 8005fd2:	68e3      	ldr	r3, [r4, #12]
 8005fd4:	6832      	ldr	r2, [r6, #0]
 8005fd6:	1a9b      	subs	r3, r3, r2
 8005fd8:	42ab      	cmp	r3, r5
 8005fda:	dc26      	bgt.n	800602a <_printf_common+0x96>
 8005fdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005fe0:	1e13      	subs	r3, r2, #0
 8005fe2:	6822      	ldr	r2, [r4, #0]
 8005fe4:	bf18      	it	ne
 8005fe6:	2301      	movne	r3, #1
 8005fe8:	0692      	lsls	r2, r2, #26
 8005fea:	d42b      	bmi.n	8006044 <_printf_common+0xb0>
 8005fec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ff0:	4649      	mov	r1, r9
 8005ff2:	4638      	mov	r0, r7
 8005ff4:	47c0      	blx	r8
 8005ff6:	3001      	adds	r0, #1
 8005ff8:	d01e      	beq.n	8006038 <_printf_common+0xa4>
 8005ffa:	6823      	ldr	r3, [r4, #0]
 8005ffc:	6922      	ldr	r2, [r4, #16]
 8005ffe:	f003 0306 	and.w	r3, r3, #6
 8006002:	2b04      	cmp	r3, #4
 8006004:	bf02      	ittt	eq
 8006006:	68e5      	ldreq	r5, [r4, #12]
 8006008:	6833      	ldreq	r3, [r6, #0]
 800600a:	1aed      	subeq	r5, r5, r3
 800600c:	68a3      	ldr	r3, [r4, #8]
 800600e:	bf0c      	ite	eq
 8006010:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006014:	2500      	movne	r5, #0
 8006016:	4293      	cmp	r3, r2
 8006018:	bfc4      	itt	gt
 800601a:	1a9b      	subgt	r3, r3, r2
 800601c:	18ed      	addgt	r5, r5, r3
 800601e:	2600      	movs	r6, #0
 8006020:	341a      	adds	r4, #26
 8006022:	42b5      	cmp	r5, r6
 8006024:	d11a      	bne.n	800605c <_printf_common+0xc8>
 8006026:	2000      	movs	r0, #0
 8006028:	e008      	b.n	800603c <_printf_common+0xa8>
 800602a:	2301      	movs	r3, #1
 800602c:	4652      	mov	r2, sl
 800602e:	4649      	mov	r1, r9
 8006030:	4638      	mov	r0, r7
 8006032:	47c0      	blx	r8
 8006034:	3001      	adds	r0, #1
 8006036:	d103      	bne.n	8006040 <_printf_common+0xac>
 8006038:	f04f 30ff 	mov.w	r0, #4294967295
 800603c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006040:	3501      	adds	r5, #1
 8006042:	e7c6      	b.n	8005fd2 <_printf_common+0x3e>
 8006044:	18e1      	adds	r1, r4, r3
 8006046:	1c5a      	adds	r2, r3, #1
 8006048:	2030      	movs	r0, #48	; 0x30
 800604a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800604e:	4422      	add	r2, r4
 8006050:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006054:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006058:	3302      	adds	r3, #2
 800605a:	e7c7      	b.n	8005fec <_printf_common+0x58>
 800605c:	2301      	movs	r3, #1
 800605e:	4622      	mov	r2, r4
 8006060:	4649      	mov	r1, r9
 8006062:	4638      	mov	r0, r7
 8006064:	47c0      	blx	r8
 8006066:	3001      	adds	r0, #1
 8006068:	d0e6      	beq.n	8006038 <_printf_common+0xa4>
 800606a:	3601      	adds	r6, #1
 800606c:	e7d9      	b.n	8006022 <_printf_common+0x8e>
	...

08006070 <_printf_i>:
 8006070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006074:	7e0f      	ldrb	r7, [r1, #24]
 8006076:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006078:	2f78      	cmp	r7, #120	; 0x78
 800607a:	4691      	mov	r9, r2
 800607c:	4680      	mov	r8, r0
 800607e:	460c      	mov	r4, r1
 8006080:	469a      	mov	sl, r3
 8006082:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006086:	d807      	bhi.n	8006098 <_printf_i+0x28>
 8006088:	2f62      	cmp	r7, #98	; 0x62
 800608a:	d80a      	bhi.n	80060a2 <_printf_i+0x32>
 800608c:	2f00      	cmp	r7, #0
 800608e:	f000 80d4 	beq.w	800623a <_printf_i+0x1ca>
 8006092:	2f58      	cmp	r7, #88	; 0x58
 8006094:	f000 80c0 	beq.w	8006218 <_printf_i+0x1a8>
 8006098:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800609c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060a0:	e03a      	b.n	8006118 <_printf_i+0xa8>
 80060a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060a6:	2b15      	cmp	r3, #21
 80060a8:	d8f6      	bhi.n	8006098 <_printf_i+0x28>
 80060aa:	a101      	add	r1, pc, #4	; (adr r1, 80060b0 <_printf_i+0x40>)
 80060ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060b0:	08006109 	.word	0x08006109
 80060b4:	0800611d 	.word	0x0800611d
 80060b8:	08006099 	.word	0x08006099
 80060bc:	08006099 	.word	0x08006099
 80060c0:	08006099 	.word	0x08006099
 80060c4:	08006099 	.word	0x08006099
 80060c8:	0800611d 	.word	0x0800611d
 80060cc:	08006099 	.word	0x08006099
 80060d0:	08006099 	.word	0x08006099
 80060d4:	08006099 	.word	0x08006099
 80060d8:	08006099 	.word	0x08006099
 80060dc:	08006221 	.word	0x08006221
 80060e0:	08006149 	.word	0x08006149
 80060e4:	080061db 	.word	0x080061db
 80060e8:	08006099 	.word	0x08006099
 80060ec:	08006099 	.word	0x08006099
 80060f0:	08006243 	.word	0x08006243
 80060f4:	08006099 	.word	0x08006099
 80060f8:	08006149 	.word	0x08006149
 80060fc:	08006099 	.word	0x08006099
 8006100:	08006099 	.word	0x08006099
 8006104:	080061e3 	.word	0x080061e3
 8006108:	682b      	ldr	r3, [r5, #0]
 800610a:	1d1a      	adds	r2, r3, #4
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	602a      	str	r2, [r5, #0]
 8006110:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006114:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006118:	2301      	movs	r3, #1
 800611a:	e09f      	b.n	800625c <_printf_i+0x1ec>
 800611c:	6820      	ldr	r0, [r4, #0]
 800611e:	682b      	ldr	r3, [r5, #0]
 8006120:	0607      	lsls	r7, r0, #24
 8006122:	f103 0104 	add.w	r1, r3, #4
 8006126:	6029      	str	r1, [r5, #0]
 8006128:	d501      	bpl.n	800612e <_printf_i+0xbe>
 800612a:	681e      	ldr	r6, [r3, #0]
 800612c:	e003      	b.n	8006136 <_printf_i+0xc6>
 800612e:	0646      	lsls	r6, r0, #25
 8006130:	d5fb      	bpl.n	800612a <_printf_i+0xba>
 8006132:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006136:	2e00      	cmp	r6, #0
 8006138:	da03      	bge.n	8006142 <_printf_i+0xd2>
 800613a:	232d      	movs	r3, #45	; 0x2d
 800613c:	4276      	negs	r6, r6
 800613e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006142:	485a      	ldr	r0, [pc, #360]	; (80062ac <_printf_i+0x23c>)
 8006144:	230a      	movs	r3, #10
 8006146:	e012      	b.n	800616e <_printf_i+0xfe>
 8006148:	682b      	ldr	r3, [r5, #0]
 800614a:	6820      	ldr	r0, [r4, #0]
 800614c:	1d19      	adds	r1, r3, #4
 800614e:	6029      	str	r1, [r5, #0]
 8006150:	0605      	lsls	r5, r0, #24
 8006152:	d501      	bpl.n	8006158 <_printf_i+0xe8>
 8006154:	681e      	ldr	r6, [r3, #0]
 8006156:	e002      	b.n	800615e <_printf_i+0xee>
 8006158:	0641      	lsls	r1, r0, #25
 800615a:	d5fb      	bpl.n	8006154 <_printf_i+0xe4>
 800615c:	881e      	ldrh	r6, [r3, #0]
 800615e:	4853      	ldr	r0, [pc, #332]	; (80062ac <_printf_i+0x23c>)
 8006160:	2f6f      	cmp	r7, #111	; 0x6f
 8006162:	bf0c      	ite	eq
 8006164:	2308      	moveq	r3, #8
 8006166:	230a      	movne	r3, #10
 8006168:	2100      	movs	r1, #0
 800616a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800616e:	6865      	ldr	r5, [r4, #4]
 8006170:	60a5      	str	r5, [r4, #8]
 8006172:	2d00      	cmp	r5, #0
 8006174:	bfa2      	ittt	ge
 8006176:	6821      	ldrge	r1, [r4, #0]
 8006178:	f021 0104 	bicge.w	r1, r1, #4
 800617c:	6021      	strge	r1, [r4, #0]
 800617e:	b90e      	cbnz	r6, 8006184 <_printf_i+0x114>
 8006180:	2d00      	cmp	r5, #0
 8006182:	d04b      	beq.n	800621c <_printf_i+0x1ac>
 8006184:	4615      	mov	r5, r2
 8006186:	fbb6 f1f3 	udiv	r1, r6, r3
 800618a:	fb03 6711 	mls	r7, r3, r1, r6
 800618e:	5dc7      	ldrb	r7, [r0, r7]
 8006190:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006194:	4637      	mov	r7, r6
 8006196:	42bb      	cmp	r3, r7
 8006198:	460e      	mov	r6, r1
 800619a:	d9f4      	bls.n	8006186 <_printf_i+0x116>
 800619c:	2b08      	cmp	r3, #8
 800619e:	d10b      	bne.n	80061b8 <_printf_i+0x148>
 80061a0:	6823      	ldr	r3, [r4, #0]
 80061a2:	07de      	lsls	r6, r3, #31
 80061a4:	d508      	bpl.n	80061b8 <_printf_i+0x148>
 80061a6:	6923      	ldr	r3, [r4, #16]
 80061a8:	6861      	ldr	r1, [r4, #4]
 80061aa:	4299      	cmp	r1, r3
 80061ac:	bfde      	ittt	le
 80061ae:	2330      	movle	r3, #48	; 0x30
 80061b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80061b8:	1b52      	subs	r2, r2, r5
 80061ba:	6122      	str	r2, [r4, #16]
 80061bc:	f8cd a000 	str.w	sl, [sp]
 80061c0:	464b      	mov	r3, r9
 80061c2:	aa03      	add	r2, sp, #12
 80061c4:	4621      	mov	r1, r4
 80061c6:	4640      	mov	r0, r8
 80061c8:	f7ff fee4 	bl	8005f94 <_printf_common>
 80061cc:	3001      	adds	r0, #1
 80061ce:	d14a      	bne.n	8006266 <_printf_i+0x1f6>
 80061d0:	f04f 30ff 	mov.w	r0, #4294967295
 80061d4:	b004      	add	sp, #16
 80061d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061da:	6823      	ldr	r3, [r4, #0]
 80061dc:	f043 0320 	orr.w	r3, r3, #32
 80061e0:	6023      	str	r3, [r4, #0]
 80061e2:	4833      	ldr	r0, [pc, #204]	; (80062b0 <_printf_i+0x240>)
 80061e4:	2778      	movs	r7, #120	; 0x78
 80061e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80061ea:	6823      	ldr	r3, [r4, #0]
 80061ec:	6829      	ldr	r1, [r5, #0]
 80061ee:	061f      	lsls	r7, r3, #24
 80061f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80061f4:	d402      	bmi.n	80061fc <_printf_i+0x18c>
 80061f6:	065f      	lsls	r7, r3, #25
 80061f8:	bf48      	it	mi
 80061fa:	b2b6      	uxthmi	r6, r6
 80061fc:	07df      	lsls	r7, r3, #31
 80061fe:	bf48      	it	mi
 8006200:	f043 0320 	orrmi.w	r3, r3, #32
 8006204:	6029      	str	r1, [r5, #0]
 8006206:	bf48      	it	mi
 8006208:	6023      	strmi	r3, [r4, #0]
 800620a:	b91e      	cbnz	r6, 8006214 <_printf_i+0x1a4>
 800620c:	6823      	ldr	r3, [r4, #0]
 800620e:	f023 0320 	bic.w	r3, r3, #32
 8006212:	6023      	str	r3, [r4, #0]
 8006214:	2310      	movs	r3, #16
 8006216:	e7a7      	b.n	8006168 <_printf_i+0xf8>
 8006218:	4824      	ldr	r0, [pc, #144]	; (80062ac <_printf_i+0x23c>)
 800621a:	e7e4      	b.n	80061e6 <_printf_i+0x176>
 800621c:	4615      	mov	r5, r2
 800621e:	e7bd      	b.n	800619c <_printf_i+0x12c>
 8006220:	682b      	ldr	r3, [r5, #0]
 8006222:	6826      	ldr	r6, [r4, #0]
 8006224:	6961      	ldr	r1, [r4, #20]
 8006226:	1d18      	adds	r0, r3, #4
 8006228:	6028      	str	r0, [r5, #0]
 800622a:	0635      	lsls	r5, r6, #24
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	d501      	bpl.n	8006234 <_printf_i+0x1c4>
 8006230:	6019      	str	r1, [r3, #0]
 8006232:	e002      	b.n	800623a <_printf_i+0x1ca>
 8006234:	0670      	lsls	r0, r6, #25
 8006236:	d5fb      	bpl.n	8006230 <_printf_i+0x1c0>
 8006238:	8019      	strh	r1, [r3, #0]
 800623a:	2300      	movs	r3, #0
 800623c:	6123      	str	r3, [r4, #16]
 800623e:	4615      	mov	r5, r2
 8006240:	e7bc      	b.n	80061bc <_printf_i+0x14c>
 8006242:	682b      	ldr	r3, [r5, #0]
 8006244:	1d1a      	adds	r2, r3, #4
 8006246:	602a      	str	r2, [r5, #0]
 8006248:	681d      	ldr	r5, [r3, #0]
 800624a:	6862      	ldr	r2, [r4, #4]
 800624c:	2100      	movs	r1, #0
 800624e:	4628      	mov	r0, r5
 8006250:	f7f9 ffce 	bl	80001f0 <memchr>
 8006254:	b108      	cbz	r0, 800625a <_printf_i+0x1ea>
 8006256:	1b40      	subs	r0, r0, r5
 8006258:	6060      	str	r0, [r4, #4]
 800625a:	6863      	ldr	r3, [r4, #4]
 800625c:	6123      	str	r3, [r4, #16]
 800625e:	2300      	movs	r3, #0
 8006260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006264:	e7aa      	b.n	80061bc <_printf_i+0x14c>
 8006266:	6923      	ldr	r3, [r4, #16]
 8006268:	462a      	mov	r2, r5
 800626a:	4649      	mov	r1, r9
 800626c:	4640      	mov	r0, r8
 800626e:	47d0      	blx	sl
 8006270:	3001      	adds	r0, #1
 8006272:	d0ad      	beq.n	80061d0 <_printf_i+0x160>
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	079b      	lsls	r3, r3, #30
 8006278:	d413      	bmi.n	80062a2 <_printf_i+0x232>
 800627a:	68e0      	ldr	r0, [r4, #12]
 800627c:	9b03      	ldr	r3, [sp, #12]
 800627e:	4298      	cmp	r0, r3
 8006280:	bfb8      	it	lt
 8006282:	4618      	movlt	r0, r3
 8006284:	e7a6      	b.n	80061d4 <_printf_i+0x164>
 8006286:	2301      	movs	r3, #1
 8006288:	4632      	mov	r2, r6
 800628a:	4649      	mov	r1, r9
 800628c:	4640      	mov	r0, r8
 800628e:	47d0      	blx	sl
 8006290:	3001      	adds	r0, #1
 8006292:	d09d      	beq.n	80061d0 <_printf_i+0x160>
 8006294:	3501      	adds	r5, #1
 8006296:	68e3      	ldr	r3, [r4, #12]
 8006298:	9903      	ldr	r1, [sp, #12]
 800629a:	1a5b      	subs	r3, r3, r1
 800629c:	42ab      	cmp	r3, r5
 800629e:	dcf2      	bgt.n	8006286 <_printf_i+0x216>
 80062a0:	e7eb      	b.n	800627a <_printf_i+0x20a>
 80062a2:	2500      	movs	r5, #0
 80062a4:	f104 0619 	add.w	r6, r4, #25
 80062a8:	e7f5      	b.n	8006296 <_printf_i+0x226>
 80062aa:	bf00      	nop
 80062ac:	08006639 	.word	0x08006639
 80062b0:	0800664a 	.word	0x0800664a

080062b4 <__sflush_r>:
 80062b4:	898a      	ldrh	r2, [r1, #12]
 80062b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062ba:	4605      	mov	r5, r0
 80062bc:	0710      	lsls	r0, r2, #28
 80062be:	460c      	mov	r4, r1
 80062c0:	d458      	bmi.n	8006374 <__sflush_r+0xc0>
 80062c2:	684b      	ldr	r3, [r1, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	dc05      	bgt.n	80062d4 <__sflush_r+0x20>
 80062c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	dc02      	bgt.n	80062d4 <__sflush_r+0x20>
 80062ce:	2000      	movs	r0, #0
 80062d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062d6:	2e00      	cmp	r6, #0
 80062d8:	d0f9      	beq.n	80062ce <__sflush_r+0x1a>
 80062da:	2300      	movs	r3, #0
 80062dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80062e0:	682f      	ldr	r7, [r5, #0]
 80062e2:	6a21      	ldr	r1, [r4, #32]
 80062e4:	602b      	str	r3, [r5, #0]
 80062e6:	d032      	beq.n	800634e <__sflush_r+0x9a>
 80062e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80062ea:	89a3      	ldrh	r3, [r4, #12]
 80062ec:	075a      	lsls	r2, r3, #29
 80062ee:	d505      	bpl.n	80062fc <__sflush_r+0x48>
 80062f0:	6863      	ldr	r3, [r4, #4]
 80062f2:	1ac0      	subs	r0, r0, r3
 80062f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80062f6:	b10b      	cbz	r3, 80062fc <__sflush_r+0x48>
 80062f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062fa:	1ac0      	subs	r0, r0, r3
 80062fc:	2300      	movs	r3, #0
 80062fe:	4602      	mov	r2, r0
 8006300:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006302:	6a21      	ldr	r1, [r4, #32]
 8006304:	4628      	mov	r0, r5
 8006306:	47b0      	blx	r6
 8006308:	1c43      	adds	r3, r0, #1
 800630a:	89a3      	ldrh	r3, [r4, #12]
 800630c:	d106      	bne.n	800631c <__sflush_r+0x68>
 800630e:	6829      	ldr	r1, [r5, #0]
 8006310:	291d      	cmp	r1, #29
 8006312:	d82b      	bhi.n	800636c <__sflush_r+0xb8>
 8006314:	4a29      	ldr	r2, [pc, #164]	; (80063bc <__sflush_r+0x108>)
 8006316:	410a      	asrs	r2, r1
 8006318:	07d6      	lsls	r6, r2, #31
 800631a:	d427      	bmi.n	800636c <__sflush_r+0xb8>
 800631c:	2200      	movs	r2, #0
 800631e:	6062      	str	r2, [r4, #4]
 8006320:	04d9      	lsls	r1, r3, #19
 8006322:	6922      	ldr	r2, [r4, #16]
 8006324:	6022      	str	r2, [r4, #0]
 8006326:	d504      	bpl.n	8006332 <__sflush_r+0x7e>
 8006328:	1c42      	adds	r2, r0, #1
 800632a:	d101      	bne.n	8006330 <__sflush_r+0x7c>
 800632c:	682b      	ldr	r3, [r5, #0]
 800632e:	b903      	cbnz	r3, 8006332 <__sflush_r+0x7e>
 8006330:	6560      	str	r0, [r4, #84]	; 0x54
 8006332:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006334:	602f      	str	r7, [r5, #0]
 8006336:	2900      	cmp	r1, #0
 8006338:	d0c9      	beq.n	80062ce <__sflush_r+0x1a>
 800633a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800633e:	4299      	cmp	r1, r3
 8006340:	d002      	beq.n	8006348 <__sflush_r+0x94>
 8006342:	4628      	mov	r0, r5
 8006344:	f7ff fbea 	bl	8005b1c <_free_r>
 8006348:	2000      	movs	r0, #0
 800634a:	6360      	str	r0, [r4, #52]	; 0x34
 800634c:	e7c0      	b.n	80062d0 <__sflush_r+0x1c>
 800634e:	2301      	movs	r3, #1
 8006350:	4628      	mov	r0, r5
 8006352:	47b0      	blx	r6
 8006354:	1c41      	adds	r1, r0, #1
 8006356:	d1c8      	bne.n	80062ea <__sflush_r+0x36>
 8006358:	682b      	ldr	r3, [r5, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d0c5      	beq.n	80062ea <__sflush_r+0x36>
 800635e:	2b1d      	cmp	r3, #29
 8006360:	d001      	beq.n	8006366 <__sflush_r+0xb2>
 8006362:	2b16      	cmp	r3, #22
 8006364:	d101      	bne.n	800636a <__sflush_r+0xb6>
 8006366:	602f      	str	r7, [r5, #0]
 8006368:	e7b1      	b.n	80062ce <__sflush_r+0x1a>
 800636a:	89a3      	ldrh	r3, [r4, #12]
 800636c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006370:	81a3      	strh	r3, [r4, #12]
 8006372:	e7ad      	b.n	80062d0 <__sflush_r+0x1c>
 8006374:	690f      	ldr	r7, [r1, #16]
 8006376:	2f00      	cmp	r7, #0
 8006378:	d0a9      	beq.n	80062ce <__sflush_r+0x1a>
 800637a:	0793      	lsls	r3, r2, #30
 800637c:	680e      	ldr	r6, [r1, #0]
 800637e:	bf08      	it	eq
 8006380:	694b      	ldreq	r3, [r1, #20]
 8006382:	600f      	str	r7, [r1, #0]
 8006384:	bf18      	it	ne
 8006386:	2300      	movne	r3, #0
 8006388:	eba6 0807 	sub.w	r8, r6, r7
 800638c:	608b      	str	r3, [r1, #8]
 800638e:	f1b8 0f00 	cmp.w	r8, #0
 8006392:	dd9c      	ble.n	80062ce <__sflush_r+0x1a>
 8006394:	6a21      	ldr	r1, [r4, #32]
 8006396:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006398:	4643      	mov	r3, r8
 800639a:	463a      	mov	r2, r7
 800639c:	4628      	mov	r0, r5
 800639e:	47b0      	blx	r6
 80063a0:	2800      	cmp	r0, #0
 80063a2:	dc06      	bgt.n	80063b2 <__sflush_r+0xfe>
 80063a4:	89a3      	ldrh	r3, [r4, #12]
 80063a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063aa:	81a3      	strh	r3, [r4, #12]
 80063ac:	f04f 30ff 	mov.w	r0, #4294967295
 80063b0:	e78e      	b.n	80062d0 <__sflush_r+0x1c>
 80063b2:	4407      	add	r7, r0
 80063b4:	eba8 0800 	sub.w	r8, r8, r0
 80063b8:	e7e9      	b.n	800638e <__sflush_r+0xda>
 80063ba:	bf00      	nop
 80063bc:	dfbffffe 	.word	0xdfbffffe

080063c0 <_fflush_r>:
 80063c0:	b538      	push	{r3, r4, r5, lr}
 80063c2:	690b      	ldr	r3, [r1, #16]
 80063c4:	4605      	mov	r5, r0
 80063c6:	460c      	mov	r4, r1
 80063c8:	b913      	cbnz	r3, 80063d0 <_fflush_r+0x10>
 80063ca:	2500      	movs	r5, #0
 80063cc:	4628      	mov	r0, r5
 80063ce:	bd38      	pop	{r3, r4, r5, pc}
 80063d0:	b118      	cbz	r0, 80063da <_fflush_r+0x1a>
 80063d2:	6a03      	ldr	r3, [r0, #32]
 80063d4:	b90b      	cbnz	r3, 80063da <_fflush_r+0x1a>
 80063d6:	f7ff f945 	bl	8005664 <__sinit>
 80063da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d0f3      	beq.n	80063ca <_fflush_r+0xa>
 80063e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80063e4:	07d0      	lsls	r0, r2, #31
 80063e6:	d404      	bmi.n	80063f2 <_fflush_r+0x32>
 80063e8:	0599      	lsls	r1, r3, #22
 80063ea:	d402      	bmi.n	80063f2 <_fflush_r+0x32>
 80063ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063ee:	f7ff fb84 	bl	8005afa <__retarget_lock_acquire_recursive>
 80063f2:	4628      	mov	r0, r5
 80063f4:	4621      	mov	r1, r4
 80063f6:	f7ff ff5d 	bl	80062b4 <__sflush_r>
 80063fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063fc:	07da      	lsls	r2, r3, #31
 80063fe:	4605      	mov	r5, r0
 8006400:	d4e4      	bmi.n	80063cc <_fflush_r+0xc>
 8006402:	89a3      	ldrh	r3, [r4, #12]
 8006404:	059b      	lsls	r3, r3, #22
 8006406:	d4e1      	bmi.n	80063cc <_fflush_r+0xc>
 8006408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800640a:	f7ff fb77 	bl	8005afc <__retarget_lock_release_recursive>
 800640e:	e7dd      	b.n	80063cc <_fflush_r+0xc>

08006410 <__swhatbuf_r>:
 8006410:	b570      	push	{r4, r5, r6, lr}
 8006412:	460c      	mov	r4, r1
 8006414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006418:	2900      	cmp	r1, #0
 800641a:	b096      	sub	sp, #88	; 0x58
 800641c:	4615      	mov	r5, r2
 800641e:	461e      	mov	r6, r3
 8006420:	da0d      	bge.n	800643e <__swhatbuf_r+0x2e>
 8006422:	89a3      	ldrh	r3, [r4, #12]
 8006424:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006428:	f04f 0100 	mov.w	r1, #0
 800642c:	bf0c      	ite	eq
 800642e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006432:	2340      	movne	r3, #64	; 0x40
 8006434:	2000      	movs	r0, #0
 8006436:	6031      	str	r1, [r6, #0]
 8006438:	602b      	str	r3, [r5, #0]
 800643a:	b016      	add	sp, #88	; 0x58
 800643c:	bd70      	pop	{r4, r5, r6, pc}
 800643e:	466a      	mov	r2, sp
 8006440:	f000 f848 	bl	80064d4 <_fstat_r>
 8006444:	2800      	cmp	r0, #0
 8006446:	dbec      	blt.n	8006422 <__swhatbuf_r+0x12>
 8006448:	9901      	ldr	r1, [sp, #4]
 800644a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800644e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006452:	4259      	negs	r1, r3
 8006454:	4159      	adcs	r1, r3
 8006456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800645a:	e7eb      	b.n	8006434 <__swhatbuf_r+0x24>

0800645c <__smakebuf_r>:
 800645c:	898b      	ldrh	r3, [r1, #12]
 800645e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006460:	079d      	lsls	r5, r3, #30
 8006462:	4606      	mov	r6, r0
 8006464:	460c      	mov	r4, r1
 8006466:	d507      	bpl.n	8006478 <__smakebuf_r+0x1c>
 8006468:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800646c:	6023      	str	r3, [r4, #0]
 800646e:	6123      	str	r3, [r4, #16]
 8006470:	2301      	movs	r3, #1
 8006472:	6163      	str	r3, [r4, #20]
 8006474:	b002      	add	sp, #8
 8006476:	bd70      	pop	{r4, r5, r6, pc}
 8006478:	ab01      	add	r3, sp, #4
 800647a:	466a      	mov	r2, sp
 800647c:	f7ff ffc8 	bl	8006410 <__swhatbuf_r>
 8006480:	9900      	ldr	r1, [sp, #0]
 8006482:	4605      	mov	r5, r0
 8006484:	4630      	mov	r0, r6
 8006486:	f7ff fbb5 	bl	8005bf4 <_malloc_r>
 800648a:	b948      	cbnz	r0, 80064a0 <__smakebuf_r+0x44>
 800648c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006490:	059a      	lsls	r2, r3, #22
 8006492:	d4ef      	bmi.n	8006474 <__smakebuf_r+0x18>
 8006494:	f023 0303 	bic.w	r3, r3, #3
 8006498:	f043 0302 	orr.w	r3, r3, #2
 800649c:	81a3      	strh	r3, [r4, #12]
 800649e:	e7e3      	b.n	8006468 <__smakebuf_r+0xc>
 80064a0:	89a3      	ldrh	r3, [r4, #12]
 80064a2:	6020      	str	r0, [r4, #0]
 80064a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064a8:	81a3      	strh	r3, [r4, #12]
 80064aa:	9b00      	ldr	r3, [sp, #0]
 80064ac:	6163      	str	r3, [r4, #20]
 80064ae:	9b01      	ldr	r3, [sp, #4]
 80064b0:	6120      	str	r0, [r4, #16]
 80064b2:	b15b      	cbz	r3, 80064cc <__smakebuf_r+0x70>
 80064b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064b8:	4630      	mov	r0, r6
 80064ba:	f000 f81d 	bl	80064f8 <_isatty_r>
 80064be:	b128      	cbz	r0, 80064cc <__smakebuf_r+0x70>
 80064c0:	89a3      	ldrh	r3, [r4, #12]
 80064c2:	f023 0303 	bic.w	r3, r3, #3
 80064c6:	f043 0301 	orr.w	r3, r3, #1
 80064ca:	81a3      	strh	r3, [r4, #12]
 80064cc:	89a3      	ldrh	r3, [r4, #12]
 80064ce:	431d      	orrs	r5, r3
 80064d0:	81a5      	strh	r5, [r4, #12]
 80064d2:	e7cf      	b.n	8006474 <__smakebuf_r+0x18>

080064d4 <_fstat_r>:
 80064d4:	b538      	push	{r3, r4, r5, lr}
 80064d6:	4d07      	ldr	r5, [pc, #28]	; (80064f4 <_fstat_r+0x20>)
 80064d8:	2300      	movs	r3, #0
 80064da:	4604      	mov	r4, r0
 80064dc:	4608      	mov	r0, r1
 80064de:	4611      	mov	r1, r2
 80064e0:	602b      	str	r3, [r5, #0]
 80064e2:	f7fa fad4 	bl	8000a8e <_fstat>
 80064e6:	1c43      	adds	r3, r0, #1
 80064e8:	d102      	bne.n	80064f0 <_fstat_r+0x1c>
 80064ea:	682b      	ldr	r3, [r5, #0]
 80064ec:	b103      	cbz	r3, 80064f0 <_fstat_r+0x1c>
 80064ee:	6023      	str	r3, [r4, #0]
 80064f0:	bd38      	pop	{r3, r4, r5, pc}
 80064f2:	bf00      	nop
 80064f4:	20004c08 	.word	0x20004c08

080064f8 <_isatty_r>:
 80064f8:	b538      	push	{r3, r4, r5, lr}
 80064fa:	4d06      	ldr	r5, [pc, #24]	; (8006514 <_isatty_r+0x1c>)
 80064fc:	2300      	movs	r3, #0
 80064fe:	4604      	mov	r4, r0
 8006500:	4608      	mov	r0, r1
 8006502:	602b      	str	r3, [r5, #0]
 8006504:	f7fa fad3 	bl	8000aae <_isatty>
 8006508:	1c43      	adds	r3, r0, #1
 800650a:	d102      	bne.n	8006512 <_isatty_r+0x1a>
 800650c:	682b      	ldr	r3, [r5, #0]
 800650e:	b103      	cbz	r3, 8006512 <_isatty_r+0x1a>
 8006510:	6023      	str	r3, [r4, #0]
 8006512:	bd38      	pop	{r3, r4, r5, pc}
 8006514:	20004c08 	.word	0x20004c08

08006518 <_sbrk_r>:
 8006518:	b538      	push	{r3, r4, r5, lr}
 800651a:	4d06      	ldr	r5, [pc, #24]	; (8006534 <_sbrk_r+0x1c>)
 800651c:	2300      	movs	r3, #0
 800651e:	4604      	mov	r4, r0
 8006520:	4608      	mov	r0, r1
 8006522:	602b      	str	r3, [r5, #0]
 8006524:	f7fa fadc 	bl	8000ae0 <_sbrk>
 8006528:	1c43      	adds	r3, r0, #1
 800652a:	d102      	bne.n	8006532 <_sbrk_r+0x1a>
 800652c:	682b      	ldr	r3, [r5, #0]
 800652e:	b103      	cbz	r3, 8006532 <_sbrk_r+0x1a>
 8006530:	6023      	str	r3, [r4, #0]
 8006532:	bd38      	pop	{r3, r4, r5, pc}
 8006534:	20004c08 	.word	0x20004c08

08006538 <_init>:
 8006538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653a:	bf00      	nop
 800653c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800653e:	bc08      	pop	{r3}
 8006540:	469e      	mov	lr, r3
 8006542:	4770      	bx	lr

08006544 <_fini>:
 8006544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006546:	bf00      	nop
 8006548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800654a:	bc08      	pop	{r3}
 800654c:	469e      	mov	lr, r3
 800654e:	4770      	bx	lr
