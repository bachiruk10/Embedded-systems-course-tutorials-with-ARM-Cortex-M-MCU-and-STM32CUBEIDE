
CH6 Timers - Tutorial P6-10 Alarm tutorial-RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ff0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080031a0  080031a0  000131a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003204  08003204  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003204  08003204  00013204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800320c  0800320c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800320c  0800320c  0001320c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003210  08003210  00013210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003214  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          000001a4  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000200  20000200  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00006bad  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001718  00000000  00000000  00026c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006d0  00000000  00000000  00028398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000507  00000000  00000000  00028a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000230af  00000000  00000000  00028f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000089ca  00000000  00000000  0004c01e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d522f  00000000  00000000  000549e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001f48  00000000  00000000  00129c18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008f  00000000  00000000  0012bb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003188 	.word	0x08003188

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08003188 	.word	0x08003188

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f000 fb00 	bl	8000b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f820 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 f8b2 	bl	8000700 <MX_GPIO_Init>
  MX_RTC_Init();
 800059c:	f000 f88a 	bl	80006b4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0)==0x32F2){
 80005a0:	2100      	movs	r1, #0
 80005a2:	480b      	ldr	r0, [pc, #44]	; (80005d0 <main+0x44>)
 80005a4:	f002 f929 	bl	80027fa <HAL_RTCEx_BKUPRead>
 80005a8:	4603      	mov	r3, r0
 80005aa:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d101      	bne.n	80005b6 <main+0x2a>
	  set_time();
 80005b2:	f000 f8f7 	bl	80007a4 <set_time>
  }


  set_alarm(today);
 80005b6:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <main+0x48>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 f934 	bl	8000828 <set_alarm>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  get_time();
 80005c0:	f000 f97c 	bl	80008bc <get_time>
	  HAL_Delay(1000);
 80005c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c8:	f000 fb56 	bl	8000c78 <HAL_Delay>
	  get_time();
 80005cc:	e7f8      	b.n	80005c0 <main+0x34>
 80005ce:	bf00      	nop
 80005d0:	20000078 	.word	0x20000078
 80005d4:	200000ae 	.word	0x200000ae

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	; 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	2230      	movs	r2, #48	; 0x30
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 f94a 	bl	8002880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	4b2a      	ldr	r3, [pc, #168]	; (80006ac <SystemClock_Config+0xd4>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	4a29      	ldr	r2, [pc, #164]	; (80006ac <SystemClock_Config+0xd4>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	; 0x40
 800060c:	4b27      	ldr	r3, [pc, #156]	; (80006ac <SystemClock_Config+0xd4>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	4b24      	ldr	r3, [pc, #144]	; (80006b0 <SystemClock_Config+0xd8>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000624:	4a22      	ldr	r2, [pc, #136]	; (80006b0 <SystemClock_Config+0xd8>)
 8000626:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <SystemClock_Config+0xd8>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000638:	2303      	movs	r3, #3
 800063a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800063c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000642:	2301      	movs	r3, #1
 8000644:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000646:	2310      	movs	r3, #16
 8000648:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064a:	2302      	movs	r3, #2
 800064c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800064e:	2300      	movs	r3, #0
 8000650:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000652:	2308      	movs	r3, #8
 8000654:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000656:	2332      	movs	r3, #50	; 0x32
 8000658:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800065a:	2304      	movs	r3, #4
 800065c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800065e:	2307      	movs	r3, #7
 8000660:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	4618      	mov	r0, r3
 8000668:	f000 fe02 	bl	8001270 <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000672:	f000 f987 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067a:	2302      	movs	r3, #2
 800067c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000682:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000686:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000688:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800068c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	2100      	movs	r1, #0
 8000694:	4618      	mov	r0, r3
 8000696:	f001 f863 	bl	8001760 <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80006a0:	f000 f970 	bl	8000984 <Error_Handler>
  }
}
 80006a4:	bf00      	nop
 80006a6:	3750      	adds	r7, #80	; 0x50
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000

080006b4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_RTC_Init+0x44>)
 80006ba:	4a10      	ldr	r2, [pc, #64]	; (80006fc <MX_RTC_Init+0x48>)
 80006bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_RTC_Init+0x44>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 125-1;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_RTC_Init+0x44>)
 80006c6:	227c      	movs	r2, #124	; 0x7c
 80006c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 2560-1;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_RTC_Init+0x44>)
 80006cc:	f640 12ff 	movw	r2, #2559	; 0x9ff
 80006d0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_RTC_Init+0x44>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <MX_RTC_Init+0x44>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_RTC_Init+0x44>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006e4:	4804      	ldr	r0, [pc, #16]	; (80006f8 <MX_RTC_Init+0x44>)
 80006e6:	f001 fbe7 	bl	8001eb8 <HAL_RTC_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 80006f0:	f000 f948 	bl	8000984 <Error_Handler>

  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000078 	.word	0x20000078
 80006fc:	40002800 	.word	0x40002800

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b088      	sub	sp, #32
 8000704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	4b20      	ldr	r3, [pc, #128]	; (800079c <MX_GPIO_Init+0x9c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a1f      	ldr	r2, [pc, #124]	; (800079c <MX_GPIO_Init+0x9c>)
 8000720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b1d      	ldr	r3, [pc, #116]	; (800079c <MX_GPIO_Init+0x9c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <MX_GPIO_Init+0x9c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a18      	ldr	r2, [pc, #96]	; (800079c <MX_GPIO_Init+0x9c>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <MX_GPIO_Init+0x9c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_GPIO_Init+0x9c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a11      	ldr	r2, [pc, #68]	; (800079c <MX_GPIO_Init+0x9c>)
 8000758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_GPIO_Init+0x9c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000770:	480b      	ldr	r0, [pc, #44]	; (80007a0 <MX_GPIO_Init+0xa0>)
 8000772:	f000 fd63 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800077a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	4619      	mov	r1, r3
 800078e:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_GPIO_Init+0xa0>)
 8000790:	f000 fba8 	bl	8000ee4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000794:	bf00      	nop
 8000796:	3720      	adds	r7, #32
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800
 80007a0:	40021800 	.word	0x40021800

080007a4 <set_time>:

/* USER CODE BEGIN 4 */
void set_time(void){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0

	/** Initialize RTC and set the Time and Date
	 */
	RTC_TimeTypeDef sTime = {0};
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 80007b8:	2300      	movs	r3, #0
 80007ba:	603b      	str	r3, [r7, #0]

	sTime.Hours = 0x9;
 80007bc:	2309      	movs	r3, #9
 80007be:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x20;
 80007c0:	2320      	movs	r3, #32
 80007c2:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
 80007c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007cc:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2201      	movs	r2, #1
 80007d6:	4619      	mov	r1, r3
 80007d8:	4812      	ldr	r0, [pc, #72]	; (8000824 <set_time+0x80>)
 80007da:	f001 fbe3 	bl	8001fa4 <HAL_RTC_SetTime>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <set_time+0x44>
	{
		Error_Handler();
 80007e4:	f000 f8ce 	bl	8000984 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80007e8:	2301      	movs	r3, #1
 80007ea:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_NOVEMBER;
 80007ec:	2311      	movs	r3, #17
 80007ee:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x6;
 80007f0:	2306      	movs	r3, #6
 80007f2:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x23;
 80007f4:	2323      	movs	r3, #35	; 0x23
 80007f6:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80007f8:	463b      	mov	r3, r7
 80007fa:	2201      	movs	r2, #1
 80007fc:	4619      	mov	r1, r3
 80007fe:	4809      	ldr	r0, [pc, #36]	; (8000824 <set_time+0x80>)
 8000800:	f001 fcc8 	bl	8002194 <HAL_RTC_SetDate>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <set_time+0x6a>
	{
		Error_Handler();
 800080a:	f000 f8bb 	bl	8000984 <Error_Handler>
	}
	/* USER CODE BEGIN Check_RTC_BKUP */
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2);
 800080e:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000812:	2100      	movs	r1, #0
 8000814:	4803      	ldr	r0, [pc, #12]	; (8000824 <set_time+0x80>)
 8000816:	f001 ffd6 	bl	80027c6 <HAL_RTCEx_BKUPWrite>

	/* USER CODE END Check_RTC_BKUP */
}
 800081a:	bf00      	nop
 800081c:	3718      	adds	r7, #24
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000078 	.word	0x20000078

08000828 <set_alarm>:


void set_alarm(uint8_t day){
 8000828:	b580      	push	{r7, lr}
 800082a:	b08c      	sub	sp, #48	; 0x30
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
	/** Enable the Alarm A
	 */

	RTC_AlarmTypeDef sAlarm = {0} ;
 8000832:	f107 0308 	add.w	r3, r7, #8
 8000836:	2228      	movs	r2, #40	; 0x28
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f002 f820 	bl	8002880 <memset>


	switch (day)
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	2b07      	cmp	r3, #7
 8000844:	d006      	beq.n	8000854 <set_alarm+0x2c>
 8000846:	2b07      	cmp	r3, #7
 8000848:	dc0d      	bgt.n	8000866 <set_alarm+0x3e>
 800084a:	2b05      	cmp	r3, #5
 800084c:	d005      	beq.n	800085a <set_alarm+0x32>
 800084e:	2b06      	cmp	r3, #6
 8000850:	d006      	beq.n	8000860 <set_alarm+0x38>
 8000852:	e008      	b.n	8000866 <set_alarm+0x3e>
	{

	case 0|1|2|3|4:
		sAlarm.AlarmTime.Hours = 0x7;
 8000854:	2307      	movs	r3, #7
 8000856:	723b      	strb	r3, [r7, #8]
		break;
 8000858:	e007      	b.n	800086a <set_alarm+0x42>
	case 5:
		sAlarm.AlarmTime.Hours = 0x9;
 800085a:	2309      	movs	r3, #9
 800085c:	723b      	strb	r3, [r7, #8]
		break;
 800085e:	e004      	b.n	800086a <set_alarm+0x42>
	case 6:
		sAlarm.AlarmTime.Hours = 0x10;
 8000860:	2310      	movs	r3, #16
 8000862:	723b      	strb	r3, [r7, #8]
		break;
 8000864:	e001      	b.n	800086a <set_alarm+0x42>
	default:
		sAlarm.AlarmTime.Hours = 0x0;
 8000866:	2300      	movs	r3, #0
 8000868:	723b      	strb	r3, [r7, #8]
	}
	sAlarm.AlarmTime.Minutes = 0x21;
 800086a:	2321      	movs	r3, #33	; 0x21
 800086c:	727b      	strb	r3, [r7, #9]
	sAlarm.AlarmTime.Seconds = 0x0;
 800086e:	2300      	movs	r3, #0
 8000870:	72bb      	strb	r3, [r7, #10]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
 8000876:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800087a:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800087c:	2300      	movs	r3, #0
 800087e:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <set_alarm+0x8c>)
 8000882:	61fb      	str	r3, [r7, #28]

	//sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
	// sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8000888:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800088c:	627b      	str	r3, [r7, #36]	; 0x24

	sAlarm.AlarmDateWeekDay = day;
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000894:	f107 0308 	add.w	r3, r7, #8
 8000898:	2201      	movs	r2, #1
 800089a:	4619      	mov	r1, r3
 800089c:	4806      	ldr	r0, [pc, #24]	; (80008b8 <set_alarm+0x90>)
 800089e:	f001 fd4d 	bl	800233c <HAL_RTC_SetAlarm_IT>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <set_alarm+0x84>
	{
		Error_Handler();
 80008a8:	f000 f86c 	bl	8000984 <Error_Handler>
	}

}
 80008ac:	bf00      	nop
 80008ae:	3730      	adds	r7, #48	; 0x30
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	80800000 	.word	0x80800000
 80008b8:	20000078 	.word	0x20000078

080008bc <get_time>:

void get_time(void){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b088      	sub	sp, #32
 80008c0:	af02      	add	r7, sp, #8

	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;
	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80008c2:	463b      	mov	r3, r7
 80008c4:	2200      	movs	r2, #0
 80008c6:	4619      	mov	r1, r3
 80008c8:	4812      	ldr	r0, [pc, #72]	; (8000914 <get_time+0x58>)
 80008ca:	f001 fc05 	bl	80020d8 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	2200      	movs	r2, #0
 80008d4:	4619      	mov	r1, r3
 80008d6:	480f      	ldr	r0, [pc, #60]	; (8000914 <get_time+0x58>)
 80008d8:	f001 fce0 	bl	800229c <HAL_RTC_GetDate>
	/* Display time Format: hh:mm:ss */
	sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 80008dc:	783b      	ldrb	r3, [r7, #0]
 80008de:	461a      	mov	r2, r3
 80008e0:	787b      	ldrb	r3, [r7, #1]
 80008e2:	4619      	mov	r1, r3
 80008e4:	78bb      	ldrb	r3, [r7, #2]
 80008e6:	9300      	str	r3, [sp, #0]
 80008e8:	460b      	mov	r3, r1
 80008ea:	490b      	ldr	r1, [pc, #44]	; (8000918 <get_time+0x5c>)
 80008ec:	480b      	ldr	r0, [pc, #44]	; (800091c <get_time+0x60>)
 80008ee:	f001 ffa7 	bl	8002840 <siprintf>
	/* Display date Format: dd-mm-yy */
	sprintf((char*)date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);
 80008f2:	7dbb      	ldrb	r3, [r7, #22]
 80008f4:	461a      	mov	r2, r3
 80008f6:	7d7b      	ldrb	r3, [r7, #21]
 80008f8:	4619      	mov	r1, r3
 80008fa:	7dfb      	ldrb	r3, [r7, #23]
 80008fc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	460b      	mov	r3, r1
 8000904:	4906      	ldr	r1, [pc, #24]	; (8000920 <get_time+0x64>)
 8000906:	4807      	ldr	r0, [pc, #28]	; (8000924 <get_time+0x68>)
 8000908:	f001 ff9a 	bl	8002840 <siprintf>
}
 800090c:	bf00      	nop
 800090e:	3718      	adds	r7, #24
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000078 	.word	0x20000078
 8000918:	080031a0 	.word	0x080031a0
 800091c:	20000098 	.word	0x20000098
 8000920:	080031b0 	.word	0x080031b0
 8000924:	200000a4 	.word	0x200000a4

08000928 <HAL_RTC_AlarmAEventCallback>:


void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	// Toggle GP13 led when the alarm goes off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 8000930:	2201      	movs	r2, #1
 8000932:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000936:	4811      	ldr	r0, [pc, #68]	; (800097c <HAL_RTC_AlarmAEventCallback+0x54>)
 8000938:	f000 fc80 	bl	800123c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800093c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000940:	f000 f99a 	bl	8000c78 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800094a:	480c      	ldr	r0, [pc, #48]	; (800097c <HAL_RTC_AlarmAEventCallback+0x54>)
 800094c:	f000 fc76 	bl	800123c <HAL_GPIO_WritePin>
	// TODO: Alarm "SNOOZ" implementation
	today++;
 8000950:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <HAL_RTC_AlarmAEventCallback+0x58>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	3301      	adds	r3, #1
 8000956:	b2da      	uxtb	r2, r3
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <HAL_RTC_AlarmAEventCallback+0x58>)
 800095a:	701a      	strb	r2, [r3, #0]
	if (today == 7){
 800095c:	4b08      	ldr	r3, [pc, #32]	; (8000980 <HAL_RTC_AlarmAEventCallback+0x58>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b07      	cmp	r3, #7
 8000962:	d102      	bne.n	800096a <HAL_RTC_AlarmAEventCallback+0x42>
		today = 0;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_RTC_AlarmAEventCallback+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]
	}
	set_alarm(today);
 800096a:	4b05      	ldr	r3, [pc, #20]	; (8000980 <HAL_RTC_AlarmAEventCallback+0x58>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff ff5a 	bl	8000828 <set_alarm>
	/* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
	 */
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40021800 	.word	0x40021800
 8000980:	200000ae 	.word	0x200000ae

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	e7fe      	b.n	800098c <Error_Handler+0x8>
	...

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <HAL_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	4a0f      	ldr	r2, [pc, #60]	; (80009dc <HAL_MspInit+0x4c>)
 80009a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a4:	6453      	str	r3, [r2, #68]	; 0x44
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <HAL_MspInit+0x4c>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	603b      	str	r3, [r7, #0]
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <HAL_MspInit+0x4c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	4a08      	ldr	r2, [pc, #32]	; (80009dc <HAL_MspInit+0x4c>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c0:	6413      	str	r3, [r2, #64]	; 0x40
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_MspInit+0x4c>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 80009ce:	2006      	movs	r0, #6
 80009d0:	f000 fa46 	bl	8000e60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800

080009e0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08e      	sub	sp, #56	; 0x38
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009e8:	f107 0308 	add.w	r3, r7, #8
 80009ec:	2230      	movs	r2, #48	; 0x30
 80009ee:	2100      	movs	r1, #0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f001 ff45 	bl	8002880 <memset>
  if(hrtc->Instance==RTC)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a10      	ldr	r2, [pc, #64]	; (8000a3c <HAL_RTC_MspInit+0x5c>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d118      	bne.n	8000a32 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a00:	2320      	movs	r3, #32
 8000a02:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <HAL_RTC_MspInit+0x60>)
 8000a06:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a08:	f107 0308 	add.w	r3, r7, #8
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f001 f893 	bl	8001b38 <HAL_RCCEx_PeriphCLKConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 8000a18:	f7ff ffb4 	bl	8000984 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <HAL_RTC_MspInit+0x64>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 1, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2101      	movs	r1, #1
 8000a26:	2029      	movs	r0, #41	; 0x29
 8000a28:	f000 fa25 	bl	8000e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000a2c:	2029      	movs	r0, #41	; 0x29
 8000a2e:	f000 fa3e 	bl	8000eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a32:	bf00      	nop
 8000a34:	3738      	adds	r7, #56	; 0x38
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40002800 	.word	0x40002800
 8000a40:	00190300 	.word	0x00190300
 8000a44:	42470e3c 	.word	0x42470e3c

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <NMI_Handler+0x4>

08000a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <HardFault_Handler+0x4>

08000a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <MemManage_Handler+0x4>

08000a5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <BusFault_Handler+0x4>

08000a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <UsageFault_Handler+0x4>

08000a66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a94:	f000 f8d0 	bl	8000c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000aa0:	4802      	ldr	r0, [pc, #8]	; (8000aac <RTC_Alarm_IRQHandler+0x10>)
 8000aa2:	f001 fd8d 	bl	80025c0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000078 	.word	0x20000078

08000ab0 <_sbrk>:
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	4a14      	ldr	r2, [pc, #80]	; (8000b0c <_sbrk+0x5c>)
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <_sbrk+0x60>)
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <_sbrk+0x64>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d102      	bne.n	8000ad2 <_sbrk+0x22>
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <_sbrk+0x64>)
 8000ace:	4a12      	ldr	r2, [pc, #72]	; (8000b18 <_sbrk+0x68>)
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <_sbrk+0x64>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4413      	add	r3, r2
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d207      	bcs.n	8000af0 <_sbrk+0x40>
 8000ae0:	f001 fed6 	bl	8002890 <__errno>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295
 8000aee:	e009      	b.n	8000b04 <_sbrk+0x54>
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <_sbrk+0x64>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <_sbrk+0x64>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	4a05      	ldr	r2, [pc, #20]	; (8000b14 <_sbrk+0x64>)
 8000b00:	6013      	str	r3, [r2, #0]
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	4618      	mov	r0, r3
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20030000 	.word	0x20030000
 8000b10:	00000400 	.word	0x00000400
 8000b14:	200000b0 	.word	0x200000b0
 8000b18:	20000200 	.word	0x20000200

08000b1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <SystemInit+0x20>)
 8000b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b26:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <SystemInit+0x20>)
 8000b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <Reset_Handler>:
 8000b40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b78 <LoopFillZerobss+0x12>
 8000b44:	480d      	ldr	r0, [pc, #52]	; (8000b7c <LoopFillZerobss+0x16>)
 8000b46:	490e      	ldr	r1, [pc, #56]	; (8000b80 <LoopFillZerobss+0x1a>)
 8000b48:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <LoopFillZerobss+0x1e>)
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e002      	b.n	8000b54 <LoopCopyDataInit>

08000b4e <CopyDataInit>:
 8000b4e:	58d4      	ldr	r4, [r2, r3]
 8000b50:	50c4      	str	r4, [r0, r3]
 8000b52:	3304      	adds	r3, #4

08000b54 <LoopCopyDataInit>:
 8000b54:	18c4      	adds	r4, r0, r3
 8000b56:	428c      	cmp	r4, r1
 8000b58:	d3f9      	bcc.n	8000b4e <CopyDataInit>
 8000b5a:	4a0b      	ldr	r2, [pc, #44]	; (8000b88 <LoopFillZerobss+0x22>)
 8000b5c:	4c0b      	ldr	r4, [pc, #44]	; (8000b8c <LoopFillZerobss+0x26>)
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e001      	b.n	8000b66 <LoopFillZerobss>

08000b62 <FillZerobss>:
 8000b62:	6013      	str	r3, [r2, #0]
 8000b64:	3204      	adds	r2, #4

08000b66 <LoopFillZerobss>:
 8000b66:	42a2      	cmp	r2, r4
 8000b68:	d3fb      	bcc.n	8000b62 <FillZerobss>
 8000b6a:	f7ff ffd7 	bl	8000b1c <SystemInit>
 8000b6e:	f001 fe95 	bl	800289c <__libc_init_array>
 8000b72:	f7ff fd0b 	bl	800058c <main>
 8000b76:	4770      	bx	lr
 8000b78:	20030000 	.word	0x20030000
 8000b7c:	20000000 	.word	0x20000000
 8000b80:	2000005c 	.word	0x2000005c
 8000b84:	08003214 	.word	0x08003214
 8000b88:	2000005c 	.word	0x2000005c
 8000b8c:	20000200 	.word	0x20000200

08000b90 <ADC_IRQHandler>:
 8000b90:	e7fe      	b.n	8000b90 <ADC_IRQHandler>
	...

08000b94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b98:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <HAL_Init+0x40>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0d      	ldr	r2, [pc, #52]	; (8000bd4 <HAL_Init+0x40>)
 8000b9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ba2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ba4:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <HAL_Init+0x40>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <HAL_Init+0x40>)
 8000baa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <HAL_Init+0x40>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a07      	ldr	r2, [pc, #28]	; (8000bd4 <HAL_Init+0x40>)
 8000bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bbc:	2003      	movs	r0, #3
 8000bbe:	f000 f94f 	bl	8000e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f000 f808 	bl	8000bd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc8:	f7ff fee2 	bl	8000990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40023c00 	.word	0x40023c00

08000bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <HAL_InitTick+0x54>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <HAL_InitTick+0x58>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	4619      	mov	r1, r3
 8000bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 f967 	bl	8000eca <HAL_SYSTICK_Config>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	e00e      	b.n	8000c24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2b0f      	cmp	r3, #15
 8000c0a:	d80a      	bhi.n	8000c22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	f000 f92f 	bl	8000e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c18:	4a06      	ldr	r2, [pc, #24]	; (8000c34 <HAL_InitTick+0x5c>)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e000      	b.n	8000c24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	20000008 	.word	0x20000008
 8000c34:	20000004 	.word	0x20000004

08000c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_IncTick+0x20>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_IncTick+0x24>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4413      	add	r3, r2
 8000c48:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <HAL_IncTick+0x24>)
 8000c4a:	6013      	str	r3, [r2, #0]
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	20000008 	.word	0x20000008
 8000c5c:	200000b4 	.word	0x200000b4

08000c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return uwTick;
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <HAL_GetTick+0x14>)
 8000c66:	681b      	ldr	r3, [r3, #0]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	200000b4 	.word	0x200000b4

08000c78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c80:	f7ff ffee 	bl	8000c60 <HAL_GetTick>
 8000c84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c90:	d005      	beq.n	8000c9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c92:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <HAL_Delay+0x44>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	461a      	mov	r2, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c9e:	bf00      	nop
 8000ca0:	f7ff ffde 	bl	8000c60 <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d8f7      	bhi.n	8000ca0 <HAL_Delay+0x28>
  {
  }
}
 8000cb0:	bf00      	nop
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000008 	.word	0x20000008

08000cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf2:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	60d3      	str	r3, [r2, #12]
}
 8000cf8:	bf00      	nop
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <__NVIC_GetPriorityGrouping+0x18>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	0a1b      	lsrs	r3, r3, #8
 8000d12:	f003 0307 	and.w	r3, r3, #7
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	db0b      	blt.n	8000d4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	f003 021f 	and.w	r2, r3, #31
 8000d3c:	4907      	ldr	r1, [pc, #28]	; (8000d5c <__NVIC_EnableIRQ+0x38>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	095b      	lsrs	r3, r3, #5
 8000d44:	2001      	movs	r0, #1
 8000d46:	fa00 f202 	lsl.w	r2, r0, r2
 8000d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000e100 	.word	0xe000e100

08000d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	db0a      	blt.n	8000d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	490c      	ldr	r1, [pc, #48]	; (8000dac <__NVIC_SetPriority+0x4c>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	0112      	lsls	r2, r2, #4
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	440b      	add	r3, r1
 8000d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d88:	e00a      	b.n	8000da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4908      	ldr	r1, [pc, #32]	; (8000db0 <__NVIC_SetPriority+0x50>)
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f003 030f 	and.w	r3, r3, #15
 8000d96:	3b04      	subs	r3, #4
 8000d98:	0112      	lsls	r2, r2, #4
 8000d9a:	b2d2      	uxtb	r2, r2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	761a      	strb	r2, [r3, #24]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b089      	sub	sp, #36	; 0x24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f1c3 0307 	rsb	r3, r3, #7
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	bf28      	it	cs
 8000dd2:	2304      	movcs	r3, #4
 8000dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	2b06      	cmp	r3, #6
 8000ddc:	d902      	bls.n	8000de4 <NVIC_EncodePriority+0x30>
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3b03      	subs	r3, #3
 8000de2:	e000      	b.n	8000de6 <NVIC_EncodePriority+0x32>
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43da      	mvns	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	401a      	ands	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
 8000e06:	43d9      	mvns	r1, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	4313      	orrs	r3, r2
         );
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3724      	adds	r7, #36	; 0x24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e2c:	d301      	bcc.n	8000e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e00f      	b.n	8000e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <SysTick_Config+0x40>)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e3a:	210f      	movs	r1, #15
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e40:	f7ff ff8e 	bl	8000d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <SysTick_Config+0x40>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4a:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <SysTick_Config+0x40>)
 8000e4c:	2207      	movs	r2, #7
 8000e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	e000e010 	.word	0xe000e010

08000e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff ff29 	bl	8000cc0 <__NVIC_SetPriorityGrouping>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b086      	sub	sp, #24
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
 8000e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e88:	f7ff ff3e 	bl	8000d08 <__NVIC_GetPriorityGrouping>
 8000e8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	68b9      	ldr	r1, [r7, #8]
 8000e92:	6978      	ldr	r0, [r7, #20]
 8000e94:	f7ff ff8e 	bl	8000db4 <NVIC_EncodePriority>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ff5d 	bl	8000d60 <__NVIC_SetPriority>
}
 8000ea6:	bf00      	nop
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff31 	bl	8000d24 <__NVIC_EnableIRQ>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ffa2 	bl	8000e1c <SysTick_Config>
 8000ed8:	4603      	mov	r3, r0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	; 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
 8000efe:	e177      	b.n	80011f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f00:	2201      	movs	r2, #1
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	f040 8166 	bne.w	80011ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0303 	and.w	r3, r3, #3
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d005      	beq.n	8000f36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d130      	bne.n	8000f98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	2203      	movs	r2, #3
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	68da      	ldr	r2, [r3, #12]
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	091b      	lsrs	r3, r3, #4
 8000f82:	f003 0201 	and.w	r2, r3, #1
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	d017      	beq.n	8000fd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2203      	movs	r2, #3
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d123      	bne.n	8001028 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	08da      	lsrs	r2, r3, #3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3208      	adds	r2, #8
 8000fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	f003 0307 	and.w	r3, r3, #7
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	220f      	movs	r2, #15
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	691a      	ldr	r2, [r3, #16]
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	08da      	lsrs	r2, r3, #3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3208      	adds	r2, #8
 8001022:	69b9      	ldr	r1, [r7, #24]
 8001024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	2203      	movs	r2, #3
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0203 	and.w	r2, r3, #3
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001064:	2b00      	cmp	r3, #0
 8001066:	f000 80c0 	beq.w	80011ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b66      	ldr	r3, [pc, #408]	; (8001208 <HAL_GPIO_Init+0x324>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	4a65      	ldr	r2, [pc, #404]	; (8001208 <HAL_GPIO_Init+0x324>)
 8001074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001078:	6453      	str	r3, [r2, #68]	; 0x44
 800107a:	4b63      	ldr	r3, [pc, #396]	; (8001208 <HAL_GPIO_Init+0x324>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001086:	4a61      	ldr	r2, [pc, #388]	; (800120c <HAL_GPIO_Init+0x328>)
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	089b      	lsrs	r3, r3, #2
 800108c:	3302      	adds	r3, #2
 800108e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	220f      	movs	r2, #15
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a58      	ldr	r2, [pc, #352]	; (8001210 <HAL_GPIO_Init+0x32c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d037      	beq.n	8001122 <HAL_GPIO_Init+0x23e>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a57      	ldr	r2, [pc, #348]	; (8001214 <HAL_GPIO_Init+0x330>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d031      	beq.n	800111e <HAL_GPIO_Init+0x23a>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a56      	ldr	r2, [pc, #344]	; (8001218 <HAL_GPIO_Init+0x334>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d02b      	beq.n	800111a <HAL_GPIO_Init+0x236>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a55      	ldr	r2, [pc, #340]	; (800121c <HAL_GPIO_Init+0x338>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d025      	beq.n	8001116 <HAL_GPIO_Init+0x232>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a54      	ldr	r2, [pc, #336]	; (8001220 <HAL_GPIO_Init+0x33c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d01f      	beq.n	8001112 <HAL_GPIO_Init+0x22e>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a53      	ldr	r2, [pc, #332]	; (8001224 <HAL_GPIO_Init+0x340>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d019      	beq.n	800110e <HAL_GPIO_Init+0x22a>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a52      	ldr	r2, [pc, #328]	; (8001228 <HAL_GPIO_Init+0x344>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d013      	beq.n	800110a <HAL_GPIO_Init+0x226>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a51      	ldr	r2, [pc, #324]	; (800122c <HAL_GPIO_Init+0x348>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d00d      	beq.n	8001106 <HAL_GPIO_Init+0x222>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a50      	ldr	r2, [pc, #320]	; (8001230 <HAL_GPIO_Init+0x34c>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d007      	beq.n	8001102 <HAL_GPIO_Init+0x21e>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4f      	ldr	r2, [pc, #316]	; (8001234 <HAL_GPIO_Init+0x350>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d101      	bne.n	80010fe <HAL_GPIO_Init+0x21a>
 80010fa:	2309      	movs	r3, #9
 80010fc:	e012      	b.n	8001124 <HAL_GPIO_Init+0x240>
 80010fe:	230a      	movs	r3, #10
 8001100:	e010      	b.n	8001124 <HAL_GPIO_Init+0x240>
 8001102:	2308      	movs	r3, #8
 8001104:	e00e      	b.n	8001124 <HAL_GPIO_Init+0x240>
 8001106:	2307      	movs	r3, #7
 8001108:	e00c      	b.n	8001124 <HAL_GPIO_Init+0x240>
 800110a:	2306      	movs	r3, #6
 800110c:	e00a      	b.n	8001124 <HAL_GPIO_Init+0x240>
 800110e:	2305      	movs	r3, #5
 8001110:	e008      	b.n	8001124 <HAL_GPIO_Init+0x240>
 8001112:	2304      	movs	r3, #4
 8001114:	e006      	b.n	8001124 <HAL_GPIO_Init+0x240>
 8001116:	2303      	movs	r3, #3
 8001118:	e004      	b.n	8001124 <HAL_GPIO_Init+0x240>
 800111a:	2302      	movs	r3, #2
 800111c:	e002      	b.n	8001124 <HAL_GPIO_Init+0x240>
 800111e:	2301      	movs	r3, #1
 8001120:	e000      	b.n	8001124 <HAL_GPIO_Init+0x240>
 8001122:	2300      	movs	r3, #0
 8001124:	69fa      	ldr	r2, [r7, #28]
 8001126:	f002 0203 	and.w	r2, r2, #3
 800112a:	0092      	lsls	r2, r2, #2
 800112c:	4093      	lsls	r3, r2
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001134:	4935      	ldr	r1, [pc, #212]	; (800120c <HAL_GPIO_Init+0x328>)
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	089b      	lsrs	r3, r3, #2
 800113a:	3302      	adds	r3, #2
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001142:	4b3d      	ldr	r3, [pc, #244]	; (8001238 <HAL_GPIO_Init+0x354>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001166:	4a34      	ldr	r2, [pc, #208]	; (8001238 <HAL_GPIO_Init+0x354>)
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800116c:	4b32      	ldr	r3, [pc, #200]	; (8001238 <HAL_GPIO_Init+0x354>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001190:	4a29      	ldr	r2, [pc, #164]	; (8001238 <HAL_GPIO_Init+0x354>)
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001196:	4b28      	ldr	r3, [pc, #160]	; (8001238 <HAL_GPIO_Init+0x354>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ba:	4a1f      	ldr	r2, [pc, #124]	; (8001238 <HAL_GPIO_Init+0x354>)
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011c0:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <HAL_GPIO_Init+0x354>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011e4:	4a14      	ldr	r2, [pc, #80]	; (8001238 <HAL_GPIO_Init+0x354>)
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3301      	adds	r3, #1
 80011ee:	61fb      	str	r3, [r7, #28]
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	2b0f      	cmp	r3, #15
 80011f4:	f67f ae84 	bls.w	8000f00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	3724      	adds	r7, #36	; 0x24
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800
 800120c:	40013800 	.word	0x40013800
 8001210:	40020000 	.word	0x40020000
 8001214:	40020400 	.word	0x40020400
 8001218:	40020800 	.word	0x40020800
 800121c:	40020c00 	.word	0x40020c00
 8001220:	40021000 	.word	0x40021000
 8001224:	40021400 	.word	0x40021400
 8001228:	40021800 	.word	0x40021800
 800122c:	40021c00 	.word	0x40021c00
 8001230:	40022000 	.word	0x40022000
 8001234:	40022400 	.word	0x40022400
 8001238:	40013c00 	.word	0x40013c00

0800123c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
 8001248:	4613      	mov	r3, r2
 800124a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800124c:	787b      	ldrb	r3, [r7, #1]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001252:	887a      	ldrh	r2, [r7, #2]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001258:	e003      	b.n	8001262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	041a      	lsls	r2, r3, #16
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	619a      	str	r2, [r3, #24]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e267      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	2b00      	cmp	r3, #0
 800128c:	d075      	beq.n	800137a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800128e:	4b88      	ldr	r3, [pc, #544]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 030c 	and.w	r3, r3, #12
 8001296:	2b04      	cmp	r3, #4
 8001298:	d00c      	beq.n	80012b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800129a:	4b85      	ldr	r3, [pc, #532]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012a2:	2b08      	cmp	r3, #8
 80012a4:	d112      	bne.n	80012cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012a6:	4b82      	ldr	r3, [pc, #520]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012b2:	d10b      	bne.n	80012cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b4:	4b7e      	ldr	r3, [pc, #504]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d05b      	beq.n	8001378 <HAL_RCC_OscConfig+0x108>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d157      	bne.n	8001378 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e242      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d4:	d106      	bne.n	80012e4 <HAL_RCC_OscConfig+0x74>
 80012d6:	4b76      	ldr	r3, [pc, #472]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a75      	ldr	r2, [pc, #468]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 80012dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	e01d      	b.n	8001320 <HAL_RCC_OscConfig+0xb0>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012ec:	d10c      	bne.n	8001308 <HAL_RCC_OscConfig+0x98>
 80012ee:	4b70      	ldr	r3, [pc, #448]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a6f      	ldr	r2, [pc, #444]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 80012f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	4b6d      	ldr	r3, [pc, #436]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a6c      	ldr	r2, [pc, #432]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 8001300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	e00b      	b.n	8001320 <HAL_RCC_OscConfig+0xb0>
 8001308:	4b69      	ldr	r3, [pc, #420]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a68      	ldr	r2, [pc, #416]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 800130e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001312:	6013      	str	r3, [r2, #0]
 8001314:	4b66      	ldr	r3, [pc, #408]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a65      	ldr	r2, [pc, #404]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 800131a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800131e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d013      	beq.n	8001350 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001328:	f7ff fc9a 	bl	8000c60 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001330:	f7ff fc96 	bl	8000c60 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b64      	cmp	r3, #100	; 0x64
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e207      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001342:	4b5b      	ldr	r3, [pc, #364]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0f0      	beq.n	8001330 <HAL_RCC_OscConfig+0xc0>
 800134e:	e014      	b.n	800137a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7ff fc86 	bl	8000c60 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001358:	f7ff fc82 	bl	8000c60 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b64      	cmp	r3, #100	; 0x64
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e1f3      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136a:	4b51      	ldr	r3, [pc, #324]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f0      	bne.n	8001358 <HAL_RCC_OscConfig+0xe8>
 8001376:	e000      	b.n	800137a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d063      	beq.n	800144e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001386:	4b4a      	ldr	r3, [pc, #296]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 030c 	and.w	r3, r3, #12
 800138e:	2b00      	cmp	r3, #0
 8001390:	d00b      	beq.n	80013aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001392:	4b47      	ldr	r3, [pc, #284]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800139a:	2b08      	cmp	r3, #8
 800139c:	d11c      	bne.n	80013d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800139e:	4b44      	ldr	r3, [pc, #272]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d116      	bne.n	80013d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013aa:	4b41      	ldr	r3, [pc, #260]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d005      	beq.n	80013c2 <HAL_RCC_OscConfig+0x152>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d001      	beq.n	80013c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e1c7      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c2:	4b3b      	ldr	r3, [pc, #236]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	4937      	ldr	r1, [pc, #220]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d6:	e03a      	b.n	800144e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d020      	beq.n	8001422 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013e0:	4b34      	ldr	r3, [pc, #208]	; (80014b4 <HAL_RCC_OscConfig+0x244>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e6:	f7ff fc3b 	bl	8000c60 <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ec:	e008      	b.n	8001400 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ee:	f7ff fc37 	bl	8000c60 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e1a8      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001400:	4b2b      	ldr	r3, [pc, #172]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0f0      	beq.n	80013ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140c:	4b28      	ldr	r3, [pc, #160]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	4925      	ldr	r1, [pc, #148]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 800141c:	4313      	orrs	r3, r2
 800141e:	600b      	str	r3, [r1, #0]
 8001420:	e015      	b.n	800144e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001422:	4b24      	ldr	r3, [pc, #144]	; (80014b4 <HAL_RCC_OscConfig+0x244>)
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001428:	f7ff fc1a 	bl	8000c60 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001430:	f7ff fc16 	bl	8000c60 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e187      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001442:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f0      	bne.n	8001430 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0308 	and.w	r3, r3, #8
 8001456:	2b00      	cmp	r3, #0
 8001458:	d036      	beq.n	80014c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d016      	beq.n	8001490 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <HAL_RCC_OscConfig+0x248>)
 8001464:	2201      	movs	r2, #1
 8001466:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001468:	f7ff fbfa 	bl	8000c60 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001470:	f7ff fbf6 	bl	8000c60 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e167      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 8001484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0f0      	beq.n	8001470 <HAL_RCC_OscConfig+0x200>
 800148e:	e01b      	b.n	80014c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001490:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_RCC_OscConfig+0x248>)
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001496:	f7ff fbe3 	bl	8000c60 <HAL_GetTick>
 800149a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800149c:	e00e      	b.n	80014bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800149e:	f7ff fbdf 	bl	8000c60 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d907      	bls.n	80014bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e150      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
 80014b0:	40023800 	.word	0x40023800
 80014b4:	42470000 	.word	0x42470000
 80014b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014bc:	4b88      	ldr	r3, [pc, #544]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 80014be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1ea      	bne.n	800149e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f000 8097 	beq.w	8001604 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014d6:	2300      	movs	r3, #0
 80014d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014da:	4b81      	ldr	r3, [pc, #516]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10f      	bne.n	8001506 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	4b7d      	ldr	r3, [pc, #500]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	4a7c      	ldr	r2, [pc, #496]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 80014f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f4:	6413      	str	r3, [r2, #64]	; 0x40
 80014f6:	4b7a      	ldr	r3, [pc, #488]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001502:	2301      	movs	r3, #1
 8001504:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001506:	4b77      	ldr	r3, [pc, #476]	; (80016e4 <HAL_RCC_OscConfig+0x474>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800150e:	2b00      	cmp	r3, #0
 8001510:	d118      	bne.n	8001544 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001512:	4b74      	ldr	r3, [pc, #464]	; (80016e4 <HAL_RCC_OscConfig+0x474>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a73      	ldr	r2, [pc, #460]	; (80016e4 <HAL_RCC_OscConfig+0x474>)
 8001518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800151c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800151e:	f7ff fb9f 	bl	8000c60 <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001526:	f7ff fb9b 	bl	8000c60 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e10c      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001538:	4b6a      	ldr	r3, [pc, #424]	; (80016e4 <HAL_RCC_OscConfig+0x474>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0f0      	beq.n	8001526 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d106      	bne.n	800155a <HAL_RCC_OscConfig+0x2ea>
 800154c:	4b64      	ldr	r3, [pc, #400]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 800154e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001550:	4a63      	ldr	r2, [pc, #396]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	6713      	str	r3, [r2, #112]	; 0x70
 8001558:	e01c      	b.n	8001594 <HAL_RCC_OscConfig+0x324>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	2b05      	cmp	r3, #5
 8001560:	d10c      	bne.n	800157c <HAL_RCC_OscConfig+0x30c>
 8001562:	4b5f      	ldr	r3, [pc, #380]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 8001564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001566:	4a5e      	ldr	r2, [pc, #376]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 8001568:	f043 0304 	orr.w	r3, r3, #4
 800156c:	6713      	str	r3, [r2, #112]	; 0x70
 800156e:	4b5c      	ldr	r3, [pc, #368]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 8001570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001572:	4a5b      	ldr	r2, [pc, #364]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6713      	str	r3, [r2, #112]	; 0x70
 800157a:	e00b      	b.n	8001594 <HAL_RCC_OscConfig+0x324>
 800157c:	4b58      	ldr	r3, [pc, #352]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 800157e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001580:	4a57      	ldr	r2, [pc, #348]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 8001582:	f023 0301 	bic.w	r3, r3, #1
 8001586:	6713      	str	r3, [r2, #112]	; 0x70
 8001588:	4b55      	ldr	r3, [pc, #340]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 800158a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158c:	4a54      	ldr	r2, [pc, #336]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 800158e:	f023 0304 	bic.w	r3, r3, #4
 8001592:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d015      	beq.n	80015c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159c:	f7ff fb60 	bl	8000c60 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a2:	e00a      	b.n	80015ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015a4:	f7ff fb5c 	bl	8000c60 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e0cb      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ba:	4b49      	ldr	r3, [pc, #292]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 80015bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0ee      	beq.n	80015a4 <HAL_RCC_OscConfig+0x334>
 80015c6:	e014      	b.n	80015f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c8:	f7ff fb4a 	bl	8000c60 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ce:	e00a      	b.n	80015e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d0:	f7ff fb46 	bl	8000c60 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	f241 3288 	movw	r2, #5000	; 0x1388
 80015de:	4293      	cmp	r3, r2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e0b5      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e6:	4b3e      	ldr	r3, [pc, #248]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 80015e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1ee      	bne.n	80015d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015f2:	7dfb      	ldrb	r3, [r7, #23]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d105      	bne.n	8001604 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015f8:	4b39      	ldr	r3, [pc, #228]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	4a38      	ldr	r2, [pc, #224]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 80015fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001602:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	2b00      	cmp	r3, #0
 800160a:	f000 80a1 	beq.w	8001750 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800160e:	4b34      	ldr	r3, [pc, #208]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	2b08      	cmp	r3, #8
 8001618:	d05c      	beq.n	80016d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	2b02      	cmp	r3, #2
 8001620:	d141      	bne.n	80016a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001622:	4b31      	ldr	r3, [pc, #196]	; (80016e8 <HAL_RCC_OscConfig+0x478>)
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001628:	f7ff fb1a 	bl	8000c60 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001630:	f7ff fb16 	bl	8000c60 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e087      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001642:	4b27      	ldr	r3, [pc, #156]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f0      	bne.n	8001630 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69da      	ldr	r2, [r3, #28]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	431a      	orrs	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165c:	019b      	lsls	r3, r3, #6
 800165e:	431a      	orrs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001664:	085b      	lsrs	r3, r3, #1
 8001666:	3b01      	subs	r3, #1
 8001668:	041b      	lsls	r3, r3, #16
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001670:	061b      	lsls	r3, r3, #24
 8001672:	491b      	ldr	r1, [pc, #108]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 8001674:	4313      	orrs	r3, r2
 8001676:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001678:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <HAL_RCC_OscConfig+0x478>)
 800167a:	2201      	movs	r2, #1
 800167c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167e:	f7ff faef 	bl	8000c60 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001686:	f7ff faeb 	bl	8000c60 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e05c      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001698:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0f0      	beq.n	8001686 <HAL_RCC_OscConfig+0x416>
 80016a4:	e054      	b.n	8001750 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a6:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <HAL_RCC_OscConfig+0x478>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7ff fad8 	bl	8000c60 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b4:	f7ff fad4 	bl	8000c60 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e045      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x444>
 80016d2:	e03d      	b.n	8001750 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d107      	bne.n	80016ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e038      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40007000 	.word	0x40007000
 80016e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016ec:	4b1b      	ldr	r3, [pc, #108]	; (800175c <HAL_RCC_OscConfig+0x4ec>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d028      	beq.n	800174c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001704:	429a      	cmp	r2, r3
 8001706:	d121      	bne.n	800174c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001712:	429a      	cmp	r2, r3
 8001714:	d11a      	bne.n	800174c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800171c:	4013      	ands	r3, r2
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001722:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001724:	4293      	cmp	r3, r2
 8001726:	d111      	bne.n	800174c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001732:	085b      	lsrs	r3, r3, #1
 8001734:	3b01      	subs	r3, #1
 8001736:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001738:	429a      	cmp	r2, r3
 800173a:	d107      	bne.n	800174c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001746:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001748:	429a      	cmp	r2, r3
 800174a:	d001      	beq.n	8001750 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e000      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800

08001760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e0cc      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001774:	4b68      	ldr	r3, [pc, #416]	; (8001918 <HAL_RCC_ClockConfig+0x1b8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 030f 	and.w	r3, r3, #15
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d90c      	bls.n	800179c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001782:	4b65      	ldr	r3, [pc, #404]	; (8001918 <HAL_RCC_ClockConfig+0x1b8>)
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800178a:	4b63      	ldr	r3, [pc, #396]	; (8001918 <HAL_RCC_ClockConfig+0x1b8>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 030f 	and.w	r3, r3, #15
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	429a      	cmp	r2, r3
 8001796:	d001      	beq.n	800179c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e0b8      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d020      	beq.n	80017ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017b4:	4b59      	ldr	r3, [pc, #356]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	4a58      	ldr	r2, [pc, #352]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0308 	and.w	r3, r3, #8
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d005      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017cc:	4b53      	ldr	r3, [pc, #332]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	4a52      	ldr	r2, [pc, #328]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017d8:	4b50      	ldr	r3, [pc, #320]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	494d      	ldr	r1, [pc, #308]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d044      	beq.n	8001880 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d107      	bne.n	800180e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fe:	4b47      	ldr	r3, [pc, #284]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d119      	bne.n	800183e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e07f      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b02      	cmp	r3, #2
 8001814:	d003      	beq.n	800181e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800181a:	2b03      	cmp	r3, #3
 800181c:	d107      	bne.n	800182e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800181e:	4b3f      	ldr	r3, [pc, #252]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d109      	bne.n	800183e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e06f      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800182e:	4b3b      	ldr	r3, [pc, #236]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e067      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800183e:	4b37      	ldr	r3, [pc, #220]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f023 0203 	bic.w	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	4934      	ldr	r1, [pc, #208]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	4313      	orrs	r3, r2
 800184e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001850:	f7ff fa06 	bl	8000c60 <HAL_GetTick>
 8001854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001856:	e00a      	b.n	800186e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001858:	f7ff fa02 	bl	8000c60 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f241 3288 	movw	r2, #5000	; 0x1388
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e04f      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186e:	4b2b      	ldr	r3, [pc, #172]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 020c 	and.w	r2, r3, #12
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	429a      	cmp	r2, r3
 800187e:	d1eb      	bne.n	8001858 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001880:	4b25      	ldr	r3, [pc, #148]	; (8001918 <HAL_RCC_ClockConfig+0x1b8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 030f 	and.w	r3, r3, #15
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d20c      	bcs.n	80018a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188e:	4b22      	ldr	r3, [pc, #136]	; (8001918 <HAL_RCC_ClockConfig+0x1b8>)
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001896:	4b20      	ldr	r3, [pc, #128]	; (8001918 <HAL_RCC_ClockConfig+0x1b8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d001      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e032      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d008      	beq.n	80018c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018b4:	4b19      	ldr	r3, [pc, #100]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	4916      	ldr	r1, [pc, #88]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0308 	and.w	r3, r3, #8
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d009      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018d2:	4b12      	ldr	r3, [pc, #72]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	490e      	ldr	r1, [pc, #56]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018e6:	f000 f821 	bl	800192c <HAL_RCC_GetSysClockFreq>
 80018ea:	4602      	mov	r2, r0
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	091b      	lsrs	r3, r3, #4
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	490a      	ldr	r1, [pc, #40]	; (8001920 <HAL_RCC_ClockConfig+0x1c0>)
 80018f8:	5ccb      	ldrb	r3, [r1, r3]
 80018fa:	fa22 f303 	lsr.w	r3, r2, r3
 80018fe:	4a09      	ldr	r2, [pc, #36]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 8001900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff f966 	bl	8000bd8 <HAL_InitTick>

  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40023c00 	.word	0x40023c00
 800191c:	40023800 	.word	0x40023800
 8001920:	080031c0 	.word	0x080031c0
 8001924:	20000000 	.word	0x20000000
 8001928:	20000004 	.word	0x20000004

0800192c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800192c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001930:	b094      	sub	sp, #80	; 0x50
 8001932:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001934:	2300      	movs	r3, #0
 8001936:	647b      	str	r3, [r7, #68]	; 0x44
 8001938:	2300      	movs	r3, #0
 800193a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800193c:	2300      	movs	r3, #0
 800193e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001940:	2300      	movs	r3, #0
 8001942:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001944:	4b79      	ldr	r3, [pc, #484]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 030c 	and.w	r3, r3, #12
 800194c:	2b08      	cmp	r3, #8
 800194e:	d00d      	beq.n	800196c <HAL_RCC_GetSysClockFreq+0x40>
 8001950:	2b08      	cmp	r3, #8
 8001952:	f200 80e1 	bhi.w	8001b18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001956:	2b00      	cmp	r3, #0
 8001958:	d002      	beq.n	8001960 <HAL_RCC_GetSysClockFreq+0x34>
 800195a:	2b04      	cmp	r3, #4
 800195c:	d003      	beq.n	8001966 <HAL_RCC_GetSysClockFreq+0x3a>
 800195e:	e0db      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001960:	4b73      	ldr	r3, [pc, #460]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x204>)
 8001962:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001964:	e0db      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001966:	4b73      	ldr	r3, [pc, #460]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x208>)
 8001968:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800196a:	e0d8      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800196c:	4b6f      	ldr	r3, [pc, #444]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x200>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001974:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001976:	4b6d      	ldr	r3, [pc, #436]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d063      	beq.n	8001a4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001982:	4b6a      	ldr	r3, [pc, #424]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	099b      	lsrs	r3, r3, #6
 8001988:	2200      	movs	r2, #0
 800198a:	63bb      	str	r3, [r7, #56]	; 0x38
 800198c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800198e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001994:	633b      	str	r3, [r7, #48]	; 0x30
 8001996:	2300      	movs	r3, #0
 8001998:	637b      	str	r3, [r7, #52]	; 0x34
 800199a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800199e:	4622      	mov	r2, r4
 80019a0:	462b      	mov	r3, r5
 80019a2:	f04f 0000 	mov.w	r0, #0
 80019a6:	f04f 0100 	mov.w	r1, #0
 80019aa:	0159      	lsls	r1, r3, #5
 80019ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019b0:	0150      	lsls	r0, r2, #5
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4621      	mov	r1, r4
 80019b8:	1a51      	subs	r1, r2, r1
 80019ba:	6139      	str	r1, [r7, #16]
 80019bc:	4629      	mov	r1, r5
 80019be:	eb63 0301 	sbc.w	r3, r3, r1
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019d0:	4659      	mov	r1, fp
 80019d2:	018b      	lsls	r3, r1, #6
 80019d4:	4651      	mov	r1, sl
 80019d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019da:	4651      	mov	r1, sl
 80019dc:	018a      	lsls	r2, r1, #6
 80019de:	4651      	mov	r1, sl
 80019e0:	ebb2 0801 	subs.w	r8, r2, r1
 80019e4:	4659      	mov	r1, fp
 80019e6:	eb63 0901 	sbc.w	r9, r3, r1
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019fe:	4690      	mov	r8, r2
 8001a00:	4699      	mov	r9, r3
 8001a02:	4623      	mov	r3, r4
 8001a04:	eb18 0303 	adds.w	r3, r8, r3
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	462b      	mov	r3, r5
 8001a0c:	eb49 0303 	adc.w	r3, r9, r3
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a1e:	4629      	mov	r1, r5
 8001a20:	024b      	lsls	r3, r1, #9
 8001a22:	4621      	mov	r1, r4
 8001a24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a28:	4621      	mov	r1, r4
 8001a2a:	024a      	lsls	r2, r1, #9
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	4619      	mov	r1, r3
 8001a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a32:	2200      	movs	r2, #0
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a3c:	f7fe fc28 	bl	8000290 <__aeabi_uldivmod>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4613      	mov	r3, r2
 8001a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a48:	e058      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a4a:	4b38      	ldr	r3, [pc, #224]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	099b      	lsrs	r3, r3, #6
 8001a50:	2200      	movs	r2, #0
 8001a52:	4618      	mov	r0, r3
 8001a54:	4611      	mov	r1, r2
 8001a56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a5a:	623b      	str	r3, [r7, #32]
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a64:	4642      	mov	r2, r8
 8001a66:	464b      	mov	r3, r9
 8001a68:	f04f 0000 	mov.w	r0, #0
 8001a6c:	f04f 0100 	mov.w	r1, #0
 8001a70:	0159      	lsls	r1, r3, #5
 8001a72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a76:	0150      	lsls	r0, r2, #5
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4641      	mov	r1, r8
 8001a7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a82:	4649      	mov	r1, r9
 8001a84:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a9c:	ebb2 040a 	subs.w	r4, r2, sl
 8001aa0:	eb63 050b 	sbc.w	r5, r3, fp
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	f04f 0300 	mov.w	r3, #0
 8001aac:	00eb      	lsls	r3, r5, #3
 8001aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ab2:	00e2      	lsls	r2, r4, #3
 8001ab4:	4614      	mov	r4, r2
 8001ab6:	461d      	mov	r5, r3
 8001ab8:	4643      	mov	r3, r8
 8001aba:	18e3      	adds	r3, r4, r3
 8001abc:	603b      	str	r3, [r7, #0]
 8001abe:	464b      	mov	r3, r9
 8001ac0:	eb45 0303 	adc.w	r3, r5, r3
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	f04f 0300 	mov.w	r3, #0
 8001ace:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ad2:	4629      	mov	r1, r5
 8001ad4:	028b      	lsls	r3, r1, #10
 8001ad6:	4621      	mov	r1, r4
 8001ad8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001adc:	4621      	mov	r1, r4
 8001ade:	028a      	lsls	r2, r1, #10
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	61bb      	str	r3, [r7, #24]
 8001aea:	61fa      	str	r2, [r7, #28]
 8001aec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001af0:	f7fe fbce 	bl	8000290 <__aeabi_uldivmod>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4613      	mov	r3, r2
 8001afa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	0c1b      	lsrs	r3, r3, #16
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	3301      	adds	r3, #1
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b16:	e002      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3750      	adds	r7, #80	; 0x50
 8001b24:	46bd      	mov	sp, r7
 8001b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	00f42400 	.word	0x00f42400
 8001b34:	007a1200 	.word	0x007a1200

08001b38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d10b      	bne.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d105      	bne.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d075      	beq.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001b6c:	4b91      	ldr	r3, [pc, #580]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b72:	f7ff f875 	bl	8000c60 <HAL_GetTick>
 8001b76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b78:	e008      	b.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001b7a:	f7ff f871 	bl	8000c60 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e189      	b.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b8c:	4b8a      	ldr	r3, [pc, #552]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1f0      	bne.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d009      	beq.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	019a      	lsls	r2, r3, #6
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	071b      	lsls	r3, r3, #28
 8001bb0:	4981      	ldr	r1, [pc, #516]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d01f      	beq.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001bc4:	4b7c      	ldr	r3, [pc, #496]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bca:	0f1b      	lsrs	r3, r3, #28
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	019a      	lsls	r2, r3, #6
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	061b      	lsls	r3, r3, #24
 8001bde:	431a      	orrs	r2, r3
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	071b      	lsls	r3, r3, #28
 8001be4:	4974      	ldr	r1, [pc, #464]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001bec:	4b72      	ldr	r3, [pc, #456]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001bee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bf2:	f023 021f 	bic.w	r2, r3, #31
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	496e      	ldr	r1, [pc, #440]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00d      	beq.n	8001c2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	019a      	lsls	r2, r3, #6
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	061b      	lsls	r3, r3, #24
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	071b      	lsls	r3, r3, #28
 8001c24:	4964      	ldr	r1, [pc, #400]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001c2c:	4b61      	ldr	r3, [pc, #388]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c32:	f7ff f815 	bl	8000c60 <HAL_GetTick>
 8001c36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c38:	e008      	b.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001c3a:	f7ff f811 	bl	8000c60 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e129      	b.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c4c:	4b5a      	ldr	r3, [pc, #360]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0f0      	beq.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d105      	bne.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d079      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001c70:	4b52      	ldr	r3, [pc, #328]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c76:	f7fe fff3 	bl	8000c60 <HAL_GetTick>
 8001c7a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001c7e:	f7fe ffef 	bl	8000c60 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e107      	b.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001c90:	4b49      	ldr	r3, [pc, #292]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c9c:	d0ef      	beq.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d020      	beq.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001caa:	4b43      	ldr	r3, [pc, #268]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cb0:	0f1b      	lsrs	r3, r3, #28
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	019a      	lsls	r2, r3, #6
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	061b      	lsls	r3, r3, #24
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	071b      	lsls	r3, r3, #28
 8001cca:	493b      	ldr	r1, [pc, #236]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001cd2:	4b39      	ldr	r3, [pc, #228]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cd8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	021b      	lsls	r3, r3, #8
 8001ce4:	4934      	ldr	r1, [pc, #208]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0308 	and.w	r3, r3, #8
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d01e      	beq.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001cf8:	4b2f      	ldr	r3, [pc, #188]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cfe:	0e1b      	lsrs	r3, r3, #24
 8001d00:	f003 030f 	and.w	r3, r3, #15
 8001d04:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	019a      	lsls	r2, r3, #6
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	061b      	lsls	r3, r3, #24
 8001d10:	431a      	orrs	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	071b      	lsls	r3, r3, #28
 8001d18:	4927      	ldr	r1, [pc, #156]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001d20:	4b25      	ldr	r3, [pc, #148]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2e:	4922      	ldr	r1, [pc, #136]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001d36:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d3c:	f7fe ff90 	bl	8000c60 <HAL_GetTick>
 8001d40:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001d44:	f7fe ff8c 	bl	8000c60 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e0a4      	b.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001d56:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d62:	d1ef      	bne.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0320 	and.w	r3, r3, #32
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 808b 	beq.w	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	4a0f      	ldr	r2, [pc, #60]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d80:	6413      	str	r3, [r2, #64]	; 0x40
 8001d82:	4b0d      	ldr	r3, [pc, #52]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001d8e:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a0b      	ldr	r2, [pc, #44]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8001d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d98:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d9a:	f7fe ff61 	bl	8000c60 <HAL_GetTick>
 8001d9e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001da0:	e010      	b.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001da2:	f7fe ff5d 	bl	8000c60 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d909      	bls.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e075      	b.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8001db4:	42470068 	.word	0x42470068
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	42470070 	.word	0x42470070
 8001dc0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001dc4:	4b38      	ldr	r3, [pc, #224]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0e8      	beq.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dd0:	4b36      	ldr	r3, [pc, #216]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dd8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d02f      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d028      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001dee:	4b2f      	ldr	r3, [pc, #188]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001df6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001df8:	4b2d      	ldr	r3, [pc, #180]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dfe:	4b2c      	ldr	r3, [pc, #176]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001e04:	4a29      	ldr	r2, [pc, #164]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e0a:	4b28      	ldr	r3, [pc, #160]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d114      	bne.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001e16:	f7fe ff23 	bl	8000c60 <HAL_GetTick>
 8001e1a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1c:	e00a      	b.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e1e:	f7fe ff1f 	bl	8000c60 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e035      	b.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e34:	4b1d      	ldr	r3, [pc, #116]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0ee      	beq.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e4c:	d10d      	bne.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8001e4e:	4b17      	ldr	r3, [pc, #92]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e62:	4912      	ldr	r1, [pc, #72]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	608b      	str	r3, [r1, #8]
 8001e68:	e005      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8001e6a:	4b10      	ldr	r3, [pc, #64]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	4a0f      	ldr	r2, [pc, #60]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e70:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001e74:	6093      	str	r3, [r2, #8]
 8001e76:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e82:	490a      	ldr	r1, [pc, #40]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0310 	and.w	r3, r3, #16
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d004      	beq.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8001e9c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40007000 	.word	0x40007000
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	42470e40 	.word	0x42470e40
 8001eb4:	424711e0 	.word	0x424711e0

08001eb8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e066      	b.n	8001f9c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	7f5b      	ldrb	r3, [r3, #29]
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d105      	bne.n	8001ee4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7fe fd7e 	bl	80009e0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	22ca      	movs	r2, #202	; 0xca
 8001ef0:	625a      	str	r2, [r3, #36]	; 0x24
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2253      	movs	r2, #83	; 0x53
 8001ef8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 fbce 	bl	800269c <RTC_EnterInitMode>
 8001f00:	4603      	mov	r3, r0
 8001f02:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d12c      	bne.n	8001f64 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001f18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f1c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6899      	ldr	r1, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	68d2      	ldr	r2, [r2, #12]
 8001f44:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6919      	ldr	r1, [r3, #16]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	041a      	lsls	r2, r3, #16
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 fbd5 	bl	800270a <RTC_ExitInitMode>
 8001f60:	4603      	mov	r3, r0
 8001f62:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d113      	bne.n	8001f92 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f78:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	699a      	ldr	r2, [r3, #24]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	22ff      	movs	r2, #255	; 0xff
 8001f98:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001fa4:	b590      	push	{r4, r7, lr}
 8001fa6:	b087      	sub	sp, #28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	7f1b      	ldrb	r3, [r3, #28]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d101      	bne.n	8001fc0 <HAL_RTC_SetTime+0x1c>
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	e087      	b.n	80020d0 <HAL_RTC_SetTime+0x12c>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2202      	movs	r2, #2
 8001fca:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d126      	bne.n	8002020 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d102      	bne.n	8001fe6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 fbb2 	bl	8002754 <RTC_ByteToBcd2>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	785b      	ldrb	r3, [r3, #1]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 fbab 	bl	8002754 <RTC_ByteToBcd2>
 8001ffe:	4603      	mov	r3, r0
 8002000:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002002:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	789b      	ldrb	r3, [r3, #2]
 8002008:	4618      	mov	r0, r3
 800200a:	f000 fba3 	bl	8002754 <RTC_ByteToBcd2>
 800200e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002010:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	78db      	ldrb	r3, [r3, #3]
 8002018:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800201a:	4313      	orrs	r3, r2
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	e018      	b.n	8002052 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800202a:	2b00      	cmp	r3, #0
 800202c:	d102      	bne.n	8002034 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2200      	movs	r2, #0
 8002032:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	785b      	ldrb	r3, [r3, #1]
 800203e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002040:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002046:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	78db      	ldrb	r3, [r3, #3]
 800204c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800204e:	4313      	orrs	r3, r2
 8002050:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	22ca      	movs	r2, #202	; 0xca
 8002058:	625a      	str	r2, [r3, #36]	; 0x24
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2253      	movs	r2, #83	; 0x53
 8002060:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 fb1a 	bl	800269c <RTC_EnterInitMode>
 8002068:	4603      	mov	r3, r0
 800206a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800206c:	7cfb      	ldrb	r3, [r7, #19]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d120      	bne.n	80020b4 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800207c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002080:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002090:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6899      	ldr	r1, [r3, #8]
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	431a      	orrs	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 fb2d 	bl	800270a <RTC_ExitInitMode>
 80020b0:	4603      	mov	r3, r0
 80020b2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80020b4:	7cfb      	ldrb	r3, [r7, #19]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d102      	bne.n	80020c0 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2201      	movs	r2, #1
 80020be:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	22ff      	movs	r2, #255	; 0xff
 80020c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	771a      	strb	r2, [r3, #28]

  return status;
 80020ce:	7cfb      	ldrb	r3, [r7, #19]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	371c      	adds	r7, #28
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd90      	pop	{r4, r7, pc}

080020d8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800210a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800210e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	0c1b      	lsrs	r3, r3, #16
 8002114:	b2db      	uxtb	r3, r3
 8002116:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800211a:	b2da      	uxtb	r2, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	0a1b      	lsrs	r3, r3, #8
 8002124:	b2db      	uxtb	r3, r3
 8002126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800212a:	b2da      	uxtb	r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	b2db      	uxtb	r3, r3
 8002134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002138:	b2da      	uxtb	r2, r3
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	0d9b      	lsrs	r3, r3, #22
 8002142:	b2db      	uxtb	r3, r3
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	b2da      	uxtb	r2, r3
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d11a      	bne.n	800218a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f000 fb18 	bl	800278e <RTC_Bcd2ToByte>
 800215e:	4603      	mov	r3, r0
 8002160:	461a      	mov	r2, r3
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	785b      	ldrb	r3, [r3, #1]
 800216a:	4618      	mov	r0, r3
 800216c:	f000 fb0f 	bl	800278e <RTC_Bcd2ToByte>
 8002170:	4603      	mov	r3, r0
 8002172:	461a      	mov	r2, r3
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	789b      	ldrb	r3, [r3, #2]
 800217c:	4618      	mov	r0, r3
 800217e:	f000 fb06 	bl	800278e <RTC_Bcd2ToByte>
 8002182:	4603      	mov	r3, r0
 8002184:	461a      	mov	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002194:	b590      	push	{r4, r7, lr}
 8002196:	b087      	sub	sp, #28
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	7f1b      	ldrb	r3, [r3, #28]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <HAL_RTC_SetDate+0x1c>
 80021ac:	2302      	movs	r3, #2
 80021ae:	e071      	b.n	8002294 <HAL_RTC_SetDate+0x100>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2201      	movs	r2, #1
 80021b4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2202      	movs	r2, #2
 80021ba:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10e      	bne.n	80021e0 <HAL_RTC_SetDate+0x4c>
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	785b      	ldrb	r3, [r3, #1]
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d008      	beq.n	80021e0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	785b      	ldrb	r3, [r3, #1]
 80021d2:	f023 0310 	bic.w	r3, r3, #16
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	330a      	adds	r3, #10
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d11c      	bne.n	8002220 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	78db      	ldrb	r3, [r3, #3]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f000 fab2 	bl	8002754 <RTC_ByteToBcd2>
 80021f0:	4603      	mov	r3, r0
 80021f2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	785b      	ldrb	r3, [r3, #1]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f000 faab 	bl	8002754 <RTC_ByteToBcd2>
 80021fe:	4603      	mov	r3, r0
 8002200:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002202:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	789b      	ldrb	r3, [r3, #2]
 8002208:	4618      	mov	r0, r3
 800220a:	f000 faa3 	bl	8002754 <RTC_ByteToBcd2>
 800220e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002210:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800221a:	4313      	orrs	r3, r2
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	e00e      	b.n	800223e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	78db      	ldrb	r3, [r3, #3]
 8002224:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	785b      	ldrb	r3, [r3, #1]
 800222a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800222c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002232:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800223a:	4313      	orrs	r3, r2
 800223c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	22ca      	movs	r2, #202	; 0xca
 8002244:	625a      	str	r2, [r3, #36]	; 0x24
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2253      	movs	r2, #83	; 0x53
 800224c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 fa24 	bl	800269c <RTC_EnterInitMode>
 8002254:	4603      	mov	r3, r0
 8002256:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002258:	7cfb      	ldrb	r3, [r7, #19]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10c      	bne.n	8002278 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002268:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800226c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 fa4b 	bl	800270a <RTC_ExitInitMode>
 8002274:	4603      	mov	r3, r0
 8002276:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002278:	7cfb      	ldrb	r3, [r7, #19]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d102      	bne.n	8002284 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2201      	movs	r2, #1
 8002282:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	22ff      	movs	r2, #255	; 0xff
 800228a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	771a      	strb	r2, [r3, #28]

  return status;
 8002292:	7cfb      	ldrb	r3, [r7, #19]
}
 8002294:	4618      	mov	r0, r3
 8002296:	371c      	adds	r7, #28
 8002298:	46bd      	mov	sp, r7
 800229a:	bd90      	pop	{r4, r7, pc}

0800229c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80022b6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80022ba:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	0c1b      	lsrs	r3, r3, #16
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	0a1b      	lsrs	r3, r3, #8
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	f003 031f 	and.w	r3, r3, #31
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	0b5b      	lsrs	r3, r3, #13
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d11a      	bne.n	8002330 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	78db      	ldrb	r3, [r3, #3]
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 fa45 	bl	800278e <RTC_Bcd2ToByte>
 8002304:	4603      	mov	r3, r0
 8002306:	461a      	mov	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	785b      	ldrb	r3, [r3, #1]
 8002310:	4618      	mov	r0, r3
 8002312:	f000 fa3c 	bl	800278e <RTC_Bcd2ToByte>
 8002316:	4603      	mov	r3, r0
 8002318:	461a      	mov	r2, r3
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	789b      	ldrb	r3, [r3, #2]
 8002322:	4618      	mov	r0, r3
 8002324:	f000 fa33 	bl	800278e <RTC_Bcd2ToByte>
 8002328:	4603      	mov	r3, r0
 800232a:	461a      	mov	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800233c:	b590      	push	{r4, r7, lr}
 800233e:	b089      	sub	sp, #36	; 0x24
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002348:	4b9a      	ldr	r3, [pc, #616]	; (80025b4 <HAL_RTC_SetAlarm_IT+0x278>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a9a      	ldr	r2, [pc, #616]	; (80025b8 <HAL_RTC_SetAlarm_IT+0x27c>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	0adb      	lsrs	r3, r3, #11
 8002354:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002358:	fb02 f303 	mul.w	r3, r2, r3
 800235c:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	7f1b      	ldrb	r3, [r3, #28]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <HAL_RTC_SetAlarm_IT+0x36>
 800236e:	2302      	movs	r3, #2
 8002370:	e11c      	b.n	80025ac <HAL_RTC_SetAlarm_IT+0x270>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2201      	movs	r2, #1
 8002376:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2202      	movs	r2, #2
 800237c:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d137      	bne.n	80023f4 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800238e:	2b00      	cmp	r3, #0
 8002390:	d102      	bne.n	8002398 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	2200      	movs	r2, #0
 8002396:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f000 f9d9 	bl	8002754 <RTC_ByteToBcd2>
 80023a2:	4603      	mov	r3, r0
 80023a4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	785b      	ldrb	r3, [r3, #1]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 f9d2 	bl	8002754 <RTC_ByteToBcd2>
 80023b0:	4603      	mov	r3, r0
 80023b2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80023b4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	789b      	ldrb	r3, [r3, #2]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 f9ca 	bl	8002754 <RTC_ByteToBcd2>
 80023c0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80023c2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	78db      	ldrb	r3, [r3, #3]
 80023ca:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80023cc:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 f9bc 	bl	8002754 <RTC_ByteToBcd2>
 80023dc:	4603      	mov	r3, r0
 80023de:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80023e0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80023e8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61fb      	str	r3, [r7, #28]
 80023f2:	e023      	b.n	800243c <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d102      	bne.n	8002408 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2200      	movs	r2, #0
 8002406:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	785b      	ldrb	r3, [r3, #1]
 8002412:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002414:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800241a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	78db      	ldrb	r3, [r3, #3]
 8002420:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002422:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f893 3020 	ldrb.w	r3, [r3, #32]
 800242a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800242c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002432:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002438:	4313      	orrs	r3, r2
 800243a:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002444:	4313      	orrs	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	22ca      	movs	r2, #202	; 0xca
 800244e:	625a      	str	r2, [r3, #36]	; 0x24
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2253      	movs	r2, #83	; 0x53
 8002456:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002460:	d141      	bne.n	80024e6 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002470:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	b2da      	uxtb	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002482:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	1e5a      	subs	r2, r3, #1
 8002488:	617a      	str	r2, [r7, #20]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10b      	bne.n	80024a6 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	22ff      	movs	r2, #255	; 0xff
 8002494:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2203      	movs	r2, #3
 800249a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e082      	b.n	80025ac <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0e7      	beq.n	8002484 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	69fa      	ldr	r2, [r7, #28]
 80024ba:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024d2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	e04b      	b.n	800257e <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024f4:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002506:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002508:	4b2a      	ldr	r3, [pc, #168]	; (80025b4 <HAL_RTC_SetAlarm_IT+0x278>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a2a      	ldr	r2, [pc, #168]	; (80025b8 <HAL_RTC_SetAlarm_IT+0x27c>)
 800250e:	fba2 2303 	umull	r2, r3, r2, r3
 8002512:	0adb      	lsrs	r3, r3, #11
 8002514:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002518:	fb02 f303 	mul.w	r3, r2, r3
 800251c:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	1e5a      	subs	r2, r3, #1
 8002522:	617a      	str	r2, [r7, #20]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10b      	bne.n	8002540 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	22ff      	movs	r2, #255	; 0xff
 800252e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2203      	movs	r2, #3
 8002534:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e035      	b.n	80025ac <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0e7      	beq.n	800251e <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	69fa      	ldr	r2, [r7, #28]
 8002554:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800256c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800257c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800257e:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <HAL_RTC_SetAlarm_IT+0x280>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a0e      	ldr	r2, [pc, #56]	; (80025bc <HAL_RTC_SetAlarm_IT+0x280>)
 8002584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002588:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800258a:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <HAL_RTC_SetAlarm_IT+0x280>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	4a0b      	ldr	r2, [pc, #44]	; (80025bc <HAL_RTC_SetAlarm_IT+0x280>)
 8002590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002594:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	22ff      	movs	r2, #255	; 0xff
 800259c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2201      	movs	r2, #1
 80025a2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3724      	adds	r7, #36	; 0x24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd90      	pop	{r4, r7, pc}
 80025b4:	20000000 	.word	0x20000000
 80025b8:	10624dd3 	.word	0x10624dd3
 80025bc:	40013c00 	.word	0x40013c00

080025c0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d012      	beq.n	80025fc <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00b      	beq.n	80025fc <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7fe f99f 	bl	8000928 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80025fa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d012      	beq.n	8002630 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00b      	beq.n	8002630 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f906 	bl	800282a <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	b2da      	uxtb	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800262e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002630:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_RTC_AlarmIRQHandler+0x88>)
 8002632:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002636:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	775a      	strb	r2, [r3, #29]
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40013c00 	.word	0x40013c00

0800264c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002666:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002668:	f7fe fafa 	bl	8000c60 <HAL_GetTick>
 800266c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800266e:	e009      	b.n	8002684 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002670:	f7fe faf6 	bl	8000c60 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800267e:	d901      	bls.n	8002684 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e007      	b.n	8002694 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	f003 0320 	and.w	r3, r3, #32
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0ee      	beq.n	8002670 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d122      	bne.n	8002700 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026c8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026ca:	f7fe fac9 	bl	8000c60 <HAL_GetTick>
 80026ce:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80026d0:	e00c      	b.n	80026ec <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80026d2:	f7fe fac5 	bl	8000c60 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026e0:	d904      	bls.n	80026ec <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2204      	movs	r2, #4
 80026e6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d102      	bne.n	8002700 <RTC_EnterInitMode+0x64>
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d1e8      	bne.n	80026d2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002700:	7bfb      	ldrb	r3, [r7, #15]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b084      	sub	sp, #16
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002712:	2300      	movs	r3, #0
 8002714:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002724:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10a      	bne.n	800274a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff ff89 	bl	800264c <HAL_RTC_WaitForSynchro>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d004      	beq.n	800274a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2204      	movs	r2, #4
 8002744:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800274a:	7bfb      	ldrb	r3, [r7, #15]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8002762:	e005      	b.n	8002770 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	3301      	adds	r3, #1
 8002768:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	3b0a      	subs	r3, #10
 800276e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002770:	79fb      	ldrb	r3, [r7, #7]
 8002772:	2b09      	cmp	r3, #9
 8002774:	d8f6      	bhi.n	8002764 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	011b      	lsls	r3, r3, #4
 800277a:	b2da      	uxtb	r2, r3
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	4313      	orrs	r3, r2
 8002780:	b2db      	uxtb	r3, r3
}
 8002782:	4618      	mov	r0, r3
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800278e:	b480      	push	{r7}
 8002790:	b085      	sub	sp, #20
 8002792:	af00      	add	r7, sp, #0
 8002794:	4603      	mov	r3, r0
 8002796:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	091b      	lsrs	r3, r3, #4
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	461a      	mov	r2, r3
 80027a4:	0092      	lsls	r2, r2, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
 80027b6:	4413      	add	r3, r2
 80027b8:	b2db      	uxtb	r3, r3
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b087      	sub	sp, #28
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	3350      	adds	r3, #80	; 0x50
 80027dc:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	4413      	add	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	601a      	str	r2, [r3, #0]
}
 80027ee:	bf00      	nop
 80027f0:	371c      	adds	r7, #28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b085      	sub	sp, #20
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	3350      	adds	r3, #80	; 0x50
 800280e:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4413      	add	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
	...

08002840 <siprintf>:
 8002840:	b40e      	push	{r1, r2, r3}
 8002842:	b500      	push	{lr}
 8002844:	b09c      	sub	sp, #112	; 0x70
 8002846:	ab1d      	add	r3, sp, #116	; 0x74
 8002848:	9002      	str	r0, [sp, #8]
 800284a:	9006      	str	r0, [sp, #24]
 800284c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002850:	4809      	ldr	r0, [pc, #36]	; (8002878 <siprintf+0x38>)
 8002852:	9107      	str	r1, [sp, #28]
 8002854:	9104      	str	r1, [sp, #16]
 8002856:	4909      	ldr	r1, [pc, #36]	; (800287c <siprintf+0x3c>)
 8002858:	f853 2b04 	ldr.w	r2, [r3], #4
 800285c:	9105      	str	r1, [sp, #20]
 800285e:	6800      	ldr	r0, [r0, #0]
 8002860:	9301      	str	r3, [sp, #4]
 8002862:	a902      	add	r1, sp, #8
 8002864:	f000 f992 	bl	8002b8c <_svfiprintf_r>
 8002868:	9b02      	ldr	r3, [sp, #8]
 800286a:	2200      	movs	r2, #0
 800286c:	701a      	strb	r2, [r3, #0]
 800286e:	b01c      	add	sp, #112	; 0x70
 8002870:	f85d eb04 	ldr.w	lr, [sp], #4
 8002874:	b003      	add	sp, #12
 8002876:	4770      	bx	lr
 8002878:	20000058 	.word	0x20000058
 800287c:	ffff0208 	.word	0xffff0208

08002880 <memset>:
 8002880:	4402      	add	r2, r0
 8002882:	4603      	mov	r3, r0
 8002884:	4293      	cmp	r3, r2
 8002886:	d100      	bne.n	800288a <memset+0xa>
 8002888:	4770      	bx	lr
 800288a:	f803 1b01 	strb.w	r1, [r3], #1
 800288e:	e7f9      	b.n	8002884 <memset+0x4>

08002890 <__errno>:
 8002890:	4b01      	ldr	r3, [pc, #4]	; (8002898 <__errno+0x8>)
 8002892:	6818      	ldr	r0, [r3, #0]
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	20000058 	.word	0x20000058

0800289c <__libc_init_array>:
 800289c:	b570      	push	{r4, r5, r6, lr}
 800289e:	4d0d      	ldr	r5, [pc, #52]	; (80028d4 <__libc_init_array+0x38>)
 80028a0:	4c0d      	ldr	r4, [pc, #52]	; (80028d8 <__libc_init_array+0x3c>)
 80028a2:	1b64      	subs	r4, r4, r5
 80028a4:	10a4      	asrs	r4, r4, #2
 80028a6:	2600      	movs	r6, #0
 80028a8:	42a6      	cmp	r6, r4
 80028aa:	d109      	bne.n	80028c0 <__libc_init_array+0x24>
 80028ac:	4d0b      	ldr	r5, [pc, #44]	; (80028dc <__libc_init_array+0x40>)
 80028ae:	4c0c      	ldr	r4, [pc, #48]	; (80028e0 <__libc_init_array+0x44>)
 80028b0:	f000 fc6a 	bl	8003188 <_init>
 80028b4:	1b64      	subs	r4, r4, r5
 80028b6:	10a4      	asrs	r4, r4, #2
 80028b8:	2600      	movs	r6, #0
 80028ba:	42a6      	cmp	r6, r4
 80028bc:	d105      	bne.n	80028ca <__libc_init_array+0x2e>
 80028be:	bd70      	pop	{r4, r5, r6, pc}
 80028c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80028c4:	4798      	blx	r3
 80028c6:	3601      	adds	r6, #1
 80028c8:	e7ee      	b.n	80028a8 <__libc_init_array+0xc>
 80028ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80028ce:	4798      	blx	r3
 80028d0:	3601      	adds	r6, #1
 80028d2:	e7f2      	b.n	80028ba <__libc_init_array+0x1e>
 80028d4:	0800320c 	.word	0x0800320c
 80028d8:	0800320c 	.word	0x0800320c
 80028dc:	0800320c 	.word	0x0800320c
 80028e0:	08003210 	.word	0x08003210

080028e4 <__retarget_lock_acquire_recursive>:
 80028e4:	4770      	bx	lr

080028e6 <__retarget_lock_release_recursive>:
 80028e6:	4770      	bx	lr

080028e8 <_free_r>:
 80028e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80028ea:	2900      	cmp	r1, #0
 80028ec:	d044      	beq.n	8002978 <_free_r+0x90>
 80028ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028f2:	9001      	str	r0, [sp, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f1a1 0404 	sub.w	r4, r1, #4
 80028fa:	bfb8      	it	lt
 80028fc:	18e4      	addlt	r4, r4, r3
 80028fe:	f000 f8df 	bl	8002ac0 <__malloc_lock>
 8002902:	4a1e      	ldr	r2, [pc, #120]	; (800297c <_free_r+0x94>)
 8002904:	9801      	ldr	r0, [sp, #4]
 8002906:	6813      	ldr	r3, [r2, #0]
 8002908:	b933      	cbnz	r3, 8002918 <_free_r+0x30>
 800290a:	6063      	str	r3, [r4, #4]
 800290c:	6014      	str	r4, [r2, #0]
 800290e:	b003      	add	sp, #12
 8002910:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002914:	f000 b8da 	b.w	8002acc <__malloc_unlock>
 8002918:	42a3      	cmp	r3, r4
 800291a:	d908      	bls.n	800292e <_free_r+0x46>
 800291c:	6825      	ldr	r5, [r4, #0]
 800291e:	1961      	adds	r1, r4, r5
 8002920:	428b      	cmp	r3, r1
 8002922:	bf01      	itttt	eq
 8002924:	6819      	ldreq	r1, [r3, #0]
 8002926:	685b      	ldreq	r3, [r3, #4]
 8002928:	1949      	addeq	r1, r1, r5
 800292a:	6021      	streq	r1, [r4, #0]
 800292c:	e7ed      	b.n	800290a <_free_r+0x22>
 800292e:	461a      	mov	r2, r3
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	b10b      	cbz	r3, 8002938 <_free_r+0x50>
 8002934:	42a3      	cmp	r3, r4
 8002936:	d9fa      	bls.n	800292e <_free_r+0x46>
 8002938:	6811      	ldr	r1, [r2, #0]
 800293a:	1855      	adds	r5, r2, r1
 800293c:	42a5      	cmp	r5, r4
 800293e:	d10b      	bne.n	8002958 <_free_r+0x70>
 8002940:	6824      	ldr	r4, [r4, #0]
 8002942:	4421      	add	r1, r4
 8002944:	1854      	adds	r4, r2, r1
 8002946:	42a3      	cmp	r3, r4
 8002948:	6011      	str	r1, [r2, #0]
 800294a:	d1e0      	bne.n	800290e <_free_r+0x26>
 800294c:	681c      	ldr	r4, [r3, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	6053      	str	r3, [r2, #4]
 8002952:	440c      	add	r4, r1
 8002954:	6014      	str	r4, [r2, #0]
 8002956:	e7da      	b.n	800290e <_free_r+0x26>
 8002958:	d902      	bls.n	8002960 <_free_r+0x78>
 800295a:	230c      	movs	r3, #12
 800295c:	6003      	str	r3, [r0, #0]
 800295e:	e7d6      	b.n	800290e <_free_r+0x26>
 8002960:	6825      	ldr	r5, [r4, #0]
 8002962:	1961      	adds	r1, r4, r5
 8002964:	428b      	cmp	r3, r1
 8002966:	bf04      	itt	eq
 8002968:	6819      	ldreq	r1, [r3, #0]
 800296a:	685b      	ldreq	r3, [r3, #4]
 800296c:	6063      	str	r3, [r4, #4]
 800296e:	bf04      	itt	eq
 8002970:	1949      	addeq	r1, r1, r5
 8002972:	6021      	streq	r1, [r4, #0]
 8002974:	6054      	str	r4, [r2, #4]
 8002976:	e7ca      	b.n	800290e <_free_r+0x26>
 8002978:	b003      	add	sp, #12
 800297a:	bd30      	pop	{r4, r5, pc}
 800297c:	200001f8 	.word	0x200001f8

08002980 <sbrk_aligned>:
 8002980:	b570      	push	{r4, r5, r6, lr}
 8002982:	4e0e      	ldr	r6, [pc, #56]	; (80029bc <sbrk_aligned+0x3c>)
 8002984:	460c      	mov	r4, r1
 8002986:	6831      	ldr	r1, [r6, #0]
 8002988:	4605      	mov	r5, r0
 800298a:	b911      	cbnz	r1, 8002992 <sbrk_aligned+0x12>
 800298c:	f000 fba6 	bl	80030dc <_sbrk_r>
 8002990:	6030      	str	r0, [r6, #0]
 8002992:	4621      	mov	r1, r4
 8002994:	4628      	mov	r0, r5
 8002996:	f000 fba1 	bl	80030dc <_sbrk_r>
 800299a:	1c43      	adds	r3, r0, #1
 800299c:	d00a      	beq.n	80029b4 <sbrk_aligned+0x34>
 800299e:	1cc4      	adds	r4, r0, #3
 80029a0:	f024 0403 	bic.w	r4, r4, #3
 80029a4:	42a0      	cmp	r0, r4
 80029a6:	d007      	beq.n	80029b8 <sbrk_aligned+0x38>
 80029a8:	1a21      	subs	r1, r4, r0
 80029aa:	4628      	mov	r0, r5
 80029ac:	f000 fb96 	bl	80030dc <_sbrk_r>
 80029b0:	3001      	adds	r0, #1
 80029b2:	d101      	bne.n	80029b8 <sbrk_aligned+0x38>
 80029b4:	f04f 34ff 	mov.w	r4, #4294967295
 80029b8:	4620      	mov	r0, r4
 80029ba:	bd70      	pop	{r4, r5, r6, pc}
 80029bc:	200001fc 	.word	0x200001fc

080029c0 <_malloc_r>:
 80029c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029c4:	1ccd      	adds	r5, r1, #3
 80029c6:	f025 0503 	bic.w	r5, r5, #3
 80029ca:	3508      	adds	r5, #8
 80029cc:	2d0c      	cmp	r5, #12
 80029ce:	bf38      	it	cc
 80029d0:	250c      	movcc	r5, #12
 80029d2:	2d00      	cmp	r5, #0
 80029d4:	4607      	mov	r7, r0
 80029d6:	db01      	blt.n	80029dc <_malloc_r+0x1c>
 80029d8:	42a9      	cmp	r1, r5
 80029da:	d905      	bls.n	80029e8 <_malloc_r+0x28>
 80029dc:	230c      	movs	r3, #12
 80029de:	603b      	str	r3, [r7, #0]
 80029e0:	2600      	movs	r6, #0
 80029e2:	4630      	mov	r0, r6
 80029e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002abc <_malloc_r+0xfc>
 80029ec:	f000 f868 	bl	8002ac0 <__malloc_lock>
 80029f0:	f8d8 3000 	ldr.w	r3, [r8]
 80029f4:	461c      	mov	r4, r3
 80029f6:	bb5c      	cbnz	r4, 8002a50 <_malloc_r+0x90>
 80029f8:	4629      	mov	r1, r5
 80029fa:	4638      	mov	r0, r7
 80029fc:	f7ff ffc0 	bl	8002980 <sbrk_aligned>
 8002a00:	1c43      	adds	r3, r0, #1
 8002a02:	4604      	mov	r4, r0
 8002a04:	d155      	bne.n	8002ab2 <_malloc_r+0xf2>
 8002a06:	f8d8 4000 	ldr.w	r4, [r8]
 8002a0a:	4626      	mov	r6, r4
 8002a0c:	2e00      	cmp	r6, #0
 8002a0e:	d145      	bne.n	8002a9c <_malloc_r+0xdc>
 8002a10:	2c00      	cmp	r4, #0
 8002a12:	d048      	beq.n	8002aa6 <_malloc_r+0xe6>
 8002a14:	6823      	ldr	r3, [r4, #0]
 8002a16:	4631      	mov	r1, r6
 8002a18:	4638      	mov	r0, r7
 8002a1a:	eb04 0903 	add.w	r9, r4, r3
 8002a1e:	f000 fb5d 	bl	80030dc <_sbrk_r>
 8002a22:	4581      	cmp	r9, r0
 8002a24:	d13f      	bne.n	8002aa6 <_malloc_r+0xe6>
 8002a26:	6821      	ldr	r1, [r4, #0]
 8002a28:	1a6d      	subs	r5, r5, r1
 8002a2a:	4629      	mov	r1, r5
 8002a2c:	4638      	mov	r0, r7
 8002a2e:	f7ff ffa7 	bl	8002980 <sbrk_aligned>
 8002a32:	3001      	adds	r0, #1
 8002a34:	d037      	beq.n	8002aa6 <_malloc_r+0xe6>
 8002a36:	6823      	ldr	r3, [r4, #0]
 8002a38:	442b      	add	r3, r5
 8002a3a:	6023      	str	r3, [r4, #0]
 8002a3c:	f8d8 3000 	ldr.w	r3, [r8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d038      	beq.n	8002ab6 <_malloc_r+0xf6>
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	42a2      	cmp	r2, r4
 8002a48:	d12b      	bne.n	8002aa2 <_malloc_r+0xe2>
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	e00f      	b.n	8002a70 <_malloc_r+0xb0>
 8002a50:	6822      	ldr	r2, [r4, #0]
 8002a52:	1b52      	subs	r2, r2, r5
 8002a54:	d41f      	bmi.n	8002a96 <_malloc_r+0xd6>
 8002a56:	2a0b      	cmp	r2, #11
 8002a58:	d917      	bls.n	8002a8a <_malloc_r+0xca>
 8002a5a:	1961      	adds	r1, r4, r5
 8002a5c:	42a3      	cmp	r3, r4
 8002a5e:	6025      	str	r5, [r4, #0]
 8002a60:	bf18      	it	ne
 8002a62:	6059      	strne	r1, [r3, #4]
 8002a64:	6863      	ldr	r3, [r4, #4]
 8002a66:	bf08      	it	eq
 8002a68:	f8c8 1000 	streq.w	r1, [r8]
 8002a6c:	5162      	str	r2, [r4, r5]
 8002a6e:	604b      	str	r3, [r1, #4]
 8002a70:	4638      	mov	r0, r7
 8002a72:	f104 060b 	add.w	r6, r4, #11
 8002a76:	f000 f829 	bl	8002acc <__malloc_unlock>
 8002a7a:	f026 0607 	bic.w	r6, r6, #7
 8002a7e:	1d23      	adds	r3, r4, #4
 8002a80:	1af2      	subs	r2, r6, r3
 8002a82:	d0ae      	beq.n	80029e2 <_malloc_r+0x22>
 8002a84:	1b9b      	subs	r3, r3, r6
 8002a86:	50a3      	str	r3, [r4, r2]
 8002a88:	e7ab      	b.n	80029e2 <_malloc_r+0x22>
 8002a8a:	42a3      	cmp	r3, r4
 8002a8c:	6862      	ldr	r2, [r4, #4]
 8002a8e:	d1dd      	bne.n	8002a4c <_malloc_r+0x8c>
 8002a90:	f8c8 2000 	str.w	r2, [r8]
 8002a94:	e7ec      	b.n	8002a70 <_malloc_r+0xb0>
 8002a96:	4623      	mov	r3, r4
 8002a98:	6864      	ldr	r4, [r4, #4]
 8002a9a:	e7ac      	b.n	80029f6 <_malloc_r+0x36>
 8002a9c:	4634      	mov	r4, r6
 8002a9e:	6876      	ldr	r6, [r6, #4]
 8002aa0:	e7b4      	b.n	8002a0c <_malloc_r+0x4c>
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	e7cc      	b.n	8002a40 <_malloc_r+0x80>
 8002aa6:	230c      	movs	r3, #12
 8002aa8:	603b      	str	r3, [r7, #0]
 8002aaa:	4638      	mov	r0, r7
 8002aac:	f000 f80e 	bl	8002acc <__malloc_unlock>
 8002ab0:	e797      	b.n	80029e2 <_malloc_r+0x22>
 8002ab2:	6025      	str	r5, [r4, #0]
 8002ab4:	e7dc      	b.n	8002a70 <_malloc_r+0xb0>
 8002ab6:	605b      	str	r3, [r3, #4]
 8002ab8:	deff      	udf	#255	; 0xff
 8002aba:	bf00      	nop
 8002abc:	200001f8 	.word	0x200001f8

08002ac0 <__malloc_lock>:
 8002ac0:	4801      	ldr	r0, [pc, #4]	; (8002ac8 <__malloc_lock+0x8>)
 8002ac2:	f7ff bf0f 	b.w	80028e4 <__retarget_lock_acquire_recursive>
 8002ac6:	bf00      	nop
 8002ac8:	200001f4 	.word	0x200001f4

08002acc <__malloc_unlock>:
 8002acc:	4801      	ldr	r0, [pc, #4]	; (8002ad4 <__malloc_unlock+0x8>)
 8002ace:	f7ff bf0a 	b.w	80028e6 <__retarget_lock_release_recursive>
 8002ad2:	bf00      	nop
 8002ad4:	200001f4 	.word	0x200001f4

08002ad8 <__ssputs_r>:
 8002ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002adc:	688e      	ldr	r6, [r1, #8]
 8002ade:	461f      	mov	r7, r3
 8002ae0:	42be      	cmp	r6, r7
 8002ae2:	680b      	ldr	r3, [r1, #0]
 8002ae4:	4682      	mov	sl, r0
 8002ae6:	460c      	mov	r4, r1
 8002ae8:	4690      	mov	r8, r2
 8002aea:	d82c      	bhi.n	8002b46 <__ssputs_r+0x6e>
 8002aec:	898a      	ldrh	r2, [r1, #12]
 8002aee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002af2:	d026      	beq.n	8002b42 <__ssputs_r+0x6a>
 8002af4:	6965      	ldr	r5, [r4, #20]
 8002af6:	6909      	ldr	r1, [r1, #16]
 8002af8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002afc:	eba3 0901 	sub.w	r9, r3, r1
 8002b00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002b04:	1c7b      	adds	r3, r7, #1
 8002b06:	444b      	add	r3, r9
 8002b08:	106d      	asrs	r5, r5, #1
 8002b0a:	429d      	cmp	r5, r3
 8002b0c:	bf38      	it	cc
 8002b0e:	461d      	movcc	r5, r3
 8002b10:	0553      	lsls	r3, r2, #21
 8002b12:	d527      	bpl.n	8002b64 <__ssputs_r+0x8c>
 8002b14:	4629      	mov	r1, r5
 8002b16:	f7ff ff53 	bl	80029c0 <_malloc_r>
 8002b1a:	4606      	mov	r6, r0
 8002b1c:	b360      	cbz	r0, 8002b78 <__ssputs_r+0xa0>
 8002b1e:	6921      	ldr	r1, [r4, #16]
 8002b20:	464a      	mov	r2, r9
 8002b22:	f000 faeb 	bl	80030fc <memcpy>
 8002b26:	89a3      	ldrh	r3, [r4, #12]
 8002b28:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b30:	81a3      	strh	r3, [r4, #12]
 8002b32:	6126      	str	r6, [r4, #16]
 8002b34:	6165      	str	r5, [r4, #20]
 8002b36:	444e      	add	r6, r9
 8002b38:	eba5 0509 	sub.w	r5, r5, r9
 8002b3c:	6026      	str	r6, [r4, #0]
 8002b3e:	60a5      	str	r5, [r4, #8]
 8002b40:	463e      	mov	r6, r7
 8002b42:	42be      	cmp	r6, r7
 8002b44:	d900      	bls.n	8002b48 <__ssputs_r+0x70>
 8002b46:	463e      	mov	r6, r7
 8002b48:	6820      	ldr	r0, [r4, #0]
 8002b4a:	4632      	mov	r2, r6
 8002b4c:	4641      	mov	r1, r8
 8002b4e:	f000 faab 	bl	80030a8 <memmove>
 8002b52:	68a3      	ldr	r3, [r4, #8]
 8002b54:	1b9b      	subs	r3, r3, r6
 8002b56:	60a3      	str	r3, [r4, #8]
 8002b58:	6823      	ldr	r3, [r4, #0]
 8002b5a:	4433      	add	r3, r6
 8002b5c:	6023      	str	r3, [r4, #0]
 8002b5e:	2000      	movs	r0, #0
 8002b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b64:	462a      	mov	r2, r5
 8002b66:	f000 fad7 	bl	8003118 <_realloc_r>
 8002b6a:	4606      	mov	r6, r0
 8002b6c:	2800      	cmp	r0, #0
 8002b6e:	d1e0      	bne.n	8002b32 <__ssputs_r+0x5a>
 8002b70:	6921      	ldr	r1, [r4, #16]
 8002b72:	4650      	mov	r0, sl
 8002b74:	f7ff feb8 	bl	80028e8 <_free_r>
 8002b78:	230c      	movs	r3, #12
 8002b7a:	f8ca 3000 	str.w	r3, [sl]
 8002b7e:	89a3      	ldrh	r3, [r4, #12]
 8002b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b84:	81a3      	strh	r3, [r4, #12]
 8002b86:	f04f 30ff 	mov.w	r0, #4294967295
 8002b8a:	e7e9      	b.n	8002b60 <__ssputs_r+0x88>

08002b8c <_svfiprintf_r>:
 8002b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b90:	4698      	mov	r8, r3
 8002b92:	898b      	ldrh	r3, [r1, #12]
 8002b94:	061b      	lsls	r3, r3, #24
 8002b96:	b09d      	sub	sp, #116	; 0x74
 8002b98:	4607      	mov	r7, r0
 8002b9a:	460d      	mov	r5, r1
 8002b9c:	4614      	mov	r4, r2
 8002b9e:	d50e      	bpl.n	8002bbe <_svfiprintf_r+0x32>
 8002ba0:	690b      	ldr	r3, [r1, #16]
 8002ba2:	b963      	cbnz	r3, 8002bbe <_svfiprintf_r+0x32>
 8002ba4:	2140      	movs	r1, #64	; 0x40
 8002ba6:	f7ff ff0b 	bl	80029c0 <_malloc_r>
 8002baa:	6028      	str	r0, [r5, #0]
 8002bac:	6128      	str	r0, [r5, #16]
 8002bae:	b920      	cbnz	r0, 8002bba <_svfiprintf_r+0x2e>
 8002bb0:	230c      	movs	r3, #12
 8002bb2:	603b      	str	r3, [r7, #0]
 8002bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb8:	e0d0      	b.n	8002d5c <_svfiprintf_r+0x1d0>
 8002bba:	2340      	movs	r3, #64	; 0x40
 8002bbc:	616b      	str	r3, [r5, #20]
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	9309      	str	r3, [sp, #36]	; 0x24
 8002bc2:	2320      	movs	r3, #32
 8002bc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002bc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8002bcc:	2330      	movs	r3, #48	; 0x30
 8002bce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002d74 <_svfiprintf_r+0x1e8>
 8002bd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002bd6:	f04f 0901 	mov.w	r9, #1
 8002bda:	4623      	mov	r3, r4
 8002bdc:	469a      	mov	sl, r3
 8002bde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002be2:	b10a      	cbz	r2, 8002be8 <_svfiprintf_r+0x5c>
 8002be4:	2a25      	cmp	r2, #37	; 0x25
 8002be6:	d1f9      	bne.n	8002bdc <_svfiprintf_r+0x50>
 8002be8:	ebba 0b04 	subs.w	fp, sl, r4
 8002bec:	d00b      	beq.n	8002c06 <_svfiprintf_r+0x7a>
 8002bee:	465b      	mov	r3, fp
 8002bf0:	4622      	mov	r2, r4
 8002bf2:	4629      	mov	r1, r5
 8002bf4:	4638      	mov	r0, r7
 8002bf6:	f7ff ff6f 	bl	8002ad8 <__ssputs_r>
 8002bfa:	3001      	adds	r0, #1
 8002bfc:	f000 80a9 	beq.w	8002d52 <_svfiprintf_r+0x1c6>
 8002c00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c02:	445a      	add	r2, fp
 8002c04:	9209      	str	r2, [sp, #36]	; 0x24
 8002c06:	f89a 3000 	ldrb.w	r3, [sl]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 80a1 	beq.w	8002d52 <_svfiprintf_r+0x1c6>
 8002c10:	2300      	movs	r3, #0
 8002c12:	f04f 32ff 	mov.w	r2, #4294967295
 8002c16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c1a:	f10a 0a01 	add.w	sl, sl, #1
 8002c1e:	9304      	str	r3, [sp, #16]
 8002c20:	9307      	str	r3, [sp, #28]
 8002c22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c26:	931a      	str	r3, [sp, #104]	; 0x68
 8002c28:	4654      	mov	r4, sl
 8002c2a:	2205      	movs	r2, #5
 8002c2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c30:	4850      	ldr	r0, [pc, #320]	; (8002d74 <_svfiprintf_r+0x1e8>)
 8002c32:	f7fd fadd 	bl	80001f0 <memchr>
 8002c36:	9a04      	ldr	r2, [sp, #16]
 8002c38:	b9d8      	cbnz	r0, 8002c72 <_svfiprintf_r+0xe6>
 8002c3a:	06d0      	lsls	r0, r2, #27
 8002c3c:	bf44      	itt	mi
 8002c3e:	2320      	movmi	r3, #32
 8002c40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c44:	0711      	lsls	r1, r2, #28
 8002c46:	bf44      	itt	mi
 8002c48:	232b      	movmi	r3, #43	; 0x2b
 8002c4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c4e:	f89a 3000 	ldrb.w	r3, [sl]
 8002c52:	2b2a      	cmp	r3, #42	; 0x2a
 8002c54:	d015      	beq.n	8002c82 <_svfiprintf_r+0xf6>
 8002c56:	9a07      	ldr	r2, [sp, #28]
 8002c58:	4654      	mov	r4, sl
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	f04f 0c0a 	mov.w	ip, #10
 8002c60:	4621      	mov	r1, r4
 8002c62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c66:	3b30      	subs	r3, #48	; 0x30
 8002c68:	2b09      	cmp	r3, #9
 8002c6a:	d94d      	bls.n	8002d08 <_svfiprintf_r+0x17c>
 8002c6c:	b1b0      	cbz	r0, 8002c9c <_svfiprintf_r+0x110>
 8002c6e:	9207      	str	r2, [sp, #28]
 8002c70:	e014      	b.n	8002c9c <_svfiprintf_r+0x110>
 8002c72:	eba0 0308 	sub.w	r3, r0, r8
 8002c76:	fa09 f303 	lsl.w	r3, r9, r3
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	9304      	str	r3, [sp, #16]
 8002c7e:	46a2      	mov	sl, r4
 8002c80:	e7d2      	b.n	8002c28 <_svfiprintf_r+0x9c>
 8002c82:	9b03      	ldr	r3, [sp, #12]
 8002c84:	1d19      	adds	r1, r3, #4
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	9103      	str	r1, [sp, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	bfbb      	ittet	lt
 8002c8e:	425b      	neglt	r3, r3
 8002c90:	f042 0202 	orrlt.w	r2, r2, #2
 8002c94:	9307      	strge	r3, [sp, #28]
 8002c96:	9307      	strlt	r3, [sp, #28]
 8002c98:	bfb8      	it	lt
 8002c9a:	9204      	strlt	r2, [sp, #16]
 8002c9c:	7823      	ldrb	r3, [r4, #0]
 8002c9e:	2b2e      	cmp	r3, #46	; 0x2e
 8002ca0:	d10c      	bne.n	8002cbc <_svfiprintf_r+0x130>
 8002ca2:	7863      	ldrb	r3, [r4, #1]
 8002ca4:	2b2a      	cmp	r3, #42	; 0x2a
 8002ca6:	d134      	bne.n	8002d12 <_svfiprintf_r+0x186>
 8002ca8:	9b03      	ldr	r3, [sp, #12]
 8002caa:	1d1a      	adds	r2, r3, #4
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	9203      	str	r2, [sp, #12]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	bfb8      	it	lt
 8002cb4:	f04f 33ff 	movlt.w	r3, #4294967295
 8002cb8:	3402      	adds	r4, #2
 8002cba:	9305      	str	r3, [sp, #20]
 8002cbc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002d84 <_svfiprintf_r+0x1f8>
 8002cc0:	7821      	ldrb	r1, [r4, #0]
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	4650      	mov	r0, sl
 8002cc6:	f7fd fa93 	bl	80001f0 <memchr>
 8002cca:	b138      	cbz	r0, 8002cdc <_svfiprintf_r+0x150>
 8002ccc:	9b04      	ldr	r3, [sp, #16]
 8002cce:	eba0 000a 	sub.w	r0, r0, sl
 8002cd2:	2240      	movs	r2, #64	; 0x40
 8002cd4:	4082      	lsls	r2, r0
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	3401      	adds	r4, #1
 8002cda:	9304      	str	r3, [sp, #16]
 8002cdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ce0:	4825      	ldr	r0, [pc, #148]	; (8002d78 <_svfiprintf_r+0x1ec>)
 8002ce2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ce6:	2206      	movs	r2, #6
 8002ce8:	f7fd fa82 	bl	80001f0 <memchr>
 8002cec:	2800      	cmp	r0, #0
 8002cee:	d038      	beq.n	8002d62 <_svfiprintf_r+0x1d6>
 8002cf0:	4b22      	ldr	r3, [pc, #136]	; (8002d7c <_svfiprintf_r+0x1f0>)
 8002cf2:	bb1b      	cbnz	r3, 8002d3c <_svfiprintf_r+0x1b0>
 8002cf4:	9b03      	ldr	r3, [sp, #12]
 8002cf6:	3307      	adds	r3, #7
 8002cf8:	f023 0307 	bic.w	r3, r3, #7
 8002cfc:	3308      	adds	r3, #8
 8002cfe:	9303      	str	r3, [sp, #12]
 8002d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d02:	4433      	add	r3, r6
 8002d04:	9309      	str	r3, [sp, #36]	; 0x24
 8002d06:	e768      	b.n	8002bda <_svfiprintf_r+0x4e>
 8002d08:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d0c:	460c      	mov	r4, r1
 8002d0e:	2001      	movs	r0, #1
 8002d10:	e7a6      	b.n	8002c60 <_svfiprintf_r+0xd4>
 8002d12:	2300      	movs	r3, #0
 8002d14:	3401      	adds	r4, #1
 8002d16:	9305      	str	r3, [sp, #20]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	f04f 0c0a 	mov.w	ip, #10
 8002d1e:	4620      	mov	r0, r4
 8002d20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d24:	3a30      	subs	r2, #48	; 0x30
 8002d26:	2a09      	cmp	r2, #9
 8002d28:	d903      	bls.n	8002d32 <_svfiprintf_r+0x1a6>
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0c6      	beq.n	8002cbc <_svfiprintf_r+0x130>
 8002d2e:	9105      	str	r1, [sp, #20]
 8002d30:	e7c4      	b.n	8002cbc <_svfiprintf_r+0x130>
 8002d32:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d36:	4604      	mov	r4, r0
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e7f0      	b.n	8002d1e <_svfiprintf_r+0x192>
 8002d3c:	ab03      	add	r3, sp, #12
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	462a      	mov	r2, r5
 8002d42:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <_svfiprintf_r+0x1f4>)
 8002d44:	a904      	add	r1, sp, #16
 8002d46:	4638      	mov	r0, r7
 8002d48:	f3af 8000 	nop.w
 8002d4c:	1c42      	adds	r2, r0, #1
 8002d4e:	4606      	mov	r6, r0
 8002d50:	d1d6      	bne.n	8002d00 <_svfiprintf_r+0x174>
 8002d52:	89ab      	ldrh	r3, [r5, #12]
 8002d54:	065b      	lsls	r3, r3, #25
 8002d56:	f53f af2d 	bmi.w	8002bb4 <_svfiprintf_r+0x28>
 8002d5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d5c:	b01d      	add	sp, #116	; 0x74
 8002d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d62:	ab03      	add	r3, sp, #12
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	462a      	mov	r2, r5
 8002d68:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <_svfiprintf_r+0x1f4>)
 8002d6a:	a904      	add	r1, sp, #16
 8002d6c:	4638      	mov	r0, r7
 8002d6e:	f000 f879 	bl	8002e64 <_printf_i>
 8002d72:	e7eb      	b.n	8002d4c <_svfiprintf_r+0x1c0>
 8002d74:	080031d0 	.word	0x080031d0
 8002d78:	080031da 	.word	0x080031da
 8002d7c:	00000000 	.word	0x00000000
 8002d80:	08002ad9 	.word	0x08002ad9
 8002d84:	080031d6 	.word	0x080031d6

08002d88 <_printf_common>:
 8002d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d8c:	4616      	mov	r6, r2
 8002d8e:	4699      	mov	r9, r3
 8002d90:	688a      	ldr	r2, [r1, #8]
 8002d92:	690b      	ldr	r3, [r1, #16]
 8002d94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	bfb8      	it	lt
 8002d9c:	4613      	movlt	r3, r2
 8002d9e:	6033      	str	r3, [r6, #0]
 8002da0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002da4:	4607      	mov	r7, r0
 8002da6:	460c      	mov	r4, r1
 8002da8:	b10a      	cbz	r2, 8002dae <_printf_common+0x26>
 8002daa:	3301      	adds	r3, #1
 8002dac:	6033      	str	r3, [r6, #0]
 8002dae:	6823      	ldr	r3, [r4, #0]
 8002db0:	0699      	lsls	r1, r3, #26
 8002db2:	bf42      	ittt	mi
 8002db4:	6833      	ldrmi	r3, [r6, #0]
 8002db6:	3302      	addmi	r3, #2
 8002db8:	6033      	strmi	r3, [r6, #0]
 8002dba:	6825      	ldr	r5, [r4, #0]
 8002dbc:	f015 0506 	ands.w	r5, r5, #6
 8002dc0:	d106      	bne.n	8002dd0 <_printf_common+0x48>
 8002dc2:	f104 0a19 	add.w	sl, r4, #25
 8002dc6:	68e3      	ldr	r3, [r4, #12]
 8002dc8:	6832      	ldr	r2, [r6, #0]
 8002dca:	1a9b      	subs	r3, r3, r2
 8002dcc:	42ab      	cmp	r3, r5
 8002dce:	dc26      	bgt.n	8002e1e <_printf_common+0x96>
 8002dd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002dd4:	1e13      	subs	r3, r2, #0
 8002dd6:	6822      	ldr	r2, [r4, #0]
 8002dd8:	bf18      	it	ne
 8002dda:	2301      	movne	r3, #1
 8002ddc:	0692      	lsls	r2, r2, #26
 8002dde:	d42b      	bmi.n	8002e38 <_printf_common+0xb0>
 8002de0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002de4:	4649      	mov	r1, r9
 8002de6:	4638      	mov	r0, r7
 8002de8:	47c0      	blx	r8
 8002dea:	3001      	adds	r0, #1
 8002dec:	d01e      	beq.n	8002e2c <_printf_common+0xa4>
 8002dee:	6823      	ldr	r3, [r4, #0]
 8002df0:	6922      	ldr	r2, [r4, #16]
 8002df2:	f003 0306 	and.w	r3, r3, #6
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	bf02      	ittt	eq
 8002dfa:	68e5      	ldreq	r5, [r4, #12]
 8002dfc:	6833      	ldreq	r3, [r6, #0]
 8002dfe:	1aed      	subeq	r5, r5, r3
 8002e00:	68a3      	ldr	r3, [r4, #8]
 8002e02:	bf0c      	ite	eq
 8002e04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e08:	2500      	movne	r5, #0
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	bfc4      	itt	gt
 8002e0e:	1a9b      	subgt	r3, r3, r2
 8002e10:	18ed      	addgt	r5, r5, r3
 8002e12:	2600      	movs	r6, #0
 8002e14:	341a      	adds	r4, #26
 8002e16:	42b5      	cmp	r5, r6
 8002e18:	d11a      	bne.n	8002e50 <_printf_common+0xc8>
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	e008      	b.n	8002e30 <_printf_common+0xa8>
 8002e1e:	2301      	movs	r3, #1
 8002e20:	4652      	mov	r2, sl
 8002e22:	4649      	mov	r1, r9
 8002e24:	4638      	mov	r0, r7
 8002e26:	47c0      	blx	r8
 8002e28:	3001      	adds	r0, #1
 8002e2a:	d103      	bne.n	8002e34 <_printf_common+0xac>
 8002e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e34:	3501      	adds	r5, #1
 8002e36:	e7c6      	b.n	8002dc6 <_printf_common+0x3e>
 8002e38:	18e1      	adds	r1, r4, r3
 8002e3a:	1c5a      	adds	r2, r3, #1
 8002e3c:	2030      	movs	r0, #48	; 0x30
 8002e3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e42:	4422      	add	r2, r4
 8002e44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e4c:	3302      	adds	r3, #2
 8002e4e:	e7c7      	b.n	8002de0 <_printf_common+0x58>
 8002e50:	2301      	movs	r3, #1
 8002e52:	4622      	mov	r2, r4
 8002e54:	4649      	mov	r1, r9
 8002e56:	4638      	mov	r0, r7
 8002e58:	47c0      	blx	r8
 8002e5a:	3001      	adds	r0, #1
 8002e5c:	d0e6      	beq.n	8002e2c <_printf_common+0xa4>
 8002e5e:	3601      	adds	r6, #1
 8002e60:	e7d9      	b.n	8002e16 <_printf_common+0x8e>
	...

08002e64 <_printf_i>:
 8002e64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e68:	7e0f      	ldrb	r7, [r1, #24]
 8002e6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002e6c:	2f78      	cmp	r7, #120	; 0x78
 8002e6e:	4691      	mov	r9, r2
 8002e70:	4680      	mov	r8, r0
 8002e72:	460c      	mov	r4, r1
 8002e74:	469a      	mov	sl, r3
 8002e76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002e7a:	d807      	bhi.n	8002e8c <_printf_i+0x28>
 8002e7c:	2f62      	cmp	r7, #98	; 0x62
 8002e7e:	d80a      	bhi.n	8002e96 <_printf_i+0x32>
 8002e80:	2f00      	cmp	r7, #0
 8002e82:	f000 80d4 	beq.w	800302e <_printf_i+0x1ca>
 8002e86:	2f58      	cmp	r7, #88	; 0x58
 8002e88:	f000 80c0 	beq.w	800300c <_printf_i+0x1a8>
 8002e8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002e94:	e03a      	b.n	8002f0c <_printf_i+0xa8>
 8002e96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002e9a:	2b15      	cmp	r3, #21
 8002e9c:	d8f6      	bhi.n	8002e8c <_printf_i+0x28>
 8002e9e:	a101      	add	r1, pc, #4	; (adr r1, 8002ea4 <_printf_i+0x40>)
 8002ea0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002ea4:	08002efd 	.word	0x08002efd
 8002ea8:	08002f11 	.word	0x08002f11
 8002eac:	08002e8d 	.word	0x08002e8d
 8002eb0:	08002e8d 	.word	0x08002e8d
 8002eb4:	08002e8d 	.word	0x08002e8d
 8002eb8:	08002e8d 	.word	0x08002e8d
 8002ebc:	08002f11 	.word	0x08002f11
 8002ec0:	08002e8d 	.word	0x08002e8d
 8002ec4:	08002e8d 	.word	0x08002e8d
 8002ec8:	08002e8d 	.word	0x08002e8d
 8002ecc:	08002e8d 	.word	0x08002e8d
 8002ed0:	08003015 	.word	0x08003015
 8002ed4:	08002f3d 	.word	0x08002f3d
 8002ed8:	08002fcf 	.word	0x08002fcf
 8002edc:	08002e8d 	.word	0x08002e8d
 8002ee0:	08002e8d 	.word	0x08002e8d
 8002ee4:	08003037 	.word	0x08003037
 8002ee8:	08002e8d 	.word	0x08002e8d
 8002eec:	08002f3d 	.word	0x08002f3d
 8002ef0:	08002e8d 	.word	0x08002e8d
 8002ef4:	08002e8d 	.word	0x08002e8d
 8002ef8:	08002fd7 	.word	0x08002fd7
 8002efc:	682b      	ldr	r3, [r5, #0]
 8002efe:	1d1a      	adds	r2, r3, #4
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	602a      	str	r2, [r5, #0]
 8002f04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e09f      	b.n	8003050 <_printf_i+0x1ec>
 8002f10:	6820      	ldr	r0, [r4, #0]
 8002f12:	682b      	ldr	r3, [r5, #0]
 8002f14:	0607      	lsls	r7, r0, #24
 8002f16:	f103 0104 	add.w	r1, r3, #4
 8002f1a:	6029      	str	r1, [r5, #0]
 8002f1c:	d501      	bpl.n	8002f22 <_printf_i+0xbe>
 8002f1e:	681e      	ldr	r6, [r3, #0]
 8002f20:	e003      	b.n	8002f2a <_printf_i+0xc6>
 8002f22:	0646      	lsls	r6, r0, #25
 8002f24:	d5fb      	bpl.n	8002f1e <_printf_i+0xba>
 8002f26:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002f2a:	2e00      	cmp	r6, #0
 8002f2c:	da03      	bge.n	8002f36 <_printf_i+0xd2>
 8002f2e:	232d      	movs	r3, #45	; 0x2d
 8002f30:	4276      	negs	r6, r6
 8002f32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f36:	485a      	ldr	r0, [pc, #360]	; (80030a0 <_printf_i+0x23c>)
 8002f38:	230a      	movs	r3, #10
 8002f3a:	e012      	b.n	8002f62 <_printf_i+0xfe>
 8002f3c:	682b      	ldr	r3, [r5, #0]
 8002f3e:	6820      	ldr	r0, [r4, #0]
 8002f40:	1d19      	adds	r1, r3, #4
 8002f42:	6029      	str	r1, [r5, #0]
 8002f44:	0605      	lsls	r5, r0, #24
 8002f46:	d501      	bpl.n	8002f4c <_printf_i+0xe8>
 8002f48:	681e      	ldr	r6, [r3, #0]
 8002f4a:	e002      	b.n	8002f52 <_printf_i+0xee>
 8002f4c:	0641      	lsls	r1, r0, #25
 8002f4e:	d5fb      	bpl.n	8002f48 <_printf_i+0xe4>
 8002f50:	881e      	ldrh	r6, [r3, #0]
 8002f52:	4853      	ldr	r0, [pc, #332]	; (80030a0 <_printf_i+0x23c>)
 8002f54:	2f6f      	cmp	r7, #111	; 0x6f
 8002f56:	bf0c      	ite	eq
 8002f58:	2308      	moveq	r3, #8
 8002f5a:	230a      	movne	r3, #10
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f62:	6865      	ldr	r5, [r4, #4]
 8002f64:	60a5      	str	r5, [r4, #8]
 8002f66:	2d00      	cmp	r5, #0
 8002f68:	bfa2      	ittt	ge
 8002f6a:	6821      	ldrge	r1, [r4, #0]
 8002f6c:	f021 0104 	bicge.w	r1, r1, #4
 8002f70:	6021      	strge	r1, [r4, #0]
 8002f72:	b90e      	cbnz	r6, 8002f78 <_printf_i+0x114>
 8002f74:	2d00      	cmp	r5, #0
 8002f76:	d04b      	beq.n	8003010 <_printf_i+0x1ac>
 8002f78:	4615      	mov	r5, r2
 8002f7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8002f7e:	fb03 6711 	mls	r7, r3, r1, r6
 8002f82:	5dc7      	ldrb	r7, [r0, r7]
 8002f84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002f88:	4637      	mov	r7, r6
 8002f8a:	42bb      	cmp	r3, r7
 8002f8c:	460e      	mov	r6, r1
 8002f8e:	d9f4      	bls.n	8002f7a <_printf_i+0x116>
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d10b      	bne.n	8002fac <_printf_i+0x148>
 8002f94:	6823      	ldr	r3, [r4, #0]
 8002f96:	07de      	lsls	r6, r3, #31
 8002f98:	d508      	bpl.n	8002fac <_printf_i+0x148>
 8002f9a:	6923      	ldr	r3, [r4, #16]
 8002f9c:	6861      	ldr	r1, [r4, #4]
 8002f9e:	4299      	cmp	r1, r3
 8002fa0:	bfde      	ittt	le
 8002fa2:	2330      	movle	r3, #48	; 0x30
 8002fa4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002fa8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002fac:	1b52      	subs	r2, r2, r5
 8002fae:	6122      	str	r2, [r4, #16]
 8002fb0:	f8cd a000 	str.w	sl, [sp]
 8002fb4:	464b      	mov	r3, r9
 8002fb6:	aa03      	add	r2, sp, #12
 8002fb8:	4621      	mov	r1, r4
 8002fba:	4640      	mov	r0, r8
 8002fbc:	f7ff fee4 	bl	8002d88 <_printf_common>
 8002fc0:	3001      	adds	r0, #1
 8002fc2:	d14a      	bne.n	800305a <_printf_i+0x1f6>
 8002fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc8:	b004      	add	sp, #16
 8002fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fce:	6823      	ldr	r3, [r4, #0]
 8002fd0:	f043 0320 	orr.w	r3, r3, #32
 8002fd4:	6023      	str	r3, [r4, #0]
 8002fd6:	4833      	ldr	r0, [pc, #204]	; (80030a4 <_printf_i+0x240>)
 8002fd8:	2778      	movs	r7, #120	; 0x78
 8002fda:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	6829      	ldr	r1, [r5, #0]
 8002fe2:	061f      	lsls	r7, r3, #24
 8002fe4:	f851 6b04 	ldr.w	r6, [r1], #4
 8002fe8:	d402      	bmi.n	8002ff0 <_printf_i+0x18c>
 8002fea:	065f      	lsls	r7, r3, #25
 8002fec:	bf48      	it	mi
 8002fee:	b2b6      	uxthmi	r6, r6
 8002ff0:	07df      	lsls	r7, r3, #31
 8002ff2:	bf48      	it	mi
 8002ff4:	f043 0320 	orrmi.w	r3, r3, #32
 8002ff8:	6029      	str	r1, [r5, #0]
 8002ffa:	bf48      	it	mi
 8002ffc:	6023      	strmi	r3, [r4, #0]
 8002ffe:	b91e      	cbnz	r6, 8003008 <_printf_i+0x1a4>
 8003000:	6823      	ldr	r3, [r4, #0]
 8003002:	f023 0320 	bic.w	r3, r3, #32
 8003006:	6023      	str	r3, [r4, #0]
 8003008:	2310      	movs	r3, #16
 800300a:	e7a7      	b.n	8002f5c <_printf_i+0xf8>
 800300c:	4824      	ldr	r0, [pc, #144]	; (80030a0 <_printf_i+0x23c>)
 800300e:	e7e4      	b.n	8002fda <_printf_i+0x176>
 8003010:	4615      	mov	r5, r2
 8003012:	e7bd      	b.n	8002f90 <_printf_i+0x12c>
 8003014:	682b      	ldr	r3, [r5, #0]
 8003016:	6826      	ldr	r6, [r4, #0]
 8003018:	6961      	ldr	r1, [r4, #20]
 800301a:	1d18      	adds	r0, r3, #4
 800301c:	6028      	str	r0, [r5, #0]
 800301e:	0635      	lsls	r5, r6, #24
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	d501      	bpl.n	8003028 <_printf_i+0x1c4>
 8003024:	6019      	str	r1, [r3, #0]
 8003026:	e002      	b.n	800302e <_printf_i+0x1ca>
 8003028:	0670      	lsls	r0, r6, #25
 800302a:	d5fb      	bpl.n	8003024 <_printf_i+0x1c0>
 800302c:	8019      	strh	r1, [r3, #0]
 800302e:	2300      	movs	r3, #0
 8003030:	6123      	str	r3, [r4, #16]
 8003032:	4615      	mov	r5, r2
 8003034:	e7bc      	b.n	8002fb0 <_printf_i+0x14c>
 8003036:	682b      	ldr	r3, [r5, #0]
 8003038:	1d1a      	adds	r2, r3, #4
 800303a:	602a      	str	r2, [r5, #0]
 800303c:	681d      	ldr	r5, [r3, #0]
 800303e:	6862      	ldr	r2, [r4, #4]
 8003040:	2100      	movs	r1, #0
 8003042:	4628      	mov	r0, r5
 8003044:	f7fd f8d4 	bl	80001f0 <memchr>
 8003048:	b108      	cbz	r0, 800304e <_printf_i+0x1ea>
 800304a:	1b40      	subs	r0, r0, r5
 800304c:	6060      	str	r0, [r4, #4]
 800304e:	6863      	ldr	r3, [r4, #4]
 8003050:	6123      	str	r3, [r4, #16]
 8003052:	2300      	movs	r3, #0
 8003054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003058:	e7aa      	b.n	8002fb0 <_printf_i+0x14c>
 800305a:	6923      	ldr	r3, [r4, #16]
 800305c:	462a      	mov	r2, r5
 800305e:	4649      	mov	r1, r9
 8003060:	4640      	mov	r0, r8
 8003062:	47d0      	blx	sl
 8003064:	3001      	adds	r0, #1
 8003066:	d0ad      	beq.n	8002fc4 <_printf_i+0x160>
 8003068:	6823      	ldr	r3, [r4, #0]
 800306a:	079b      	lsls	r3, r3, #30
 800306c:	d413      	bmi.n	8003096 <_printf_i+0x232>
 800306e:	68e0      	ldr	r0, [r4, #12]
 8003070:	9b03      	ldr	r3, [sp, #12]
 8003072:	4298      	cmp	r0, r3
 8003074:	bfb8      	it	lt
 8003076:	4618      	movlt	r0, r3
 8003078:	e7a6      	b.n	8002fc8 <_printf_i+0x164>
 800307a:	2301      	movs	r3, #1
 800307c:	4632      	mov	r2, r6
 800307e:	4649      	mov	r1, r9
 8003080:	4640      	mov	r0, r8
 8003082:	47d0      	blx	sl
 8003084:	3001      	adds	r0, #1
 8003086:	d09d      	beq.n	8002fc4 <_printf_i+0x160>
 8003088:	3501      	adds	r5, #1
 800308a:	68e3      	ldr	r3, [r4, #12]
 800308c:	9903      	ldr	r1, [sp, #12]
 800308e:	1a5b      	subs	r3, r3, r1
 8003090:	42ab      	cmp	r3, r5
 8003092:	dcf2      	bgt.n	800307a <_printf_i+0x216>
 8003094:	e7eb      	b.n	800306e <_printf_i+0x20a>
 8003096:	2500      	movs	r5, #0
 8003098:	f104 0619 	add.w	r6, r4, #25
 800309c:	e7f5      	b.n	800308a <_printf_i+0x226>
 800309e:	bf00      	nop
 80030a0:	080031e1 	.word	0x080031e1
 80030a4:	080031f2 	.word	0x080031f2

080030a8 <memmove>:
 80030a8:	4288      	cmp	r0, r1
 80030aa:	b510      	push	{r4, lr}
 80030ac:	eb01 0402 	add.w	r4, r1, r2
 80030b0:	d902      	bls.n	80030b8 <memmove+0x10>
 80030b2:	4284      	cmp	r4, r0
 80030b4:	4623      	mov	r3, r4
 80030b6:	d807      	bhi.n	80030c8 <memmove+0x20>
 80030b8:	1e43      	subs	r3, r0, #1
 80030ba:	42a1      	cmp	r1, r4
 80030bc:	d008      	beq.n	80030d0 <memmove+0x28>
 80030be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80030c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80030c6:	e7f8      	b.n	80030ba <memmove+0x12>
 80030c8:	4402      	add	r2, r0
 80030ca:	4601      	mov	r1, r0
 80030cc:	428a      	cmp	r2, r1
 80030ce:	d100      	bne.n	80030d2 <memmove+0x2a>
 80030d0:	bd10      	pop	{r4, pc}
 80030d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80030d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80030da:	e7f7      	b.n	80030cc <memmove+0x24>

080030dc <_sbrk_r>:
 80030dc:	b538      	push	{r3, r4, r5, lr}
 80030de:	4d06      	ldr	r5, [pc, #24]	; (80030f8 <_sbrk_r+0x1c>)
 80030e0:	2300      	movs	r3, #0
 80030e2:	4604      	mov	r4, r0
 80030e4:	4608      	mov	r0, r1
 80030e6:	602b      	str	r3, [r5, #0]
 80030e8:	f7fd fce2 	bl	8000ab0 <_sbrk>
 80030ec:	1c43      	adds	r3, r0, #1
 80030ee:	d102      	bne.n	80030f6 <_sbrk_r+0x1a>
 80030f0:	682b      	ldr	r3, [r5, #0]
 80030f2:	b103      	cbz	r3, 80030f6 <_sbrk_r+0x1a>
 80030f4:	6023      	str	r3, [r4, #0]
 80030f6:	bd38      	pop	{r3, r4, r5, pc}
 80030f8:	200001f0 	.word	0x200001f0

080030fc <memcpy>:
 80030fc:	440a      	add	r2, r1
 80030fe:	4291      	cmp	r1, r2
 8003100:	f100 33ff 	add.w	r3, r0, #4294967295
 8003104:	d100      	bne.n	8003108 <memcpy+0xc>
 8003106:	4770      	bx	lr
 8003108:	b510      	push	{r4, lr}
 800310a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800310e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003112:	4291      	cmp	r1, r2
 8003114:	d1f9      	bne.n	800310a <memcpy+0xe>
 8003116:	bd10      	pop	{r4, pc}

08003118 <_realloc_r>:
 8003118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800311c:	4680      	mov	r8, r0
 800311e:	4614      	mov	r4, r2
 8003120:	460e      	mov	r6, r1
 8003122:	b921      	cbnz	r1, 800312e <_realloc_r+0x16>
 8003124:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003128:	4611      	mov	r1, r2
 800312a:	f7ff bc49 	b.w	80029c0 <_malloc_r>
 800312e:	b92a      	cbnz	r2, 800313c <_realloc_r+0x24>
 8003130:	f7ff fbda 	bl	80028e8 <_free_r>
 8003134:	4625      	mov	r5, r4
 8003136:	4628      	mov	r0, r5
 8003138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800313c:	f000 f81b 	bl	8003176 <_malloc_usable_size_r>
 8003140:	4284      	cmp	r4, r0
 8003142:	4607      	mov	r7, r0
 8003144:	d802      	bhi.n	800314c <_realloc_r+0x34>
 8003146:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800314a:	d812      	bhi.n	8003172 <_realloc_r+0x5a>
 800314c:	4621      	mov	r1, r4
 800314e:	4640      	mov	r0, r8
 8003150:	f7ff fc36 	bl	80029c0 <_malloc_r>
 8003154:	4605      	mov	r5, r0
 8003156:	2800      	cmp	r0, #0
 8003158:	d0ed      	beq.n	8003136 <_realloc_r+0x1e>
 800315a:	42bc      	cmp	r4, r7
 800315c:	4622      	mov	r2, r4
 800315e:	4631      	mov	r1, r6
 8003160:	bf28      	it	cs
 8003162:	463a      	movcs	r2, r7
 8003164:	f7ff ffca 	bl	80030fc <memcpy>
 8003168:	4631      	mov	r1, r6
 800316a:	4640      	mov	r0, r8
 800316c:	f7ff fbbc 	bl	80028e8 <_free_r>
 8003170:	e7e1      	b.n	8003136 <_realloc_r+0x1e>
 8003172:	4635      	mov	r5, r6
 8003174:	e7df      	b.n	8003136 <_realloc_r+0x1e>

08003176 <_malloc_usable_size_r>:
 8003176:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800317a:	1f18      	subs	r0, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	bfbc      	itt	lt
 8003180:	580b      	ldrlt	r3, [r1, r0]
 8003182:	18c0      	addlt	r0, r0, r3
 8003184:	4770      	bx	lr
	...

08003188 <_init>:
 8003188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800318a:	bf00      	nop
 800318c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800318e:	bc08      	pop	{r3}
 8003190:	469e      	mov	lr, r3
 8003192:	4770      	bx	lr

08003194 <_fini>:
 8003194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003196:	bf00      	nop
 8003198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800319a:	bc08      	pop	{r3}
 800319c:	469e      	mov	lr, r3
 800319e:	4770      	bx	lr
