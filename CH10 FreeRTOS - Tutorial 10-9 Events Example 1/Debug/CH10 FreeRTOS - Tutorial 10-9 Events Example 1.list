
CH10 FreeRTOS - Tutorial 10-9 Events Example 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000633c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  080064ec  080064ec  000164ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006600  08006600  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08006600  08006600  00016600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006608  08006608  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006608  08006608  00016608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800660c  0800660c  0001660c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00004bb0  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004c1c  20004c1c  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015e0e  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003577  00000000  00000000  00035eed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001358  00000000  00000000  00039468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ece  00000000  00000000  0003a7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00004802  00000000  00000000  0003b68e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001534f  00000000  00000000  0003fe90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e4428  00000000  00000000  000551df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000057d4  00000000  00000000  00139608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a0  00000000  00000000  0013eddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080064d4 	.word	0x080064d4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	080064d4 	.word	0x080064d4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d013      	beq.n	80005cc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005ac:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d00b      	beq.n	80005cc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005b4:	e000      	b.n	80005b8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005b6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d0f9      	beq.n	80005b6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005c2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	b2d2      	uxtb	r2, r2
 80005ca:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005cc:	687b      	ldr	r3, [r7, #4]
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr

080005da <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*Function needed to use printf on CONSOLE*/
int _write(int file, char *ptr, int len){
 80005da:	b580      	push	{r7, lr}
 80005dc:	b086      	sub	sp, #24
 80005de:	af00      	add	r7, sp, #0
 80005e0:	60f8      	str	r0, [r7, #12]
 80005e2:	60b9      	str	r1, [r7, #8]
 80005e4:	607a      	str	r2, [r7, #4]
	int i = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
	for (i=0; i<len; i++)
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	e009      	b.n	8000604 <_write+0x2a>
		ITM_SendChar((*ptr++));
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	1c5a      	adds	r2, r3, #1
 80005f4:	60ba      	str	r2, [r7, #8]
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff ffc7 	bl	800058c <ITM_SendChar>
	for (i=0; i<len; i++)
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	3301      	adds	r3, #1
 8000602:	617b      	str	r3, [r7, #20]
 8000604:	697a      	ldr	r2, [r7, #20]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	429a      	cmp	r2, r3
 800060a:	dbf1      	blt.n	80005f0 <_write+0x16>
	return len;
 800060c:	687b      	ldr	r3, [r7, #4]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3718      	adds	r7, #24
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
	...

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061c:	f000 faf6 	bl	8000c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000620:	f000 f832 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000624:	f000 f8a0 	bl	8000768 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  printf("PROGRAM START \n\r");
 8000628:	480e      	ldr	r0, [pc, #56]	; (8000664 <main+0x4c>)
 800062a:	f005 f879 	bl	8005720 <iprintf>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800062e:	f001 fddd 	bl	80021ec <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000632:	4a0d      	ldr	r2, [pc, #52]	; (8000668 <main+0x50>)
 8000634:	2100      	movs	r1, #0
 8000636:	480d      	ldr	r0, [pc, #52]	; (800066c <main+0x54>)
 8000638:	f001 fe22 	bl	8002280 <osThreadNew>
 800063c:	4603      	mov	r3, r0
 800063e:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <main+0x58>)
 8000640:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000642:	4a0c      	ldr	r2, [pc, #48]	; (8000674 <main+0x5c>)
 8000644:	2100      	movs	r1, #0
 8000646:	480c      	ldr	r0, [pc, #48]	; (8000678 <main+0x60>)
 8000648:	f001 fe1a 	bl	8002280 <osThreadNew>
 800064c:	4603      	mov	r3, r0
 800064e:	4a0b      	ldr	r2, [pc, #44]	; (800067c <main+0x64>)
 8000650:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of myEvent01 */
  myEvent01Handle = osEventFlagsNew(&myEvent01_attributes);
 8000652:	480b      	ldr	r0, [pc, #44]	; (8000680 <main+0x68>)
 8000654:	f001 fec1 	bl	80023da <osEventFlagsNew>
 8000658:	4603      	mov	r3, r0
 800065a:	4a0a      	ldr	r2, [pc, #40]	; (8000684 <main+0x6c>)
 800065c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800065e:	f001 fde9 	bl	8002234 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000662:	e7fe      	b.n	8000662 <main+0x4a>
 8000664:	08006510 	.word	0x08006510
 8000668:	0800655c 	.word	0x0800655c
 800066c:	080007f1 	.word	0x080007f1
 8000670:	20000088 	.word	0x20000088
 8000674:	08006580 	.word	0x08006580
 8000678:	08000859 	.word	0x08000859
 800067c:	2000008c 	.word	0x2000008c
 8000680:	080065a4 	.word	0x080065a4
 8000684:	20000090 	.word	0x20000090

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b094      	sub	sp, #80	; 0x50
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0320 	add.w	r3, r7, #32
 8000692:	2230      	movs	r2, #48	; 0x30
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f005 f897 	bl	80057ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	4b2b      	ldr	r3, [pc, #172]	; (8000760 <SystemClock_Config+0xd8>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	4a2a      	ldr	r2, [pc, #168]	; (8000760 <SystemClock_Config+0xd8>)
 80006b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ba:	6413      	str	r3, [r2, #64]	; 0x40
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <SystemClock_Config+0xd8>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	4b25      	ldr	r3, [pc, #148]	; (8000764 <SystemClock_Config+0xdc>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a24      	ldr	r2, [pc, #144]	; (8000764 <SystemClock_Config+0xdc>)
 80006d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b22      	ldr	r3, [pc, #136]	; (8000764 <SystemClock_Config+0xdc>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e4:	2301      	movs	r3, #1
 80006e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ee:	2302      	movs	r3, #2
 80006f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006f8:	2304      	movs	r3, #4
 80006fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006fc:	23b4      	movs	r3, #180	; 0xb4
 80006fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000700:	2302      	movs	r3, #2
 8000702:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000704:	2307      	movs	r3, #7
 8000706:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0320 	add.w	r3, r7, #32
 800070c:	4618      	mov	r0, r3
 800070e:	f000 fdd1 	bl	80012b4 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000718:	f000 f8e6 	bl	80008e8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800071c:	f000 fd7a 	bl	8001214 <HAL_PWREx_EnableOverDrive>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000726:	f000 f8df 	bl	80008e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072a:	230f      	movs	r3, #15
 800072c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072e:	2302      	movs	r3, #2
 8000730:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000736:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800073a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000740:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	2105      	movs	r1, #5
 8000748:	4618      	mov	r0, r3
 800074a:	f001 f82b 	bl	80017a4 <HAL_RCC_ClockConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000754:	f000 f8c8 	bl	80008e8 <Error_Handler>
  }
}
 8000758:	bf00      	nop
 800075a:	3750      	adds	r7, #80	; 0x50
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <MX_GPIO_Init+0x80>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a18      	ldr	r2, [pc, #96]	; (80007e8 <MX_GPIO_Init+0x80>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <MX_GPIO_Init+0x80>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <MX_GPIO_Init+0x80>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a11      	ldr	r2, [pc, #68]	; (80007e8 <MX_GPIO_Init+0x80>)
 80007a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_GPIO_Init+0x80>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80007bc:	480b      	ldr	r0, [pc, #44]	; (80007ec <MX_GPIO_Init+0x84>)
 80007be:	f000 fcf5 	bl	80011ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80007c2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80007c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	4619      	mov	r1, r3
 80007da:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_GPIO_Init+0x84>)
 80007dc:	f000 fb3a 	bl	8000e54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e0:	bf00      	nop
 80007e2:	3720      	adds	r7, #32
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40021800 	.word	0x40021800

080007f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  /*Waiting for FLAG 1 to be set by the other DefaultTask*/
	  osEventFlagsWait(myEvent01Handle, FLAG1, osFlagsWaitAny, osWaitForever);
 80007f8:	4b13      	ldr	r3, [pc, #76]	; (8000848 <StartDefaultTask+0x58>)
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000800:	2200      	movs	r2, #0
 8000802:	2101      	movs	r1, #1
 8000804:	f001 fe9e 	bl	8002544 <osEventFlagsWait>

	  // Toggle green led
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8000808:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800080c:	480f      	ldr	r0, [pc, #60]	; (800084c <StartDefaultTask+0x5c>)
 800080e:	f000 fce6 	bl	80011de <HAL_GPIO_TogglePin>
	  cn = 1;
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <StartDefaultTask+0x60>)
 8000814:	2201      	movs	r2, #1
 8000816:	701a      	strb	r2, [r3, #0]

	  /*Clear Flag 1 and set Flag 2 to jump to Task02*/
	  osEventFlagsClear(myEvent01Handle , FLAG1);
 8000818:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <StartDefaultTask+0x58>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2101      	movs	r1, #1
 800081e:	4618      	mov	r0, r3
 8000820:	f001 fe5e 	bl	80024e0 <osEventFlagsClear>
	  osEventFlagsSet(myEvent01Handle, FLAG2);
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <StartDefaultTask+0x58>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2110      	movs	r1, #16
 800082a:	4618      	mov	r0, r3
 800082c:	f001 fe14 	bl	8002458 <osEventFlagsSet>

	  printf("DefaultTask %u\n\r", cn);
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <StartDefaultTask+0x60>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	4619      	mov	r1, r3
 8000836:	4807      	ldr	r0, [pc, #28]	; (8000854 <StartDefaultTask+0x64>)
 8000838:	f004 ff72 	bl	8005720 <iprintf>



	  osDelay(1000);
 800083c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000840:	f001 fdb0 	bl	80023a4 <osDelay>
	  osEventFlagsWait(myEvent01Handle, FLAG1, osFlagsWaitAny, osWaitForever);
 8000844:	e7d8      	b.n	80007f8 <StartDefaultTask+0x8>
 8000846:	bf00      	nop
 8000848:	20000090 	.word	0x20000090
 800084c:	40021800 	.word	0x40021800
 8000850:	20000094 	.word	0x20000094
 8000854:	08006524 	.word	0x08006524

08000858 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /*Set Flag 1*/
  osEventFlagsSet(myEvent01Handle, FLAG1);
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <StartTask02+0x5c>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2101      	movs	r1, #1
 8000866:	4618      	mov	r0, r3
 8000868:	f001 fdf6 	bl	8002458 <osEventFlagsSet>
  /* Infinite loop */
  for(;;)
  {
	  /*Waiting for FLAG 2 to be set by the other DefaultTask*/
	  osEventFlagsWait(myEvent01Handle, FLAG2, osFlagsWaitAny, osWaitForever);
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <StartTask02+0x5c>)
 800086e:	6818      	ldr	r0, [r3, #0]
 8000870:	f04f 33ff 	mov.w	r3, #4294967295
 8000874:	2200      	movs	r2, #0
 8000876:	2110      	movs	r1, #16
 8000878:	f001 fe64 	bl	8002544 <osEventFlagsWait>

	  // Toggle red led
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 800087c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000880:	480d      	ldr	r0, [pc, #52]	; (80008b8 <StartTask02+0x60>)
 8000882:	f000 fcac 	bl	80011de <HAL_GPIO_TogglePin>
	  cn = 2;
 8000886:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <StartTask02+0x64>)
 8000888:	2202      	movs	r2, #2
 800088a:	701a      	strb	r2, [r3, #0]

	  // Clear FLAG2 and Set FLAG1 to jump to Default task
	  osEventFlagsClear(myEvent01Handle, FLAG2);
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <StartTask02+0x5c>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2110      	movs	r1, #16
 8000892:	4618      	mov	r0, r3
 8000894:	f001 fe24 	bl	80024e0 <osEventFlagsClear>
	  osEventFlagsSet(myEvent01Handle, FLAG1);
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <StartTask02+0x5c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2101      	movs	r1, #1
 800089e:	4618      	mov	r0, r3
 80008a0:	f001 fdda 	bl	8002458 <osEventFlagsSet>

	  printf("Task02 \n\r");
 80008a4:	4806      	ldr	r0, [pc, #24]	; (80008c0 <StartTask02+0x68>)
 80008a6:	f004 ff3b 	bl	8005720 <iprintf>



	 /*Now time for Task 02 to yield*/
	  osDelay(1000);
 80008aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ae:	f001 fd79 	bl	80023a4 <osDelay>
	  osEventFlagsWait(myEvent01Handle, FLAG2, osFlagsWaitAny, osWaitForever);
 80008b2:	e7db      	b.n	800086c <StartTask02+0x14>
 80008b4:	20000090 	.word	0x20000090
 80008b8:	40021800 	.word	0x40021800
 80008bc:	20000094 	.word	0x20000094
 80008c0:	08006538 	.word	0x08006538

080008c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a04      	ldr	r2, [pc, #16]	; (80008e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d101      	bne.n	80008da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008d6:	f000 f9bb 	bl	8000c50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40001000 	.word	0x40001000

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <Error_Handler+0x8>
	...

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b12      	ldr	r3, [pc, #72]	; (8000948 <HAL_MspInit+0x54>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	4a11      	ldr	r2, [pc, #68]	; (8000948 <HAL_MspInit+0x54>)
 8000904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000908:	6453      	str	r3, [r2, #68]	; 0x44
 800090a:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <HAL_MspInit+0x54>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <HAL_MspInit+0x54>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	4a0a      	ldr	r2, [pc, #40]	; (8000948 <HAL_MspInit+0x54>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000924:	6413      	str	r3, [r2, #64]	; 0x40
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <HAL_MspInit+0x54>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	210f      	movs	r1, #15
 8000936:	f06f 0001 	mvn.w	r0, #1
 800093a:	f000 fa61 	bl	8000e00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000954:	2300      	movs	r3, #0
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	4b33      	ldr	r3, [pc, #204]	; (8000a30 <HAL_InitTick+0xe4>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	4a32      	ldr	r2, [pc, #200]	; (8000a30 <HAL_InitTick+0xe4>)
 8000966:	f043 0310 	orr.w	r3, r3, #16
 800096a:	6413      	str	r3, [r2, #64]	; 0x40
 800096c:	4b30      	ldr	r3, [pc, #192]	; (8000a30 <HAL_InitTick+0xe4>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	f003 0310 	and.w	r3, r3, #16
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000978:	f107 0210 	add.w	r2, r7, #16
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4611      	mov	r1, r2
 8000982:	4618      	mov	r0, r3
 8000984:	f001 f91a 	bl	8001bbc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000988:	6a3b      	ldr	r3, [r7, #32]
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800098c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800098e:	2b00      	cmp	r3, #0
 8000990:	d103      	bne.n	800099a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000992:	f001 f8ff 	bl	8001b94 <HAL_RCC_GetPCLK1Freq>
 8000996:	6378      	str	r0, [r7, #52]	; 0x34
 8000998:	e004      	b.n	80009a4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800099a:	f001 f8fb 	bl	8001b94 <HAL_RCC_GetPCLK1Freq>
 800099e:	4603      	mov	r3, r0
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a6:	4a23      	ldr	r2, [pc, #140]	; (8000a34 <HAL_InitTick+0xe8>)
 80009a8:	fba2 2303 	umull	r2, r3, r2, r3
 80009ac:	0c9b      	lsrs	r3, r3, #18
 80009ae:	3b01      	subs	r3, #1
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009b2:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <HAL_InitTick+0xec>)
 80009b4:	4a21      	ldr	r2, [pc, #132]	; (8000a3c <HAL_InitTick+0xf0>)
 80009b6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009b8:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <HAL_InitTick+0xec>)
 80009ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009be:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009c0:	4a1d      	ldr	r2, [pc, #116]	; (8000a38 <HAL_InitTick+0xec>)
 80009c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009c6:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <HAL_InitTick+0xec>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009cc:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <HAL_InitTick+0xec>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d2:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <HAL_InitTick+0xec>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80009d8:	4817      	ldr	r0, [pc, #92]	; (8000a38 <HAL_InitTick+0xec>)
 80009da:	f001 f921 	bl	8001c20 <HAL_TIM_Base_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d11b      	bne.n	8000a24 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80009ec:	4812      	ldr	r0, [pc, #72]	; (8000a38 <HAL_InitTick+0xec>)
 80009ee:	f001 f971 	bl	8001cd4 <HAL_TIM_Base_Start_IT>
 80009f2:	4603      	mov	r3, r0
 80009f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80009f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d111      	bne.n	8000a24 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a00:	2036      	movs	r0, #54	; 0x36
 8000a02:	f000 fa19 	bl	8000e38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2b0f      	cmp	r3, #15
 8000a0a:	d808      	bhi.n	8000a1e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	6879      	ldr	r1, [r7, #4]
 8000a10:	2036      	movs	r0, #54	; 0x36
 8000a12:	f000 f9f5 	bl	8000e00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a16:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <HAL_InitTick+0xf4>)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6013      	str	r3, [r2, #0]
 8000a1c:	e002      	b.n	8000a24 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3738      	adds	r7, #56	; 0x38
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40023800 	.word	0x40023800
 8000a34:	431bde83 	.word	0x431bde83
 8000a38:	20000098 	.word	0x20000098
 8000a3c:	40001000 	.word	0x40001000
 8000a40:	20000004 	.word	0x20000004

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a48:	e7fe      	b.n	8000a48 <NMI_Handler+0x4>

08000a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <HardFault_Handler+0x4>

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <MemManage_Handler+0x4>

08000a56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <BusFault_Handler+0x4>

08000a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <UsageFault_Handler+0x4>

08000a62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <TIM6_DAC_IRQHandler+0x10>)
 8000a76:	f001 f99d 	bl	8001db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000098 	.word	0x20000098

08000a84 <_read>:
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	e00a      	b.n	8000aac <_read+0x28>
 8000a96:	f3af 8000 	nop.w
 8000a9a:	4601      	mov	r1, r0
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	1c5a      	adds	r2, r3, #1
 8000aa0:	60ba      	str	r2, [r7, #8]
 8000aa2:	b2ca      	uxtb	r2, r1
 8000aa4:	701a      	strb	r2, [r3, #0]
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	697a      	ldr	r2, [r7, #20]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	dbf0      	blt.n	8000a96 <_read+0x12>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3718      	adds	r7, #24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <_close>:
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
 8000ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aca:	4618      	mov	r0, r3
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <_fstat>:
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
 8000ade:	6039      	str	r1, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	2300      	movs	r3, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <_isatty>:
 8000af6:	b480      	push	{r7}
 8000af8:	b083      	sub	sp, #12
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
 8000afe:	2301      	movs	r3, #1
 8000b00:	4618      	mov	r0, r3
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <_lseek>:
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
 8000b18:	2300      	movs	r3, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
	...

08000b28 <_sbrk>:
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	4a14      	ldr	r2, [pc, #80]	; (8000b84 <_sbrk+0x5c>)
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <_sbrk+0x60>)
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <_sbrk+0x64>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d102      	bne.n	8000b4a <_sbrk+0x22>
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <_sbrk+0x64>)
 8000b46:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <_sbrk+0x68>)
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <_sbrk+0x64>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d207      	bcs.n	8000b68 <_sbrk+0x40>
 8000b58:	f004 fedc 	bl	8005914 <__errno>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	220c      	movs	r2, #12
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	f04f 33ff 	mov.w	r3, #4294967295
 8000b66:	e009      	b.n	8000b7c <_sbrk+0x54>
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <_sbrk+0x64>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <_sbrk+0x64>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <_sbrk+0x64>)
 8000b78:	6013      	str	r3, [r2, #0]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3718      	adds	r7, #24
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20030000 	.word	0x20030000
 8000b88:	00000400 	.word	0x00000400
 8000b8c:	200000e0 	.word	0x200000e0
 8000b90:	20004c20 	.word	0x20004c20

08000b94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <SystemInit+0x20>)
 8000b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b9e:	4a05      	ldr	r2, [pc, #20]	; (8000bb4 <SystemInit+0x20>)
 8000ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <Reset_Handler>:
 8000bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf0 <LoopFillZerobss+0xe>
 8000bbc:	f7ff ffea 	bl	8000b94 <SystemInit>
 8000bc0:	480c      	ldr	r0, [pc, #48]	; (8000bf4 <LoopFillZerobss+0x12>)
 8000bc2:	490d      	ldr	r1, [pc, #52]	; (8000bf8 <LoopFillZerobss+0x16>)
 8000bc4:	4a0d      	ldr	r2, [pc, #52]	; (8000bfc <LoopFillZerobss+0x1a>)
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e002      	b.n	8000bd0 <LoopCopyDataInit>

08000bca <CopyDataInit>:
 8000bca:	58d4      	ldr	r4, [r2, r3]
 8000bcc:	50c4      	str	r4, [r0, r3]
 8000bce:	3304      	adds	r3, #4

08000bd0 <LoopCopyDataInit>:
 8000bd0:	18c4      	adds	r4, r0, r3
 8000bd2:	428c      	cmp	r4, r1
 8000bd4:	d3f9      	bcc.n	8000bca <CopyDataInit>
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <LoopFillZerobss+0x1e>)
 8000bd8:	4c0a      	ldr	r4, [pc, #40]	; (8000c04 <LoopFillZerobss+0x22>)
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e001      	b.n	8000be2 <LoopFillZerobss>

08000bde <FillZerobss>:
 8000bde:	6013      	str	r3, [r2, #0]
 8000be0:	3204      	adds	r2, #4

08000be2 <LoopFillZerobss>:
 8000be2:	42a2      	cmp	r2, r4
 8000be4:	d3fb      	bcc.n	8000bde <FillZerobss>
 8000be6:	f004 fe9b 	bl	8005920 <__libc_init_array>
 8000bea:	f7ff fd15 	bl	8000618 <main>
 8000bee:	4770      	bx	lr
 8000bf0:	20030000 	.word	0x20030000
 8000bf4:	20000000 	.word	0x20000000
 8000bf8:	2000006c 	.word	0x2000006c
 8000bfc:	08006610 	.word	0x08006610
 8000c00:	2000006c 	.word	0x2000006c
 8000c04:	20004c1c 	.word	0x20004c1c

08000c08 <ADC_IRQHandler>:
 8000c08:	e7fe      	b.n	8000c08 <ADC_IRQHandler>
	...

08000c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c10:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0d      	ldr	r2, [pc, #52]	; (8000c4c <HAL_Init+0x40>)
 8000c16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <HAL_Init+0x40>)
 8000c22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <HAL_Init+0x40>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a07      	ldr	r2, [pc, #28]	; (8000c4c <HAL_Init+0x40>)
 8000c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c34:	2003      	movs	r0, #3
 8000c36:	f000 f8d8 	bl	8000dea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f7ff fe86 	bl	800094c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c40:	f7ff fe58 	bl	80008f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023c00 	.word	0x40023c00

08000c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_IncTick+0x20>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_IncTick+0x24>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4413      	add	r3, r2
 8000c60:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <HAL_IncTick+0x24>)
 8000c62:	6013      	str	r3, [r2, #0]
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000008 	.word	0x20000008
 8000c74:	200000e4 	.word	0x200000e4

08000c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <HAL_GetTick+0x14>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	200000e4 	.word	0x200000e4

08000c90 <__NVIC_SetPriorityGrouping>:
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cac:	4013      	ands	r3, r2
 8000cae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc2:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	60d3      	str	r3, [r2, #12]
}
 8000cc8:	bf00      	nop
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_GetPriorityGrouping>:
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	0a1b      	lsrs	r3, r3, #8
 8000ce2:	f003 0307 	and.w	r3, r3, #7
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <__NVIC_EnableIRQ>:
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	db0b      	blt.n	8000d1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	f003 021f 	and.w	r2, r3, #31
 8000d0c:	4907      	ldr	r1, [pc, #28]	; (8000d2c <__NVIC_EnableIRQ+0x38>)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	095b      	lsrs	r3, r3, #5
 8000d14:	2001      	movs	r0, #1
 8000d16:	fa00 f202 	lsl.w	r2, r0, r2
 8000d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000e100 	.word	0xe000e100

08000d30 <__NVIC_SetPriority>:
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	db0a      	blt.n	8000d5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	490c      	ldr	r1, [pc, #48]	; (8000d7c <__NVIC_SetPriority+0x4c>)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	0112      	lsls	r2, r2, #4
 8000d50:	b2d2      	uxtb	r2, r2
 8000d52:	440b      	add	r3, r1
 8000d54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d58:	e00a      	b.n	8000d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4908      	ldr	r1, [pc, #32]	; (8000d80 <__NVIC_SetPriority+0x50>)
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	f003 030f 	and.w	r3, r3, #15
 8000d66:	3b04      	subs	r3, #4
 8000d68:	0112      	lsls	r2, r2, #4
 8000d6a:	b2d2      	uxtb	r2, r2
 8000d6c:	440b      	add	r3, r1
 8000d6e:	761a      	strb	r2, [r3, #24]
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000e100 	.word	0xe000e100
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <NVIC_EncodePriority>:
{
 8000d84:	b480      	push	{r7}
 8000d86:	b089      	sub	sp, #36	; 0x24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	f1c3 0307 	rsb	r3, r3, #7
 8000d9e:	2b04      	cmp	r3, #4
 8000da0:	bf28      	it	cs
 8000da2:	2304      	movcs	r3, #4
 8000da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3304      	adds	r3, #4
 8000daa:	2b06      	cmp	r3, #6
 8000dac:	d902      	bls.n	8000db4 <NVIC_EncodePriority+0x30>
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3b03      	subs	r3, #3
 8000db2:	e000      	b.n	8000db6 <NVIC_EncodePriority+0x32>
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43da      	mvns	r2, r3
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	401a      	ands	r2, r3
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd6:	43d9      	mvns	r1, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	4313      	orrs	r3, r2
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3724      	adds	r7, #36	; 0x24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f7ff ff4c 	bl	8000c90 <__NVIC_SetPriorityGrouping>
}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
 8000e0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e12:	f7ff ff61 	bl	8000cd8 <__NVIC_GetPriorityGrouping>
 8000e16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	68b9      	ldr	r1, [r7, #8]
 8000e1c:	6978      	ldr	r0, [r7, #20]
 8000e1e:	f7ff ffb1 	bl	8000d84 <NVIC_EncodePriority>
 8000e22:	4602      	mov	r2, r0
 8000e24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e28:	4611      	mov	r1, r2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff ff80 	bl	8000d30 <__NVIC_SetPriority>
}
 8000e30:	bf00      	nop
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff ff54 	bl	8000cf4 <__NVIC_EnableIRQ>
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	; 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
 8000e6e:	e177      	b.n	8001160 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e70:	2201      	movs	r2, #1
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	697a      	ldr	r2, [r7, #20]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	f040 8166 	bne.w	800115a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f003 0303 	and.w	r3, r3, #3
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d005      	beq.n	8000ea6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d130      	bne.n	8000f08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	68da      	ldr	r2, [r3, #12]
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000edc:	2201      	movs	r2, #1
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	091b      	lsrs	r3, r3, #4
 8000ef2:	f003 0201 	and.w	r2, r3, #1
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	d017      	beq.n	8000f44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0303 	and.w	r3, r3, #3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d123      	bne.n	8000f98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	08da      	lsrs	r2, r3, #3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3208      	adds	r2, #8
 8000f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	f003 0307 	and.w	r3, r3, #7
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	220f      	movs	r2, #15
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	691a      	ldr	r2, [r3, #16]
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	08da      	lsrs	r2, r3, #3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	3208      	adds	r2, #8
 8000f92:	69b9      	ldr	r1, [r7, #24]
 8000f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 0203 	and.w	r2, r3, #3
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	f000 80c0 	beq.w	800115a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	4b66      	ldr	r3, [pc, #408]	; (8001178 <HAL_GPIO_Init+0x324>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	4a65      	ldr	r2, [pc, #404]	; (8001178 <HAL_GPIO_Init+0x324>)
 8000fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fea:	4b63      	ldr	r3, [pc, #396]	; (8001178 <HAL_GPIO_Init+0x324>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ff6:	4a61      	ldr	r2, [pc, #388]	; (800117c <HAL_GPIO_Init+0x328>)
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	089b      	lsrs	r3, r3, #2
 8000ffc:	3302      	adds	r3, #2
 8000ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f003 0303 	and.w	r3, r3, #3
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	220f      	movs	r2, #15
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a58      	ldr	r2, [pc, #352]	; (8001180 <HAL_GPIO_Init+0x32c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d037      	beq.n	8001092 <HAL_GPIO_Init+0x23e>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a57      	ldr	r2, [pc, #348]	; (8001184 <HAL_GPIO_Init+0x330>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d031      	beq.n	800108e <HAL_GPIO_Init+0x23a>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a56      	ldr	r2, [pc, #344]	; (8001188 <HAL_GPIO_Init+0x334>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d02b      	beq.n	800108a <HAL_GPIO_Init+0x236>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a55      	ldr	r2, [pc, #340]	; (800118c <HAL_GPIO_Init+0x338>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d025      	beq.n	8001086 <HAL_GPIO_Init+0x232>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a54      	ldr	r2, [pc, #336]	; (8001190 <HAL_GPIO_Init+0x33c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d01f      	beq.n	8001082 <HAL_GPIO_Init+0x22e>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a53      	ldr	r2, [pc, #332]	; (8001194 <HAL_GPIO_Init+0x340>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d019      	beq.n	800107e <HAL_GPIO_Init+0x22a>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a52      	ldr	r2, [pc, #328]	; (8001198 <HAL_GPIO_Init+0x344>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d013      	beq.n	800107a <HAL_GPIO_Init+0x226>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a51      	ldr	r2, [pc, #324]	; (800119c <HAL_GPIO_Init+0x348>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d00d      	beq.n	8001076 <HAL_GPIO_Init+0x222>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a50      	ldr	r2, [pc, #320]	; (80011a0 <HAL_GPIO_Init+0x34c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d007      	beq.n	8001072 <HAL_GPIO_Init+0x21e>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4f      	ldr	r2, [pc, #316]	; (80011a4 <HAL_GPIO_Init+0x350>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d101      	bne.n	800106e <HAL_GPIO_Init+0x21a>
 800106a:	2309      	movs	r3, #9
 800106c:	e012      	b.n	8001094 <HAL_GPIO_Init+0x240>
 800106e:	230a      	movs	r3, #10
 8001070:	e010      	b.n	8001094 <HAL_GPIO_Init+0x240>
 8001072:	2308      	movs	r3, #8
 8001074:	e00e      	b.n	8001094 <HAL_GPIO_Init+0x240>
 8001076:	2307      	movs	r3, #7
 8001078:	e00c      	b.n	8001094 <HAL_GPIO_Init+0x240>
 800107a:	2306      	movs	r3, #6
 800107c:	e00a      	b.n	8001094 <HAL_GPIO_Init+0x240>
 800107e:	2305      	movs	r3, #5
 8001080:	e008      	b.n	8001094 <HAL_GPIO_Init+0x240>
 8001082:	2304      	movs	r3, #4
 8001084:	e006      	b.n	8001094 <HAL_GPIO_Init+0x240>
 8001086:	2303      	movs	r3, #3
 8001088:	e004      	b.n	8001094 <HAL_GPIO_Init+0x240>
 800108a:	2302      	movs	r3, #2
 800108c:	e002      	b.n	8001094 <HAL_GPIO_Init+0x240>
 800108e:	2301      	movs	r3, #1
 8001090:	e000      	b.n	8001094 <HAL_GPIO_Init+0x240>
 8001092:	2300      	movs	r3, #0
 8001094:	69fa      	ldr	r2, [r7, #28]
 8001096:	f002 0203 	and.w	r2, r2, #3
 800109a:	0092      	lsls	r2, r2, #2
 800109c:	4093      	lsls	r3, r2
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010a4:	4935      	ldr	r1, [pc, #212]	; (800117c <HAL_GPIO_Init+0x328>)
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	089b      	lsrs	r3, r3, #2
 80010aa:	3302      	adds	r3, #2
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010b2:	4b3d      	ldr	r3, [pc, #244]	; (80011a8 <HAL_GPIO_Init+0x354>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010d6:	4a34      	ldr	r2, [pc, #208]	; (80011a8 <HAL_GPIO_Init+0x354>)
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010dc:	4b32      	ldr	r3, [pc, #200]	; (80011a8 <HAL_GPIO_Init+0x354>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001100:	4a29      	ldr	r2, [pc, #164]	; (80011a8 <HAL_GPIO_Init+0x354>)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001106:	4b28      	ldr	r3, [pc, #160]	; (80011a8 <HAL_GPIO_Init+0x354>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800112a:	4a1f      	ldr	r2, [pc, #124]	; (80011a8 <HAL_GPIO_Init+0x354>)
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001130:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <HAL_GPIO_Init+0x354>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001154:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <HAL_GPIO_Init+0x354>)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3301      	adds	r3, #1
 800115e:	61fb      	str	r3, [r7, #28]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	2b0f      	cmp	r3, #15
 8001164:	f67f ae84 	bls.w	8000e70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	3724      	adds	r7, #36	; 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800
 800117c:	40013800 	.word	0x40013800
 8001180:	40020000 	.word	0x40020000
 8001184:	40020400 	.word	0x40020400
 8001188:	40020800 	.word	0x40020800
 800118c:	40020c00 	.word	0x40020c00
 8001190:	40021000 	.word	0x40021000
 8001194:	40021400 	.word	0x40021400
 8001198:	40021800 	.word	0x40021800
 800119c:	40021c00 	.word	0x40021c00
 80011a0:	40022000 	.word	0x40022000
 80011a4:	40022400 	.word	0x40022400
 80011a8:	40013c00 	.word	0x40013c00

080011ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	807b      	strh	r3, [r7, #2]
 80011b8:	4613      	mov	r3, r2
 80011ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011bc:	787b      	ldrb	r3, [r7, #1]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011c2:	887a      	ldrh	r2, [r7, #2]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011c8:	e003      	b.n	80011d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ca:	887b      	ldrh	r3, [r7, #2]
 80011cc:	041a      	lsls	r2, r3, #16
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	619a      	str	r2, [r3, #24]
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011de:	b480      	push	{r7}
 80011e0:	b085      	sub	sp, #20
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
 80011e6:	460b      	mov	r3, r1
 80011e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011f0:	887a      	ldrh	r2, [r7, #2]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	4013      	ands	r3, r2
 80011f6:	041a      	lsls	r2, r3, #16
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	43d9      	mvns	r1, r3
 80011fc:	887b      	ldrh	r3, [r7, #2]
 80011fe:	400b      	ands	r3, r1
 8001200:	431a      	orrs	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	619a      	str	r2, [r3, #24]
}
 8001206:	bf00      	nop
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	603b      	str	r3, [r7, #0]
 8001222:	4b20      	ldr	r3, [pc, #128]	; (80012a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	4a1f      	ldr	r2, [pc, #124]	; (80012a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122c:	6413      	str	r3, [r2, #64]	; 0x40
 800122e:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001236:	603b      	str	r3, [r7, #0]
 8001238:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800123a:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <HAL_PWREx_EnableOverDrive+0x94>)
 800123c:	2201      	movs	r2, #1
 800123e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001240:	f7ff fd1a 	bl	8000c78 <HAL_GetTick>
 8001244:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001246:	e009      	b.n	800125c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001248:	f7ff fd16 	bl	8000c78 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001256:	d901      	bls.n	800125c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e01f      	b.n	800129c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800125c:	4b13      	ldr	r3, [pc, #76]	; (80012ac <HAL_PWREx_EnableOverDrive+0x98>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001268:	d1ee      	bne.n	8001248 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800126c:	2201      	movs	r2, #1
 800126e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001270:	f7ff fd02 	bl	8000c78 <HAL_GetTick>
 8001274:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001276:	e009      	b.n	800128c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001278:	f7ff fcfe 	bl	8000c78 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001286:	d901      	bls.n	800128c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e007      	b.n	800129c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800128c:	4b07      	ldr	r3, [pc, #28]	; (80012ac <HAL_PWREx_EnableOverDrive+0x98>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001294:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001298:	d1ee      	bne.n	8001278 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40023800 	.word	0x40023800
 80012a8:	420e0040 	.word	0x420e0040
 80012ac:	40007000 	.word	0x40007000
 80012b0:	420e0044 	.word	0x420e0044

080012b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e267      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d075      	beq.n	80013be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012d2:	4b88      	ldr	r3, [pc, #544]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 030c 	and.w	r3, r3, #12
 80012da:	2b04      	cmp	r3, #4
 80012dc:	d00c      	beq.n	80012f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012de:	4b85      	ldr	r3, [pc, #532]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012e6:	2b08      	cmp	r3, #8
 80012e8:	d112      	bne.n	8001310 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ea:	4b82      	ldr	r3, [pc, #520]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012f6:	d10b      	bne.n	8001310 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f8:	4b7e      	ldr	r3, [pc, #504]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d05b      	beq.n	80013bc <HAL_RCC_OscConfig+0x108>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d157      	bne.n	80013bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e242      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001318:	d106      	bne.n	8001328 <HAL_RCC_OscConfig+0x74>
 800131a:	4b76      	ldr	r3, [pc, #472]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a75      	ldr	r2, [pc, #468]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	e01d      	b.n	8001364 <HAL_RCC_OscConfig+0xb0>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001330:	d10c      	bne.n	800134c <HAL_RCC_OscConfig+0x98>
 8001332:	4b70      	ldr	r3, [pc, #448]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a6f      	ldr	r2, [pc, #444]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	4b6d      	ldr	r3, [pc, #436]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a6c      	ldr	r2, [pc, #432]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	e00b      	b.n	8001364 <HAL_RCC_OscConfig+0xb0>
 800134c:	4b69      	ldr	r3, [pc, #420]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a68      	ldr	r2, [pc, #416]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	4b66      	ldr	r3, [pc, #408]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a65      	ldr	r2, [pc, #404]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 800135e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001362:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d013      	beq.n	8001394 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fc84 	bl	8000c78 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001374:	f7ff fc80 	bl	8000c78 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b64      	cmp	r3, #100	; 0x64
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e207      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001386:	4b5b      	ldr	r3, [pc, #364]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0f0      	beq.n	8001374 <HAL_RCC_OscConfig+0xc0>
 8001392:	e014      	b.n	80013be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001394:	f7ff fc70 	bl	8000c78 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800139c:	f7ff fc6c 	bl	8000c78 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b64      	cmp	r3, #100	; 0x64
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e1f3      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ae:	4b51      	ldr	r3, [pc, #324]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f0      	bne.n	800139c <HAL_RCC_OscConfig+0xe8>
 80013ba:	e000      	b.n	80013be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d063      	beq.n	8001492 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ca:	4b4a      	ldr	r3, [pc, #296]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f003 030c 	and.w	r3, r3, #12
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d00b      	beq.n	80013ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013d6:	4b47      	ldr	r3, [pc, #284]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013de:	2b08      	cmp	r3, #8
 80013e0:	d11c      	bne.n	800141c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013e2:	4b44      	ldr	r3, [pc, #272]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d116      	bne.n	800141c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ee:	4b41      	ldr	r3, [pc, #260]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d005      	beq.n	8001406 <HAL_RCC_OscConfig+0x152>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d001      	beq.n	8001406 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e1c7      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001406:	4b3b      	ldr	r3, [pc, #236]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	4937      	ldr	r1, [pc, #220]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001416:	4313      	orrs	r3, r2
 8001418:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141a:	e03a      	b.n	8001492 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d020      	beq.n	8001466 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001424:	4b34      	ldr	r3, [pc, #208]	; (80014f8 <HAL_RCC_OscConfig+0x244>)
 8001426:	2201      	movs	r2, #1
 8001428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142a:	f7ff fc25 	bl	8000c78 <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001432:	f7ff fc21 	bl	8000c78 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e1a8      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001444:	4b2b      	ldr	r3, [pc, #172]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0f0      	beq.n	8001432 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001450:	4b28      	ldr	r3, [pc, #160]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	4925      	ldr	r1, [pc, #148]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001460:	4313      	orrs	r3, r2
 8001462:	600b      	str	r3, [r1, #0]
 8001464:	e015      	b.n	8001492 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001466:	4b24      	ldr	r3, [pc, #144]	; (80014f8 <HAL_RCC_OscConfig+0x244>)
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146c:	f7ff fc04 	bl	8000c78 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001474:	f7ff fc00 	bl	8000c78 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e187      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001486:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f0      	bne.n	8001474 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	2b00      	cmp	r3, #0
 800149c:	d036      	beq.n	800150c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d016      	beq.n	80014d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <HAL_RCC_OscConfig+0x248>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ac:	f7ff fbe4 	bl	8000c78 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b4:	f7ff fbe0 	bl	8000c78 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e167      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <HAL_RCC_OscConfig+0x240>)
 80014c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0f0      	beq.n	80014b4 <HAL_RCC_OscConfig+0x200>
 80014d2:	e01b      	b.n	800150c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <HAL_RCC_OscConfig+0x248>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014da:	f7ff fbcd 	bl	8000c78 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e0:	e00e      	b.n	8001500 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e2:	f7ff fbc9 	bl	8000c78 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d907      	bls.n	8001500 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e150      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
 80014f4:	40023800 	.word	0x40023800
 80014f8:	42470000 	.word	0x42470000
 80014fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001500:	4b88      	ldr	r3, [pc, #544]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 8001502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1ea      	bne.n	80014e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 8097 	beq.w	8001648 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800151a:	2300      	movs	r3, #0
 800151c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800151e:	4b81      	ldr	r3, [pc, #516]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10f      	bne.n	800154a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	4b7d      	ldr	r3, [pc, #500]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	4a7c      	ldr	r2, [pc, #496]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001538:	6413      	str	r3, [r2, #64]	; 0x40
 800153a:	4b7a      	ldr	r3, [pc, #488]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001546:	2301      	movs	r3, #1
 8001548:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154a:	4b77      	ldr	r3, [pc, #476]	; (8001728 <HAL_RCC_OscConfig+0x474>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001552:	2b00      	cmp	r3, #0
 8001554:	d118      	bne.n	8001588 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001556:	4b74      	ldr	r3, [pc, #464]	; (8001728 <HAL_RCC_OscConfig+0x474>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a73      	ldr	r2, [pc, #460]	; (8001728 <HAL_RCC_OscConfig+0x474>)
 800155c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001562:	f7ff fb89 	bl	8000c78 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800156a:	f7ff fb85 	bl	8000c78 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e10c      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157c:	4b6a      	ldr	r3, [pc, #424]	; (8001728 <HAL_RCC_OscConfig+0x474>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0f0      	beq.n	800156a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d106      	bne.n	800159e <HAL_RCC_OscConfig+0x2ea>
 8001590:	4b64      	ldr	r3, [pc, #400]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 8001592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001594:	4a63      	ldr	r2, [pc, #396]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	6713      	str	r3, [r2, #112]	; 0x70
 800159c:	e01c      	b.n	80015d8 <HAL_RCC_OscConfig+0x324>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2b05      	cmp	r3, #5
 80015a4:	d10c      	bne.n	80015c0 <HAL_RCC_OscConfig+0x30c>
 80015a6:	4b5f      	ldr	r3, [pc, #380]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 80015a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015aa:	4a5e      	ldr	r2, [pc, #376]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 80015ac:	f043 0304 	orr.w	r3, r3, #4
 80015b0:	6713      	str	r3, [r2, #112]	; 0x70
 80015b2:	4b5c      	ldr	r3, [pc, #368]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 80015b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b6:	4a5b      	ldr	r2, [pc, #364]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6713      	str	r3, [r2, #112]	; 0x70
 80015be:	e00b      	b.n	80015d8 <HAL_RCC_OscConfig+0x324>
 80015c0:	4b58      	ldr	r3, [pc, #352]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 80015c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c4:	4a57      	ldr	r2, [pc, #348]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 80015c6:	f023 0301 	bic.w	r3, r3, #1
 80015ca:	6713      	str	r3, [r2, #112]	; 0x70
 80015cc:	4b55      	ldr	r3, [pc, #340]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 80015ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d0:	4a54      	ldr	r2, [pc, #336]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 80015d2:	f023 0304 	bic.w	r3, r3, #4
 80015d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d015      	beq.n	800160c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e0:	f7ff fb4a 	bl	8000c78 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e6:	e00a      	b.n	80015fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e8:	f7ff fb46 	bl	8000c78 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e0cb      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015fe:	4b49      	ldr	r3, [pc, #292]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 8001600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0ee      	beq.n	80015e8 <HAL_RCC_OscConfig+0x334>
 800160a:	e014      	b.n	8001636 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160c:	f7ff fb34 	bl	8000c78 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001612:	e00a      	b.n	800162a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001614:	f7ff fb30 	bl	8000c78 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001622:	4293      	cmp	r3, r2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e0b5      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800162a:	4b3e      	ldr	r3, [pc, #248]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 800162c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1ee      	bne.n	8001614 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001636:	7dfb      	ldrb	r3, [r7, #23]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d105      	bne.n	8001648 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800163c:	4b39      	ldr	r3, [pc, #228]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	4a38      	ldr	r2, [pc, #224]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 8001642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001646:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 80a1 	beq.w	8001794 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001652:	4b34      	ldr	r3, [pc, #208]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	2b08      	cmp	r3, #8
 800165c:	d05c      	beq.n	8001718 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	2b02      	cmp	r3, #2
 8001664:	d141      	bne.n	80016ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001666:	4b31      	ldr	r3, [pc, #196]	; (800172c <HAL_RCC_OscConfig+0x478>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166c:	f7ff fb04 	bl	8000c78 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001674:	f7ff fb00 	bl	8000c78 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e087      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001686:	4b27      	ldr	r3, [pc, #156]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69da      	ldr	r2, [r3, #28]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	431a      	orrs	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a0:	019b      	lsls	r3, r3, #6
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a8:	085b      	lsrs	r3, r3, #1
 80016aa:	3b01      	subs	r3, #1
 80016ac:	041b      	lsls	r3, r3, #16
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b4:	061b      	lsls	r3, r3, #24
 80016b6:	491b      	ldr	r1, [pc, #108]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016bc:	4b1b      	ldr	r3, [pc, #108]	; (800172c <HAL_RCC_OscConfig+0x478>)
 80016be:	2201      	movs	r2, #1
 80016c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c2:	f7ff fad9 	bl	8000c78 <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ca:	f7ff fad5 	bl	8000c78 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e05c      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0f0      	beq.n	80016ca <HAL_RCC_OscConfig+0x416>
 80016e8:	e054      	b.n	8001794 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <HAL_RCC_OscConfig+0x478>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f0:	f7ff fac2 	bl	8000c78 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f8:	f7ff fabe 	bl	8000c78 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e045      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_RCC_OscConfig+0x470>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0x444>
 8001716:	e03d      	b.n	8001794 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d107      	bne.n	8001730 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e038      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
 8001724:	40023800 	.word	0x40023800
 8001728:	40007000 	.word	0x40007000
 800172c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001730:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <HAL_RCC_OscConfig+0x4ec>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d028      	beq.n	8001790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001748:	429a      	cmp	r2, r3
 800174a:	d121      	bne.n	8001790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001756:	429a      	cmp	r2, r3
 8001758:	d11a      	bne.n	8001790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001760:	4013      	ands	r3, r2
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001766:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001768:	4293      	cmp	r3, r2
 800176a:	d111      	bne.n	8001790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001776:	085b      	lsrs	r3, r3, #1
 8001778:	3b01      	subs	r3, #1
 800177a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800177c:	429a      	cmp	r2, r3
 800177e:	d107      	bne.n	8001790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800178c:	429a      	cmp	r2, r3
 800178e:	d001      	beq.n	8001794 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e000      	b.n	8001796 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800

080017a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0cc      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017b8:	4b68      	ldr	r3, [pc, #416]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 030f 	and.w	r3, r3, #15
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d90c      	bls.n	80017e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c6:	4b65      	ldr	r3, [pc, #404]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ce:	4b63      	ldr	r3, [pc, #396]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d001      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e0b8      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d020      	beq.n	800182e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d005      	beq.n	8001804 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017f8:	4b59      	ldr	r3, [pc, #356]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	4a58      	ldr	r2, [pc, #352]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001802:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0308 	and.w	r3, r3, #8
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001810:	4b53      	ldr	r3, [pc, #332]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	4a52      	ldr	r2, [pc, #328]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800181a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800181c:	4b50      	ldr	r3, [pc, #320]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	494d      	ldr	r1, [pc, #308]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	4313      	orrs	r3, r2
 800182c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	d044      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d107      	bne.n	8001852 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001842:	4b47      	ldr	r3, [pc, #284]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d119      	bne.n	8001882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e07f      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b02      	cmp	r3, #2
 8001858:	d003      	beq.n	8001862 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800185e:	2b03      	cmp	r3, #3
 8001860:	d107      	bne.n	8001872 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001862:	4b3f      	ldr	r3, [pc, #252]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d109      	bne.n	8001882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e06f      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001872:	4b3b      	ldr	r3, [pc, #236]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e067      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001882:	4b37      	ldr	r3, [pc, #220]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f023 0203 	bic.w	r2, r3, #3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	4934      	ldr	r1, [pc, #208]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	4313      	orrs	r3, r2
 8001892:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001894:	f7ff f9f0 	bl	8000c78 <HAL_GetTick>
 8001898:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189a:	e00a      	b.n	80018b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800189c:	f7ff f9ec 	bl	8000c78 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e04f      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b2:	4b2b      	ldr	r3, [pc, #172]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 020c 	and.w	r2, r3, #12
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d1eb      	bne.n	800189c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018c4:	4b25      	ldr	r3, [pc, #148]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 030f 	and.w	r3, r3, #15
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d20c      	bcs.n	80018ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d2:	4b22      	ldr	r3, [pc, #136]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018da:	4b20      	ldr	r3, [pc, #128]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d001      	beq.n	80018ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e032      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d008      	beq.n	800190a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018f8:	4b19      	ldr	r3, [pc, #100]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	4916      	ldr	r1, [pc, #88]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	4313      	orrs	r3, r2
 8001908:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b00      	cmp	r3, #0
 8001914:	d009      	beq.n	800192a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001916:	4b12      	ldr	r3, [pc, #72]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	490e      	ldr	r1, [pc, #56]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	4313      	orrs	r3, r2
 8001928:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800192a:	f000 f821 	bl	8001970 <HAL_RCC_GetSysClockFreq>
 800192e:	4602      	mov	r2, r0
 8001930:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	091b      	lsrs	r3, r3, #4
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	490a      	ldr	r1, [pc, #40]	; (8001964 <HAL_RCC_ClockConfig+0x1c0>)
 800193c:	5ccb      	ldrb	r3, [r1, r3]
 800193e:	fa22 f303 	lsr.w	r3, r2, r3
 8001942:	4a09      	ldr	r2, [pc, #36]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_RCC_ClockConfig+0x1c8>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fffe 	bl	800094c <HAL_InitTick>

  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40023c00 	.word	0x40023c00
 8001960:	40023800 	.word	0x40023800
 8001964:	080065b4 	.word	0x080065b4
 8001968:	20000000 	.word	0x20000000
 800196c:	20000004 	.word	0x20000004

08001970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001974:	b094      	sub	sp, #80	; 0x50
 8001976:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	647b      	str	r3, [r7, #68]	; 0x44
 800197c:	2300      	movs	r3, #0
 800197e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001980:	2300      	movs	r3, #0
 8001982:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001988:	4b79      	ldr	r3, [pc, #484]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x200>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 030c 	and.w	r3, r3, #12
 8001990:	2b08      	cmp	r3, #8
 8001992:	d00d      	beq.n	80019b0 <HAL_RCC_GetSysClockFreq+0x40>
 8001994:	2b08      	cmp	r3, #8
 8001996:	f200 80e1 	bhi.w	8001b5c <HAL_RCC_GetSysClockFreq+0x1ec>
 800199a:	2b00      	cmp	r3, #0
 800199c:	d002      	beq.n	80019a4 <HAL_RCC_GetSysClockFreq+0x34>
 800199e:	2b04      	cmp	r3, #4
 80019a0:	d003      	beq.n	80019aa <HAL_RCC_GetSysClockFreq+0x3a>
 80019a2:	e0db      	b.n	8001b5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019a4:	4b73      	ldr	r3, [pc, #460]	; (8001b74 <HAL_RCC_GetSysClockFreq+0x204>)
 80019a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019a8:	e0db      	b.n	8001b62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019aa:	4b73      	ldr	r3, [pc, #460]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x208>)
 80019ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019ae:	e0d8      	b.n	8001b62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019b0:	4b6f      	ldr	r3, [pc, #444]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x200>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ba:	4b6d      	ldr	r3, [pc, #436]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x200>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d063      	beq.n	8001a8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019c6:	4b6a      	ldr	r3, [pc, #424]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x200>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	099b      	lsrs	r3, r3, #6
 80019cc:	2200      	movs	r2, #0
 80019ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80019d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019d8:	633b      	str	r3, [r7, #48]	; 0x30
 80019da:	2300      	movs	r3, #0
 80019dc:	637b      	str	r3, [r7, #52]	; 0x34
 80019de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019e2:	4622      	mov	r2, r4
 80019e4:	462b      	mov	r3, r5
 80019e6:	f04f 0000 	mov.w	r0, #0
 80019ea:	f04f 0100 	mov.w	r1, #0
 80019ee:	0159      	lsls	r1, r3, #5
 80019f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019f4:	0150      	lsls	r0, r2, #5
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4621      	mov	r1, r4
 80019fc:	1a51      	subs	r1, r2, r1
 80019fe:	6139      	str	r1, [r7, #16]
 8001a00:	4629      	mov	r1, r5
 8001a02:	eb63 0301 	sbc.w	r3, r3, r1
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	f04f 0300 	mov.w	r3, #0
 8001a10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a14:	4659      	mov	r1, fp
 8001a16:	018b      	lsls	r3, r1, #6
 8001a18:	4651      	mov	r1, sl
 8001a1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a1e:	4651      	mov	r1, sl
 8001a20:	018a      	lsls	r2, r1, #6
 8001a22:	4651      	mov	r1, sl
 8001a24:	ebb2 0801 	subs.w	r8, r2, r1
 8001a28:	4659      	mov	r1, fp
 8001a2a:	eb63 0901 	sbc.w	r9, r3, r1
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a42:	4690      	mov	r8, r2
 8001a44:	4699      	mov	r9, r3
 8001a46:	4623      	mov	r3, r4
 8001a48:	eb18 0303 	adds.w	r3, r8, r3
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	462b      	mov	r3, r5
 8001a50:	eb49 0303 	adc.w	r3, r9, r3
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a62:	4629      	mov	r1, r5
 8001a64:	024b      	lsls	r3, r1, #9
 8001a66:	4621      	mov	r1, r4
 8001a68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a6c:	4621      	mov	r1, r4
 8001a6e:	024a      	lsls	r2, r1, #9
 8001a70:	4610      	mov	r0, r2
 8001a72:	4619      	mov	r1, r3
 8001a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a76:	2200      	movs	r2, #0
 8001a78:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a80:	f7fe fc06 	bl	8000290 <__aeabi_uldivmod>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4613      	mov	r3, r2
 8001a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a8c:	e058      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a8e:	4b38      	ldr	r3, [pc, #224]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	099b      	lsrs	r3, r3, #6
 8001a94:	2200      	movs	r2, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	4611      	mov	r1, r2
 8001a9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a9e:	623b      	str	r3, [r7, #32]
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001aa8:	4642      	mov	r2, r8
 8001aaa:	464b      	mov	r3, r9
 8001aac:	f04f 0000 	mov.w	r0, #0
 8001ab0:	f04f 0100 	mov.w	r1, #0
 8001ab4:	0159      	lsls	r1, r3, #5
 8001ab6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aba:	0150      	lsls	r0, r2, #5
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4641      	mov	r1, r8
 8001ac2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ac6:	4649      	mov	r1, r9
 8001ac8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001acc:	f04f 0200 	mov.w	r2, #0
 8001ad0:	f04f 0300 	mov.w	r3, #0
 8001ad4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ad8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001adc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ae0:	ebb2 040a 	subs.w	r4, r2, sl
 8001ae4:	eb63 050b 	sbc.w	r5, r3, fp
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	00eb      	lsls	r3, r5, #3
 8001af2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001af6:	00e2      	lsls	r2, r4, #3
 8001af8:	4614      	mov	r4, r2
 8001afa:	461d      	mov	r5, r3
 8001afc:	4643      	mov	r3, r8
 8001afe:	18e3      	adds	r3, r4, r3
 8001b00:	603b      	str	r3, [r7, #0]
 8001b02:	464b      	mov	r3, r9
 8001b04:	eb45 0303 	adc.w	r3, r5, r3
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b16:	4629      	mov	r1, r5
 8001b18:	028b      	lsls	r3, r1, #10
 8001b1a:	4621      	mov	r1, r4
 8001b1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b20:	4621      	mov	r1, r4
 8001b22:	028a      	lsls	r2, r1, #10
 8001b24:	4610      	mov	r0, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	61bb      	str	r3, [r7, #24]
 8001b2e:	61fa      	str	r2, [r7, #28]
 8001b30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b34:	f7fe fbac 	bl	8000290 <__aeabi_uldivmod>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	0c1b      	lsrs	r3, r3, #16
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b5a:	e002      	b.n	8001b62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b5c:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3750      	adds	r7, #80	; 0x50
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800
 8001b74:	00f42400 	.word	0x00f42400
 8001b78:	007a1200 	.word	0x007a1200

08001b7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b80:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b82:	681b      	ldr	r3, [r3, #0]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	20000000 	.word	0x20000000

08001b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b98:	f7ff fff0 	bl	8001b7c <HAL_RCC_GetHCLKFreq>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	0a9b      	lsrs	r3, r3, #10
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	4903      	ldr	r1, [pc, #12]	; (8001bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001baa:	5ccb      	ldrb	r3, [r1, r3]
 8001bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	080065c4 	.word	0x080065c4

08001bbc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	220f      	movs	r2, #15
 8001bca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_RCC_GetClockConfig+0x5c>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 0203 	and.w	r2, r3, #3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <HAL_RCC_GetClockConfig+0x5c>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <HAL_RCC_GetClockConfig+0x5c>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bf0:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <HAL_RCC_GetClockConfig+0x5c>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	08db      	lsrs	r3, r3, #3
 8001bf6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bfe:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <HAL_RCC_GetClockConfig+0x60>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 020f 	and.w	r2, r3, #15
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	601a      	str	r2, [r3, #0]
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40023c00 	.word	0x40023c00

08001c20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e041      	b.n	8001cb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d106      	bne.n	8001c4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f839 	bl	8001cbe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4610      	mov	r0, r2
 8001c60:	f000 f9c0 	bl	8001fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
	...

08001cd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d001      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e04e      	b.n	8001d8a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2202      	movs	r2, #2
 8001cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 0201 	orr.w	r2, r2, #1
 8001d02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a23      	ldr	r2, [pc, #140]	; (8001d98 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d022      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0x80>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d16:	d01d      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0x80>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a1f      	ldr	r2, [pc, #124]	; (8001d9c <HAL_TIM_Base_Start_IT+0xc8>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d018      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0x80>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a1e      	ldr	r2, [pc, #120]	; (8001da0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d013      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0x80>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a1c      	ldr	r2, [pc, #112]	; (8001da4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d00e      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0x80>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a1b      	ldr	r2, [pc, #108]	; (8001da8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d009      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0x80>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a19      	ldr	r2, [pc, #100]	; (8001dac <HAL_TIM_Base_Start_IT+0xd8>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d004      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0x80>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a18      	ldr	r2, [pc, #96]	; (8001db0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d111      	bne.n	8001d78 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b06      	cmp	r3, #6
 8001d64:	d010      	beq.n	8001d88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f042 0201 	orr.w	r2, r2, #1
 8001d74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d76:	e007      	b.n	8001d88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0201 	orr.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40010000 	.word	0x40010000
 8001d9c:	40000400 	.word	0x40000400
 8001da0:	40000800 	.word	0x40000800
 8001da4:	40000c00 	.word	0x40000c00
 8001da8:	40010400 	.word	0x40010400
 8001dac:	40014000 	.word	0x40014000
 8001db0:	40001800 	.word	0x40001800

08001db4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d020      	beq.n	8001e18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d01b      	beq.n	8001e18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f06f 0202 	mvn.w	r2, #2
 8001de8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f8d2 	bl	8001fa8 <HAL_TIM_IC_CaptureCallback>
 8001e04:	e005      	b.n	8001e12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8c4 	bl	8001f94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f8d5 	bl	8001fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d020      	beq.n	8001e64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d01b      	beq.n	8001e64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f06f 0204 	mvn.w	r2, #4
 8001e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2202      	movs	r2, #2
 8001e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f8ac 	bl	8001fa8 <HAL_TIM_IC_CaptureCallback>
 8001e50:	e005      	b.n	8001e5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f89e 	bl	8001f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f8af 	bl	8001fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d020      	beq.n	8001eb0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d01b      	beq.n	8001eb0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f06f 0208 	mvn.w	r2, #8
 8001e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2204      	movs	r2, #4
 8001e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f886 	bl	8001fa8 <HAL_TIM_IC_CaptureCallback>
 8001e9c:	e005      	b.n	8001eaa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f878 	bl	8001f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f889 	bl	8001fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	f003 0310 	and.w	r3, r3, #16
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d020      	beq.n	8001efc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d01b      	beq.n	8001efc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0210 	mvn.w	r2, #16
 8001ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2208      	movs	r2, #8
 8001ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f860 	bl	8001fa8 <HAL_TIM_IC_CaptureCallback>
 8001ee8:	e005      	b.n	8001ef6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f852 	bl	8001f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f863 	bl	8001fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00c      	beq.n	8001f20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d007      	beq.n	8001f20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f06f 0201 	mvn.w	r2, #1
 8001f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7fe fcd2 	bl	80008c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00c      	beq.n	8001f44 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d007      	beq.n	8001f44 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f906 	bl	8002150 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00c      	beq.n	8001f68 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d007      	beq.n	8001f68 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f834 	bl	8001fd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f003 0320 	and.w	r3, r3, #32
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00c      	beq.n	8001f8c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f003 0320 	and.w	r3, r3, #32
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d007      	beq.n	8001f8c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f06f 0220 	mvn.w	r2, #32
 8001f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f8d8 	bl	800213c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a46      	ldr	r2, [pc, #280]	; (8002110 <TIM_Base_SetConfig+0x12c>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d013      	beq.n	8002024 <TIM_Base_SetConfig+0x40>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002002:	d00f      	beq.n	8002024 <TIM_Base_SetConfig+0x40>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a43      	ldr	r2, [pc, #268]	; (8002114 <TIM_Base_SetConfig+0x130>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d00b      	beq.n	8002024 <TIM_Base_SetConfig+0x40>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a42      	ldr	r2, [pc, #264]	; (8002118 <TIM_Base_SetConfig+0x134>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d007      	beq.n	8002024 <TIM_Base_SetConfig+0x40>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a41      	ldr	r2, [pc, #260]	; (800211c <TIM_Base_SetConfig+0x138>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d003      	beq.n	8002024 <TIM_Base_SetConfig+0x40>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a40      	ldr	r2, [pc, #256]	; (8002120 <TIM_Base_SetConfig+0x13c>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d108      	bne.n	8002036 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800202a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	4313      	orrs	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a35      	ldr	r2, [pc, #212]	; (8002110 <TIM_Base_SetConfig+0x12c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d02b      	beq.n	8002096 <TIM_Base_SetConfig+0xb2>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002044:	d027      	beq.n	8002096 <TIM_Base_SetConfig+0xb2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a32      	ldr	r2, [pc, #200]	; (8002114 <TIM_Base_SetConfig+0x130>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d023      	beq.n	8002096 <TIM_Base_SetConfig+0xb2>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a31      	ldr	r2, [pc, #196]	; (8002118 <TIM_Base_SetConfig+0x134>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d01f      	beq.n	8002096 <TIM_Base_SetConfig+0xb2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a30      	ldr	r2, [pc, #192]	; (800211c <TIM_Base_SetConfig+0x138>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d01b      	beq.n	8002096 <TIM_Base_SetConfig+0xb2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a2f      	ldr	r2, [pc, #188]	; (8002120 <TIM_Base_SetConfig+0x13c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d017      	beq.n	8002096 <TIM_Base_SetConfig+0xb2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a2e      	ldr	r2, [pc, #184]	; (8002124 <TIM_Base_SetConfig+0x140>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d013      	beq.n	8002096 <TIM_Base_SetConfig+0xb2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a2d      	ldr	r2, [pc, #180]	; (8002128 <TIM_Base_SetConfig+0x144>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d00f      	beq.n	8002096 <TIM_Base_SetConfig+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a2c      	ldr	r2, [pc, #176]	; (800212c <TIM_Base_SetConfig+0x148>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d00b      	beq.n	8002096 <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a2b      	ldr	r2, [pc, #172]	; (8002130 <TIM_Base_SetConfig+0x14c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d007      	beq.n	8002096 <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a2a      	ldr	r2, [pc, #168]	; (8002134 <TIM_Base_SetConfig+0x150>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d003      	beq.n	8002096 <TIM_Base_SetConfig+0xb2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a29      	ldr	r2, [pc, #164]	; (8002138 <TIM_Base_SetConfig+0x154>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d108      	bne.n	80020a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800209c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a10      	ldr	r2, [pc, #64]	; (8002110 <TIM_Base_SetConfig+0x12c>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d003      	beq.n	80020dc <TIM_Base_SetConfig+0xf8>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a12      	ldr	r2, [pc, #72]	; (8002120 <TIM_Base_SetConfig+0x13c>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d103      	bne.n	80020e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d105      	bne.n	8002102 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	f023 0201 	bic.w	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	611a      	str	r2, [r3, #16]
  }
}
 8002102:	bf00      	nop
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	40010000 	.word	0x40010000
 8002114:	40000400 	.word	0x40000400
 8002118:	40000800 	.word	0x40000800
 800211c:	40000c00 	.word	0x40000c00
 8002120:	40010400 	.word	0x40010400
 8002124:	40014000 	.word	0x40014000
 8002128:	40014400 	.word	0x40014400
 800212c:	40014800 	.word	0x40014800
 8002130:	40001800 	.word	0x40001800
 8002134:	40001c00 	.word	0x40001c00
 8002138:	40002000 	.word	0x40002000

0800213c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <__NVIC_SetPriority>:
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	6039      	str	r1, [r7, #0]
 800216e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002174:	2b00      	cmp	r3, #0
 8002176:	db0a      	blt.n	800218e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	b2da      	uxtb	r2, r3
 800217c:	490c      	ldr	r1, [pc, #48]	; (80021b0 <__NVIC_SetPriority+0x4c>)
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	0112      	lsls	r2, r2, #4
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	440b      	add	r3, r1
 8002188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800218c:	e00a      	b.n	80021a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	b2da      	uxtb	r2, r3
 8002192:	4908      	ldr	r1, [pc, #32]	; (80021b4 <__NVIC_SetPriority+0x50>)
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	3b04      	subs	r3, #4
 800219c:	0112      	lsls	r2, r2, #4
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	440b      	add	r3, r1
 80021a2:	761a      	strb	r2, [r3, #24]
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000e100 	.word	0xe000e100
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80021bc:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <SysTick_Handler+0x1c>)
 80021be:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80021c0:	f002 f94c 	bl	800445c <xTaskGetSchedulerState>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d001      	beq.n	80021ce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80021ca:	f002 ff6d 	bl	80050a8 <xPortSysTickHandler>
  }
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	e000e010 	.word	0xe000e010

080021d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80021dc:	2100      	movs	r1, #0
 80021de:	f06f 0004 	mvn.w	r0, #4
 80021e2:	f7ff ffbf 	bl	8002164 <__NVIC_SetPriority>
#endif
}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021f2:	f3ef 8305 	mrs	r3, IPSR
 80021f6:	603b      	str	r3, [r7, #0]
  return(result);
 80021f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80021fe:	f06f 0305 	mvn.w	r3, #5
 8002202:	607b      	str	r3, [r7, #4]
 8002204:	e00c      	b.n	8002220 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002206:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <osKernelInitialize+0x44>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d105      	bne.n	800221a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800220e:	4b08      	ldr	r3, [pc, #32]	; (8002230 <osKernelInitialize+0x44>)
 8002210:	2201      	movs	r2, #1
 8002212:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002214:	2300      	movs	r3, #0
 8002216:	607b      	str	r3, [r7, #4]
 8002218:	e002      	b.n	8002220 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800221a:	f04f 33ff 	mov.w	r3, #4294967295
 800221e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002220:	687b      	ldr	r3, [r7, #4]
}
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	200000e8 	.word	0x200000e8

08002234 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800223a:	f3ef 8305 	mrs	r3, IPSR
 800223e:	603b      	str	r3, [r7, #0]
  return(result);
 8002240:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002246:	f06f 0305 	mvn.w	r3, #5
 800224a:	607b      	str	r3, [r7, #4]
 800224c:	e010      	b.n	8002270 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800224e:	4b0b      	ldr	r3, [pc, #44]	; (800227c <osKernelStart+0x48>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d109      	bne.n	800226a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002256:	f7ff ffbf 	bl	80021d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800225a:	4b08      	ldr	r3, [pc, #32]	; (800227c <osKernelStart+0x48>)
 800225c:	2202      	movs	r2, #2
 800225e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002260:	f001 fc02 	bl	8003a68 <vTaskStartScheduler>
      stat = osOK;
 8002264:	2300      	movs	r3, #0
 8002266:	607b      	str	r3, [r7, #4]
 8002268:	e002      	b.n	8002270 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800226a:	f04f 33ff 	mov.w	r3, #4294967295
 800226e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002270:	687b      	ldr	r3, [r7, #4]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200000e8 	.word	0x200000e8

08002280 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002280:	b580      	push	{r7, lr}
 8002282:	b08e      	sub	sp, #56	; 0x38
 8002284:	af04      	add	r7, sp, #16
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800228c:	2300      	movs	r3, #0
 800228e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002290:	f3ef 8305 	mrs	r3, IPSR
 8002294:	617b      	str	r3, [r7, #20]
  return(result);
 8002296:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002298:	2b00      	cmp	r3, #0
 800229a:	d17e      	bne.n	800239a <osThreadNew+0x11a>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d07b      	beq.n	800239a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80022a2:	2380      	movs	r3, #128	; 0x80
 80022a4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80022a6:	2318      	movs	r3, #24
 80022a8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80022ae:	f04f 33ff 	mov.w	r3, #4294967295
 80022b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d045      	beq.n	8002346 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d002      	beq.n	80022c8 <osThreadNew+0x48>
        name = attr->name;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d002      	beq.n	80022d6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d008      	beq.n	80022ee <osThreadNew+0x6e>
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	2b38      	cmp	r3, #56	; 0x38
 80022e0:	d805      	bhi.n	80022ee <osThreadNew+0x6e>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <osThreadNew+0x72>
        return (NULL);
 80022ee:	2300      	movs	r3, #0
 80022f0:	e054      	b.n	800239c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	089b      	lsrs	r3, r3, #2
 8002300:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00e      	beq.n	8002328 <osThreadNew+0xa8>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	2ba7      	cmp	r3, #167	; 0xa7
 8002310:	d90a      	bls.n	8002328 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002316:	2b00      	cmp	r3, #0
 8002318:	d006      	beq.n	8002328 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d002      	beq.n	8002328 <osThreadNew+0xa8>
        mem = 1;
 8002322:	2301      	movs	r3, #1
 8002324:	61bb      	str	r3, [r7, #24]
 8002326:	e010      	b.n	800234a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10c      	bne.n	800234a <osThreadNew+0xca>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d108      	bne.n	800234a <osThreadNew+0xca>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d104      	bne.n	800234a <osThreadNew+0xca>
          mem = 0;
 8002340:	2300      	movs	r3, #0
 8002342:	61bb      	str	r3, [r7, #24]
 8002344:	e001      	b.n	800234a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002346:	2300      	movs	r3, #0
 8002348:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d110      	bne.n	8002372 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002358:	9202      	str	r2, [sp, #8]
 800235a:	9301      	str	r3, [sp, #4]
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	6a3a      	ldr	r2, [r7, #32]
 8002364:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f001 f992 	bl	8003690 <xTaskCreateStatic>
 800236c:	4603      	mov	r3, r0
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	e013      	b.n	800239a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d110      	bne.n	800239a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002378:	6a3b      	ldr	r3, [r7, #32]
 800237a:	b29a      	uxth	r2, r3
 800237c:	f107 0310 	add.w	r3, r7, #16
 8002380:	9301      	str	r3, [sp, #4]
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f001 f9dd 	bl	800374a <xTaskCreate>
 8002390:	4603      	mov	r3, r0
 8002392:	2b01      	cmp	r3, #1
 8002394:	d001      	beq.n	800239a <osThreadNew+0x11a>
            hTask = NULL;
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800239a:	693b      	ldr	r3, [r7, #16]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3728      	adds	r7, #40	; 0x28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023ac:	f3ef 8305 	mrs	r3, IPSR
 80023b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80023b2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <osDelay+0x1c>
    stat = osErrorISR;
 80023b8:	f06f 0305 	mvn.w	r3, #5
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	e007      	b.n	80023d0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f001 fb18 	bl	8003a00 <vTaskDelay>
    }
  }

  return (stat);
 80023d0:	68fb      	ldr	r3, [r7, #12]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80023da:	b580      	push	{r7, lr}
 80023dc:	b086      	sub	sp, #24
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023e6:	f3ef 8305 	mrs	r3, IPSR
 80023ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80023ec:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d12d      	bne.n	800244e <osEventFlagsNew+0x74>
    mem = -1;
 80023f2:	f04f 33ff 	mov.w	r3, #4294967295
 80023f6:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d015      	beq.n	800242a <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d006      	beq.n	8002414 <osEventFlagsNew+0x3a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	2b1f      	cmp	r3, #31
 800240c:	d902      	bls.n	8002414 <osEventFlagsNew+0x3a>
        mem = 1;
 800240e:	2301      	movs	r3, #1
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	e00c      	b.n	800242e <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d108      	bne.n	800242e <osEventFlagsNew+0x54>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d104      	bne.n	800242e <osEventFlagsNew+0x54>
          mem = 0;
 8002424:	2300      	movs	r3, #0
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	e001      	b.n	800242e <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d106      	bne.n	8002442 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	4618      	mov	r0, r3
 800243a:	f000 f91d 	bl	8002678 <xEventGroupCreateStatic>
 800243e:	6178      	str	r0, [r7, #20]
 8002440:	e005      	b.n	800244e <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d102      	bne.n	800244e <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8002448:	f000 f94d 	bl	80026e6 <xEventGroupCreate>
 800244c:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800244e:	697b      	ldr	r3, [r7, #20]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d004      	beq.n	8002476 <osEventFlagsSet+0x1e>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8002476:	f06f 0303 	mvn.w	r3, #3
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	e028      	b.n	80024d0 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800247e:	f3ef 8305 	mrs	r3, IPSR
 8002482:	60fb      	str	r3, [r7, #12]
  return(result);
 8002484:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002486:	2b00      	cmp	r3, #0
 8002488:	d01d      	beq.n	80024c6 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800248a:	2300      	movs	r3, #0
 800248c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800248e:	f107 0308 	add.w	r3, r7, #8
 8002492:	461a      	mov	r2, r3
 8002494:	6839      	ldr	r1, [r7, #0]
 8002496:	6938      	ldr	r0, [r7, #16]
 8002498:	f000 fb46 	bl	8002b28 <xEventGroupSetBitsFromISR>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d103      	bne.n	80024aa <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80024a2:	f06f 0302 	mvn.w	r3, #2
 80024a6:	617b      	str	r3, [r7, #20]
 80024a8:	e012      	b.n	80024d0 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00d      	beq.n	80024d0 <osEventFlagsSet+0x78>
 80024b4:	4b09      	ldr	r3, [pc, #36]	; (80024dc <osEventFlagsSet+0x84>)
 80024b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	f3bf 8f4f 	dsb	sy
 80024c0:	f3bf 8f6f 	isb	sy
 80024c4:	e004      	b.n	80024d0 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80024c6:	6839      	ldr	r1, [r7, #0]
 80024c8:	6938      	ldr	r0, [r7, #16]
 80024ca:	f000 fa65 	bl	8002998 <xEventGroupSetBits>
 80024ce:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80024d0:	697b      	ldr	r3, [r7, #20]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	e000ed04 	.word	0xe000ed04

080024e0 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d004      	beq.n	80024fe <osEventFlagsClear+0x1e>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 80024fe:	f06f 0303 	mvn.w	r3, #3
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	e019      	b.n	800253a <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002506:	f3ef 8305 	mrs	r3, IPSR
 800250a:	60fb      	str	r3, [r7, #12]
  return(result);
 800250c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00e      	beq.n	8002530 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8002512:	6938      	ldr	r0, [r7, #16]
 8002514:	f000 fa1c 	bl	8002950 <xEventGroupGetBitsFromISR>
 8002518:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 800251a:	6839      	ldr	r1, [r7, #0]
 800251c:	6938      	ldr	r0, [r7, #16]
 800251e:	f000 fa03 	bl	8002928 <xEventGroupClearBitsFromISR>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d108      	bne.n	800253a <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8002528:	f06f 0302 	mvn.w	r3, #2
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	e004      	b.n	800253a <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8002530:	6839      	ldr	r1, [r7, #0]
 8002532:	6938      	ldr	r0, [r7, #16]
 8002534:	f000 f9c0 	bl	80028b8 <xEventGroupClearBits>
 8002538:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800253a:	697b      	ldr	r3, [r7, #20]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8002544:	b580      	push	{r7, lr}
 8002546:	b08c      	sub	sp, #48	; 0x30
 8002548:	af02      	add	r7, sp, #8
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
 8002550:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d004      	beq.n	8002566 <osEventFlagsWait+0x22>
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8002566:	f06f 0303 	mvn.w	r3, #3
 800256a:	61fb      	str	r3, [r7, #28]
 800256c:	e04b      	b.n	8002606 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800256e:	f3ef 8305 	mrs	r3, IPSR
 8002572:	617b      	str	r3, [r7, #20]
  return(result);
 8002574:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800257a:	f06f 0305 	mvn.w	r3, #5
 800257e:	61fb      	str	r3, [r7, #28]
 8002580:	e041      	b.n	8002606 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b00      	cmp	r3, #0
 800258a:	d002      	beq.n	8002592 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800258c:	2301      	movs	r3, #1
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
 8002590:	e001      	b.n	8002596 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8002592:	2300      	movs	r3, #0
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d002      	beq.n	80025a6 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	623b      	str	r3, [r7, #32]
 80025a4:	e001      	b.n	80025aa <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80025a6:	2301      	movs	r3, #1
 80025a8:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	6a3a      	ldr	r2, [r7, #32]
 80025b2:	68b9      	ldr	r1, [r7, #8]
 80025b4:	69b8      	ldr	r0, [r7, #24]
 80025b6:	f000 f8b1 	bl	800271c <xEventGroupWaitBits>
 80025ba:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d010      	beq.n	80025e8 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	4013      	ands	r3, r2
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d019      	beq.n	8002606 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 80025d8:	f06f 0301 	mvn.w	r3, #1
 80025dc:	61fb      	str	r3, [r7, #28]
 80025de:	e012      	b.n	8002606 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80025e0:	f06f 0302 	mvn.w	r3, #2
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	e00e      	b.n	8002606 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d109      	bne.n	8002606 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80025f8:	f06f 0301 	mvn.w	r3, #1
 80025fc:	61fb      	str	r3, [r7, #28]
 80025fe:	e002      	b.n	8002606 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8002600:	f06f 0302 	mvn.w	r3, #2
 8002604:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8002606:	69fb      	ldr	r3, [r7, #28]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3728      	adds	r7, #40	; 0x28
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4a07      	ldr	r2, [pc, #28]	; (800263c <vApplicationGetIdleTaskMemory+0x2c>)
 8002620:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	4a06      	ldr	r2, [pc, #24]	; (8002640 <vApplicationGetIdleTaskMemory+0x30>)
 8002626:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2280      	movs	r2, #128	; 0x80
 800262c:	601a      	str	r2, [r3, #0]
}
 800262e:	bf00      	nop
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	200000ec 	.word	0x200000ec
 8002640:	20000194 	.word	0x20000194

08002644 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4a07      	ldr	r2, [pc, #28]	; (8002670 <vApplicationGetTimerTaskMemory+0x2c>)
 8002654:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	4a06      	ldr	r2, [pc, #24]	; (8002674 <vApplicationGetTimerTaskMemory+0x30>)
 800265a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002662:	601a      	str	r2, [r3, #0]
}
 8002664:	bf00      	nop
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	20000394 	.word	0x20000394
 8002674:	2000043c 	.word	0x2000043c

08002678 <xEventGroupCreateStatic>:
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10a      	bne.n	800269c <xEventGroupCreateStatic+0x24>
 8002686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268a:	f383 8811 	msr	BASEPRI, r3
 800268e:	f3bf 8f6f 	isb	sy
 8002692:	f3bf 8f4f 	dsb	sy
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	bf00      	nop
 800269a:	e7fe      	b.n	800269a <xEventGroupCreateStatic+0x22>
 800269c:	2320      	movs	r3, #32
 800269e:	60bb      	str	r3, [r7, #8]
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2b20      	cmp	r3, #32
 80026a4:	d00a      	beq.n	80026bc <xEventGroupCreateStatic+0x44>
 80026a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026aa:	f383 8811 	msr	BASEPRI, r3
 80026ae:	f3bf 8f6f 	isb	sy
 80026b2:	f3bf 8f4f 	dsb	sy
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	bf00      	nop
 80026ba:	e7fe      	b.n	80026ba <xEventGroupCreateStatic+0x42>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00a      	beq.n	80026dc <xEventGroupCreateStatic+0x64>
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	3304      	adds	r3, #4
 80026d0:	4618      	mov	r0, r3
 80026d2:	f000 fa3d 	bl	8002b50 <vListInitialise>
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2201      	movs	r2, #1
 80026da:	771a      	strb	r2, [r3, #28]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	4618      	mov	r0, r3
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <xEventGroupCreate>:
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b082      	sub	sp, #8
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	2020      	movs	r0, #32
 80026ee:	f002 fd6b 	bl	80051c8 <pvPortMalloc>
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00a      	beq.n	8002710 <xEventGroupCreate+0x2a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3304      	adds	r3, #4
 8002704:	4618      	mov	r0, r3
 8002706:	f000 fa23 	bl	8002b50 <vListInitialise>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	771a      	strb	r2, [r3, #28]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
	...

0800271c <xEventGroupWaitBits>:
 800271c:	b580      	push	{r7, lr}
 800271e:	b090      	sub	sp, #64	; 0x40
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
 8002728:	603b      	str	r3, [r7, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	637b      	str	r3, [r7, #52]	; 0x34
 800272e:	2300      	movs	r3, #0
 8002730:	63bb      	str	r3, [r7, #56]	; 0x38
 8002732:	2300      	movs	r3, #0
 8002734:	633b      	str	r3, [r7, #48]	; 0x30
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10a      	bne.n	8002752 <xEventGroupWaitBits+0x36>
 800273c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002740:	f383 8811 	msr	BASEPRI, r3
 8002744:	f3bf 8f6f 	isb	sy
 8002748:	f3bf 8f4f 	dsb	sy
 800274c:	623b      	str	r3, [r7, #32]
 800274e:	bf00      	nop
 8002750:	e7fe      	b.n	8002750 <xEventGroupWaitBits+0x34>
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00a      	beq.n	8002772 <xEventGroupWaitBits+0x56>
 800275c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002760:	f383 8811 	msr	BASEPRI, r3
 8002764:	f3bf 8f6f 	isb	sy
 8002768:	f3bf 8f4f 	dsb	sy
 800276c:	61fb      	str	r3, [r7, #28]
 800276e:	bf00      	nop
 8002770:	e7fe      	b.n	8002770 <xEventGroupWaitBits+0x54>
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10a      	bne.n	800278e <xEventGroupWaitBits+0x72>
 8002778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277c:	f383 8811 	msr	BASEPRI, r3
 8002780:	f3bf 8f6f 	isb	sy
 8002784:	f3bf 8f4f 	dsb	sy
 8002788:	61bb      	str	r3, [r7, #24]
 800278a:	bf00      	nop
 800278c:	e7fe      	b.n	800278c <xEventGroupWaitBits+0x70>
 800278e:	f001 fe65 	bl	800445c <xTaskGetSchedulerState>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d102      	bne.n	800279e <xEventGroupWaitBits+0x82>
 8002798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <xEventGroupWaitBits+0x86>
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <xEventGroupWaitBits+0x88>
 80027a2:	2300      	movs	r3, #0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10a      	bne.n	80027be <xEventGroupWaitBits+0xa2>
 80027a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ac:	f383 8811 	msr	BASEPRI, r3
 80027b0:	f3bf 8f6f 	isb	sy
 80027b4:	f3bf 8f4f 	dsb	sy
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	bf00      	nop
 80027bc:	e7fe      	b.n	80027bc <xEventGroupWaitBits+0xa0>
 80027be:	f001 f9c3 	bl	8003b48 <vTaskSuspendAll>
 80027c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	68b9      	ldr	r1, [r7, #8]
 80027cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027ce:	f000 f988 	bl	8002ae2 <prvTestWaitCondition>
 80027d2:	62b8      	str	r0, [r7, #40]	; 0x28
 80027d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00e      	beq.n	80027f8 <xEventGroupWaitBits+0xdc>
 80027da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027de:	2300      	movs	r3, #0
 80027e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d028      	beq.n	800283a <xEventGroupWaitBits+0x11e>
 80027e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	43db      	mvns	r3, r3
 80027f0:	401a      	ands	r2, r3
 80027f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	e020      	b.n	800283a <xEventGroupWaitBits+0x11e>
 80027f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d104      	bne.n	8002808 <xEventGroupWaitBits+0xec>
 80027fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002800:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002802:	2301      	movs	r3, #1
 8002804:	633b      	str	r3, [r7, #48]	; 0x30
 8002806:	e018      	b.n	800283a <xEventGroupWaitBits+0x11e>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <xEventGroupWaitBits+0xfa>
 800280e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002810:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002814:	63bb      	str	r3, [r7, #56]	; 0x38
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <xEventGroupWaitBits+0x108>
 800281c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800281e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002822:	63bb      	str	r3, [r7, #56]	; 0x38
 8002824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002826:	1d18      	adds	r0, r3, #4
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800282c:	4313      	orrs	r3, r2
 800282e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002830:	4619      	mov	r1, r3
 8002832:	f001 fb87 	bl	8003f44 <vTaskPlaceOnUnorderedEventList>
 8002836:	2300      	movs	r3, #0
 8002838:	63fb      	str	r3, [r7, #60]	; 0x3c
 800283a:	f001 f993 	bl	8003b64 <xTaskResumeAll>
 800283e:	6278      	str	r0, [r7, #36]	; 0x24
 8002840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002842:	2b00      	cmp	r3, #0
 8002844:	d031      	beq.n	80028aa <xEventGroupWaitBits+0x18e>
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	2b00      	cmp	r3, #0
 800284a:	d107      	bne.n	800285c <xEventGroupWaitBits+0x140>
 800284c:	4b19      	ldr	r3, [pc, #100]	; (80028b4 <xEventGroupWaitBits+0x198>)
 800284e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	f3bf 8f4f 	dsb	sy
 8002858:	f3bf 8f6f 	isb	sy
 800285c:	f001 fe8a 	bl	8004574 <uxTaskResetEventItemValue>
 8002860:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d11a      	bne.n	80028a2 <xEventGroupWaitBits+0x186>
 800286c:	f002 fb8a 	bl	8004f84 <vPortEnterCritical>
 8002870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	68b9      	ldr	r1, [r7, #8]
 800287a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800287c:	f000 f931 	bl	8002ae2 <prvTestWaitCondition>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d009      	beq.n	800289a <xEventGroupWaitBits+0x17e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d006      	beq.n	800289a <xEventGroupWaitBits+0x17e>
 800288c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	43db      	mvns	r3, r3
 8002894:	401a      	ands	r2, r3
 8002896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	2301      	movs	r3, #1
 800289c:	633b      	str	r3, [r7, #48]	; 0x30
 800289e:	f002 fba1 	bl	8004fe4 <vPortExitCritical>
 80028a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80028a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028ac:	4618      	mov	r0, r3
 80028ae:	3740      	adds	r7, #64	; 0x40
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	e000ed04 	.word	0xe000ed04

080028b8 <xEventGroupClearBits>:
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10a      	bne.n	80028e2 <xEventGroupClearBits+0x2a>
 80028cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d0:	f383 8811 	msr	BASEPRI, r3
 80028d4:	f3bf 8f6f 	isb	sy
 80028d8:	f3bf 8f4f 	dsb	sy
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	bf00      	nop
 80028e0:	e7fe      	b.n	80028e0 <xEventGroupClearBits+0x28>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00a      	beq.n	8002902 <xEventGroupClearBits+0x4a>
 80028ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f0:	f383 8811 	msr	BASEPRI, r3
 80028f4:	f3bf 8f6f 	isb	sy
 80028f8:	f3bf 8f4f 	dsb	sy
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	bf00      	nop
 8002900:	e7fe      	b.n	8002900 <xEventGroupClearBits+0x48>
 8002902:	f002 fb3f 	bl	8004f84 <vPortEnterCritical>
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	43db      	mvns	r3, r3
 8002914:	401a      	ands	r2, r3
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	f002 fb63 	bl	8004fe4 <vPortExitCritical>
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4618      	mov	r0, r3
 8002922:	3718      	adds	r7, #24
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <xEventGroupClearBitsFromISR>:
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
 8002932:	2300      	movs	r3, #0
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	4804      	ldr	r0, [pc, #16]	; (800294c <xEventGroupClearBitsFromISR+0x24>)
 800293a:	f002 f9d5 	bl	8004ce8 <xTimerPendFunctionCallFromISR>
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	08002ac9 	.word	0x08002ac9

08002950 <xEventGroupGetBitsFromISR>:
 8002950:	b480      	push	{r7}
 8002952:	b089      	sub	sp, #36	; 0x24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	61fb      	str	r3, [r7, #28]
 800295c:	f3ef 8211 	mrs	r2, BASEPRI
 8002960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002964:	f383 8811 	msr	BASEPRI, r3
 8002968:	f3bf 8f6f 	isb	sy
 800296c:	f3bf 8f4f 	dsb	sy
 8002970:	60fa      	str	r2, [r7, #12]
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	61bb      	str	r3, [r7, #24]
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	617b      	str	r3, [r7, #20]
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	613b      	str	r3, [r7, #16]
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	f383 8811 	msr	BASEPRI, r3
 8002988:	bf00      	nop
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	4618      	mov	r0, r3
 800298e:	3724      	adds	r7, #36	; 0x24
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <xEventGroupSetBits>:
 8002998:	b580      	push	{r7, lr}
 800299a:	b08e      	sub	sp, #56	; 0x38
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
 80029a2:	2300      	movs	r3, #0
 80029a4:	633b      	str	r3, [r7, #48]	; 0x30
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80029aa:	2300      	movs	r3, #0
 80029ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10a      	bne.n	80029ca <xEventGroupSetBits+0x32>
 80029b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b8:	f383 8811 	msr	BASEPRI, r3
 80029bc:	f3bf 8f6f 	isb	sy
 80029c0:	f3bf 8f4f 	dsb	sy
 80029c4:	613b      	str	r3, [r7, #16]
 80029c6:	bf00      	nop
 80029c8:	e7fe      	b.n	80029c8 <xEventGroupSetBits+0x30>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00a      	beq.n	80029ea <xEventGroupSetBits+0x52>
 80029d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d8:	f383 8811 	msr	BASEPRI, r3
 80029dc:	f3bf 8f6f 	isb	sy
 80029e0:	f3bf 8f4f 	dsb	sy
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	bf00      	nop
 80029e8:	e7fe      	b.n	80029e8 <xEventGroupSetBits+0x50>
 80029ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ec:	3304      	adds	r3, #4
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	3308      	adds	r3, #8
 80029f4:	623b      	str	r3, [r7, #32]
 80029f6:	f001 f8a7 	bl	8003b48 <vTaskSuspendAll>
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	637b      	str	r3, [r7, #52]	; 0x34
 8002a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	431a      	orrs	r2, r3
 8002a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	e03c      	b.n	8002a88 <xEventGroupSetBits+0xf0>
 8002a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	61fb      	str	r3, [r7, #28]
 8002a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	61bb      	str	r3, [r7, #24]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002a24:	617b      	str	r3, [r7, #20]
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002a2c:	61bb      	str	r3, [r7, #24]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d108      	bne.n	8002a4a <xEventGroupSetBits+0xb2>
 8002a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00b      	beq.n	8002a5c <xEventGroupSetBits+0xc4>
 8002a44:	2301      	movs	r3, #1
 8002a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a48:	e008      	b.n	8002a5c <xEventGroupSetBits+0xc4>
 8002a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	4013      	ands	r3, r2
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d101      	bne.n	8002a5c <xEventGroupSetBits+0xc4>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d010      	beq.n	8002a84 <xEventGroupSetBits+0xec>
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <xEventGroupSetBits+0xdc>
 8002a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	633b      	str	r3, [r7, #48]	; 0x30
 8002a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002a80:	f001 fb2c 	bl	80040dc <vTaskRemoveFromUnorderedEventList>
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	637b      	str	r3, [r7, #52]	; 0x34
 8002a88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d1be      	bne.n	8002a0e <xEventGroupSetBits+0x76>
 8002a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a96:	43db      	mvns	r3, r3
 8002a98:	401a      	ands	r2, r3
 8002a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	f001 f861 	bl	8003b64 <xTaskResumeAll>
 8002aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3738      	adds	r7, #56	; 0x38
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <vEventGroupSetBitsCallback>:
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	6039      	str	r1, [r7, #0]
 8002ab8:	6839      	ldr	r1, [r7, #0]
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7ff ff6c 	bl	8002998 <xEventGroupSetBits>
 8002ac0:	bf00      	nop
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <vEventGroupClearBitsCallback>:
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
 8002ad2:	6839      	ldr	r1, [r7, #0]
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff feef 	bl	80028b8 <xEventGroupClearBits>
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <prvTestWaitCondition>:
 8002ae2:	b480      	push	{r7}
 8002ae4:	b087      	sub	sp, #28
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
 8002aee:	2300      	movs	r3, #0
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d107      	bne.n	8002b08 <prvTestWaitCondition+0x26>
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	4013      	ands	r3, r2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00a      	beq.n	8002b18 <prvTestWaitCondition+0x36>
 8002b02:	2301      	movs	r3, #1
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	e007      	b.n	8002b18 <prvTestWaitCondition+0x36>
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d101      	bne.n	8002b18 <prvTestWaitCondition+0x36>
 8002b14:	2301      	movs	r3, #1
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	371c      	adds	r7, #28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
	...

08002b28 <xEventGroupSetBitsFromISR>:
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	68f9      	ldr	r1, [r7, #12]
 8002b3a:	4804      	ldr	r0, [pc, #16]	; (8002b4c <xEventGroupSetBitsFromISR+0x24>)
 8002b3c:	f002 f8d4 	bl	8004ce8 <xTimerPendFunctionCallFromISR>
 8002b40:	6178      	str	r0, [r7, #20]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	08002aaf 	.word	0x08002aaf

08002b50 <vListInitialise>:
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f103 0208 	add.w	r2, r3, #8
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f04f 32ff 	mov.w	r2, #4294967295
 8002b68:	609a      	str	r2, [r3, #8]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f103 0208 	add.w	r2, r3, #8
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	60da      	str	r2, [r3, #12]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f103 0208 	add.w	r2, r3, #8
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	611a      	str	r2, [r3, #16]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <vListInitialiseItem>:
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	611a      	str	r2, [r3, #16]
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <vListInsertEnd>:
 8002baa:	b480      	push	{r7}
 8002bac:	b085      	sub	sp, #20
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	6039      	str	r1, [r7, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	605a      	str	r2, [r3, #4]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	605a      	str	r2, [r3, #4]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	609a      	str	r2, [r3, #8]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	611a      	str	r2, [r3, #16]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	bf00      	nop
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <vListInsert>:
 8002bf2:	b480      	push	{r7}
 8002bf4:	b085      	sub	sp, #20
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
 8002bfa:	6039      	str	r1, [r7, #0]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c08:	d103      	bne.n	8002c12 <vListInsert+0x20>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	e00c      	b.n	8002c2c <vListInsert+0x3a>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3308      	adds	r3, #8
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	e002      	b.n	8002c20 <vListInsert+0x2e>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d2f6      	bcs.n	8002c1a <vListInsert+0x28>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	605a      	str	r2, [r3, #4]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	609a      	str	r2, [r3, #8]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	609a      	str	r2, [r3, #8]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	605a      	str	r2, [r3, #4]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	611a      	str	r2, [r3, #16]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	bf00      	nop
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <uxListRemove>:
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6892      	ldr	r2, [r2, #8]
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6852      	ldr	r2, [r2, #4]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d103      	bne.n	8002c98 <uxListRemove+0x34>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	605a      	str	r2, [r3, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	611a      	str	r2, [r3, #16]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	1e5a      	subs	r2, r3, #1
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <xQueueGenericReset>:
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10a      	bne.n	8002ce2 <xQueueGenericReset+0x2a>
 8002ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd0:	f383 8811 	msr	BASEPRI, r3
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	60bb      	str	r3, [r7, #8]
 8002cde:	bf00      	nop
 8002ce0:	e7fe      	b.n	8002ce0 <xQueueGenericReset+0x28>
 8002ce2:	f002 f94f 	bl	8004f84 <vPortEnterCritical>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cee:	68f9      	ldr	r1, [r7, #12]
 8002cf0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002cf2:	fb01 f303 	mul.w	r3, r1, r3
 8002cf6:	441a      	add	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	639a      	str	r2, [r3, #56]	; 0x38
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d12:	3b01      	subs	r3, #1
 8002d14:	68f9      	ldr	r1, [r7, #12]
 8002d16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d18:	fb01 f303 	mul.w	r3, r1, r3
 8002d1c:	441a      	add	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	60da      	str	r2, [r3, #12]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	22ff      	movs	r2, #255	; 0xff
 8002d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	22ff      	movs	r2, #255	; 0xff
 8002d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d114      	bne.n	8002d62 <xQueueGenericReset+0xaa>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d01a      	beq.n	8002d76 <xQueueGenericReset+0xbe>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	3310      	adds	r3, #16
 8002d44:	4618      	mov	r0, r3
 8002d46:	f001 f965 	bl	8004014 <xTaskRemoveFromEventList>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d012      	beq.n	8002d76 <xQueueGenericReset+0xbe>
 8002d50:	4b0c      	ldr	r3, [pc, #48]	; (8002d84 <xQueueGenericReset+0xcc>)
 8002d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	f3bf 8f6f 	isb	sy
 8002d60:	e009      	b.n	8002d76 <xQueueGenericReset+0xbe>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	3310      	adds	r3, #16
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff fef2 	bl	8002b50 <vListInitialise>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	3324      	adds	r3, #36	; 0x24
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff feed 	bl	8002b50 <vListInitialise>
 8002d76:	f002 f935 	bl	8004fe4 <vPortExitCritical>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	e000ed04 	.word	0xe000ed04

08002d88 <xQueueGenericCreateStatic>:
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08e      	sub	sp, #56	; 0x38
 8002d8c:	af02      	add	r7, sp, #8
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
 8002d94:	603b      	str	r3, [r7, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10a      	bne.n	8002db2 <xQueueGenericCreateStatic+0x2a>
 8002d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da0:	f383 8811 	msr	BASEPRI, r3
 8002da4:	f3bf 8f6f 	isb	sy
 8002da8:	f3bf 8f4f 	dsb	sy
 8002dac:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dae:	bf00      	nop
 8002db0:	e7fe      	b.n	8002db0 <xQueueGenericCreateStatic+0x28>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10a      	bne.n	8002dce <xQueueGenericCreateStatic+0x46>
 8002db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dbc:	f383 8811 	msr	BASEPRI, r3
 8002dc0:	f3bf 8f6f 	isb	sy
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dca:	bf00      	nop
 8002dcc:	e7fe      	b.n	8002dcc <xQueueGenericCreateStatic+0x44>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <xQueueGenericCreateStatic+0x52>
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <xQueueGenericCreateStatic+0x56>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e000      	b.n	8002de0 <xQueueGenericCreateStatic+0x58>
 8002dde:	2300      	movs	r3, #0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10a      	bne.n	8002dfa <xQueueGenericCreateStatic+0x72>
 8002de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de8:	f383 8811 	msr	BASEPRI, r3
 8002dec:	f3bf 8f6f 	isb	sy
 8002df0:	f3bf 8f4f 	dsb	sy
 8002df4:	623b      	str	r3, [r7, #32]
 8002df6:	bf00      	nop
 8002df8:	e7fe      	b.n	8002df8 <xQueueGenericCreateStatic+0x70>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d102      	bne.n	8002e06 <xQueueGenericCreateStatic+0x7e>
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <xQueueGenericCreateStatic+0x82>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <xQueueGenericCreateStatic+0x84>
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10a      	bne.n	8002e26 <xQueueGenericCreateStatic+0x9e>
 8002e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e14:	f383 8811 	msr	BASEPRI, r3
 8002e18:	f3bf 8f6f 	isb	sy
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	61fb      	str	r3, [r7, #28]
 8002e22:	bf00      	nop
 8002e24:	e7fe      	b.n	8002e24 <xQueueGenericCreateStatic+0x9c>
 8002e26:	2350      	movs	r3, #80	; 0x50
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2b50      	cmp	r3, #80	; 0x50
 8002e2e:	d00a      	beq.n	8002e46 <xQueueGenericCreateStatic+0xbe>
 8002e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e34:	f383 8811 	msr	BASEPRI, r3
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	61bb      	str	r3, [r7, #24]
 8002e42:	bf00      	nop
 8002e44:	e7fe      	b.n	8002e44 <xQueueGenericCreateStatic+0xbc>
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00d      	beq.n	8002e6e <xQueueGenericCreateStatic+0xe6>
 8002e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	4613      	mov	r3, r2
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	68b9      	ldr	r1, [r7, #8]
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 f805 	bl	8002e78 <prvInitialiseNewQueue>
 8002e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e70:	4618      	mov	r0, r3
 8002e72:	3730      	adds	r7, #48	; 0x30
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <prvInitialiseNewQueue>:
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	70fb      	strb	r3, [r7, #3]
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d103      	bne.n	8002e94 <prvInitialiseNewQueue+0x1c>
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	e002      	b.n	8002e9a <prvInitialiseNewQueue+0x22>
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	641a      	str	r2, [r3, #64]	; 0x40
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	69b8      	ldr	r0, [r7, #24]
 8002eaa:	f7ff ff05 	bl	8002cb8 <xQueueGenericReset>
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	78fa      	ldrb	r2, [r7, #3]
 8002eb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8002eb6:	bf00      	nop
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <xQueueGenericSend>:
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08e      	sub	sp, #56	; 0x38
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
 8002ecc:	603b      	str	r3, [r7, #0]
 8002ece:	2300      	movs	r3, #0
 8002ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	633b      	str	r3, [r7, #48]	; 0x30
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10a      	bne.n	8002ef2 <xQueueGenericSend+0x32>
 8002edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee0:	f383 8811 	msr	BASEPRI, r3
 8002ee4:	f3bf 8f6f 	isb	sy
 8002ee8:	f3bf 8f4f 	dsb	sy
 8002eec:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eee:	bf00      	nop
 8002ef0:	e7fe      	b.n	8002ef0 <xQueueGenericSend+0x30>
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d103      	bne.n	8002f00 <xQueueGenericSend+0x40>
 8002ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <xQueueGenericSend+0x44>
 8002f00:	2301      	movs	r3, #1
 8002f02:	e000      	b.n	8002f06 <xQueueGenericSend+0x46>
 8002f04:	2300      	movs	r3, #0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10a      	bne.n	8002f20 <xQueueGenericSend+0x60>
 8002f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0e:	f383 8811 	msr	BASEPRI, r3
 8002f12:	f3bf 8f6f 	isb	sy
 8002f16:	f3bf 8f4f 	dsb	sy
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1c:	bf00      	nop
 8002f1e:	e7fe      	b.n	8002f1e <xQueueGenericSend+0x5e>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d103      	bne.n	8002f2e <xQueueGenericSend+0x6e>
 8002f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <xQueueGenericSend+0x72>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <xQueueGenericSend+0x74>
 8002f32:	2300      	movs	r3, #0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10a      	bne.n	8002f4e <xQueueGenericSend+0x8e>
 8002f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3c:	f383 8811 	msr	BASEPRI, r3
 8002f40:	f3bf 8f6f 	isb	sy
 8002f44:	f3bf 8f4f 	dsb	sy
 8002f48:	623b      	str	r3, [r7, #32]
 8002f4a:	bf00      	nop
 8002f4c:	e7fe      	b.n	8002f4c <xQueueGenericSend+0x8c>
 8002f4e:	f001 fa85 	bl	800445c <xTaskGetSchedulerState>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d102      	bne.n	8002f5e <xQueueGenericSend+0x9e>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <xQueueGenericSend+0xa2>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <xQueueGenericSend+0xa4>
 8002f62:	2300      	movs	r3, #0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10a      	bne.n	8002f7e <xQueueGenericSend+0xbe>
 8002f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6c:	f383 8811 	msr	BASEPRI, r3
 8002f70:	f3bf 8f6f 	isb	sy
 8002f74:	f3bf 8f4f 	dsb	sy
 8002f78:	61fb      	str	r3, [r7, #28]
 8002f7a:	bf00      	nop
 8002f7c:	e7fe      	b.n	8002f7c <xQueueGenericSend+0xbc>
 8002f7e:	f002 f801 	bl	8004f84 <vPortEnterCritical>
 8002f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d302      	bcc.n	8002f94 <xQueueGenericSend+0xd4>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d129      	bne.n	8002fe8 <xQueueGenericSend+0x128>
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	68b9      	ldr	r1, [r7, #8]
 8002f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f9a:	f000 fa0b 	bl	80033b4 <prvCopyDataToQueue>
 8002f9e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d010      	beq.n	8002fca <xQueueGenericSend+0x10a>
 8002fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002faa:	3324      	adds	r3, #36	; 0x24
 8002fac:	4618      	mov	r0, r3
 8002fae:	f001 f831 	bl	8004014 <xTaskRemoveFromEventList>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d013      	beq.n	8002fe0 <xQueueGenericSend+0x120>
 8002fb8:	4b3f      	ldr	r3, [pc, #252]	; (80030b8 <xQueueGenericSend+0x1f8>)
 8002fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	f3bf 8f4f 	dsb	sy
 8002fc4:	f3bf 8f6f 	isb	sy
 8002fc8:	e00a      	b.n	8002fe0 <xQueueGenericSend+0x120>
 8002fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d007      	beq.n	8002fe0 <xQueueGenericSend+0x120>
 8002fd0:	4b39      	ldr	r3, [pc, #228]	; (80030b8 <xQueueGenericSend+0x1f8>)
 8002fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	f3bf 8f4f 	dsb	sy
 8002fdc:	f3bf 8f6f 	isb	sy
 8002fe0:	f002 f800 	bl	8004fe4 <vPortExitCritical>
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e063      	b.n	80030b0 <xQueueGenericSend+0x1f0>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d103      	bne.n	8002ff6 <xQueueGenericSend+0x136>
 8002fee:	f001 fff9 	bl	8004fe4 <vPortExitCritical>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	e05c      	b.n	80030b0 <xQueueGenericSend+0x1f0>
 8002ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d106      	bne.n	800300a <xQueueGenericSend+0x14a>
 8002ffc:	f107 0314 	add.w	r3, r7, #20
 8003000:	4618      	mov	r0, r3
 8003002:	f001 f8cd 	bl	80041a0 <vTaskInternalSetTimeOutState>
 8003006:	2301      	movs	r3, #1
 8003008:	637b      	str	r3, [r7, #52]	; 0x34
 800300a:	f001 ffeb 	bl	8004fe4 <vPortExitCritical>
 800300e:	f000 fd9b 	bl	8003b48 <vTaskSuspendAll>
 8003012:	f001 ffb7 	bl	8004f84 <vPortEnterCritical>
 8003016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003018:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800301c:	b25b      	sxtb	r3, r3
 800301e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003022:	d103      	bne.n	800302c <xQueueGenericSend+0x16c>
 8003024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003026:	2200      	movs	r2, #0
 8003028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800302c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003032:	b25b      	sxtb	r3, r3
 8003034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003038:	d103      	bne.n	8003042 <xQueueGenericSend+0x182>
 800303a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003042:	f001 ffcf 	bl	8004fe4 <vPortExitCritical>
 8003046:	1d3a      	adds	r2, r7, #4
 8003048:	f107 0314 	add.w	r3, r7, #20
 800304c:	4611      	mov	r1, r2
 800304e:	4618      	mov	r0, r3
 8003050:	f001 f8bc 	bl	80041cc <xTaskCheckForTimeOut>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d124      	bne.n	80030a4 <xQueueGenericSend+0x1e4>
 800305a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800305c:	f000 faa2 	bl	80035a4 <prvIsQueueFull>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d018      	beq.n	8003098 <xQueueGenericSend+0x1d8>
 8003066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003068:	3310      	adds	r3, #16
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	4611      	mov	r1, r2
 800306e:	4618      	mov	r0, r3
 8003070:	f000 ff44 	bl	8003efc <vTaskPlaceOnEventList>
 8003074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003076:	f000 fa2d 	bl	80034d4 <prvUnlockQueue>
 800307a:	f000 fd73 	bl	8003b64 <xTaskResumeAll>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	f47f af7c 	bne.w	8002f7e <xQueueGenericSend+0xbe>
 8003086:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <xQueueGenericSend+0x1f8>)
 8003088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	f3bf 8f4f 	dsb	sy
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	e772      	b.n	8002f7e <xQueueGenericSend+0xbe>
 8003098:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800309a:	f000 fa1b 	bl	80034d4 <prvUnlockQueue>
 800309e:	f000 fd61 	bl	8003b64 <xTaskResumeAll>
 80030a2:	e76c      	b.n	8002f7e <xQueueGenericSend+0xbe>
 80030a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030a6:	f000 fa15 	bl	80034d4 <prvUnlockQueue>
 80030aa:	f000 fd5b 	bl	8003b64 <xTaskResumeAll>
 80030ae:	2300      	movs	r3, #0
 80030b0:	4618      	mov	r0, r3
 80030b2:	3738      	adds	r7, #56	; 0x38
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	e000ed04 	.word	0xe000ed04

080030bc <xQueueGenericSendFromISR>:
 80030bc:	b580      	push	{r7, lr}
 80030be:	b090      	sub	sp, #64	; 0x40
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
 80030c8:	603b      	str	r3, [r7, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80030ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10a      	bne.n	80030ea <xQueueGenericSendFromISR+0x2e>
 80030d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d8:	f383 8811 	msr	BASEPRI, r3
 80030dc:	f3bf 8f6f 	isb	sy
 80030e0:	f3bf 8f4f 	dsb	sy
 80030e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80030e6:	bf00      	nop
 80030e8:	e7fe      	b.n	80030e8 <xQueueGenericSendFromISR+0x2c>
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d103      	bne.n	80030f8 <xQueueGenericSendFromISR+0x3c>
 80030f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <xQueueGenericSendFromISR+0x40>
 80030f8:	2301      	movs	r3, #1
 80030fa:	e000      	b.n	80030fe <xQueueGenericSendFromISR+0x42>
 80030fc:	2300      	movs	r3, #0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10a      	bne.n	8003118 <xQueueGenericSendFromISR+0x5c>
 8003102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003106:	f383 8811 	msr	BASEPRI, r3
 800310a:	f3bf 8f6f 	isb	sy
 800310e:	f3bf 8f4f 	dsb	sy
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
 8003114:	bf00      	nop
 8003116:	e7fe      	b.n	8003116 <xQueueGenericSendFromISR+0x5a>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	2b02      	cmp	r3, #2
 800311c:	d103      	bne.n	8003126 <xQueueGenericSendFromISR+0x6a>
 800311e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003122:	2b01      	cmp	r3, #1
 8003124:	d101      	bne.n	800312a <xQueueGenericSendFromISR+0x6e>
 8003126:	2301      	movs	r3, #1
 8003128:	e000      	b.n	800312c <xQueueGenericSendFromISR+0x70>
 800312a:	2300      	movs	r3, #0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10a      	bne.n	8003146 <xQueueGenericSendFromISR+0x8a>
 8003130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003134:	f383 8811 	msr	BASEPRI, r3
 8003138:	f3bf 8f6f 	isb	sy
 800313c:	f3bf 8f4f 	dsb	sy
 8003140:	623b      	str	r3, [r7, #32]
 8003142:	bf00      	nop
 8003144:	e7fe      	b.n	8003144 <xQueueGenericSendFromISR+0x88>
 8003146:	f001 ffff 	bl	8005148 <vPortValidateInterruptPriority>
 800314a:	f3ef 8211 	mrs	r2, BASEPRI
 800314e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003152:	f383 8811 	msr	BASEPRI, r3
 8003156:	f3bf 8f6f 	isb	sy
 800315a:	f3bf 8f4f 	dsb	sy
 800315e:	61fa      	str	r2, [r7, #28]
 8003160:	61bb      	str	r3, [r7, #24]
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	637b      	str	r3, [r7, #52]	; 0x34
 8003166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800316a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316e:	429a      	cmp	r2, r3
 8003170:	d302      	bcc.n	8003178 <xQueueGenericSendFromISR+0xbc>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b02      	cmp	r3, #2
 8003176:	d12f      	bne.n	80031d8 <xQueueGenericSendFromISR+0x11c>
 8003178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800317e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003186:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	68b9      	ldr	r1, [r7, #8]
 800318c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800318e:	f000 f911 	bl	80033b4 <prvCopyDataToQueue>
 8003192:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319a:	d112      	bne.n	80031c2 <xQueueGenericSendFromISR+0x106>
 800319c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d016      	beq.n	80031d2 <xQueueGenericSendFromISR+0x116>
 80031a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a6:	3324      	adds	r3, #36	; 0x24
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 ff33 	bl	8004014 <xTaskRemoveFromEventList>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00e      	beq.n	80031d2 <xQueueGenericSendFromISR+0x116>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00b      	beq.n	80031d2 <xQueueGenericSendFromISR+0x116>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	e007      	b.n	80031d2 <xQueueGenericSendFromISR+0x116>
 80031c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80031c6:	3301      	adds	r3, #1
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	b25a      	sxtb	r2, r3
 80031cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031d2:	2301      	movs	r3, #1
 80031d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031d6:	e001      	b.n	80031dc <xQueueGenericSendFromISR+0x120>
 80031d8:	2300      	movs	r3, #0
 80031da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f383 8811 	msr	BASEPRI, r3
 80031e6:	bf00      	nop
 80031e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ea:	4618      	mov	r0, r3
 80031ec:	3740      	adds	r7, #64	; 0x40
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <xQueueReceive>:
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08c      	sub	sp, #48	; 0x30
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	2300      	movs	r3, #0
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	62bb      	str	r3, [r7, #40]	; 0x28
 8003208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10a      	bne.n	8003224 <xQueueReceive+0x30>
 800320e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003212:	f383 8811 	msr	BASEPRI, r3
 8003216:	f3bf 8f6f 	isb	sy
 800321a:	f3bf 8f4f 	dsb	sy
 800321e:	623b      	str	r3, [r7, #32]
 8003220:	bf00      	nop
 8003222:	e7fe      	b.n	8003222 <xQueueReceive+0x2e>
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d103      	bne.n	8003232 <xQueueReceive+0x3e>
 800322a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <xQueueReceive+0x42>
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <xQueueReceive+0x44>
 8003236:	2300      	movs	r3, #0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10a      	bne.n	8003252 <xQueueReceive+0x5e>
 800323c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003240:	f383 8811 	msr	BASEPRI, r3
 8003244:	f3bf 8f6f 	isb	sy
 8003248:	f3bf 8f4f 	dsb	sy
 800324c:	61fb      	str	r3, [r7, #28]
 800324e:	bf00      	nop
 8003250:	e7fe      	b.n	8003250 <xQueueReceive+0x5c>
 8003252:	f001 f903 	bl	800445c <xTaskGetSchedulerState>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d102      	bne.n	8003262 <xQueueReceive+0x6e>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <xQueueReceive+0x72>
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <xQueueReceive+0x74>
 8003266:	2300      	movs	r3, #0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10a      	bne.n	8003282 <xQueueReceive+0x8e>
 800326c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003270:	f383 8811 	msr	BASEPRI, r3
 8003274:	f3bf 8f6f 	isb	sy
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	61bb      	str	r3, [r7, #24]
 800327e:	bf00      	nop
 8003280:	e7fe      	b.n	8003280 <xQueueReceive+0x8c>
 8003282:	f001 fe7f 	bl	8004f84 <vPortEnterCritical>
 8003286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	2b00      	cmp	r3, #0
 8003290:	d01f      	beq.n	80032d2 <xQueueReceive+0xde>
 8003292:	68b9      	ldr	r1, [r7, #8]
 8003294:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003296:	f000 f8f7 	bl	8003488 <prvCopyDataFromQueue>
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	1e5a      	subs	r2, r3, #1
 800329e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a0:	639a      	str	r2, [r3, #56]	; 0x38
 80032a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00f      	beq.n	80032ca <xQueueReceive+0xd6>
 80032aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ac:	3310      	adds	r3, #16
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 feb0 	bl	8004014 <xTaskRemoveFromEventList>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d007      	beq.n	80032ca <xQueueReceive+0xd6>
 80032ba:	4b3d      	ldr	r3, [pc, #244]	; (80033b0 <xQueueReceive+0x1bc>)
 80032bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	f3bf 8f4f 	dsb	sy
 80032c6:	f3bf 8f6f 	isb	sy
 80032ca:	f001 fe8b 	bl	8004fe4 <vPortExitCritical>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e069      	b.n	80033a6 <xQueueReceive+0x1b2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d103      	bne.n	80032e0 <xQueueReceive+0xec>
 80032d8:	f001 fe84 	bl	8004fe4 <vPortExitCritical>
 80032dc:	2300      	movs	r3, #0
 80032de:	e062      	b.n	80033a6 <xQueueReceive+0x1b2>
 80032e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d106      	bne.n	80032f4 <xQueueReceive+0x100>
 80032e6:	f107 0310 	add.w	r3, r7, #16
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 ff58 	bl	80041a0 <vTaskInternalSetTimeOutState>
 80032f0:	2301      	movs	r3, #1
 80032f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032f4:	f001 fe76 	bl	8004fe4 <vPortExitCritical>
 80032f8:	f000 fc26 	bl	8003b48 <vTaskSuspendAll>
 80032fc:	f001 fe42 	bl	8004f84 <vPortEnterCritical>
 8003300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003302:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003306:	b25b      	sxtb	r3, r3
 8003308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330c:	d103      	bne.n	8003316 <xQueueReceive+0x122>
 800330e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003318:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800331c:	b25b      	sxtb	r3, r3
 800331e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003322:	d103      	bne.n	800332c <xQueueReceive+0x138>
 8003324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800332c:	f001 fe5a 	bl	8004fe4 <vPortExitCritical>
 8003330:	1d3a      	adds	r2, r7, #4
 8003332:	f107 0310 	add.w	r3, r7, #16
 8003336:	4611      	mov	r1, r2
 8003338:	4618      	mov	r0, r3
 800333a:	f000 ff47 	bl	80041cc <xTaskCheckForTimeOut>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d123      	bne.n	800338c <xQueueReceive+0x198>
 8003344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003346:	f000 f917 	bl	8003578 <prvIsQueueEmpty>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d017      	beq.n	8003380 <xQueueReceive+0x18c>
 8003350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003352:	3324      	adds	r3, #36	; 0x24
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	4611      	mov	r1, r2
 8003358:	4618      	mov	r0, r3
 800335a:	f000 fdcf 	bl	8003efc <vTaskPlaceOnEventList>
 800335e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003360:	f000 f8b8 	bl	80034d4 <prvUnlockQueue>
 8003364:	f000 fbfe 	bl	8003b64 <xTaskResumeAll>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d189      	bne.n	8003282 <xQueueReceive+0x8e>
 800336e:	4b10      	ldr	r3, [pc, #64]	; (80033b0 <xQueueReceive+0x1bc>)
 8003370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	f3bf 8f4f 	dsb	sy
 800337a:	f3bf 8f6f 	isb	sy
 800337e:	e780      	b.n	8003282 <xQueueReceive+0x8e>
 8003380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003382:	f000 f8a7 	bl	80034d4 <prvUnlockQueue>
 8003386:	f000 fbed 	bl	8003b64 <xTaskResumeAll>
 800338a:	e77a      	b.n	8003282 <xQueueReceive+0x8e>
 800338c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800338e:	f000 f8a1 	bl	80034d4 <prvUnlockQueue>
 8003392:	f000 fbe7 	bl	8003b64 <xTaskResumeAll>
 8003396:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003398:	f000 f8ee 	bl	8003578 <prvIsQueueEmpty>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f43f af6f 	beq.w	8003282 <xQueueReceive+0x8e>
 80033a4:	2300      	movs	r3, #0
 80033a6:	4618      	mov	r0, r3
 80033a8:	3730      	adds	r7, #48	; 0x30
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	e000ed04 	.word	0xe000ed04

080033b4 <prvCopyDataToQueue>:
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
 80033c0:	2300      	movs	r3, #0
 80033c2:	617b      	str	r3, [r7, #20]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c8:	613b      	str	r3, [r7, #16]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10d      	bne.n	80033ee <prvCopyDataToQueue+0x3a>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d14d      	bne.n	8003476 <prvCopyDataToQueue+0xc2>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	4618      	mov	r0, r3
 80033e0:	f001 f85a 	bl	8004498 <xTaskPriorityDisinherit>
 80033e4:	6178      	str	r0, [r7, #20]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	609a      	str	r2, [r3, #8]
 80033ec:	e043      	b.n	8003476 <prvCopyDataToQueue+0xc2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d119      	bne.n	8003428 <prvCopyDataToQueue+0x74>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6858      	ldr	r0, [r3, #4]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	461a      	mov	r2, r3
 80033fe:	68b9      	ldr	r1, [r7, #8]
 8003400:	f002 fab5 	bl	800596e <memcpy>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	441a      	add	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	429a      	cmp	r2, r3
 800341c:	d32b      	bcc.n	8003476 <prvCopyDataToQueue+0xc2>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	605a      	str	r2, [r3, #4]
 8003426:	e026      	b.n	8003476 <prvCopyDataToQueue+0xc2>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	68d8      	ldr	r0, [r3, #12]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	461a      	mov	r2, r3
 8003432:	68b9      	ldr	r1, [r7, #8]
 8003434:	f002 fa9b 	bl	800596e <memcpy>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	68da      	ldr	r2, [r3, #12]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	425b      	negs	r3, r3
 8003442:	441a      	add	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	60da      	str	r2, [r3, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d207      	bcs.n	8003464 <prvCopyDataToQueue+0xb0>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	425b      	negs	r3, r3
 800345e:	441a      	add	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	60da      	str	r2, [r3, #12]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d105      	bne.n	8003476 <prvCopyDataToQueue+0xc2>
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d002      	beq.n	8003476 <prvCopyDataToQueue+0xc2>
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	3b01      	subs	r3, #1
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1c5a      	adds	r2, r3, #1
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	639a      	str	r2, [r3, #56]	; 0x38
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	4618      	mov	r0, r3
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <prvCopyDataFromQueue>:
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	2b00      	cmp	r3, #0
 8003498:	d018      	beq.n	80034cc <prvCopyDataFromQueue+0x44>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	441a      	add	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	60da      	str	r2, [r3, #12]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68da      	ldr	r2, [r3, #12]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d303      	bcc.n	80034bc <prvCopyDataFromQueue+0x34>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	60da      	str	r2, [r3, #12]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68d9      	ldr	r1, [r3, #12]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	461a      	mov	r2, r3
 80034c6:	6838      	ldr	r0, [r7, #0]
 80034c8:	f002 fa51 	bl	800596e <memcpy>
 80034cc:	bf00      	nop
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <prvUnlockQueue>:
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	f001 fd52 	bl	8004f84 <vPortEnterCritical>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034e6:	73fb      	strb	r3, [r7, #15]
 80034e8:	e011      	b.n	800350e <prvUnlockQueue+0x3a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d012      	beq.n	8003518 <prvUnlockQueue+0x44>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3324      	adds	r3, #36	; 0x24
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 fd8c 	bl	8004014 <xTaskRemoveFromEventList>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <prvUnlockQueue+0x32>
 8003502:	f000 fec5 	bl	8004290 <vTaskMissedYield>
 8003506:	7bfb      	ldrb	r3, [r7, #15]
 8003508:	3b01      	subs	r3, #1
 800350a:	b2db      	uxtb	r3, r3
 800350c:	73fb      	strb	r3, [r7, #15]
 800350e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003512:	2b00      	cmp	r3, #0
 8003514:	dce9      	bgt.n	80034ea <prvUnlockQueue+0x16>
 8003516:	e000      	b.n	800351a <prvUnlockQueue+0x46>
 8003518:	bf00      	nop
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	22ff      	movs	r2, #255	; 0xff
 800351e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003522:	f001 fd5f 	bl	8004fe4 <vPortExitCritical>
 8003526:	f001 fd2d 	bl	8004f84 <vPortEnterCritical>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003530:	73bb      	strb	r3, [r7, #14]
 8003532:	e011      	b.n	8003558 <prvUnlockQueue+0x84>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d012      	beq.n	8003562 <prvUnlockQueue+0x8e>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3310      	adds	r3, #16
 8003540:	4618      	mov	r0, r3
 8003542:	f000 fd67 	bl	8004014 <xTaskRemoveFromEventList>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <prvUnlockQueue+0x7c>
 800354c:	f000 fea0 	bl	8004290 <vTaskMissedYield>
 8003550:	7bbb      	ldrb	r3, [r7, #14]
 8003552:	3b01      	subs	r3, #1
 8003554:	b2db      	uxtb	r3, r3
 8003556:	73bb      	strb	r3, [r7, #14]
 8003558:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800355c:	2b00      	cmp	r3, #0
 800355e:	dce9      	bgt.n	8003534 <prvUnlockQueue+0x60>
 8003560:	e000      	b.n	8003564 <prvUnlockQueue+0x90>
 8003562:	bf00      	nop
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	22ff      	movs	r2, #255	; 0xff
 8003568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800356c:	f001 fd3a 	bl	8004fe4 <vPortExitCritical>
 8003570:	bf00      	nop
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <prvIsQueueEmpty>:
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	f001 fd00 	bl	8004f84 <vPortEnterCritical>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003588:	2b00      	cmp	r3, #0
 800358a:	d102      	bne.n	8003592 <prvIsQueueEmpty+0x1a>
 800358c:	2301      	movs	r3, #1
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	e001      	b.n	8003596 <prvIsQueueEmpty+0x1e>
 8003592:	2300      	movs	r3, #0
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	f001 fd25 	bl	8004fe4 <vPortExitCritical>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <prvIsQueueFull>:
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	f001 fcea 	bl	8004f84 <vPortEnterCritical>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d102      	bne.n	80035c2 <prvIsQueueFull+0x1e>
 80035bc:	2301      	movs	r3, #1
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	e001      	b.n	80035c6 <prvIsQueueFull+0x22>
 80035c2:	2300      	movs	r3, #0
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	f001 fd0d 	bl	8004fe4 <vPortExitCritical>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <vQueueAddToRegistry>:
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
 80035de:	2300      	movs	r3, #0
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	e014      	b.n	800360e <vQueueAddToRegistry+0x3a>
 80035e4:	4a0f      	ldr	r2, [pc, #60]	; (8003624 <vQueueAddToRegistry+0x50>)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10b      	bne.n	8003608 <vQueueAddToRegistry+0x34>
 80035f0:	490c      	ldr	r1, [pc, #48]	; (8003624 <vQueueAddToRegistry+0x50>)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80035fa:	4a0a      	ldr	r2, [pc, #40]	; (8003624 <vQueueAddToRegistry+0x50>)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	4413      	add	r3, r2
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	605a      	str	r2, [r3, #4]
 8003606:	e006      	b.n	8003616 <vQueueAddToRegistry+0x42>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	3301      	adds	r3, #1
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b07      	cmp	r3, #7
 8003612:	d9e7      	bls.n	80035e4 <vQueueAddToRegistry+0x10>
 8003614:	bf00      	nop
 8003616:	bf00      	nop
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	2000083c 	.word	0x2000083c

08003628 <vQueueWaitForMessageRestricted>:
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	f001 fca4 	bl	8004f84 <vPortEnterCritical>
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003642:	b25b      	sxtb	r3, r3
 8003644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003648:	d103      	bne.n	8003652 <vQueueWaitForMessageRestricted+0x2a>
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003658:	b25b      	sxtb	r3, r3
 800365a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365e:	d103      	bne.n	8003668 <vQueueWaitForMessageRestricted+0x40>
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003668:	f001 fcbc 	bl	8004fe4 <vPortExitCritical>
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003670:	2b00      	cmp	r3, #0
 8003672:	d106      	bne.n	8003682 <vQueueWaitForMessageRestricted+0x5a>
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	3324      	adds	r3, #36	; 0x24
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	68b9      	ldr	r1, [r7, #8]
 800367c:	4618      	mov	r0, r3
 800367e:	f000 fc9d 	bl	8003fbc <vTaskPlaceOnEventListRestricted>
 8003682:	6978      	ldr	r0, [r7, #20]
 8003684:	f7ff ff26 	bl	80034d4 <prvUnlockQueue>
 8003688:	bf00      	nop
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <xTaskCreateStatic>:
 8003690:	b580      	push	{r7, lr}
 8003692:	b08e      	sub	sp, #56	; 0x38
 8003694:	af04      	add	r7, sp, #16
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
 800369c:	603b      	str	r3, [r7, #0]
 800369e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10a      	bne.n	80036ba <xTaskCreateStatic+0x2a>
 80036a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a8:	f383 8811 	msr	BASEPRI, r3
 80036ac:	f3bf 8f6f 	isb	sy
 80036b0:	f3bf 8f4f 	dsb	sy
 80036b4:	623b      	str	r3, [r7, #32]
 80036b6:	bf00      	nop
 80036b8:	e7fe      	b.n	80036b8 <xTaskCreateStatic+0x28>
 80036ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10a      	bne.n	80036d6 <xTaskCreateStatic+0x46>
 80036c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c4:	f383 8811 	msr	BASEPRI, r3
 80036c8:	f3bf 8f6f 	isb	sy
 80036cc:	f3bf 8f4f 	dsb	sy
 80036d0:	61fb      	str	r3, [r7, #28]
 80036d2:	bf00      	nop
 80036d4:	e7fe      	b.n	80036d4 <xTaskCreateStatic+0x44>
 80036d6:	23a8      	movs	r3, #168	; 0xa8
 80036d8:	613b      	str	r3, [r7, #16]
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	2ba8      	cmp	r3, #168	; 0xa8
 80036de:	d00a      	beq.n	80036f6 <xTaskCreateStatic+0x66>
 80036e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e4:	f383 8811 	msr	BASEPRI, r3
 80036e8:	f3bf 8f6f 	isb	sy
 80036ec:	f3bf 8f4f 	dsb	sy
 80036f0:	61bb      	str	r3, [r7, #24]
 80036f2:	bf00      	nop
 80036f4:	e7fe      	b.n	80036f4 <xTaskCreateStatic+0x64>
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d01e      	beq.n	800373c <xTaskCreateStatic+0xac>
 80036fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003700:	2b00      	cmp	r3, #0
 8003702:	d01b      	beq.n	800373c <xTaskCreateStatic+0xac>
 8003704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800370c:	631a      	str	r2, [r3, #48]	; 0x30
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	2202      	movs	r2, #2
 8003712:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 8003716:	2300      	movs	r3, #0
 8003718:	9303      	str	r3, [sp, #12]
 800371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371c:	9302      	str	r3, [sp, #8]
 800371e:	f107 0314 	add.w	r3, r7, #20
 8003722:	9301      	str	r3, [sp, #4]
 8003724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	68b9      	ldr	r1, [r7, #8]
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 f850 	bl	80037d4 <prvInitialiseNewTask>
 8003734:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003736:	f000 f8f3 	bl	8003920 <prvAddNewTaskToReadyList>
 800373a:	e001      	b.n	8003740 <xTaskCreateStatic+0xb0>
 800373c:	2300      	movs	r3, #0
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	4618      	mov	r0, r3
 8003744:	3728      	adds	r7, #40	; 0x28
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <xTaskCreate>:
 800374a:	b580      	push	{r7, lr}
 800374c:	b08c      	sub	sp, #48	; 0x30
 800374e:	af04      	add	r7, sp, #16
 8003750:	60f8      	str	r0, [r7, #12]
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	603b      	str	r3, [r7, #0]
 8003756:	4613      	mov	r3, r2
 8003758:	80fb      	strh	r3, [r7, #6]
 800375a:	88fb      	ldrh	r3, [r7, #6]
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4618      	mov	r0, r3
 8003760:	f001 fd32 	bl	80051c8 <pvPortMalloc>
 8003764:	6178      	str	r0, [r7, #20]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00e      	beq.n	800378a <xTaskCreate+0x40>
 800376c:	20a8      	movs	r0, #168	; 0xa8
 800376e:	f001 fd2b 	bl	80051c8 <pvPortMalloc>
 8003772:	61f8      	str	r0, [r7, #28]
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <xTaskCreate+0x38>
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	631a      	str	r2, [r3, #48]	; 0x30
 8003780:	e005      	b.n	800378e <xTaskCreate+0x44>
 8003782:	6978      	ldr	r0, [r7, #20]
 8003784:	f001 fdec 	bl	8005360 <vPortFree>
 8003788:	e001      	b.n	800378e <xTaskCreate+0x44>
 800378a:	2300      	movs	r3, #0
 800378c:	61fb      	str	r3, [r7, #28]
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d017      	beq.n	80037c4 <xTaskCreate+0x7a>
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 800379c:	88fa      	ldrh	r2, [r7, #6]
 800379e:	2300      	movs	r3, #0
 80037a0:	9303      	str	r3, [sp, #12]
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	9302      	str	r3, [sp, #8]
 80037a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a8:	9301      	str	r3, [sp, #4]
 80037aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	68b9      	ldr	r1, [r7, #8]
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f000 f80e 	bl	80037d4 <prvInitialiseNewTask>
 80037b8:	69f8      	ldr	r0, [r7, #28]
 80037ba:	f000 f8b1 	bl	8003920 <prvAddNewTaskToReadyList>
 80037be:	2301      	movs	r3, #1
 80037c0:	61bb      	str	r3, [r7, #24]
 80037c2:	e002      	b.n	80037ca <xTaskCreate+0x80>
 80037c4:	f04f 33ff 	mov.w	r3, #4294967295
 80037c8:	61bb      	str	r3, [r7, #24]
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	4618      	mov	r0, r3
 80037ce:	3720      	adds	r7, #32
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <prvInitialiseNewTask>:
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	603b      	str	r3, [r7, #0]
 80037e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	461a      	mov	r2, r3
 80037ec:	21a5      	movs	r1, #165	; 0xa5
 80037ee:	f001 ffec 	bl	80057ca <memset>
 80037f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80037fc:	3b01      	subs	r3, #1
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	f023 0307 	bic.w	r3, r3, #7
 800380a:	61bb      	str	r3, [r7, #24]
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00a      	beq.n	800382c <prvInitialiseNewTask+0x58>
 8003816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381a:	f383 8811 	msr	BASEPRI, r3
 800381e:	f3bf 8f6f 	isb	sy
 8003822:	f3bf 8f4f 	dsb	sy
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	bf00      	nop
 800382a:	e7fe      	b.n	800382a <prvInitialiseNewTask+0x56>
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d01f      	beq.n	8003872 <prvInitialiseNewTask+0x9e>
 8003832:	2300      	movs	r3, #0
 8003834:	61fb      	str	r3, [r7, #28]
 8003836:	e012      	b.n	800385e <prvInitialiseNewTask+0x8a>
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	4413      	add	r3, r2
 800383e:	7819      	ldrb	r1, [r3, #0]
 8003840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	4413      	add	r3, r2
 8003846:	3334      	adds	r3, #52	; 0x34
 8003848:	460a      	mov	r2, r1
 800384a:	701a      	strb	r2, [r3, #0]
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	4413      	add	r3, r2
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d006      	beq.n	8003866 <prvInitialiseNewTask+0x92>
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	3301      	adds	r3, #1
 800385c:	61fb      	str	r3, [r7, #28]
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	2b0f      	cmp	r3, #15
 8003862:	d9e9      	bls.n	8003838 <prvInitialiseNewTask+0x64>
 8003864:	e000      	b.n	8003868 <prvInitialiseNewTask+0x94>
 8003866:	bf00      	nop
 8003868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003870:	e003      	b.n	800387a <prvInitialiseNewTask+0xa6>
 8003872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800387a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387c:	2b37      	cmp	r3, #55	; 0x37
 800387e:	d901      	bls.n	8003884 <prvInitialiseNewTask+0xb0>
 8003880:	2337      	movs	r3, #55	; 0x37
 8003882:	62bb      	str	r3, [r7, #40]	; 0x28
 8003884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003888:	62da      	str	r2, [r3, #44]	; 0x2c
 800388a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800388e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003892:	2200      	movs	r2, #0
 8003894:	651a      	str	r2, [r3, #80]	; 0x50
 8003896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003898:	3304      	adds	r3, #4
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff f978 	bl	8002b90 <vListInitialiseItem>
 80038a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a2:	3318      	adds	r3, #24
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff f973 	bl	8002b90 <vListInitialiseItem>
 80038aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038ae:	611a      	str	r2, [r3, #16]
 80038b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80038b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b8:	619a      	str	r2, [r3, #24]
 80038ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038be:	625a      	str	r2, [r3, #36]	; 0x24
 80038c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c2:	2200      	movs	r2, #0
 80038c4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80038c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 80038d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d2:	3354      	adds	r3, #84	; 0x54
 80038d4:	224c      	movs	r2, #76	; 0x4c
 80038d6:	2100      	movs	r1, #0
 80038d8:	4618      	mov	r0, r3
 80038da:	f001 ff76 	bl	80057ca <memset>
 80038de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e0:	4a0c      	ldr	r2, [pc, #48]	; (8003914 <prvInitialiseNewTask+0x140>)
 80038e2:	659a      	str	r2, [r3, #88]	; 0x58
 80038e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e6:	4a0c      	ldr	r2, [pc, #48]	; (8003918 <prvInitialiseNewTask+0x144>)
 80038e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80038ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ec:	4a0b      	ldr	r2, [pc, #44]	; (800391c <prvInitialiseNewTask+0x148>)
 80038ee:	661a      	str	r2, [r3, #96]	; 0x60
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	68f9      	ldr	r1, [r7, #12]
 80038f4:	69b8      	ldr	r0, [r7, #24]
 80038f6:	f001 fa17 	bl	8004d28 <pxPortInitialiseStack>
 80038fa:	4602      	mov	r2, r0
 80038fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <prvInitialiseNewTask+0x138>
 8003906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	bf00      	nop
 800390e:	3720      	adds	r7, #32
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	20004ad0 	.word	0x20004ad0
 8003918:	20004b38 	.word	0x20004b38
 800391c:	20004ba0 	.word	0x20004ba0

08003920 <prvAddNewTaskToReadyList>:
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	f001 fb2c 	bl	8004f84 <vPortEnterCritical>
 800392c:	4b2d      	ldr	r3, [pc, #180]	; (80039e4 <prvAddNewTaskToReadyList+0xc4>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	3301      	adds	r3, #1
 8003932:	4a2c      	ldr	r2, [pc, #176]	; (80039e4 <prvAddNewTaskToReadyList+0xc4>)
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	4b2c      	ldr	r3, [pc, #176]	; (80039e8 <prvAddNewTaskToReadyList+0xc8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <prvAddNewTaskToReadyList+0x32>
 800393e:	4a2a      	ldr	r2, [pc, #168]	; (80039e8 <prvAddNewTaskToReadyList+0xc8>)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	4b27      	ldr	r3, [pc, #156]	; (80039e4 <prvAddNewTaskToReadyList+0xc4>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d110      	bne.n	800396e <prvAddNewTaskToReadyList+0x4e>
 800394c:	f000 fcc4 	bl	80042d8 <prvInitialiseTaskLists>
 8003950:	e00d      	b.n	800396e <prvAddNewTaskToReadyList+0x4e>
 8003952:	4b26      	ldr	r3, [pc, #152]	; (80039ec <prvAddNewTaskToReadyList+0xcc>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d109      	bne.n	800396e <prvAddNewTaskToReadyList+0x4e>
 800395a:	4b23      	ldr	r3, [pc, #140]	; (80039e8 <prvAddNewTaskToReadyList+0xc8>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003964:	429a      	cmp	r2, r3
 8003966:	d802      	bhi.n	800396e <prvAddNewTaskToReadyList+0x4e>
 8003968:	4a1f      	ldr	r2, [pc, #124]	; (80039e8 <prvAddNewTaskToReadyList+0xc8>)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6013      	str	r3, [r2, #0]
 800396e:	4b20      	ldr	r3, [pc, #128]	; (80039f0 <prvAddNewTaskToReadyList+0xd0>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3301      	adds	r3, #1
 8003974:	4a1e      	ldr	r2, [pc, #120]	; (80039f0 <prvAddNewTaskToReadyList+0xd0>)
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	4b1d      	ldr	r3, [pc, #116]	; (80039f0 <prvAddNewTaskToReadyList+0xd0>)
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	645a      	str	r2, [r3, #68]	; 0x44
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003984:	4b1b      	ldr	r3, [pc, #108]	; (80039f4 <prvAddNewTaskToReadyList+0xd4>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	429a      	cmp	r2, r3
 800398a:	d903      	bls.n	8003994 <prvAddNewTaskToReadyList+0x74>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003990:	4a18      	ldr	r2, [pc, #96]	; (80039f4 <prvAddNewTaskToReadyList+0xd4>)
 8003992:	6013      	str	r3, [r2, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003998:	4613      	mov	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4413      	add	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4a15      	ldr	r2, [pc, #84]	; (80039f8 <prvAddNewTaskToReadyList+0xd8>)
 80039a2:	441a      	add	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3304      	adds	r3, #4
 80039a8:	4619      	mov	r1, r3
 80039aa:	4610      	mov	r0, r2
 80039ac:	f7ff f8fd 	bl	8002baa <vListInsertEnd>
 80039b0:	f001 fb18 	bl	8004fe4 <vPortExitCritical>
 80039b4:	4b0d      	ldr	r3, [pc, #52]	; (80039ec <prvAddNewTaskToReadyList+0xcc>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00e      	beq.n	80039da <prvAddNewTaskToReadyList+0xba>
 80039bc:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <prvAddNewTaskToReadyList+0xc8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d207      	bcs.n	80039da <prvAddNewTaskToReadyList+0xba>
 80039ca:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <prvAddNewTaskToReadyList+0xdc>)
 80039cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	f3bf 8f4f 	dsb	sy
 80039d6:	f3bf 8f6f 	isb	sy
 80039da:	bf00      	nop
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	20000d50 	.word	0x20000d50
 80039e8:	2000087c 	.word	0x2000087c
 80039ec:	20000d5c 	.word	0x20000d5c
 80039f0:	20000d6c 	.word	0x20000d6c
 80039f4:	20000d58 	.word	0x20000d58
 80039f8:	20000880 	.word	0x20000880
 80039fc:	e000ed04 	.word	0xe000ed04

08003a00 <vTaskDelay>:
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60fb      	str	r3, [r7, #12]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d017      	beq.n	8003a42 <vTaskDelay+0x42>
 8003a12:	4b13      	ldr	r3, [pc, #76]	; (8003a60 <vTaskDelay+0x60>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <vTaskDelay+0x30>
 8003a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1e:	f383 8811 	msr	BASEPRI, r3
 8003a22:	f3bf 8f6f 	isb	sy
 8003a26:	f3bf 8f4f 	dsb	sy
 8003a2a:	60bb      	str	r3, [r7, #8]
 8003a2c:	bf00      	nop
 8003a2e:	e7fe      	b.n	8003a2e <vTaskDelay+0x2e>
 8003a30:	f000 f88a 	bl	8003b48 <vTaskSuspendAll>
 8003a34:	2100      	movs	r1, #0
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 fdb4 	bl	80045a4 <prvAddCurrentTaskToDelayedList>
 8003a3c:	f000 f892 	bl	8003b64 <xTaskResumeAll>
 8003a40:	60f8      	str	r0, [r7, #12]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d107      	bne.n	8003a58 <vTaskDelay+0x58>
 8003a48:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <vTaskDelay+0x64>)
 8003a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	f3bf 8f6f 	isb	sy
 8003a58:	bf00      	nop
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	20000d78 	.word	0x20000d78
 8003a64:	e000ed04 	.word	0xe000ed04

08003a68 <vTaskStartScheduler>:
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08a      	sub	sp, #40	; 0x28
 8003a6c:	af04      	add	r7, sp, #16
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60bb      	str	r3, [r7, #8]
 8003a72:	2300      	movs	r3, #0
 8003a74:	607b      	str	r3, [r7, #4]
 8003a76:	463a      	mov	r2, r7
 8003a78:	1d39      	adds	r1, r7, #4
 8003a7a:	f107 0308 	add.w	r3, r7, #8
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fe fdc6 	bl	8002610 <vApplicationGetIdleTaskMemory>
 8003a84:	6839      	ldr	r1, [r7, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	9202      	str	r2, [sp, #8]
 8003a8c:	9301      	str	r3, [sp, #4]
 8003a8e:	2300      	movs	r3, #0
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	2300      	movs	r3, #0
 8003a94:	460a      	mov	r2, r1
 8003a96:	4924      	ldr	r1, [pc, #144]	; (8003b28 <vTaskStartScheduler+0xc0>)
 8003a98:	4824      	ldr	r0, [pc, #144]	; (8003b2c <vTaskStartScheduler+0xc4>)
 8003a9a:	f7ff fdf9 	bl	8003690 <xTaskCreateStatic>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	4a23      	ldr	r2, [pc, #140]	; (8003b30 <vTaskStartScheduler+0xc8>)
 8003aa2:	6013      	str	r3, [r2, #0]
 8003aa4:	4b22      	ldr	r3, [pc, #136]	; (8003b30 <vTaskStartScheduler+0xc8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d002      	beq.n	8003ab2 <vTaskStartScheduler+0x4a>
 8003aac:	2301      	movs	r3, #1
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	e001      	b.n	8003ab6 <vTaskStartScheduler+0x4e>
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	617b      	str	r3, [r7, #20]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d102      	bne.n	8003ac2 <vTaskStartScheduler+0x5a>
 8003abc:	f000 fdc6 	bl	800464c <xTimerCreateTimerTask>
 8003ac0:	6178      	str	r0, [r7, #20]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d11b      	bne.n	8003b00 <vTaskStartScheduler+0x98>
 8003ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003acc:	f383 8811 	msr	BASEPRI, r3
 8003ad0:	f3bf 8f6f 	isb	sy
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	613b      	str	r3, [r7, #16]
 8003ada:	bf00      	nop
 8003adc:	4b15      	ldr	r3, [pc, #84]	; (8003b34 <vTaskStartScheduler+0xcc>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	3354      	adds	r3, #84	; 0x54
 8003ae2:	4a15      	ldr	r2, [pc, #84]	; (8003b38 <vTaskStartScheduler+0xd0>)
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	4b15      	ldr	r3, [pc, #84]	; (8003b3c <vTaskStartScheduler+0xd4>)
 8003ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	4b14      	ldr	r3, [pc, #80]	; (8003b40 <vTaskStartScheduler+0xd8>)
 8003af0:	2201      	movs	r2, #1
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	4b13      	ldr	r3, [pc, #76]	; (8003b44 <vTaskStartScheduler+0xdc>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	f001 f9a1 	bl	8004e40 <xPortStartScheduler>
 8003afe:	e00e      	b.n	8003b1e <vTaskStartScheduler+0xb6>
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b06:	d10a      	bne.n	8003b1e <vTaskStartScheduler+0xb6>
 8003b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0c:	f383 8811 	msr	BASEPRI, r3
 8003b10:	f3bf 8f6f 	isb	sy
 8003b14:	f3bf 8f4f 	dsb	sy
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	bf00      	nop
 8003b1c:	e7fe      	b.n	8003b1c <vTaskStartScheduler+0xb4>
 8003b1e:	bf00      	nop
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	08006544 	.word	0x08006544
 8003b2c:	080042a9 	.word	0x080042a9
 8003b30:	20000d74 	.word	0x20000d74
 8003b34:	2000087c 	.word	0x2000087c
 8003b38:	20000068 	.word	0x20000068
 8003b3c:	20000d70 	.word	0x20000d70
 8003b40:	20000d5c 	.word	0x20000d5c
 8003b44:	20000d54 	.word	0x20000d54

08003b48 <vTaskSuspendAll>:
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	4b04      	ldr	r3, [pc, #16]	; (8003b60 <vTaskSuspendAll+0x18>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	3301      	adds	r3, #1
 8003b52:	4a03      	ldr	r2, [pc, #12]	; (8003b60 <vTaskSuspendAll+0x18>)
 8003b54:	6013      	str	r3, [r2, #0]
 8003b56:	bf00      	nop
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	20000d78 	.word	0x20000d78

08003b64 <xTaskResumeAll>:
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	4b42      	ldr	r3, [pc, #264]	; (8003c7c <xTaskResumeAll+0x118>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10a      	bne.n	8003b90 <xTaskResumeAll+0x2c>
 8003b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7e:	f383 8811 	msr	BASEPRI, r3
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	603b      	str	r3, [r7, #0]
 8003b8c:	bf00      	nop
 8003b8e:	e7fe      	b.n	8003b8e <xTaskResumeAll+0x2a>
 8003b90:	f001 f9f8 	bl	8004f84 <vPortEnterCritical>
 8003b94:	4b39      	ldr	r3, [pc, #228]	; (8003c7c <xTaskResumeAll+0x118>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	4a38      	ldr	r2, [pc, #224]	; (8003c7c <xTaskResumeAll+0x118>)
 8003b9c:	6013      	str	r3, [r2, #0]
 8003b9e:	4b37      	ldr	r3, [pc, #220]	; (8003c7c <xTaskResumeAll+0x118>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d162      	bne.n	8003c6c <xTaskResumeAll+0x108>
 8003ba6:	4b36      	ldr	r3, [pc, #216]	; (8003c80 <xTaskResumeAll+0x11c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d05e      	beq.n	8003c6c <xTaskResumeAll+0x108>
 8003bae:	e02f      	b.n	8003c10 <xTaskResumeAll+0xac>
 8003bb0:	4b34      	ldr	r3, [pc, #208]	; (8003c84 <xTaskResumeAll+0x120>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	3318      	adds	r3, #24
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff f851 	bl	8002c64 <uxListRemove>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff f84c 	bl	8002c64 <uxListRemove>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd0:	4b2d      	ldr	r3, [pc, #180]	; (8003c88 <xTaskResumeAll+0x124>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d903      	bls.n	8003be0 <xTaskResumeAll+0x7c>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bdc:	4a2a      	ldr	r2, [pc, #168]	; (8003c88 <xTaskResumeAll+0x124>)
 8003bde:	6013      	str	r3, [r2, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be4:	4613      	mov	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4413      	add	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4a27      	ldr	r2, [pc, #156]	; (8003c8c <xTaskResumeAll+0x128>)
 8003bee:	441a      	add	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	3304      	adds	r3, #4
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4610      	mov	r0, r2
 8003bf8:	f7fe ffd7 	bl	8002baa <vListInsertEnd>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c00:	4b23      	ldr	r3, [pc, #140]	; (8003c90 <xTaskResumeAll+0x12c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d302      	bcc.n	8003c10 <xTaskResumeAll+0xac>
 8003c0a:	4b22      	ldr	r3, [pc, #136]	; (8003c94 <xTaskResumeAll+0x130>)
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	4b1c      	ldr	r3, [pc, #112]	; (8003c84 <xTaskResumeAll+0x120>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1cb      	bne.n	8003bb0 <xTaskResumeAll+0x4c>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <xTaskResumeAll+0xbe>
 8003c1e:	f000 fbfd 	bl	800441c <prvResetNextTaskUnblockTime>
 8003c22:	4b1d      	ldr	r3, [pc, #116]	; (8003c98 <xTaskResumeAll+0x134>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	607b      	str	r3, [r7, #4]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d010      	beq.n	8003c50 <xTaskResumeAll+0xec>
 8003c2e:	f000 f847 	bl	8003cc0 <xTaskIncrementTick>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <xTaskResumeAll+0xda>
 8003c38:	4b16      	ldr	r3, [pc, #88]	; (8003c94 <xTaskResumeAll+0x130>)
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	3b01      	subs	r3, #1
 8003c42:	607b      	str	r3, [r7, #4]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1f1      	bne.n	8003c2e <xTaskResumeAll+0xca>
 8003c4a:	4b13      	ldr	r3, [pc, #76]	; (8003c98 <xTaskResumeAll+0x134>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	4b10      	ldr	r3, [pc, #64]	; (8003c94 <xTaskResumeAll+0x130>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d009      	beq.n	8003c6c <xTaskResumeAll+0x108>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	60bb      	str	r3, [r7, #8]
 8003c5c:	4b0f      	ldr	r3, [pc, #60]	; (8003c9c <xTaskResumeAll+0x138>)
 8003c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	f3bf 8f4f 	dsb	sy
 8003c68:	f3bf 8f6f 	isb	sy
 8003c6c:	f001 f9ba 	bl	8004fe4 <vPortExitCritical>
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	4618      	mov	r0, r3
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20000d78 	.word	0x20000d78
 8003c80:	20000d50 	.word	0x20000d50
 8003c84:	20000d10 	.word	0x20000d10
 8003c88:	20000d58 	.word	0x20000d58
 8003c8c:	20000880 	.word	0x20000880
 8003c90:	2000087c 	.word	0x2000087c
 8003c94:	20000d64 	.word	0x20000d64
 8003c98:	20000d60 	.word	0x20000d60
 8003c9c:	e000ed04 	.word	0xe000ed04

08003ca0 <xTaskGetTickCount>:
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <xTaskGetTickCount+0x1c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	607b      	str	r3, [r7, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	20000d54 	.word	0x20000d54

08003cc0 <xTaskIncrementTick>:
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	617b      	str	r3, [r7, #20]
 8003cca:	4b4f      	ldr	r3, [pc, #316]	; (8003e08 <xTaskIncrementTick+0x148>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f040 808f 	bne.w	8003df2 <xTaskIncrementTick+0x132>
 8003cd4:	4b4d      	ldr	r3, [pc, #308]	; (8003e0c <xTaskIncrementTick+0x14c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	613b      	str	r3, [r7, #16]
 8003cdc:	4a4b      	ldr	r2, [pc, #300]	; (8003e0c <xTaskIncrementTick+0x14c>)
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	6013      	str	r3, [r2, #0]
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d120      	bne.n	8003d2a <xTaskIncrementTick+0x6a>
 8003ce8:	4b49      	ldr	r3, [pc, #292]	; (8003e10 <xTaskIncrementTick+0x150>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <xTaskIncrementTick+0x48>
 8003cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf6:	f383 8811 	msr	BASEPRI, r3
 8003cfa:	f3bf 8f6f 	isb	sy
 8003cfe:	f3bf 8f4f 	dsb	sy
 8003d02:	603b      	str	r3, [r7, #0]
 8003d04:	bf00      	nop
 8003d06:	e7fe      	b.n	8003d06 <xTaskIncrementTick+0x46>
 8003d08:	4b41      	ldr	r3, [pc, #260]	; (8003e10 <xTaskIncrementTick+0x150>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	4b41      	ldr	r3, [pc, #260]	; (8003e14 <xTaskIncrementTick+0x154>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a3f      	ldr	r2, [pc, #252]	; (8003e10 <xTaskIncrementTick+0x150>)
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	4a3f      	ldr	r2, [pc, #252]	; (8003e14 <xTaskIncrementTick+0x154>)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6013      	str	r3, [r2, #0]
 8003d1c:	4b3e      	ldr	r3, [pc, #248]	; (8003e18 <xTaskIncrementTick+0x158>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3301      	adds	r3, #1
 8003d22:	4a3d      	ldr	r2, [pc, #244]	; (8003e18 <xTaskIncrementTick+0x158>)
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	f000 fb79 	bl	800441c <prvResetNextTaskUnblockTime>
 8003d2a:	4b3c      	ldr	r3, [pc, #240]	; (8003e1c <xTaskIncrementTick+0x15c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d349      	bcc.n	8003dc8 <xTaskIncrementTick+0x108>
 8003d34:	4b36      	ldr	r3, [pc, #216]	; (8003e10 <xTaskIncrementTick+0x150>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d104      	bne.n	8003d48 <xTaskIncrementTick+0x88>
 8003d3e:	4b37      	ldr	r3, [pc, #220]	; (8003e1c <xTaskIncrementTick+0x15c>)
 8003d40:	f04f 32ff 	mov.w	r2, #4294967295
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	e03f      	b.n	8003dc8 <xTaskIncrementTick+0x108>
 8003d48:	4b31      	ldr	r3, [pc, #196]	; (8003e10 <xTaskIncrementTick+0x150>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	60bb      	str	r3, [r7, #8]
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	607b      	str	r3, [r7, #4]
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d203      	bcs.n	8003d68 <xTaskIncrementTick+0xa8>
 8003d60:	4a2e      	ldr	r2, [pc, #184]	; (8003e1c <xTaskIncrementTick+0x15c>)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	e02f      	b.n	8003dc8 <xTaskIncrementTick+0x108>
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fe ff79 	bl	8002c64 <uxListRemove>
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d004      	beq.n	8003d84 <xTaskIncrementTick+0xc4>
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	3318      	adds	r3, #24
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fe ff70 	bl	8002c64 <uxListRemove>
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d88:	4b25      	ldr	r3, [pc, #148]	; (8003e20 <xTaskIncrementTick+0x160>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d903      	bls.n	8003d98 <xTaskIncrementTick+0xd8>
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	4a22      	ldr	r2, [pc, #136]	; (8003e20 <xTaskIncrementTick+0x160>)
 8003d96:	6013      	str	r3, [r2, #0]
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4413      	add	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4a1f      	ldr	r2, [pc, #124]	; (8003e24 <xTaskIncrementTick+0x164>)
 8003da6:	441a      	add	r2, r3
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	3304      	adds	r3, #4
 8003dac:	4619      	mov	r1, r3
 8003dae:	4610      	mov	r0, r2
 8003db0:	f7fe fefb 	bl	8002baa <vListInsertEnd>
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db8:	4b1b      	ldr	r3, [pc, #108]	; (8003e28 <xTaskIncrementTick+0x168>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d3b8      	bcc.n	8003d34 <xTaskIncrementTick+0x74>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	617b      	str	r3, [r7, #20]
 8003dc6:	e7b5      	b.n	8003d34 <xTaskIncrementTick+0x74>
 8003dc8:	4b17      	ldr	r3, [pc, #92]	; (8003e28 <xTaskIncrementTick+0x168>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dce:	4915      	ldr	r1, [pc, #84]	; (8003e24 <xTaskIncrementTick+0x164>)
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d901      	bls.n	8003de4 <xTaskIncrementTick+0x124>
 8003de0:	2301      	movs	r3, #1
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	4b11      	ldr	r3, [pc, #68]	; (8003e2c <xTaskIncrementTick+0x16c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d007      	beq.n	8003dfc <xTaskIncrementTick+0x13c>
 8003dec:	2301      	movs	r3, #1
 8003dee:	617b      	str	r3, [r7, #20]
 8003df0:	e004      	b.n	8003dfc <xTaskIncrementTick+0x13c>
 8003df2:	4b0f      	ldr	r3, [pc, #60]	; (8003e30 <xTaskIncrementTick+0x170>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3301      	adds	r3, #1
 8003df8:	4a0d      	ldr	r2, [pc, #52]	; (8003e30 <xTaskIncrementTick+0x170>)
 8003dfa:	6013      	str	r3, [r2, #0]
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	20000d78 	.word	0x20000d78
 8003e0c:	20000d54 	.word	0x20000d54
 8003e10:	20000d08 	.word	0x20000d08
 8003e14:	20000d0c 	.word	0x20000d0c
 8003e18:	20000d68 	.word	0x20000d68
 8003e1c:	20000d70 	.word	0x20000d70
 8003e20:	20000d58 	.word	0x20000d58
 8003e24:	20000880 	.word	0x20000880
 8003e28:	2000087c 	.word	0x2000087c
 8003e2c:	20000d64 	.word	0x20000d64
 8003e30:	20000d60 	.word	0x20000d60

08003e34 <vTaskSwitchContext>:
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	4b2a      	ldr	r3, [pc, #168]	; (8003ee4 <vTaskSwitchContext+0xb0>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <vTaskSwitchContext+0x16>
 8003e42:	4b29      	ldr	r3, [pc, #164]	; (8003ee8 <vTaskSwitchContext+0xb4>)
 8003e44:	2201      	movs	r2, #1
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	e046      	b.n	8003ed8 <vTaskSwitchContext+0xa4>
 8003e4a:	4b27      	ldr	r3, [pc, #156]	; (8003ee8 <vTaskSwitchContext+0xb4>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	4b26      	ldr	r3, [pc, #152]	; (8003eec <vTaskSwitchContext+0xb8>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	e010      	b.n	8003e7a <vTaskSwitchContext+0x46>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10a      	bne.n	8003e74 <vTaskSwitchContext+0x40>
 8003e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e62:	f383 8811 	msr	BASEPRI, r3
 8003e66:	f3bf 8f6f 	isb	sy
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	607b      	str	r3, [r7, #4]
 8003e70:	bf00      	nop
 8003e72:	e7fe      	b.n	8003e72 <vTaskSwitchContext+0x3e>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	491d      	ldr	r1, [pc, #116]	; (8003ef0 <vTaskSwitchContext+0xbc>)
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0e4      	beq.n	8003e58 <vTaskSwitchContext+0x24>
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	4613      	mov	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4a15      	ldr	r2, [pc, #84]	; (8003ef0 <vTaskSwitchContext+0xbc>)
 8003e9a:	4413      	add	r3, r2
 8003e9c:	60bb      	str	r3, [r7, #8]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	605a      	str	r2, [r3, #4]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	3308      	adds	r3, #8
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d104      	bne.n	8003ebe <vTaskSwitchContext+0x8a>
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	605a      	str	r2, [r3, #4]
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	4a0b      	ldr	r2, [pc, #44]	; (8003ef4 <vTaskSwitchContext+0xc0>)
 8003ec6:	6013      	str	r3, [r2, #0]
 8003ec8:	4a08      	ldr	r2, [pc, #32]	; (8003eec <vTaskSwitchContext+0xb8>)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	4b09      	ldr	r3, [pc, #36]	; (8003ef4 <vTaskSwitchContext+0xc0>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	3354      	adds	r3, #84	; 0x54
 8003ed4:	4a08      	ldr	r2, [pc, #32]	; (8003ef8 <vTaskSwitchContext+0xc4>)
 8003ed6:	6013      	str	r3, [r2, #0]
 8003ed8:	bf00      	nop
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	20000d78 	.word	0x20000d78
 8003ee8:	20000d64 	.word	0x20000d64
 8003eec:	20000d58 	.word	0x20000d58
 8003ef0:	20000880 	.word	0x20000880
 8003ef4:	2000087c 	.word	0x2000087c
 8003ef8:	20000068 	.word	0x20000068

08003efc <vTaskPlaceOnEventList>:
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10a      	bne.n	8003f22 <vTaskPlaceOnEventList+0x26>
 8003f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f10:	f383 8811 	msr	BASEPRI, r3
 8003f14:	f3bf 8f6f 	isb	sy
 8003f18:	f3bf 8f4f 	dsb	sy
 8003f1c:	60fb      	str	r3, [r7, #12]
 8003f1e:	bf00      	nop
 8003f20:	e7fe      	b.n	8003f20 <vTaskPlaceOnEventList+0x24>
 8003f22:	4b07      	ldr	r3, [pc, #28]	; (8003f40 <vTaskPlaceOnEventList+0x44>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3318      	adds	r3, #24
 8003f28:	4619      	mov	r1, r3
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7fe fe61 	bl	8002bf2 <vListInsert>
 8003f30:	2101      	movs	r1, #1
 8003f32:	6838      	ldr	r0, [r7, #0]
 8003f34:	f000 fb36 	bl	80045a4 <prvAddCurrentTaskToDelayedList>
 8003f38:	bf00      	nop
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	2000087c 	.word	0x2000087c

08003f44 <vTaskPlaceOnUnorderedEventList>:
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10a      	bne.n	8003f6c <vTaskPlaceOnUnorderedEventList+0x28>
 8003f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5a:	f383 8811 	msr	BASEPRI, r3
 8003f5e:	f3bf 8f6f 	isb	sy
 8003f62:	f3bf 8f4f 	dsb	sy
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	bf00      	nop
 8003f6a:	e7fe      	b.n	8003f6a <vTaskPlaceOnUnorderedEventList+0x26>
 8003f6c:	4b11      	ldr	r3, [pc, #68]	; (8003fb4 <vTaskPlaceOnUnorderedEventList+0x70>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10a      	bne.n	8003f8a <vTaskPlaceOnUnorderedEventList+0x46>
 8003f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f78:	f383 8811 	msr	BASEPRI, r3
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	bf00      	nop
 8003f88:	e7fe      	b.n	8003f88 <vTaskPlaceOnUnorderedEventList+0x44>
 8003f8a:	4b0b      	ldr	r3, [pc, #44]	; (8003fb8 <vTaskPlaceOnUnorderedEventList+0x74>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003f94:	619a      	str	r2, [r3, #24]
 8003f96:	4b08      	ldr	r3, [pc, #32]	; (8003fb8 <vTaskPlaceOnUnorderedEventList+0x74>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	3318      	adds	r3, #24
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f7fe fe03 	bl	8002baa <vListInsertEnd>
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fafc 	bl	80045a4 <prvAddCurrentTaskToDelayedList>
 8003fac:	bf00      	nop
 8003fae:	3718      	adds	r7, #24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	20000d78 	.word	0x20000d78
 8003fb8:	2000087c 	.word	0x2000087c

08003fbc <vTaskPlaceOnEventListRestricted>:
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10a      	bne.n	8003fe4 <vTaskPlaceOnEventListRestricted+0x28>
 8003fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd2:	f383 8811 	msr	BASEPRI, r3
 8003fd6:	f3bf 8f6f 	isb	sy
 8003fda:	f3bf 8f4f 	dsb	sy
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	bf00      	nop
 8003fe2:	e7fe      	b.n	8003fe2 <vTaskPlaceOnEventListRestricted+0x26>
 8003fe4:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <vTaskPlaceOnEventListRestricted+0x54>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3318      	adds	r3, #24
 8003fea:	4619      	mov	r1, r3
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f7fe fddc 	bl	8002baa <vListInsertEnd>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d002      	beq.n	8003ffe <vTaskPlaceOnEventListRestricted+0x42>
 8003ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ffc:	60bb      	str	r3, [r7, #8]
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	68b8      	ldr	r0, [r7, #8]
 8004002:	f000 facf 	bl	80045a4 <prvAddCurrentTaskToDelayedList>
 8004006:	bf00      	nop
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	2000087c 	.word	0x2000087c

08004014 <xTaskRemoveFromEventList>:
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	613b      	str	r3, [r7, #16]
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10a      	bne.n	8004040 <xTaskRemoveFromEventList+0x2c>
 800402a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402e:	f383 8811 	msr	BASEPRI, r3
 8004032:	f3bf 8f6f 	isb	sy
 8004036:	f3bf 8f4f 	dsb	sy
 800403a:	60fb      	str	r3, [r7, #12]
 800403c:	bf00      	nop
 800403e:	e7fe      	b.n	800403e <xTaskRemoveFromEventList+0x2a>
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	3318      	adds	r3, #24
 8004044:	4618      	mov	r0, r3
 8004046:	f7fe fe0d 	bl	8002c64 <uxListRemove>
 800404a:	4b1e      	ldr	r3, [pc, #120]	; (80040c4 <xTaskRemoveFromEventList+0xb0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d11d      	bne.n	800408e <xTaskRemoveFromEventList+0x7a>
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	3304      	adds	r3, #4
 8004056:	4618      	mov	r0, r3
 8004058:	f7fe fe04 	bl	8002c64 <uxListRemove>
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004060:	4b19      	ldr	r3, [pc, #100]	; (80040c8 <xTaskRemoveFromEventList+0xb4>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d903      	bls.n	8004070 <xTaskRemoveFromEventList+0x5c>
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	4a16      	ldr	r2, [pc, #88]	; (80040c8 <xTaskRemoveFromEventList+0xb4>)
 800406e:	6013      	str	r3, [r2, #0]
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004074:	4613      	mov	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4a13      	ldr	r2, [pc, #76]	; (80040cc <xTaskRemoveFromEventList+0xb8>)
 800407e:	441a      	add	r2, r3
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	3304      	adds	r3, #4
 8004084:	4619      	mov	r1, r3
 8004086:	4610      	mov	r0, r2
 8004088:	f7fe fd8f 	bl	8002baa <vListInsertEnd>
 800408c:	e005      	b.n	800409a <xTaskRemoveFromEventList+0x86>
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	3318      	adds	r3, #24
 8004092:	4619      	mov	r1, r3
 8004094:	480e      	ldr	r0, [pc, #56]	; (80040d0 <xTaskRemoveFromEventList+0xbc>)
 8004096:	f7fe fd88 	bl	8002baa <vListInsertEnd>
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409e:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <xTaskRemoveFromEventList+0xc0>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d905      	bls.n	80040b4 <xTaskRemoveFromEventList+0xa0>
 80040a8:	2301      	movs	r3, #1
 80040aa:	617b      	str	r3, [r7, #20]
 80040ac:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <xTaskRemoveFromEventList+0xc4>)
 80040ae:	2201      	movs	r2, #1
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	e001      	b.n	80040b8 <xTaskRemoveFromEventList+0xa4>
 80040b4:	2300      	movs	r3, #0
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	4618      	mov	r0, r3
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	20000d78 	.word	0x20000d78
 80040c8:	20000d58 	.word	0x20000d58
 80040cc:	20000880 	.word	0x20000880
 80040d0:	20000d10 	.word	0x20000d10
 80040d4:	2000087c 	.word	0x2000087c
 80040d8:	20000d64 	.word	0x20000d64

080040dc <vTaskRemoveFromUnorderedEventList>:
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
 80040e6:	4b29      	ldr	r3, [pc, #164]	; (800418c <vTaskRemoveFromUnorderedEventList+0xb0>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10a      	bne.n	8004104 <vTaskRemoveFromUnorderedEventList+0x28>
 80040ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f2:	f383 8811 	msr	BASEPRI, r3
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	613b      	str	r3, [r7, #16]
 8004100:	bf00      	nop
 8004102:	e7fe      	b.n	8004102 <vTaskRemoveFromUnorderedEventList+0x26>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	617b      	str	r3, [r7, #20]
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10a      	bne.n	8004130 <vTaskRemoveFromUnorderedEventList+0x54>
 800411a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411e:	f383 8811 	msr	BASEPRI, r3
 8004122:	f3bf 8f6f 	isb	sy
 8004126:	f3bf 8f4f 	dsb	sy
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	bf00      	nop
 800412e:	e7fe      	b.n	800412e <vTaskRemoveFromUnorderedEventList+0x52>
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7fe fd97 	bl	8002c64 <uxListRemove>
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	3304      	adds	r3, #4
 800413a:	4618      	mov	r0, r3
 800413c:	f7fe fd92 	bl	8002c64 <uxListRemove>
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004144:	4b12      	ldr	r3, [pc, #72]	; (8004190 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	429a      	cmp	r2, r3
 800414a:	d903      	bls.n	8004154 <vTaskRemoveFromUnorderedEventList+0x78>
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004150:	4a0f      	ldr	r2, [pc, #60]	; (8004190 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8004152:	6013      	str	r3, [r2, #0]
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004158:	4613      	mov	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4a0c      	ldr	r2, [pc, #48]	; (8004194 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8004162:	441a      	add	r2, r3
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	3304      	adds	r3, #4
 8004168:	4619      	mov	r1, r3
 800416a:	4610      	mov	r0, r2
 800416c:	f7fe fd1d 	bl	8002baa <vListInsertEnd>
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004174:	4b08      	ldr	r3, [pc, #32]	; (8004198 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417a:	429a      	cmp	r2, r3
 800417c:	d902      	bls.n	8004184 <vTaskRemoveFromUnorderedEventList+0xa8>
 800417e:	4b07      	ldr	r3, [pc, #28]	; (800419c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8004180:	2201      	movs	r2, #1
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	bf00      	nop
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	20000d78 	.word	0x20000d78
 8004190:	20000d58 	.word	0x20000d58
 8004194:	20000880 	.word	0x20000880
 8004198:	2000087c 	.word	0x2000087c
 800419c:	20000d64 	.word	0x20000d64

080041a0 <vTaskInternalSetTimeOutState>:
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <vTaskInternalSetTimeOutState+0x24>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	4b05      	ldr	r3, [pc, #20]	; (80041c8 <vTaskInternalSetTimeOutState+0x28>)
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	605a      	str	r2, [r3, #4]
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	20000d68 	.word	0x20000d68
 80041c8:	20000d54 	.word	0x20000d54

080041cc <xTaskCheckForTimeOut>:
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b088      	sub	sp, #32
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10a      	bne.n	80041f2 <xTaskCheckForTimeOut+0x26>
 80041dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	bf00      	nop
 80041f0:	e7fe      	b.n	80041f0 <xTaskCheckForTimeOut+0x24>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10a      	bne.n	800420e <xTaskCheckForTimeOut+0x42>
 80041f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	bf00      	nop
 800420c:	e7fe      	b.n	800420c <xTaskCheckForTimeOut+0x40>
 800420e:	f000 feb9 	bl	8004f84 <vPortEnterCritical>
 8004212:	4b1d      	ldr	r3, [pc, #116]	; (8004288 <xTaskCheckForTimeOut+0xbc>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	61bb      	str	r3, [r7, #24]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	617b      	str	r3, [r7, #20]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422a:	d102      	bne.n	8004232 <xTaskCheckForTimeOut+0x66>
 800422c:	2300      	movs	r3, #0
 800422e:	61fb      	str	r3, [r7, #28]
 8004230:	e023      	b.n	800427a <xTaskCheckForTimeOut+0xae>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	4b15      	ldr	r3, [pc, #84]	; (800428c <xTaskCheckForTimeOut+0xc0>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	429a      	cmp	r2, r3
 800423c:	d007      	beq.n	800424e <xTaskCheckForTimeOut+0x82>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	429a      	cmp	r2, r3
 8004246:	d302      	bcc.n	800424e <xTaskCheckForTimeOut+0x82>
 8004248:	2301      	movs	r3, #1
 800424a:	61fb      	str	r3, [r7, #28]
 800424c:	e015      	b.n	800427a <xTaskCheckForTimeOut+0xae>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	429a      	cmp	r2, r3
 8004256:	d20b      	bcs.n	8004270 <xTaskCheckForTimeOut+0xa4>
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	1ad2      	subs	r2, r2, r3
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f7ff ff9b 	bl	80041a0 <vTaskInternalSetTimeOutState>
 800426a:	2300      	movs	r3, #0
 800426c:	61fb      	str	r3, [r7, #28]
 800426e:	e004      	b.n	800427a <xTaskCheckForTimeOut+0xae>
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	2200      	movs	r2, #0
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	2301      	movs	r3, #1
 8004278:	61fb      	str	r3, [r7, #28]
 800427a:	f000 feb3 	bl	8004fe4 <vPortExitCritical>
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	4618      	mov	r0, r3
 8004282:	3720      	adds	r7, #32
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	20000d54 	.word	0x20000d54
 800428c:	20000d68 	.word	0x20000d68

08004290 <vTaskMissedYield>:
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
 8004294:	4b03      	ldr	r3, [pc, #12]	; (80042a4 <vTaskMissedYield+0x14>)
 8004296:	2201      	movs	r2, #1
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	bf00      	nop
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	20000d64 	.word	0x20000d64

080042a8 <prvIdleTask>:
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	f000 f852 	bl	8004358 <prvCheckTasksWaitingTermination>
 80042b4:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <prvIdleTask+0x28>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d9f9      	bls.n	80042b0 <prvIdleTask+0x8>
 80042bc:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <prvIdleTask+0x2c>)
 80042be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	f3bf 8f4f 	dsb	sy
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	e7f0      	b.n	80042b0 <prvIdleTask+0x8>
 80042ce:	bf00      	nop
 80042d0:	20000880 	.word	0x20000880
 80042d4:	e000ed04 	.word	0xe000ed04

080042d8 <prvInitialiseTaskLists>:
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	2300      	movs	r3, #0
 80042e0:	607b      	str	r3, [r7, #4]
 80042e2:	e00c      	b.n	80042fe <prvInitialiseTaskLists+0x26>
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	4613      	mov	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4413      	add	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4a12      	ldr	r2, [pc, #72]	; (8004338 <prvInitialiseTaskLists+0x60>)
 80042f0:	4413      	add	r3, r2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fe fc2c 	bl	8002b50 <vListInitialise>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3301      	adds	r3, #1
 80042fc:	607b      	str	r3, [r7, #4]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b37      	cmp	r3, #55	; 0x37
 8004302:	d9ef      	bls.n	80042e4 <prvInitialiseTaskLists+0xc>
 8004304:	480d      	ldr	r0, [pc, #52]	; (800433c <prvInitialiseTaskLists+0x64>)
 8004306:	f7fe fc23 	bl	8002b50 <vListInitialise>
 800430a:	480d      	ldr	r0, [pc, #52]	; (8004340 <prvInitialiseTaskLists+0x68>)
 800430c:	f7fe fc20 	bl	8002b50 <vListInitialise>
 8004310:	480c      	ldr	r0, [pc, #48]	; (8004344 <prvInitialiseTaskLists+0x6c>)
 8004312:	f7fe fc1d 	bl	8002b50 <vListInitialise>
 8004316:	480c      	ldr	r0, [pc, #48]	; (8004348 <prvInitialiseTaskLists+0x70>)
 8004318:	f7fe fc1a 	bl	8002b50 <vListInitialise>
 800431c:	480b      	ldr	r0, [pc, #44]	; (800434c <prvInitialiseTaskLists+0x74>)
 800431e:	f7fe fc17 	bl	8002b50 <vListInitialise>
 8004322:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <prvInitialiseTaskLists+0x78>)
 8004324:	4a05      	ldr	r2, [pc, #20]	; (800433c <prvInitialiseTaskLists+0x64>)
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	4b0a      	ldr	r3, [pc, #40]	; (8004354 <prvInitialiseTaskLists+0x7c>)
 800432a:	4a05      	ldr	r2, [pc, #20]	; (8004340 <prvInitialiseTaskLists+0x68>)
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	bf00      	nop
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	20000880 	.word	0x20000880
 800433c:	20000ce0 	.word	0x20000ce0
 8004340:	20000cf4 	.word	0x20000cf4
 8004344:	20000d10 	.word	0x20000d10
 8004348:	20000d24 	.word	0x20000d24
 800434c:	20000d3c 	.word	0x20000d3c
 8004350:	20000d08 	.word	0x20000d08
 8004354:	20000d0c 	.word	0x20000d0c

08004358 <prvCheckTasksWaitingTermination>:
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	e019      	b.n	8004394 <prvCheckTasksWaitingTermination+0x3c>
 8004360:	f000 fe10 	bl	8004f84 <vPortEnterCritical>
 8004364:	4b10      	ldr	r3, [pc, #64]	; (80043a8 <prvCheckTasksWaitingTermination+0x50>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	607b      	str	r3, [r7, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3304      	adds	r3, #4
 8004370:	4618      	mov	r0, r3
 8004372:	f7fe fc77 	bl	8002c64 <uxListRemove>
 8004376:	4b0d      	ldr	r3, [pc, #52]	; (80043ac <prvCheckTasksWaitingTermination+0x54>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3b01      	subs	r3, #1
 800437c:	4a0b      	ldr	r2, [pc, #44]	; (80043ac <prvCheckTasksWaitingTermination+0x54>)
 800437e:	6013      	str	r3, [r2, #0]
 8004380:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <prvCheckTasksWaitingTermination+0x58>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3b01      	subs	r3, #1
 8004386:	4a0a      	ldr	r2, [pc, #40]	; (80043b0 <prvCheckTasksWaitingTermination+0x58>)
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	f000 fe2b 	bl	8004fe4 <vPortExitCritical>
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f810 	bl	80043b4 <prvDeleteTCB>
 8004394:	4b06      	ldr	r3, [pc, #24]	; (80043b0 <prvCheckTasksWaitingTermination+0x58>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1e1      	bne.n	8004360 <prvCheckTasksWaitingTermination+0x8>
 800439c:	bf00      	nop
 800439e:	bf00      	nop
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	20000d24 	.word	0x20000d24
 80043ac:	20000d50 	.word	0x20000d50
 80043b0:	20000d38 	.word	0x20000d38

080043b4 <prvDeleteTCB>:
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3354      	adds	r3, #84	; 0x54
 80043c0:	4618      	mov	r0, r3
 80043c2:	f001 fa1b 	bl	80057fc <_reclaim_reent>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d108      	bne.n	80043e2 <prvDeleteTCB+0x2e>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 ffc3 	bl	8005360 <vPortFree>
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 ffc0 	bl	8005360 <vPortFree>
 80043e0:	e018      	b.n	8004414 <prvDeleteTCB+0x60>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d103      	bne.n	80043f4 <prvDeleteTCB+0x40>
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 ffb7 	bl	8005360 <vPortFree>
 80043f2:	e00f      	b.n	8004414 <prvDeleteTCB+0x60>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d00a      	beq.n	8004414 <prvDeleteTCB+0x60>
 80043fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004402:	f383 8811 	msr	BASEPRI, r3
 8004406:	f3bf 8f6f 	isb	sy
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	bf00      	nop
 8004412:	e7fe      	b.n	8004412 <prvDeleteTCB+0x5e>
 8004414:	bf00      	nop
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <prvResetNextTaskUnblockTime>:
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <prvResetNextTaskUnblockTime+0x38>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d104      	bne.n	8004436 <prvResetNextTaskUnblockTime+0x1a>
 800442c:	4b0a      	ldr	r3, [pc, #40]	; (8004458 <prvResetNextTaskUnblockTime+0x3c>)
 800442e:	f04f 32ff 	mov.w	r2, #4294967295
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	e008      	b.n	8004448 <prvResetNextTaskUnblockTime+0x2c>
 8004436:	4b07      	ldr	r3, [pc, #28]	; (8004454 <prvResetNextTaskUnblockTime+0x38>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	607b      	str	r3, [r7, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	4a04      	ldr	r2, [pc, #16]	; (8004458 <prvResetNextTaskUnblockTime+0x3c>)
 8004446:	6013      	str	r3, [r2, #0]
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	20000d08 	.word	0x20000d08
 8004458:	20000d70 	.word	0x20000d70

0800445c <xTaskGetSchedulerState>:
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <xTaskGetSchedulerState+0x34>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d102      	bne.n	8004470 <xTaskGetSchedulerState+0x14>
 800446a:	2301      	movs	r3, #1
 800446c:	607b      	str	r3, [r7, #4]
 800446e:	e008      	b.n	8004482 <xTaskGetSchedulerState+0x26>
 8004470:	4b08      	ldr	r3, [pc, #32]	; (8004494 <xTaskGetSchedulerState+0x38>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d102      	bne.n	800447e <xTaskGetSchedulerState+0x22>
 8004478:	2302      	movs	r3, #2
 800447a:	607b      	str	r3, [r7, #4]
 800447c:	e001      	b.n	8004482 <xTaskGetSchedulerState+0x26>
 800447e:	2300      	movs	r3, #0
 8004480:	607b      	str	r3, [r7, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4618      	mov	r0, r3
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	20000d5c 	.word	0x20000d5c
 8004494:	20000d78 	.word	0x20000d78

08004498 <xTaskPriorityDisinherit>:
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	613b      	str	r3, [r7, #16]
 80044a4:	2300      	movs	r3, #0
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d056      	beq.n	800455c <xTaskPriorityDisinherit+0xc4>
 80044ae:	4b2e      	ldr	r3, [pc, #184]	; (8004568 <xTaskPriorityDisinherit+0xd0>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d00a      	beq.n	80044ce <xTaskPriorityDisinherit+0x36>
 80044b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044bc:	f383 8811 	msr	BASEPRI, r3
 80044c0:	f3bf 8f6f 	isb	sy
 80044c4:	f3bf 8f4f 	dsb	sy
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	bf00      	nop
 80044cc:	e7fe      	b.n	80044cc <xTaskPriorityDisinherit+0x34>
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10a      	bne.n	80044ec <xTaskPriorityDisinherit+0x54>
 80044d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044da:	f383 8811 	msr	BASEPRI, r3
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	60bb      	str	r3, [r7, #8]
 80044e8:	bf00      	nop
 80044ea:	e7fe      	b.n	80044ea <xTaskPriorityDisinherit+0x52>
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f0:	1e5a      	subs	r2, r3, #1
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	651a      	str	r2, [r3, #80]	; 0x50
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044fe:	429a      	cmp	r2, r3
 8004500:	d02c      	beq.n	800455c <xTaskPriorityDisinherit+0xc4>
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004506:	2b00      	cmp	r3, #0
 8004508:	d128      	bne.n	800455c <xTaskPriorityDisinherit+0xc4>
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	3304      	adds	r3, #4
 800450e:	4618      	mov	r0, r3
 8004510:	f7fe fba8 	bl	8002c64 <uxListRemove>
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	62da      	str	r2, [r3, #44]	; 0x2c
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004520:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	619a      	str	r2, [r3, #24]
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452c:	4b0f      	ldr	r3, [pc, #60]	; (800456c <xTaskPriorityDisinherit+0xd4>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	d903      	bls.n	800453c <xTaskPriorityDisinherit+0xa4>
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004538:	4a0c      	ldr	r2, [pc, #48]	; (800456c <xTaskPriorityDisinherit+0xd4>)
 800453a:	6013      	str	r3, [r2, #0]
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004540:	4613      	mov	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4a09      	ldr	r2, [pc, #36]	; (8004570 <xTaskPriorityDisinherit+0xd8>)
 800454a:	441a      	add	r2, r3
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	3304      	adds	r3, #4
 8004550:	4619      	mov	r1, r3
 8004552:	4610      	mov	r0, r2
 8004554:	f7fe fb29 	bl	8002baa <vListInsertEnd>
 8004558:	2301      	movs	r3, #1
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	4618      	mov	r0, r3
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	2000087c 	.word	0x2000087c
 800456c:	20000d58 	.word	0x20000d58
 8004570:	20000880 	.word	0x20000880

08004574 <uxTaskResetEventItemValue>:
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	4b09      	ldr	r3, [pc, #36]	; (80045a0 <uxTaskResetEventItemValue+0x2c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	607b      	str	r3, [r7, #4]
 8004582:	4b07      	ldr	r3, [pc, #28]	; (80045a0 <uxTaskResetEventItemValue+0x2c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004588:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <uxTaskResetEventItemValue+0x2c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8004590:	619a      	str	r2, [r3, #24]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4618      	mov	r0, r3
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	2000087c 	.word	0x2000087c

080045a4 <prvAddCurrentTaskToDelayedList>:
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
 80045ae:	4b21      	ldr	r3, [pc, #132]	; (8004634 <prvAddCurrentTaskToDelayedList+0x90>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	4b20      	ldr	r3, [pc, #128]	; (8004638 <prvAddCurrentTaskToDelayedList+0x94>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3304      	adds	r3, #4
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fe fb52 	bl	8002c64 <uxListRemove>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c6:	d10a      	bne.n	80045de <prvAddCurrentTaskToDelayedList+0x3a>
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d007      	beq.n	80045de <prvAddCurrentTaskToDelayedList+0x3a>
 80045ce:	4b1a      	ldr	r3, [pc, #104]	; (8004638 <prvAddCurrentTaskToDelayedList+0x94>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3304      	adds	r3, #4
 80045d4:	4619      	mov	r1, r3
 80045d6:	4819      	ldr	r0, [pc, #100]	; (800463c <prvAddCurrentTaskToDelayedList+0x98>)
 80045d8:	f7fe fae7 	bl	8002baa <vListInsertEnd>
 80045dc:	e026      	b.n	800462c <prvAddCurrentTaskToDelayedList+0x88>
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4413      	add	r3, r2
 80045e4:	60bb      	str	r3, [r7, #8]
 80045e6:	4b14      	ldr	r3, [pc, #80]	; (8004638 <prvAddCurrentTaskToDelayedList+0x94>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	605a      	str	r2, [r3, #4]
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d209      	bcs.n	800460a <prvAddCurrentTaskToDelayedList+0x66>
 80045f6:	4b12      	ldr	r3, [pc, #72]	; (8004640 <prvAddCurrentTaskToDelayedList+0x9c>)
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	4b0f      	ldr	r3, [pc, #60]	; (8004638 <prvAddCurrentTaskToDelayedList+0x94>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	3304      	adds	r3, #4
 8004600:	4619      	mov	r1, r3
 8004602:	4610      	mov	r0, r2
 8004604:	f7fe faf5 	bl	8002bf2 <vListInsert>
 8004608:	e010      	b.n	800462c <prvAddCurrentTaskToDelayedList+0x88>
 800460a:	4b0e      	ldr	r3, [pc, #56]	; (8004644 <prvAddCurrentTaskToDelayedList+0xa0>)
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	4b0a      	ldr	r3, [pc, #40]	; (8004638 <prvAddCurrentTaskToDelayedList+0x94>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3304      	adds	r3, #4
 8004614:	4619      	mov	r1, r3
 8004616:	4610      	mov	r0, r2
 8004618:	f7fe faeb 	bl	8002bf2 <vListInsert>
 800461c:	4b0a      	ldr	r3, [pc, #40]	; (8004648 <prvAddCurrentTaskToDelayedList+0xa4>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	429a      	cmp	r2, r3
 8004624:	d202      	bcs.n	800462c <prvAddCurrentTaskToDelayedList+0x88>
 8004626:	4a08      	ldr	r2, [pc, #32]	; (8004648 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	6013      	str	r3, [r2, #0]
 800462c:	bf00      	nop
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	20000d54 	.word	0x20000d54
 8004638:	2000087c 	.word	0x2000087c
 800463c:	20000d3c 	.word	0x20000d3c
 8004640:	20000d0c 	.word	0x20000d0c
 8004644:	20000d08 	.word	0x20000d08
 8004648:	20000d70 	.word	0x20000d70

0800464c <xTimerCreateTimerTask>:
 800464c:	b580      	push	{r7, lr}
 800464e:	b08a      	sub	sp, #40	; 0x28
 8004650:	af04      	add	r7, sp, #16
 8004652:	2300      	movs	r3, #0
 8004654:	617b      	str	r3, [r7, #20]
 8004656:	f000 fb07 	bl	8004c68 <prvCheckForValidListAndQueue>
 800465a:	4b1c      	ldr	r3, [pc, #112]	; (80046cc <xTimerCreateTimerTask+0x80>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d021      	beq.n	80046a6 <xTimerCreateTimerTask+0x5a>
 8004662:	2300      	movs	r3, #0
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	2300      	movs	r3, #0
 8004668:	60bb      	str	r3, [r7, #8]
 800466a:	1d3a      	adds	r2, r7, #4
 800466c:	f107 0108 	add.w	r1, r7, #8
 8004670:	f107 030c 	add.w	r3, r7, #12
 8004674:	4618      	mov	r0, r3
 8004676:	f7fd ffe5 	bl	8002644 <vApplicationGetTimerTaskMemory>
 800467a:	6879      	ldr	r1, [r7, #4]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	9202      	str	r2, [sp, #8]
 8004682:	9301      	str	r3, [sp, #4]
 8004684:	2302      	movs	r3, #2
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	2300      	movs	r3, #0
 800468a:	460a      	mov	r2, r1
 800468c:	4910      	ldr	r1, [pc, #64]	; (80046d0 <xTimerCreateTimerTask+0x84>)
 800468e:	4811      	ldr	r0, [pc, #68]	; (80046d4 <xTimerCreateTimerTask+0x88>)
 8004690:	f7fe fffe 	bl	8003690 <xTaskCreateStatic>
 8004694:	4603      	mov	r3, r0
 8004696:	4a10      	ldr	r2, [pc, #64]	; (80046d8 <xTimerCreateTimerTask+0x8c>)
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	4b0f      	ldr	r3, [pc, #60]	; (80046d8 <xTimerCreateTimerTask+0x8c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <xTimerCreateTimerTask+0x5a>
 80046a2:	2301      	movs	r3, #1
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10a      	bne.n	80046c2 <xTimerCreateTimerTask+0x76>
 80046ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	613b      	str	r3, [r7, #16]
 80046be:	bf00      	nop
 80046c0:	e7fe      	b.n	80046c0 <xTimerCreateTimerTask+0x74>
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	4618      	mov	r0, r3
 80046c6:	3718      	adds	r7, #24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	20000dac 	.word	0x20000dac
 80046d0:	0800654c 	.word	0x0800654c
 80046d4:	08004811 	.word	0x08004811
 80046d8:	20000db0 	.word	0x20000db0

080046dc <xTimerGenericCommand>:
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08a      	sub	sp, #40	; 0x28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
 80046e8:	603b      	str	r3, [r7, #0]
 80046ea:	2300      	movs	r3, #0
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10a      	bne.n	800470a <xTimerGenericCommand+0x2e>
 80046f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	623b      	str	r3, [r7, #32]
 8004706:	bf00      	nop
 8004708:	e7fe      	b.n	8004708 <xTimerGenericCommand+0x2c>
 800470a:	4b1a      	ldr	r3, [pc, #104]	; (8004774 <xTimerGenericCommand+0x98>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d02a      	beq.n	8004768 <xTimerGenericCommand+0x8c>
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	613b      	str	r3, [r7, #16]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	617b      	str	r3, [r7, #20]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	61bb      	str	r3, [r7, #24]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2b05      	cmp	r3, #5
 8004722:	dc18      	bgt.n	8004756 <xTimerGenericCommand+0x7a>
 8004724:	f7ff fe9a 	bl	800445c <xTaskGetSchedulerState>
 8004728:	4603      	mov	r3, r0
 800472a:	2b02      	cmp	r3, #2
 800472c:	d109      	bne.n	8004742 <xTimerGenericCommand+0x66>
 800472e:	4b11      	ldr	r3, [pc, #68]	; (8004774 <xTimerGenericCommand+0x98>)
 8004730:	6818      	ldr	r0, [r3, #0]
 8004732:	f107 0110 	add.w	r1, r7, #16
 8004736:	2300      	movs	r3, #0
 8004738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800473a:	f7fe fbc1 	bl	8002ec0 <xQueueGenericSend>
 800473e:	6278      	str	r0, [r7, #36]	; 0x24
 8004740:	e012      	b.n	8004768 <xTimerGenericCommand+0x8c>
 8004742:	4b0c      	ldr	r3, [pc, #48]	; (8004774 <xTimerGenericCommand+0x98>)
 8004744:	6818      	ldr	r0, [r3, #0]
 8004746:	f107 0110 	add.w	r1, r7, #16
 800474a:	2300      	movs	r3, #0
 800474c:	2200      	movs	r2, #0
 800474e:	f7fe fbb7 	bl	8002ec0 <xQueueGenericSend>
 8004752:	6278      	str	r0, [r7, #36]	; 0x24
 8004754:	e008      	b.n	8004768 <xTimerGenericCommand+0x8c>
 8004756:	4b07      	ldr	r3, [pc, #28]	; (8004774 <xTimerGenericCommand+0x98>)
 8004758:	6818      	ldr	r0, [r3, #0]
 800475a:	f107 0110 	add.w	r1, r7, #16
 800475e:	2300      	movs	r3, #0
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	f7fe fcab 	bl	80030bc <xQueueGenericSendFromISR>
 8004766:	6278      	str	r0, [r7, #36]	; 0x24
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	4618      	mov	r0, r3
 800476c:	3728      	adds	r7, #40	; 0x28
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20000dac 	.word	0x20000dac

08004778 <prvProcessExpiredTimer>:
 8004778:	b580      	push	{r7, lr}
 800477a:	b088      	sub	sp, #32
 800477c:	af02      	add	r7, sp, #8
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
 8004782:	4b22      	ldr	r3, [pc, #136]	; (800480c <prvProcessExpiredTimer+0x94>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	617b      	str	r3, [r7, #20]
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	3304      	adds	r3, #4
 8004790:	4618      	mov	r0, r3
 8004792:	f7fe fa67 	bl	8002c64 <uxListRemove>
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800479c:	f003 0304 	and.w	r3, r3, #4
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d022      	beq.n	80047ea <prvProcessExpiredTimer+0x72>
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	699a      	ldr	r2, [r3, #24]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	18d1      	adds	r1, r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	6978      	ldr	r0, [r7, #20]
 80047b2:	f000 f8d1 	bl	8004958 <prvInsertTimerInActiveList>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d01f      	beq.n	80047fc <prvProcessExpiredTimer+0x84>
 80047bc:	2300      	movs	r3, #0
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	2300      	movs	r3, #0
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	2100      	movs	r1, #0
 80047c6:	6978      	ldr	r0, [r7, #20]
 80047c8:	f7ff ff88 	bl	80046dc <xTimerGenericCommand>
 80047cc:	6138      	str	r0, [r7, #16]
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d113      	bne.n	80047fc <prvProcessExpiredTimer+0x84>
 80047d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	bf00      	nop
 80047e8:	e7fe      	b.n	80047e8 <prvProcessExpiredTimer+0x70>
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047f0:	f023 0301 	bic.w	r3, r3, #1
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	6978      	ldr	r0, [r7, #20]
 8004802:	4798      	blx	r3
 8004804:	bf00      	nop
 8004806:	3718      	adds	r7, #24
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	20000da4 	.word	0x20000da4

08004810 <prvTimerTask>:
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	f107 0308 	add.w	r3, r7, #8
 800481c:	4618      	mov	r0, r3
 800481e:	f000 f857 	bl	80048d0 <prvGetNextExpireTime>
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	4619      	mov	r1, r3
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 f803 	bl	8004834 <prvProcessTimerOrBlockTask>
 800482e:	f000 f8d5 	bl	80049dc <prvProcessReceivedCommands>
 8004832:	e7f1      	b.n	8004818 <prvTimerTask+0x8>

08004834 <prvProcessTimerOrBlockTask>:
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
 800483e:	f7ff f983 	bl	8003b48 <vTaskSuspendAll>
 8004842:	f107 0308 	add.w	r3, r7, #8
 8004846:	4618      	mov	r0, r3
 8004848:	f000 f866 	bl	8004918 <prvSampleTimeNow>
 800484c:	60f8      	str	r0, [r7, #12]
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d130      	bne.n	80048b6 <prvProcessTimerOrBlockTask+0x82>
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10a      	bne.n	8004870 <prvProcessTimerOrBlockTask+0x3c>
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	429a      	cmp	r2, r3
 8004860:	d806      	bhi.n	8004870 <prvProcessTimerOrBlockTask+0x3c>
 8004862:	f7ff f97f 	bl	8003b64 <xTaskResumeAll>
 8004866:	68f9      	ldr	r1, [r7, #12]
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7ff ff85 	bl	8004778 <prvProcessExpiredTimer>
 800486e:	e024      	b.n	80048ba <prvProcessTimerOrBlockTask+0x86>
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d008      	beq.n	8004888 <prvProcessTimerOrBlockTask+0x54>
 8004876:	4b13      	ldr	r3, [pc, #76]	; (80048c4 <prvProcessTimerOrBlockTask+0x90>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <prvProcessTimerOrBlockTask+0x50>
 8004880:	2301      	movs	r3, #1
 8004882:	e000      	b.n	8004886 <prvProcessTimerOrBlockTask+0x52>
 8004884:	2300      	movs	r3, #0
 8004886:	603b      	str	r3, [r7, #0]
 8004888:	4b0f      	ldr	r3, [pc, #60]	; (80048c8 <prvProcessTimerOrBlockTask+0x94>)
 800488a:	6818      	ldr	r0, [r3, #0]
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	4619      	mov	r1, r3
 8004896:	f7fe fec7 	bl	8003628 <vQueueWaitForMessageRestricted>
 800489a:	f7ff f963 	bl	8003b64 <xTaskResumeAll>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10a      	bne.n	80048ba <prvProcessTimerOrBlockTask+0x86>
 80048a4:	4b09      	ldr	r3, [pc, #36]	; (80048cc <prvProcessTimerOrBlockTask+0x98>)
 80048a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	f3bf 8f6f 	isb	sy
 80048b4:	e001      	b.n	80048ba <prvProcessTimerOrBlockTask+0x86>
 80048b6:	f7ff f955 	bl	8003b64 <xTaskResumeAll>
 80048ba:	bf00      	nop
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	20000da8 	.word	0x20000da8
 80048c8:	20000dac 	.word	0x20000dac
 80048cc:	e000ed04 	.word	0xe000ed04

080048d0 <prvGetNextExpireTime>:
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	4b0e      	ldr	r3, [pc, #56]	; (8004914 <prvGetNextExpireTime+0x44>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <prvGetNextExpireTime+0x16>
 80048e2:	2201      	movs	r2, #1
 80048e4:	e000      	b.n	80048e8 <prvGetNextExpireTime+0x18>
 80048e6:	2200      	movs	r2, #0
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d105      	bne.n	8004900 <prvGetNextExpireTime+0x30>
 80048f4:	4b07      	ldr	r3, [pc, #28]	; (8004914 <prvGetNextExpireTime+0x44>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	e001      	b.n	8004904 <prvGetNextExpireTime+0x34>
 8004900:	2300      	movs	r3, #0
 8004902:	60fb      	str	r3, [r7, #12]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	20000da4 	.word	0x20000da4

08004918 <prvSampleTimeNow>:
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	f7ff f9be 	bl	8003ca0 <xTaskGetTickCount>
 8004924:	60f8      	str	r0, [r7, #12]
 8004926:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <prvSampleTimeNow+0x3c>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	429a      	cmp	r2, r3
 800492e:	d205      	bcs.n	800493c <prvSampleTimeNow+0x24>
 8004930:	f000 f936 	bl	8004ba0 <prvSwitchTimerLists>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	601a      	str	r2, [r3, #0]
 800493a:	e002      	b.n	8004942 <prvSampleTimeNow+0x2a>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	4a04      	ldr	r2, [pc, #16]	; (8004954 <prvSampleTimeNow+0x3c>)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6013      	str	r3, [r2, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	20000db4 	.word	0x20000db4

08004958 <prvInsertTimerInActiveList>:
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
 8004964:	603b      	str	r3, [r7, #0]
 8004966:	2300      	movs	r3, #0
 8004968:	617b      	str	r3, [r7, #20]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	605a      	str	r2, [r3, #4]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	611a      	str	r2, [r3, #16]
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	429a      	cmp	r2, r3
 800497c:	d812      	bhi.n	80049a4 <prvInsertTimerInActiveList+0x4c>
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	1ad2      	subs	r2, r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	429a      	cmp	r2, r3
 800498a:	d302      	bcc.n	8004992 <prvInsertTimerInActiveList+0x3a>
 800498c:	2301      	movs	r3, #1
 800498e:	617b      	str	r3, [r7, #20]
 8004990:	e01b      	b.n	80049ca <prvInsertTimerInActiveList+0x72>
 8004992:	4b10      	ldr	r3, [pc, #64]	; (80049d4 <prvInsertTimerInActiveList+0x7c>)
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	3304      	adds	r3, #4
 800499a:	4619      	mov	r1, r3
 800499c:	4610      	mov	r0, r2
 800499e:	f7fe f928 	bl	8002bf2 <vListInsert>
 80049a2:	e012      	b.n	80049ca <prvInsertTimerInActiveList+0x72>
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d206      	bcs.n	80049ba <prvInsertTimerInActiveList+0x62>
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d302      	bcc.n	80049ba <prvInsertTimerInActiveList+0x62>
 80049b4:	2301      	movs	r3, #1
 80049b6:	617b      	str	r3, [r7, #20]
 80049b8:	e007      	b.n	80049ca <prvInsertTimerInActiveList+0x72>
 80049ba:	4b07      	ldr	r3, [pc, #28]	; (80049d8 <prvInsertTimerInActiveList+0x80>)
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	3304      	adds	r3, #4
 80049c2:	4619      	mov	r1, r3
 80049c4:	4610      	mov	r0, r2
 80049c6:	f7fe f914 	bl	8002bf2 <vListInsert>
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	4618      	mov	r0, r3
 80049ce:	3718      	adds	r7, #24
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	20000da8 	.word	0x20000da8
 80049d8:	20000da4 	.word	0x20000da4

080049dc <prvProcessReceivedCommands>:
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08e      	sub	sp, #56	; 0x38
 80049e0:	af02      	add	r7, sp, #8
 80049e2:	e0ca      	b.n	8004b7a <prvProcessReceivedCommands+0x19e>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	da18      	bge.n	8004a1c <prvProcessReceivedCommands+0x40>
 80049ea:	1d3b      	adds	r3, r7, #4
 80049ec:	3304      	adds	r3, #4
 80049ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10a      	bne.n	8004a0c <prvProcessReceivedCommands+0x30>
 80049f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fa:	f383 8811 	msr	BASEPRI, r3
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	61fb      	str	r3, [r7, #28]
 8004a08:	bf00      	nop
 8004a0a:	e7fe      	b.n	8004a0a <prvProcessReceivedCommands+0x2e>
 8004a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a12:	6850      	ldr	r0, [r2, #4]
 8004a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a16:	6892      	ldr	r2, [r2, #8]
 8004a18:	4611      	mov	r1, r2
 8004a1a:	4798      	blx	r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f2c0 80ab 	blt.w	8004b7a <prvProcessReceivedCommands+0x19e>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d004      	beq.n	8004a3a <prvProcessReceivedCommands+0x5e>
 8004a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a32:	3304      	adds	r3, #4
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fe f915 	bl	8002c64 <uxListRemove>
 8004a3a:	463b      	mov	r3, r7
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7ff ff6b 	bl	8004918 <prvSampleTimeNow>
 8004a42:	6278      	str	r0, [r7, #36]	; 0x24
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b09      	cmp	r3, #9
 8004a48:	f200 8096 	bhi.w	8004b78 <prvProcessReceivedCommands+0x19c>
 8004a4c:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <prvProcessReceivedCommands+0x78>)
 8004a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a52:	bf00      	nop
 8004a54:	08004a7d 	.word	0x08004a7d
 8004a58:	08004a7d 	.word	0x08004a7d
 8004a5c:	08004a7d 	.word	0x08004a7d
 8004a60:	08004af1 	.word	0x08004af1
 8004a64:	08004b05 	.word	0x08004b05
 8004a68:	08004b4f 	.word	0x08004b4f
 8004a6c:	08004a7d 	.word	0x08004a7d
 8004a70:	08004a7d 	.word	0x08004a7d
 8004a74:	08004af1 	.word	0x08004af1
 8004a78:	08004b05 	.word	0x08004b05
 8004a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a82:	f043 0301 	orr.w	r3, r3, #1
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	18d1      	adds	r1, r2, r3
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a9c:	f7ff ff5c 	bl	8004958 <prvInsertTimerInActiveList>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d069      	beq.n	8004b7a <prvProcessReceivedCommands+0x19e>
 8004aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aac:	4798      	blx	r3
 8004aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d05e      	beq.n	8004b7a <prvProcessReceivedCommands+0x19e>
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	441a      	add	r2, r3
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	2100      	movs	r1, #0
 8004acc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ace:	f7ff fe05 	bl	80046dc <xTimerGenericCommand>
 8004ad2:	6238      	str	r0, [r7, #32]
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d14f      	bne.n	8004b7a <prvProcessReceivedCommands+0x19e>
 8004ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ade:	f383 8811 	msr	BASEPRI, r3
 8004ae2:	f3bf 8f6f 	isb	sy
 8004ae6:	f3bf 8f4f 	dsb	sy
 8004aea:	61bb      	str	r3, [r7, #24]
 8004aec:	bf00      	nop
 8004aee:	e7fe      	b.n	8004aee <prvProcessReceivedCommands+0x112>
 8004af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004af6:	f023 0301 	bic.w	r3, r3, #1
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004b02:	e03a      	b.n	8004b7a <prvProcessReceivedCommands+0x19e>
 8004b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b0a:	f043 0301 	orr.w	r3, r3, #1
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1a:	619a      	str	r2, [r3, #24]
 8004b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10a      	bne.n	8004b3a <prvProcessReceivedCommands+0x15e>
 8004b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b28:	f383 8811 	msr	BASEPRI, r3
 8004b2c:	f3bf 8f6f 	isb	sy
 8004b30:	f3bf 8f4f 	dsb	sy
 8004b34:	617b      	str	r3, [r7, #20]
 8004b36:	bf00      	nop
 8004b38:	e7fe      	b.n	8004b38 <prvProcessReceivedCommands+0x15c>
 8004b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3c:	699a      	ldr	r2, [r3, #24]
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	18d1      	adds	r1, r2, r3
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b48:	f7ff ff06 	bl	8004958 <prvInsertTimerInActiveList>
 8004b4c:	e015      	b.n	8004b7a <prvProcessReceivedCommands+0x19e>
 8004b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d103      	bne.n	8004b64 <prvProcessReceivedCommands+0x188>
 8004b5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b5e:	f000 fbff 	bl	8005360 <vPortFree>
 8004b62:	e00a      	b.n	8004b7a <prvProcessReceivedCommands+0x19e>
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b6a:	f023 0301 	bic.w	r3, r3, #1
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004b76:	e000      	b.n	8004b7a <prvProcessReceivedCommands+0x19e>
 8004b78:	bf00      	nop
 8004b7a:	4b08      	ldr	r3, [pc, #32]	; (8004b9c <prvProcessReceivedCommands+0x1c0>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	1d39      	adds	r1, r7, #4
 8004b80:	2200      	movs	r2, #0
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fe fb36 	bl	80031f4 <xQueueReceive>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f47f af2a 	bne.w	80049e4 <prvProcessReceivedCommands+0x8>
 8004b90:	bf00      	nop
 8004b92:	bf00      	nop
 8004b94:	3730      	adds	r7, #48	; 0x30
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	20000dac 	.word	0x20000dac

08004ba0 <prvSwitchTimerLists>:
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b088      	sub	sp, #32
 8004ba4:	af02      	add	r7, sp, #8
 8004ba6:	e048      	b.n	8004c3a <prvSwitchTimerLists+0x9a>
 8004ba8:	4b2d      	ldr	r3, [pc, #180]	; (8004c60 <prvSwitchTimerLists+0xc0>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	613b      	str	r3, [r7, #16]
 8004bb2:	4b2b      	ldr	r3, [pc, #172]	; (8004c60 <prvSwitchTimerLists+0xc0>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	60fb      	str	r3, [r7, #12]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7fe f84f 	bl	8002c64 <uxListRemove>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	4798      	blx	r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d02e      	beq.n	8004c3a <prvSwitchTimerLists+0x9a>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	4413      	add	r3, r2
 8004be4:	60bb      	str	r3, [r7, #8]
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d90e      	bls.n	8004c0c <prvSwitchTimerLists+0x6c>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	605a      	str	r2, [r3, #4]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	611a      	str	r2, [r3, #16]
 8004bfa:	4b19      	ldr	r3, [pc, #100]	; (8004c60 <prvSwitchTimerLists+0xc0>)
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	3304      	adds	r3, #4
 8004c02:	4619      	mov	r1, r3
 8004c04:	4610      	mov	r0, r2
 8004c06:	f7fd fff4 	bl	8002bf2 <vListInsert>
 8004c0a:	e016      	b.n	8004c3a <prvSwitchTimerLists+0x9a>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	2300      	movs	r3, #0
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	2100      	movs	r1, #0
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f7ff fd60 	bl	80046dc <xTimerGenericCommand>
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10a      	bne.n	8004c3a <prvSwitchTimerLists+0x9a>
 8004c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	603b      	str	r3, [r7, #0]
 8004c36:	bf00      	nop
 8004c38:	e7fe      	b.n	8004c38 <prvSwitchTimerLists+0x98>
 8004c3a:	4b09      	ldr	r3, [pc, #36]	; (8004c60 <prvSwitchTimerLists+0xc0>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1b1      	bne.n	8004ba8 <prvSwitchTimerLists+0x8>
 8004c44:	4b06      	ldr	r3, [pc, #24]	; (8004c60 <prvSwitchTimerLists+0xc0>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	617b      	str	r3, [r7, #20]
 8004c4a:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <prvSwitchTimerLists+0xc4>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a04      	ldr	r2, [pc, #16]	; (8004c60 <prvSwitchTimerLists+0xc0>)
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	4a04      	ldr	r2, [pc, #16]	; (8004c64 <prvSwitchTimerLists+0xc4>)
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	6013      	str	r3, [r2, #0]
 8004c58:	bf00      	nop
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	20000da4 	.word	0x20000da4
 8004c64:	20000da8 	.word	0x20000da8

08004c68 <prvCheckForValidListAndQueue>:
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af02      	add	r7, sp, #8
 8004c6e:	f000 f989 	bl	8004f84 <vPortEnterCritical>
 8004c72:	4b15      	ldr	r3, [pc, #84]	; (8004cc8 <prvCheckForValidListAndQueue+0x60>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d120      	bne.n	8004cbc <prvCheckForValidListAndQueue+0x54>
 8004c7a:	4814      	ldr	r0, [pc, #80]	; (8004ccc <prvCheckForValidListAndQueue+0x64>)
 8004c7c:	f7fd ff68 	bl	8002b50 <vListInitialise>
 8004c80:	4813      	ldr	r0, [pc, #76]	; (8004cd0 <prvCheckForValidListAndQueue+0x68>)
 8004c82:	f7fd ff65 	bl	8002b50 <vListInitialise>
 8004c86:	4b13      	ldr	r3, [pc, #76]	; (8004cd4 <prvCheckForValidListAndQueue+0x6c>)
 8004c88:	4a10      	ldr	r2, [pc, #64]	; (8004ccc <prvCheckForValidListAndQueue+0x64>)
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	4b12      	ldr	r3, [pc, #72]	; (8004cd8 <prvCheckForValidListAndQueue+0x70>)
 8004c8e:	4a10      	ldr	r2, [pc, #64]	; (8004cd0 <prvCheckForValidListAndQueue+0x68>)
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	2300      	movs	r3, #0
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	4b11      	ldr	r3, [pc, #68]	; (8004cdc <prvCheckForValidListAndQueue+0x74>)
 8004c98:	4a11      	ldr	r2, [pc, #68]	; (8004ce0 <prvCheckForValidListAndQueue+0x78>)
 8004c9a:	2110      	movs	r1, #16
 8004c9c:	200a      	movs	r0, #10
 8004c9e:	f7fe f873 	bl	8002d88 <xQueueGenericCreateStatic>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	4a08      	ldr	r2, [pc, #32]	; (8004cc8 <prvCheckForValidListAndQueue+0x60>)
 8004ca6:	6013      	str	r3, [r2, #0]
 8004ca8:	4b07      	ldr	r3, [pc, #28]	; (8004cc8 <prvCheckForValidListAndQueue+0x60>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d005      	beq.n	8004cbc <prvCheckForValidListAndQueue+0x54>
 8004cb0:	4b05      	ldr	r3, [pc, #20]	; (8004cc8 <prvCheckForValidListAndQueue+0x60>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	490b      	ldr	r1, [pc, #44]	; (8004ce4 <prvCheckForValidListAndQueue+0x7c>)
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fe fc8c 	bl	80035d4 <vQueueAddToRegistry>
 8004cbc:	f000 f992 	bl	8004fe4 <vPortExitCritical>
 8004cc0:	bf00      	nop
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	20000dac 	.word	0x20000dac
 8004ccc:	20000d7c 	.word	0x20000d7c
 8004cd0:	20000d90 	.word	0x20000d90
 8004cd4:	20000da4 	.word	0x20000da4
 8004cd8:	20000da8 	.word	0x20000da8
 8004cdc:	20000e58 	.word	0x20000e58
 8004ce0:	20000db8 	.word	0x20000db8
 8004ce4:	08006554 	.word	0x08006554

08004ce8 <xTimerPendFunctionCallFromISR>:
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08a      	sub	sp, #40	; 0x28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
 8004cf4:	603b      	str	r3, [r7, #0]
 8004cf6:	f06f 0301 	mvn.w	r3, #1
 8004cfa:	617b      	str	r3, [r7, #20]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	61bb      	str	r3, [r7, #24]
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	61fb      	str	r3, [r7, #28]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	623b      	str	r3, [r7, #32]
 8004d08:	4b06      	ldr	r3, [pc, #24]	; (8004d24 <xTimerPendFunctionCallFromISR+0x3c>)
 8004d0a:	6818      	ldr	r0, [r3, #0]
 8004d0c:	f107 0114 	add.w	r1, r7, #20
 8004d10:	2300      	movs	r3, #0
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	f7fe f9d2 	bl	80030bc <xQueueGenericSendFromISR>
 8004d18:	6278      	str	r0, [r7, #36]	; 0x24
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3728      	adds	r7, #40	; 0x28
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	20000dac 	.word	0x20000dac

08004d28 <pxPortInitialiseStack>:
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	3b04      	subs	r3, #4
 8004d38:	60fb      	str	r3, [r7, #12]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	3b04      	subs	r3, #4
 8004d46:	60fb      	str	r3, [r7, #12]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f023 0201 	bic.w	r2, r3, #1
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	3b04      	subs	r3, #4
 8004d56:	60fb      	str	r3, [r7, #12]
 8004d58:	4a0c      	ldr	r2, [pc, #48]	; (8004d8c <pxPortInitialiseStack+0x64>)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	3b14      	subs	r3, #20
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	3b04      	subs	r3, #4
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f06f 0202 	mvn.w	r2, #2
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	3b20      	subs	r3, #32
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	4618      	mov	r0, r3
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	08004d91 	.word	0x08004d91

08004d90 <prvTaskExitError>:
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	2300      	movs	r3, #0
 8004d98:	607b      	str	r3, [r7, #4]
 8004d9a:	4b12      	ldr	r3, [pc, #72]	; (8004de4 <prvTaskExitError+0x54>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da2:	d00a      	beq.n	8004dba <prvTaskExitError+0x2a>
 8004da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	bf00      	nop
 8004db8:	e7fe      	b.n	8004db8 <prvTaskExitError+0x28>
 8004dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbe:	f383 8811 	msr	BASEPRI, r3
 8004dc2:	f3bf 8f6f 	isb	sy
 8004dc6:	f3bf 8f4f 	dsb	sy
 8004dca:	60bb      	str	r3, [r7, #8]
 8004dcc:	bf00      	nop
 8004dce:	bf00      	nop
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d0fc      	beq.n	8004dd0 <prvTaskExitError+0x40>
 8004dd6:	bf00      	nop
 8004dd8:	bf00      	nop
 8004dda:	3714      	adds	r7, #20
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr
 8004de4:	2000000c 	.word	0x2000000c
	...

08004df0 <SVC_Handler>:
 8004df0:	4b07      	ldr	r3, [pc, #28]	; (8004e10 <pxCurrentTCBConst2>)
 8004df2:	6819      	ldr	r1, [r3, #0]
 8004df4:	6808      	ldr	r0, [r1, #0]
 8004df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dfa:	f380 8809 	msr	PSP, r0
 8004dfe:	f3bf 8f6f 	isb	sy
 8004e02:	f04f 0000 	mov.w	r0, #0
 8004e06:	f380 8811 	msr	BASEPRI, r0
 8004e0a:	4770      	bx	lr
 8004e0c:	f3af 8000 	nop.w

08004e10 <pxCurrentTCBConst2>:
 8004e10:	2000087c 	.word	0x2000087c
 8004e14:	bf00      	nop
 8004e16:	bf00      	nop

08004e18 <prvPortStartFirstTask>:
 8004e18:	4808      	ldr	r0, [pc, #32]	; (8004e3c <prvPortStartFirstTask+0x24>)
 8004e1a:	6800      	ldr	r0, [r0, #0]
 8004e1c:	6800      	ldr	r0, [r0, #0]
 8004e1e:	f380 8808 	msr	MSP, r0
 8004e22:	f04f 0000 	mov.w	r0, #0
 8004e26:	f380 8814 	msr	CONTROL, r0
 8004e2a:	b662      	cpsie	i
 8004e2c:	b661      	cpsie	f
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	f3bf 8f6f 	isb	sy
 8004e36:	df00      	svc	0
 8004e38:	bf00      	nop
 8004e3a:	bf00      	nop
 8004e3c:	e000ed08 	.word	0xe000ed08

08004e40 <xPortStartScheduler>:
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	4b46      	ldr	r3, [pc, #280]	; (8004f60 <xPortStartScheduler+0x120>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a46      	ldr	r2, [pc, #280]	; (8004f64 <xPortStartScheduler+0x124>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d10a      	bne.n	8004e66 <xPortStartScheduler+0x26>
 8004e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	613b      	str	r3, [r7, #16]
 8004e62:	bf00      	nop
 8004e64:	e7fe      	b.n	8004e64 <xPortStartScheduler+0x24>
 8004e66:	4b3e      	ldr	r3, [pc, #248]	; (8004f60 <xPortStartScheduler+0x120>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a3f      	ldr	r2, [pc, #252]	; (8004f68 <xPortStartScheduler+0x128>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d10a      	bne.n	8004e86 <xPortStartScheduler+0x46>
 8004e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	60fb      	str	r3, [r7, #12]
 8004e82:	bf00      	nop
 8004e84:	e7fe      	b.n	8004e84 <xPortStartScheduler+0x44>
 8004e86:	4b39      	ldr	r3, [pc, #228]	; (8004f6c <xPortStartScheduler+0x12c>)
 8004e88:	617b      	str	r3, [r7, #20]
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	607b      	str	r3, [r7, #4]
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	22ff      	movs	r2, #255	; 0xff
 8004e96:	701a      	strb	r2, [r3, #0]
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	70fb      	strb	r3, [r7, #3]
 8004ea0:	78fb      	ldrb	r3, [r7, #3]
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	4b31      	ldr	r3, [pc, #196]	; (8004f70 <xPortStartScheduler+0x130>)
 8004eac:	701a      	strb	r2, [r3, #0]
 8004eae:	4b31      	ldr	r3, [pc, #196]	; (8004f74 <xPortStartScheduler+0x134>)
 8004eb0:	2207      	movs	r2, #7
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	e009      	b.n	8004eca <xPortStartScheduler+0x8a>
 8004eb6:	4b2f      	ldr	r3, [pc, #188]	; (8004f74 <xPortStartScheduler+0x134>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	4a2d      	ldr	r2, [pc, #180]	; (8004f74 <xPortStartScheduler+0x134>)
 8004ebe:	6013      	str	r3, [r2, #0]
 8004ec0:	78fb      	ldrb	r3, [r7, #3]
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	70fb      	strb	r3, [r7, #3]
 8004eca:	78fb      	ldrb	r3, [r7, #3]
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed2:	2b80      	cmp	r3, #128	; 0x80
 8004ed4:	d0ef      	beq.n	8004eb6 <xPortStartScheduler+0x76>
 8004ed6:	4b27      	ldr	r3, [pc, #156]	; (8004f74 <xPortStartScheduler+0x134>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f1c3 0307 	rsb	r3, r3, #7
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d00a      	beq.n	8004ef8 <xPortStartScheduler+0xb8>
 8004ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	60bb      	str	r3, [r7, #8]
 8004ef4:	bf00      	nop
 8004ef6:	e7fe      	b.n	8004ef6 <xPortStartScheduler+0xb6>
 8004ef8:	4b1e      	ldr	r3, [pc, #120]	; (8004f74 <xPortStartScheduler+0x134>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	021b      	lsls	r3, r3, #8
 8004efe:	4a1d      	ldr	r2, [pc, #116]	; (8004f74 <xPortStartScheduler+0x134>)
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	4b1c      	ldr	r3, [pc, #112]	; (8004f74 <xPortStartScheduler+0x134>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f0a:	4a1a      	ldr	r2, [pc, #104]	; (8004f74 <xPortStartScheduler+0x134>)
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	701a      	strb	r2, [r3, #0]
 8004f16:	4b18      	ldr	r3, [pc, #96]	; (8004f78 <xPortStartScheduler+0x138>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a17      	ldr	r2, [pc, #92]	; (8004f78 <xPortStartScheduler+0x138>)
 8004f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f20:	6013      	str	r3, [r2, #0]
 8004f22:	4b15      	ldr	r3, [pc, #84]	; (8004f78 <xPortStartScheduler+0x138>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a14      	ldr	r2, [pc, #80]	; (8004f78 <xPortStartScheduler+0x138>)
 8004f28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004f2c:	6013      	str	r3, [r2, #0]
 8004f2e:	f000 f8dd 	bl	80050ec <vPortSetupTimerInterrupt>
 8004f32:	4b12      	ldr	r3, [pc, #72]	; (8004f7c <xPortStartScheduler+0x13c>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]
 8004f38:	f000 f8fc 	bl	8005134 <vPortEnableVFP>
 8004f3c:	4b10      	ldr	r3, [pc, #64]	; (8004f80 <xPortStartScheduler+0x140>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a0f      	ldr	r2, [pc, #60]	; (8004f80 <xPortStartScheduler+0x140>)
 8004f42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004f46:	6013      	str	r3, [r2, #0]
 8004f48:	f7ff ff66 	bl	8004e18 <prvPortStartFirstTask>
 8004f4c:	f7fe ff72 	bl	8003e34 <vTaskSwitchContext>
 8004f50:	f7ff ff1e 	bl	8004d90 <prvTaskExitError>
 8004f54:	2300      	movs	r3, #0
 8004f56:	4618      	mov	r0, r3
 8004f58:	3718      	adds	r7, #24
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	e000ed00 	.word	0xe000ed00
 8004f64:	410fc271 	.word	0x410fc271
 8004f68:	410fc270 	.word	0x410fc270
 8004f6c:	e000e400 	.word	0xe000e400
 8004f70:	20000ea8 	.word	0x20000ea8
 8004f74:	20000eac 	.word	0x20000eac
 8004f78:	e000ed20 	.word	0xe000ed20
 8004f7c:	2000000c 	.word	0x2000000c
 8004f80:	e000ef34 	.word	0xe000ef34

08004f84 <vPortEnterCritical>:
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8e:	f383 8811 	msr	BASEPRI, r3
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	607b      	str	r3, [r7, #4]
 8004f9c:	bf00      	nop
 8004f9e:	4b0f      	ldr	r3, [pc, #60]	; (8004fdc <vPortEnterCritical+0x58>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	4a0d      	ldr	r2, [pc, #52]	; (8004fdc <vPortEnterCritical+0x58>)
 8004fa6:	6013      	str	r3, [r2, #0]
 8004fa8:	4b0c      	ldr	r3, [pc, #48]	; (8004fdc <vPortEnterCritical+0x58>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d10f      	bne.n	8004fd0 <vPortEnterCritical+0x4c>
 8004fb0:	4b0b      	ldr	r3, [pc, #44]	; (8004fe0 <vPortEnterCritical+0x5c>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <vPortEnterCritical+0x4c>
 8004fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbe:	f383 8811 	msr	BASEPRI, r3
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	f3bf 8f4f 	dsb	sy
 8004fca:	603b      	str	r3, [r7, #0]
 8004fcc:	bf00      	nop
 8004fce:	e7fe      	b.n	8004fce <vPortEnterCritical+0x4a>
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	2000000c 	.word	0x2000000c
 8004fe0:	e000ed04 	.word	0xe000ed04

08004fe4 <vPortExitCritical>:
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	4b12      	ldr	r3, [pc, #72]	; (8005034 <vPortExitCritical+0x50>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10a      	bne.n	8005008 <vPortExitCritical+0x24>
 8004ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff6:	f383 8811 	msr	BASEPRI, r3
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	607b      	str	r3, [r7, #4]
 8005004:	bf00      	nop
 8005006:	e7fe      	b.n	8005006 <vPortExitCritical+0x22>
 8005008:	4b0a      	ldr	r3, [pc, #40]	; (8005034 <vPortExitCritical+0x50>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3b01      	subs	r3, #1
 800500e:	4a09      	ldr	r2, [pc, #36]	; (8005034 <vPortExitCritical+0x50>)
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	4b08      	ldr	r3, [pc, #32]	; (8005034 <vPortExitCritical+0x50>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d105      	bne.n	8005026 <vPortExitCritical+0x42>
 800501a:	2300      	movs	r3, #0
 800501c:	603b      	str	r3, [r7, #0]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	f383 8811 	msr	BASEPRI, r3
 8005024:	bf00      	nop
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	2000000c 	.word	0x2000000c
	...

08005040 <PendSV_Handler>:
 8005040:	f3ef 8009 	mrs	r0, PSP
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	4b15      	ldr	r3, [pc, #84]	; (80050a0 <pxCurrentTCBConst>)
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	f01e 0f10 	tst.w	lr, #16
 8005050:	bf08      	it	eq
 8005052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800505a:	6010      	str	r0, [r2, #0]
 800505c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005060:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005064:	f380 8811 	msr	BASEPRI, r0
 8005068:	f3bf 8f4f 	dsb	sy
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f7fe fee0 	bl	8003e34 <vTaskSwitchContext>
 8005074:	f04f 0000 	mov.w	r0, #0
 8005078:	f380 8811 	msr	BASEPRI, r0
 800507c:	bc09      	pop	{r0, r3}
 800507e:	6819      	ldr	r1, [r3, #0]
 8005080:	6808      	ldr	r0, [r1, #0]
 8005082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005086:	f01e 0f10 	tst.w	lr, #16
 800508a:	bf08      	it	eq
 800508c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005090:	f380 8809 	msr	PSP, r0
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	f3af 8000 	nop.w

080050a0 <pxCurrentTCBConst>:
 80050a0:	2000087c 	.word	0x2000087c
 80050a4:	bf00      	nop
 80050a6:	bf00      	nop

080050a8 <xPortSysTickHandler>:
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	607b      	str	r3, [r7, #4]
 80050c0:	bf00      	nop
 80050c2:	f7fe fdfd 	bl	8003cc0 <xTaskIncrementTick>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <xPortSysTickHandler+0x2c>
 80050cc:	4b06      	ldr	r3, [pc, #24]	; (80050e8 <xPortSysTickHandler+0x40>)
 80050ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	2300      	movs	r3, #0
 80050d6:	603b      	str	r3, [r7, #0]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	bf00      	nop
 80050e0:	bf00      	nop
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	e000ed04 	.word	0xe000ed04

080050ec <vPortSetupTimerInterrupt>:
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <vPortSetupTimerInterrupt+0x34>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	4b0b      	ldr	r3, [pc, #44]	; (8005124 <vPortSetupTimerInterrupt+0x38>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	601a      	str	r2, [r3, #0]
 80050fc:	4b0a      	ldr	r3, [pc, #40]	; (8005128 <vPortSetupTimerInterrupt+0x3c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a0a      	ldr	r2, [pc, #40]	; (800512c <vPortSetupTimerInterrupt+0x40>)
 8005102:	fba2 2303 	umull	r2, r3, r2, r3
 8005106:	099b      	lsrs	r3, r3, #6
 8005108:	4a09      	ldr	r2, [pc, #36]	; (8005130 <vPortSetupTimerInterrupt+0x44>)
 800510a:	3b01      	subs	r3, #1
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	4b04      	ldr	r3, [pc, #16]	; (8005120 <vPortSetupTimerInterrupt+0x34>)
 8005110:	2207      	movs	r2, #7
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	bf00      	nop
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	e000e010 	.word	0xe000e010
 8005124:	e000e018 	.word	0xe000e018
 8005128:	20000000 	.word	0x20000000
 800512c:	10624dd3 	.word	0x10624dd3
 8005130:	e000e014 	.word	0xe000e014

08005134 <vPortEnableVFP>:
 8005134:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005144 <vPortEnableVFP+0x10>
 8005138:	6801      	ldr	r1, [r0, #0]
 800513a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800513e:	6001      	str	r1, [r0, #0]
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	e000ed88 	.word	0xe000ed88

08005148 <vPortValidateInterruptPriority>:
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	f3ef 8305 	mrs	r3, IPSR
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2b0f      	cmp	r3, #15
 8005158:	d914      	bls.n	8005184 <vPortValidateInterruptPriority+0x3c>
 800515a:	4a17      	ldr	r2, [pc, #92]	; (80051b8 <vPortValidateInterruptPriority+0x70>)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4413      	add	r3, r2
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	72fb      	strb	r3, [r7, #11]
 8005164:	4b15      	ldr	r3, [pc, #84]	; (80051bc <vPortValidateInterruptPriority+0x74>)
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	7afa      	ldrb	r2, [r7, #11]
 800516a:	429a      	cmp	r2, r3
 800516c:	d20a      	bcs.n	8005184 <vPortValidateInterruptPriority+0x3c>
 800516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	607b      	str	r3, [r7, #4]
 8005180:	bf00      	nop
 8005182:	e7fe      	b.n	8005182 <vPortValidateInterruptPriority+0x3a>
 8005184:	4b0e      	ldr	r3, [pc, #56]	; (80051c0 <vPortValidateInterruptPriority+0x78>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800518c:	4b0d      	ldr	r3, [pc, #52]	; (80051c4 <vPortValidateInterruptPriority+0x7c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	429a      	cmp	r2, r3
 8005192:	d90a      	bls.n	80051aa <vPortValidateInterruptPriority+0x62>
 8005194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	603b      	str	r3, [r7, #0]
 80051a6:	bf00      	nop
 80051a8:	e7fe      	b.n	80051a8 <vPortValidateInterruptPriority+0x60>
 80051aa:	bf00      	nop
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	e000e3f0 	.word	0xe000e3f0
 80051bc:	20000ea8 	.word	0x20000ea8
 80051c0:	e000ed0c 	.word	0xe000ed0c
 80051c4:	20000eac 	.word	0x20000eac

080051c8 <pvPortMalloc>:
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b08a      	sub	sp, #40	; 0x28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	2300      	movs	r3, #0
 80051d2:	61fb      	str	r3, [r7, #28]
 80051d4:	f7fe fcb8 	bl	8003b48 <vTaskSuspendAll>
 80051d8:	4b5b      	ldr	r3, [pc, #364]	; (8005348 <pvPortMalloc+0x180>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <pvPortMalloc+0x1c>
 80051e0:	f000 f920 	bl	8005424 <prvHeapInit>
 80051e4:	4b59      	ldr	r3, [pc, #356]	; (800534c <pvPortMalloc+0x184>)
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4013      	ands	r3, r2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f040 8093 	bne.w	8005318 <pvPortMalloc+0x150>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d01d      	beq.n	8005234 <pvPortMalloc+0x6c>
 80051f8:	2208      	movs	r2, #8
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4413      	add	r3, r2
 80051fe:	607b      	str	r3, [r7, #4]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f003 0307 	and.w	r3, r3, #7
 8005206:	2b00      	cmp	r3, #0
 8005208:	d014      	beq.n	8005234 <pvPortMalloc+0x6c>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f023 0307 	bic.w	r3, r3, #7
 8005210:	3308      	adds	r3, #8
 8005212:	607b      	str	r3, [r7, #4]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f003 0307 	and.w	r3, r3, #7
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00a      	beq.n	8005234 <pvPortMalloc+0x6c>
 800521e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	617b      	str	r3, [r7, #20]
 8005230:	bf00      	nop
 8005232:	e7fe      	b.n	8005232 <pvPortMalloc+0x6a>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d06e      	beq.n	8005318 <pvPortMalloc+0x150>
 800523a:	4b45      	ldr	r3, [pc, #276]	; (8005350 <pvPortMalloc+0x188>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	429a      	cmp	r2, r3
 8005242:	d869      	bhi.n	8005318 <pvPortMalloc+0x150>
 8005244:	4b43      	ldr	r3, [pc, #268]	; (8005354 <pvPortMalloc+0x18c>)
 8005246:	623b      	str	r3, [r7, #32]
 8005248:	4b42      	ldr	r3, [pc, #264]	; (8005354 <pvPortMalloc+0x18c>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	627b      	str	r3, [r7, #36]	; 0x24
 800524e:	e004      	b.n	800525a <pvPortMalloc+0x92>
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	623b      	str	r3, [r7, #32]
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	627b      	str	r3, [r7, #36]	; 0x24
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	429a      	cmp	r2, r3
 8005262:	d903      	bls.n	800526c <pvPortMalloc+0xa4>
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1f1      	bne.n	8005250 <pvPortMalloc+0x88>
 800526c:	4b36      	ldr	r3, [pc, #216]	; (8005348 <pvPortMalloc+0x180>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005272:	429a      	cmp	r2, r3
 8005274:	d050      	beq.n	8005318 <pvPortMalloc+0x150>
 8005276:	6a3b      	ldr	r3, [r7, #32]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2208      	movs	r2, #8
 800527c:	4413      	add	r3, r2
 800527e:	61fb      	str	r3, [r7, #28]
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	601a      	str	r2, [r3, #0]
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	1ad2      	subs	r2, r2, r3
 8005290:	2308      	movs	r3, #8
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	429a      	cmp	r2, r3
 8005296:	d91f      	bls.n	80052d8 <pvPortMalloc+0x110>
 8005298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4413      	add	r3, r2
 800529e:	61bb      	str	r3, [r7, #24]
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	f003 0307 	and.w	r3, r3, #7
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <pvPortMalloc+0xf8>
 80052aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ae:	f383 8811 	msr	BASEPRI, r3
 80052b2:	f3bf 8f6f 	isb	sy
 80052b6:	f3bf 8f4f 	dsb	sy
 80052ba:	613b      	str	r3, [r7, #16]
 80052bc:	bf00      	nop
 80052be:	e7fe      	b.n	80052be <pvPortMalloc+0xf6>
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	1ad2      	subs	r2, r2, r3
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	605a      	str	r2, [r3, #4]
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	605a      	str	r2, [r3, #4]
 80052d2:	69b8      	ldr	r0, [r7, #24]
 80052d4:	f000 f908 	bl	80054e8 <prvInsertBlockIntoFreeList>
 80052d8:	4b1d      	ldr	r3, [pc, #116]	; (8005350 <pvPortMalloc+0x188>)
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	4a1b      	ldr	r2, [pc, #108]	; (8005350 <pvPortMalloc+0x188>)
 80052e4:	6013      	str	r3, [r2, #0]
 80052e6:	4b1a      	ldr	r3, [pc, #104]	; (8005350 <pvPortMalloc+0x188>)
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	4b1b      	ldr	r3, [pc, #108]	; (8005358 <pvPortMalloc+0x190>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d203      	bcs.n	80052fa <pvPortMalloc+0x132>
 80052f2:	4b17      	ldr	r3, [pc, #92]	; (8005350 <pvPortMalloc+0x188>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a18      	ldr	r2, [pc, #96]	; (8005358 <pvPortMalloc+0x190>)
 80052f8:	6013      	str	r3, [r2, #0]
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	4b13      	ldr	r3, [pc, #76]	; (800534c <pvPortMalloc+0x184>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	431a      	orrs	r2, r3
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	605a      	str	r2, [r3, #4]
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	2200      	movs	r2, #0
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	4b13      	ldr	r3, [pc, #76]	; (800535c <pvPortMalloc+0x194>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	3301      	adds	r3, #1
 8005314:	4a11      	ldr	r2, [pc, #68]	; (800535c <pvPortMalloc+0x194>)
 8005316:	6013      	str	r3, [r2, #0]
 8005318:	f7fe fc24 	bl	8003b64 <xTaskResumeAll>
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <pvPortMalloc+0x174>
 8005326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532a:	f383 8811 	msr	BASEPRI, r3
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	bf00      	nop
 800533a:	e7fe      	b.n	800533a <pvPortMalloc+0x172>
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	4618      	mov	r0, r3
 8005340:	3728      	adds	r7, #40	; 0x28
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	20004ab8 	.word	0x20004ab8
 800534c:	20004acc 	.word	0x20004acc
 8005350:	20004abc 	.word	0x20004abc
 8005354:	20004ab0 	.word	0x20004ab0
 8005358:	20004ac0 	.word	0x20004ac0
 800535c:	20004ac4 	.word	0x20004ac4

08005360 <vPortFree>:
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	617b      	str	r3, [r7, #20]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d04d      	beq.n	800540e <vPortFree+0xae>
 8005372:	2308      	movs	r3, #8
 8005374:	425b      	negs	r3, r3
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	4413      	add	r3, r2
 800537a:	617b      	str	r3, [r7, #20]
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	613b      	str	r3, [r7, #16]
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	4b24      	ldr	r3, [pc, #144]	; (8005418 <vPortFree+0xb8>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4013      	ands	r3, r2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10a      	bne.n	80053a4 <vPortFree+0x44>
 800538e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	bf00      	nop
 80053a2:	e7fe      	b.n	80053a2 <vPortFree+0x42>
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00a      	beq.n	80053c2 <vPortFree+0x62>
 80053ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	60bb      	str	r3, [r7, #8]
 80053be:	bf00      	nop
 80053c0:	e7fe      	b.n	80053c0 <vPortFree+0x60>
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	4b14      	ldr	r3, [pc, #80]	; (8005418 <vPortFree+0xb8>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4013      	ands	r3, r2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d01e      	beq.n	800540e <vPortFree+0xae>
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d11a      	bne.n	800540e <vPortFree+0xae>
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	4b0e      	ldr	r3, [pc, #56]	; (8005418 <vPortFree+0xb8>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	43db      	mvns	r3, r3
 80053e2:	401a      	ands	r2, r3
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	605a      	str	r2, [r3, #4]
 80053e8:	f7fe fbae 	bl	8003b48 <vTaskSuspendAll>
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	4b0a      	ldr	r3, [pc, #40]	; (800541c <vPortFree+0xbc>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4413      	add	r3, r2
 80053f6:	4a09      	ldr	r2, [pc, #36]	; (800541c <vPortFree+0xbc>)
 80053f8:	6013      	str	r3, [r2, #0]
 80053fa:	6938      	ldr	r0, [r7, #16]
 80053fc:	f000 f874 	bl	80054e8 <prvInsertBlockIntoFreeList>
 8005400:	4b07      	ldr	r3, [pc, #28]	; (8005420 <vPortFree+0xc0>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	3301      	adds	r3, #1
 8005406:	4a06      	ldr	r2, [pc, #24]	; (8005420 <vPortFree+0xc0>)
 8005408:	6013      	str	r3, [r2, #0]
 800540a:	f7fe fbab 	bl	8003b64 <xTaskResumeAll>
 800540e:	bf00      	nop
 8005410:	3718      	adds	r7, #24
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	20004acc 	.word	0x20004acc
 800541c:	20004abc 	.word	0x20004abc
 8005420:	20004ac8 	.word	0x20004ac8

08005424 <prvHeapInit>:
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800542e:	60bb      	str	r3, [r7, #8]
 8005430:	4b27      	ldr	r3, [pc, #156]	; (80054d0 <prvHeapInit+0xac>)
 8005432:	60fb      	str	r3, [r7, #12]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f003 0307 	and.w	r3, r3, #7
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00c      	beq.n	8005458 <prvHeapInit+0x34>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	3307      	adds	r3, #7
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 0307 	bic.w	r3, r3, #7
 800544a:	60fb      	str	r3, [r7, #12]
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	4a1f      	ldr	r2, [pc, #124]	; (80054d0 <prvHeapInit+0xac>)
 8005454:	4413      	add	r3, r2
 8005456:	60bb      	str	r3, [r7, #8]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	607b      	str	r3, [r7, #4]
 800545c:	4a1d      	ldr	r2, [pc, #116]	; (80054d4 <prvHeapInit+0xb0>)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6013      	str	r3, [r2, #0]
 8005462:	4b1c      	ldr	r3, [pc, #112]	; (80054d4 <prvHeapInit+0xb0>)
 8005464:	2200      	movs	r2, #0
 8005466:	605a      	str	r2, [r3, #4]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	4413      	add	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	2208      	movs	r2, #8
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	1a9b      	subs	r3, r3, r2
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 0307 	bic.w	r3, r3, #7
 800547e:	60fb      	str	r3, [r7, #12]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4a15      	ldr	r2, [pc, #84]	; (80054d8 <prvHeapInit+0xb4>)
 8005484:	6013      	str	r3, [r2, #0]
 8005486:	4b14      	ldr	r3, [pc, #80]	; (80054d8 <prvHeapInit+0xb4>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2200      	movs	r2, #0
 800548c:	605a      	str	r2, [r3, #4]
 800548e:	4b12      	ldr	r3, [pc, #72]	; (80054d8 <prvHeapInit+0xb4>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	603b      	str	r3, [r7, #0]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	1ad2      	subs	r2, r2, r3
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	605a      	str	r2, [r3, #4]
 80054a4:	4b0c      	ldr	r3, [pc, #48]	; (80054d8 <prvHeapInit+0xb4>)
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	601a      	str	r2, [r3, #0]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	4a0a      	ldr	r2, [pc, #40]	; (80054dc <prvHeapInit+0xb8>)
 80054b2:	6013      	str	r3, [r2, #0]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	4a09      	ldr	r2, [pc, #36]	; (80054e0 <prvHeapInit+0xbc>)
 80054ba:	6013      	str	r3, [r2, #0]
 80054bc:	4b09      	ldr	r3, [pc, #36]	; (80054e4 <prvHeapInit+0xc0>)
 80054be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	bf00      	nop
 80054c6:	3714      	adds	r7, #20
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	20000eb0 	.word	0x20000eb0
 80054d4:	20004ab0 	.word	0x20004ab0
 80054d8:	20004ab8 	.word	0x20004ab8
 80054dc:	20004ac0 	.word	0x20004ac0
 80054e0:	20004abc 	.word	0x20004abc
 80054e4:	20004acc 	.word	0x20004acc

080054e8 <prvInsertBlockIntoFreeList>:
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	4b28      	ldr	r3, [pc, #160]	; (8005594 <prvInsertBlockIntoFreeList+0xac>)
 80054f2:	60fb      	str	r3, [r7, #12]
 80054f4:	e002      	b.n	80054fc <prvInsertBlockIntoFreeList+0x14>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	60fb      	str	r3, [r7, #12]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	429a      	cmp	r2, r3
 8005504:	d8f7      	bhi.n	80054f6 <prvInsertBlockIntoFreeList+0xe>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	60bb      	str	r3, [r7, #8]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	4413      	add	r3, r2
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	429a      	cmp	r2, r3
 8005516:	d108      	bne.n	800552a <prvInsertBlockIntoFreeList+0x42>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	441a      	add	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	605a      	str	r2, [r3, #4]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	607b      	str	r3, [r7, #4]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	60bb      	str	r3, [r7, #8]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	441a      	add	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	429a      	cmp	r2, r3
 800553c:	d118      	bne.n	8005570 <prvInsertBlockIntoFreeList+0x88>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	4b15      	ldr	r3, [pc, #84]	; (8005598 <prvInsertBlockIntoFreeList+0xb0>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	429a      	cmp	r2, r3
 8005548:	d00d      	beq.n	8005566 <prvInsertBlockIntoFreeList+0x7e>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	441a      	add	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	605a      	str	r2, [r3, #4]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	e008      	b.n	8005578 <prvInsertBlockIntoFreeList+0x90>
 8005566:	4b0c      	ldr	r3, [pc, #48]	; (8005598 <prvInsertBlockIntoFreeList+0xb0>)
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	e003      	b.n	8005578 <prvInsertBlockIntoFreeList+0x90>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	429a      	cmp	r2, r3
 800557e:	d002      	beq.n	8005586 <prvInsertBlockIntoFreeList+0x9e>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	bf00      	nop
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	20004ab0 	.word	0x20004ab0
 8005598:	20004ab8 	.word	0x20004ab8

0800559c <std>:
 800559c:	2300      	movs	r3, #0
 800559e:	b510      	push	{r4, lr}
 80055a0:	4604      	mov	r4, r0
 80055a2:	e9c0 3300 	strd	r3, r3, [r0]
 80055a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055aa:	6083      	str	r3, [r0, #8]
 80055ac:	8181      	strh	r1, [r0, #12]
 80055ae:	6643      	str	r3, [r0, #100]	; 0x64
 80055b0:	81c2      	strh	r2, [r0, #14]
 80055b2:	6183      	str	r3, [r0, #24]
 80055b4:	4619      	mov	r1, r3
 80055b6:	2208      	movs	r2, #8
 80055b8:	305c      	adds	r0, #92	; 0x5c
 80055ba:	f000 f906 	bl	80057ca <memset>
 80055be:	4b0d      	ldr	r3, [pc, #52]	; (80055f4 <std+0x58>)
 80055c0:	6263      	str	r3, [r4, #36]	; 0x24
 80055c2:	4b0d      	ldr	r3, [pc, #52]	; (80055f8 <std+0x5c>)
 80055c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80055c6:	4b0d      	ldr	r3, [pc, #52]	; (80055fc <std+0x60>)
 80055c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80055ca:	4b0d      	ldr	r3, [pc, #52]	; (8005600 <std+0x64>)
 80055cc:	6323      	str	r3, [r4, #48]	; 0x30
 80055ce:	4b0d      	ldr	r3, [pc, #52]	; (8005604 <std+0x68>)
 80055d0:	6224      	str	r4, [r4, #32]
 80055d2:	429c      	cmp	r4, r3
 80055d4:	d006      	beq.n	80055e4 <std+0x48>
 80055d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80055da:	4294      	cmp	r4, r2
 80055dc:	d002      	beq.n	80055e4 <std+0x48>
 80055de:	33d0      	adds	r3, #208	; 0xd0
 80055e0:	429c      	cmp	r4, r3
 80055e2:	d105      	bne.n	80055f0 <std+0x54>
 80055e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80055e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055ec:	f000 b9bc 	b.w	8005968 <__retarget_lock_init_recursive>
 80055f0:	bd10      	pop	{r4, pc}
 80055f2:	bf00      	nop
 80055f4:	08005745 	.word	0x08005745
 80055f8:	08005767 	.word	0x08005767
 80055fc:	0800579f 	.word	0x0800579f
 8005600:	080057c3 	.word	0x080057c3
 8005604:	20004ad0 	.word	0x20004ad0

08005608 <stdio_exit_handler>:
 8005608:	4a02      	ldr	r2, [pc, #8]	; (8005614 <stdio_exit_handler+0xc>)
 800560a:	4903      	ldr	r1, [pc, #12]	; (8005618 <stdio_exit_handler+0x10>)
 800560c:	4803      	ldr	r0, [pc, #12]	; (800561c <stdio_exit_handler+0x14>)
 800560e:	f000 b869 	b.w	80056e4 <_fwalk_sglue>
 8005612:	bf00      	nop
 8005614:	20000010 	.word	0x20000010
 8005618:	08006231 	.word	0x08006231
 800561c:	2000001c 	.word	0x2000001c

08005620 <cleanup_stdio>:
 8005620:	6841      	ldr	r1, [r0, #4]
 8005622:	4b0c      	ldr	r3, [pc, #48]	; (8005654 <cleanup_stdio+0x34>)
 8005624:	4299      	cmp	r1, r3
 8005626:	b510      	push	{r4, lr}
 8005628:	4604      	mov	r4, r0
 800562a:	d001      	beq.n	8005630 <cleanup_stdio+0x10>
 800562c:	f000 fe00 	bl	8006230 <_fflush_r>
 8005630:	68a1      	ldr	r1, [r4, #8]
 8005632:	4b09      	ldr	r3, [pc, #36]	; (8005658 <cleanup_stdio+0x38>)
 8005634:	4299      	cmp	r1, r3
 8005636:	d002      	beq.n	800563e <cleanup_stdio+0x1e>
 8005638:	4620      	mov	r0, r4
 800563a:	f000 fdf9 	bl	8006230 <_fflush_r>
 800563e:	68e1      	ldr	r1, [r4, #12]
 8005640:	4b06      	ldr	r3, [pc, #24]	; (800565c <cleanup_stdio+0x3c>)
 8005642:	4299      	cmp	r1, r3
 8005644:	d004      	beq.n	8005650 <cleanup_stdio+0x30>
 8005646:	4620      	mov	r0, r4
 8005648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800564c:	f000 bdf0 	b.w	8006230 <_fflush_r>
 8005650:	bd10      	pop	{r4, pc}
 8005652:	bf00      	nop
 8005654:	20004ad0 	.word	0x20004ad0
 8005658:	20004b38 	.word	0x20004b38
 800565c:	20004ba0 	.word	0x20004ba0

08005660 <global_stdio_init.part.0>:
 8005660:	b510      	push	{r4, lr}
 8005662:	4b0b      	ldr	r3, [pc, #44]	; (8005690 <global_stdio_init.part.0+0x30>)
 8005664:	4c0b      	ldr	r4, [pc, #44]	; (8005694 <global_stdio_init.part.0+0x34>)
 8005666:	4a0c      	ldr	r2, [pc, #48]	; (8005698 <global_stdio_init.part.0+0x38>)
 8005668:	601a      	str	r2, [r3, #0]
 800566a:	4620      	mov	r0, r4
 800566c:	2200      	movs	r2, #0
 800566e:	2104      	movs	r1, #4
 8005670:	f7ff ff94 	bl	800559c <std>
 8005674:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005678:	2201      	movs	r2, #1
 800567a:	2109      	movs	r1, #9
 800567c:	f7ff ff8e 	bl	800559c <std>
 8005680:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005684:	2202      	movs	r2, #2
 8005686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800568a:	2112      	movs	r1, #18
 800568c:	f7ff bf86 	b.w	800559c <std>
 8005690:	20004c08 	.word	0x20004c08
 8005694:	20004ad0 	.word	0x20004ad0
 8005698:	08005609 	.word	0x08005609

0800569c <__sfp_lock_acquire>:
 800569c:	4801      	ldr	r0, [pc, #4]	; (80056a4 <__sfp_lock_acquire+0x8>)
 800569e:	f000 b964 	b.w	800596a <__retarget_lock_acquire_recursive>
 80056a2:	bf00      	nop
 80056a4:	20004c11 	.word	0x20004c11

080056a8 <__sfp_lock_release>:
 80056a8:	4801      	ldr	r0, [pc, #4]	; (80056b0 <__sfp_lock_release+0x8>)
 80056aa:	f000 b95f 	b.w	800596c <__retarget_lock_release_recursive>
 80056ae:	bf00      	nop
 80056b0:	20004c11 	.word	0x20004c11

080056b4 <__sinit>:
 80056b4:	b510      	push	{r4, lr}
 80056b6:	4604      	mov	r4, r0
 80056b8:	f7ff fff0 	bl	800569c <__sfp_lock_acquire>
 80056bc:	6a23      	ldr	r3, [r4, #32]
 80056be:	b11b      	cbz	r3, 80056c8 <__sinit+0x14>
 80056c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056c4:	f7ff bff0 	b.w	80056a8 <__sfp_lock_release>
 80056c8:	4b04      	ldr	r3, [pc, #16]	; (80056dc <__sinit+0x28>)
 80056ca:	6223      	str	r3, [r4, #32]
 80056cc:	4b04      	ldr	r3, [pc, #16]	; (80056e0 <__sinit+0x2c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1f5      	bne.n	80056c0 <__sinit+0xc>
 80056d4:	f7ff ffc4 	bl	8005660 <global_stdio_init.part.0>
 80056d8:	e7f2      	b.n	80056c0 <__sinit+0xc>
 80056da:	bf00      	nop
 80056dc:	08005621 	.word	0x08005621
 80056e0:	20004c08 	.word	0x20004c08

080056e4 <_fwalk_sglue>:
 80056e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056e8:	4607      	mov	r7, r0
 80056ea:	4688      	mov	r8, r1
 80056ec:	4614      	mov	r4, r2
 80056ee:	2600      	movs	r6, #0
 80056f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056f4:	f1b9 0901 	subs.w	r9, r9, #1
 80056f8:	d505      	bpl.n	8005706 <_fwalk_sglue+0x22>
 80056fa:	6824      	ldr	r4, [r4, #0]
 80056fc:	2c00      	cmp	r4, #0
 80056fe:	d1f7      	bne.n	80056f0 <_fwalk_sglue+0xc>
 8005700:	4630      	mov	r0, r6
 8005702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005706:	89ab      	ldrh	r3, [r5, #12]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d907      	bls.n	800571c <_fwalk_sglue+0x38>
 800570c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005710:	3301      	adds	r3, #1
 8005712:	d003      	beq.n	800571c <_fwalk_sglue+0x38>
 8005714:	4629      	mov	r1, r5
 8005716:	4638      	mov	r0, r7
 8005718:	47c0      	blx	r8
 800571a:	4306      	orrs	r6, r0
 800571c:	3568      	adds	r5, #104	; 0x68
 800571e:	e7e9      	b.n	80056f4 <_fwalk_sglue+0x10>

08005720 <iprintf>:
 8005720:	b40f      	push	{r0, r1, r2, r3}
 8005722:	b507      	push	{r0, r1, r2, lr}
 8005724:	4906      	ldr	r1, [pc, #24]	; (8005740 <iprintf+0x20>)
 8005726:	ab04      	add	r3, sp, #16
 8005728:	6808      	ldr	r0, [r1, #0]
 800572a:	f853 2b04 	ldr.w	r2, [r3], #4
 800572e:	6881      	ldr	r1, [r0, #8]
 8005730:	9301      	str	r3, [sp, #4]
 8005732:	f000 fa4d 	bl	8005bd0 <_vfiprintf_r>
 8005736:	b003      	add	sp, #12
 8005738:	f85d eb04 	ldr.w	lr, [sp], #4
 800573c:	b004      	add	sp, #16
 800573e:	4770      	bx	lr
 8005740:	20000068 	.word	0x20000068

08005744 <__sread>:
 8005744:	b510      	push	{r4, lr}
 8005746:	460c      	mov	r4, r1
 8005748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800574c:	f000 f8be 	bl	80058cc <_read_r>
 8005750:	2800      	cmp	r0, #0
 8005752:	bfab      	itete	ge
 8005754:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005756:	89a3      	ldrhlt	r3, [r4, #12]
 8005758:	181b      	addge	r3, r3, r0
 800575a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800575e:	bfac      	ite	ge
 8005760:	6563      	strge	r3, [r4, #84]	; 0x54
 8005762:	81a3      	strhlt	r3, [r4, #12]
 8005764:	bd10      	pop	{r4, pc}

08005766 <__swrite>:
 8005766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800576a:	461f      	mov	r7, r3
 800576c:	898b      	ldrh	r3, [r1, #12]
 800576e:	05db      	lsls	r3, r3, #23
 8005770:	4605      	mov	r5, r0
 8005772:	460c      	mov	r4, r1
 8005774:	4616      	mov	r6, r2
 8005776:	d505      	bpl.n	8005784 <__swrite+0x1e>
 8005778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800577c:	2302      	movs	r3, #2
 800577e:	2200      	movs	r2, #0
 8005780:	f000 f892 	bl	80058a8 <_lseek_r>
 8005784:	89a3      	ldrh	r3, [r4, #12]
 8005786:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800578a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800578e:	81a3      	strh	r3, [r4, #12]
 8005790:	4632      	mov	r2, r6
 8005792:	463b      	mov	r3, r7
 8005794:	4628      	mov	r0, r5
 8005796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800579a:	f000 b8a9 	b.w	80058f0 <_write_r>

0800579e <__sseek>:
 800579e:	b510      	push	{r4, lr}
 80057a0:	460c      	mov	r4, r1
 80057a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057a6:	f000 f87f 	bl	80058a8 <_lseek_r>
 80057aa:	1c43      	adds	r3, r0, #1
 80057ac:	89a3      	ldrh	r3, [r4, #12]
 80057ae:	bf15      	itete	ne
 80057b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80057b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80057b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80057ba:	81a3      	strheq	r3, [r4, #12]
 80057bc:	bf18      	it	ne
 80057be:	81a3      	strhne	r3, [r4, #12]
 80057c0:	bd10      	pop	{r4, pc}

080057c2 <__sclose>:
 80057c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057c6:	f000 b809 	b.w	80057dc <_close_r>

080057ca <memset>:
 80057ca:	4402      	add	r2, r0
 80057cc:	4603      	mov	r3, r0
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d100      	bne.n	80057d4 <memset+0xa>
 80057d2:	4770      	bx	lr
 80057d4:	f803 1b01 	strb.w	r1, [r3], #1
 80057d8:	e7f9      	b.n	80057ce <memset+0x4>
	...

080057dc <_close_r>:
 80057dc:	b538      	push	{r3, r4, r5, lr}
 80057de:	4d06      	ldr	r5, [pc, #24]	; (80057f8 <_close_r+0x1c>)
 80057e0:	2300      	movs	r3, #0
 80057e2:	4604      	mov	r4, r0
 80057e4:	4608      	mov	r0, r1
 80057e6:	602b      	str	r3, [r5, #0]
 80057e8:	f7fb f969 	bl	8000abe <_close>
 80057ec:	1c43      	adds	r3, r0, #1
 80057ee:	d102      	bne.n	80057f6 <_close_r+0x1a>
 80057f0:	682b      	ldr	r3, [r5, #0]
 80057f2:	b103      	cbz	r3, 80057f6 <_close_r+0x1a>
 80057f4:	6023      	str	r3, [r4, #0]
 80057f6:	bd38      	pop	{r3, r4, r5, pc}
 80057f8:	20004c0c 	.word	0x20004c0c

080057fc <_reclaim_reent>:
 80057fc:	4b29      	ldr	r3, [pc, #164]	; (80058a4 <_reclaim_reent+0xa8>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4283      	cmp	r3, r0
 8005802:	b570      	push	{r4, r5, r6, lr}
 8005804:	4604      	mov	r4, r0
 8005806:	d04b      	beq.n	80058a0 <_reclaim_reent+0xa4>
 8005808:	69c3      	ldr	r3, [r0, #28]
 800580a:	b143      	cbz	r3, 800581e <_reclaim_reent+0x22>
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d144      	bne.n	800589c <_reclaim_reent+0xa0>
 8005812:	69e3      	ldr	r3, [r4, #28]
 8005814:	6819      	ldr	r1, [r3, #0]
 8005816:	b111      	cbz	r1, 800581e <_reclaim_reent+0x22>
 8005818:	4620      	mov	r0, r4
 800581a:	f000 f8b7 	bl	800598c <_free_r>
 800581e:	6961      	ldr	r1, [r4, #20]
 8005820:	b111      	cbz	r1, 8005828 <_reclaim_reent+0x2c>
 8005822:	4620      	mov	r0, r4
 8005824:	f000 f8b2 	bl	800598c <_free_r>
 8005828:	69e1      	ldr	r1, [r4, #28]
 800582a:	b111      	cbz	r1, 8005832 <_reclaim_reent+0x36>
 800582c:	4620      	mov	r0, r4
 800582e:	f000 f8ad 	bl	800598c <_free_r>
 8005832:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005834:	b111      	cbz	r1, 800583c <_reclaim_reent+0x40>
 8005836:	4620      	mov	r0, r4
 8005838:	f000 f8a8 	bl	800598c <_free_r>
 800583c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800583e:	b111      	cbz	r1, 8005846 <_reclaim_reent+0x4a>
 8005840:	4620      	mov	r0, r4
 8005842:	f000 f8a3 	bl	800598c <_free_r>
 8005846:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005848:	b111      	cbz	r1, 8005850 <_reclaim_reent+0x54>
 800584a:	4620      	mov	r0, r4
 800584c:	f000 f89e 	bl	800598c <_free_r>
 8005850:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005852:	b111      	cbz	r1, 800585a <_reclaim_reent+0x5e>
 8005854:	4620      	mov	r0, r4
 8005856:	f000 f899 	bl	800598c <_free_r>
 800585a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800585c:	b111      	cbz	r1, 8005864 <_reclaim_reent+0x68>
 800585e:	4620      	mov	r0, r4
 8005860:	f000 f894 	bl	800598c <_free_r>
 8005864:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005866:	b111      	cbz	r1, 800586e <_reclaim_reent+0x72>
 8005868:	4620      	mov	r0, r4
 800586a:	f000 f88f 	bl	800598c <_free_r>
 800586e:	6a23      	ldr	r3, [r4, #32]
 8005870:	b1b3      	cbz	r3, 80058a0 <_reclaim_reent+0xa4>
 8005872:	4620      	mov	r0, r4
 8005874:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005878:	4718      	bx	r3
 800587a:	5949      	ldr	r1, [r1, r5]
 800587c:	b941      	cbnz	r1, 8005890 <_reclaim_reent+0x94>
 800587e:	3504      	adds	r5, #4
 8005880:	69e3      	ldr	r3, [r4, #28]
 8005882:	2d80      	cmp	r5, #128	; 0x80
 8005884:	68d9      	ldr	r1, [r3, #12]
 8005886:	d1f8      	bne.n	800587a <_reclaim_reent+0x7e>
 8005888:	4620      	mov	r0, r4
 800588a:	f000 f87f 	bl	800598c <_free_r>
 800588e:	e7c0      	b.n	8005812 <_reclaim_reent+0x16>
 8005890:	680e      	ldr	r6, [r1, #0]
 8005892:	4620      	mov	r0, r4
 8005894:	f000 f87a 	bl	800598c <_free_r>
 8005898:	4631      	mov	r1, r6
 800589a:	e7ef      	b.n	800587c <_reclaim_reent+0x80>
 800589c:	2500      	movs	r5, #0
 800589e:	e7ef      	b.n	8005880 <_reclaim_reent+0x84>
 80058a0:	bd70      	pop	{r4, r5, r6, pc}
 80058a2:	bf00      	nop
 80058a4:	20000068 	.word	0x20000068

080058a8 <_lseek_r>:
 80058a8:	b538      	push	{r3, r4, r5, lr}
 80058aa:	4d07      	ldr	r5, [pc, #28]	; (80058c8 <_lseek_r+0x20>)
 80058ac:	4604      	mov	r4, r0
 80058ae:	4608      	mov	r0, r1
 80058b0:	4611      	mov	r1, r2
 80058b2:	2200      	movs	r2, #0
 80058b4:	602a      	str	r2, [r5, #0]
 80058b6:	461a      	mov	r2, r3
 80058b8:	f7fb f928 	bl	8000b0c <_lseek>
 80058bc:	1c43      	adds	r3, r0, #1
 80058be:	d102      	bne.n	80058c6 <_lseek_r+0x1e>
 80058c0:	682b      	ldr	r3, [r5, #0]
 80058c2:	b103      	cbz	r3, 80058c6 <_lseek_r+0x1e>
 80058c4:	6023      	str	r3, [r4, #0]
 80058c6:	bd38      	pop	{r3, r4, r5, pc}
 80058c8:	20004c0c 	.word	0x20004c0c

080058cc <_read_r>:
 80058cc:	b538      	push	{r3, r4, r5, lr}
 80058ce:	4d07      	ldr	r5, [pc, #28]	; (80058ec <_read_r+0x20>)
 80058d0:	4604      	mov	r4, r0
 80058d2:	4608      	mov	r0, r1
 80058d4:	4611      	mov	r1, r2
 80058d6:	2200      	movs	r2, #0
 80058d8:	602a      	str	r2, [r5, #0]
 80058da:	461a      	mov	r2, r3
 80058dc:	f7fb f8d2 	bl	8000a84 <_read>
 80058e0:	1c43      	adds	r3, r0, #1
 80058e2:	d102      	bne.n	80058ea <_read_r+0x1e>
 80058e4:	682b      	ldr	r3, [r5, #0]
 80058e6:	b103      	cbz	r3, 80058ea <_read_r+0x1e>
 80058e8:	6023      	str	r3, [r4, #0]
 80058ea:	bd38      	pop	{r3, r4, r5, pc}
 80058ec:	20004c0c 	.word	0x20004c0c

080058f0 <_write_r>:
 80058f0:	b538      	push	{r3, r4, r5, lr}
 80058f2:	4d07      	ldr	r5, [pc, #28]	; (8005910 <_write_r+0x20>)
 80058f4:	4604      	mov	r4, r0
 80058f6:	4608      	mov	r0, r1
 80058f8:	4611      	mov	r1, r2
 80058fa:	2200      	movs	r2, #0
 80058fc:	602a      	str	r2, [r5, #0]
 80058fe:	461a      	mov	r2, r3
 8005900:	f7fa fe6b 	bl	80005da <_write>
 8005904:	1c43      	adds	r3, r0, #1
 8005906:	d102      	bne.n	800590e <_write_r+0x1e>
 8005908:	682b      	ldr	r3, [r5, #0]
 800590a:	b103      	cbz	r3, 800590e <_write_r+0x1e>
 800590c:	6023      	str	r3, [r4, #0]
 800590e:	bd38      	pop	{r3, r4, r5, pc}
 8005910:	20004c0c 	.word	0x20004c0c

08005914 <__errno>:
 8005914:	4b01      	ldr	r3, [pc, #4]	; (800591c <__errno+0x8>)
 8005916:	6818      	ldr	r0, [r3, #0]
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	20000068 	.word	0x20000068

08005920 <__libc_init_array>:
 8005920:	b570      	push	{r4, r5, r6, lr}
 8005922:	4d0d      	ldr	r5, [pc, #52]	; (8005958 <__libc_init_array+0x38>)
 8005924:	4c0d      	ldr	r4, [pc, #52]	; (800595c <__libc_init_array+0x3c>)
 8005926:	1b64      	subs	r4, r4, r5
 8005928:	10a4      	asrs	r4, r4, #2
 800592a:	2600      	movs	r6, #0
 800592c:	42a6      	cmp	r6, r4
 800592e:	d109      	bne.n	8005944 <__libc_init_array+0x24>
 8005930:	4d0b      	ldr	r5, [pc, #44]	; (8005960 <__libc_init_array+0x40>)
 8005932:	4c0c      	ldr	r4, [pc, #48]	; (8005964 <__libc_init_array+0x44>)
 8005934:	f000 fdce 	bl	80064d4 <_init>
 8005938:	1b64      	subs	r4, r4, r5
 800593a:	10a4      	asrs	r4, r4, #2
 800593c:	2600      	movs	r6, #0
 800593e:	42a6      	cmp	r6, r4
 8005940:	d105      	bne.n	800594e <__libc_init_array+0x2e>
 8005942:	bd70      	pop	{r4, r5, r6, pc}
 8005944:	f855 3b04 	ldr.w	r3, [r5], #4
 8005948:	4798      	blx	r3
 800594a:	3601      	adds	r6, #1
 800594c:	e7ee      	b.n	800592c <__libc_init_array+0xc>
 800594e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005952:	4798      	blx	r3
 8005954:	3601      	adds	r6, #1
 8005956:	e7f2      	b.n	800593e <__libc_init_array+0x1e>
 8005958:	08006608 	.word	0x08006608
 800595c:	08006608 	.word	0x08006608
 8005960:	08006608 	.word	0x08006608
 8005964:	0800660c 	.word	0x0800660c

08005968 <__retarget_lock_init_recursive>:
 8005968:	4770      	bx	lr

0800596a <__retarget_lock_acquire_recursive>:
 800596a:	4770      	bx	lr

0800596c <__retarget_lock_release_recursive>:
 800596c:	4770      	bx	lr

0800596e <memcpy>:
 800596e:	440a      	add	r2, r1
 8005970:	4291      	cmp	r1, r2
 8005972:	f100 33ff 	add.w	r3, r0, #4294967295
 8005976:	d100      	bne.n	800597a <memcpy+0xc>
 8005978:	4770      	bx	lr
 800597a:	b510      	push	{r4, lr}
 800597c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005980:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005984:	4291      	cmp	r1, r2
 8005986:	d1f9      	bne.n	800597c <memcpy+0xe>
 8005988:	bd10      	pop	{r4, pc}
	...

0800598c <_free_r>:
 800598c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800598e:	2900      	cmp	r1, #0
 8005990:	d044      	beq.n	8005a1c <_free_r+0x90>
 8005992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005996:	9001      	str	r0, [sp, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	f1a1 0404 	sub.w	r4, r1, #4
 800599e:	bfb8      	it	lt
 80059a0:	18e4      	addlt	r4, r4, r3
 80059a2:	f000 f8df 	bl	8005b64 <__malloc_lock>
 80059a6:	4a1e      	ldr	r2, [pc, #120]	; (8005a20 <_free_r+0x94>)
 80059a8:	9801      	ldr	r0, [sp, #4]
 80059aa:	6813      	ldr	r3, [r2, #0]
 80059ac:	b933      	cbnz	r3, 80059bc <_free_r+0x30>
 80059ae:	6063      	str	r3, [r4, #4]
 80059b0:	6014      	str	r4, [r2, #0]
 80059b2:	b003      	add	sp, #12
 80059b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059b8:	f000 b8da 	b.w	8005b70 <__malloc_unlock>
 80059bc:	42a3      	cmp	r3, r4
 80059be:	d908      	bls.n	80059d2 <_free_r+0x46>
 80059c0:	6825      	ldr	r5, [r4, #0]
 80059c2:	1961      	adds	r1, r4, r5
 80059c4:	428b      	cmp	r3, r1
 80059c6:	bf01      	itttt	eq
 80059c8:	6819      	ldreq	r1, [r3, #0]
 80059ca:	685b      	ldreq	r3, [r3, #4]
 80059cc:	1949      	addeq	r1, r1, r5
 80059ce:	6021      	streq	r1, [r4, #0]
 80059d0:	e7ed      	b.n	80059ae <_free_r+0x22>
 80059d2:	461a      	mov	r2, r3
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	b10b      	cbz	r3, 80059dc <_free_r+0x50>
 80059d8:	42a3      	cmp	r3, r4
 80059da:	d9fa      	bls.n	80059d2 <_free_r+0x46>
 80059dc:	6811      	ldr	r1, [r2, #0]
 80059de:	1855      	adds	r5, r2, r1
 80059e0:	42a5      	cmp	r5, r4
 80059e2:	d10b      	bne.n	80059fc <_free_r+0x70>
 80059e4:	6824      	ldr	r4, [r4, #0]
 80059e6:	4421      	add	r1, r4
 80059e8:	1854      	adds	r4, r2, r1
 80059ea:	42a3      	cmp	r3, r4
 80059ec:	6011      	str	r1, [r2, #0]
 80059ee:	d1e0      	bne.n	80059b2 <_free_r+0x26>
 80059f0:	681c      	ldr	r4, [r3, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	6053      	str	r3, [r2, #4]
 80059f6:	440c      	add	r4, r1
 80059f8:	6014      	str	r4, [r2, #0]
 80059fa:	e7da      	b.n	80059b2 <_free_r+0x26>
 80059fc:	d902      	bls.n	8005a04 <_free_r+0x78>
 80059fe:	230c      	movs	r3, #12
 8005a00:	6003      	str	r3, [r0, #0]
 8005a02:	e7d6      	b.n	80059b2 <_free_r+0x26>
 8005a04:	6825      	ldr	r5, [r4, #0]
 8005a06:	1961      	adds	r1, r4, r5
 8005a08:	428b      	cmp	r3, r1
 8005a0a:	bf04      	itt	eq
 8005a0c:	6819      	ldreq	r1, [r3, #0]
 8005a0e:	685b      	ldreq	r3, [r3, #4]
 8005a10:	6063      	str	r3, [r4, #4]
 8005a12:	bf04      	itt	eq
 8005a14:	1949      	addeq	r1, r1, r5
 8005a16:	6021      	streq	r1, [r4, #0]
 8005a18:	6054      	str	r4, [r2, #4]
 8005a1a:	e7ca      	b.n	80059b2 <_free_r+0x26>
 8005a1c:	b003      	add	sp, #12
 8005a1e:	bd30      	pop	{r4, r5, pc}
 8005a20:	20004c14 	.word	0x20004c14

08005a24 <sbrk_aligned>:
 8005a24:	b570      	push	{r4, r5, r6, lr}
 8005a26:	4e0e      	ldr	r6, [pc, #56]	; (8005a60 <sbrk_aligned+0x3c>)
 8005a28:	460c      	mov	r4, r1
 8005a2a:	6831      	ldr	r1, [r6, #0]
 8005a2c:	4605      	mov	r5, r0
 8005a2e:	b911      	cbnz	r1, 8005a36 <sbrk_aligned+0x12>
 8005a30:	f000 fcbc 	bl	80063ac <_sbrk_r>
 8005a34:	6030      	str	r0, [r6, #0]
 8005a36:	4621      	mov	r1, r4
 8005a38:	4628      	mov	r0, r5
 8005a3a:	f000 fcb7 	bl	80063ac <_sbrk_r>
 8005a3e:	1c43      	adds	r3, r0, #1
 8005a40:	d00a      	beq.n	8005a58 <sbrk_aligned+0x34>
 8005a42:	1cc4      	adds	r4, r0, #3
 8005a44:	f024 0403 	bic.w	r4, r4, #3
 8005a48:	42a0      	cmp	r0, r4
 8005a4a:	d007      	beq.n	8005a5c <sbrk_aligned+0x38>
 8005a4c:	1a21      	subs	r1, r4, r0
 8005a4e:	4628      	mov	r0, r5
 8005a50:	f000 fcac 	bl	80063ac <_sbrk_r>
 8005a54:	3001      	adds	r0, #1
 8005a56:	d101      	bne.n	8005a5c <sbrk_aligned+0x38>
 8005a58:	f04f 34ff 	mov.w	r4, #4294967295
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	bd70      	pop	{r4, r5, r6, pc}
 8005a60:	20004c18 	.word	0x20004c18

08005a64 <_malloc_r>:
 8005a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a68:	1ccd      	adds	r5, r1, #3
 8005a6a:	f025 0503 	bic.w	r5, r5, #3
 8005a6e:	3508      	adds	r5, #8
 8005a70:	2d0c      	cmp	r5, #12
 8005a72:	bf38      	it	cc
 8005a74:	250c      	movcc	r5, #12
 8005a76:	2d00      	cmp	r5, #0
 8005a78:	4607      	mov	r7, r0
 8005a7a:	db01      	blt.n	8005a80 <_malloc_r+0x1c>
 8005a7c:	42a9      	cmp	r1, r5
 8005a7e:	d905      	bls.n	8005a8c <_malloc_r+0x28>
 8005a80:	230c      	movs	r3, #12
 8005a82:	603b      	str	r3, [r7, #0]
 8005a84:	2600      	movs	r6, #0
 8005a86:	4630      	mov	r0, r6
 8005a88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005b60 <_malloc_r+0xfc>
 8005a90:	f000 f868 	bl	8005b64 <__malloc_lock>
 8005a94:	f8d8 3000 	ldr.w	r3, [r8]
 8005a98:	461c      	mov	r4, r3
 8005a9a:	bb5c      	cbnz	r4, 8005af4 <_malloc_r+0x90>
 8005a9c:	4629      	mov	r1, r5
 8005a9e:	4638      	mov	r0, r7
 8005aa0:	f7ff ffc0 	bl	8005a24 <sbrk_aligned>
 8005aa4:	1c43      	adds	r3, r0, #1
 8005aa6:	4604      	mov	r4, r0
 8005aa8:	d155      	bne.n	8005b56 <_malloc_r+0xf2>
 8005aaa:	f8d8 4000 	ldr.w	r4, [r8]
 8005aae:	4626      	mov	r6, r4
 8005ab0:	2e00      	cmp	r6, #0
 8005ab2:	d145      	bne.n	8005b40 <_malloc_r+0xdc>
 8005ab4:	2c00      	cmp	r4, #0
 8005ab6:	d048      	beq.n	8005b4a <_malloc_r+0xe6>
 8005ab8:	6823      	ldr	r3, [r4, #0]
 8005aba:	4631      	mov	r1, r6
 8005abc:	4638      	mov	r0, r7
 8005abe:	eb04 0903 	add.w	r9, r4, r3
 8005ac2:	f000 fc73 	bl	80063ac <_sbrk_r>
 8005ac6:	4581      	cmp	r9, r0
 8005ac8:	d13f      	bne.n	8005b4a <_malloc_r+0xe6>
 8005aca:	6821      	ldr	r1, [r4, #0]
 8005acc:	1a6d      	subs	r5, r5, r1
 8005ace:	4629      	mov	r1, r5
 8005ad0:	4638      	mov	r0, r7
 8005ad2:	f7ff ffa7 	bl	8005a24 <sbrk_aligned>
 8005ad6:	3001      	adds	r0, #1
 8005ad8:	d037      	beq.n	8005b4a <_malloc_r+0xe6>
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	442b      	add	r3, r5
 8005ade:	6023      	str	r3, [r4, #0]
 8005ae0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d038      	beq.n	8005b5a <_malloc_r+0xf6>
 8005ae8:	685a      	ldr	r2, [r3, #4]
 8005aea:	42a2      	cmp	r2, r4
 8005aec:	d12b      	bne.n	8005b46 <_malloc_r+0xe2>
 8005aee:	2200      	movs	r2, #0
 8005af0:	605a      	str	r2, [r3, #4]
 8005af2:	e00f      	b.n	8005b14 <_malloc_r+0xb0>
 8005af4:	6822      	ldr	r2, [r4, #0]
 8005af6:	1b52      	subs	r2, r2, r5
 8005af8:	d41f      	bmi.n	8005b3a <_malloc_r+0xd6>
 8005afa:	2a0b      	cmp	r2, #11
 8005afc:	d917      	bls.n	8005b2e <_malloc_r+0xca>
 8005afe:	1961      	adds	r1, r4, r5
 8005b00:	42a3      	cmp	r3, r4
 8005b02:	6025      	str	r5, [r4, #0]
 8005b04:	bf18      	it	ne
 8005b06:	6059      	strne	r1, [r3, #4]
 8005b08:	6863      	ldr	r3, [r4, #4]
 8005b0a:	bf08      	it	eq
 8005b0c:	f8c8 1000 	streq.w	r1, [r8]
 8005b10:	5162      	str	r2, [r4, r5]
 8005b12:	604b      	str	r3, [r1, #4]
 8005b14:	4638      	mov	r0, r7
 8005b16:	f104 060b 	add.w	r6, r4, #11
 8005b1a:	f000 f829 	bl	8005b70 <__malloc_unlock>
 8005b1e:	f026 0607 	bic.w	r6, r6, #7
 8005b22:	1d23      	adds	r3, r4, #4
 8005b24:	1af2      	subs	r2, r6, r3
 8005b26:	d0ae      	beq.n	8005a86 <_malloc_r+0x22>
 8005b28:	1b9b      	subs	r3, r3, r6
 8005b2a:	50a3      	str	r3, [r4, r2]
 8005b2c:	e7ab      	b.n	8005a86 <_malloc_r+0x22>
 8005b2e:	42a3      	cmp	r3, r4
 8005b30:	6862      	ldr	r2, [r4, #4]
 8005b32:	d1dd      	bne.n	8005af0 <_malloc_r+0x8c>
 8005b34:	f8c8 2000 	str.w	r2, [r8]
 8005b38:	e7ec      	b.n	8005b14 <_malloc_r+0xb0>
 8005b3a:	4623      	mov	r3, r4
 8005b3c:	6864      	ldr	r4, [r4, #4]
 8005b3e:	e7ac      	b.n	8005a9a <_malloc_r+0x36>
 8005b40:	4634      	mov	r4, r6
 8005b42:	6876      	ldr	r6, [r6, #4]
 8005b44:	e7b4      	b.n	8005ab0 <_malloc_r+0x4c>
 8005b46:	4613      	mov	r3, r2
 8005b48:	e7cc      	b.n	8005ae4 <_malloc_r+0x80>
 8005b4a:	230c      	movs	r3, #12
 8005b4c:	603b      	str	r3, [r7, #0]
 8005b4e:	4638      	mov	r0, r7
 8005b50:	f000 f80e 	bl	8005b70 <__malloc_unlock>
 8005b54:	e797      	b.n	8005a86 <_malloc_r+0x22>
 8005b56:	6025      	str	r5, [r4, #0]
 8005b58:	e7dc      	b.n	8005b14 <_malloc_r+0xb0>
 8005b5a:	605b      	str	r3, [r3, #4]
 8005b5c:	deff      	udf	#255	; 0xff
 8005b5e:	bf00      	nop
 8005b60:	20004c14 	.word	0x20004c14

08005b64 <__malloc_lock>:
 8005b64:	4801      	ldr	r0, [pc, #4]	; (8005b6c <__malloc_lock+0x8>)
 8005b66:	f7ff bf00 	b.w	800596a <__retarget_lock_acquire_recursive>
 8005b6a:	bf00      	nop
 8005b6c:	20004c10 	.word	0x20004c10

08005b70 <__malloc_unlock>:
 8005b70:	4801      	ldr	r0, [pc, #4]	; (8005b78 <__malloc_unlock+0x8>)
 8005b72:	f7ff befb 	b.w	800596c <__retarget_lock_release_recursive>
 8005b76:	bf00      	nop
 8005b78:	20004c10 	.word	0x20004c10

08005b7c <__sfputc_r>:
 8005b7c:	6893      	ldr	r3, [r2, #8]
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	b410      	push	{r4}
 8005b84:	6093      	str	r3, [r2, #8]
 8005b86:	da08      	bge.n	8005b9a <__sfputc_r+0x1e>
 8005b88:	6994      	ldr	r4, [r2, #24]
 8005b8a:	42a3      	cmp	r3, r4
 8005b8c:	db01      	blt.n	8005b92 <__sfputc_r+0x16>
 8005b8e:	290a      	cmp	r1, #10
 8005b90:	d103      	bne.n	8005b9a <__sfputc_r+0x1e>
 8005b92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b96:	f000 bb73 	b.w	8006280 <__swbuf_r>
 8005b9a:	6813      	ldr	r3, [r2, #0]
 8005b9c:	1c58      	adds	r0, r3, #1
 8005b9e:	6010      	str	r0, [r2, #0]
 8005ba0:	7019      	strb	r1, [r3, #0]
 8005ba2:	4608      	mov	r0, r1
 8005ba4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <__sfputs_r>:
 8005baa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bac:	4606      	mov	r6, r0
 8005bae:	460f      	mov	r7, r1
 8005bb0:	4614      	mov	r4, r2
 8005bb2:	18d5      	adds	r5, r2, r3
 8005bb4:	42ac      	cmp	r4, r5
 8005bb6:	d101      	bne.n	8005bbc <__sfputs_r+0x12>
 8005bb8:	2000      	movs	r0, #0
 8005bba:	e007      	b.n	8005bcc <__sfputs_r+0x22>
 8005bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bc0:	463a      	mov	r2, r7
 8005bc2:	4630      	mov	r0, r6
 8005bc4:	f7ff ffda 	bl	8005b7c <__sfputc_r>
 8005bc8:	1c43      	adds	r3, r0, #1
 8005bca:	d1f3      	bne.n	8005bb4 <__sfputs_r+0xa>
 8005bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005bd0 <_vfiprintf_r>:
 8005bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd4:	460d      	mov	r5, r1
 8005bd6:	b09d      	sub	sp, #116	; 0x74
 8005bd8:	4614      	mov	r4, r2
 8005bda:	4698      	mov	r8, r3
 8005bdc:	4606      	mov	r6, r0
 8005bde:	b118      	cbz	r0, 8005be8 <_vfiprintf_r+0x18>
 8005be0:	6a03      	ldr	r3, [r0, #32]
 8005be2:	b90b      	cbnz	r3, 8005be8 <_vfiprintf_r+0x18>
 8005be4:	f7ff fd66 	bl	80056b4 <__sinit>
 8005be8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bea:	07d9      	lsls	r1, r3, #31
 8005bec:	d405      	bmi.n	8005bfa <_vfiprintf_r+0x2a>
 8005bee:	89ab      	ldrh	r3, [r5, #12]
 8005bf0:	059a      	lsls	r2, r3, #22
 8005bf2:	d402      	bmi.n	8005bfa <_vfiprintf_r+0x2a>
 8005bf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bf6:	f7ff feb8 	bl	800596a <__retarget_lock_acquire_recursive>
 8005bfa:	89ab      	ldrh	r3, [r5, #12]
 8005bfc:	071b      	lsls	r3, r3, #28
 8005bfe:	d501      	bpl.n	8005c04 <_vfiprintf_r+0x34>
 8005c00:	692b      	ldr	r3, [r5, #16]
 8005c02:	b99b      	cbnz	r3, 8005c2c <_vfiprintf_r+0x5c>
 8005c04:	4629      	mov	r1, r5
 8005c06:	4630      	mov	r0, r6
 8005c08:	f000 fb78 	bl	80062fc <__swsetup_r>
 8005c0c:	b170      	cbz	r0, 8005c2c <_vfiprintf_r+0x5c>
 8005c0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c10:	07dc      	lsls	r4, r3, #31
 8005c12:	d504      	bpl.n	8005c1e <_vfiprintf_r+0x4e>
 8005c14:	f04f 30ff 	mov.w	r0, #4294967295
 8005c18:	b01d      	add	sp, #116	; 0x74
 8005c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c1e:	89ab      	ldrh	r3, [r5, #12]
 8005c20:	0598      	lsls	r0, r3, #22
 8005c22:	d4f7      	bmi.n	8005c14 <_vfiprintf_r+0x44>
 8005c24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c26:	f7ff fea1 	bl	800596c <__retarget_lock_release_recursive>
 8005c2a:	e7f3      	b.n	8005c14 <_vfiprintf_r+0x44>
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8005c30:	2320      	movs	r3, #32
 8005c32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c36:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c3a:	2330      	movs	r3, #48	; 0x30
 8005c3c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005df0 <_vfiprintf_r+0x220>
 8005c40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c44:	f04f 0901 	mov.w	r9, #1
 8005c48:	4623      	mov	r3, r4
 8005c4a:	469a      	mov	sl, r3
 8005c4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c50:	b10a      	cbz	r2, 8005c56 <_vfiprintf_r+0x86>
 8005c52:	2a25      	cmp	r2, #37	; 0x25
 8005c54:	d1f9      	bne.n	8005c4a <_vfiprintf_r+0x7a>
 8005c56:	ebba 0b04 	subs.w	fp, sl, r4
 8005c5a:	d00b      	beq.n	8005c74 <_vfiprintf_r+0xa4>
 8005c5c:	465b      	mov	r3, fp
 8005c5e:	4622      	mov	r2, r4
 8005c60:	4629      	mov	r1, r5
 8005c62:	4630      	mov	r0, r6
 8005c64:	f7ff ffa1 	bl	8005baa <__sfputs_r>
 8005c68:	3001      	adds	r0, #1
 8005c6a:	f000 80a9 	beq.w	8005dc0 <_vfiprintf_r+0x1f0>
 8005c6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c70:	445a      	add	r2, fp
 8005c72:	9209      	str	r2, [sp, #36]	; 0x24
 8005c74:	f89a 3000 	ldrb.w	r3, [sl]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f000 80a1 	beq.w	8005dc0 <_vfiprintf_r+0x1f0>
 8005c7e:	2300      	movs	r3, #0
 8005c80:	f04f 32ff 	mov.w	r2, #4294967295
 8005c84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c88:	f10a 0a01 	add.w	sl, sl, #1
 8005c8c:	9304      	str	r3, [sp, #16]
 8005c8e:	9307      	str	r3, [sp, #28]
 8005c90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c94:	931a      	str	r3, [sp, #104]	; 0x68
 8005c96:	4654      	mov	r4, sl
 8005c98:	2205      	movs	r2, #5
 8005c9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c9e:	4854      	ldr	r0, [pc, #336]	; (8005df0 <_vfiprintf_r+0x220>)
 8005ca0:	f7fa faa6 	bl	80001f0 <memchr>
 8005ca4:	9a04      	ldr	r2, [sp, #16]
 8005ca6:	b9d8      	cbnz	r0, 8005ce0 <_vfiprintf_r+0x110>
 8005ca8:	06d1      	lsls	r1, r2, #27
 8005caa:	bf44      	itt	mi
 8005cac:	2320      	movmi	r3, #32
 8005cae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cb2:	0713      	lsls	r3, r2, #28
 8005cb4:	bf44      	itt	mi
 8005cb6:	232b      	movmi	r3, #43	; 0x2b
 8005cb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cbc:	f89a 3000 	ldrb.w	r3, [sl]
 8005cc0:	2b2a      	cmp	r3, #42	; 0x2a
 8005cc2:	d015      	beq.n	8005cf0 <_vfiprintf_r+0x120>
 8005cc4:	9a07      	ldr	r2, [sp, #28]
 8005cc6:	4654      	mov	r4, sl
 8005cc8:	2000      	movs	r0, #0
 8005cca:	f04f 0c0a 	mov.w	ip, #10
 8005cce:	4621      	mov	r1, r4
 8005cd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cd4:	3b30      	subs	r3, #48	; 0x30
 8005cd6:	2b09      	cmp	r3, #9
 8005cd8:	d94d      	bls.n	8005d76 <_vfiprintf_r+0x1a6>
 8005cda:	b1b0      	cbz	r0, 8005d0a <_vfiprintf_r+0x13a>
 8005cdc:	9207      	str	r2, [sp, #28]
 8005cde:	e014      	b.n	8005d0a <_vfiprintf_r+0x13a>
 8005ce0:	eba0 0308 	sub.w	r3, r0, r8
 8005ce4:	fa09 f303 	lsl.w	r3, r9, r3
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	9304      	str	r3, [sp, #16]
 8005cec:	46a2      	mov	sl, r4
 8005cee:	e7d2      	b.n	8005c96 <_vfiprintf_r+0xc6>
 8005cf0:	9b03      	ldr	r3, [sp, #12]
 8005cf2:	1d19      	adds	r1, r3, #4
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	9103      	str	r1, [sp, #12]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	bfbb      	ittet	lt
 8005cfc:	425b      	neglt	r3, r3
 8005cfe:	f042 0202 	orrlt.w	r2, r2, #2
 8005d02:	9307      	strge	r3, [sp, #28]
 8005d04:	9307      	strlt	r3, [sp, #28]
 8005d06:	bfb8      	it	lt
 8005d08:	9204      	strlt	r2, [sp, #16]
 8005d0a:	7823      	ldrb	r3, [r4, #0]
 8005d0c:	2b2e      	cmp	r3, #46	; 0x2e
 8005d0e:	d10c      	bne.n	8005d2a <_vfiprintf_r+0x15a>
 8005d10:	7863      	ldrb	r3, [r4, #1]
 8005d12:	2b2a      	cmp	r3, #42	; 0x2a
 8005d14:	d134      	bne.n	8005d80 <_vfiprintf_r+0x1b0>
 8005d16:	9b03      	ldr	r3, [sp, #12]
 8005d18:	1d1a      	adds	r2, r3, #4
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	9203      	str	r2, [sp, #12]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	bfb8      	it	lt
 8005d22:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d26:	3402      	adds	r4, #2
 8005d28:	9305      	str	r3, [sp, #20]
 8005d2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005e00 <_vfiprintf_r+0x230>
 8005d2e:	7821      	ldrb	r1, [r4, #0]
 8005d30:	2203      	movs	r2, #3
 8005d32:	4650      	mov	r0, sl
 8005d34:	f7fa fa5c 	bl	80001f0 <memchr>
 8005d38:	b138      	cbz	r0, 8005d4a <_vfiprintf_r+0x17a>
 8005d3a:	9b04      	ldr	r3, [sp, #16]
 8005d3c:	eba0 000a 	sub.w	r0, r0, sl
 8005d40:	2240      	movs	r2, #64	; 0x40
 8005d42:	4082      	lsls	r2, r0
 8005d44:	4313      	orrs	r3, r2
 8005d46:	3401      	adds	r4, #1
 8005d48:	9304      	str	r3, [sp, #16]
 8005d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d4e:	4829      	ldr	r0, [pc, #164]	; (8005df4 <_vfiprintf_r+0x224>)
 8005d50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d54:	2206      	movs	r2, #6
 8005d56:	f7fa fa4b 	bl	80001f0 <memchr>
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	d03f      	beq.n	8005dde <_vfiprintf_r+0x20e>
 8005d5e:	4b26      	ldr	r3, [pc, #152]	; (8005df8 <_vfiprintf_r+0x228>)
 8005d60:	bb1b      	cbnz	r3, 8005daa <_vfiprintf_r+0x1da>
 8005d62:	9b03      	ldr	r3, [sp, #12]
 8005d64:	3307      	adds	r3, #7
 8005d66:	f023 0307 	bic.w	r3, r3, #7
 8005d6a:	3308      	adds	r3, #8
 8005d6c:	9303      	str	r3, [sp, #12]
 8005d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d70:	443b      	add	r3, r7
 8005d72:	9309      	str	r3, [sp, #36]	; 0x24
 8005d74:	e768      	b.n	8005c48 <_vfiprintf_r+0x78>
 8005d76:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	2001      	movs	r0, #1
 8005d7e:	e7a6      	b.n	8005cce <_vfiprintf_r+0xfe>
 8005d80:	2300      	movs	r3, #0
 8005d82:	3401      	adds	r4, #1
 8005d84:	9305      	str	r3, [sp, #20]
 8005d86:	4619      	mov	r1, r3
 8005d88:	f04f 0c0a 	mov.w	ip, #10
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d92:	3a30      	subs	r2, #48	; 0x30
 8005d94:	2a09      	cmp	r2, #9
 8005d96:	d903      	bls.n	8005da0 <_vfiprintf_r+0x1d0>
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d0c6      	beq.n	8005d2a <_vfiprintf_r+0x15a>
 8005d9c:	9105      	str	r1, [sp, #20]
 8005d9e:	e7c4      	b.n	8005d2a <_vfiprintf_r+0x15a>
 8005da0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005da4:	4604      	mov	r4, r0
 8005da6:	2301      	movs	r3, #1
 8005da8:	e7f0      	b.n	8005d8c <_vfiprintf_r+0x1bc>
 8005daa:	ab03      	add	r3, sp, #12
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	462a      	mov	r2, r5
 8005db0:	4b12      	ldr	r3, [pc, #72]	; (8005dfc <_vfiprintf_r+0x22c>)
 8005db2:	a904      	add	r1, sp, #16
 8005db4:	4630      	mov	r0, r6
 8005db6:	f3af 8000 	nop.w
 8005dba:	4607      	mov	r7, r0
 8005dbc:	1c78      	adds	r0, r7, #1
 8005dbe:	d1d6      	bne.n	8005d6e <_vfiprintf_r+0x19e>
 8005dc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dc2:	07d9      	lsls	r1, r3, #31
 8005dc4:	d405      	bmi.n	8005dd2 <_vfiprintf_r+0x202>
 8005dc6:	89ab      	ldrh	r3, [r5, #12]
 8005dc8:	059a      	lsls	r2, r3, #22
 8005dca:	d402      	bmi.n	8005dd2 <_vfiprintf_r+0x202>
 8005dcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dce:	f7ff fdcd 	bl	800596c <__retarget_lock_release_recursive>
 8005dd2:	89ab      	ldrh	r3, [r5, #12]
 8005dd4:	065b      	lsls	r3, r3, #25
 8005dd6:	f53f af1d 	bmi.w	8005c14 <_vfiprintf_r+0x44>
 8005dda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ddc:	e71c      	b.n	8005c18 <_vfiprintf_r+0x48>
 8005dde:	ab03      	add	r3, sp, #12
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	462a      	mov	r2, r5
 8005de4:	4b05      	ldr	r3, [pc, #20]	; (8005dfc <_vfiprintf_r+0x22c>)
 8005de6:	a904      	add	r1, sp, #16
 8005de8:	4630      	mov	r0, r6
 8005dea:	f000 f879 	bl	8005ee0 <_printf_i>
 8005dee:	e7e4      	b.n	8005dba <_vfiprintf_r+0x1ea>
 8005df0:	080065cc 	.word	0x080065cc
 8005df4:	080065d6 	.word	0x080065d6
 8005df8:	00000000 	.word	0x00000000
 8005dfc:	08005bab 	.word	0x08005bab
 8005e00:	080065d2 	.word	0x080065d2

08005e04 <_printf_common>:
 8005e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e08:	4616      	mov	r6, r2
 8005e0a:	4699      	mov	r9, r3
 8005e0c:	688a      	ldr	r2, [r1, #8]
 8005e0e:	690b      	ldr	r3, [r1, #16]
 8005e10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e14:	4293      	cmp	r3, r2
 8005e16:	bfb8      	it	lt
 8005e18:	4613      	movlt	r3, r2
 8005e1a:	6033      	str	r3, [r6, #0]
 8005e1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e20:	4607      	mov	r7, r0
 8005e22:	460c      	mov	r4, r1
 8005e24:	b10a      	cbz	r2, 8005e2a <_printf_common+0x26>
 8005e26:	3301      	adds	r3, #1
 8005e28:	6033      	str	r3, [r6, #0]
 8005e2a:	6823      	ldr	r3, [r4, #0]
 8005e2c:	0699      	lsls	r1, r3, #26
 8005e2e:	bf42      	ittt	mi
 8005e30:	6833      	ldrmi	r3, [r6, #0]
 8005e32:	3302      	addmi	r3, #2
 8005e34:	6033      	strmi	r3, [r6, #0]
 8005e36:	6825      	ldr	r5, [r4, #0]
 8005e38:	f015 0506 	ands.w	r5, r5, #6
 8005e3c:	d106      	bne.n	8005e4c <_printf_common+0x48>
 8005e3e:	f104 0a19 	add.w	sl, r4, #25
 8005e42:	68e3      	ldr	r3, [r4, #12]
 8005e44:	6832      	ldr	r2, [r6, #0]
 8005e46:	1a9b      	subs	r3, r3, r2
 8005e48:	42ab      	cmp	r3, r5
 8005e4a:	dc26      	bgt.n	8005e9a <_printf_common+0x96>
 8005e4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e50:	1e13      	subs	r3, r2, #0
 8005e52:	6822      	ldr	r2, [r4, #0]
 8005e54:	bf18      	it	ne
 8005e56:	2301      	movne	r3, #1
 8005e58:	0692      	lsls	r2, r2, #26
 8005e5a:	d42b      	bmi.n	8005eb4 <_printf_common+0xb0>
 8005e5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e60:	4649      	mov	r1, r9
 8005e62:	4638      	mov	r0, r7
 8005e64:	47c0      	blx	r8
 8005e66:	3001      	adds	r0, #1
 8005e68:	d01e      	beq.n	8005ea8 <_printf_common+0xa4>
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	6922      	ldr	r2, [r4, #16]
 8005e6e:	f003 0306 	and.w	r3, r3, #6
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	bf02      	ittt	eq
 8005e76:	68e5      	ldreq	r5, [r4, #12]
 8005e78:	6833      	ldreq	r3, [r6, #0]
 8005e7a:	1aed      	subeq	r5, r5, r3
 8005e7c:	68a3      	ldr	r3, [r4, #8]
 8005e7e:	bf0c      	ite	eq
 8005e80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e84:	2500      	movne	r5, #0
 8005e86:	4293      	cmp	r3, r2
 8005e88:	bfc4      	itt	gt
 8005e8a:	1a9b      	subgt	r3, r3, r2
 8005e8c:	18ed      	addgt	r5, r5, r3
 8005e8e:	2600      	movs	r6, #0
 8005e90:	341a      	adds	r4, #26
 8005e92:	42b5      	cmp	r5, r6
 8005e94:	d11a      	bne.n	8005ecc <_printf_common+0xc8>
 8005e96:	2000      	movs	r0, #0
 8005e98:	e008      	b.n	8005eac <_printf_common+0xa8>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	4652      	mov	r2, sl
 8005e9e:	4649      	mov	r1, r9
 8005ea0:	4638      	mov	r0, r7
 8005ea2:	47c0      	blx	r8
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	d103      	bne.n	8005eb0 <_printf_common+0xac>
 8005ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8005eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eb0:	3501      	adds	r5, #1
 8005eb2:	e7c6      	b.n	8005e42 <_printf_common+0x3e>
 8005eb4:	18e1      	adds	r1, r4, r3
 8005eb6:	1c5a      	adds	r2, r3, #1
 8005eb8:	2030      	movs	r0, #48	; 0x30
 8005eba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ebe:	4422      	add	r2, r4
 8005ec0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ec4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ec8:	3302      	adds	r3, #2
 8005eca:	e7c7      	b.n	8005e5c <_printf_common+0x58>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	4622      	mov	r2, r4
 8005ed0:	4649      	mov	r1, r9
 8005ed2:	4638      	mov	r0, r7
 8005ed4:	47c0      	blx	r8
 8005ed6:	3001      	adds	r0, #1
 8005ed8:	d0e6      	beq.n	8005ea8 <_printf_common+0xa4>
 8005eda:	3601      	adds	r6, #1
 8005edc:	e7d9      	b.n	8005e92 <_printf_common+0x8e>
	...

08005ee0 <_printf_i>:
 8005ee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ee4:	7e0f      	ldrb	r7, [r1, #24]
 8005ee6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ee8:	2f78      	cmp	r7, #120	; 0x78
 8005eea:	4691      	mov	r9, r2
 8005eec:	4680      	mov	r8, r0
 8005eee:	460c      	mov	r4, r1
 8005ef0:	469a      	mov	sl, r3
 8005ef2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ef6:	d807      	bhi.n	8005f08 <_printf_i+0x28>
 8005ef8:	2f62      	cmp	r7, #98	; 0x62
 8005efa:	d80a      	bhi.n	8005f12 <_printf_i+0x32>
 8005efc:	2f00      	cmp	r7, #0
 8005efe:	f000 80d4 	beq.w	80060aa <_printf_i+0x1ca>
 8005f02:	2f58      	cmp	r7, #88	; 0x58
 8005f04:	f000 80c0 	beq.w	8006088 <_printf_i+0x1a8>
 8005f08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f10:	e03a      	b.n	8005f88 <_printf_i+0xa8>
 8005f12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f16:	2b15      	cmp	r3, #21
 8005f18:	d8f6      	bhi.n	8005f08 <_printf_i+0x28>
 8005f1a:	a101      	add	r1, pc, #4	; (adr r1, 8005f20 <_printf_i+0x40>)
 8005f1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f20:	08005f79 	.word	0x08005f79
 8005f24:	08005f8d 	.word	0x08005f8d
 8005f28:	08005f09 	.word	0x08005f09
 8005f2c:	08005f09 	.word	0x08005f09
 8005f30:	08005f09 	.word	0x08005f09
 8005f34:	08005f09 	.word	0x08005f09
 8005f38:	08005f8d 	.word	0x08005f8d
 8005f3c:	08005f09 	.word	0x08005f09
 8005f40:	08005f09 	.word	0x08005f09
 8005f44:	08005f09 	.word	0x08005f09
 8005f48:	08005f09 	.word	0x08005f09
 8005f4c:	08006091 	.word	0x08006091
 8005f50:	08005fb9 	.word	0x08005fb9
 8005f54:	0800604b 	.word	0x0800604b
 8005f58:	08005f09 	.word	0x08005f09
 8005f5c:	08005f09 	.word	0x08005f09
 8005f60:	080060b3 	.word	0x080060b3
 8005f64:	08005f09 	.word	0x08005f09
 8005f68:	08005fb9 	.word	0x08005fb9
 8005f6c:	08005f09 	.word	0x08005f09
 8005f70:	08005f09 	.word	0x08005f09
 8005f74:	08006053 	.word	0x08006053
 8005f78:	682b      	ldr	r3, [r5, #0]
 8005f7a:	1d1a      	adds	r2, r3, #4
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	602a      	str	r2, [r5, #0]
 8005f80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e09f      	b.n	80060cc <_printf_i+0x1ec>
 8005f8c:	6820      	ldr	r0, [r4, #0]
 8005f8e:	682b      	ldr	r3, [r5, #0]
 8005f90:	0607      	lsls	r7, r0, #24
 8005f92:	f103 0104 	add.w	r1, r3, #4
 8005f96:	6029      	str	r1, [r5, #0]
 8005f98:	d501      	bpl.n	8005f9e <_printf_i+0xbe>
 8005f9a:	681e      	ldr	r6, [r3, #0]
 8005f9c:	e003      	b.n	8005fa6 <_printf_i+0xc6>
 8005f9e:	0646      	lsls	r6, r0, #25
 8005fa0:	d5fb      	bpl.n	8005f9a <_printf_i+0xba>
 8005fa2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005fa6:	2e00      	cmp	r6, #0
 8005fa8:	da03      	bge.n	8005fb2 <_printf_i+0xd2>
 8005faa:	232d      	movs	r3, #45	; 0x2d
 8005fac:	4276      	negs	r6, r6
 8005fae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fb2:	485a      	ldr	r0, [pc, #360]	; (800611c <_printf_i+0x23c>)
 8005fb4:	230a      	movs	r3, #10
 8005fb6:	e012      	b.n	8005fde <_printf_i+0xfe>
 8005fb8:	682b      	ldr	r3, [r5, #0]
 8005fba:	6820      	ldr	r0, [r4, #0]
 8005fbc:	1d19      	adds	r1, r3, #4
 8005fbe:	6029      	str	r1, [r5, #0]
 8005fc0:	0605      	lsls	r5, r0, #24
 8005fc2:	d501      	bpl.n	8005fc8 <_printf_i+0xe8>
 8005fc4:	681e      	ldr	r6, [r3, #0]
 8005fc6:	e002      	b.n	8005fce <_printf_i+0xee>
 8005fc8:	0641      	lsls	r1, r0, #25
 8005fca:	d5fb      	bpl.n	8005fc4 <_printf_i+0xe4>
 8005fcc:	881e      	ldrh	r6, [r3, #0]
 8005fce:	4853      	ldr	r0, [pc, #332]	; (800611c <_printf_i+0x23c>)
 8005fd0:	2f6f      	cmp	r7, #111	; 0x6f
 8005fd2:	bf0c      	ite	eq
 8005fd4:	2308      	moveq	r3, #8
 8005fd6:	230a      	movne	r3, #10
 8005fd8:	2100      	movs	r1, #0
 8005fda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fde:	6865      	ldr	r5, [r4, #4]
 8005fe0:	60a5      	str	r5, [r4, #8]
 8005fe2:	2d00      	cmp	r5, #0
 8005fe4:	bfa2      	ittt	ge
 8005fe6:	6821      	ldrge	r1, [r4, #0]
 8005fe8:	f021 0104 	bicge.w	r1, r1, #4
 8005fec:	6021      	strge	r1, [r4, #0]
 8005fee:	b90e      	cbnz	r6, 8005ff4 <_printf_i+0x114>
 8005ff0:	2d00      	cmp	r5, #0
 8005ff2:	d04b      	beq.n	800608c <_printf_i+0x1ac>
 8005ff4:	4615      	mov	r5, r2
 8005ff6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ffa:	fb03 6711 	mls	r7, r3, r1, r6
 8005ffe:	5dc7      	ldrb	r7, [r0, r7]
 8006000:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006004:	4637      	mov	r7, r6
 8006006:	42bb      	cmp	r3, r7
 8006008:	460e      	mov	r6, r1
 800600a:	d9f4      	bls.n	8005ff6 <_printf_i+0x116>
 800600c:	2b08      	cmp	r3, #8
 800600e:	d10b      	bne.n	8006028 <_printf_i+0x148>
 8006010:	6823      	ldr	r3, [r4, #0]
 8006012:	07de      	lsls	r6, r3, #31
 8006014:	d508      	bpl.n	8006028 <_printf_i+0x148>
 8006016:	6923      	ldr	r3, [r4, #16]
 8006018:	6861      	ldr	r1, [r4, #4]
 800601a:	4299      	cmp	r1, r3
 800601c:	bfde      	ittt	le
 800601e:	2330      	movle	r3, #48	; 0x30
 8006020:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006024:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006028:	1b52      	subs	r2, r2, r5
 800602a:	6122      	str	r2, [r4, #16]
 800602c:	f8cd a000 	str.w	sl, [sp]
 8006030:	464b      	mov	r3, r9
 8006032:	aa03      	add	r2, sp, #12
 8006034:	4621      	mov	r1, r4
 8006036:	4640      	mov	r0, r8
 8006038:	f7ff fee4 	bl	8005e04 <_printf_common>
 800603c:	3001      	adds	r0, #1
 800603e:	d14a      	bne.n	80060d6 <_printf_i+0x1f6>
 8006040:	f04f 30ff 	mov.w	r0, #4294967295
 8006044:	b004      	add	sp, #16
 8006046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	f043 0320 	orr.w	r3, r3, #32
 8006050:	6023      	str	r3, [r4, #0]
 8006052:	4833      	ldr	r0, [pc, #204]	; (8006120 <_printf_i+0x240>)
 8006054:	2778      	movs	r7, #120	; 0x78
 8006056:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800605a:	6823      	ldr	r3, [r4, #0]
 800605c:	6829      	ldr	r1, [r5, #0]
 800605e:	061f      	lsls	r7, r3, #24
 8006060:	f851 6b04 	ldr.w	r6, [r1], #4
 8006064:	d402      	bmi.n	800606c <_printf_i+0x18c>
 8006066:	065f      	lsls	r7, r3, #25
 8006068:	bf48      	it	mi
 800606a:	b2b6      	uxthmi	r6, r6
 800606c:	07df      	lsls	r7, r3, #31
 800606e:	bf48      	it	mi
 8006070:	f043 0320 	orrmi.w	r3, r3, #32
 8006074:	6029      	str	r1, [r5, #0]
 8006076:	bf48      	it	mi
 8006078:	6023      	strmi	r3, [r4, #0]
 800607a:	b91e      	cbnz	r6, 8006084 <_printf_i+0x1a4>
 800607c:	6823      	ldr	r3, [r4, #0]
 800607e:	f023 0320 	bic.w	r3, r3, #32
 8006082:	6023      	str	r3, [r4, #0]
 8006084:	2310      	movs	r3, #16
 8006086:	e7a7      	b.n	8005fd8 <_printf_i+0xf8>
 8006088:	4824      	ldr	r0, [pc, #144]	; (800611c <_printf_i+0x23c>)
 800608a:	e7e4      	b.n	8006056 <_printf_i+0x176>
 800608c:	4615      	mov	r5, r2
 800608e:	e7bd      	b.n	800600c <_printf_i+0x12c>
 8006090:	682b      	ldr	r3, [r5, #0]
 8006092:	6826      	ldr	r6, [r4, #0]
 8006094:	6961      	ldr	r1, [r4, #20]
 8006096:	1d18      	adds	r0, r3, #4
 8006098:	6028      	str	r0, [r5, #0]
 800609a:	0635      	lsls	r5, r6, #24
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	d501      	bpl.n	80060a4 <_printf_i+0x1c4>
 80060a0:	6019      	str	r1, [r3, #0]
 80060a2:	e002      	b.n	80060aa <_printf_i+0x1ca>
 80060a4:	0670      	lsls	r0, r6, #25
 80060a6:	d5fb      	bpl.n	80060a0 <_printf_i+0x1c0>
 80060a8:	8019      	strh	r1, [r3, #0]
 80060aa:	2300      	movs	r3, #0
 80060ac:	6123      	str	r3, [r4, #16]
 80060ae:	4615      	mov	r5, r2
 80060b0:	e7bc      	b.n	800602c <_printf_i+0x14c>
 80060b2:	682b      	ldr	r3, [r5, #0]
 80060b4:	1d1a      	adds	r2, r3, #4
 80060b6:	602a      	str	r2, [r5, #0]
 80060b8:	681d      	ldr	r5, [r3, #0]
 80060ba:	6862      	ldr	r2, [r4, #4]
 80060bc:	2100      	movs	r1, #0
 80060be:	4628      	mov	r0, r5
 80060c0:	f7fa f896 	bl	80001f0 <memchr>
 80060c4:	b108      	cbz	r0, 80060ca <_printf_i+0x1ea>
 80060c6:	1b40      	subs	r0, r0, r5
 80060c8:	6060      	str	r0, [r4, #4]
 80060ca:	6863      	ldr	r3, [r4, #4]
 80060cc:	6123      	str	r3, [r4, #16]
 80060ce:	2300      	movs	r3, #0
 80060d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060d4:	e7aa      	b.n	800602c <_printf_i+0x14c>
 80060d6:	6923      	ldr	r3, [r4, #16]
 80060d8:	462a      	mov	r2, r5
 80060da:	4649      	mov	r1, r9
 80060dc:	4640      	mov	r0, r8
 80060de:	47d0      	blx	sl
 80060e0:	3001      	adds	r0, #1
 80060e2:	d0ad      	beq.n	8006040 <_printf_i+0x160>
 80060e4:	6823      	ldr	r3, [r4, #0]
 80060e6:	079b      	lsls	r3, r3, #30
 80060e8:	d413      	bmi.n	8006112 <_printf_i+0x232>
 80060ea:	68e0      	ldr	r0, [r4, #12]
 80060ec:	9b03      	ldr	r3, [sp, #12]
 80060ee:	4298      	cmp	r0, r3
 80060f0:	bfb8      	it	lt
 80060f2:	4618      	movlt	r0, r3
 80060f4:	e7a6      	b.n	8006044 <_printf_i+0x164>
 80060f6:	2301      	movs	r3, #1
 80060f8:	4632      	mov	r2, r6
 80060fa:	4649      	mov	r1, r9
 80060fc:	4640      	mov	r0, r8
 80060fe:	47d0      	blx	sl
 8006100:	3001      	adds	r0, #1
 8006102:	d09d      	beq.n	8006040 <_printf_i+0x160>
 8006104:	3501      	adds	r5, #1
 8006106:	68e3      	ldr	r3, [r4, #12]
 8006108:	9903      	ldr	r1, [sp, #12]
 800610a:	1a5b      	subs	r3, r3, r1
 800610c:	42ab      	cmp	r3, r5
 800610e:	dcf2      	bgt.n	80060f6 <_printf_i+0x216>
 8006110:	e7eb      	b.n	80060ea <_printf_i+0x20a>
 8006112:	2500      	movs	r5, #0
 8006114:	f104 0619 	add.w	r6, r4, #25
 8006118:	e7f5      	b.n	8006106 <_printf_i+0x226>
 800611a:	bf00      	nop
 800611c:	080065dd 	.word	0x080065dd
 8006120:	080065ee 	.word	0x080065ee

08006124 <__sflush_r>:
 8006124:	898a      	ldrh	r2, [r1, #12]
 8006126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800612a:	4605      	mov	r5, r0
 800612c:	0710      	lsls	r0, r2, #28
 800612e:	460c      	mov	r4, r1
 8006130:	d458      	bmi.n	80061e4 <__sflush_r+0xc0>
 8006132:	684b      	ldr	r3, [r1, #4]
 8006134:	2b00      	cmp	r3, #0
 8006136:	dc05      	bgt.n	8006144 <__sflush_r+0x20>
 8006138:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800613a:	2b00      	cmp	r3, #0
 800613c:	dc02      	bgt.n	8006144 <__sflush_r+0x20>
 800613e:	2000      	movs	r0, #0
 8006140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006144:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006146:	2e00      	cmp	r6, #0
 8006148:	d0f9      	beq.n	800613e <__sflush_r+0x1a>
 800614a:	2300      	movs	r3, #0
 800614c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006150:	682f      	ldr	r7, [r5, #0]
 8006152:	6a21      	ldr	r1, [r4, #32]
 8006154:	602b      	str	r3, [r5, #0]
 8006156:	d032      	beq.n	80061be <__sflush_r+0x9a>
 8006158:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800615a:	89a3      	ldrh	r3, [r4, #12]
 800615c:	075a      	lsls	r2, r3, #29
 800615e:	d505      	bpl.n	800616c <__sflush_r+0x48>
 8006160:	6863      	ldr	r3, [r4, #4]
 8006162:	1ac0      	subs	r0, r0, r3
 8006164:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006166:	b10b      	cbz	r3, 800616c <__sflush_r+0x48>
 8006168:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800616a:	1ac0      	subs	r0, r0, r3
 800616c:	2300      	movs	r3, #0
 800616e:	4602      	mov	r2, r0
 8006170:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006172:	6a21      	ldr	r1, [r4, #32]
 8006174:	4628      	mov	r0, r5
 8006176:	47b0      	blx	r6
 8006178:	1c43      	adds	r3, r0, #1
 800617a:	89a3      	ldrh	r3, [r4, #12]
 800617c:	d106      	bne.n	800618c <__sflush_r+0x68>
 800617e:	6829      	ldr	r1, [r5, #0]
 8006180:	291d      	cmp	r1, #29
 8006182:	d82b      	bhi.n	80061dc <__sflush_r+0xb8>
 8006184:	4a29      	ldr	r2, [pc, #164]	; (800622c <__sflush_r+0x108>)
 8006186:	410a      	asrs	r2, r1
 8006188:	07d6      	lsls	r6, r2, #31
 800618a:	d427      	bmi.n	80061dc <__sflush_r+0xb8>
 800618c:	2200      	movs	r2, #0
 800618e:	6062      	str	r2, [r4, #4]
 8006190:	04d9      	lsls	r1, r3, #19
 8006192:	6922      	ldr	r2, [r4, #16]
 8006194:	6022      	str	r2, [r4, #0]
 8006196:	d504      	bpl.n	80061a2 <__sflush_r+0x7e>
 8006198:	1c42      	adds	r2, r0, #1
 800619a:	d101      	bne.n	80061a0 <__sflush_r+0x7c>
 800619c:	682b      	ldr	r3, [r5, #0]
 800619e:	b903      	cbnz	r3, 80061a2 <__sflush_r+0x7e>
 80061a0:	6560      	str	r0, [r4, #84]	; 0x54
 80061a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061a4:	602f      	str	r7, [r5, #0]
 80061a6:	2900      	cmp	r1, #0
 80061a8:	d0c9      	beq.n	800613e <__sflush_r+0x1a>
 80061aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061ae:	4299      	cmp	r1, r3
 80061b0:	d002      	beq.n	80061b8 <__sflush_r+0x94>
 80061b2:	4628      	mov	r0, r5
 80061b4:	f7ff fbea 	bl	800598c <_free_r>
 80061b8:	2000      	movs	r0, #0
 80061ba:	6360      	str	r0, [r4, #52]	; 0x34
 80061bc:	e7c0      	b.n	8006140 <__sflush_r+0x1c>
 80061be:	2301      	movs	r3, #1
 80061c0:	4628      	mov	r0, r5
 80061c2:	47b0      	blx	r6
 80061c4:	1c41      	adds	r1, r0, #1
 80061c6:	d1c8      	bne.n	800615a <__sflush_r+0x36>
 80061c8:	682b      	ldr	r3, [r5, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d0c5      	beq.n	800615a <__sflush_r+0x36>
 80061ce:	2b1d      	cmp	r3, #29
 80061d0:	d001      	beq.n	80061d6 <__sflush_r+0xb2>
 80061d2:	2b16      	cmp	r3, #22
 80061d4:	d101      	bne.n	80061da <__sflush_r+0xb6>
 80061d6:	602f      	str	r7, [r5, #0]
 80061d8:	e7b1      	b.n	800613e <__sflush_r+0x1a>
 80061da:	89a3      	ldrh	r3, [r4, #12]
 80061dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061e0:	81a3      	strh	r3, [r4, #12]
 80061e2:	e7ad      	b.n	8006140 <__sflush_r+0x1c>
 80061e4:	690f      	ldr	r7, [r1, #16]
 80061e6:	2f00      	cmp	r7, #0
 80061e8:	d0a9      	beq.n	800613e <__sflush_r+0x1a>
 80061ea:	0793      	lsls	r3, r2, #30
 80061ec:	680e      	ldr	r6, [r1, #0]
 80061ee:	bf08      	it	eq
 80061f0:	694b      	ldreq	r3, [r1, #20]
 80061f2:	600f      	str	r7, [r1, #0]
 80061f4:	bf18      	it	ne
 80061f6:	2300      	movne	r3, #0
 80061f8:	eba6 0807 	sub.w	r8, r6, r7
 80061fc:	608b      	str	r3, [r1, #8]
 80061fe:	f1b8 0f00 	cmp.w	r8, #0
 8006202:	dd9c      	ble.n	800613e <__sflush_r+0x1a>
 8006204:	6a21      	ldr	r1, [r4, #32]
 8006206:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006208:	4643      	mov	r3, r8
 800620a:	463a      	mov	r2, r7
 800620c:	4628      	mov	r0, r5
 800620e:	47b0      	blx	r6
 8006210:	2800      	cmp	r0, #0
 8006212:	dc06      	bgt.n	8006222 <__sflush_r+0xfe>
 8006214:	89a3      	ldrh	r3, [r4, #12]
 8006216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800621a:	81a3      	strh	r3, [r4, #12]
 800621c:	f04f 30ff 	mov.w	r0, #4294967295
 8006220:	e78e      	b.n	8006140 <__sflush_r+0x1c>
 8006222:	4407      	add	r7, r0
 8006224:	eba8 0800 	sub.w	r8, r8, r0
 8006228:	e7e9      	b.n	80061fe <__sflush_r+0xda>
 800622a:	bf00      	nop
 800622c:	dfbffffe 	.word	0xdfbffffe

08006230 <_fflush_r>:
 8006230:	b538      	push	{r3, r4, r5, lr}
 8006232:	690b      	ldr	r3, [r1, #16]
 8006234:	4605      	mov	r5, r0
 8006236:	460c      	mov	r4, r1
 8006238:	b913      	cbnz	r3, 8006240 <_fflush_r+0x10>
 800623a:	2500      	movs	r5, #0
 800623c:	4628      	mov	r0, r5
 800623e:	bd38      	pop	{r3, r4, r5, pc}
 8006240:	b118      	cbz	r0, 800624a <_fflush_r+0x1a>
 8006242:	6a03      	ldr	r3, [r0, #32]
 8006244:	b90b      	cbnz	r3, 800624a <_fflush_r+0x1a>
 8006246:	f7ff fa35 	bl	80056b4 <__sinit>
 800624a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d0f3      	beq.n	800623a <_fflush_r+0xa>
 8006252:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006254:	07d0      	lsls	r0, r2, #31
 8006256:	d404      	bmi.n	8006262 <_fflush_r+0x32>
 8006258:	0599      	lsls	r1, r3, #22
 800625a:	d402      	bmi.n	8006262 <_fflush_r+0x32>
 800625c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800625e:	f7ff fb84 	bl	800596a <__retarget_lock_acquire_recursive>
 8006262:	4628      	mov	r0, r5
 8006264:	4621      	mov	r1, r4
 8006266:	f7ff ff5d 	bl	8006124 <__sflush_r>
 800626a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800626c:	07da      	lsls	r2, r3, #31
 800626e:	4605      	mov	r5, r0
 8006270:	d4e4      	bmi.n	800623c <_fflush_r+0xc>
 8006272:	89a3      	ldrh	r3, [r4, #12]
 8006274:	059b      	lsls	r3, r3, #22
 8006276:	d4e1      	bmi.n	800623c <_fflush_r+0xc>
 8006278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800627a:	f7ff fb77 	bl	800596c <__retarget_lock_release_recursive>
 800627e:	e7dd      	b.n	800623c <_fflush_r+0xc>

08006280 <__swbuf_r>:
 8006280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006282:	460e      	mov	r6, r1
 8006284:	4614      	mov	r4, r2
 8006286:	4605      	mov	r5, r0
 8006288:	b118      	cbz	r0, 8006292 <__swbuf_r+0x12>
 800628a:	6a03      	ldr	r3, [r0, #32]
 800628c:	b90b      	cbnz	r3, 8006292 <__swbuf_r+0x12>
 800628e:	f7ff fa11 	bl	80056b4 <__sinit>
 8006292:	69a3      	ldr	r3, [r4, #24]
 8006294:	60a3      	str	r3, [r4, #8]
 8006296:	89a3      	ldrh	r3, [r4, #12]
 8006298:	071a      	lsls	r2, r3, #28
 800629a:	d525      	bpl.n	80062e8 <__swbuf_r+0x68>
 800629c:	6923      	ldr	r3, [r4, #16]
 800629e:	b31b      	cbz	r3, 80062e8 <__swbuf_r+0x68>
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	6922      	ldr	r2, [r4, #16]
 80062a4:	1a98      	subs	r0, r3, r2
 80062a6:	6963      	ldr	r3, [r4, #20]
 80062a8:	b2f6      	uxtb	r6, r6
 80062aa:	4283      	cmp	r3, r0
 80062ac:	4637      	mov	r7, r6
 80062ae:	dc04      	bgt.n	80062ba <__swbuf_r+0x3a>
 80062b0:	4621      	mov	r1, r4
 80062b2:	4628      	mov	r0, r5
 80062b4:	f7ff ffbc 	bl	8006230 <_fflush_r>
 80062b8:	b9e0      	cbnz	r0, 80062f4 <__swbuf_r+0x74>
 80062ba:	68a3      	ldr	r3, [r4, #8]
 80062bc:	3b01      	subs	r3, #1
 80062be:	60a3      	str	r3, [r4, #8]
 80062c0:	6823      	ldr	r3, [r4, #0]
 80062c2:	1c5a      	adds	r2, r3, #1
 80062c4:	6022      	str	r2, [r4, #0]
 80062c6:	701e      	strb	r6, [r3, #0]
 80062c8:	6962      	ldr	r2, [r4, #20]
 80062ca:	1c43      	adds	r3, r0, #1
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d004      	beq.n	80062da <__swbuf_r+0x5a>
 80062d0:	89a3      	ldrh	r3, [r4, #12]
 80062d2:	07db      	lsls	r3, r3, #31
 80062d4:	d506      	bpl.n	80062e4 <__swbuf_r+0x64>
 80062d6:	2e0a      	cmp	r6, #10
 80062d8:	d104      	bne.n	80062e4 <__swbuf_r+0x64>
 80062da:	4621      	mov	r1, r4
 80062dc:	4628      	mov	r0, r5
 80062de:	f7ff ffa7 	bl	8006230 <_fflush_r>
 80062e2:	b938      	cbnz	r0, 80062f4 <__swbuf_r+0x74>
 80062e4:	4638      	mov	r0, r7
 80062e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062e8:	4621      	mov	r1, r4
 80062ea:	4628      	mov	r0, r5
 80062ec:	f000 f806 	bl	80062fc <__swsetup_r>
 80062f0:	2800      	cmp	r0, #0
 80062f2:	d0d5      	beq.n	80062a0 <__swbuf_r+0x20>
 80062f4:	f04f 37ff 	mov.w	r7, #4294967295
 80062f8:	e7f4      	b.n	80062e4 <__swbuf_r+0x64>
	...

080062fc <__swsetup_r>:
 80062fc:	b538      	push	{r3, r4, r5, lr}
 80062fe:	4b2a      	ldr	r3, [pc, #168]	; (80063a8 <__swsetup_r+0xac>)
 8006300:	4605      	mov	r5, r0
 8006302:	6818      	ldr	r0, [r3, #0]
 8006304:	460c      	mov	r4, r1
 8006306:	b118      	cbz	r0, 8006310 <__swsetup_r+0x14>
 8006308:	6a03      	ldr	r3, [r0, #32]
 800630a:	b90b      	cbnz	r3, 8006310 <__swsetup_r+0x14>
 800630c:	f7ff f9d2 	bl	80056b4 <__sinit>
 8006310:	89a3      	ldrh	r3, [r4, #12]
 8006312:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006316:	0718      	lsls	r0, r3, #28
 8006318:	d422      	bmi.n	8006360 <__swsetup_r+0x64>
 800631a:	06d9      	lsls	r1, r3, #27
 800631c:	d407      	bmi.n	800632e <__swsetup_r+0x32>
 800631e:	2309      	movs	r3, #9
 8006320:	602b      	str	r3, [r5, #0]
 8006322:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006326:	81a3      	strh	r3, [r4, #12]
 8006328:	f04f 30ff 	mov.w	r0, #4294967295
 800632c:	e034      	b.n	8006398 <__swsetup_r+0x9c>
 800632e:	0758      	lsls	r0, r3, #29
 8006330:	d512      	bpl.n	8006358 <__swsetup_r+0x5c>
 8006332:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006334:	b141      	cbz	r1, 8006348 <__swsetup_r+0x4c>
 8006336:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800633a:	4299      	cmp	r1, r3
 800633c:	d002      	beq.n	8006344 <__swsetup_r+0x48>
 800633e:	4628      	mov	r0, r5
 8006340:	f7ff fb24 	bl	800598c <_free_r>
 8006344:	2300      	movs	r3, #0
 8006346:	6363      	str	r3, [r4, #52]	; 0x34
 8006348:	89a3      	ldrh	r3, [r4, #12]
 800634a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800634e:	81a3      	strh	r3, [r4, #12]
 8006350:	2300      	movs	r3, #0
 8006352:	6063      	str	r3, [r4, #4]
 8006354:	6923      	ldr	r3, [r4, #16]
 8006356:	6023      	str	r3, [r4, #0]
 8006358:	89a3      	ldrh	r3, [r4, #12]
 800635a:	f043 0308 	orr.w	r3, r3, #8
 800635e:	81a3      	strh	r3, [r4, #12]
 8006360:	6923      	ldr	r3, [r4, #16]
 8006362:	b94b      	cbnz	r3, 8006378 <__swsetup_r+0x7c>
 8006364:	89a3      	ldrh	r3, [r4, #12]
 8006366:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800636a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800636e:	d003      	beq.n	8006378 <__swsetup_r+0x7c>
 8006370:	4621      	mov	r1, r4
 8006372:	4628      	mov	r0, r5
 8006374:	f000 f850 	bl	8006418 <__smakebuf_r>
 8006378:	89a0      	ldrh	r0, [r4, #12]
 800637a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800637e:	f010 0301 	ands.w	r3, r0, #1
 8006382:	d00a      	beq.n	800639a <__swsetup_r+0x9e>
 8006384:	2300      	movs	r3, #0
 8006386:	60a3      	str	r3, [r4, #8]
 8006388:	6963      	ldr	r3, [r4, #20]
 800638a:	425b      	negs	r3, r3
 800638c:	61a3      	str	r3, [r4, #24]
 800638e:	6923      	ldr	r3, [r4, #16]
 8006390:	b943      	cbnz	r3, 80063a4 <__swsetup_r+0xa8>
 8006392:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006396:	d1c4      	bne.n	8006322 <__swsetup_r+0x26>
 8006398:	bd38      	pop	{r3, r4, r5, pc}
 800639a:	0781      	lsls	r1, r0, #30
 800639c:	bf58      	it	pl
 800639e:	6963      	ldrpl	r3, [r4, #20]
 80063a0:	60a3      	str	r3, [r4, #8]
 80063a2:	e7f4      	b.n	800638e <__swsetup_r+0x92>
 80063a4:	2000      	movs	r0, #0
 80063a6:	e7f7      	b.n	8006398 <__swsetup_r+0x9c>
 80063a8:	20000068 	.word	0x20000068

080063ac <_sbrk_r>:
 80063ac:	b538      	push	{r3, r4, r5, lr}
 80063ae:	4d06      	ldr	r5, [pc, #24]	; (80063c8 <_sbrk_r+0x1c>)
 80063b0:	2300      	movs	r3, #0
 80063b2:	4604      	mov	r4, r0
 80063b4:	4608      	mov	r0, r1
 80063b6:	602b      	str	r3, [r5, #0]
 80063b8:	f7fa fbb6 	bl	8000b28 <_sbrk>
 80063bc:	1c43      	adds	r3, r0, #1
 80063be:	d102      	bne.n	80063c6 <_sbrk_r+0x1a>
 80063c0:	682b      	ldr	r3, [r5, #0]
 80063c2:	b103      	cbz	r3, 80063c6 <_sbrk_r+0x1a>
 80063c4:	6023      	str	r3, [r4, #0]
 80063c6:	bd38      	pop	{r3, r4, r5, pc}
 80063c8:	20004c0c 	.word	0x20004c0c

080063cc <__swhatbuf_r>:
 80063cc:	b570      	push	{r4, r5, r6, lr}
 80063ce:	460c      	mov	r4, r1
 80063d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063d4:	2900      	cmp	r1, #0
 80063d6:	b096      	sub	sp, #88	; 0x58
 80063d8:	4615      	mov	r5, r2
 80063da:	461e      	mov	r6, r3
 80063dc:	da0d      	bge.n	80063fa <__swhatbuf_r+0x2e>
 80063de:	89a3      	ldrh	r3, [r4, #12]
 80063e0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80063e4:	f04f 0100 	mov.w	r1, #0
 80063e8:	bf0c      	ite	eq
 80063ea:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80063ee:	2340      	movne	r3, #64	; 0x40
 80063f0:	2000      	movs	r0, #0
 80063f2:	6031      	str	r1, [r6, #0]
 80063f4:	602b      	str	r3, [r5, #0]
 80063f6:	b016      	add	sp, #88	; 0x58
 80063f8:	bd70      	pop	{r4, r5, r6, pc}
 80063fa:	466a      	mov	r2, sp
 80063fc:	f000 f848 	bl	8006490 <_fstat_r>
 8006400:	2800      	cmp	r0, #0
 8006402:	dbec      	blt.n	80063de <__swhatbuf_r+0x12>
 8006404:	9901      	ldr	r1, [sp, #4]
 8006406:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800640a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800640e:	4259      	negs	r1, r3
 8006410:	4159      	adcs	r1, r3
 8006412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006416:	e7eb      	b.n	80063f0 <__swhatbuf_r+0x24>

08006418 <__smakebuf_r>:
 8006418:	898b      	ldrh	r3, [r1, #12]
 800641a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800641c:	079d      	lsls	r5, r3, #30
 800641e:	4606      	mov	r6, r0
 8006420:	460c      	mov	r4, r1
 8006422:	d507      	bpl.n	8006434 <__smakebuf_r+0x1c>
 8006424:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006428:	6023      	str	r3, [r4, #0]
 800642a:	6123      	str	r3, [r4, #16]
 800642c:	2301      	movs	r3, #1
 800642e:	6163      	str	r3, [r4, #20]
 8006430:	b002      	add	sp, #8
 8006432:	bd70      	pop	{r4, r5, r6, pc}
 8006434:	ab01      	add	r3, sp, #4
 8006436:	466a      	mov	r2, sp
 8006438:	f7ff ffc8 	bl	80063cc <__swhatbuf_r>
 800643c:	9900      	ldr	r1, [sp, #0]
 800643e:	4605      	mov	r5, r0
 8006440:	4630      	mov	r0, r6
 8006442:	f7ff fb0f 	bl	8005a64 <_malloc_r>
 8006446:	b948      	cbnz	r0, 800645c <__smakebuf_r+0x44>
 8006448:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800644c:	059a      	lsls	r2, r3, #22
 800644e:	d4ef      	bmi.n	8006430 <__smakebuf_r+0x18>
 8006450:	f023 0303 	bic.w	r3, r3, #3
 8006454:	f043 0302 	orr.w	r3, r3, #2
 8006458:	81a3      	strh	r3, [r4, #12]
 800645a:	e7e3      	b.n	8006424 <__smakebuf_r+0xc>
 800645c:	89a3      	ldrh	r3, [r4, #12]
 800645e:	6020      	str	r0, [r4, #0]
 8006460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006464:	81a3      	strh	r3, [r4, #12]
 8006466:	9b00      	ldr	r3, [sp, #0]
 8006468:	6163      	str	r3, [r4, #20]
 800646a:	9b01      	ldr	r3, [sp, #4]
 800646c:	6120      	str	r0, [r4, #16]
 800646e:	b15b      	cbz	r3, 8006488 <__smakebuf_r+0x70>
 8006470:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006474:	4630      	mov	r0, r6
 8006476:	f000 f81d 	bl	80064b4 <_isatty_r>
 800647a:	b128      	cbz	r0, 8006488 <__smakebuf_r+0x70>
 800647c:	89a3      	ldrh	r3, [r4, #12]
 800647e:	f023 0303 	bic.w	r3, r3, #3
 8006482:	f043 0301 	orr.w	r3, r3, #1
 8006486:	81a3      	strh	r3, [r4, #12]
 8006488:	89a3      	ldrh	r3, [r4, #12]
 800648a:	431d      	orrs	r5, r3
 800648c:	81a5      	strh	r5, [r4, #12]
 800648e:	e7cf      	b.n	8006430 <__smakebuf_r+0x18>

08006490 <_fstat_r>:
 8006490:	b538      	push	{r3, r4, r5, lr}
 8006492:	4d07      	ldr	r5, [pc, #28]	; (80064b0 <_fstat_r+0x20>)
 8006494:	2300      	movs	r3, #0
 8006496:	4604      	mov	r4, r0
 8006498:	4608      	mov	r0, r1
 800649a:	4611      	mov	r1, r2
 800649c:	602b      	str	r3, [r5, #0]
 800649e:	f7fa fb1a 	bl	8000ad6 <_fstat>
 80064a2:	1c43      	adds	r3, r0, #1
 80064a4:	d102      	bne.n	80064ac <_fstat_r+0x1c>
 80064a6:	682b      	ldr	r3, [r5, #0]
 80064a8:	b103      	cbz	r3, 80064ac <_fstat_r+0x1c>
 80064aa:	6023      	str	r3, [r4, #0]
 80064ac:	bd38      	pop	{r3, r4, r5, pc}
 80064ae:	bf00      	nop
 80064b0:	20004c0c 	.word	0x20004c0c

080064b4 <_isatty_r>:
 80064b4:	b538      	push	{r3, r4, r5, lr}
 80064b6:	4d06      	ldr	r5, [pc, #24]	; (80064d0 <_isatty_r+0x1c>)
 80064b8:	2300      	movs	r3, #0
 80064ba:	4604      	mov	r4, r0
 80064bc:	4608      	mov	r0, r1
 80064be:	602b      	str	r3, [r5, #0]
 80064c0:	f7fa fb19 	bl	8000af6 <_isatty>
 80064c4:	1c43      	adds	r3, r0, #1
 80064c6:	d102      	bne.n	80064ce <_isatty_r+0x1a>
 80064c8:	682b      	ldr	r3, [r5, #0]
 80064ca:	b103      	cbz	r3, 80064ce <_isatty_r+0x1a>
 80064cc:	6023      	str	r3, [r4, #0]
 80064ce:	bd38      	pop	{r3, r4, r5, pc}
 80064d0:	20004c0c 	.word	0x20004c0c

080064d4 <_init>:
 80064d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064d6:	bf00      	nop
 80064d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064da:	bc08      	pop	{r3}
 80064dc:	469e      	mov	lr, r3
 80064de:	4770      	bx	lr

080064e0 <_fini>:
 80064e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e2:	bf00      	nop
 80064e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064e6:	bc08      	pop	{r3}
 80064e8:	469e      	mov	lr, r3
 80064ea:	4770      	bx	lr
