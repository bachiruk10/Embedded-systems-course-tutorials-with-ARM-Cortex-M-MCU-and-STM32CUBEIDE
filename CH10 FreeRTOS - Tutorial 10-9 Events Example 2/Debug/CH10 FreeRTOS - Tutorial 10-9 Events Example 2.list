
CH10 FreeRTOS - Tutorial 10-9 Events Example 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000684c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  080069fc  080069fc  000169fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b48  08006b48  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08006b48  08006b48  00016b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b50  08006b50  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b50  08006b50  00016b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b54  08006b54  00016b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00004bfc  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004c68  20004c68  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000165e8  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003612  00000000  00000000  000366c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001380  00000000  00000000  00039ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000eee  00000000  00000000  0003b060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000047fc  00000000  00000000  0003bf4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001541f  00000000  00000000  0004074a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e4476  00000000  00000000  00055b69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000587c  00000000  00000000  00139fe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a0  00000000  00000000  0013f85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080069e4 	.word	0x080069e4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	080069e4 	.word	0x080069e4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d013      	beq.n	80005cc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005ac:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d00b      	beq.n	80005cc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005b4:	e000      	b.n	80005b8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005b6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d0f9      	beq.n	80005b6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005c2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	b2d2      	uxtb	r2, r2
 80005ca:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005cc:	687b      	ldr	r3, [r7, #4]
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr

080005da <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*Function needed to use printf on CONSOLE*/
int _write(int file, char *ptr, int len){
 80005da:	b580      	push	{r7, lr}
 80005dc:	b086      	sub	sp, #24
 80005de:	af00      	add	r7, sp, #0
 80005e0:	60f8      	str	r0, [r7, #12]
 80005e2:	60b9      	str	r1, [r7, #8]
 80005e4:	607a      	str	r2, [r7, #4]
	  int i = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
	  for (i=0; i<len; i++)
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	e009      	b.n	8000604 <_write+0x2a>
		  ITM_SendChar((*ptr++));
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	1c5a      	adds	r2, r3, #1
 80005f4:	60ba      	str	r2, [r7, #8]
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff ffc7 	bl	800058c <ITM_SendChar>
	  for (i=0; i<len; i++)
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	3301      	adds	r3, #1
 8000602:	617b      	str	r3, [r7, #20]
 8000604:	697a      	ldr	r2, [r7, #20]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	429a      	cmp	r2, r3
 800060a:	dbf1      	blt.n	80005f0 <_write+0x16>
	  return len;
 800060c:	687b      	ldr	r3, [r7, #4]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3718      	adds	r7, #24
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
	...

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061c:	f000 fb8c 	bl	8000d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000620:	f000 f848 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000624:	f000 f904 	bl	8000830 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000628:	f000 f8b4 	bl	8000794 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  printf("PROGRAM START \n\r");
 800062c:	4814      	ldr	r0, [pc, #80]	; (8000680 <main+0x68>)
 800062e:	f005 faff 	bl	8005c30 <iprintf>
  /*Start Timer 2 in Interrupt mode*/
  HAL_TIM_Base_Start_IT(&htim2);
 8000632:	4814      	ldr	r0, [pc, #80]	; (8000684 <main+0x6c>)
 8000634:	f001 fbda 	bl	8001dec <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000638:	f002 f842 	bl	80026c0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800063c:	4a12      	ldr	r2, [pc, #72]	; (8000688 <main+0x70>)
 800063e:	2100      	movs	r1, #0
 8000640:	4812      	ldr	r0, [pc, #72]	; (800068c <main+0x74>)
 8000642:	f002 f887 	bl	8002754 <osThreadNew>
 8000646:	4603      	mov	r3, r0
 8000648:	4a11      	ldr	r2, [pc, #68]	; (8000690 <main+0x78>)
 800064a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  myTask02Handle = osThreadNew(StartmyTask02, NULL, &myTask02_attributes);
 800064c:	4a11      	ldr	r2, [pc, #68]	; (8000694 <main+0x7c>)
 800064e:	2100      	movs	r1, #0
 8000650:	4811      	ldr	r0, [pc, #68]	; (8000698 <main+0x80>)
 8000652:	f002 f87f 	bl	8002754 <osThreadNew>
 8000656:	4603      	mov	r3, r0
 8000658:	4a10      	ldr	r2, [pc, #64]	; (800069c <main+0x84>)
 800065a:	6013      	str	r3, [r2, #0]

  myTask03Handle = osThreadNew(StartmyTask03, NULL, &myTask03_attributes);
 800065c:	4a10      	ldr	r2, [pc, #64]	; (80006a0 <main+0x88>)
 800065e:	2100      	movs	r1, #0
 8000660:	4810      	ldr	r0, [pc, #64]	; (80006a4 <main+0x8c>)
 8000662:	f002 f877 	bl	8002754 <osThreadNew>
 8000666:	4603      	mov	r3, r0
 8000668:	4a0f      	ldr	r2, [pc, #60]	; (80006a8 <main+0x90>)
 800066a:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  myEvent01Handle = osEventFlagsNew(&myEvent01_attributes);
 800066c:	480f      	ldr	r0, [pc, #60]	; (80006ac <main+0x94>)
 800066e:	f002 f93e 	bl	80028ee <osEventFlagsNew>
 8000672:	4603      	mov	r3, r0
 8000674:	4a0e      	ldr	r2, [pc, #56]	; (80006b0 <main+0x98>)
 8000676:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000678:	f002 f846 	bl	8002708 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800067c:	e7fe      	b.n	800067c <main+0x64>
 800067e:	bf00      	nop
 8000680:	08006a2c 	.word	0x08006a2c
 8000684:	20000088 	.word	0x20000088
 8000688:	08006a80 	.word	0x08006a80
 800068c:	080008b9 	.word	0x080008b9
 8000690:	200000d0 	.word	0x200000d0
 8000694:	08006aa4 	.word	0x08006aa4
 8000698:	080008ed 	.word	0x080008ed
 800069c:	200000d4 	.word	0x200000d4
 80006a0:	08006ac8 	.word	0x08006ac8
 80006a4:	08000931 	.word	0x08000931
 80006a8:	200000d8 	.word	0x200000d8
 80006ac:	08006aec 	.word	0x08006aec
 80006b0:	200000dc 	.word	0x200000dc

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	; 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2230      	movs	r2, #48	; 0x30
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f005 fb09 	bl	8005cda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	4b2b      	ldr	r3, [pc, #172]	; (800078c <SystemClock_Config+0xd8>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	4a2a      	ldr	r2, [pc, #168]	; (800078c <SystemClock_Config+0xd8>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	; 0x40
 80006e8:	4b28      	ldr	r3, [pc, #160]	; (800078c <SystemClock_Config+0xd8>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	4b25      	ldr	r3, [pc, #148]	; (8000790 <SystemClock_Config+0xdc>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a24      	ldr	r2, [pc, #144]	; (8000790 <SystemClock_Config+0xdc>)
 80006fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b22      	ldr	r3, [pc, #136]	; (8000790 <SystemClock_Config+0xdc>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000710:	2301      	movs	r3, #1
 8000712:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000714:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071a:	2302      	movs	r3, #2
 800071c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000722:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000724:	2304      	movs	r3, #4
 8000726:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000728:	23b4      	movs	r3, #180	; 0xb4
 800072a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072c:	2302      	movs	r3, #2
 800072e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000730:	2307      	movs	r3, #7
 8000732:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000734:	f107 0320 	add.w	r3, r7, #32
 8000738:	4618      	mov	r0, r3
 800073a:	f000 fe51 	bl	80013e0 <HAL_RCC_OscConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000744:	f000 f936 	bl	80009b4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000748:	f000 fdfa 	bl	8001340 <HAL_PWREx_EnableOverDrive>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000752:	f000 f92f 	bl	80009b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000756:	230f      	movs	r3, #15
 8000758:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075a:	2302      	movs	r3, #2
 800075c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000762:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000766:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	2105      	movs	r1, #5
 8000774:	4618      	mov	r0, r3
 8000776:	f001 f8ab 	bl	80018d0 <HAL_RCC_ClockConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000780:	f000 f918 	bl	80009b4 <Error_Handler>
  }
}
 8000784:	bf00      	nop
 8000786:	3750      	adds	r7, #80	; 0x50
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40023800 	.word	0x40023800
 8000790:	40007000 	.word	0x40007000

08000794 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a8:	463b      	mov	r3, r7
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007b0:	4b1e      	ldr	r3, [pc, #120]	; (800082c <MX_TIM2_Init+0x98>)
 80007b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9000-1;
 80007b8:	4b1c      	ldr	r3, [pc, #112]	; (800082c <MX_TIM2_Init+0x98>)
 80007ba:	f242 3227 	movw	r2, #8999	; 0x2327
 80007be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c0:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_TIM2_Init+0x98>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80007c6:	4b19      	ldr	r3, [pc, #100]	; (800082c <MX_TIM2_Init+0x98>)
 80007c8:	f242 720f 	movw	r2, #9999	; 0x270f
 80007cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ce:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_TIM2_Init+0x98>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d4:	4b15      	ldr	r3, [pc, #84]	; (800082c <MX_TIM2_Init+0x98>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007da:	4814      	ldr	r0, [pc, #80]	; (800082c <MX_TIM2_Init+0x98>)
 80007dc:	f001 fab6 	bl	8001d4c <HAL_TIM_Base_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80007e6:	f000 f8e5 	bl	80009b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007f0:	f107 0308 	add.w	r3, r7, #8
 80007f4:	4619      	mov	r1, r3
 80007f6:	480d      	ldr	r0, [pc, #52]	; (800082c <MX_TIM2_Init+0x98>)
 80007f8:	f001 fc58 	bl	80020ac <HAL_TIM_ConfigClockSource>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000802:	f000 f8d7 	bl	80009b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800080e:	463b      	mov	r3, r7
 8000810:	4619      	mov	r1, r3
 8000812:	4806      	ldr	r0, [pc, #24]	; (800082c <MX_TIM2_Init+0x98>)
 8000814:	f001 fe80 	bl	8002518 <HAL_TIMEx_MasterConfigSynchronization>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800081e:	f000 f8c9 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000088 	.word	0x20000088

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <MX_GPIO_Init+0x80>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a18      	ldr	r2, [pc, #96]	; (80008b0 <MX_GPIO_Init+0x80>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <MX_GPIO_Init+0x80>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_GPIO_Init+0x80>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a11      	ldr	r2, [pc, #68]	; (80008b0 <MX_GPIO_Init+0x80>)
 800086c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_GPIO_Init+0x80>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000884:	480b      	ldr	r0, [pc, #44]	; (80008b4 <MX_GPIO_Init+0x84>)
 8000886:	f000 fd27 	bl	80012d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800088a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800088e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	4619      	mov	r1, r3
 80008a2:	4804      	ldr	r0, [pc, #16]	; (80008b4 <MX_GPIO_Init+0x84>)
 80008a4:	f000 fb6c 	bl	8000f80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008a8:	bf00      	nop
 80008aa:	3720      	adds	r7, #32
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40021800 	.word	0x40021800

080008b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 80008c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008c4:	4806      	ldr	r0, [pc, #24]	; (80008e0 <StartDefaultTask+0x28>)
 80008c6:	f000 fd20 	bl	800130a <HAL_GPIO_TogglePin>
	  cn = 1;
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <StartDefaultTask+0x2c>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
	  printf("DefaultTask \n\r");
 80008d0:	4805      	ldr	r0, [pc, #20]	; (80008e8 <StartDefaultTask+0x30>)
 80008d2:	f005 f9ad 	bl	8005c30 <iprintf>
	  osDelay(1000);  // wait for 1 second
 80008d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008da:	f001 ffed 	bl	80028b8 <osDelay>
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 80008de:	e7ef      	b.n	80008c0 <StartDefaultTask+0x8>
 80008e0:	40021800 	.word	0x40021800
 80008e4:	200000e0 	.word	0x200000e0
 80008e8:	08006a40 	.word	0x08006a40

080008ec <StartmyTask02>:
  }
  /* USER CODE END 5 */
}

void StartmyTask02(void *argument)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
   osEventFlagsSet(myEvent01Handle , FLAG);
 80008f4:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <StartmyTask02+0x34>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2101      	movs	r1, #1
 80008fa:	4618      	mov	r0, r3
 80008fc:	f002 f836 	bl	800296c <osEventFlagsSet>
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8000900:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000904:	4807      	ldr	r0, [pc, #28]	; (8000924 <StartmyTask02+0x38>)
 8000906:	f000 fd00 	bl	800130a <HAL_GPIO_TogglePin>
	  cn = 2;
 800090a:	4b07      	ldr	r3, [pc, #28]	; (8000928 <StartmyTask02+0x3c>)
 800090c:	2202      	movs	r2, #2
 800090e:	701a      	strb	r2, [r3, #0]
	  printf("Task02 \n\r");
 8000910:	4806      	ldr	r0, [pc, #24]	; (800092c <StartmyTask02+0x40>)
 8000912:	f005 f98d 	bl	8005c30 <iprintf>
	  osDelay(500);  // wait for 1 second
 8000916:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800091a:	f001 ffcd 	bl	80028b8 <osDelay>
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 800091e:	e7ef      	b.n	8000900 <StartmyTask02+0x14>
 8000920:	200000dc 	.word	0x200000dc
 8000924:	40021800 	.word	0x40021800
 8000928:	200000e0 	.word	0x200000e0
 800092c:	08006a50 	.word	0x08006a50

08000930 <StartmyTask03>:
  }
  /* USER CODE END 5 */
}

void StartmyTask03(void *argument)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(myEvent01Handle, FLAG, osFlagsWaitAny, osWaitForever);
 8000938:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <StartmyTask03+0x38>)
 800093a:	6818      	ldr	r0, [r3, #0]
 800093c:	f04f 33ff 	mov.w	r3, #4294967295
 8000940:	2200      	movs	r2, #0
 8000942:	2101      	movs	r1, #1
 8000944:	f002 f888 	bl	8002a58 <osEventFlagsWait>
	  cn = 3;
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <StartmyTask03+0x3c>)
 800094a:	2203      	movs	r2, #3
 800094c:	701a      	strb	r2, [r3, #0]
	  printf("Timer02 \n\r");
 800094e:	4808      	ldr	r0, [pc, #32]	; (8000970 <StartmyTask03+0x40>)
 8000950:	f005 f96e 	bl	8005c30 <iprintf>
	  osEventFlagsClear(myEvent01Handle, FLAG);
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <StartmyTask03+0x38>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2101      	movs	r1, #1
 800095a:	4618      	mov	r0, r3
 800095c:	f002 f84a 	bl	80029f4 <osEventFlagsClear>
	  osThreadYield();
 8000960:	f001 ff8a 	bl	8002878 <osThreadYield>
	  osEventFlagsWait(myEvent01Handle, FLAG, osFlagsWaitAny, osWaitForever);
 8000964:	e7e8      	b.n	8000938 <StartmyTask03+0x8>
 8000966:	bf00      	nop
 8000968:	200000dc 	.word	0x200000dc
 800096c:	200000e0 	.word	0x200000e0
 8000970:	08006a5c 	.word	0x08006a5c

08000974 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d102      	bne.n	800098c <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8000986:	f000 f9f9 	bl	8000d7c <HAL_IncTick>
	  osEventFlagsSet(myEvent01Handle, FLAG);
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800098a:	e00a      	b.n	80009a2 <HAL_TIM_PeriodElapsedCallback+0x2e>
  else if (htim->Instance == TIM2){
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000994:	d105      	bne.n	80009a2 <HAL_TIM_PeriodElapsedCallback+0x2e>
	  osEventFlagsSet(myEvent01Handle, FLAG);
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2101      	movs	r1, #1
 800099c:	4618      	mov	r0, r3
 800099e:	f001 ffe5 	bl	800296c <osEventFlagsSet>
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40001000 	.word	0x40001000
 80009b0:	200000dc 	.word	0x200000dc

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009bc:	e7fe      	b.n	80009bc <Error_Handler+0x8>
	...

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <HAL_MspInit+0x54>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	4a11      	ldr	r2, [pc, #68]	; (8000a14 <HAL_MspInit+0x54>)
 80009d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d4:	6453      	str	r3, [r2, #68]	; 0x44
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <HAL_MspInit+0x54>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	603b      	str	r3, [r7, #0]
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <HAL_MspInit+0x54>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	4a0a      	ldr	r2, [pc, #40]	; (8000a14 <HAL_MspInit+0x54>)
 80009ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f0:	6413      	str	r3, [r2, #64]	; 0x40
 80009f2:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <HAL_MspInit+0x54>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009fe:	2200      	movs	r2, #0
 8000a00:	210f      	movs	r1, #15
 8000a02:	f06f 0001 	mvn.w	r0, #1
 8000a06:	f000 fa91 	bl	8000f2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800

08000a18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a28:	d115      	bne.n	8000a56 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <HAL_TIM_Base_MspInit+0x48>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	4a0b      	ldr	r2, [pc, #44]	; (8000a60 <HAL_TIM_Base_MspInit+0x48>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <HAL_TIM_Base_MspInit+0x48>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2106      	movs	r1, #6
 8000a4a:	201c      	movs	r0, #28
 8000a4c:	f000 fa6e 	bl	8000f2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a50:	201c      	movs	r0, #28
 8000a52:	f000 fa87 	bl	8000f64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a56:	bf00      	nop
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800

08000a64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08e      	sub	sp, #56	; 0x38
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	4b33      	ldr	r3, [pc, #204]	; (8000b48 <HAL_InitTick+0xe4>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	4a32      	ldr	r2, [pc, #200]	; (8000b48 <HAL_InitTick+0xe4>)
 8000a7e:	f043 0310 	orr.w	r3, r3, #16
 8000a82:	6413      	str	r3, [r2, #64]	; 0x40
 8000a84:	4b30      	ldr	r3, [pc, #192]	; (8000b48 <HAL_InitTick+0xe4>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	f003 0310 	and.w	r3, r3, #16
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a90:	f107 0210 	add.w	r2, r7, #16
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4611      	mov	r1, r2
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f001 f924 	bl	8001ce8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000aa0:	6a3b      	ldr	r3, [r7, #32]
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d103      	bne.n	8000ab2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000aaa:	f001 f909 	bl	8001cc0 <HAL_RCC_GetPCLK1Freq>
 8000aae:	6378      	str	r0, [r7, #52]	; 0x34
 8000ab0:	e004      	b.n	8000abc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ab2:	f001 f905 	bl	8001cc0 <HAL_RCC_GetPCLK1Freq>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000abe:	4a23      	ldr	r2, [pc, #140]	; (8000b4c <HAL_InitTick+0xe8>)
 8000ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac4:	0c9b      	lsrs	r3, r3, #18
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000aca:	4b21      	ldr	r3, [pc, #132]	; (8000b50 <HAL_InitTick+0xec>)
 8000acc:	4a21      	ldr	r2, [pc, #132]	; (8000b54 <HAL_InitTick+0xf0>)
 8000ace:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ad0:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <HAL_InitTick+0xec>)
 8000ad2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ad6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ad8:	4a1d      	ldr	r2, [pc, #116]	; (8000b50 <HAL_InitTick+0xec>)
 8000ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000adc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ade:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <HAL_InitTick+0xec>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <HAL_InitTick+0xec>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aea:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <HAL_InitTick+0xec>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000af0:	4817      	ldr	r0, [pc, #92]	; (8000b50 <HAL_InitTick+0xec>)
 8000af2:	f001 f92b 	bl	8001d4c <HAL_TIM_Base_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000afc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d11b      	bne.n	8000b3c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b04:	4812      	ldr	r0, [pc, #72]	; (8000b50 <HAL_InitTick+0xec>)
 8000b06:	f001 f971 	bl	8001dec <HAL_TIM_Base_Start_IT>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d111      	bne.n	8000b3c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b18:	2036      	movs	r0, #54	; 0x36
 8000b1a:	f000 fa23 	bl	8000f64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2b0f      	cmp	r3, #15
 8000b22:	d808      	bhi.n	8000b36 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b24:	2200      	movs	r2, #0
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	2036      	movs	r0, #54	; 0x36
 8000b2a:	f000 f9ff 	bl	8000f2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <HAL_InitTick+0xf4>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6013      	str	r3, [r2, #0]
 8000b34:	e002      	b.n	8000b3c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3738      	adds	r7, #56	; 0x38
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	431bde83 	.word	0x431bde83
 8000b50:	200000e4 	.word	0x200000e4
 8000b54:	40001000 	.word	0x40001000
 8000b58:	20000004 	.word	0x20000004

08000b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b60:	e7fe      	b.n	8000b60 <NMI_Handler+0x4>

08000b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <HardFault_Handler+0x4>

08000b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <MemManage_Handler+0x4>

08000b6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <BusFault_Handler+0x4>

08000b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <UsageFault_Handler+0x4>

08000b7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b8c:	4802      	ldr	r0, [pc, #8]	; (8000b98 <TIM2_IRQHandler+0x10>)
 8000b8e:	f001 f99d 	bl	8001ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000088 	.word	0x20000088

08000b9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ba0:	4802      	ldr	r0, [pc, #8]	; (8000bac <TIM6_DAC_IRQHandler+0x10>)
 8000ba2:	f001 f993 	bl	8001ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200000e4 	.word	0x200000e4

08000bb0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	e00a      	b.n	8000bd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bc2:	f3af 8000 	nop.w
 8000bc6:	4601      	mov	r1, r0
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	60ba      	str	r2, [r7, #8]
 8000bce:	b2ca      	uxtb	r2, r1
 8000bd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	697a      	ldr	r2, [r7, #20]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	dbf0      	blt.n	8000bc2 <_read+0x12>
  }

  return len;
 8000be0:	687b      	ldr	r3, [r7, #4]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b083      	sub	sp, #12
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
 8000c0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c12:	605a      	str	r2, [r3, #4]
  return 0;
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <_isatty>:

int _isatty(int file)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c2a:	2301      	movs	r3, #1
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c5c:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <_sbrk+0x5c>)
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <_sbrk+0x60>)
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <_sbrk+0x64>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <_sbrk+0x68>)
 8000c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d207      	bcs.n	8000c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c84:	f005 f8ce 	bl	8005e24 <__errno>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	e009      	b.n	8000ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <_sbrk+0x64>)
 8000ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20030000 	.word	0x20030000
 8000cb4:	00000400 	.word	0x00000400
 8000cb8:	2000012c 	.word	0x2000012c
 8000cbc:	20004c68 	.word	0x20004c68

08000cc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <SystemInit+0x20>)
 8000cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cca:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <SystemInit+0x20>)
 8000ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <Reset_Handler>:
 8000ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d1c <LoopFillZerobss+0xe>
 8000ce8:	f7ff ffea 	bl	8000cc0 <SystemInit>
 8000cec:	480c      	ldr	r0, [pc, #48]	; (8000d20 <LoopFillZerobss+0x12>)
 8000cee:	490d      	ldr	r1, [pc, #52]	; (8000d24 <LoopFillZerobss+0x16>)
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	; (8000d28 <LoopFillZerobss+0x1a>)
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e002      	b.n	8000cfc <LoopCopyDataInit>

08000cf6 <CopyDataInit>:
 8000cf6:	58d4      	ldr	r4, [r2, r3]
 8000cf8:	50c4      	str	r4, [r0, r3]
 8000cfa:	3304      	adds	r3, #4

08000cfc <LoopCopyDataInit>:
 8000cfc:	18c4      	adds	r4, r0, r3
 8000cfe:	428c      	cmp	r4, r1
 8000d00:	d3f9      	bcc.n	8000cf6 <CopyDataInit>
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <LoopFillZerobss+0x1e>)
 8000d04:	4c0a      	ldr	r4, [pc, #40]	; (8000d30 <LoopFillZerobss+0x22>)
 8000d06:	2300      	movs	r3, #0
 8000d08:	e001      	b.n	8000d0e <LoopFillZerobss>

08000d0a <FillZerobss>:
 8000d0a:	6013      	str	r3, [r2, #0]
 8000d0c:	3204      	adds	r2, #4

08000d0e <LoopFillZerobss>:
 8000d0e:	42a2      	cmp	r2, r4
 8000d10:	d3fb      	bcc.n	8000d0a <FillZerobss>
 8000d12:	f005 f88d 	bl	8005e30 <__libc_init_array>
 8000d16:	f7ff fc7f 	bl	8000618 <main>
 8000d1a:	4770      	bx	lr
 8000d1c:	20030000 	.word	0x20030000
 8000d20:	20000000 	.word	0x20000000
 8000d24:	2000006c 	.word	0x2000006c
 8000d28:	08006b58 	.word	0x08006b58
 8000d2c:	2000006c 	.word	0x2000006c
 8000d30:	20004c68 	.word	0x20004c68

08000d34 <ADC_IRQHandler>:
 8000d34:	e7fe      	b.n	8000d34 <ADC_IRQHandler>
	...

08000d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <HAL_Init+0x40>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0d      	ldr	r2, [pc, #52]	; (8000d78 <HAL_Init+0x40>)
 8000d42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d48:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <HAL_Init+0x40>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <HAL_Init+0x40>)
 8000d4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HAL_Init+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a07      	ldr	r2, [pc, #28]	; (8000d78 <HAL_Init+0x40>)
 8000d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d60:	2003      	movs	r0, #3
 8000d62:	f000 f8d8 	bl	8000f16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d66:	2005      	movs	r0, #5
 8000d68:	f7ff fe7c 	bl	8000a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d6c:	f7ff fe28 	bl	80009c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40023c00 	.word	0x40023c00

08000d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x20>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_IncTick+0x24>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <HAL_IncTick+0x24>)
 8000d8e:	6013      	str	r3, [r2, #0]
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	20000008 	.word	0x20000008
 8000da0:	20000130 	.word	0x20000130

08000da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return uwTick;
 8000da8:	4b03      	ldr	r3, [pc, #12]	; (8000db8 <HAL_GetTick+0x14>)
 8000daa:	681b      	ldr	r3, [r3, #0]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000130 	.word	0x20000130

08000dbc <__NVIC_SetPriorityGrouping>:
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dee:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	60d3      	str	r3, [r2, #12]
}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_GetPriorityGrouping>:
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <__NVIC_GetPriorityGrouping+0x18>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	f003 0307 	and.w	r3, r3, #7
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_EnableIRQ>:
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	db0b      	blt.n	8000e4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	f003 021f 	and.w	r2, r3, #31
 8000e38:	4907      	ldr	r1, [pc, #28]	; (8000e58 <__NVIC_EnableIRQ+0x38>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	095b      	lsrs	r3, r3, #5
 8000e40:	2001      	movs	r0, #1
 8000e42:	fa00 f202 	lsl.w	r2, r0, r2
 8000e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000e100 	.word	0xe000e100

08000e5c <__NVIC_SetPriority>:
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	db0a      	blt.n	8000e86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	490c      	ldr	r1, [pc, #48]	; (8000ea8 <__NVIC_SetPriority+0x4c>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	0112      	lsls	r2, r2, #4
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	440b      	add	r3, r1
 8000e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e84:	e00a      	b.n	8000e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4908      	ldr	r1, [pc, #32]	; (8000eac <__NVIC_SetPriority+0x50>)
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	3b04      	subs	r3, #4
 8000e94:	0112      	lsls	r2, r2, #4
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	440b      	add	r3, r1
 8000e9a:	761a      	strb	r2, [r3, #24]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000e100 	.word	0xe000e100
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <NVIC_EncodePriority>:
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	; 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f1c3 0307 	rsb	r3, r3, #7
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	bf28      	it	cs
 8000ece:	2304      	movcs	r3, #4
 8000ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	d902      	bls.n	8000ee0 <NVIC_EncodePriority+0x30>
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3b03      	subs	r3, #3
 8000ede:	e000      	b.n	8000ee2 <NVIC_EncodePriority+0x32>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	43d9      	mvns	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	4313      	orrs	r3, r2
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3724      	adds	r7, #36	; 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ff4c 	bl	8000dbc <__NVIC_SetPriorityGrouping>
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
 8000f38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f3e:	f7ff ff61 	bl	8000e04 <__NVIC_GetPriorityGrouping>
 8000f42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	68b9      	ldr	r1, [r7, #8]
 8000f48:	6978      	ldr	r0, [r7, #20]
 8000f4a:	f7ff ffb1 	bl	8000eb0 <NVIC_EncodePriority>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f54:	4611      	mov	r1, r2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff ff80 	bl	8000e5c <__NVIC_SetPriority>
}
 8000f5c:	bf00      	nop
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ff54 	bl	8000e20 <__NVIC_EnableIRQ>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b089      	sub	sp, #36	; 0x24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
 8000f9a:	e177      	b.n	800128c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	f040 8166 	bne.w	8001286 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d005      	beq.n	8000fd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d130      	bne.n	8001034 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	2203      	movs	r2, #3
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	68da      	ldr	r2, [r3, #12]
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001008:	2201      	movs	r2, #1
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	091b      	lsrs	r3, r3, #4
 800101e:	f003 0201 	and.w	r2, r3, #1
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	2b03      	cmp	r3, #3
 800103e:	d017      	beq.n	8001070 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	2203      	movs	r2, #3
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d123      	bne.n	80010c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	08da      	lsrs	r2, r3, #3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3208      	adds	r2, #8
 8001084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001088:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	f003 0307 	and.w	r3, r3, #7
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	220f      	movs	r2, #15
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	691a      	ldr	r2, [r3, #16]
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	08da      	lsrs	r2, r3, #3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3208      	adds	r2, #8
 80010be:	69b9      	ldr	r1, [r7, #24]
 80010c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0203 	and.w	r2, r3, #3
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001100:	2b00      	cmp	r3, #0
 8001102:	f000 80c0 	beq.w	8001286 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	4b66      	ldr	r3, [pc, #408]	; (80012a4 <HAL_GPIO_Init+0x324>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	4a65      	ldr	r2, [pc, #404]	; (80012a4 <HAL_GPIO_Init+0x324>)
 8001110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001114:	6453      	str	r3, [r2, #68]	; 0x44
 8001116:	4b63      	ldr	r3, [pc, #396]	; (80012a4 <HAL_GPIO_Init+0x324>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001122:	4a61      	ldr	r2, [pc, #388]	; (80012a8 <HAL_GPIO_Init+0x328>)
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	089b      	lsrs	r3, r3, #2
 8001128:	3302      	adds	r3, #2
 800112a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	220f      	movs	r2, #15
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a58      	ldr	r2, [pc, #352]	; (80012ac <HAL_GPIO_Init+0x32c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d037      	beq.n	80011be <HAL_GPIO_Init+0x23e>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a57      	ldr	r2, [pc, #348]	; (80012b0 <HAL_GPIO_Init+0x330>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d031      	beq.n	80011ba <HAL_GPIO_Init+0x23a>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a56      	ldr	r2, [pc, #344]	; (80012b4 <HAL_GPIO_Init+0x334>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d02b      	beq.n	80011b6 <HAL_GPIO_Init+0x236>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a55      	ldr	r2, [pc, #340]	; (80012b8 <HAL_GPIO_Init+0x338>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d025      	beq.n	80011b2 <HAL_GPIO_Init+0x232>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a54      	ldr	r2, [pc, #336]	; (80012bc <HAL_GPIO_Init+0x33c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d01f      	beq.n	80011ae <HAL_GPIO_Init+0x22e>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a53      	ldr	r2, [pc, #332]	; (80012c0 <HAL_GPIO_Init+0x340>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d019      	beq.n	80011aa <HAL_GPIO_Init+0x22a>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a52      	ldr	r2, [pc, #328]	; (80012c4 <HAL_GPIO_Init+0x344>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d013      	beq.n	80011a6 <HAL_GPIO_Init+0x226>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a51      	ldr	r2, [pc, #324]	; (80012c8 <HAL_GPIO_Init+0x348>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d00d      	beq.n	80011a2 <HAL_GPIO_Init+0x222>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a50      	ldr	r2, [pc, #320]	; (80012cc <HAL_GPIO_Init+0x34c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d007      	beq.n	800119e <HAL_GPIO_Init+0x21e>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a4f      	ldr	r2, [pc, #316]	; (80012d0 <HAL_GPIO_Init+0x350>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d101      	bne.n	800119a <HAL_GPIO_Init+0x21a>
 8001196:	2309      	movs	r3, #9
 8001198:	e012      	b.n	80011c0 <HAL_GPIO_Init+0x240>
 800119a:	230a      	movs	r3, #10
 800119c:	e010      	b.n	80011c0 <HAL_GPIO_Init+0x240>
 800119e:	2308      	movs	r3, #8
 80011a0:	e00e      	b.n	80011c0 <HAL_GPIO_Init+0x240>
 80011a2:	2307      	movs	r3, #7
 80011a4:	e00c      	b.n	80011c0 <HAL_GPIO_Init+0x240>
 80011a6:	2306      	movs	r3, #6
 80011a8:	e00a      	b.n	80011c0 <HAL_GPIO_Init+0x240>
 80011aa:	2305      	movs	r3, #5
 80011ac:	e008      	b.n	80011c0 <HAL_GPIO_Init+0x240>
 80011ae:	2304      	movs	r3, #4
 80011b0:	e006      	b.n	80011c0 <HAL_GPIO_Init+0x240>
 80011b2:	2303      	movs	r3, #3
 80011b4:	e004      	b.n	80011c0 <HAL_GPIO_Init+0x240>
 80011b6:	2302      	movs	r3, #2
 80011b8:	e002      	b.n	80011c0 <HAL_GPIO_Init+0x240>
 80011ba:	2301      	movs	r3, #1
 80011bc:	e000      	b.n	80011c0 <HAL_GPIO_Init+0x240>
 80011be:	2300      	movs	r3, #0
 80011c0:	69fa      	ldr	r2, [r7, #28]
 80011c2:	f002 0203 	and.w	r2, r2, #3
 80011c6:	0092      	lsls	r2, r2, #2
 80011c8:	4093      	lsls	r3, r2
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d0:	4935      	ldr	r1, [pc, #212]	; (80012a8 <HAL_GPIO_Init+0x328>)
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	089b      	lsrs	r3, r3, #2
 80011d6:	3302      	adds	r3, #2
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011de:	4b3d      	ldr	r3, [pc, #244]	; (80012d4 <HAL_GPIO_Init+0x354>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001202:	4a34      	ldr	r2, [pc, #208]	; (80012d4 <HAL_GPIO_Init+0x354>)
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001208:	4b32      	ldr	r3, [pc, #200]	; (80012d4 <HAL_GPIO_Init+0x354>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800122c:	4a29      	ldr	r2, [pc, #164]	; (80012d4 <HAL_GPIO_Init+0x354>)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001232:	4b28      	ldr	r3, [pc, #160]	; (80012d4 <HAL_GPIO_Init+0x354>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001256:	4a1f      	ldr	r2, [pc, #124]	; (80012d4 <HAL_GPIO_Init+0x354>)
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800125c:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <HAL_GPIO_Init+0x354>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001280:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <HAL_GPIO_Init+0x354>)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3301      	adds	r3, #1
 800128a:	61fb      	str	r3, [r7, #28]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	2b0f      	cmp	r3, #15
 8001290:	f67f ae84 	bls.w	8000f9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3724      	adds	r7, #36	; 0x24
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40013800 	.word	0x40013800
 80012ac:	40020000 	.word	0x40020000
 80012b0:	40020400 	.word	0x40020400
 80012b4:	40020800 	.word	0x40020800
 80012b8:	40020c00 	.word	0x40020c00
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40021400 	.word	0x40021400
 80012c4:	40021800 	.word	0x40021800
 80012c8:	40021c00 	.word	0x40021c00
 80012cc:	40022000 	.word	0x40022000
 80012d0:	40022400 	.word	0x40022400
 80012d4:	40013c00 	.word	0x40013c00

080012d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	807b      	strh	r3, [r7, #2]
 80012e4:	4613      	mov	r3, r2
 80012e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012e8:	787b      	ldrb	r3, [r7, #1]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ee:	887a      	ldrh	r2, [r7, #2]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012f4:	e003      	b.n	80012fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012f6:	887b      	ldrh	r3, [r7, #2]
 80012f8:	041a      	lsls	r2, r3, #16
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	619a      	str	r2, [r3, #24]
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800130a:	b480      	push	{r7}
 800130c:	b085      	sub	sp, #20
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	460b      	mov	r3, r1
 8001314:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800131c:	887a      	ldrh	r2, [r7, #2]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4013      	ands	r3, r2
 8001322:	041a      	lsls	r2, r3, #16
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	43d9      	mvns	r1, r3
 8001328:	887b      	ldrh	r3, [r7, #2]
 800132a:	400b      	ands	r3, r1
 800132c:	431a      	orrs	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	619a      	str	r2, [r3, #24]
}
 8001332:	bf00      	nop
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	603b      	str	r3, [r7, #0]
 800134e:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	4a1f      	ldr	r2, [pc, #124]	; (80013d0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001358:	6413      	str	r3, [r2, #64]	; 0x40
 800135a:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <HAL_PWREx_EnableOverDrive+0x90>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001366:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <HAL_PWREx_EnableOverDrive+0x94>)
 8001368:	2201      	movs	r2, #1
 800136a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800136c:	f7ff fd1a 	bl	8000da4 <HAL_GetTick>
 8001370:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001372:	e009      	b.n	8001388 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001374:	f7ff fd16 	bl	8000da4 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001382:	d901      	bls.n	8001388 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e01f      	b.n	80013c8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001388:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001394:	d1ee      	bne.n	8001374 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001398:	2201      	movs	r2, #1
 800139a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800139c:	f7ff fd02 	bl	8000da4 <HAL_GetTick>
 80013a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013a2:	e009      	b.n	80013b8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013a4:	f7ff fcfe 	bl	8000da4 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013b2:	d901      	bls.n	80013b8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e007      	b.n	80013c8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013b8:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <HAL_PWREx_EnableOverDrive+0x98>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013c4:	d1ee      	bne.n	80013a4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40023800 	.word	0x40023800
 80013d4:	420e0040 	.word	0x420e0040
 80013d8:	40007000 	.word	0x40007000
 80013dc:	420e0044 	.word	0x420e0044

080013e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e267      	b.n	80018c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d075      	beq.n	80014ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013fe:	4b88      	ldr	r3, [pc, #544]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	2b04      	cmp	r3, #4
 8001408:	d00c      	beq.n	8001424 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800140a:	4b85      	ldr	r3, [pc, #532]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001412:	2b08      	cmp	r3, #8
 8001414:	d112      	bne.n	800143c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001416:	4b82      	ldr	r3, [pc, #520]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800141e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001422:	d10b      	bne.n	800143c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001424:	4b7e      	ldr	r3, [pc, #504]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d05b      	beq.n	80014e8 <HAL_RCC_OscConfig+0x108>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d157      	bne.n	80014e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e242      	b.n	80018c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001444:	d106      	bne.n	8001454 <HAL_RCC_OscConfig+0x74>
 8001446:	4b76      	ldr	r3, [pc, #472]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a75      	ldr	r2, [pc, #468]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 800144c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	e01d      	b.n	8001490 <HAL_RCC_OscConfig+0xb0>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800145c:	d10c      	bne.n	8001478 <HAL_RCC_OscConfig+0x98>
 800145e:	4b70      	ldr	r3, [pc, #448]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a6f      	ldr	r2, [pc, #444]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 8001464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	4b6d      	ldr	r3, [pc, #436]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a6c      	ldr	r2, [pc, #432]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 8001470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e00b      	b.n	8001490 <HAL_RCC_OscConfig+0xb0>
 8001478:	4b69      	ldr	r3, [pc, #420]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a68      	ldr	r2, [pc, #416]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 800147e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	4b66      	ldr	r3, [pc, #408]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a65      	ldr	r2, [pc, #404]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 800148a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800148e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d013      	beq.n	80014c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001498:	f7ff fc84 	bl	8000da4 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014a0:	f7ff fc80 	bl	8000da4 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b64      	cmp	r3, #100	; 0x64
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e207      	b.n	80018c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b2:	4b5b      	ldr	r3, [pc, #364]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0xc0>
 80014be:	e014      	b.n	80014ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c0:	f7ff fc70 	bl	8000da4 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014c8:	f7ff fc6c 	bl	8000da4 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b64      	cmp	r3, #100	; 0x64
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e1f3      	b.n	80018c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014da:	4b51      	ldr	r3, [pc, #324]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f0      	bne.n	80014c8 <HAL_RCC_OscConfig+0xe8>
 80014e6:	e000      	b.n	80014ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d063      	beq.n	80015be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014f6:	4b4a      	ldr	r3, [pc, #296]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 030c 	and.w	r3, r3, #12
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d00b      	beq.n	800151a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001502:	4b47      	ldr	r3, [pc, #284]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800150a:	2b08      	cmp	r3, #8
 800150c:	d11c      	bne.n	8001548 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800150e:	4b44      	ldr	r3, [pc, #272]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d116      	bne.n	8001548 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800151a:	4b41      	ldr	r3, [pc, #260]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d005      	beq.n	8001532 <HAL_RCC_OscConfig+0x152>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d001      	beq.n	8001532 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e1c7      	b.n	80018c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001532:	4b3b      	ldr	r3, [pc, #236]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	4937      	ldr	r1, [pc, #220]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 8001542:	4313      	orrs	r3, r2
 8001544:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001546:	e03a      	b.n	80015be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d020      	beq.n	8001592 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001550:	4b34      	ldr	r3, [pc, #208]	; (8001624 <HAL_RCC_OscConfig+0x244>)
 8001552:	2201      	movs	r2, #1
 8001554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001556:	f7ff fc25 	bl	8000da4 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800155e:	f7ff fc21 	bl	8000da4 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e1a8      	b.n	80018c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001570:	4b2b      	ldr	r3, [pc, #172]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0f0      	beq.n	800155e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157c:	4b28      	ldr	r3, [pc, #160]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	4925      	ldr	r1, [pc, #148]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 800158c:	4313      	orrs	r3, r2
 800158e:	600b      	str	r3, [r1, #0]
 8001590:	e015      	b.n	80015be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001592:	4b24      	ldr	r3, [pc, #144]	; (8001624 <HAL_RCC_OscConfig+0x244>)
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001598:	f7ff fc04 	bl	8000da4 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015a0:	f7ff fc00 	bl	8000da4 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e187      	b.n	80018c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015b2:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f0      	bne.n	80015a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d036      	beq.n	8001638 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d016      	beq.n	8001600 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <HAL_RCC_OscConfig+0x248>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d8:	f7ff fbe4 	bl	8000da4 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015e0:	f7ff fbe0 	bl	8000da4 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e167      	b.n	80018c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015f2:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 80015f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0f0      	beq.n	80015e0 <HAL_RCC_OscConfig+0x200>
 80015fe:	e01b      	b.n	8001638 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <HAL_RCC_OscConfig+0x248>)
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001606:	f7ff fbcd 	bl	8000da4 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800160c:	e00e      	b.n	800162c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800160e:	f7ff fbc9 	bl	8000da4 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d907      	bls.n	800162c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e150      	b.n	80018c2 <HAL_RCC_OscConfig+0x4e2>
 8001620:	40023800 	.word	0x40023800
 8001624:	42470000 	.word	0x42470000
 8001628:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800162c:	4b88      	ldr	r3, [pc, #544]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 800162e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1ea      	bne.n	800160e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 8097 	beq.w	8001774 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001646:	2300      	movs	r3, #0
 8001648:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800164a:	4b81      	ldr	r3, [pc, #516]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10f      	bne.n	8001676 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	4b7d      	ldr	r3, [pc, #500]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	4a7c      	ldr	r2, [pc, #496]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 8001660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001664:	6413      	str	r3, [r2, #64]	; 0x40
 8001666:	4b7a      	ldr	r3, [pc, #488]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001672:	2301      	movs	r3, #1
 8001674:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001676:	4b77      	ldr	r3, [pc, #476]	; (8001854 <HAL_RCC_OscConfig+0x474>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167e:	2b00      	cmp	r3, #0
 8001680:	d118      	bne.n	80016b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001682:	4b74      	ldr	r3, [pc, #464]	; (8001854 <HAL_RCC_OscConfig+0x474>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a73      	ldr	r2, [pc, #460]	; (8001854 <HAL_RCC_OscConfig+0x474>)
 8001688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800168e:	f7ff fb89 	bl	8000da4 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001696:	f7ff fb85 	bl	8000da4 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e10c      	b.n	80018c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a8:	4b6a      	ldr	r3, [pc, #424]	; (8001854 <HAL_RCC_OscConfig+0x474>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d106      	bne.n	80016ca <HAL_RCC_OscConfig+0x2ea>
 80016bc:	4b64      	ldr	r3, [pc, #400]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 80016be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c0:	4a63      	ldr	r2, [pc, #396]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	6713      	str	r3, [r2, #112]	; 0x70
 80016c8:	e01c      	b.n	8001704 <HAL_RCC_OscConfig+0x324>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2b05      	cmp	r3, #5
 80016d0:	d10c      	bne.n	80016ec <HAL_RCC_OscConfig+0x30c>
 80016d2:	4b5f      	ldr	r3, [pc, #380]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 80016d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d6:	4a5e      	ldr	r2, [pc, #376]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	6713      	str	r3, [r2, #112]	; 0x70
 80016de:	4b5c      	ldr	r3, [pc, #368]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 80016e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e2:	4a5b      	ldr	r2, [pc, #364]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6713      	str	r3, [r2, #112]	; 0x70
 80016ea:	e00b      	b.n	8001704 <HAL_RCC_OscConfig+0x324>
 80016ec:	4b58      	ldr	r3, [pc, #352]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 80016ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f0:	4a57      	ldr	r2, [pc, #348]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 80016f2:	f023 0301 	bic.w	r3, r3, #1
 80016f6:	6713      	str	r3, [r2, #112]	; 0x70
 80016f8:	4b55      	ldr	r3, [pc, #340]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 80016fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fc:	4a54      	ldr	r2, [pc, #336]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 80016fe:	f023 0304 	bic.w	r3, r3, #4
 8001702:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d015      	beq.n	8001738 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170c:	f7ff fb4a 	bl	8000da4 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001712:	e00a      	b.n	800172a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001714:	f7ff fb46 	bl	8000da4 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001722:	4293      	cmp	r3, r2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e0cb      	b.n	80018c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800172a:	4b49      	ldr	r3, [pc, #292]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 800172c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0ee      	beq.n	8001714 <HAL_RCC_OscConfig+0x334>
 8001736:	e014      	b.n	8001762 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001738:	f7ff fb34 	bl	8000da4 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800173e:	e00a      	b.n	8001756 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001740:	f7ff fb30 	bl	8000da4 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	f241 3288 	movw	r2, #5000	; 0x1388
 800174e:	4293      	cmp	r3, r2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e0b5      	b.n	80018c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001756:	4b3e      	ldr	r3, [pc, #248]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 8001758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1ee      	bne.n	8001740 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001762:	7dfb      	ldrb	r3, [r7, #23]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d105      	bne.n	8001774 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001768:	4b39      	ldr	r3, [pc, #228]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	4a38      	ldr	r2, [pc, #224]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 800176e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001772:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	2b00      	cmp	r3, #0
 800177a:	f000 80a1 	beq.w	80018c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800177e:	4b34      	ldr	r3, [pc, #208]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 030c 	and.w	r3, r3, #12
 8001786:	2b08      	cmp	r3, #8
 8001788:	d05c      	beq.n	8001844 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	2b02      	cmp	r3, #2
 8001790:	d141      	bne.n	8001816 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001792:	4b31      	ldr	r3, [pc, #196]	; (8001858 <HAL_RCC_OscConfig+0x478>)
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001798:	f7ff fb04 	bl	8000da4 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017a0:	f7ff fb00 	bl	8000da4 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e087      	b.n	80018c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b2:	4b27      	ldr	r3, [pc, #156]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	69da      	ldr	r2, [r3, #28]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	019b      	lsls	r3, r3, #6
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d4:	085b      	lsrs	r3, r3, #1
 80017d6:	3b01      	subs	r3, #1
 80017d8:	041b      	lsls	r3, r3, #16
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e0:	061b      	lsls	r3, r3, #24
 80017e2:	491b      	ldr	r1, [pc, #108]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017e8:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <HAL_RCC_OscConfig+0x478>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ee:	f7ff fad9 	bl	8000da4 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f6:	f7ff fad5 	bl	8000da4 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e05c      	b.n	80018c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0f0      	beq.n	80017f6 <HAL_RCC_OscConfig+0x416>
 8001814:	e054      	b.n	80018c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <HAL_RCC_OscConfig+0x478>)
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181c:	f7ff fac2 	bl	8000da4 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001824:	f7ff fabe 	bl	8000da4 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e045      	b.n	80018c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0x444>
 8001842:	e03d      	b.n	80018c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d107      	bne.n	800185c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e038      	b.n	80018c2 <HAL_RCC_OscConfig+0x4e2>
 8001850:	40023800 	.word	0x40023800
 8001854:	40007000 	.word	0x40007000
 8001858:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800185c:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <HAL_RCC_OscConfig+0x4ec>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d028      	beq.n	80018bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001874:	429a      	cmp	r2, r3
 8001876:	d121      	bne.n	80018bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001882:	429a      	cmp	r2, r3
 8001884:	d11a      	bne.n	80018bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800188c:	4013      	ands	r3, r2
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001892:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001894:	4293      	cmp	r3, r2
 8001896:	d111      	bne.n	80018bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a2:	085b      	lsrs	r3, r3, #1
 80018a4:	3b01      	subs	r3, #1
 80018a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d107      	bne.n	80018bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d001      	beq.n	80018c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40023800 	.word	0x40023800

080018d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e0cc      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018e4:	4b68      	ldr	r3, [pc, #416]	; (8001a88 <HAL_RCC_ClockConfig+0x1b8>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 030f 	and.w	r3, r3, #15
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d90c      	bls.n	800190c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f2:	4b65      	ldr	r3, [pc, #404]	; (8001a88 <HAL_RCC_ClockConfig+0x1b8>)
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fa:	4b63      	ldr	r3, [pc, #396]	; (8001a88 <HAL_RCC_ClockConfig+0x1b8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	429a      	cmp	r2, r3
 8001906:	d001      	beq.n	800190c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e0b8      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d020      	beq.n	800195a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b00      	cmp	r3, #0
 8001922:	d005      	beq.n	8001930 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001924:	4b59      	ldr	r3, [pc, #356]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	4a58      	ldr	r2, [pc, #352]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800192e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	2b00      	cmp	r3, #0
 800193a:	d005      	beq.n	8001948 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800193c:	4b53      	ldr	r3, [pc, #332]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	4a52      	ldr	r2, [pc, #328]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001946:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001948:	4b50      	ldr	r3, [pc, #320]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	494d      	ldr	r1, [pc, #308]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	4313      	orrs	r3, r2
 8001958:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d044      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d107      	bne.n	800197e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196e:	4b47      	ldr	r3, [pc, #284]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d119      	bne.n	80019ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e07f      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d003      	beq.n	800198e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800198a:	2b03      	cmp	r3, #3
 800198c:	d107      	bne.n	800199e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800198e:	4b3f      	ldr	r3, [pc, #252]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d109      	bne.n	80019ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e06f      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199e:	4b3b      	ldr	r3, [pc, #236]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e067      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ae:	4b37      	ldr	r3, [pc, #220]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f023 0203 	bic.w	r2, r3, #3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	4934      	ldr	r1, [pc, #208]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019c0:	f7ff f9f0 	bl	8000da4 <HAL_GetTick>
 80019c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c6:	e00a      	b.n	80019de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c8:	f7ff f9ec 	bl	8000da4 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e04f      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019de:	4b2b      	ldr	r3, [pc, #172]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 020c 	and.w	r2, r3, #12
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d1eb      	bne.n	80019c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019f0:	4b25      	ldr	r3, [pc, #148]	; (8001a88 <HAL_RCC_ClockConfig+0x1b8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 030f 	and.w	r3, r3, #15
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d20c      	bcs.n	8001a18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fe:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <HAL_RCC_ClockConfig+0x1b8>)
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a06:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <HAL_RCC_ClockConfig+0x1b8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 030f 	and.w	r3, r3, #15
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d001      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e032      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d008      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a24:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	4916      	ldr	r1, [pc, #88]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d009      	beq.n	8001a56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a42:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	490e      	ldr	r1, [pc, #56]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a56:	f000 f821 	bl	8001a9c <HAL_RCC_GetSysClockFreq>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	091b      	lsrs	r3, r3, #4
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	490a      	ldr	r1, [pc, #40]	; (8001a90 <HAL_RCC_ClockConfig+0x1c0>)
 8001a68:	5ccb      	ldrb	r3, [r1, r3]
 8001a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6e:	4a09      	ldr	r2, [pc, #36]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7fe fff4 	bl	8000a64 <HAL_InitTick>

  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40023c00 	.word	0x40023c00
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	08006afc 	.word	0x08006afc
 8001a94:	20000000 	.word	0x20000000
 8001a98:	20000004 	.word	0x20000004

08001a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001aa0:	b094      	sub	sp, #80	; 0x50
 8001aa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	647b      	str	r3, [r7, #68]	; 0x44
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001aac:	2300      	movs	r3, #0
 8001aae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ab4:	4b79      	ldr	r3, [pc, #484]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 030c 	and.w	r3, r3, #12
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d00d      	beq.n	8001adc <HAL_RCC_GetSysClockFreq+0x40>
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	f200 80e1 	bhi.w	8001c88 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d002      	beq.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x34>
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	d003      	beq.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001ace:	e0db      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ad0:	4b73      	ldr	r3, [pc, #460]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ad2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001ad4:	e0db      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ad6:	4b73      	ldr	r3, [pc, #460]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ad8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ada:	e0d8      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001adc:	4b6f      	ldr	r3, [pc, #444]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ae4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ae6:	4b6d      	ldr	r3, [pc, #436]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d063      	beq.n	8001bba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001af2:	4b6a      	ldr	r3, [pc, #424]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	099b      	lsrs	r3, r3, #6
 8001af8:	2200      	movs	r2, #0
 8001afa:	63bb      	str	r3, [r7, #56]	; 0x38
 8001afc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b04:	633b      	str	r3, [r7, #48]	; 0x30
 8001b06:	2300      	movs	r3, #0
 8001b08:	637b      	str	r3, [r7, #52]	; 0x34
 8001b0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b0e:	4622      	mov	r2, r4
 8001b10:	462b      	mov	r3, r5
 8001b12:	f04f 0000 	mov.w	r0, #0
 8001b16:	f04f 0100 	mov.w	r1, #0
 8001b1a:	0159      	lsls	r1, r3, #5
 8001b1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b20:	0150      	lsls	r0, r2, #5
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4621      	mov	r1, r4
 8001b28:	1a51      	subs	r1, r2, r1
 8001b2a:	6139      	str	r1, [r7, #16]
 8001b2c:	4629      	mov	r1, r5
 8001b2e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	f04f 0300 	mov.w	r3, #0
 8001b3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b40:	4659      	mov	r1, fp
 8001b42:	018b      	lsls	r3, r1, #6
 8001b44:	4651      	mov	r1, sl
 8001b46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b4a:	4651      	mov	r1, sl
 8001b4c:	018a      	lsls	r2, r1, #6
 8001b4e:	4651      	mov	r1, sl
 8001b50:	ebb2 0801 	subs.w	r8, r2, r1
 8001b54:	4659      	mov	r1, fp
 8001b56:	eb63 0901 	sbc.w	r9, r3, r1
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	f04f 0300 	mov.w	r3, #0
 8001b62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b6e:	4690      	mov	r8, r2
 8001b70:	4699      	mov	r9, r3
 8001b72:	4623      	mov	r3, r4
 8001b74:	eb18 0303 	adds.w	r3, r8, r3
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	462b      	mov	r3, r5
 8001b7c:	eb49 0303 	adc.w	r3, r9, r3
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	f04f 0300 	mov.w	r3, #0
 8001b8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b8e:	4629      	mov	r1, r5
 8001b90:	024b      	lsls	r3, r1, #9
 8001b92:	4621      	mov	r1, r4
 8001b94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b98:	4621      	mov	r1, r4
 8001b9a:	024a      	lsls	r2, r1, #9
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ba6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ba8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bac:	f7fe fb70 	bl	8000290 <__aeabi_uldivmod>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bb8:	e058      	b.n	8001c6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bba:	4b38      	ldr	r3, [pc, #224]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	099b      	lsrs	r3, r3, #6
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	4611      	mov	r1, r2
 8001bc6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bca:	623b      	str	r3, [r7, #32]
 8001bcc:	2300      	movs	r3, #0
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
 8001bd0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bd4:	4642      	mov	r2, r8
 8001bd6:	464b      	mov	r3, r9
 8001bd8:	f04f 0000 	mov.w	r0, #0
 8001bdc:	f04f 0100 	mov.w	r1, #0
 8001be0:	0159      	lsls	r1, r3, #5
 8001be2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001be6:	0150      	lsls	r0, r2, #5
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4641      	mov	r1, r8
 8001bee:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bf2:	4649      	mov	r1, r9
 8001bf4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	f04f 0300 	mov.w	r3, #0
 8001c00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c0c:	ebb2 040a 	subs.w	r4, r2, sl
 8001c10:	eb63 050b 	sbc.w	r5, r3, fp
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	f04f 0300 	mov.w	r3, #0
 8001c1c:	00eb      	lsls	r3, r5, #3
 8001c1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c22:	00e2      	lsls	r2, r4, #3
 8001c24:	4614      	mov	r4, r2
 8001c26:	461d      	mov	r5, r3
 8001c28:	4643      	mov	r3, r8
 8001c2a:	18e3      	adds	r3, r4, r3
 8001c2c:	603b      	str	r3, [r7, #0]
 8001c2e:	464b      	mov	r3, r9
 8001c30:	eb45 0303 	adc.w	r3, r5, r3
 8001c34:	607b      	str	r3, [r7, #4]
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c42:	4629      	mov	r1, r5
 8001c44:	028b      	lsls	r3, r1, #10
 8001c46:	4621      	mov	r1, r4
 8001c48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c4c:	4621      	mov	r1, r4
 8001c4e:	028a      	lsls	r2, r1, #10
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c56:	2200      	movs	r2, #0
 8001c58:	61bb      	str	r3, [r7, #24]
 8001c5a:	61fa      	str	r2, [r7, #28]
 8001c5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c60:	f7fe fb16 	bl	8000290 <__aeabi_uldivmod>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4613      	mov	r3, r2
 8001c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	0c1b      	lsrs	r3, r3, #16
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	3301      	adds	r3, #1
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c86:	e002      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c8a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3750      	adds	r7, #80	; 0x50
 8001c94:	46bd      	mov	sp, r7
 8001c96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	00f42400 	.word	0x00f42400
 8001ca4:	007a1200 	.word	0x007a1200

08001ca8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cac:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8001cae:	681b      	ldr	r3, [r3, #0]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20000000 	.word	0x20000000

08001cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cc4:	f7ff fff0 	bl	8001ca8 <HAL_RCC_GetHCLKFreq>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	0a9b      	lsrs	r3, r3, #10
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	4903      	ldr	r1, [pc, #12]	; (8001ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cd6:	5ccb      	ldrb	r3, [r1, r3]
 8001cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	08006b0c 	.word	0x08006b0c

08001ce8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	220f      	movs	r2, #15
 8001cf6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <HAL_RCC_GetClockConfig+0x5c>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 0203 	and.w	r2, r3, #3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d04:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <HAL_RCC_GetClockConfig+0x5c>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <HAL_RCC_GetClockConfig+0x5c>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d1c:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <HAL_RCC_GetClockConfig+0x5c>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	08db      	lsrs	r3, r3, #3
 8001d22:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d2a:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <HAL_RCC_GetClockConfig+0x60>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 020f 	and.w	r2, r3, #15
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	601a      	str	r2, [r3, #0]
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40023c00 	.word	0x40023c00

08001d4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e041      	b.n	8001de2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d106      	bne.n	8001d78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7fe fe50 	bl	8000a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3304      	adds	r3, #4
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	f000 fa7e 	bl	800228c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
	...

08001dec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d001      	beq.n	8001e04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e04e      	b.n	8001ea2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2202      	movs	r2, #2
 8001e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0201 	orr.w	r2, r2, #1
 8001e1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a23      	ldr	r2, [pc, #140]	; (8001eb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d022      	beq.n	8001e6c <HAL_TIM_Base_Start_IT+0x80>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e2e:	d01d      	beq.n	8001e6c <HAL_TIM_Base_Start_IT+0x80>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1f      	ldr	r2, [pc, #124]	; (8001eb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d018      	beq.n	8001e6c <HAL_TIM_Base_Start_IT+0x80>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a1e      	ldr	r2, [pc, #120]	; (8001eb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d013      	beq.n	8001e6c <HAL_TIM_Base_Start_IT+0x80>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a1c      	ldr	r2, [pc, #112]	; (8001ebc <HAL_TIM_Base_Start_IT+0xd0>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d00e      	beq.n	8001e6c <HAL_TIM_Base_Start_IT+0x80>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a1b      	ldr	r2, [pc, #108]	; (8001ec0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d009      	beq.n	8001e6c <HAL_TIM_Base_Start_IT+0x80>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a19      	ldr	r2, [pc, #100]	; (8001ec4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d004      	beq.n	8001e6c <HAL_TIM_Base_Start_IT+0x80>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a18      	ldr	r2, [pc, #96]	; (8001ec8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d111      	bne.n	8001e90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b06      	cmp	r3, #6
 8001e7c:	d010      	beq.n	8001ea0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f042 0201 	orr.w	r2, r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e8e:	e007      	b.n	8001ea0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0201 	orr.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40010000 	.word	0x40010000
 8001eb4:	40000400 	.word	0x40000400
 8001eb8:	40000800 	.word	0x40000800
 8001ebc:	40000c00 	.word	0x40000c00
 8001ec0:	40010400 	.word	0x40010400
 8001ec4:	40014000 	.word	0x40014000
 8001ec8:	40001800 	.word	0x40001800

08001ecc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d020      	beq.n	8001f30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d01b      	beq.n	8001f30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f06f 0202 	mvn.w	r2, #2
 8001f00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f999 	bl	800224e <HAL_TIM_IC_CaptureCallback>
 8001f1c:	e005      	b.n	8001f2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f98b 	bl	800223a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f99c 	bl	8002262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f003 0304 	and.w	r3, r3, #4
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d020      	beq.n	8001f7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d01b      	beq.n	8001f7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0204 	mvn.w	r2, #4
 8001f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2202      	movs	r2, #2
 8001f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f973 	bl	800224e <HAL_TIM_IC_CaptureCallback>
 8001f68:	e005      	b.n	8001f76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f965 	bl	800223a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f976 	bl	8002262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d020      	beq.n	8001fc8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d01b      	beq.n	8001fc8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0208 	mvn.w	r2, #8
 8001f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f94d 	bl	800224e <HAL_TIM_IC_CaptureCallback>
 8001fb4:	e005      	b.n	8001fc2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f93f 	bl	800223a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f950 	bl	8002262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f003 0310 	and.w	r3, r3, #16
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d020      	beq.n	8002014 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f003 0310 	and.w	r3, r3, #16
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d01b      	beq.n	8002014 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f06f 0210 	mvn.w	r2, #16
 8001fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2208      	movs	r2, #8
 8001fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f927 	bl	800224e <HAL_TIM_IC_CaptureCallback>
 8002000:	e005      	b.n	800200e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f919 	bl	800223a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 f92a 	bl	8002262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00c      	beq.n	8002038 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b00      	cmp	r3, #0
 8002026:	d007      	beq.n	8002038 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0201 	mvn.w	r2, #1
 8002030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7fe fc9e 	bl	8000974 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00c      	beq.n	800205c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002048:	2b00      	cmp	r3, #0
 800204a:	d007      	beq.n	800205c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 fae4 	bl	8002624 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00c      	beq.n	8002080 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206c:	2b00      	cmp	r3, #0
 800206e:	d007      	beq.n	8002080 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f8fb 	bl	8002276 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	f003 0320 	and.w	r3, r3, #32
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00c      	beq.n	80020a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f003 0320 	and.w	r3, r3, #32
 8002090:	2b00      	cmp	r3, #0
 8002092:	d007      	beq.n	80020a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f06f 0220 	mvn.w	r2, #32
 800209c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 fab6 	bl	8002610 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020a4:	bf00      	nop
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d101      	bne.n	80020c8 <HAL_TIM_ConfigClockSource+0x1c>
 80020c4:	2302      	movs	r3, #2
 80020c6:	e0b4      	b.n	8002232 <HAL_TIM_ConfigClockSource+0x186>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2202      	movs	r2, #2
 80020d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80020e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68ba      	ldr	r2, [r7, #8]
 80020f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002100:	d03e      	beq.n	8002180 <HAL_TIM_ConfigClockSource+0xd4>
 8002102:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002106:	f200 8087 	bhi.w	8002218 <HAL_TIM_ConfigClockSource+0x16c>
 800210a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800210e:	f000 8086 	beq.w	800221e <HAL_TIM_ConfigClockSource+0x172>
 8002112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002116:	d87f      	bhi.n	8002218 <HAL_TIM_ConfigClockSource+0x16c>
 8002118:	2b70      	cmp	r3, #112	; 0x70
 800211a:	d01a      	beq.n	8002152 <HAL_TIM_ConfigClockSource+0xa6>
 800211c:	2b70      	cmp	r3, #112	; 0x70
 800211e:	d87b      	bhi.n	8002218 <HAL_TIM_ConfigClockSource+0x16c>
 8002120:	2b60      	cmp	r3, #96	; 0x60
 8002122:	d050      	beq.n	80021c6 <HAL_TIM_ConfigClockSource+0x11a>
 8002124:	2b60      	cmp	r3, #96	; 0x60
 8002126:	d877      	bhi.n	8002218 <HAL_TIM_ConfigClockSource+0x16c>
 8002128:	2b50      	cmp	r3, #80	; 0x50
 800212a:	d03c      	beq.n	80021a6 <HAL_TIM_ConfigClockSource+0xfa>
 800212c:	2b50      	cmp	r3, #80	; 0x50
 800212e:	d873      	bhi.n	8002218 <HAL_TIM_ConfigClockSource+0x16c>
 8002130:	2b40      	cmp	r3, #64	; 0x40
 8002132:	d058      	beq.n	80021e6 <HAL_TIM_ConfigClockSource+0x13a>
 8002134:	2b40      	cmp	r3, #64	; 0x40
 8002136:	d86f      	bhi.n	8002218 <HAL_TIM_ConfigClockSource+0x16c>
 8002138:	2b30      	cmp	r3, #48	; 0x30
 800213a:	d064      	beq.n	8002206 <HAL_TIM_ConfigClockSource+0x15a>
 800213c:	2b30      	cmp	r3, #48	; 0x30
 800213e:	d86b      	bhi.n	8002218 <HAL_TIM_ConfigClockSource+0x16c>
 8002140:	2b20      	cmp	r3, #32
 8002142:	d060      	beq.n	8002206 <HAL_TIM_ConfigClockSource+0x15a>
 8002144:	2b20      	cmp	r3, #32
 8002146:	d867      	bhi.n	8002218 <HAL_TIM_ConfigClockSource+0x16c>
 8002148:	2b00      	cmp	r3, #0
 800214a:	d05c      	beq.n	8002206 <HAL_TIM_ConfigClockSource+0x15a>
 800214c:	2b10      	cmp	r3, #16
 800214e:	d05a      	beq.n	8002206 <HAL_TIM_ConfigClockSource+0x15a>
 8002150:	e062      	b.n	8002218 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002162:	f000 f9b9 	bl	80024d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002174:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	609a      	str	r2, [r3, #8]
      break;
 800217e:	e04f      	b.n	8002220 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002190:	f000 f9a2 	bl	80024d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021a2:	609a      	str	r2, [r3, #8]
      break;
 80021a4:	e03c      	b.n	8002220 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021b2:	461a      	mov	r2, r3
 80021b4:	f000 f916 	bl	80023e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2150      	movs	r1, #80	; 0x50
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 f96f 	bl	80024a2 <TIM_ITRx_SetConfig>
      break;
 80021c4:	e02c      	b.n	8002220 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021d2:	461a      	mov	r2, r3
 80021d4:	f000 f935 	bl	8002442 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2160      	movs	r1, #96	; 0x60
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 f95f 	bl	80024a2 <TIM_ITRx_SetConfig>
      break;
 80021e4:	e01c      	b.n	8002220 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021f2:	461a      	mov	r2, r3
 80021f4:	f000 f8f6 	bl	80023e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2140      	movs	r1, #64	; 0x40
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 f94f 	bl	80024a2 <TIM_ITRx_SetConfig>
      break;
 8002204:	e00c      	b.n	8002220 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4619      	mov	r1, r3
 8002210:	4610      	mov	r0, r2
 8002212:	f000 f946 	bl	80024a2 <TIM_ITRx_SetConfig>
      break;
 8002216:	e003      	b.n	8002220 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	73fb      	strb	r3, [r7, #15]
      break;
 800221c:	e000      	b.n	8002220 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800221e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002230:	7bfb      	ldrb	r3, [r7, #15]
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
	...

0800228c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a46      	ldr	r2, [pc, #280]	; (80023b8 <TIM_Base_SetConfig+0x12c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d013      	beq.n	80022cc <TIM_Base_SetConfig+0x40>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022aa:	d00f      	beq.n	80022cc <TIM_Base_SetConfig+0x40>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a43      	ldr	r2, [pc, #268]	; (80023bc <TIM_Base_SetConfig+0x130>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d00b      	beq.n	80022cc <TIM_Base_SetConfig+0x40>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a42      	ldr	r2, [pc, #264]	; (80023c0 <TIM_Base_SetConfig+0x134>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d007      	beq.n	80022cc <TIM_Base_SetConfig+0x40>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a41      	ldr	r2, [pc, #260]	; (80023c4 <TIM_Base_SetConfig+0x138>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d003      	beq.n	80022cc <TIM_Base_SetConfig+0x40>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a40      	ldr	r2, [pc, #256]	; (80023c8 <TIM_Base_SetConfig+0x13c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d108      	bne.n	80022de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	4313      	orrs	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a35      	ldr	r2, [pc, #212]	; (80023b8 <TIM_Base_SetConfig+0x12c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d02b      	beq.n	800233e <TIM_Base_SetConfig+0xb2>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ec:	d027      	beq.n	800233e <TIM_Base_SetConfig+0xb2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a32      	ldr	r2, [pc, #200]	; (80023bc <TIM_Base_SetConfig+0x130>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d023      	beq.n	800233e <TIM_Base_SetConfig+0xb2>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a31      	ldr	r2, [pc, #196]	; (80023c0 <TIM_Base_SetConfig+0x134>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d01f      	beq.n	800233e <TIM_Base_SetConfig+0xb2>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a30      	ldr	r2, [pc, #192]	; (80023c4 <TIM_Base_SetConfig+0x138>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d01b      	beq.n	800233e <TIM_Base_SetConfig+0xb2>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a2f      	ldr	r2, [pc, #188]	; (80023c8 <TIM_Base_SetConfig+0x13c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d017      	beq.n	800233e <TIM_Base_SetConfig+0xb2>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a2e      	ldr	r2, [pc, #184]	; (80023cc <TIM_Base_SetConfig+0x140>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d013      	beq.n	800233e <TIM_Base_SetConfig+0xb2>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a2d      	ldr	r2, [pc, #180]	; (80023d0 <TIM_Base_SetConfig+0x144>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d00f      	beq.n	800233e <TIM_Base_SetConfig+0xb2>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a2c      	ldr	r2, [pc, #176]	; (80023d4 <TIM_Base_SetConfig+0x148>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d00b      	beq.n	800233e <TIM_Base_SetConfig+0xb2>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a2b      	ldr	r2, [pc, #172]	; (80023d8 <TIM_Base_SetConfig+0x14c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d007      	beq.n	800233e <TIM_Base_SetConfig+0xb2>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a2a      	ldr	r2, [pc, #168]	; (80023dc <TIM_Base_SetConfig+0x150>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d003      	beq.n	800233e <TIM_Base_SetConfig+0xb2>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a29      	ldr	r2, [pc, #164]	; (80023e0 <TIM_Base_SetConfig+0x154>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d108      	bne.n	8002350 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	4313      	orrs	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	4313      	orrs	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a10      	ldr	r2, [pc, #64]	; (80023b8 <TIM_Base_SetConfig+0x12c>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d003      	beq.n	8002384 <TIM_Base_SetConfig+0xf8>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a12      	ldr	r2, [pc, #72]	; (80023c8 <TIM_Base_SetConfig+0x13c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d103      	bne.n	800238c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	691a      	ldr	r2, [r3, #16]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b01      	cmp	r3, #1
 800239c:	d105      	bne.n	80023aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	f023 0201 	bic.w	r2, r3, #1
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	611a      	str	r2, [r3, #16]
  }
}
 80023aa:	bf00      	nop
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	40010000 	.word	0x40010000
 80023bc:	40000400 	.word	0x40000400
 80023c0:	40000800 	.word	0x40000800
 80023c4:	40000c00 	.word	0x40000c00
 80023c8:	40010400 	.word	0x40010400
 80023cc:	40014000 	.word	0x40014000
 80023d0:	40014400 	.word	0x40014400
 80023d4:	40014800 	.word	0x40014800
 80023d8:	40001800 	.word	0x40001800
 80023dc:	40001c00 	.word	0x40001c00
 80023e0:	40002000 	.word	0x40002000

080023e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	f023 0201 	bic.w	r2, r3, #1
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800240e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f023 030a 	bic.w	r3, r3, #10
 8002420:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	4313      	orrs	r3, r2
 8002428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	621a      	str	r2, [r3, #32]
}
 8002436:	bf00      	nop
 8002438:	371c      	adds	r7, #28
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002442:	b480      	push	{r7}
 8002444:	b087      	sub	sp, #28
 8002446:	af00      	add	r7, sp, #0
 8002448:	60f8      	str	r0, [r7, #12]
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	f023 0210 	bic.w	r2, r3, #16
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800246c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	031b      	lsls	r3, r3, #12
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800247e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	4313      	orrs	r3, r2
 8002488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	621a      	str	r2, [r3, #32]
}
 8002496:	bf00      	nop
 8002498:	371c      	adds	r7, #28
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b085      	sub	sp, #20
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4313      	orrs	r3, r2
 80024c0:	f043 0307 	orr.w	r3, r3, #7
 80024c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	609a      	str	r2, [r3, #8]
}
 80024cc:	bf00      	nop
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024d8:	b480      	push	{r7}
 80024da:	b087      	sub	sp, #28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	021a      	lsls	r2, r3, #8
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	431a      	orrs	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	4313      	orrs	r3, r2
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	4313      	orrs	r3, r2
 8002504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	609a      	str	r2, [r3, #8]
}
 800250c:	bf00      	nop
 800250e:	371c      	adds	r7, #28
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002528:	2b01      	cmp	r3, #1
 800252a:	d101      	bne.n	8002530 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800252c:	2302      	movs	r3, #2
 800252e:	e05a      	b.n	80025e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2202      	movs	r2, #2
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002556:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	4313      	orrs	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a21      	ldr	r2, [pc, #132]	; (80025f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d022      	beq.n	80025ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800257c:	d01d      	beq.n	80025ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a1d      	ldr	r2, [pc, #116]	; (80025f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d018      	beq.n	80025ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a1b      	ldr	r2, [pc, #108]	; (80025fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d013      	beq.n	80025ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a1a      	ldr	r2, [pc, #104]	; (8002600 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d00e      	beq.n	80025ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a18      	ldr	r2, [pc, #96]	; (8002604 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d009      	beq.n	80025ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a17      	ldr	r2, [pc, #92]	; (8002608 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d004      	beq.n	80025ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a15      	ldr	r2, [pc, #84]	; (800260c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d10c      	bne.n	80025d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	40010000 	.word	0x40010000
 80025f8:	40000400 	.word	0x40000400
 80025fc:	40000800 	.word	0x40000800
 8002600:	40000c00 	.word	0x40000c00
 8002604:	40010400 	.word	0x40010400
 8002608:	40014000 	.word	0x40014000
 800260c:	40001800 	.word	0x40001800

08002610 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <__NVIC_SetPriority>:
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	6039      	str	r1, [r7, #0]
 8002642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002648:	2b00      	cmp	r3, #0
 800264a:	db0a      	blt.n	8002662 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	b2da      	uxtb	r2, r3
 8002650:	490c      	ldr	r1, [pc, #48]	; (8002684 <__NVIC_SetPriority+0x4c>)
 8002652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002656:	0112      	lsls	r2, r2, #4
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	440b      	add	r3, r1
 800265c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002660:	e00a      	b.n	8002678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	b2da      	uxtb	r2, r3
 8002666:	4908      	ldr	r1, [pc, #32]	; (8002688 <__NVIC_SetPriority+0x50>)
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	3b04      	subs	r3, #4
 8002670:	0112      	lsls	r2, r2, #4
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	440b      	add	r3, r1
 8002676:	761a      	strb	r2, [r3, #24]
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	e000e100 	.word	0xe000e100
 8002688:	e000ed00 	.word	0xe000ed00

0800268c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002690:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <SysTick_Handler+0x1c>)
 8002692:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002694:	f002 f96c 	bl	8004970 <xTaskGetSchedulerState>
 8002698:	4603      	mov	r3, r0
 800269a:	2b01      	cmp	r3, #1
 800269c:	d001      	beq.n	80026a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800269e:	f002 ff8b 	bl	80055b8 <xPortSysTickHandler>
  }
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	e000e010 	.word	0xe000e010

080026ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80026b0:	2100      	movs	r1, #0
 80026b2:	f06f 0004 	mvn.w	r0, #4
 80026b6:	f7ff ffbf 	bl	8002638 <__NVIC_SetPriority>
#endif
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026c6:	f3ef 8305 	mrs	r3, IPSR
 80026ca:	603b      	str	r3, [r7, #0]
  return(result);
 80026cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80026d2:	f06f 0305 	mvn.w	r3, #5
 80026d6:	607b      	str	r3, [r7, #4]
 80026d8:	e00c      	b.n	80026f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80026da:	4b0a      	ldr	r3, [pc, #40]	; (8002704 <osKernelInitialize+0x44>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d105      	bne.n	80026ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80026e2:	4b08      	ldr	r3, [pc, #32]	; (8002704 <osKernelInitialize+0x44>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80026e8:	2300      	movs	r3, #0
 80026ea:	607b      	str	r3, [r7, #4]
 80026ec:	e002      	b.n	80026f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80026ee:	f04f 33ff 	mov.w	r3, #4294967295
 80026f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80026f4:	687b      	ldr	r3, [r7, #4]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	20000134 	.word	0x20000134

08002708 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800270e:	f3ef 8305 	mrs	r3, IPSR
 8002712:	603b      	str	r3, [r7, #0]
  return(result);
 8002714:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <osKernelStart+0x1a>
    stat = osErrorISR;
 800271a:	f06f 0305 	mvn.w	r3, #5
 800271e:	607b      	str	r3, [r7, #4]
 8002720:	e010      	b.n	8002744 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002722:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <osKernelStart+0x48>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d109      	bne.n	800273e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800272a:	f7ff ffbf 	bl	80026ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800272e:	4b08      	ldr	r3, [pc, #32]	; (8002750 <osKernelStart+0x48>)
 8002730:	2202      	movs	r2, #2
 8002732:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002734:	f001 fc22 	bl	8003f7c <vTaskStartScheduler>
      stat = osOK;
 8002738:	2300      	movs	r3, #0
 800273a:	607b      	str	r3, [r7, #4]
 800273c:	e002      	b.n	8002744 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800273e:	f04f 33ff 	mov.w	r3, #4294967295
 8002742:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002744:	687b      	ldr	r3, [r7, #4]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20000134 	.word	0x20000134

08002754 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002754:	b580      	push	{r7, lr}
 8002756:	b08e      	sub	sp, #56	; 0x38
 8002758:	af04      	add	r7, sp, #16
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002760:	2300      	movs	r3, #0
 8002762:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002764:	f3ef 8305 	mrs	r3, IPSR
 8002768:	617b      	str	r3, [r7, #20]
  return(result);
 800276a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800276c:	2b00      	cmp	r3, #0
 800276e:	d17e      	bne.n	800286e <osThreadNew+0x11a>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d07b      	beq.n	800286e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002776:	2380      	movs	r3, #128	; 0x80
 8002778:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800277a:	2318      	movs	r3, #24
 800277c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800277e:	2300      	movs	r3, #0
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002782:	f04f 33ff 	mov.w	r3, #4294967295
 8002786:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d045      	beq.n	800281a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d002      	beq.n	800279c <osThreadNew+0x48>
        name = attr->name;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d002      	beq.n	80027aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d008      	beq.n	80027c2 <osThreadNew+0x6e>
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	2b38      	cmp	r3, #56	; 0x38
 80027b4:	d805      	bhi.n	80027c2 <osThreadNew+0x6e>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <osThreadNew+0x72>
        return (NULL);
 80027c2:	2300      	movs	r3, #0
 80027c4:	e054      	b.n	8002870 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	089b      	lsrs	r3, r3, #2
 80027d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00e      	beq.n	80027fc <osThreadNew+0xa8>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	2ba7      	cmp	r3, #167	; 0xa7
 80027e4:	d90a      	bls.n	80027fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d006      	beq.n	80027fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d002      	beq.n	80027fc <osThreadNew+0xa8>
        mem = 1;
 80027f6:	2301      	movs	r3, #1
 80027f8:	61bb      	str	r3, [r7, #24]
 80027fa:	e010      	b.n	800281e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10c      	bne.n	800281e <osThreadNew+0xca>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d108      	bne.n	800281e <osThreadNew+0xca>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d104      	bne.n	800281e <osThreadNew+0xca>
          mem = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	61bb      	str	r3, [r7, #24]
 8002818:	e001      	b.n	800281e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800281a:	2300      	movs	r3, #0
 800281c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d110      	bne.n	8002846 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800282c:	9202      	str	r2, [sp, #8]
 800282e:	9301      	str	r3, [sp, #4]
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	6a3a      	ldr	r2, [r7, #32]
 8002838:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f001 f9b2 	bl	8003ba4 <xTaskCreateStatic>
 8002840:	4603      	mov	r3, r0
 8002842:	613b      	str	r3, [r7, #16]
 8002844:	e013      	b.n	800286e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d110      	bne.n	800286e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	b29a      	uxth	r2, r3
 8002850:	f107 0310 	add.w	r3, r7, #16
 8002854:	9301      	str	r3, [sp, #4]
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f001 f9fd 	bl	8003c5e <xTaskCreate>
 8002864:	4603      	mov	r3, r0
 8002866:	2b01      	cmp	r3, #1
 8002868:	d001      	beq.n	800286e <osThreadNew+0x11a>
            hTask = NULL;
 800286a:	2300      	movs	r3, #0
 800286c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800286e:	693b      	ldr	r3, [r7, #16]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3728      	adds	r7, #40	; 0x28
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800287e:	f3ef 8305 	mrs	r3, IPSR
 8002882:	603b      	str	r3, [r7, #0]
  return(result);
 8002884:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <osThreadYield+0x1a>
    stat = osErrorISR;
 800288a:	f06f 0305 	mvn.w	r3, #5
 800288e:	607b      	str	r3, [r7, #4]
 8002890:	e009      	b.n	80028a6 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8002892:	2300      	movs	r3, #0
 8002894:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8002896:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <osThreadYield+0x3c>)
 8002898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	f3bf 8f4f 	dsb	sy
 80028a2:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80028a6:	687b      	ldr	r3, [r7, #4]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	e000ed04 	.word	0xe000ed04

080028b8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028c0:	f3ef 8305 	mrs	r3, IPSR
 80028c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80028c6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <osDelay+0x1c>
    stat = osErrorISR;
 80028cc:	f06f 0305 	mvn.w	r3, #5
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	e007      	b.n	80028e4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f001 fb18 	bl	8003f14 <vTaskDelay>
    }
  }

  return (stat);
 80028e4:	68fb      	ldr	r3, [r7, #12]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b086      	sub	sp, #24
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028fa:	f3ef 8305 	mrs	r3, IPSR
 80028fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8002900:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8002902:	2b00      	cmp	r3, #0
 8002904:	d12d      	bne.n	8002962 <osEventFlagsNew+0x74>
    mem = -1;
 8002906:	f04f 33ff 	mov.w	r3, #4294967295
 800290a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d015      	beq.n	800293e <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d006      	beq.n	8002928 <osEventFlagsNew+0x3a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	2b1f      	cmp	r3, #31
 8002920:	d902      	bls.n	8002928 <osEventFlagsNew+0x3a>
        mem = 1;
 8002922:	2301      	movs	r3, #1
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	e00c      	b.n	8002942 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d108      	bne.n	8002942 <osEventFlagsNew+0x54>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d104      	bne.n	8002942 <osEventFlagsNew+0x54>
          mem = 0;
 8002938:	2300      	movs	r3, #0
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	e001      	b.n	8002942 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d106      	bne.n	8002956 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	4618      	mov	r0, r3
 800294e:	f000 f91d 	bl	8002b8c <xEventGroupCreateStatic>
 8002952:	6178      	str	r0, [r7, #20]
 8002954:	e005      	b.n	8002962 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d102      	bne.n	8002962 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800295c:	f000 f94d 	bl	8002bfa <xEventGroupCreate>
 8002960:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8002962:	697b      	ldr	r3, [r7, #20]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d004      	beq.n	800298a <osEventFlagsSet+0x1e>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800298a:	f06f 0303 	mvn.w	r3, #3
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	e028      	b.n	80029e4 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002992:	f3ef 8305 	mrs	r3, IPSR
 8002996:	60fb      	str	r3, [r7, #12]
  return(result);
 8002998:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800299a:	2b00      	cmp	r3, #0
 800299c:	d01d      	beq.n	80029da <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800299e:	2300      	movs	r3, #0
 80029a0:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80029a2:	f107 0308 	add.w	r3, r7, #8
 80029a6:	461a      	mov	r2, r3
 80029a8:	6839      	ldr	r1, [r7, #0]
 80029aa:	6938      	ldr	r0, [r7, #16]
 80029ac:	f000 fb46 	bl	800303c <xEventGroupSetBitsFromISR>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d103      	bne.n	80029be <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80029b6:	f06f 0302 	mvn.w	r3, #2
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	e012      	b.n	80029e4 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00d      	beq.n	80029e4 <osEventFlagsSet+0x78>
 80029c8:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <osEventFlagsSet+0x84>)
 80029ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	f3bf 8f4f 	dsb	sy
 80029d4:	f3bf 8f6f 	isb	sy
 80029d8:	e004      	b.n	80029e4 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80029da:	6839      	ldr	r1, [r7, #0]
 80029dc:	6938      	ldr	r0, [r7, #16]
 80029de:	f000 fa65 	bl	8002eac <xEventGroupSetBits>
 80029e2:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80029e4:	697b      	ldr	r3, [r7, #20]
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	e000ed04 	.word	0xe000ed04

080029f4 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d004      	beq.n	8002a12 <osEventFlagsClear+0x1e>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8002a12:	f06f 0303 	mvn.w	r3, #3
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	e019      	b.n	8002a4e <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a1a:	f3ef 8305 	mrs	r3, IPSR
 8002a1e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a20:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00e      	beq.n	8002a44 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8002a26:	6938      	ldr	r0, [r7, #16]
 8002a28:	f000 fa1c 	bl	8002e64 <xEventGroupGetBitsFromISR>
 8002a2c:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8002a2e:	6839      	ldr	r1, [r7, #0]
 8002a30:	6938      	ldr	r0, [r7, #16]
 8002a32:	f000 fa03 	bl	8002e3c <xEventGroupClearBitsFromISR>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d108      	bne.n	8002a4e <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8002a3c:	f06f 0302 	mvn.w	r3, #2
 8002a40:	617b      	str	r3, [r7, #20]
 8002a42:	e004      	b.n	8002a4e <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8002a44:	6839      	ldr	r1, [r7, #0]
 8002a46:	6938      	ldr	r0, [r7, #16]
 8002a48:	f000 f9c0 	bl	8002dcc <xEventGroupClearBits>
 8002a4c:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8002a4e:	697b      	ldr	r3, [r7, #20]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b08c      	sub	sp, #48	; 0x30
 8002a5c:	af02      	add	r7, sp, #8
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
 8002a64:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d004      	beq.n	8002a7a <osEventFlagsWait+0x22>
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8002a7a:	f06f 0303 	mvn.w	r3, #3
 8002a7e:	61fb      	str	r3, [r7, #28]
 8002a80:	e04b      	b.n	8002b1a <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a82:	f3ef 8305 	mrs	r3, IPSR
 8002a86:	617b      	str	r3, [r7, #20]
  return(result);
 8002a88:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8002a8e:	f06f 0305 	mvn.w	r3, #5
 8002a92:	61fb      	str	r3, [r7, #28]
 8002a94:	e041      	b.n	8002b1a <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d002      	beq.n	8002aa6 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa4:	e001      	b.n	8002aaa <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	623b      	str	r3, [r7, #32]
 8002ab8:	e001      	b.n	8002abe <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8002aba:	2301      	movs	r3, #1
 8002abc:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	6a3a      	ldr	r2, [r7, #32]
 8002ac6:	68b9      	ldr	r1, [r7, #8]
 8002ac8:	69b8      	ldr	r0, [r7, #24]
 8002aca:	f000 f8b1 	bl	8002c30 <xEventGroupWaitBits>
 8002ace:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d010      	beq.n	8002afc <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d019      	beq.n	8002b1a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8002aec:	f06f 0301 	mvn.w	r3, #1
 8002af0:	61fb      	str	r3, [r7, #28]
 8002af2:	e012      	b.n	8002b1a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8002af4:	f06f 0302 	mvn.w	r3, #2
 8002af8:	61fb      	str	r3, [r7, #28]
 8002afa:	e00e      	b.n	8002b1a <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d109      	bne.n	8002b1a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8002b0c:	f06f 0301 	mvn.w	r3, #1
 8002b10:	61fb      	str	r3, [r7, #28]
 8002b12:	e002      	b.n	8002b1a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8002b14:	f06f 0302 	mvn.w	r3, #2
 8002b18:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8002b1a:	69fb      	ldr	r3, [r7, #28]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3728      	adds	r7, #40	; 0x28
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4a07      	ldr	r2, [pc, #28]	; (8002b50 <vApplicationGetIdleTaskMemory+0x2c>)
 8002b34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	4a06      	ldr	r2, [pc, #24]	; (8002b54 <vApplicationGetIdleTaskMemory+0x30>)
 8002b3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2280      	movs	r2, #128	; 0x80
 8002b40:	601a      	str	r2, [r3, #0]
}
 8002b42:	bf00      	nop
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	20000138 	.word	0x20000138
 8002b54:	200001e0 	.word	0x200001e0

08002b58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4a07      	ldr	r2, [pc, #28]	; (8002b84 <vApplicationGetTimerTaskMemory+0x2c>)
 8002b68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	4a06      	ldr	r2, [pc, #24]	; (8002b88 <vApplicationGetTimerTaskMemory+0x30>)
 8002b6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b76:	601a      	str	r2, [r3, #0]
}
 8002b78:	bf00      	nop
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	200003e0 	.word	0x200003e0
 8002b88:	20000488 	.word	0x20000488

08002b8c <xEventGroupCreateStatic>:
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10a      	bne.n	8002bb0 <xEventGroupCreateStatic+0x24>
 8002b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9e:	f383 8811 	msr	BASEPRI, r3
 8002ba2:	f3bf 8f6f 	isb	sy
 8002ba6:	f3bf 8f4f 	dsb	sy
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	bf00      	nop
 8002bae:	e7fe      	b.n	8002bae <xEventGroupCreateStatic+0x22>
 8002bb0:	2320      	movs	r3, #32
 8002bb2:	60bb      	str	r3, [r7, #8]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2b20      	cmp	r3, #32
 8002bb8:	d00a      	beq.n	8002bd0 <xEventGroupCreateStatic+0x44>
 8002bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bbe:	f383 8811 	msr	BASEPRI, r3
 8002bc2:	f3bf 8f6f 	isb	sy
 8002bc6:	f3bf 8f4f 	dsb	sy
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	bf00      	nop
 8002bce:	e7fe      	b.n	8002bce <xEventGroupCreateStatic+0x42>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00a      	beq.n	8002bf0 <xEventGroupCreateStatic+0x64>
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	3304      	adds	r3, #4
 8002be4:	4618      	mov	r0, r3
 8002be6:	f000 fa3d 	bl	8003064 <vListInitialise>
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2201      	movs	r2, #1
 8002bee:	771a      	strb	r2, [r3, #28]
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <xEventGroupCreate>:
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b082      	sub	sp, #8
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	2020      	movs	r0, #32
 8002c02:	f002 fd69 	bl	80056d8 <pvPortMalloc>
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00a      	beq.n	8002c24 <xEventGroupCreate+0x2a>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3304      	adds	r3, #4
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f000 fa23 	bl	8003064 <vListInitialise>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	771a      	strb	r2, [r3, #28]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <xEventGroupWaitBits>:
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b090      	sub	sp, #64	; 0x40
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
 8002c3c:	603b      	str	r3, [r7, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	637b      	str	r3, [r7, #52]	; 0x34
 8002c42:	2300      	movs	r3, #0
 8002c44:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c46:	2300      	movs	r3, #0
 8002c48:	633b      	str	r3, [r7, #48]	; 0x30
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10a      	bne.n	8002c66 <xEventGroupWaitBits+0x36>
 8002c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c54:	f383 8811 	msr	BASEPRI, r3
 8002c58:	f3bf 8f6f 	isb	sy
 8002c5c:	f3bf 8f4f 	dsb	sy
 8002c60:	623b      	str	r3, [r7, #32]
 8002c62:	bf00      	nop
 8002c64:	e7fe      	b.n	8002c64 <xEventGroupWaitBits+0x34>
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00a      	beq.n	8002c86 <xEventGroupWaitBits+0x56>
 8002c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c74:	f383 8811 	msr	BASEPRI, r3
 8002c78:	f3bf 8f6f 	isb	sy
 8002c7c:	f3bf 8f4f 	dsb	sy
 8002c80:	61fb      	str	r3, [r7, #28]
 8002c82:	bf00      	nop
 8002c84:	e7fe      	b.n	8002c84 <xEventGroupWaitBits+0x54>
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10a      	bne.n	8002ca2 <xEventGroupWaitBits+0x72>
 8002c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c90:	f383 8811 	msr	BASEPRI, r3
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	f3bf 8f4f 	dsb	sy
 8002c9c:	61bb      	str	r3, [r7, #24]
 8002c9e:	bf00      	nop
 8002ca0:	e7fe      	b.n	8002ca0 <xEventGroupWaitBits+0x70>
 8002ca2:	f001 fe65 	bl	8004970 <xTaskGetSchedulerState>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d102      	bne.n	8002cb2 <xEventGroupWaitBits+0x82>
 8002cac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <xEventGroupWaitBits+0x86>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <xEventGroupWaitBits+0x88>
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10a      	bne.n	8002cd2 <xEventGroupWaitBits+0xa2>
 8002cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc0:	f383 8811 	msr	BASEPRI, r3
 8002cc4:	f3bf 8f6f 	isb	sy
 8002cc8:	f3bf 8f4f 	dsb	sy
 8002ccc:	617b      	str	r3, [r7, #20]
 8002cce:	bf00      	nop
 8002cd0:	e7fe      	b.n	8002cd0 <xEventGroupWaitBits+0xa0>
 8002cd2:	f001 f9c3 	bl	800405c <vTaskSuspendAll>
 8002cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	68b9      	ldr	r1, [r7, #8]
 8002ce0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ce2:	f000 f988 	bl	8002ff6 <prvTestWaitCondition>
 8002ce6:	62b8      	str	r0, [r7, #40]	; 0x28
 8002ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00e      	beq.n	8002d0c <xEventGroupWaitBits+0xdc>
 8002cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d028      	beq.n	8002d4e <xEventGroupWaitBits+0x11e>
 8002cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	43db      	mvns	r3, r3
 8002d04:	401a      	ands	r2, r3
 8002d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	e020      	b.n	8002d4e <xEventGroupWaitBits+0x11e>
 8002d0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d104      	bne.n	8002d1c <xEventGroupWaitBits+0xec>
 8002d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d16:	2301      	movs	r3, #1
 8002d18:	633b      	str	r3, [r7, #48]	; 0x30
 8002d1a:	e018      	b.n	8002d4e <xEventGroupWaitBits+0x11e>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <xEventGroupWaitBits+0xfa>
 8002d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d28:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <xEventGroupWaitBits+0x108>
 8002d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d36:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d3a:	1d18      	adds	r0, r3, #4
 8002d3c:	68ba      	ldr	r2, [r7, #8]
 8002d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d40:	4313      	orrs	r3, r2
 8002d42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d44:	4619      	mov	r1, r3
 8002d46:	f001 fb87 	bl	8004458 <vTaskPlaceOnUnorderedEventList>
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d4e:	f001 f993 	bl	8004078 <xTaskResumeAll>
 8002d52:	6278      	str	r0, [r7, #36]	; 0x24
 8002d54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d031      	beq.n	8002dbe <xEventGroupWaitBits+0x18e>
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d107      	bne.n	8002d70 <xEventGroupWaitBits+0x140>
 8002d60:	4b19      	ldr	r3, [pc, #100]	; (8002dc8 <xEventGroupWaitBits+0x198>)
 8002d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	f3bf 8f4f 	dsb	sy
 8002d6c:	f3bf 8f6f 	isb	sy
 8002d70:	f001 fe8a 	bl	8004a88 <uxTaskResetEventItemValue>
 8002d74:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d11a      	bne.n	8002db6 <xEventGroupWaitBits+0x186>
 8002d80:	f002 fb88 	bl	8005494 <vPortEnterCritical>
 8002d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	68b9      	ldr	r1, [r7, #8]
 8002d8e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002d90:	f000 f931 	bl	8002ff6 <prvTestWaitCondition>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d009      	beq.n	8002dae <xEventGroupWaitBits+0x17e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d006      	beq.n	8002dae <xEventGroupWaitBits+0x17e>
 8002da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	43db      	mvns	r3, r3
 8002da8:	401a      	ands	r2, r3
 8002daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	2301      	movs	r3, #1
 8002db0:	633b      	str	r3, [r7, #48]	; 0x30
 8002db2:	f002 fb9f 	bl	80054f4 <vPortExitCritical>
 8002db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3740      	adds	r7, #64	; 0x40
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	e000ed04 	.word	0xe000ed04

08002dcc <xEventGroupClearBits>:
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10a      	bne.n	8002df6 <xEventGroupClearBits+0x2a>
 8002de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de4:	f383 8811 	msr	BASEPRI, r3
 8002de8:	f3bf 8f6f 	isb	sy
 8002dec:	f3bf 8f4f 	dsb	sy
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	bf00      	nop
 8002df4:	e7fe      	b.n	8002df4 <xEventGroupClearBits+0x28>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00a      	beq.n	8002e16 <xEventGroupClearBits+0x4a>
 8002e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e04:	f383 8811 	msr	BASEPRI, r3
 8002e08:	f3bf 8f6f 	isb	sy
 8002e0c:	f3bf 8f4f 	dsb	sy
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	bf00      	nop
 8002e14:	e7fe      	b.n	8002e14 <xEventGroupClearBits+0x48>
 8002e16:	f002 fb3d 	bl	8005494 <vPortEnterCritical>
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	43db      	mvns	r3, r3
 8002e28:	401a      	ands	r2, r3
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	f002 fb61 	bl	80054f4 <vPortExitCritical>
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	4618      	mov	r0, r3
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <xEventGroupClearBitsFromISR>:
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
 8002e46:	2300      	movs	r3, #0
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	4804      	ldr	r0, [pc, #16]	; (8002e60 <xEventGroupClearBitsFromISR+0x24>)
 8002e4e:	f002 f9d5 	bl	80051fc <xTimerPendFunctionCallFromISR>
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	08002fdd 	.word	0x08002fdd

08002e64 <xEventGroupGetBitsFromISR>:
 8002e64:	b480      	push	{r7}
 8002e66:	b089      	sub	sp, #36	; 0x24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	61fb      	str	r3, [r7, #28]
 8002e70:	f3ef 8211 	mrs	r2, BASEPRI
 8002e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e78:	f383 8811 	msr	BASEPRI, r3
 8002e7c:	f3bf 8f6f 	isb	sy
 8002e80:	f3bf 8f4f 	dsb	sy
 8002e84:	60fa      	str	r2, [r7, #12]
 8002e86:	60bb      	str	r3, [r7, #8]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	61bb      	str	r3, [r7, #24]
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	f383 8811 	msr	BASEPRI, r3
 8002e9c:	bf00      	nop
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3724      	adds	r7, #36	; 0x24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <xEventGroupSetBits>:
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08e      	sub	sp, #56	; 0x38
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	633b      	str	r3, [r7, #48]	; 0x30
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10a      	bne.n	8002ede <xEventGroupSetBits+0x32>
 8002ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ecc:	f383 8811 	msr	BASEPRI, r3
 8002ed0:	f3bf 8f6f 	isb	sy
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	bf00      	nop
 8002edc:	e7fe      	b.n	8002edc <xEventGroupSetBits+0x30>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00a      	beq.n	8002efe <xEventGroupSetBits+0x52>
 8002ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eec:	f383 8811 	msr	BASEPRI, r3
 8002ef0:	f3bf 8f6f 	isb	sy
 8002ef4:	f3bf 8f4f 	dsb	sy
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	bf00      	nop
 8002efc:	e7fe      	b.n	8002efc <xEventGroupSetBits+0x50>
 8002efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f00:	3304      	adds	r3, #4
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	3308      	adds	r3, #8
 8002f08:	623b      	str	r3, [r7, #32]
 8002f0a:	f001 f8a7 	bl	800405c <vTaskSuspendAll>
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	637b      	str	r3, [r7, #52]	; 0x34
 8002f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	e03c      	b.n	8002f9c <xEventGroupSetBits+0xf0>
 8002f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	61fb      	str	r3, [r7, #28]
 8002f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	61bb      	str	r3, [r7, #24]
 8002f2e:	2300      	movs	r3, #0
 8002f30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f40:	61bb      	str	r3, [r7, #24]
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d108      	bne.n	8002f5e <xEventGroupSetBits+0xb2>
 8002f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00b      	beq.n	8002f70 <xEventGroupSetBits+0xc4>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f5c:	e008      	b.n	8002f70 <xEventGroupSetBits+0xc4>
 8002f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	4013      	ands	r3, r2
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d101      	bne.n	8002f70 <xEventGroupSetBits+0xc4>
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d010      	beq.n	8002f98 <xEventGroupSetBits+0xec>
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d003      	beq.n	8002f88 <xEventGroupSetBits+0xdc>
 8002f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	633b      	str	r3, [r7, #48]	; 0x30
 8002f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f90:	4619      	mov	r1, r3
 8002f92:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f94:	f001 fb2c 	bl	80045f0 <vTaskRemoveFromUnorderedEventList>
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d1be      	bne.n	8002f22 <xEventGroupSetBits+0x76>
 8002fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002faa:	43db      	mvns	r3, r3
 8002fac:	401a      	ands	r2, r3
 8002fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	f001 f861 	bl	8004078 <xTaskResumeAll>
 8002fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3738      	adds	r7, #56	; 0x38
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <vEventGroupSetBitsCallback>:
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b082      	sub	sp, #8
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
 8002fca:	6039      	str	r1, [r7, #0]
 8002fcc:	6839      	ldr	r1, [r7, #0]
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7ff ff6c 	bl	8002eac <xEventGroupSetBits>
 8002fd4:	bf00      	nop
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <vEventGroupClearBitsCallback>:
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
 8002fe6:	6839      	ldr	r1, [r7, #0]
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f7ff feef 	bl	8002dcc <xEventGroupClearBits>
 8002fee:	bf00      	nop
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <prvTestWaitCondition>:
 8002ff6:	b480      	push	{r7}
 8002ff8:	b087      	sub	sp, #28
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	60f8      	str	r0, [r7, #12]
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	607a      	str	r2, [r7, #4]
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d107      	bne.n	800301c <prvTestWaitCondition+0x26>
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	4013      	ands	r3, r2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00a      	beq.n	800302c <prvTestWaitCondition+0x36>
 8003016:	2301      	movs	r3, #1
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	e007      	b.n	800302c <prvTestWaitCondition+0x36>
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	4013      	ands	r3, r2
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	429a      	cmp	r2, r3
 8003026:	d101      	bne.n	800302c <prvTestWaitCondition+0x36>
 8003028:	2301      	movs	r3, #1
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	4618      	mov	r0, r3
 8003030:	371c      	adds	r7, #28
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
	...

0800303c <xEventGroupSetBitsFromISR>:
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	68f9      	ldr	r1, [r7, #12]
 800304e:	4804      	ldr	r0, [pc, #16]	; (8003060 <xEventGroupSetBitsFromISR+0x24>)
 8003050:	f002 f8d4 	bl	80051fc <xTimerPendFunctionCallFromISR>
 8003054:	6178      	str	r0, [r7, #20]
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	08002fc3 	.word	0x08002fc3

08003064 <vListInitialise>:
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f103 0208 	add.w	r2, r3, #8
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	605a      	str	r2, [r3, #4]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f04f 32ff 	mov.w	r2, #4294967295
 800307c:	609a      	str	r2, [r3, #8]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f103 0208 	add.w	r2, r3, #8
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	60da      	str	r2, [r3, #12]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f103 0208 	add.w	r2, r3, #8
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	611a      	str	r2, [r3, #16]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <vListInitialiseItem>:
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	611a      	str	r2, [r3, #16]
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <vListInsertEnd>:
 80030be:	b480      	push	{r7}
 80030c0:	b085      	sub	sp, #20
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
 80030c6:	6039      	str	r1, [r7, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	605a      	str	r2, [r3, #4]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	605a      	str	r2, [r3, #4]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	609a      	str	r2, [r3, #8]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	611a      	str	r2, [r3, #16]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	bf00      	nop
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <vListInsert>:
 8003106:	b480      	push	{r7}
 8003108:	b085      	sub	sp, #20
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	6039      	str	r1, [r7, #0]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	60bb      	str	r3, [r7, #8]
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311c:	d103      	bne.n	8003126 <vListInsert+0x20>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	e00c      	b.n	8003140 <vListInsert+0x3a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3308      	adds	r3, #8
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	e002      	b.n	8003134 <vListInsert+0x2e>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	429a      	cmp	r2, r3
 800313e:	d2f6      	bcs.n	800312e <vListInsert+0x28>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	605a      	str	r2, [r3, #4]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	609a      	str	r2, [r3, #8]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	609a      	str	r2, [r3, #8]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	605a      	str	r2, [r3, #4]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	611a      	str	r2, [r3, #16]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	1c5a      	adds	r2, r3, #1
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	bf00      	nop
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <uxListRemove>:
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6892      	ldr	r2, [r2, #8]
 800318e:	609a      	str	r2, [r3, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6852      	ldr	r2, [r2, #4]
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d103      	bne.n	80031ac <uxListRemove+0x34>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	605a      	str	r2, [r3, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	611a      	str	r2, [r3, #16]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	1e5a      	subs	r2, r3, #1
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <xQueueGenericReset>:
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10a      	bne.n	80031f6 <xQueueGenericReset+0x2a>
 80031e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e4:	f383 8811 	msr	BASEPRI, r3
 80031e8:	f3bf 8f6f 	isb	sy
 80031ec:	f3bf 8f4f 	dsb	sy
 80031f0:	60bb      	str	r3, [r7, #8]
 80031f2:	bf00      	nop
 80031f4:	e7fe      	b.n	80031f4 <xQueueGenericReset+0x28>
 80031f6:	f002 f94d 	bl	8005494 <vPortEnterCritical>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003202:	68f9      	ldr	r1, [r7, #12]
 8003204:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003206:	fb01 f303 	mul.w	r3, r1, r3
 800320a:	441a      	add	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	609a      	str	r2, [r3, #8]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	639a      	str	r2, [r3, #56]	; 0x38
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	605a      	str	r2, [r3, #4]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003226:	3b01      	subs	r3, #1
 8003228:	68f9      	ldr	r1, [r7, #12]
 800322a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	441a      	add	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	60da      	str	r2, [r3, #12]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	22ff      	movs	r2, #255	; 0xff
 800323a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	22ff      	movs	r2, #255	; 0xff
 8003242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d114      	bne.n	8003276 <xQueueGenericReset+0xaa>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d01a      	beq.n	800328a <xQueueGenericReset+0xbe>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	3310      	adds	r3, #16
 8003258:	4618      	mov	r0, r3
 800325a:	f001 f965 	bl	8004528 <xTaskRemoveFromEventList>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d012      	beq.n	800328a <xQueueGenericReset+0xbe>
 8003264:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <xQueueGenericReset+0xcc>)
 8003266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	f3bf 8f6f 	isb	sy
 8003274:	e009      	b.n	800328a <xQueueGenericReset+0xbe>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	3310      	adds	r3, #16
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff fef2 	bl	8003064 <vListInitialise>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3324      	adds	r3, #36	; 0x24
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff feed 	bl	8003064 <vListInitialise>
 800328a:	f002 f933 	bl	80054f4 <vPortExitCritical>
 800328e:	2301      	movs	r3, #1
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	e000ed04 	.word	0xe000ed04

0800329c <xQueueGenericCreateStatic>:
 800329c:	b580      	push	{r7, lr}
 800329e:	b08e      	sub	sp, #56	; 0x38
 80032a0:	af02      	add	r7, sp, #8
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
 80032a8:	603b      	str	r3, [r7, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10a      	bne.n	80032c6 <xQueueGenericCreateStatic+0x2a>
 80032b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b4:	f383 8811 	msr	BASEPRI, r3
 80032b8:	f3bf 8f6f 	isb	sy
 80032bc:	f3bf 8f4f 	dsb	sy
 80032c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80032c2:	bf00      	nop
 80032c4:	e7fe      	b.n	80032c4 <xQueueGenericCreateStatic+0x28>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d10a      	bne.n	80032e2 <xQueueGenericCreateStatic+0x46>
 80032cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d0:	f383 8811 	msr	BASEPRI, r3
 80032d4:	f3bf 8f6f 	isb	sy
 80032d8:	f3bf 8f4f 	dsb	sy
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
 80032de:	bf00      	nop
 80032e0:	e7fe      	b.n	80032e0 <xQueueGenericCreateStatic+0x44>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d002      	beq.n	80032ee <xQueueGenericCreateStatic+0x52>
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <xQueueGenericCreateStatic+0x56>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <xQueueGenericCreateStatic+0x58>
 80032f2:	2300      	movs	r3, #0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10a      	bne.n	800330e <xQueueGenericCreateStatic+0x72>
 80032f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fc:	f383 8811 	msr	BASEPRI, r3
 8003300:	f3bf 8f6f 	isb	sy
 8003304:	f3bf 8f4f 	dsb	sy
 8003308:	623b      	str	r3, [r7, #32]
 800330a:	bf00      	nop
 800330c:	e7fe      	b.n	800330c <xQueueGenericCreateStatic+0x70>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d102      	bne.n	800331a <xQueueGenericCreateStatic+0x7e>
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <xQueueGenericCreateStatic+0x82>
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <xQueueGenericCreateStatic+0x84>
 800331e:	2300      	movs	r3, #0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10a      	bne.n	800333a <xQueueGenericCreateStatic+0x9e>
 8003324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003328:	f383 8811 	msr	BASEPRI, r3
 800332c:	f3bf 8f6f 	isb	sy
 8003330:	f3bf 8f4f 	dsb	sy
 8003334:	61fb      	str	r3, [r7, #28]
 8003336:	bf00      	nop
 8003338:	e7fe      	b.n	8003338 <xQueueGenericCreateStatic+0x9c>
 800333a:	2350      	movs	r3, #80	; 0x50
 800333c:	617b      	str	r3, [r7, #20]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2b50      	cmp	r3, #80	; 0x50
 8003342:	d00a      	beq.n	800335a <xQueueGenericCreateStatic+0xbe>
 8003344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003348:	f383 8811 	msr	BASEPRI, r3
 800334c:	f3bf 8f6f 	isb	sy
 8003350:	f3bf 8f4f 	dsb	sy
 8003354:	61bb      	str	r3, [r7, #24]
 8003356:	bf00      	nop
 8003358:	e7fe      	b.n	8003358 <xQueueGenericCreateStatic+0xbc>
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00d      	beq.n	8003382 <xQueueGenericCreateStatic+0xe6>
 8003366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800336e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	4613      	mov	r3, r2
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	68b9      	ldr	r1, [r7, #8]
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 f805 	bl	800338c <prvInitialiseNewQueue>
 8003382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003384:	4618      	mov	r0, r3
 8003386:	3730      	adds	r7, #48	; 0x30
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <prvInitialiseNewQueue>:
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
 8003398:	70fb      	strb	r3, [r7, #3]
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d103      	bne.n	80033a8 <prvInitialiseNewQueue+0x1c>
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	e002      	b.n	80033ae <prvInitialiseNewQueue+0x22>
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	641a      	str	r2, [r3, #64]	; 0x40
 80033ba:	2101      	movs	r1, #1
 80033bc:	69b8      	ldr	r0, [r7, #24]
 80033be:	f7ff ff05 	bl	80031cc <xQueueGenericReset>
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	78fa      	ldrb	r2, [r7, #3]
 80033c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80033ca:	bf00      	nop
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <xQueueGenericSend>:
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08e      	sub	sp, #56	; 0x38
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	603b      	str	r3, [r7, #0]
 80033e2:	2300      	movs	r3, #0
 80033e4:	637b      	str	r3, [r7, #52]	; 0x34
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	633b      	str	r3, [r7, #48]	; 0x30
 80033ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10a      	bne.n	8003406 <xQueueGenericSend+0x32>
 80033f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f4:	f383 8811 	msr	BASEPRI, r3
 80033f8:	f3bf 8f6f 	isb	sy
 80033fc:	f3bf 8f4f 	dsb	sy
 8003400:	62bb      	str	r3, [r7, #40]	; 0x28
 8003402:	bf00      	nop
 8003404:	e7fe      	b.n	8003404 <xQueueGenericSend+0x30>
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d103      	bne.n	8003414 <xQueueGenericSend+0x40>
 800340c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <xQueueGenericSend+0x44>
 8003414:	2301      	movs	r3, #1
 8003416:	e000      	b.n	800341a <xQueueGenericSend+0x46>
 8003418:	2300      	movs	r3, #0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10a      	bne.n	8003434 <xQueueGenericSend+0x60>
 800341e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003422:	f383 8811 	msr	BASEPRI, r3
 8003426:	f3bf 8f6f 	isb	sy
 800342a:	f3bf 8f4f 	dsb	sy
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
 8003430:	bf00      	nop
 8003432:	e7fe      	b.n	8003432 <xQueueGenericSend+0x5e>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d103      	bne.n	8003442 <xQueueGenericSend+0x6e>
 800343a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <xQueueGenericSend+0x72>
 8003442:	2301      	movs	r3, #1
 8003444:	e000      	b.n	8003448 <xQueueGenericSend+0x74>
 8003446:	2300      	movs	r3, #0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10a      	bne.n	8003462 <xQueueGenericSend+0x8e>
 800344c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003450:	f383 8811 	msr	BASEPRI, r3
 8003454:	f3bf 8f6f 	isb	sy
 8003458:	f3bf 8f4f 	dsb	sy
 800345c:	623b      	str	r3, [r7, #32]
 800345e:	bf00      	nop
 8003460:	e7fe      	b.n	8003460 <xQueueGenericSend+0x8c>
 8003462:	f001 fa85 	bl	8004970 <xTaskGetSchedulerState>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d102      	bne.n	8003472 <xQueueGenericSend+0x9e>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <xQueueGenericSend+0xa2>
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <xQueueGenericSend+0xa4>
 8003476:	2300      	movs	r3, #0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10a      	bne.n	8003492 <xQueueGenericSend+0xbe>
 800347c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003480:	f383 8811 	msr	BASEPRI, r3
 8003484:	f3bf 8f6f 	isb	sy
 8003488:	f3bf 8f4f 	dsb	sy
 800348c:	61fb      	str	r3, [r7, #28]
 800348e:	bf00      	nop
 8003490:	e7fe      	b.n	8003490 <xQueueGenericSend+0xbc>
 8003492:	f001 ffff 	bl	8005494 <vPortEnterCritical>
 8003496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800349a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349e:	429a      	cmp	r2, r3
 80034a0:	d302      	bcc.n	80034a8 <xQueueGenericSend+0xd4>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d129      	bne.n	80034fc <xQueueGenericSend+0x128>
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	68b9      	ldr	r1, [r7, #8]
 80034ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034ae:	f000 fa0b 	bl	80038c8 <prvCopyDataToQueue>
 80034b2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80034b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d010      	beq.n	80034de <xQueueGenericSend+0x10a>
 80034bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034be:	3324      	adds	r3, #36	; 0x24
 80034c0:	4618      	mov	r0, r3
 80034c2:	f001 f831 	bl	8004528 <xTaskRemoveFromEventList>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d013      	beq.n	80034f4 <xQueueGenericSend+0x120>
 80034cc:	4b3f      	ldr	r3, [pc, #252]	; (80035cc <xQueueGenericSend+0x1f8>)
 80034ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	e00a      	b.n	80034f4 <xQueueGenericSend+0x120>
 80034de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d007      	beq.n	80034f4 <xQueueGenericSend+0x120>
 80034e4:	4b39      	ldr	r3, [pc, #228]	; (80035cc <xQueueGenericSend+0x1f8>)
 80034e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	f3bf 8f4f 	dsb	sy
 80034f0:	f3bf 8f6f 	isb	sy
 80034f4:	f001 fffe 	bl	80054f4 <vPortExitCritical>
 80034f8:	2301      	movs	r3, #1
 80034fa:	e063      	b.n	80035c4 <xQueueGenericSend+0x1f0>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d103      	bne.n	800350a <xQueueGenericSend+0x136>
 8003502:	f001 fff7 	bl	80054f4 <vPortExitCritical>
 8003506:	2300      	movs	r3, #0
 8003508:	e05c      	b.n	80035c4 <xQueueGenericSend+0x1f0>
 800350a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800350c:	2b00      	cmp	r3, #0
 800350e:	d106      	bne.n	800351e <xQueueGenericSend+0x14a>
 8003510:	f107 0314 	add.w	r3, r7, #20
 8003514:	4618      	mov	r0, r3
 8003516:	f001 f8cd 	bl	80046b4 <vTaskInternalSetTimeOutState>
 800351a:	2301      	movs	r3, #1
 800351c:	637b      	str	r3, [r7, #52]	; 0x34
 800351e:	f001 ffe9 	bl	80054f4 <vPortExitCritical>
 8003522:	f000 fd9b 	bl	800405c <vTaskSuspendAll>
 8003526:	f001 ffb5 	bl	8005494 <vPortEnterCritical>
 800352a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003530:	b25b      	sxtb	r3, r3
 8003532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003536:	d103      	bne.n	8003540 <xQueueGenericSend+0x16c>
 8003538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003542:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003546:	b25b      	sxtb	r3, r3
 8003548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354c:	d103      	bne.n	8003556 <xQueueGenericSend+0x182>
 800354e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003556:	f001 ffcd 	bl	80054f4 <vPortExitCritical>
 800355a:	1d3a      	adds	r2, r7, #4
 800355c:	f107 0314 	add.w	r3, r7, #20
 8003560:	4611      	mov	r1, r2
 8003562:	4618      	mov	r0, r3
 8003564:	f001 f8bc 	bl	80046e0 <xTaskCheckForTimeOut>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d124      	bne.n	80035b8 <xQueueGenericSend+0x1e4>
 800356e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003570:	f000 faa2 	bl	8003ab8 <prvIsQueueFull>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d018      	beq.n	80035ac <xQueueGenericSend+0x1d8>
 800357a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357c:	3310      	adds	r3, #16
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	4611      	mov	r1, r2
 8003582:	4618      	mov	r0, r3
 8003584:	f000 ff44 	bl	8004410 <vTaskPlaceOnEventList>
 8003588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800358a:	f000 fa2d 	bl	80039e8 <prvUnlockQueue>
 800358e:	f000 fd73 	bl	8004078 <xTaskResumeAll>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	f47f af7c 	bne.w	8003492 <xQueueGenericSend+0xbe>
 800359a:	4b0c      	ldr	r3, [pc, #48]	; (80035cc <xQueueGenericSend+0x1f8>)
 800359c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	f3bf 8f4f 	dsb	sy
 80035a6:	f3bf 8f6f 	isb	sy
 80035aa:	e772      	b.n	8003492 <xQueueGenericSend+0xbe>
 80035ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035ae:	f000 fa1b 	bl	80039e8 <prvUnlockQueue>
 80035b2:	f000 fd61 	bl	8004078 <xTaskResumeAll>
 80035b6:	e76c      	b.n	8003492 <xQueueGenericSend+0xbe>
 80035b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035ba:	f000 fa15 	bl	80039e8 <prvUnlockQueue>
 80035be:	f000 fd5b 	bl	8004078 <xTaskResumeAll>
 80035c2:	2300      	movs	r3, #0
 80035c4:	4618      	mov	r0, r3
 80035c6:	3738      	adds	r7, #56	; 0x38
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	e000ed04 	.word	0xe000ed04

080035d0 <xQueueGenericSendFromISR>:
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b090      	sub	sp, #64	; 0x40
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	603b      	str	r3, [r7, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80035e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10a      	bne.n	80035fe <xQueueGenericSendFromISR+0x2e>
 80035e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ec:	f383 8811 	msr	BASEPRI, r3
 80035f0:	f3bf 8f6f 	isb	sy
 80035f4:	f3bf 8f4f 	dsb	sy
 80035f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80035fa:	bf00      	nop
 80035fc:	e7fe      	b.n	80035fc <xQueueGenericSendFromISR+0x2c>
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d103      	bne.n	800360c <xQueueGenericSendFromISR+0x3c>
 8003604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <xQueueGenericSendFromISR+0x40>
 800360c:	2301      	movs	r3, #1
 800360e:	e000      	b.n	8003612 <xQueueGenericSendFromISR+0x42>
 8003610:	2300      	movs	r3, #0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10a      	bne.n	800362c <xQueueGenericSendFromISR+0x5c>
 8003616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361a:	f383 8811 	msr	BASEPRI, r3
 800361e:	f3bf 8f6f 	isb	sy
 8003622:	f3bf 8f4f 	dsb	sy
 8003626:	627b      	str	r3, [r7, #36]	; 0x24
 8003628:	bf00      	nop
 800362a:	e7fe      	b.n	800362a <xQueueGenericSendFromISR+0x5a>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	2b02      	cmp	r3, #2
 8003630:	d103      	bne.n	800363a <xQueueGenericSendFromISR+0x6a>
 8003632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003636:	2b01      	cmp	r3, #1
 8003638:	d101      	bne.n	800363e <xQueueGenericSendFromISR+0x6e>
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <xQueueGenericSendFromISR+0x70>
 800363e:	2300      	movs	r3, #0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10a      	bne.n	800365a <xQueueGenericSendFromISR+0x8a>
 8003644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003648:	f383 8811 	msr	BASEPRI, r3
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	623b      	str	r3, [r7, #32]
 8003656:	bf00      	nop
 8003658:	e7fe      	b.n	8003658 <xQueueGenericSendFromISR+0x88>
 800365a:	f001 fffd 	bl	8005658 <vPortValidateInterruptPriority>
 800365e:	f3ef 8211 	mrs	r2, BASEPRI
 8003662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003666:	f383 8811 	msr	BASEPRI, r3
 800366a:	f3bf 8f6f 	isb	sy
 800366e:	f3bf 8f4f 	dsb	sy
 8003672:	61fa      	str	r2, [r7, #28]
 8003674:	61bb      	str	r3, [r7, #24]
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	637b      	str	r3, [r7, #52]	; 0x34
 800367a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800367e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003682:	429a      	cmp	r2, r3
 8003684:	d302      	bcc.n	800368c <xQueueGenericSendFromISR+0xbc>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b02      	cmp	r3, #2
 800368a:	d12f      	bne.n	80036ec <xQueueGenericSendFromISR+0x11c>
 800368c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	68b9      	ldr	r1, [r7, #8]
 80036a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80036a2:	f000 f911 	bl	80038c8 <prvCopyDataToQueue>
 80036a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80036aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ae:	d112      	bne.n	80036d6 <xQueueGenericSendFromISR+0x106>
 80036b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d016      	beq.n	80036e6 <xQueueGenericSendFromISR+0x116>
 80036b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ba:	3324      	adds	r3, #36	; 0x24
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 ff33 	bl	8004528 <xTaskRemoveFromEventList>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00e      	beq.n	80036e6 <xQueueGenericSendFromISR+0x116>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00b      	beq.n	80036e6 <xQueueGenericSendFromISR+0x116>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	e007      	b.n	80036e6 <xQueueGenericSendFromISR+0x116>
 80036d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80036da:	3301      	adds	r3, #1
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	b25a      	sxtb	r2, r3
 80036e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036e6:	2301      	movs	r3, #1
 80036e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036ea:	e001      	b.n	80036f0 <xQueueGenericSendFromISR+0x120>
 80036ec:	2300      	movs	r3, #0
 80036ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f383 8811 	msr	BASEPRI, r3
 80036fa:	bf00      	nop
 80036fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036fe:	4618      	mov	r0, r3
 8003700:	3740      	adds	r7, #64	; 0x40
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
	...

08003708 <xQueueReceive>:
 8003708:	b580      	push	{r7, lr}
 800370a:	b08c      	sub	sp, #48	; 0x30
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
 8003714:	2300      	movs	r3, #0
 8003716:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	62bb      	str	r3, [r7, #40]	; 0x28
 800371c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10a      	bne.n	8003738 <xQueueReceive+0x30>
 8003722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003726:	f383 8811 	msr	BASEPRI, r3
 800372a:	f3bf 8f6f 	isb	sy
 800372e:	f3bf 8f4f 	dsb	sy
 8003732:	623b      	str	r3, [r7, #32]
 8003734:	bf00      	nop
 8003736:	e7fe      	b.n	8003736 <xQueueReceive+0x2e>
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d103      	bne.n	8003746 <xQueueReceive+0x3e>
 800373e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <xQueueReceive+0x42>
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <xQueueReceive+0x44>
 800374a:	2300      	movs	r3, #0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10a      	bne.n	8003766 <xQueueReceive+0x5e>
 8003750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003754:	f383 8811 	msr	BASEPRI, r3
 8003758:	f3bf 8f6f 	isb	sy
 800375c:	f3bf 8f4f 	dsb	sy
 8003760:	61fb      	str	r3, [r7, #28]
 8003762:	bf00      	nop
 8003764:	e7fe      	b.n	8003764 <xQueueReceive+0x5c>
 8003766:	f001 f903 	bl	8004970 <xTaskGetSchedulerState>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d102      	bne.n	8003776 <xQueueReceive+0x6e>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <xQueueReceive+0x72>
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <xQueueReceive+0x74>
 800377a:	2300      	movs	r3, #0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10a      	bne.n	8003796 <xQueueReceive+0x8e>
 8003780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003784:	f383 8811 	msr	BASEPRI, r3
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	61bb      	str	r3, [r7, #24]
 8003792:	bf00      	nop
 8003794:	e7fe      	b.n	8003794 <xQueueReceive+0x8c>
 8003796:	f001 fe7d 	bl	8005494 <vPortEnterCritical>
 800379a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d01f      	beq.n	80037e6 <xQueueReceive+0xde>
 80037a6:	68b9      	ldr	r1, [r7, #8]
 80037a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037aa:	f000 f8f7 	bl	800399c <prvCopyDataFromQueue>
 80037ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b0:	1e5a      	subs	r2, r3, #1
 80037b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b4:	639a      	str	r2, [r3, #56]	; 0x38
 80037b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00f      	beq.n	80037de <xQueueReceive+0xd6>
 80037be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c0:	3310      	adds	r3, #16
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 feb0 	bl	8004528 <xTaskRemoveFromEventList>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d007      	beq.n	80037de <xQueueReceive+0xd6>
 80037ce:	4b3d      	ldr	r3, [pc, #244]	; (80038c4 <xQueueReceive+0x1bc>)
 80037d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	f3bf 8f4f 	dsb	sy
 80037da:	f3bf 8f6f 	isb	sy
 80037de:	f001 fe89 	bl	80054f4 <vPortExitCritical>
 80037e2:	2301      	movs	r3, #1
 80037e4:	e069      	b.n	80038ba <xQueueReceive+0x1b2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d103      	bne.n	80037f4 <xQueueReceive+0xec>
 80037ec:	f001 fe82 	bl	80054f4 <vPortExitCritical>
 80037f0:	2300      	movs	r3, #0
 80037f2:	e062      	b.n	80038ba <xQueueReceive+0x1b2>
 80037f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <xQueueReceive+0x100>
 80037fa:	f107 0310 	add.w	r3, r7, #16
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 ff58 	bl	80046b4 <vTaskInternalSetTimeOutState>
 8003804:	2301      	movs	r3, #1
 8003806:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003808:	f001 fe74 	bl	80054f4 <vPortExitCritical>
 800380c:	f000 fc26 	bl	800405c <vTaskSuspendAll>
 8003810:	f001 fe40 	bl	8005494 <vPortEnterCritical>
 8003814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003816:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800381a:	b25b      	sxtb	r3, r3
 800381c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003820:	d103      	bne.n	800382a <xQueueReceive+0x122>
 8003822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800382a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003830:	b25b      	sxtb	r3, r3
 8003832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003836:	d103      	bne.n	8003840 <xQueueReceive+0x138>
 8003838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003840:	f001 fe58 	bl	80054f4 <vPortExitCritical>
 8003844:	1d3a      	adds	r2, r7, #4
 8003846:	f107 0310 	add.w	r3, r7, #16
 800384a:	4611      	mov	r1, r2
 800384c:	4618      	mov	r0, r3
 800384e:	f000 ff47 	bl	80046e0 <xTaskCheckForTimeOut>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d123      	bne.n	80038a0 <xQueueReceive+0x198>
 8003858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800385a:	f000 f917 	bl	8003a8c <prvIsQueueEmpty>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d017      	beq.n	8003894 <xQueueReceive+0x18c>
 8003864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003866:	3324      	adds	r3, #36	; 0x24
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	4611      	mov	r1, r2
 800386c:	4618      	mov	r0, r3
 800386e:	f000 fdcf 	bl	8004410 <vTaskPlaceOnEventList>
 8003872:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003874:	f000 f8b8 	bl	80039e8 <prvUnlockQueue>
 8003878:	f000 fbfe 	bl	8004078 <xTaskResumeAll>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d189      	bne.n	8003796 <xQueueReceive+0x8e>
 8003882:	4b10      	ldr	r3, [pc, #64]	; (80038c4 <xQueueReceive+0x1bc>)
 8003884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	f3bf 8f4f 	dsb	sy
 800388e:	f3bf 8f6f 	isb	sy
 8003892:	e780      	b.n	8003796 <xQueueReceive+0x8e>
 8003894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003896:	f000 f8a7 	bl	80039e8 <prvUnlockQueue>
 800389a:	f000 fbed 	bl	8004078 <xTaskResumeAll>
 800389e:	e77a      	b.n	8003796 <xQueueReceive+0x8e>
 80038a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038a2:	f000 f8a1 	bl	80039e8 <prvUnlockQueue>
 80038a6:	f000 fbe7 	bl	8004078 <xTaskResumeAll>
 80038aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038ac:	f000 f8ee 	bl	8003a8c <prvIsQueueEmpty>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f43f af6f 	beq.w	8003796 <xQueueReceive+0x8e>
 80038b8:	2300      	movs	r3, #0
 80038ba:	4618      	mov	r0, r3
 80038bc:	3730      	adds	r7, #48	; 0x30
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	e000ed04 	.word	0xe000ed04

080038c8 <prvCopyDataToQueue>:
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
 80038d4:	2300      	movs	r3, #0
 80038d6:	617b      	str	r3, [r7, #20]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038dc:	613b      	str	r3, [r7, #16]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10d      	bne.n	8003902 <prvCopyDataToQueue+0x3a>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d14d      	bne.n	800398a <prvCopyDataToQueue+0xc2>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f001 f85a 	bl	80049ac <xTaskPriorityDisinherit>
 80038f8:	6178      	str	r0, [r7, #20]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	609a      	str	r2, [r3, #8]
 8003900:	e043      	b.n	800398a <prvCopyDataToQueue+0xc2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d119      	bne.n	800393c <prvCopyDataToQueue+0x74>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6858      	ldr	r0, [r3, #4]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	461a      	mov	r2, r3
 8003912:	68b9      	ldr	r1, [r7, #8]
 8003914:	f002 fab3 	bl	8005e7e <memcpy>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	441a      	add	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	605a      	str	r2, [r3, #4]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	429a      	cmp	r2, r3
 8003930:	d32b      	bcc.n	800398a <prvCopyDataToQueue+0xc2>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	e026      	b.n	800398a <prvCopyDataToQueue+0xc2>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	68d8      	ldr	r0, [r3, #12]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	461a      	mov	r2, r3
 8003946:	68b9      	ldr	r1, [r7, #8]
 8003948:	f002 fa99 	bl	8005e7e <memcpy>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003954:	425b      	negs	r3, r3
 8003956:	441a      	add	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	60da      	str	r2, [r3, #12]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d207      	bcs.n	8003978 <prvCopyDataToQueue+0xb0>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	425b      	negs	r3, r3
 8003972:	441a      	add	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	60da      	str	r2, [r3, #12]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b02      	cmp	r3, #2
 800397c:	d105      	bne.n	800398a <prvCopyDataToQueue+0xc2>
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d002      	beq.n	800398a <prvCopyDataToQueue+0xc2>
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	3b01      	subs	r3, #1
 8003988:	613b      	str	r3, [r7, #16]
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1c5a      	adds	r2, r3, #1
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	639a      	str	r2, [r3, #56]	; 0x38
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	4618      	mov	r0, r3
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <prvCopyDataFromQueue>:
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d018      	beq.n	80039e0 <prvCopyDataFromQueue+0x44>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	441a      	add	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	60da      	str	r2, [r3, #12]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68da      	ldr	r2, [r3, #12]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d303      	bcc.n	80039d0 <prvCopyDataFromQueue+0x34>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	60da      	str	r2, [r3, #12]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68d9      	ldr	r1, [r3, #12]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	461a      	mov	r2, r3
 80039da:	6838      	ldr	r0, [r7, #0]
 80039dc:	f002 fa4f 	bl	8005e7e <memcpy>
 80039e0:	bf00      	nop
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <prvUnlockQueue>:
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	f001 fd50 	bl	8005494 <vPortEnterCritical>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039fa:	73fb      	strb	r3, [r7, #15]
 80039fc:	e011      	b.n	8003a22 <prvUnlockQueue+0x3a>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d012      	beq.n	8003a2c <prvUnlockQueue+0x44>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3324      	adds	r3, #36	; 0x24
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 fd8c 	bl	8004528 <xTaskRemoveFromEventList>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <prvUnlockQueue+0x32>
 8003a16:	f000 fec5 	bl	80047a4 <vTaskMissedYield>
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	73fb      	strb	r3, [r7, #15]
 8003a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	dce9      	bgt.n	80039fe <prvUnlockQueue+0x16>
 8003a2a:	e000      	b.n	8003a2e <prvUnlockQueue+0x46>
 8003a2c:	bf00      	nop
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	22ff      	movs	r2, #255	; 0xff
 8003a32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a36:	f001 fd5d 	bl	80054f4 <vPortExitCritical>
 8003a3a:	f001 fd2b 	bl	8005494 <vPortEnterCritical>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a44:	73bb      	strb	r3, [r7, #14]
 8003a46:	e011      	b.n	8003a6c <prvUnlockQueue+0x84>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d012      	beq.n	8003a76 <prvUnlockQueue+0x8e>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3310      	adds	r3, #16
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 fd67 	bl	8004528 <xTaskRemoveFromEventList>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <prvUnlockQueue+0x7c>
 8003a60:	f000 fea0 	bl	80047a4 <vTaskMissedYield>
 8003a64:	7bbb      	ldrb	r3, [r7, #14]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	73bb      	strb	r3, [r7, #14]
 8003a6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	dce9      	bgt.n	8003a48 <prvUnlockQueue+0x60>
 8003a74:	e000      	b.n	8003a78 <prvUnlockQueue+0x90>
 8003a76:	bf00      	nop
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	22ff      	movs	r2, #255	; 0xff
 8003a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a80:	f001 fd38 	bl	80054f4 <vPortExitCritical>
 8003a84:	bf00      	nop
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <prvIsQueueEmpty>:
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	f001 fcfe 	bl	8005494 <vPortEnterCritical>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d102      	bne.n	8003aa6 <prvIsQueueEmpty+0x1a>
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	e001      	b.n	8003aaa <prvIsQueueEmpty+0x1e>
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	f001 fd23 	bl	80054f4 <vPortExitCritical>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <prvIsQueueFull>:
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	f001 fce8 	bl	8005494 <vPortEnterCritical>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d102      	bne.n	8003ad6 <prvIsQueueFull+0x1e>
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	e001      	b.n	8003ada <prvIsQueueFull+0x22>
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	f001 fd0b 	bl	80054f4 <vPortExitCritical>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <vQueueAddToRegistry>:
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
 8003af2:	2300      	movs	r3, #0
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	e014      	b.n	8003b22 <vQueueAddToRegistry+0x3a>
 8003af8:	4a0f      	ldr	r2, [pc, #60]	; (8003b38 <vQueueAddToRegistry+0x50>)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10b      	bne.n	8003b1c <vQueueAddToRegistry+0x34>
 8003b04:	490c      	ldr	r1, [pc, #48]	; (8003b38 <vQueueAddToRegistry+0x50>)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8003b0e:	4a0a      	ldr	r2, [pc, #40]	; (8003b38 <vQueueAddToRegistry+0x50>)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	4413      	add	r3, r2
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	605a      	str	r2, [r3, #4]
 8003b1a:	e006      	b.n	8003b2a <vQueueAddToRegistry+0x42>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2b07      	cmp	r3, #7
 8003b26:	d9e7      	bls.n	8003af8 <vQueueAddToRegistry+0x10>
 8003b28:	bf00      	nop
 8003b2a:	bf00      	nop
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	20000888 	.word	0x20000888

08003b3c <vQueueWaitForMessageRestricted>:
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	f001 fca2 	bl	8005494 <vPortEnterCritical>
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b56:	b25b      	sxtb	r3, r3
 8003b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5c:	d103      	bne.n	8003b66 <vQueueWaitForMessageRestricted+0x2a>
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b6c:	b25b      	sxtb	r3, r3
 8003b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b72:	d103      	bne.n	8003b7c <vQueueWaitForMessageRestricted+0x40>
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b7c:	f001 fcba 	bl	80054f4 <vPortExitCritical>
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d106      	bne.n	8003b96 <vQueueWaitForMessageRestricted+0x5a>
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	3324      	adds	r3, #36	; 0x24
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	68b9      	ldr	r1, [r7, #8]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 fc9d 	bl	80044d0 <vTaskPlaceOnEventListRestricted>
 8003b96:	6978      	ldr	r0, [r7, #20]
 8003b98:	f7ff ff26 	bl	80039e8 <prvUnlockQueue>
 8003b9c:	bf00      	nop
 8003b9e:	3718      	adds	r7, #24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <xTaskCreateStatic>:
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08e      	sub	sp, #56	; 0x38
 8003ba8:	af04      	add	r7, sp, #16
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
 8003bb0:	603b      	str	r3, [r7, #0]
 8003bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10a      	bne.n	8003bce <xTaskCreateStatic+0x2a>
 8003bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbc:	f383 8811 	msr	BASEPRI, r3
 8003bc0:	f3bf 8f6f 	isb	sy
 8003bc4:	f3bf 8f4f 	dsb	sy
 8003bc8:	623b      	str	r3, [r7, #32]
 8003bca:	bf00      	nop
 8003bcc:	e7fe      	b.n	8003bcc <xTaskCreateStatic+0x28>
 8003bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10a      	bne.n	8003bea <xTaskCreateStatic+0x46>
 8003bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd8:	f383 8811 	msr	BASEPRI, r3
 8003bdc:	f3bf 8f6f 	isb	sy
 8003be0:	f3bf 8f4f 	dsb	sy
 8003be4:	61fb      	str	r3, [r7, #28]
 8003be6:	bf00      	nop
 8003be8:	e7fe      	b.n	8003be8 <xTaskCreateStatic+0x44>
 8003bea:	23a8      	movs	r3, #168	; 0xa8
 8003bec:	613b      	str	r3, [r7, #16]
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	2ba8      	cmp	r3, #168	; 0xa8
 8003bf2:	d00a      	beq.n	8003c0a <xTaskCreateStatic+0x66>
 8003bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf8:	f383 8811 	msr	BASEPRI, r3
 8003bfc:	f3bf 8f6f 	isb	sy
 8003c00:	f3bf 8f4f 	dsb	sy
 8003c04:	61bb      	str	r3, [r7, #24]
 8003c06:	bf00      	nop
 8003c08:	e7fe      	b.n	8003c08 <xTaskCreateStatic+0x64>
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d01e      	beq.n	8003c50 <xTaskCreateStatic+0xac>
 8003c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d01b      	beq.n	8003c50 <xTaskCreateStatic+0xac>
 8003c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c20:	631a      	str	r2, [r3, #48]	; 0x30
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	2202      	movs	r2, #2
 8003c26:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	9303      	str	r3, [sp, #12]
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	9302      	str	r3, [sp, #8]
 8003c32:	f107 0314 	add.w	r3, r7, #20
 8003c36:	9301      	str	r3, [sp, #4]
 8003c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	68b9      	ldr	r1, [r7, #8]
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 f850 	bl	8003ce8 <prvInitialiseNewTask>
 8003c48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c4a:	f000 f8f3 	bl	8003e34 <prvAddNewTaskToReadyList>
 8003c4e:	e001      	b.n	8003c54 <xTaskCreateStatic+0xb0>
 8003c50:	2300      	movs	r3, #0
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	4618      	mov	r0, r3
 8003c58:	3728      	adds	r7, #40	; 0x28
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <xTaskCreate>:
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b08c      	sub	sp, #48	; 0x30
 8003c62:	af04      	add	r7, sp, #16
 8003c64:	60f8      	str	r0, [r7, #12]
 8003c66:	60b9      	str	r1, [r7, #8]
 8003c68:	603b      	str	r3, [r7, #0]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	80fb      	strh	r3, [r7, #6]
 8003c6e:	88fb      	ldrh	r3, [r7, #6]
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4618      	mov	r0, r3
 8003c74:	f001 fd30 	bl	80056d8 <pvPortMalloc>
 8003c78:	6178      	str	r0, [r7, #20]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00e      	beq.n	8003c9e <xTaskCreate+0x40>
 8003c80:	20a8      	movs	r0, #168	; 0xa8
 8003c82:	f001 fd29 	bl	80056d8 <pvPortMalloc>
 8003c86:	61f8      	str	r0, [r7, #28]
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <xTaskCreate+0x38>
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	631a      	str	r2, [r3, #48]	; 0x30
 8003c94:	e005      	b.n	8003ca2 <xTaskCreate+0x44>
 8003c96:	6978      	ldr	r0, [r7, #20]
 8003c98:	f001 fdea 	bl	8005870 <vPortFree>
 8003c9c:	e001      	b.n	8003ca2 <xTaskCreate+0x44>
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	61fb      	str	r3, [r7, #28]
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d017      	beq.n	8003cd8 <xTaskCreate+0x7a>
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 8003cb0:	88fa      	ldrh	r2, [r7, #6]
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	9303      	str	r3, [sp, #12]
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	9302      	str	r3, [sp, #8]
 8003cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cbc:	9301      	str	r3, [sp, #4]
 8003cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	68b9      	ldr	r1, [r7, #8]
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 f80e 	bl	8003ce8 <prvInitialiseNewTask>
 8003ccc:	69f8      	ldr	r0, [r7, #28]
 8003cce:	f000 f8b1 	bl	8003e34 <prvAddNewTaskToReadyList>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	61bb      	str	r3, [r7, #24]
 8003cd6:	e002      	b.n	8003cde <xTaskCreate+0x80>
 8003cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3720      	adds	r7, #32
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <prvInitialiseNewTask>:
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b088      	sub	sp, #32
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
 8003cf4:	603b      	str	r3, [r7, #0]
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	461a      	mov	r2, r3
 8003d00:	21a5      	movs	r1, #165	; 0xa5
 8003d02:	f001 ffea 	bl	8005cda <memset>
 8003d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d10:	3b01      	subs	r3, #1
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	f023 0307 	bic.w	r3, r3, #7
 8003d1e:	61bb      	str	r3, [r7, #24]
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00a      	beq.n	8003d40 <prvInitialiseNewTask+0x58>
 8003d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2e:	f383 8811 	msr	BASEPRI, r3
 8003d32:	f3bf 8f6f 	isb	sy
 8003d36:	f3bf 8f4f 	dsb	sy
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	bf00      	nop
 8003d3e:	e7fe      	b.n	8003d3e <prvInitialiseNewTask+0x56>
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d01f      	beq.n	8003d86 <prvInitialiseNewTask+0x9e>
 8003d46:	2300      	movs	r3, #0
 8003d48:	61fb      	str	r3, [r7, #28]
 8003d4a:	e012      	b.n	8003d72 <prvInitialiseNewTask+0x8a>
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	4413      	add	r3, r2
 8003d52:	7819      	ldrb	r1, [r3, #0]
 8003d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	4413      	add	r3, r2
 8003d5a:	3334      	adds	r3, #52	; 0x34
 8003d5c:	460a      	mov	r2, r1
 8003d5e:	701a      	strb	r2, [r3, #0]
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	4413      	add	r3, r2
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d006      	beq.n	8003d7a <prvInitialiseNewTask+0x92>
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	61fb      	str	r3, [r7, #28]
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	2b0f      	cmp	r3, #15
 8003d76:	d9e9      	bls.n	8003d4c <prvInitialiseNewTask+0x64>
 8003d78:	e000      	b.n	8003d7c <prvInitialiseNewTask+0x94>
 8003d7a:	bf00      	nop
 8003d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d84:	e003      	b.n	8003d8e <prvInitialiseNewTask+0xa6>
 8003d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	2b37      	cmp	r3, #55	; 0x37
 8003d92:	d901      	bls.n	8003d98 <prvInitialiseNewTask+0xb0>
 8003d94:	2337      	movs	r3, #55	; 0x37
 8003d96:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003da2:	64da      	str	r2, [r3, #76]	; 0x4c
 8003da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da6:	2200      	movs	r2, #0
 8003da8:	651a      	str	r2, [r3, #80]	; 0x50
 8003daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dac:	3304      	adds	r3, #4
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff f978 	bl	80030a4 <vListInitialiseItem>
 8003db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db6:	3318      	adds	r3, #24
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff f973 	bl	80030a4 <vListInitialiseItem>
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dc2:	611a      	str	r2, [r3, #16]
 8003dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dcc:	619a      	str	r2, [r3, #24]
 8003dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dd2:	625a      	str	r2, [r3, #36]	; 0x24
 8003dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8003ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 8003de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de6:	3354      	adds	r3, #84	; 0x54
 8003de8:	224c      	movs	r2, #76	; 0x4c
 8003dea:	2100      	movs	r1, #0
 8003dec:	4618      	mov	r0, r3
 8003dee:	f001 ff74 	bl	8005cda <memset>
 8003df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df4:	4a0c      	ldr	r2, [pc, #48]	; (8003e28 <prvInitialiseNewTask+0x140>)
 8003df6:	659a      	str	r2, [r3, #88]	; 0x58
 8003df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfa:	4a0c      	ldr	r2, [pc, #48]	; (8003e2c <prvInitialiseNewTask+0x144>)
 8003dfc:	65da      	str	r2, [r3, #92]	; 0x5c
 8003dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e00:	4a0b      	ldr	r2, [pc, #44]	; (8003e30 <prvInitialiseNewTask+0x148>)
 8003e02:	661a      	str	r2, [r3, #96]	; 0x60
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	68f9      	ldr	r1, [r7, #12]
 8003e08:	69b8      	ldr	r0, [r7, #24]
 8003e0a:	f001 fa17 	bl	800523c <pxPortInitialiseStack>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <prvInitialiseNewTask+0x138>
 8003e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	bf00      	nop
 8003e22:	3720      	adds	r7, #32
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	20004b1c 	.word	0x20004b1c
 8003e2c:	20004b84 	.word	0x20004b84
 8003e30:	20004bec 	.word	0x20004bec

08003e34 <prvAddNewTaskToReadyList>:
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	f001 fb2a 	bl	8005494 <vPortEnterCritical>
 8003e40:	4b2d      	ldr	r3, [pc, #180]	; (8003ef8 <prvAddNewTaskToReadyList+0xc4>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3301      	adds	r3, #1
 8003e46:	4a2c      	ldr	r2, [pc, #176]	; (8003ef8 <prvAddNewTaskToReadyList+0xc4>)
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	4b2c      	ldr	r3, [pc, #176]	; (8003efc <prvAddNewTaskToReadyList+0xc8>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d109      	bne.n	8003e66 <prvAddNewTaskToReadyList+0x32>
 8003e52:	4a2a      	ldr	r2, [pc, #168]	; (8003efc <prvAddNewTaskToReadyList+0xc8>)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6013      	str	r3, [r2, #0]
 8003e58:	4b27      	ldr	r3, [pc, #156]	; (8003ef8 <prvAddNewTaskToReadyList+0xc4>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d110      	bne.n	8003e82 <prvAddNewTaskToReadyList+0x4e>
 8003e60:	f000 fcc4 	bl	80047ec <prvInitialiseTaskLists>
 8003e64:	e00d      	b.n	8003e82 <prvAddNewTaskToReadyList+0x4e>
 8003e66:	4b26      	ldr	r3, [pc, #152]	; (8003f00 <prvAddNewTaskToReadyList+0xcc>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d109      	bne.n	8003e82 <prvAddNewTaskToReadyList+0x4e>
 8003e6e:	4b23      	ldr	r3, [pc, #140]	; (8003efc <prvAddNewTaskToReadyList+0xc8>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d802      	bhi.n	8003e82 <prvAddNewTaskToReadyList+0x4e>
 8003e7c:	4a1f      	ldr	r2, [pc, #124]	; (8003efc <prvAddNewTaskToReadyList+0xc8>)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6013      	str	r3, [r2, #0]
 8003e82:	4b20      	ldr	r3, [pc, #128]	; (8003f04 <prvAddNewTaskToReadyList+0xd0>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	3301      	adds	r3, #1
 8003e88:	4a1e      	ldr	r2, [pc, #120]	; (8003f04 <prvAddNewTaskToReadyList+0xd0>)
 8003e8a:	6013      	str	r3, [r2, #0]
 8003e8c:	4b1d      	ldr	r3, [pc, #116]	; (8003f04 <prvAddNewTaskToReadyList+0xd0>)
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	645a      	str	r2, [r3, #68]	; 0x44
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e98:	4b1b      	ldr	r3, [pc, #108]	; (8003f08 <prvAddNewTaskToReadyList+0xd4>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d903      	bls.n	8003ea8 <prvAddNewTaskToReadyList+0x74>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea4:	4a18      	ldr	r2, [pc, #96]	; (8003f08 <prvAddNewTaskToReadyList+0xd4>)
 8003ea6:	6013      	str	r3, [r2, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eac:	4613      	mov	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4a15      	ldr	r2, [pc, #84]	; (8003f0c <prvAddNewTaskToReadyList+0xd8>)
 8003eb6:	441a      	add	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3304      	adds	r3, #4
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4610      	mov	r0, r2
 8003ec0:	f7ff f8fd 	bl	80030be <vListInsertEnd>
 8003ec4:	f001 fb16 	bl	80054f4 <vPortExitCritical>
 8003ec8:	4b0d      	ldr	r3, [pc, #52]	; (8003f00 <prvAddNewTaskToReadyList+0xcc>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00e      	beq.n	8003eee <prvAddNewTaskToReadyList+0xba>
 8003ed0:	4b0a      	ldr	r3, [pc, #40]	; (8003efc <prvAddNewTaskToReadyList+0xc8>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d207      	bcs.n	8003eee <prvAddNewTaskToReadyList+0xba>
 8003ede:	4b0c      	ldr	r3, [pc, #48]	; (8003f10 <prvAddNewTaskToReadyList+0xdc>)
 8003ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	f3bf 8f6f 	isb	sy
 8003eee:	bf00      	nop
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	20000d9c 	.word	0x20000d9c
 8003efc:	200008c8 	.word	0x200008c8
 8003f00:	20000da8 	.word	0x20000da8
 8003f04:	20000db8 	.word	0x20000db8
 8003f08:	20000da4 	.word	0x20000da4
 8003f0c:	200008cc 	.word	0x200008cc
 8003f10:	e000ed04 	.word	0xe000ed04

08003f14 <vTaskDelay>:
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d017      	beq.n	8003f56 <vTaskDelay+0x42>
 8003f26:	4b13      	ldr	r3, [pc, #76]	; (8003f74 <vTaskDelay+0x60>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <vTaskDelay+0x30>
 8003f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f32:	f383 8811 	msr	BASEPRI, r3
 8003f36:	f3bf 8f6f 	isb	sy
 8003f3a:	f3bf 8f4f 	dsb	sy
 8003f3e:	60bb      	str	r3, [r7, #8]
 8003f40:	bf00      	nop
 8003f42:	e7fe      	b.n	8003f42 <vTaskDelay+0x2e>
 8003f44:	f000 f88a 	bl	800405c <vTaskSuspendAll>
 8003f48:	2100      	movs	r1, #0
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 fdb4 	bl	8004ab8 <prvAddCurrentTaskToDelayedList>
 8003f50:	f000 f892 	bl	8004078 <xTaskResumeAll>
 8003f54:	60f8      	str	r0, [r7, #12]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d107      	bne.n	8003f6c <vTaskDelay+0x58>
 8003f5c:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <vTaskDelay+0x64>)
 8003f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	f3bf 8f4f 	dsb	sy
 8003f68:	f3bf 8f6f 	isb	sy
 8003f6c:	bf00      	nop
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	20000dc4 	.word	0x20000dc4
 8003f78:	e000ed04 	.word	0xe000ed04

08003f7c <vTaskStartScheduler>:
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08a      	sub	sp, #40	; 0x28
 8003f80:	af04      	add	r7, sp, #16
 8003f82:	2300      	movs	r3, #0
 8003f84:	60bb      	str	r3, [r7, #8]
 8003f86:	2300      	movs	r3, #0
 8003f88:	607b      	str	r3, [r7, #4]
 8003f8a:	463a      	mov	r2, r7
 8003f8c:	1d39      	adds	r1, r7, #4
 8003f8e:	f107 0308 	add.w	r3, r7, #8
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fe fdc6 	bl	8002b24 <vApplicationGetIdleTaskMemory>
 8003f98:	6839      	ldr	r1, [r7, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	9202      	str	r2, [sp, #8]
 8003fa0:	9301      	str	r3, [sp, #4]
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	460a      	mov	r2, r1
 8003faa:	4924      	ldr	r1, [pc, #144]	; (800403c <vTaskStartScheduler+0xc0>)
 8003fac:	4824      	ldr	r0, [pc, #144]	; (8004040 <vTaskStartScheduler+0xc4>)
 8003fae:	f7ff fdf9 	bl	8003ba4 <xTaskCreateStatic>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	4a23      	ldr	r2, [pc, #140]	; (8004044 <vTaskStartScheduler+0xc8>)
 8003fb6:	6013      	str	r3, [r2, #0]
 8003fb8:	4b22      	ldr	r3, [pc, #136]	; (8004044 <vTaskStartScheduler+0xc8>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d002      	beq.n	8003fc6 <vTaskStartScheduler+0x4a>
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	e001      	b.n	8003fca <vTaskStartScheduler+0x4e>
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	617b      	str	r3, [r7, #20]
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d102      	bne.n	8003fd6 <vTaskStartScheduler+0x5a>
 8003fd0:	f000 fdc6 	bl	8004b60 <xTimerCreateTimerTask>
 8003fd4:	6178      	str	r0, [r7, #20]
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d11b      	bne.n	8004014 <vTaskStartScheduler+0x98>
 8003fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe0:	f383 8811 	msr	BASEPRI, r3
 8003fe4:	f3bf 8f6f 	isb	sy
 8003fe8:	f3bf 8f4f 	dsb	sy
 8003fec:	613b      	str	r3, [r7, #16]
 8003fee:	bf00      	nop
 8003ff0:	4b15      	ldr	r3, [pc, #84]	; (8004048 <vTaskStartScheduler+0xcc>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	3354      	adds	r3, #84	; 0x54
 8003ff6:	4a15      	ldr	r2, [pc, #84]	; (800404c <vTaskStartScheduler+0xd0>)
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	4b15      	ldr	r3, [pc, #84]	; (8004050 <vTaskStartScheduler+0xd4>)
 8003ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	4b14      	ldr	r3, [pc, #80]	; (8004054 <vTaskStartScheduler+0xd8>)
 8004004:	2201      	movs	r2, #1
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	4b13      	ldr	r3, [pc, #76]	; (8004058 <vTaskStartScheduler+0xdc>)
 800400a:	2200      	movs	r2, #0
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	f001 f99f 	bl	8005350 <xPortStartScheduler>
 8004012:	e00e      	b.n	8004032 <vTaskStartScheduler+0xb6>
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401a:	d10a      	bne.n	8004032 <vTaskStartScheduler+0xb6>
 800401c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004020:	f383 8811 	msr	BASEPRI, r3
 8004024:	f3bf 8f6f 	isb	sy
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	bf00      	nop
 8004030:	e7fe      	b.n	8004030 <vTaskStartScheduler+0xb4>
 8004032:	bf00      	nop
 8004034:	3718      	adds	r7, #24
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	08006a68 	.word	0x08006a68
 8004040:	080047bd 	.word	0x080047bd
 8004044:	20000dc0 	.word	0x20000dc0
 8004048:	200008c8 	.word	0x200008c8
 800404c:	20000068 	.word	0x20000068
 8004050:	20000dbc 	.word	0x20000dbc
 8004054:	20000da8 	.word	0x20000da8
 8004058:	20000da0 	.word	0x20000da0

0800405c <vTaskSuspendAll>:
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
 8004060:	4b04      	ldr	r3, [pc, #16]	; (8004074 <vTaskSuspendAll+0x18>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3301      	adds	r3, #1
 8004066:	4a03      	ldr	r2, [pc, #12]	; (8004074 <vTaskSuspendAll+0x18>)
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	bf00      	nop
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	20000dc4 	.word	0x20000dc4

08004078 <xTaskResumeAll>:
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	2300      	movs	r3, #0
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	2300      	movs	r3, #0
 8004084:	60bb      	str	r3, [r7, #8]
 8004086:	4b42      	ldr	r3, [pc, #264]	; (8004190 <xTaskResumeAll+0x118>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10a      	bne.n	80040a4 <xTaskResumeAll+0x2c>
 800408e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004092:	f383 8811 	msr	BASEPRI, r3
 8004096:	f3bf 8f6f 	isb	sy
 800409a:	f3bf 8f4f 	dsb	sy
 800409e:	603b      	str	r3, [r7, #0]
 80040a0:	bf00      	nop
 80040a2:	e7fe      	b.n	80040a2 <xTaskResumeAll+0x2a>
 80040a4:	f001 f9f6 	bl	8005494 <vPortEnterCritical>
 80040a8:	4b39      	ldr	r3, [pc, #228]	; (8004190 <xTaskResumeAll+0x118>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3b01      	subs	r3, #1
 80040ae:	4a38      	ldr	r2, [pc, #224]	; (8004190 <xTaskResumeAll+0x118>)
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	4b37      	ldr	r3, [pc, #220]	; (8004190 <xTaskResumeAll+0x118>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d162      	bne.n	8004180 <xTaskResumeAll+0x108>
 80040ba:	4b36      	ldr	r3, [pc, #216]	; (8004194 <xTaskResumeAll+0x11c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d05e      	beq.n	8004180 <xTaskResumeAll+0x108>
 80040c2:	e02f      	b.n	8004124 <xTaskResumeAll+0xac>
 80040c4:	4b34      	ldr	r3, [pc, #208]	; (8004198 <xTaskResumeAll+0x120>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	3318      	adds	r3, #24
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7ff f851 	bl	8003178 <uxListRemove>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3304      	adds	r3, #4
 80040da:	4618      	mov	r0, r3
 80040dc:	f7ff f84c 	bl	8003178 <uxListRemove>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e4:	4b2d      	ldr	r3, [pc, #180]	; (800419c <xTaskResumeAll+0x124>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d903      	bls.n	80040f4 <xTaskResumeAll+0x7c>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f0:	4a2a      	ldr	r2, [pc, #168]	; (800419c <xTaskResumeAll+0x124>)
 80040f2:	6013      	str	r3, [r2, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f8:	4613      	mov	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4413      	add	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4a27      	ldr	r2, [pc, #156]	; (80041a0 <xTaskResumeAll+0x128>)
 8004102:	441a      	add	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	3304      	adds	r3, #4
 8004108:	4619      	mov	r1, r3
 800410a:	4610      	mov	r0, r2
 800410c:	f7fe ffd7 	bl	80030be <vListInsertEnd>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004114:	4b23      	ldr	r3, [pc, #140]	; (80041a4 <xTaskResumeAll+0x12c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411a:	429a      	cmp	r2, r3
 800411c:	d302      	bcc.n	8004124 <xTaskResumeAll+0xac>
 800411e:	4b22      	ldr	r3, [pc, #136]	; (80041a8 <xTaskResumeAll+0x130>)
 8004120:	2201      	movs	r2, #1
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	4b1c      	ldr	r3, [pc, #112]	; (8004198 <xTaskResumeAll+0x120>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1cb      	bne.n	80040c4 <xTaskResumeAll+0x4c>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <xTaskResumeAll+0xbe>
 8004132:	f000 fbfd 	bl	8004930 <prvResetNextTaskUnblockTime>
 8004136:	4b1d      	ldr	r3, [pc, #116]	; (80041ac <xTaskResumeAll+0x134>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	607b      	str	r3, [r7, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d010      	beq.n	8004164 <xTaskResumeAll+0xec>
 8004142:	f000 f847 	bl	80041d4 <xTaskIncrementTick>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <xTaskResumeAll+0xda>
 800414c:	4b16      	ldr	r3, [pc, #88]	; (80041a8 <xTaskResumeAll+0x130>)
 800414e:	2201      	movs	r2, #1
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	3b01      	subs	r3, #1
 8004156:	607b      	str	r3, [r7, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1f1      	bne.n	8004142 <xTaskResumeAll+0xca>
 800415e:	4b13      	ldr	r3, [pc, #76]	; (80041ac <xTaskResumeAll+0x134>)
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	4b10      	ldr	r3, [pc, #64]	; (80041a8 <xTaskResumeAll+0x130>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d009      	beq.n	8004180 <xTaskResumeAll+0x108>
 800416c:	2301      	movs	r3, #1
 800416e:	60bb      	str	r3, [r7, #8]
 8004170:	4b0f      	ldr	r3, [pc, #60]	; (80041b0 <xTaskResumeAll+0x138>)
 8004172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	f3bf 8f4f 	dsb	sy
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f001 f9b8 	bl	80054f4 <vPortExitCritical>
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20000dc4 	.word	0x20000dc4
 8004194:	20000d9c 	.word	0x20000d9c
 8004198:	20000d5c 	.word	0x20000d5c
 800419c:	20000da4 	.word	0x20000da4
 80041a0:	200008cc 	.word	0x200008cc
 80041a4:	200008c8 	.word	0x200008c8
 80041a8:	20000db0 	.word	0x20000db0
 80041ac:	20000dac 	.word	0x20000dac
 80041b0:	e000ed04 	.word	0xe000ed04

080041b4 <xTaskGetTickCount>:
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	4b05      	ldr	r3, [pc, #20]	; (80041d0 <xTaskGetTickCount+0x1c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	607b      	str	r3, [r7, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4618      	mov	r0, r3
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	20000da0 	.word	0x20000da0

080041d4 <xTaskIncrementTick>:
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	2300      	movs	r3, #0
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	4b4f      	ldr	r3, [pc, #316]	; (800431c <xTaskIncrementTick+0x148>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f040 808f 	bne.w	8004306 <xTaskIncrementTick+0x132>
 80041e8:	4b4d      	ldr	r3, [pc, #308]	; (8004320 <xTaskIncrementTick+0x14c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3301      	adds	r3, #1
 80041ee:	613b      	str	r3, [r7, #16]
 80041f0:	4a4b      	ldr	r2, [pc, #300]	; (8004320 <xTaskIncrementTick+0x14c>)
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d120      	bne.n	800423e <xTaskIncrementTick+0x6a>
 80041fc:	4b49      	ldr	r3, [pc, #292]	; (8004324 <xTaskIncrementTick+0x150>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <xTaskIncrementTick+0x48>
 8004206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420a:	f383 8811 	msr	BASEPRI, r3
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f3bf 8f4f 	dsb	sy
 8004216:	603b      	str	r3, [r7, #0]
 8004218:	bf00      	nop
 800421a:	e7fe      	b.n	800421a <xTaskIncrementTick+0x46>
 800421c:	4b41      	ldr	r3, [pc, #260]	; (8004324 <xTaskIncrementTick+0x150>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	4b41      	ldr	r3, [pc, #260]	; (8004328 <xTaskIncrementTick+0x154>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a3f      	ldr	r2, [pc, #252]	; (8004324 <xTaskIncrementTick+0x150>)
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	4a3f      	ldr	r2, [pc, #252]	; (8004328 <xTaskIncrementTick+0x154>)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6013      	str	r3, [r2, #0]
 8004230:	4b3e      	ldr	r3, [pc, #248]	; (800432c <xTaskIncrementTick+0x158>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3301      	adds	r3, #1
 8004236:	4a3d      	ldr	r2, [pc, #244]	; (800432c <xTaskIncrementTick+0x158>)
 8004238:	6013      	str	r3, [r2, #0]
 800423a:	f000 fb79 	bl	8004930 <prvResetNextTaskUnblockTime>
 800423e:	4b3c      	ldr	r3, [pc, #240]	; (8004330 <xTaskIncrementTick+0x15c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	429a      	cmp	r2, r3
 8004246:	d349      	bcc.n	80042dc <xTaskIncrementTick+0x108>
 8004248:	4b36      	ldr	r3, [pc, #216]	; (8004324 <xTaskIncrementTick+0x150>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d104      	bne.n	800425c <xTaskIncrementTick+0x88>
 8004252:	4b37      	ldr	r3, [pc, #220]	; (8004330 <xTaskIncrementTick+0x15c>)
 8004254:	f04f 32ff 	mov.w	r2, #4294967295
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	e03f      	b.n	80042dc <xTaskIncrementTick+0x108>
 800425c:	4b31      	ldr	r3, [pc, #196]	; (8004324 <xTaskIncrementTick+0x150>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	60bb      	str	r3, [r7, #8]
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	607b      	str	r3, [r7, #4]
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	429a      	cmp	r2, r3
 8004272:	d203      	bcs.n	800427c <xTaskIncrementTick+0xa8>
 8004274:	4a2e      	ldr	r2, [pc, #184]	; (8004330 <xTaskIncrementTick+0x15c>)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	e02f      	b.n	80042dc <xTaskIncrementTick+0x108>
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	3304      	adds	r3, #4
 8004280:	4618      	mov	r0, r3
 8004282:	f7fe ff79 	bl	8003178 <uxListRemove>
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428a:	2b00      	cmp	r3, #0
 800428c:	d004      	beq.n	8004298 <xTaskIncrementTick+0xc4>
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	3318      	adds	r3, #24
 8004292:	4618      	mov	r0, r3
 8004294:	f7fe ff70 	bl	8003178 <uxListRemove>
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800429c:	4b25      	ldr	r3, [pc, #148]	; (8004334 <xTaskIncrementTick+0x160>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d903      	bls.n	80042ac <xTaskIncrementTick+0xd8>
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a8:	4a22      	ldr	r2, [pc, #136]	; (8004334 <xTaskIncrementTick+0x160>)
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b0:	4613      	mov	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4a1f      	ldr	r2, [pc, #124]	; (8004338 <xTaskIncrementTick+0x164>)
 80042ba:	441a      	add	r2, r3
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	3304      	adds	r3, #4
 80042c0:	4619      	mov	r1, r3
 80042c2:	4610      	mov	r0, r2
 80042c4:	f7fe fefb 	bl	80030be <vListInsertEnd>
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042cc:	4b1b      	ldr	r3, [pc, #108]	; (800433c <xTaskIncrementTick+0x168>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d3b8      	bcc.n	8004248 <xTaskIncrementTick+0x74>
 80042d6:	2301      	movs	r3, #1
 80042d8:	617b      	str	r3, [r7, #20]
 80042da:	e7b5      	b.n	8004248 <xTaskIncrementTick+0x74>
 80042dc:	4b17      	ldr	r3, [pc, #92]	; (800433c <xTaskIncrementTick+0x168>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e2:	4915      	ldr	r1, [pc, #84]	; (8004338 <xTaskIncrementTick+0x164>)
 80042e4:	4613      	mov	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	440b      	add	r3, r1
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d901      	bls.n	80042f8 <xTaskIncrementTick+0x124>
 80042f4:	2301      	movs	r3, #1
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	4b11      	ldr	r3, [pc, #68]	; (8004340 <xTaskIncrementTick+0x16c>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d007      	beq.n	8004310 <xTaskIncrementTick+0x13c>
 8004300:	2301      	movs	r3, #1
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	e004      	b.n	8004310 <xTaskIncrementTick+0x13c>
 8004306:	4b0f      	ldr	r3, [pc, #60]	; (8004344 <xTaskIncrementTick+0x170>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	3301      	adds	r3, #1
 800430c:	4a0d      	ldr	r2, [pc, #52]	; (8004344 <xTaskIncrementTick+0x170>)
 800430e:	6013      	str	r3, [r2, #0]
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	4618      	mov	r0, r3
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	20000dc4 	.word	0x20000dc4
 8004320:	20000da0 	.word	0x20000da0
 8004324:	20000d54 	.word	0x20000d54
 8004328:	20000d58 	.word	0x20000d58
 800432c:	20000db4 	.word	0x20000db4
 8004330:	20000dbc 	.word	0x20000dbc
 8004334:	20000da4 	.word	0x20000da4
 8004338:	200008cc 	.word	0x200008cc
 800433c:	200008c8 	.word	0x200008c8
 8004340:	20000db0 	.word	0x20000db0
 8004344:	20000dac 	.word	0x20000dac

08004348 <vTaskSwitchContext>:
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	4b2a      	ldr	r3, [pc, #168]	; (80043f8 <vTaskSwitchContext+0xb0>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <vTaskSwitchContext+0x16>
 8004356:	4b29      	ldr	r3, [pc, #164]	; (80043fc <vTaskSwitchContext+0xb4>)
 8004358:	2201      	movs	r2, #1
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	e046      	b.n	80043ec <vTaskSwitchContext+0xa4>
 800435e:	4b27      	ldr	r3, [pc, #156]	; (80043fc <vTaskSwitchContext+0xb4>)
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	4b26      	ldr	r3, [pc, #152]	; (8004400 <vTaskSwitchContext+0xb8>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	e010      	b.n	800438e <vTaskSwitchContext+0x46>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10a      	bne.n	8004388 <vTaskSwitchContext+0x40>
 8004372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004376:	f383 8811 	msr	BASEPRI, r3
 800437a:	f3bf 8f6f 	isb	sy
 800437e:	f3bf 8f4f 	dsb	sy
 8004382:	607b      	str	r3, [r7, #4]
 8004384:	bf00      	nop
 8004386:	e7fe      	b.n	8004386 <vTaskSwitchContext+0x3e>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	3b01      	subs	r3, #1
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	491d      	ldr	r1, [pc, #116]	; (8004404 <vTaskSwitchContext+0xbc>)
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	4613      	mov	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	440b      	add	r3, r1
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0e4      	beq.n	800436c <vTaskSwitchContext+0x24>
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	4613      	mov	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4a15      	ldr	r2, [pc, #84]	; (8004404 <vTaskSwitchContext+0xbc>)
 80043ae:	4413      	add	r3, r2
 80043b0:	60bb      	str	r3, [r7, #8]
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	605a      	str	r2, [r3, #4]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	3308      	adds	r3, #8
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d104      	bne.n	80043d2 <vTaskSwitchContext+0x8a>
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	605a      	str	r2, [r3, #4]
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	4a0b      	ldr	r2, [pc, #44]	; (8004408 <vTaskSwitchContext+0xc0>)
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	4a08      	ldr	r2, [pc, #32]	; (8004400 <vTaskSwitchContext+0xb8>)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	4b09      	ldr	r3, [pc, #36]	; (8004408 <vTaskSwitchContext+0xc0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	3354      	adds	r3, #84	; 0x54
 80043e8:	4a08      	ldr	r2, [pc, #32]	; (800440c <vTaskSwitchContext+0xc4>)
 80043ea:	6013      	str	r3, [r2, #0]
 80043ec:	bf00      	nop
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	20000dc4 	.word	0x20000dc4
 80043fc:	20000db0 	.word	0x20000db0
 8004400:	20000da4 	.word	0x20000da4
 8004404:	200008cc 	.word	0x200008cc
 8004408:	200008c8 	.word	0x200008c8
 800440c:	20000068 	.word	0x20000068

08004410 <vTaskPlaceOnEventList>:
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10a      	bne.n	8004436 <vTaskPlaceOnEventList+0x26>
 8004420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004424:	f383 8811 	msr	BASEPRI, r3
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	60fb      	str	r3, [r7, #12]
 8004432:	bf00      	nop
 8004434:	e7fe      	b.n	8004434 <vTaskPlaceOnEventList+0x24>
 8004436:	4b07      	ldr	r3, [pc, #28]	; (8004454 <vTaskPlaceOnEventList+0x44>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	3318      	adds	r3, #24
 800443c:	4619      	mov	r1, r3
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7fe fe61 	bl	8003106 <vListInsert>
 8004444:	2101      	movs	r1, #1
 8004446:	6838      	ldr	r0, [r7, #0]
 8004448:	f000 fb36 	bl	8004ab8 <prvAddCurrentTaskToDelayedList>
 800444c:	bf00      	nop
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	200008c8 	.word	0x200008c8

08004458 <vTaskPlaceOnUnorderedEventList>:
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10a      	bne.n	8004480 <vTaskPlaceOnUnorderedEventList+0x28>
 800446a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446e:	f383 8811 	msr	BASEPRI, r3
 8004472:	f3bf 8f6f 	isb	sy
 8004476:	f3bf 8f4f 	dsb	sy
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	bf00      	nop
 800447e:	e7fe      	b.n	800447e <vTaskPlaceOnUnorderedEventList+0x26>
 8004480:	4b11      	ldr	r3, [pc, #68]	; (80044c8 <vTaskPlaceOnUnorderedEventList+0x70>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10a      	bne.n	800449e <vTaskPlaceOnUnorderedEventList+0x46>
 8004488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448c:	f383 8811 	msr	BASEPRI, r3
 8004490:	f3bf 8f6f 	isb	sy
 8004494:	f3bf 8f4f 	dsb	sy
 8004498:	613b      	str	r3, [r7, #16]
 800449a:	bf00      	nop
 800449c:	e7fe      	b.n	800449c <vTaskPlaceOnUnorderedEventList+0x44>
 800449e:	4b0b      	ldr	r3, [pc, #44]	; (80044cc <vTaskPlaceOnUnorderedEventList+0x74>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80044a8:	619a      	str	r2, [r3, #24]
 80044aa:	4b08      	ldr	r3, [pc, #32]	; (80044cc <vTaskPlaceOnUnorderedEventList+0x74>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	3318      	adds	r3, #24
 80044b0:	4619      	mov	r1, r3
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f7fe fe03 	bl	80030be <vListInsertEnd>
 80044b8:	2101      	movs	r1, #1
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fafc 	bl	8004ab8 <prvAddCurrentTaskToDelayedList>
 80044c0:	bf00      	nop
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	20000dc4 	.word	0x20000dc4
 80044cc:	200008c8 	.word	0x200008c8

080044d0 <vTaskPlaceOnEventListRestricted>:
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10a      	bne.n	80044f8 <vTaskPlaceOnEventListRestricted+0x28>
 80044e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e6:	f383 8811 	msr	BASEPRI, r3
 80044ea:	f3bf 8f6f 	isb	sy
 80044ee:	f3bf 8f4f 	dsb	sy
 80044f2:	617b      	str	r3, [r7, #20]
 80044f4:	bf00      	nop
 80044f6:	e7fe      	b.n	80044f6 <vTaskPlaceOnEventListRestricted+0x26>
 80044f8:	4b0a      	ldr	r3, [pc, #40]	; (8004524 <vTaskPlaceOnEventListRestricted+0x54>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	3318      	adds	r3, #24
 80044fe:	4619      	mov	r1, r3
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f7fe fddc 	bl	80030be <vListInsertEnd>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d002      	beq.n	8004512 <vTaskPlaceOnEventListRestricted+0x42>
 800450c:	f04f 33ff 	mov.w	r3, #4294967295
 8004510:	60bb      	str	r3, [r7, #8]
 8004512:	6879      	ldr	r1, [r7, #4]
 8004514:	68b8      	ldr	r0, [r7, #8]
 8004516:	f000 facf 	bl	8004ab8 <prvAddCurrentTaskToDelayedList>
 800451a:	bf00      	nop
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	200008c8 	.word	0x200008c8

08004528 <xTaskRemoveFromEventList>:
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	613b      	str	r3, [r7, #16]
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10a      	bne.n	8004554 <xTaskRemoveFromEventList+0x2c>
 800453e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004542:	f383 8811 	msr	BASEPRI, r3
 8004546:	f3bf 8f6f 	isb	sy
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	60fb      	str	r3, [r7, #12]
 8004550:	bf00      	nop
 8004552:	e7fe      	b.n	8004552 <xTaskRemoveFromEventList+0x2a>
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	3318      	adds	r3, #24
 8004558:	4618      	mov	r0, r3
 800455a:	f7fe fe0d 	bl	8003178 <uxListRemove>
 800455e:	4b1e      	ldr	r3, [pc, #120]	; (80045d8 <xTaskRemoveFromEventList+0xb0>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d11d      	bne.n	80045a2 <xTaskRemoveFromEventList+0x7a>
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	3304      	adds	r3, #4
 800456a:	4618      	mov	r0, r3
 800456c:	f7fe fe04 	bl	8003178 <uxListRemove>
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004574:	4b19      	ldr	r3, [pc, #100]	; (80045dc <xTaskRemoveFromEventList+0xb4>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	429a      	cmp	r2, r3
 800457a:	d903      	bls.n	8004584 <xTaskRemoveFromEventList+0x5c>
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	4a16      	ldr	r2, [pc, #88]	; (80045dc <xTaskRemoveFromEventList+0xb4>)
 8004582:	6013      	str	r3, [r2, #0]
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004588:	4613      	mov	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4a13      	ldr	r2, [pc, #76]	; (80045e0 <xTaskRemoveFromEventList+0xb8>)
 8004592:	441a      	add	r2, r3
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	3304      	adds	r3, #4
 8004598:	4619      	mov	r1, r3
 800459a:	4610      	mov	r0, r2
 800459c:	f7fe fd8f 	bl	80030be <vListInsertEnd>
 80045a0:	e005      	b.n	80045ae <xTaskRemoveFromEventList+0x86>
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	3318      	adds	r3, #24
 80045a6:	4619      	mov	r1, r3
 80045a8:	480e      	ldr	r0, [pc, #56]	; (80045e4 <xTaskRemoveFromEventList+0xbc>)
 80045aa:	f7fe fd88 	bl	80030be <vListInsertEnd>
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b2:	4b0d      	ldr	r3, [pc, #52]	; (80045e8 <xTaskRemoveFromEventList+0xc0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d905      	bls.n	80045c8 <xTaskRemoveFromEventList+0xa0>
 80045bc:	2301      	movs	r3, #1
 80045be:	617b      	str	r3, [r7, #20]
 80045c0:	4b0a      	ldr	r3, [pc, #40]	; (80045ec <xTaskRemoveFromEventList+0xc4>)
 80045c2:	2201      	movs	r2, #1
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	e001      	b.n	80045cc <xTaskRemoveFromEventList+0xa4>
 80045c8:	2300      	movs	r3, #0
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	4618      	mov	r0, r3
 80045d0:	3718      	adds	r7, #24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	20000dc4 	.word	0x20000dc4
 80045dc:	20000da4 	.word	0x20000da4
 80045e0:	200008cc 	.word	0x200008cc
 80045e4:	20000d5c 	.word	0x20000d5c
 80045e8:	200008c8 	.word	0x200008c8
 80045ec:	20000db0 	.word	0x20000db0

080045f0 <vTaskRemoveFromUnorderedEventList>:
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
 80045fa:	4b29      	ldr	r3, [pc, #164]	; (80046a0 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10a      	bne.n	8004618 <vTaskRemoveFromUnorderedEventList+0x28>
 8004602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	613b      	str	r3, [r7, #16]
 8004614:	bf00      	nop
 8004616:	e7fe      	b.n	8004616 <vTaskRemoveFromUnorderedEventList+0x26>
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10a      	bne.n	8004644 <vTaskRemoveFromUnorderedEventList+0x54>
 800462e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004632:	f383 8811 	msr	BASEPRI, r3
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	f3bf 8f4f 	dsb	sy
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	bf00      	nop
 8004642:	e7fe      	b.n	8004642 <vTaskRemoveFromUnorderedEventList+0x52>
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7fe fd97 	bl	8003178 <uxListRemove>
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	3304      	adds	r3, #4
 800464e:	4618      	mov	r0, r3
 8004650:	f7fe fd92 	bl	8003178 <uxListRemove>
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004658:	4b12      	ldr	r3, [pc, #72]	; (80046a4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	429a      	cmp	r2, r3
 800465e:	d903      	bls.n	8004668 <vTaskRemoveFromUnorderedEventList+0x78>
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	4a0f      	ldr	r2, [pc, #60]	; (80046a4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8004666:	6013      	str	r3, [r2, #0]
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800466c:	4613      	mov	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4a0c      	ldr	r2, [pc, #48]	; (80046a8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8004676:	441a      	add	r2, r3
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	3304      	adds	r3, #4
 800467c:	4619      	mov	r1, r3
 800467e:	4610      	mov	r0, r2
 8004680:	f7fe fd1d 	bl	80030be <vListInsertEnd>
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004688:	4b08      	ldr	r3, [pc, #32]	; (80046ac <vTaskRemoveFromUnorderedEventList+0xbc>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	429a      	cmp	r2, r3
 8004690:	d902      	bls.n	8004698 <vTaskRemoveFromUnorderedEventList+0xa8>
 8004692:	4b07      	ldr	r3, [pc, #28]	; (80046b0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8004694:	2201      	movs	r2, #1
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	bf00      	nop
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	20000dc4 	.word	0x20000dc4
 80046a4:	20000da4 	.word	0x20000da4
 80046a8:	200008cc 	.word	0x200008cc
 80046ac:	200008c8 	.word	0x200008c8
 80046b0:	20000db0 	.word	0x20000db0

080046b4 <vTaskInternalSetTimeOutState>:
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	4b06      	ldr	r3, [pc, #24]	; (80046d8 <vTaskInternalSetTimeOutState+0x24>)
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	4b05      	ldr	r3, [pc, #20]	; (80046dc <vTaskInternalSetTimeOutState+0x28>)
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	605a      	str	r2, [r3, #4]
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	20000db4 	.word	0x20000db4
 80046dc:	20000da0 	.word	0x20000da0

080046e0 <xTaskCheckForTimeOut>:
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b088      	sub	sp, #32
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10a      	bne.n	8004706 <xTaskCheckForTimeOut+0x26>
 80046f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f4:	f383 8811 	msr	BASEPRI, r3
 80046f8:	f3bf 8f6f 	isb	sy
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	613b      	str	r3, [r7, #16]
 8004702:	bf00      	nop
 8004704:	e7fe      	b.n	8004704 <xTaskCheckForTimeOut+0x24>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10a      	bne.n	8004722 <xTaskCheckForTimeOut+0x42>
 800470c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004710:	f383 8811 	msr	BASEPRI, r3
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	bf00      	nop
 8004720:	e7fe      	b.n	8004720 <xTaskCheckForTimeOut+0x40>
 8004722:	f000 feb7 	bl	8005494 <vPortEnterCritical>
 8004726:	4b1d      	ldr	r3, [pc, #116]	; (800479c <xTaskCheckForTimeOut+0xbc>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	61bb      	str	r3, [r7, #24]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	617b      	str	r3, [r7, #20]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800473e:	d102      	bne.n	8004746 <xTaskCheckForTimeOut+0x66>
 8004740:	2300      	movs	r3, #0
 8004742:	61fb      	str	r3, [r7, #28]
 8004744:	e023      	b.n	800478e <xTaskCheckForTimeOut+0xae>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	4b15      	ldr	r3, [pc, #84]	; (80047a0 <xTaskCheckForTimeOut+0xc0>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d007      	beq.n	8004762 <xTaskCheckForTimeOut+0x82>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	429a      	cmp	r2, r3
 800475a:	d302      	bcc.n	8004762 <xTaskCheckForTimeOut+0x82>
 800475c:	2301      	movs	r3, #1
 800475e:	61fb      	str	r3, [r7, #28]
 8004760:	e015      	b.n	800478e <xTaskCheckForTimeOut+0xae>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	429a      	cmp	r2, r3
 800476a:	d20b      	bcs.n	8004784 <xTaskCheckForTimeOut+0xa4>
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	1ad2      	subs	r2, r2, r3
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7ff ff9b 	bl	80046b4 <vTaskInternalSetTimeOutState>
 800477e:	2300      	movs	r3, #0
 8004780:	61fb      	str	r3, [r7, #28]
 8004782:	e004      	b.n	800478e <xTaskCheckForTimeOut+0xae>
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	2200      	movs	r2, #0
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	2301      	movs	r3, #1
 800478c:	61fb      	str	r3, [r7, #28]
 800478e:	f000 feb1 	bl	80054f4 <vPortExitCritical>
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	4618      	mov	r0, r3
 8004796:	3720      	adds	r7, #32
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	20000da0 	.word	0x20000da0
 80047a0:	20000db4 	.word	0x20000db4

080047a4 <vTaskMissedYield>:
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	4b03      	ldr	r3, [pc, #12]	; (80047b8 <vTaskMissedYield+0x14>)
 80047aa:	2201      	movs	r2, #1
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	bf00      	nop
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	20000db0 	.word	0x20000db0

080047bc <prvIdleTask>:
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	f000 f852 	bl	800486c <prvCheckTasksWaitingTermination>
 80047c8:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <prvIdleTask+0x28>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d9f9      	bls.n	80047c4 <prvIdleTask+0x8>
 80047d0:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <prvIdleTask+0x2c>)
 80047d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	e7f0      	b.n	80047c4 <prvIdleTask+0x8>
 80047e2:	bf00      	nop
 80047e4:	200008cc 	.word	0x200008cc
 80047e8:	e000ed04 	.word	0xe000ed04

080047ec <prvInitialiseTaskLists>:
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	2300      	movs	r3, #0
 80047f4:	607b      	str	r3, [r7, #4]
 80047f6:	e00c      	b.n	8004812 <prvInitialiseTaskLists+0x26>
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	4613      	mov	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4a12      	ldr	r2, [pc, #72]	; (800484c <prvInitialiseTaskLists+0x60>)
 8004804:	4413      	add	r3, r2
 8004806:	4618      	mov	r0, r3
 8004808:	f7fe fc2c 	bl	8003064 <vListInitialise>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3301      	adds	r3, #1
 8004810:	607b      	str	r3, [r7, #4]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b37      	cmp	r3, #55	; 0x37
 8004816:	d9ef      	bls.n	80047f8 <prvInitialiseTaskLists+0xc>
 8004818:	480d      	ldr	r0, [pc, #52]	; (8004850 <prvInitialiseTaskLists+0x64>)
 800481a:	f7fe fc23 	bl	8003064 <vListInitialise>
 800481e:	480d      	ldr	r0, [pc, #52]	; (8004854 <prvInitialiseTaskLists+0x68>)
 8004820:	f7fe fc20 	bl	8003064 <vListInitialise>
 8004824:	480c      	ldr	r0, [pc, #48]	; (8004858 <prvInitialiseTaskLists+0x6c>)
 8004826:	f7fe fc1d 	bl	8003064 <vListInitialise>
 800482a:	480c      	ldr	r0, [pc, #48]	; (800485c <prvInitialiseTaskLists+0x70>)
 800482c:	f7fe fc1a 	bl	8003064 <vListInitialise>
 8004830:	480b      	ldr	r0, [pc, #44]	; (8004860 <prvInitialiseTaskLists+0x74>)
 8004832:	f7fe fc17 	bl	8003064 <vListInitialise>
 8004836:	4b0b      	ldr	r3, [pc, #44]	; (8004864 <prvInitialiseTaskLists+0x78>)
 8004838:	4a05      	ldr	r2, [pc, #20]	; (8004850 <prvInitialiseTaskLists+0x64>)
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	4b0a      	ldr	r3, [pc, #40]	; (8004868 <prvInitialiseTaskLists+0x7c>)
 800483e:	4a05      	ldr	r2, [pc, #20]	; (8004854 <prvInitialiseTaskLists+0x68>)
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	bf00      	nop
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	200008cc 	.word	0x200008cc
 8004850:	20000d2c 	.word	0x20000d2c
 8004854:	20000d40 	.word	0x20000d40
 8004858:	20000d5c 	.word	0x20000d5c
 800485c:	20000d70 	.word	0x20000d70
 8004860:	20000d88 	.word	0x20000d88
 8004864:	20000d54 	.word	0x20000d54
 8004868:	20000d58 	.word	0x20000d58

0800486c <prvCheckTasksWaitingTermination>:
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	e019      	b.n	80048a8 <prvCheckTasksWaitingTermination+0x3c>
 8004874:	f000 fe0e 	bl	8005494 <vPortEnterCritical>
 8004878:	4b10      	ldr	r3, [pc, #64]	; (80048bc <prvCheckTasksWaitingTermination+0x50>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	607b      	str	r3, [r7, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3304      	adds	r3, #4
 8004884:	4618      	mov	r0, r3
 8004886:	f7fe fc77 	bl	8003178 <uxListRemove>
 800488a:	4b0d      	ldr	r3, [pc, #52]	; (80048c0 <prvCheckTasksWaitingTermination+0x54>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3b01      	subs	r3, #1
 8004890:	4a0b      	ldr	r2, [pc, #44]	; (80048c0 <prvCheckTasksWaitingTermination+0x54>)
 8004892:	6013      	str	r3, [r2, #0]
 8004894:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <prvCheckTasksWaitingTermination+0x58>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	3b01      	subs	r3, #1
 800489a:	4a0a      	ldr	r2, [pc, #40]	; (80048c4 <prvCheckTasksWaitingTermination+0x58>)
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	f000 fe29 	bl	80054f4 <vPortExitCritical>
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f810 	bl	80048c8 <prvDeleteTCB>
 80048a8:	4b06      	ldr	r3, [pc, #24]	; (80048c4 <prvCheckTasksWaitingTermination+0x58>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1e1      	bne.n	8004874 <prvCheckTasksWaitingTermination+0x8>
 80048b0:	bf00      	nop
 80048b2:	bf00      	nop
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	20000d70 	.word	0x20000d70
 80048c0:	20000d9c 	.word	0x20000d9c
 80048c4:	20000d84 	.word	0x20000d84

080048c8 <prvDeleteTCB>:
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3354      	adds	r3, #84	; 0x54
 80048d4:	4618      	mov	r0, r3
 80048d6:	f001 fa19 	bl	8005d0c <_reclaim_reent>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d108      	bne.n	80048f6 <prvDeleteTCB+0x2e>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e8:	4618      	mov	r0, r3
 80048ea:	f000 ffc1 	bl	8005870 <vPortFree>
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 ffbe 	bl	8005870 <vPortFree>
 80048f4:	e018      	b.n	8004928 <prvDeleteTCB+0x60>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d103      	bne.n	8004908 <prvDeleteTCB+0x40>
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 ffb5 	bl	8005870 <vPortFree>
 8004906:	e00f      	b.n	8004928 <prvDeleteTCB+0x60>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800490e:	2b02      	cmp	r3, #2
 8004910:	d00a      	beq.n	8004928 <prvDeleteTCB+0x60>
 8004912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	bf00      	nop
 8004926:	e7fe      	b.n	8004926 <prvDeleteTCB+0x5e>
 8004928:	bf00      	nop
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <prvResetNextTaskUnblockTime>:
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	4b0c      	ldr	r3, [pc, #48]	; (8004968 <prvResetNextTaskUnblockTime+0x38>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d104      	bne.n	800494a <prvResetNextTaskUnblockTime+0x1a>
 8004940:	4b0a      	ldr	r3, [pc, #40]	; (800496c <prvResetNextTaskUnblockTime+0x3c>)
 8004942:	f04f 32ff 	mov.w	r2, #4294967295
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	e008      	b.n	800495c <prvResetNextTaskUnblockTime+0x2c>
 800494a:	4b07      	ldr	r3, [pc, #28]	; (8004968 <prvResetNextTaskUnblockTime+0x38>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	607b      	str	r3, [r7, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	4a04      	ldr	r2, [pc, #16]	; (800496c <prvResetNextTaskUnblockTime+0x3c>)
 800495a:	6013      	str	r3, [r2, #0]
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	20000d54 	.word	0x20000d54
 800496c:	20000dbc 	.word	0x20000dbc

08004970 <xTaskGetSchedulerState>:
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	4b0b      	ldr	r3, [pc, #44]	; (80049a4 <xTaskGetSchedulerState+0x34>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d102      	bne.n	8004984 <xTaskGetSchedulerState+0x14>
 800497e:	2301      	movs	r3, #1
 8004980:	607b      	str	r3, [r7, #4]
 8004982:	e008      	b.n	8004996 <xTaskGetSchedulerState+0x26>
 8004984:	4b08      	ldr	r3, [pc, #32]	; (80049a8 <xTaskGetSchedulerState+0x38>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d102      	bne.n	8004992 <xTaskGetSchedulerState+0x22>
 800498c:	2302      	movs	r3, #2
 800498e:	607b      	str	r3, [r7, #4]
 8004990:	e001      	b.n	8004996 <xTaskGetSchedulerState+0x26>
 8004992:	2300      	movs	r3, #0
 8004994:	607b      	str	r3, [r7, #4]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4618      	mov	r0, r3
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr
 80049a4:	20000da8 	.word	0x20000da8
 80049a8:	20000dc4 	.word	0x20000dc4

080049ac <xTaskPriorityDisinherit>:
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	613b      	str	r3, [r7, #16]
 80049b8:	2300      	movs	r3, #0
 80049ba:	617b      	str	r3, [r7, #20]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d056      	beq.n	8004a70 <xTaskPriorityDisinherit+0xc4>
 80049c2:	4b2e      	ldr	r3, [pc, #184]	; (8004a7c <xTaskPriorityDisinherit+0xd0>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d00a      	beq.n	80049e2 <xTaskPriorityDisinherit+0x36>
 80049cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d0:	f383 8811 	msr	BASEPRI, r3
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	60fb      	str	r3, [r7, #12]
 80049de:	bf00      	nop
 80049e0:	e7fe      	b.n	80049e0 <xTaskPriorityDisinherit+0x34>
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10a      	bne.n	8004a00 <xTaskPriorityDisinherit+0x54>
 80049ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ee:	f383 8811 	msr	BASEPRI, r3
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	60bb      	str	r3, [r7, #8]
 80049fc:	bf00      	nop
 80049fe:	e7fe      	b.n	80049fe <xTaskPriorityDisinherit+0x52>
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a04:	1e5a      	subs	r2, r3, #1
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	651a      	str	r2, [r3, #80]	; 0x50
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d02c      	beq.n	8004a70 <xTaskPriorityDisinherit+0xc4>
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d128      	bne.n	8004a70 <xTaskPriorityDisinherit+0xc4>
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	3304      	adds	r3, #4
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7fe fba8 	bl	8003178 <uxListRemove>
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	619a      	str	r2, [r3, #24]
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a40:	4b0f      	ldr	r3, [pc, #60]	; (8004a80 <xTaskPriorityDisinherit+0xd4>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d903      	bls.n	8004a50 <xTaskPriorityDisinherit+0xa4>
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4c:	4a0c      	ldr	r2, [pc, #48]	; (8004a80 <xTaskPriorityDisinherit+0xd4>)
 8004a4e:	6013      	str	r3, [r2, #0]
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a54:	4613      	mov	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4a09      	ldr	r2, [pc, #36]	; (8004a84 <xTaskPriorityDisinherit+0xd8>)
 8004a5e:	441a      	add	r2, r3
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	3304      	adds	r3, #4
 8004a64:	4619      	mov	r1, r3
 8004a66:	4610      	mov	r0, r2
 8004a68:	f7fe fb29 	bl	80030be <vListInsertEnd>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	617b      	str	r3, [r7, #20]
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	4618      	mov	r0, r3
 8004a74:	3718      	adds	r7, #24
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	200008c8 	.word	0x200008c8
 8004a80:	20000da4 	.word	0x20000da4
 8004a84:	200008cc 	.word	0x200008cc

08004a88 <uxTaskResetEventItemValue>:
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	4b09      	ldr	r3, [pc, #36]	; (8004ab4 <uxTaskResetEventItemValue+0x2c>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	607b      	str	r3, [r7, #4]
 8004a96:	4b07      	ldr	r3, [pc, #28]	; (8004ab4 <uxTaskResetEventItemValue+0x2c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a9c:	4b05      	ldr	r3, [pc, #20]	; (8004ab4 <uxTaskResetEventItemValue+0x2c>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8004aa4:	619a      	str	r2, [r3, #24]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	200008c8 	.word	0x200008c8

08004ab8 <prvAddCurrentTaskToDelayedList>:
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
 8004ac2:	4b21      	ldr	r3, [pc, #132]	; (8004b48 <prvAddCurrentTaskToDelayedList+0x90>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	4b20      	ldr	r3, [pc, #128]	; (8004b4c <prvAddCurrentTaskToDelayedList+0x94>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	3304      	adds	r3, #4
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7fe fb52 	bl	8003178 <uxListRemove>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ada:	d10a      	bne.n	8004af2 <prvAddCurrentTaskToDelayedList+0x3a>
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d007      	beq.n	8004af2 <prvAddCurrentTaskToDelayedList+0x3a>
 8004ae2:	4b1a      	ldr	r3, [pc, #104]	; (8004b4c <prvAddCurrentTaskToDelayedList+0x94>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	3304      	adds	r3, #4
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4819      	ldr	r0, [pc, #100]	; (8004b50 <prvAddCurrentTaskToDelayedList+0x98>)
 8004aec:	f7fe fae7 	bl	80030be <vListInsertEnd>
 8004af0:	e026      	b.n	8004b40 <prvAddCurrentTaskToDelayedList+0x88>
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4413      	add	r3, r2
 8004af8:	60bb      	str	r3, [r7, #8]
 8004afa:	4b14      	ldr	r3, [pc, #80]	; (8004b4c <prvAddCurrentTaskToDelayedList+0x94>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	605a      	str	r2, [r3, #4]
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d209      	bcs.n	8004b1e <prvAddCurrentTaskToDelayedList+0x66>
 8004b0a:	4b12      	ldr	r3, [pc, #72]	; (8004b54 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	4b0f      	ldr	r3, [pc, #60]	; (8004b4c <prvAddCurrentTaskToDelayedList+0x94>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3304      	adds	r3, #4
 8004b14:	4619      	mov	r1, r3
 8004b16:	4610      	mov	r0, r2
 8004b18:	f7fe faf5 	bl	8003106 <vListInsert>
 8004b1c:	e010      	b.n	8004b40 <prvAddCurrentTaskToDelayedList+0x88>
 8004b1e:	4b0e      	ldr	r3, [pc, #56]	; (8004b58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	4b0a      	ldr	r3, [pc, #40]	; (8004b4c <prvAddCurrentTaskToDelayedList+0x94>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	3304      	adds	r3, #4
 8004b28:	4619      	mov	r1, r3
 8004b2a:	4610      	mov	r0, r2
 8004b2c:	f7fe faeb 	bl	8003106 <vListInsert>
 8004b30:	4b0a      	ldr	r3, [pc, #40]	; (8004b5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d202      	bcs.n	8004b40 <prvAddCurrentTaskToDelayedList+0x88>
 8004b3a:	4a08      	ldr	r2, [pc, #32]	; (8004b5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	bf00      	nop
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	20000da0 	.word	0x20000da0
 8004b4c:	200008c8 	.word	0x200008c8
 8004b50:	20000d88 	.word	0x20000d88
 8004b54:	20000d58 	.word	0x20000d58
 8004b58:	20000d54 	.word	0x20000d54
 8004b5c:	20000dbc 	.word	0x20000dbc

08004b60 <xTimerCreateTimerTask>:
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b08a      	sub	sp, #40	; 0x28
 8004b64:	af04      	add	r7, sp, #16
 8004b66:	2300      	movs	r3, #0
 8004b68:	617b      	str	r3, [r7, #20]
 8004b6a:	f000 fb07 	bl	800517c <prvCheckForValidListAndQueue>
 8004b6e:	4b1c      	ldr	r3, [pc, #112]	; (8004be0 <xTimerCreateTimerTask+0x80>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d021      	beq.n	8004bba <xTimerCreateTimerTask+0x5a>
 8004b76:	2300      	movs	r3, #0
 8004b78:	60fb      	str	r3, [r7, #12]
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60bb      	str	r3, [r7, #8]
 8004b7e:	1d3a      	adds	r2, r7, #4
 8004b80:	f107 0108 	add.w	r1, r7, #8
 8004b84:	f107 030c 	add.w	r3, r7, #12
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7fd ffe5 	bl	8002b58 <vApplicationGetTimerTaskMemory>
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	9202      	str	r2, [sp, #8]
 8004b96:	9301      	str	r3, [sp, #4]
 8004b98:	2302      	movs	r3, #2
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	460a      	mov	r2, r1
 8004ba0:	4910      	ldr	r1, [pc, #64]	; (8004be4 <xTimerCreateTimerTask+0x84>)
 8004ba2:	4811      	ldr	r0, [pc, #68]	; (8004be8 <xTimerCreateTimerTask+0x88>)
 8004ba4:	f7fe fffe 	bl	8003ba4 <xTaskCreateStatic>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	4a10      	ldr	r2, [pc, #64]	; (8004bec <xTimerCreateTimerTask+0x8c>)
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	4b0f      	ldr	r3, [pc, #60]	; (8004bec <xTimerCreateTimerTask+0x8c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <xTimerCreateTimerTask+0x5a>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	617b      	str	r3, [r7, #20]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10a      	bne.n	8004bd6 <xTimerCreateTimerTask+0x76>
 8004bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	613b      	str	r3, [r7, #16]
 8004bd2:	bf00      	nop
 8004bd4:	e7fe      	b.n	8004bd4 <xTimerCreateTimerTask+0x74>
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	20000df8 	.word	0x20000df8
 8004be4:	08006a70 	.word	0x08006a70
 8004be8:	08004d25 	.word	0x08004d25
 8004bec:	20000dfc 	.word	0x20000dfc

08004bf0 <xTimerGenericCommand>:
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08a      	sub	sp, #40	; 0x28
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
 8004bfc:	603b      	str	r3, [r7, #0]
 8004bfe:	2300      	movs	r3, #0
 8004c00:	627b      	str	r3, [r7, #36]	; 0x24
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10a      	bne.n	8004c1e <xTimerGenericCommand+0x2e>
 8004c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0c:	f383 8811 	msr	BASEPRI, r3
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	623b      	str	r3, [r7, #32]
 8004c1a:	bf00      	nop
 8004c1c:	e7fe      	b.n	8004c1c <xTimerGenericCommand+0x2c>
 8004c1e:	4b1a      	ldr	r3, [pc, #104]	; (8004c88 <xTimerGenericCommand+0x98>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d02a      	beq.n	8004c7c <xTimerGenericCommand+0x8c>
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	613b      	str	r3, [r7, #16]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	617b      	str	r3, [r7, #20]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	61bb      	str	r3, [r7, #24]
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2b05      	cmp	r3, #5
 8004c36:	dc18      	bgt.n	8004c6a <xTimerGenericCommand+0x7a>
 8004c38:	f7ff fe9a 	bl	8004970 <xTaskGetSchedulerState>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d109      	bne.n	8004c56 <xTimerGenericCommand+0x66>
 8004c42:	4b11      	ldr	r3, [pc, #68]	; (8004c88 <xTimerGenericCommand+0x98>)
 8004c44:	6818      	ldr	r0, [r3, #0]
 8004c46:	f107 0110 	add.w	r1, r7, #16
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c4e:	f7fe fbc1 	bl	80033d4 <xQueueGenericSend>
 8004c52:	6278      	str	r0, [r7, #36]	; 0x24
 8004c54:	e012      	b.n	8004c7c <xTimerGenericCommand+0x8c>
 8004c56:	4b0c      	ldr	r3, [pc, #48]	; (8004c88 <xTimerGenericCommand+0x98>)
 8004c58:	6818      	ldr	r0, [r3, #0]
 8004c5a:	f107 0110 	add.w	r1, r7, #16
 8004c5e:	2300      	movs	r3, #0
 8004c60:	2200      	movs	r2, #0
 8004c62:	f7fe fbb7 	bl	80033d4 <xQueueGenericSend>
 8004c66:	6278      	str	r0, [r7, #36]	; 0x24
 8004c68:	e008      	b.n	8004c7c <xTimerGenericCommand+0x8c>
 8004c6a:	4b07      	ldr	r3, [pc, #28]	; (8004c88 <xTimerGenericCommand+0x98>)
 8004c6c:	6818      	ldr	r0, [r3, #0]
 8004c6e:	f107 0110 	add.w	r1, r7, #16
 8004c72:	2300      	movs	r3, #0
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	f7fe fcab 	bl	80035d0 <xQueueGenericSendFromISR>
 8004c7a:	6278      	str	r0, [r7, #36]	; 0x24
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3728      	adds	r7, #40	; 0x28
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	20000df8 	.word	0x20000df8

08004c8c <prvProcessExpiredTimer>:
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b088      	sub	sp, #32
 8004c90:	af02      	add	r7, sp, #8
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
 8004c96:	4b22      	ldr	r3, [pc, #136]	; (8004d20 <prvProcessExpiredTimer+0x94>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	617b      	str	r3, [r7, #20]
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	3304      	adds	r3, #4
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7fe fa67 	bl	8003178 <uxListRemove>
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cb0:	f003 0304 	and.w	r3, r3, #4
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d022      	beq.n	8004cfe <prvProcessExpiredTimer+0x72>
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	699a      	ldr	r2, [r3, #24]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	18d1      	adds	r1, r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	6978      	ldr	r0, [r7, #20]
 8004cc6:	f000 f8d1 	bl	8004e6c <prvInsertTimerInActiveList>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d01f      	beq.n	8004d10 <prvProcessExpiredTimer+0x84>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	9300      	str	r3, [sp, #0]
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	2100      	movs	r1, #0
 8004cda:	6978      	ldr	r0, [r7, #20]
 8004cdc:	f7ff ff88 	bl	8004bf0 <xTimerGenericCommand>
 8004ce0:	6138      	str	r0, [r7, #16]
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d113      	bne.n	8004d10 <prvProcessExpiredTimer+0x84>
 8004ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	bf00      	nop
 8004cfc:	e7fe      	b.n	8004cfc <prvProcessExpiredTimer+0x70>
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d04:	f023 0301 	bic.w	r3, r3, #1
 8004d08:	b2da      	uxtb	r2, r3
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	6978      	ldr	r0, [r7, #20]
 8004d16:	4798      	blx	r3
 8004d18:	bf00      	nop
 8004d1a:	3718      	adds	r7, #24
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	20000df0 	.word	0x20000df0

08004d24 <prvTimerTask>:
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	f107 0308 	add.w	r3, r7, #8
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 f857 	bl	8004de4 <prvGetNextExpireTime>
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 f803 	bl	8004d48 <prvProcessTimerOrBlockTask>
 8004d42:	f000 f8d5 	bl	8004ef0 <prvProcessReceivedCommands>
 8004d46:	e7f1      	b.n	8004d2c <prvTimerTask+0x8>

08004d48 <prvProcessTimerOrBlockTask>:
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
 8004d52:	f7ff f983 	bl	800405c <vTaskSuspendAll>
 8004d56:	f107 0308 	add.w	r3, r7, #8
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 f866 	bl	8004e2c <prvSampleTimeNow>
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d130      	bne.n	8004dca <prvProcessTimerOrBlockTask+0x82>
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10a      	bne.n	8004d84 <prvProcessTimerOrBlockTask+0x3c>
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d806      	bhi.n	8004d84 <prvProcessTimerOrBlockTask+0x3c>
 8004d76:	f7ff f97f 	bl	8004078 <xTaskResumeAll>
 8004d7a:	68f9      	ldr	r1, [r7, #12]
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f7ff ff85 	bl	8004c8c <prvProcessExpiredTimer>
 8004d82:	e024      	b.n	8004dce <prvProcessTimerOrBlockTask+0x86>
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d008      	beq.n	8004d9c <prvProcessTimerOrBlockTask+0x54>
 8004d8a:	4b13      	ldr	r3, [pc, #76]	; (8004dd8 <prvProcessTimerOrBlockTask+0x90>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <prvProcessTimerOrBlockTask+0x50>
 8004d94:	2301      	movs	r3, #1
 8004d96:	e000      	b.n	8004d9a <prvProcessTimerOrBlockTask+0x52>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	603b      	str	r3, [r7, #0]
 8004d9c:	4b0f      	ldr	r3, [pc, #60]	; (8004ddc <prvProcessTimerOrBlockTask+0x94>)
 8004d9e:	6818      	ldr	r0, [r3, #0]
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	4619      	mov	r1, r3
 8004daa:	f7fe fec7 	bl	8003b3c <vQueueWaitForMessageRestricted>
 8004dae:	f7ff f963 	bl	8004078 <xTaskResumeAll>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10a      	bne.n	8004dce <prvProcessTimerOrBlockTask+0x86>
 8004db8:	4b09      	ldr	r3, [pc, #36]	; (8004de0 <prvProcessTimerOrBlockTask+0x98>)
 8004dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	f3bf 8f4f 	dsb	sy
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	e001      	b.n	8004dce <prvProcessTimerOrBlockTask+0x86>
 8004dca:	f7ff f955 	bl	8004078 <xTaskResumeAll>
 8004dce:	bf00      	nop
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20000df4 	.word	0x20000df4
 8004ddc:	20000df8 	.word	0x20000df8
 8004de0:	e000ed04 	.word	0xe000ed04

08004de4 <prvGetNextExpireTime>:
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	4b0e      	ldr	r3, [pc, #56]	; (8004e28 <prvGetNextExpireTime+0x44>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <prvGetNextExpireTime+0x16>
 8004df6:	2201      	movs	r2, #1
 8004df8:	e000      	b.n	8004dfc <prvGetNextExpireTime+0x18>
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d105      	bne.n	8004e14 <prvGetNextExpireTime+0x30>
 8004e08:	4b07      	ldr	r3, [pc, #28]	; (8004e28 <prvGetNextExpireTime+0x44>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	60fb      	str	r3, [r7, #12]
 8004e12:	e001      	b.n	8004e18 <prvGetNextExpireTime+0x34>
 8004e14:	2300      	movs	r3, #0
 8004e16:	60fb      	str	r3, [r7, #12]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	20000df0 	.word	0x20000df0

08004e2c <prvSampleTimeNow>:
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	f7ff f9be 	bl	80041b4 <xTaskGetTickCount>
 8004e38:	60f8      	str	r0, [r7, #12]
 8004e3a:	4b0b      	ldr	r3, [pc, #44]	; (8004e68 <prvSampleTimeNow+0x3c>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d205      	bcs.n	8004e50 <prvSampleTimeNow+0x24>
 8004e44:	f000 f936 	bl	80050b4 <prvSwitchTimerLists>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	e002      	b.n	8004e56 <prvSampleTimeNow+0x2a>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	601a      	str	r2, [r3, #0]
 8004e56:	4a04      	ldr	r2, [pc, #16]	; (8004e68 <prvSampleTimeNow+0x3c>)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6013      	str	r3, [r2, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	20000e00 	.word	0x20000e00

08004e6c <prvInsertTimerInActiveList>:
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
 8004e78:	603b      	str	r3, [r7, #0]
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	617b      	str	r3, [r7, #20]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	605a      	str	r2, [r3, #4]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	611a      	str	r2, [r3, #16]
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d812      	bhi.n	8004eb8 <prvInsertTimerInActiveList+0x4c>
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	1ad2      	subs	r2, r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d302      	bcc.n	8004ea6 <prvInsertTimerInActiveList+0x3a>
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	617b      	str	r3, [r7, #20]
 8004ea4:	e01b      	b.n	8004ede <prvInsertTimerInActiveList+0x72>
 8004ea6:	4b10      	ldr	r3, [pc, #64]	; (8004ee8 <prvInsertTimerInActiveList+0x7c>)
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	3304      	adds	r3, #4
 8004eae:	4619      	mov	r1, r3
 8004eb0:	4610      	mov	r0, r2
 8004eb2:	f7fe f928 	bl	8003106 <vListInsert>
 8004eb6:	e012      	b.n	8004ede <prvInsertTimerInActiveList+0x72>
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d206      	bcs.n	8004ece <prvInsertTimerInActiveList+0x62>
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d302      	bcc.n	8004ece <prvInsertTimerInActiveList+0x62>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	617b      	str	r3, [r7, #20]
 8004ecc:	e007      	b.n	8004ede <prvInsertTimerInActiveList+0x72>
 8004ece:	4b07      	ldr	r3, [pc, #28]	; (8004eec <prvInsertTimerInActiveList+0x80>)
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	4610      	mov	r0, r2
 8004eda:	f7fe f914 	bl	8003106 <vListInsert>
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	20000df4 	.word	0x20000df4
 8004eec:	20000df0 	.word	0x20000df0

08004ef0 <prvProcessReceivedCommands>:
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08e      	sub	sp, #56	; 0x38
 8004ef4:	af02      	add	r7, sp, #8
 8004ef6:	e0ca      	b.n	800508e <prvProcessReceivedCommands+0x19e>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	da18      	bge.n	8004f30 <prvProcessReceivedCommands+0x40>
 8004efe:	1d3b      	adds	r3, r7, #4
 8004f00:	3304      	adds	r3, #4
 8004f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10a      	bne.n	8004f20 <prvProcessReceivedCommands+0x30>
 8004f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	61fb      	str	r3, [r7, #28]
 8004f1c:	bf00      	nop
 8004f1e:	e7fe      	b.n	8004f1e <prvProcessReceivedCommands+0x2e>
 8004f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f26:	6850      	ldr	r0, [r2, #4]
 8004f28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f2a:	6892      	ldr	r2, [r2, #8]
 8004f2c:	4611      	mov	r1, r2
 8004f2e:	4798      	blx	r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f2c0 80ab 	blt.w	800508e <prvProcessReceivedCommands+0x19e>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d004      	beq.n	8004f4e <prvProcessReceivedCommands+0x5e>
 8004f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f46:	3304      	adds	r3, #4
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7fe f915 	bl	8003178 <uxListRemove>
 8004f4e:	463b      	mov	r3, r7
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7ff ff6b 	bl	8004e2c <prvSampleTimeNow>
 8004f56:	6278      	str	r0, [r7, #36]	; 0x24
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b09      	cmp	r3, #9
 8004f5c:	f200 8096 	bhi.w	800508c <prvProcessReceivedCommands+0x19c>
 8004f60:	a201      	add	r2, pc, #4	; (adr r2, 8004f68 <prvProcessReceivedCommands+0x78>)
 8004f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f66:	bf00      	nop
 8004f68:	08004f91 	.word	0x08004f91
 8004f6c:	08004f91 	.word	0x08004f91
 8004f70:	08004f91 	.word	0x08004f91
 8004f74:	08005005 	.word	0x08005005
 8004f78:	08005019 	.word	0x08005019
 8004f7c:	08005063 	.word	0x08005063
 8004f80:	08004f91 	.word	0x08004f91
 8004f84:	08004f91 	.word	0x08004f91
 8004f88:	08005005 	.word	0x08005005
 8004f8c:	08005019 	.word	0x08005019
 8004f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f96:	f043 0301 	orr.w	r3, r3, #1
 8004f9a:	b2da      	uxtb	r2, r3
 8004f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	18d1      	adds	r1, r2, r3
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fb0:	f7ff ff5c 	bl	8004e6c <prvInsertTimerInActiveList>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d069      	beq.n	800508e <prvProcessReceivedCommands+0x19e>
 8004fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fc0:	4798      	blx	r3
 8004fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fc8:	f003 0304 	and.w	r3, r3, #4
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d05e      	beq.n	800508e <prvProcessReceivedCommands+0x19e>
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	441a      	add	r2, r3
 8004fd8:	2300      	movs	r3, #0
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	2300      	movs	r3, #0
 8004fde:	2100      	movs	r1, #0
 8004fe0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fe2:	f7ff fe05 	bl	8004bf0 <xTimerGenericCommand>
 8004fe6:	6238      	str	r0, [r7, #32]
 8004fe8:	6a3b      	ldr	r3, [r7, #32]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d14f      	bne.n	800508e <prvProcessReceivedCommands+0x19e>
 8004fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	61bb      	str	r3, [r7, #24]
 8005000:	bf00      	nop
 8005002:	e7fe      	b.n	8005002 <prvProcessReceivedCommands+0x112>
 8005004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005006:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800500a:	f023 0301 	bic.w	r3, r3, #1
 800500e:	b2da      	uxtb	r2, r3
 8005010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005012:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005016:	e03a      	b.n	800508e <prvProcessReceivedCommands+0x19e>
 8005018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800501e:	f043 0301 	orr.w	r3, r3, #1
 8005022:	b2da      	uxtb	r2, r3
 8005024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005026:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502e:	619a      	str	r2, [r3, #24]
 8005030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10a      	bne.n	800504e <prvProcessReceivedCommands+0x15e>
 8005038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503c:	f383 8811 	msr	BASEPRI, r3
 8005040:	f3bf 8f6f 	isb	sy
 8005044:	f3bf 8f4f 	dsb	sy
 8005048:	617b      	str	r3, [r7, #20]
 800504a:	bf00      	nop
 800504c:	e7fe      	b.n	800504c <prvProcessReceivedCommands+0x15c>
 800504e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005050:	699a      	ldr	r2, [r3, #24]
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005054:	18d1      	adds	r1, r2, r3
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800505a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800505c:	f7ff ff06 	bl	8004e6c <prvInsertTimerInActiveList>
 8005060:	e015      	b.n	800508e <prvProcessReceivedCommands+0x19e>
 8005062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005064:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d103      	bne.n	8005078 <prvProcessReceivedCommands+0x188>
 8005070:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005072:	f000 fbfd 	bl	8005870 <vPortFree>
 8005076:	e00a      	b.n	800508e <prvProcessReceivedCommands+0x19e>
 8005078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800507e:	f023 0301 	bic.w	r3, r3, #1
 8005082:	b2da      	uxtb	r2, r3
 8005084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005086:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800508a:	e000      	b.n	800508e <prvProcessReceivedCommands+0x19e>
 800508c:	bf00      	nop
 800508e:	4b08      	ldr	r3, [pc, #32]	; (80050b0 <prvProcessReceivedCommands+0x1c0>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	1d39      	adds	r1, r7, #4
 8005094:	2200      	movs	r2, #0
 8005096:	4618      	mov	r0, r3
 8005098:	f7fe fb36 	bl	8003708 <xQueueReceive>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f47f af2a 	bne.w	8004ef8 <prvProcessReceivedCommands+0x8>
 80050a4:	bf00      	nop
 80050a6:	bf00      	nop
 80050a8:	3730      	adds	r7, #48	; 0x30
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	20000df8 	.word	0x20000df8

080050b4 <prvSwitchTimerLists>:
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b088      	sub	sp, #32
 80050b8:	af02      	add	r7, sp, #8
 80050ba:	e048      	b.n	800514e <prvSwitchTimerLists+0x9a>
 80050bc:	4b2d      	ldr	r3, [pc, #180]	; (8005174 <prvSwitchTimerLists+0xc0>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	613b      	str	r3, [r7, #16]
 80050c6:	4b2b      	ldr	r3, [pc, #172]	; (8005174 <prvSwitchTimerLists+0xc0>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	3304      	adds	r3, #4
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7fe f84f 	bl	8003178 <uxListRemove>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	4798      	blx	r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d02e      	beq.n	800514e <prvSwitchTimerLists+0x9a>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	4413      	add	r3, r2
 80050f8:	60bb      	str	r3, [r7, #8]
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d90e      	bls.n	8005120 <prvSwitchTimerLists+0x6c>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	605a      	str	r2, [r3, #4]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	611a      	str	r2, [r3, #16]
 800510e:	4b19      	ldr	r3, [pc, #100]	; (8005174 <prvSwitchTimerLists+0xc0>)
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	3304      	adds	r3, #4
 8005116:	4619      	mov	r1, r3
 8005118:	4610      	mov	r0, r2
 800511a:	f7fd fff4 	bl	8003106 <vListInsert>
 800511e:	e016      	b.n	800514e <prvSwitchTimerLists+0x9a>
 8005120:	2300      	movs	r3, #0
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	2300      	movs	r3, #0
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	2100      	movs	r1, #0
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f7ff fd60 	bl	8004bf0 <xTimerGenericCommand>
 8005130:	6078      	str	r0, [r7, #4]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10a      	bne.n	800514e <prvSwitchTimerLists+0x9a>
 8005138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513c:	f383 8811 	msr	BASEPRI, r3
 8005140:	f3bf 8f6f 	isb	sy
 8005144:	f3bf 8f4f 	dsb	sy
 8005148:	603b      	str	r3, [r7, #0]
 800514a:	bf00      	nop
 800514c:	e7fe      	b.n	800514c <prvSwitchTimerLists+0x98>
 800514e:	4b09      	ldr	r3, [pc, #36]	; (8005174 <prvSwitchTimerLists+0xc0>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1b1      	bne.n	80050bc <prvSwitchTimerLists+0x8>
 8005158:	4b06      	ldr	r3, [pc, #24]	; (8005174 <prvSwitchTimerLists+0xc0>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	617b      	str	r3, [r7, #20]
 800515e:	4b06      	ldr	r3, [pc, #24]	; (8005178 <prvSwitchTimerLists+0xc4>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a04      	ldr	r2, [pc, #16]	; (8005174 <prvSwitchTimerLists+0xc0>)
 8005164:	6013      	str	r3, [r2, #0]
 8005166:	4a04      	ldr	r2, [pc, #16]	; (8005178 <prvSwitchTimerLists+0xc4>)
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	6013      	str	r3, [r2, #0]
 800516c:	bf00      	nop
 800516e:	3718      	adds	r7, #24
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	20000df0 	.word	0x20000df0
 8005178:	20000df4 	.word	0x20000df4

0800517c <prvCheckForValidListAndQueue>:
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af02      	add	r7, sp, #8
 8005182:	f000 f987 	bl	8005494 <vPortEnterCritical>
 8005186:	4b15      	ldr	r3, [pc, #84]	; (80051dc <prvCheckForValidListAndQueue+0x60>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d120      	bne.n	80051d0 <prvCheckForValidListAndQueue+0x54>
 800518e:	4814      	ldr	r0, [pc, #80]	; (80051e0 <prvCheckForValidListAndQueue+0x64>)
 8005190:	f7fd ff68 	bl	8003064 <vListInitialise>
 8005194:	4813      	ldr	r0, [pc, #76]	; (80051e4 <prvCheckForValidListAndQueue+0x68>)
 8005196:	f7fd ff65 	bl	8003064 <vListInitialise>
 800519a:	4b13      	ldr	r3, [pc, #76]	; (80051e8 <prvCheckForValidListAndQueue+0x6c>)
 800519c:	4a10      	ldr	r2, [pc, #64]	; (80051e0 <prvCheckForValidListAndQueue+0x64>)
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	4b12      	ldr	r3, [pc, #72]	; (80051ec <prvCheckForValidListAndQueue+0x70>)
 80051a2:	4a10      	ldr	r2, [pc, #64]	; (80051e4 <prvCheckForValidListAndQueue+0x68>)
 80051a4:	601a      	str	r2, [r3, #0]
 80051a6:	2300      	movs	r3, #0
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	4b11      	ldr	r3, [pc, #68]	; (80051f0 <prvCheckForValidListAndQueue+0x74>)
 80051ac:	4a11      	ldr	r2, [pc, #68]	; (80051f4 <prvCheckForValidListAndQueue+0x78>)
 80051ae:	2110      	movs	r1, #16
 80051b0:	200a      	movs	r0, #10
 80051b2:	f7fe f873 	bl	800329c <xQueueGenericCreateStatic>
 80051b6:	4603      	mov	r3, r0
 80051b8:	4a08      	ldr	r2, [pc, #32]	; (80051dc <prvCheckForValidListAndQueue+0x60>)
 80051ba:	6013      	str	r3, [r2, #0]
 80051bc:	4b07      	ldr	r3, [pc, #28]	; (80051dc <prvCheckForValidListAndQueue+0x60>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d005      	beq.n	80051d0 <prvCheckForValidListAndQueue+0x54>
 80051c4:	4b05      	ldr	r3, [pc, #20]	; (80051dc <prvCheckForValidListAndQueue+0x60>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	490b      	ldr	r1, [pc, #44]	; (80051f8 <prvCheckForValidListAndQueue+0x7c>)
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7fe fc8c 	bl	8003ae8 <vQueueAddToRegistry>
 80051d0:	f000 f990 	bl	80054f4 <vPortExitCritical>
 80051d4:	bf00      	nop
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	20000df8 	.word	0x20000df8
 80051e0:	20000dc8 	.word	0x20000dc8
 80051e4:	20000ddc 	.word	0x20000ddc
 80051e8:	20000df0 	.word	0x20000df0
 80051ec:	20000df4 	.word	0x20000df4
 80051f0:	20000ea4 	.word	0x20000ea4
 80051f4:	20000e04 	.word	0x20000e04
 80051f8:	08006a78 	.word	0x08006a78

080051fc <xTimerPendFunctionCallFromISR>:
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b08a      	sub	sp, #40	; 0x28
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
 8005208:	603b      	str	r3, [r7, #0]
 800520a:	f06f 0301 	mvn.w	r3, #1
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	61bb      	str	r3, [r7, #24]
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	61fb      	str	r3, [r7, #28]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	623b      	str	r3, [r7, #32]
 800521c:	4b06      	ldr	r3, [pc, #24]	; (8005238 <xTimerPendFunctionCallFromISR+0x3c>)
 800521e:	6818      	ldr	r0, [r3, #0]
 8005220:	f107 0114 	add.w	r1, r7, #20
 8005224:	2300      	movs	r3, #0
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	f7fe f9d2 	bl	80035d0 <xQueueGenericSendFromISR>
 800522c:	6278      	str	r0, [r7, #36]	; 0x24
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005230:	4618      	mov	r0, r3
 8005232:	3728      	adds	r7, #40	; 0x28
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	20000df8 	.word	0x20000df8

0800523c <pxPortInitialiseStack>:
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	3b04      	subs	r3, #4
 800524c:	60fb      	str	r3, [r7, #12]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005254:	601a      	str	r2, [r3, #0]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	3b04      	subs	r3, #4
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	f023 0201 	bic.w	r2, r3, #1
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	3b04      	subs	r3, #4
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	4a0c      	ldr	r2, [pc, #48]	; (80052a0 <pxPortInitialiseStack+0x64>)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	601a      	str	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	3b14      	subs	r3, #20
 8005276:	60fb      	str	r3, [r7, #12]
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	3b04      	subs	r3, #4
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f06f 0202 	mvn.w	r2, #2
 800528a:	601a      	str	r2, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	3b20      	subs	r3, #32
 8005290:	60fb      	str	r3, [r7, #12]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	4618      	mov	r0, r3
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	080052a5 	.word	0x080052a5

080052a4 <prvTaskExitError>:
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	2300      	movs	r3, #0
 80052ac:	607b      	str	r3, [r7, #4]
 80052ae:	4b12      	ldr	r3, [pc, #72]	; (80052f8 <prvTaskExitError+0x54>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b6:	d00a      	beq.n	80052ce <prvTaskExitError+0x2a>
 80052b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052bc:	f383 8811 	msr	BASEPRI, r3
 80052c0:	f3bf 8f6f 	isb	sy
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	60fb      	str	r3, [r7, #12]
 80052ca:	bf00      	nop
 80052cc:	e7fe      	b.n	80052cc <prvTaskExitError+0x28>
 80052ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	60bb      	str	r3, [r7, #8]
 80052e0:	bf00      	nop
 80052e2:	bf00      	nop
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0fc      	beq.n	80052e4 <prvTaskExitError+0x40>
 80052ea:	bf00      	nop
 80052ec:	bf00      	nop
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	2000000c 	.word	0x2000000c
 80052fc:	00000000 	.word	0x00000000

08005300 <SVC_Handler>:
 8005300:	4b07      	ldr	r3, [pc, #28]	; (8005320 <pxCurrentTCBConst2>)
 8005302:	6819      	ldr	r1, [r3, #0]
 8005304:	6808      	ldr	r0, [r1, #0]
 8005306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800530a:	f380 8809 	msr	PSP, r0
 800530e:	f3bf 8f6f 	isb	sy
 8005312:	f04f 0000 	mov.w	r0, #0
 8005316:	f380 8811 	msr	BASEPRI, r0
 800531a:	4770      	bx	lr
 800531c:	f3af 8000 	nop.w

08005320 <pxCurrentTCBConst2>:
 8005320:	200008c8 	.word	0x200008c8
 8005324:	bf00      	nop
 8005326:	bf00      	nop

08005328 <prvPortStartFirstTask>:
 8005328:	4808      	ldr	r0, [pc, #32]	; (800534c <prvPortStartFirstTask+0x24>)
 800532a:	6800      	ldr	r0, [r0, #0]
 800532c:	6800      	ldr	r0, [r0, #0]
 800532e:	f380 8808 	msr	MSP, r0
 8005332:	f04f 0000 	mov.w	r0, #0
 8005336:	f380 8814 	msr	CONTROL, r0
 800533a:	b662      	cpsie	i
 800533c:	b661      	cpsie	f
 800533e:	f3bf 8f4f 	dsb	sy
 8005342:	f3bf 8f6f 	isb	sy
 8005346:	df00      	svc	0
 8005348:	bf00      	nop
 800534a:	bf00      	nop
 800534c:	e000ed08 	.word	0xe000ed08

08005350 <xPortStartScheduler>:
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	4b46      	ldr	r3, [pc, #280]	; (8005470 <xPortStartScheduler+0x120>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a46      	ldr	r2, [pc, #280]	; (8005474 <xPortStartScheduler+0x124>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d10a      	bne.n	8005376 <xPortStartScheduler+0x26>
 8005360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005364:	f383 8811 	msr	BASEPRI, r3
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	613b      	str	r3, [r7, #16]
 8005372:	bf00      	nop
 8005374:	e7fe      	b.n	8005374 <xPortStartScheduler+0x24>
 8005376:	4b3e      	ldr	r3, [pc, #248]	; (8005470 <xPortStartScheduler+0x120>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a3f      	ldr	r2, [pc, #252]	; (8005478 <xPortStartScheduler+0x128>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d10a      	bne.n	8005396 <xPortStartScheduler+0x46>
 8005380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	60fb      	str	r3, [r7, #12]
 8005392:	bf00      	nop
 8005394:	e7fe      	b.n	8005394 <xPortStartScheduler+0x44>
 8005396:	4b39      	ldr	r3, [pc, #228]	; (800547c <xPortStartScheduler+0x12c>)
 8005398:	617b      	str	r3, [r7, #20]
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	607b      	str	r3, [r7, #4]
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	22ff      	movs	r2, #255	; 0xff
 80053a6:	701a      	strb	r2, [r3, #0]
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	70fb      	strb	r3, [r7, #3]
 80053b0:	78fb      	ldrb	r3, [r7, #3]
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	4b31      	ldr	r3, [pc, #196]	; (8005480 <xPortStartScheduler+0x130>)
 80053bc:	701a      	strb	r2, [r3, #0]
 80053be:	4b31      	ldr	r3, [pc, #196]	; (8005484 <xPortStartScheduler+0x134>)
 80053c0:	2207      	movs	r2, #7
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	e009      	b.n	80053da <xPortStartScheduler+0x8a>
 80053c6:	4b2f      	ldr	r3, [pc, #188]	; (8005484 <xPortStartScheduler+0x134>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	4a2d      	ldr	r2, [pc, #180]	; (8005484 <xPortStartScheduler+0x134>)
 80053ce:	6013      	str	r3, [r2, #0]
 80053d0:	78fb      	ldrb	r3, [r7, #3]
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	005b      	lsls	r3, r3, #1
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	70fb      	strb	r3, [r7, #3]
 80053da:	78fb      	ldrb	r3, [r7, #3]
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e2:	2b80      	cmp	r3, #128	; 0x80
 80053e4:	d0ef      	beq.n	80053c6 <xPortStartScheduler+0x76>
 80053e6:	4b27      	ldr	r3, [pc, #156]	; (8005484 <xPortStartScheduler+0x134>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f1c3 0307 	rsb	r3, r3, #7
 80053ee:	2b04      	cmp	r3, #4
 80053f0:	d00a      	beq.n	8005408 <xPortStartScheduler+0xb8>
 80053f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	60bb      	str	r3, [r7, #8]
 8005404:	bf00      	nop
 8005406:	e7fe      	b.n	8005406 <xPortStartScheduler+0xb6>
 8005408:	4b1e      	ldr	r3, [pc, #120]	; (8005484 <xPortStartScheduler+0x134>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	021b      	lsls	r3, r3, #8
 800540e:	4a1d      	ldr	r2, [pc, #116]	; (8005484 <xPortStartScheduler+0x134>)
 8005410:	6013      	str	r3, [r2, #0]
 8005412:	4b1c      	ldr	r3, [pc, #112]	; (8005484 <xPortStartScheduler+0x134>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800541a:	4a1a      	ldr	r2, [pc, #104]	; (8005484 <xPortStartScheduler+0x134>)
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	b2da      	uxtb	r2, r3
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	701a      	strb	r2, [r3, #0]
 8005426:	4b18      	ldr	r3, [pc, #96]	; (8005488 <xPortStartScheduler+0x138>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a17      	ldr	r2, [pc, #92]	; (8005488 <xPortStartScheduler+0x138>)
 800542c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005430:	6013      	str	r3, [r2, #0]
 8005432:	4b15      	ldr	r3, [pc, #84]	; (8005488 <xPortStartScheduler+0x138>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a14      	ldr	r2, [pc, #80]	; (8005488 <xPortStartScheduler+0x138>)
 8005438:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	f000 f8dd 	bl	80055fc <vPortSetupTimerInterrupt>
 8005442:	4b12      	ldr	r3, [pc, #72]	; (800548c <xPortStartScheduler+0x13c>)
 8005444:	2200      	movs	r2, #0
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	f000 f8fc 	bl	8005644 <vPortEnableVFP>
 800544c:	4b10      	ldr	r3, [pc, #64]	; (8005490 <xPortStartScheduler+0x140>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a0f      	ldr	r2, [pc, #60]	; (8005490 <xPortStartScheduler+0x140>)
 8005452:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005456:	6013      	str	r3, [r2, #0]
 8005458:	f7ff ff66 	bl	8005328 <prvPortStartFirstTask>
 800545c:	f7fe ff74 	bl	8004348 <vTaskSwitchContext>
 8005460:	f7ff ff20 	bl	80052a4 <prvTaskExitError>
 8005464:	2300      	movs	r3, #0
 8005466:	4618      	mov	r0, r3
 8005468:	3718      	adds	r7, #24
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	e000ed00 	.word	0xe000ed00
 8005474:	410fc271 	.word	0x410fc271
 8005478:	410fc270 	.word	0x410fc270
 800547c:	e000e400 	.word	0xe000e400
 8005480:	20000ef4 	.word	0x20000ef4
 8005484:	20000ef8 	.word	0x20000ef8
 8005488:	e000ed20 	.word	0xe000ed20
 800548c:	2000000c 	.word	0x2000000c
 8005490:	e000ef34 	.word	0xe000ef34

08005494 <vPortEnterCritical>:
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549e:	f383 8811 	msr	BASEPRI, r3
 80054a2:	f3bf 8f6f 	isb	sy
 80054a6:	f3bf 8f4f 	dsb	sy
 80054aa:	607b      	str	r3, [r7, #4]
 80054ac:	bf00      	nop
 80054ae:	4b0f      	ldr	r3, [pc, #60]	; (80054ec <vPortEnterCritical+0x58>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3301      	adds	r3, #1
 80054b4:	4a0d      	ldr	r2, [pc, #52]	; (80054ec <vPortEnterCritical+0x58>)
 80054b6:	6013      	str	r3, [r2, #0]
 80054b8:	4b0c      	ldr	r3, [pc, #48]	; (80054ec <vPortEnterCritical+0x58>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d10f      	bne.n	80054e0 <vPortEnterCritical+0x4c>
 80054c0:	4b0b      	ldr	r3, [pc, #44]	; (80054f0 <vPortEnterCritical+0x5c>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <vPortEnterCritical+0x4c>
 80054ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	603b      	str	r3, [r7, #0]
 80054dc:	bf00      	nop
 80054de:	e7fe      	b.n	80054de <vPortEnterCritical+0x4a>
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr
 80054ec:	2000000c 	.word	0x2000000c
 80054f0:	e000ed04 	.word	0xe000ed04

080054f4 <vPortExitCritical>:
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	4b12      	ldr	r3, [pc, #72]	; (8005544 <vPortExitCritical+0x50>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10a      	bne.n	8005518 <vPortExitCritical+0x24>
 8005502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005506:	f383 8811 	msr	BASEPRI, r3
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	607b      	str	r3, [r7, #4]
 8005514:	bf00      	nop
 8005516:	e7fe      	b.n	8005516 <vPortExitCritical+0x22>
 8005518:	4b0a      	ldr	r3, [pc, #40]	; (8005544 <vPortExitCritical+0x50>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	3b01      	subs	r3, #1
 800551e:	4a09      	ldr	r2, [pc, #36]	; (8005544 <vPortExitCritical+0x50>)
 8005520:	6013      	str	r3, [r2, #0]
 8005522:	4b08      	ldr	r3, [pc, #32]	; (8005544 <vPortExitCritical+0x50>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d105      	bne.n	8005536 <vPortExitCritical+0x42>
 800552a:	2300      	movs	r3, #0
 800552c:	603b      	str	r3, [r7, #0]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	f383 8811 	msr	BASEPRI, r3
 8005534:	bf00      	nop
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	2000000c 	.word	0x2000000c
	...

08005550 <PendSV_Handler>:
 8005550:	f3ef 8009 	mrs	r0, PSP
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	4b15      	ldr	r3, [pc, #84]	; (80055b0 <pxCurrentTCBConst>)
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	f01e 0f10 	tst.w	lr, #16
 8005560:	bf08      	it	eq
 8005562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800556a:	6010      	str	r0, [r2, #0]
 800556c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005570:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005574:	f380 8811 	msr	BASEPRI, r0
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	f3bf 8f6f 	isb	sy
 8005580:	f7fe fee2 	bl	8004348 <vTaskSwitchContext>
 8005584:	f04f 0000 	mov.w	r0, #0
 8005588:	f380 8811 	msr	BASEPRI, r0
 800558c:	bc09      	pop	{r0, r3}
 800558e:	6819      	ldr	r1, [r3, #0]
 8005590:	6808      	ldr	r0, [r1, #0]
 8005592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005596:	f01e 0f10 	tst.w	lr, #16
 800559a:	bf08      	it	eq
 800559c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80055a0:	f380 8809 	msr	PSP, r0
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	f3af 8000 	nop.w

080055b0 <pxCurrentTCBConst>:
 80055b0:	200008c8 	.word	0x200008c8
 80055b4:	bf00      	nop
 80055b6:	bf00      	nop

080055b8 <xPortSysTickHandler>:
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	607b      	str	r3, [r7, #4]
 80055d0:	bf00      	nop
 80055d2:	f7fe fdff 	bl	80041d4 <xTaskIncrementTick>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d003      	beq.n	80055e4 <xPortSysTickHandler+0x2c>
 80055dc:	4b06      	ldr	r3, [pc, #24]	; (80055f8 <xPortSysTickHandler+0x40>)
 80055de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	2300      	movs	r3, #0
 80055e6:	603b      	str	r3, [r7, #0]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	bf00      	nop
 80055f0:	bf00      	nop
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	e000ed04 	.word	0xe000ed04

080055fc <vPortSetupTimerInterrupt>:
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
 8005600:	4b0b      	ldr	r3, [pc, #44]	; (8005630 <vPortSetupTimerInterrupt+0x34>)
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	4b0b      	ldr	r3, [pc, #44]	; (8005634 <vPortSetupTimerInterrupt+0x38>)
 8005608:	2200      	movs	r2, #0
 800560a:	601a      	str	r2, [r3, #0]
 800560c:	4b0a      	ldr	r3, [pc, #40]	; (8005638 <vPortSetupTimerInterrupt+0x3c>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a0a      	ldr	r2, [pc, #40]	; (800563c <vPortSetupTimerInterrupt+0x40>)
 8005612:	fba2 2303 	umull	r2, r3, r2, r3
 8005616:	099b      	lsrs	r3, r3, #6
 8005618:	4a09      	ldr	r2, [pc, #36]	; (8005640 <vPortSetupTimerInterrupt+0x44>)
 800561a:	3b01      	subs	r3, #1
 800561c:	6013      	str	r3, [r2, #0]
 800561e:	4b04      	ldr	r3, [pc, #16]	; (8005630 <vPortSetupTimerInterrupt+0x34>)
 8005620:	2207      	movs	r2, #7
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	bf00      	nop
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	e000e010 	.word	0xe000e010
 8005634:	e000e018 	.word	0xe000e018
 8005638:	20000000 	.word	0x20000000
 800563c:	10624dd3 	.word	0x10624dd3
 8005640:	e000e014 	.word	0xe000e014

08005644 <vPortEnableVFP>:
 8005644:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005654 <vPortEnableVFP+0x10>
 8005648:	6801      	ldr	r1, [r0, #0]
 800564a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800564e:	6001      	str	r1, [r0, #0]
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	e000ed88 	.word	0xe000ed88

08005658 <vPortValidateInterruptPriority>:
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	f3ef 8305 	mrs	r3, IPSR
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2b0f      	cmp	r3, #15
 8005668:	d914      	bls.n	8005694 <vPortValidateInterruptPriority+0x3c>
 800566a:	4a17      	ldr	r2, [pc, #92]	; (80056c8 <vPortValidateInterruptPriority+0x70>)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4413      	add	r3, r2
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	72fb      	strb	r3, [r7, #11]
 8005674:	4b15      	ldr	r3, [pc, #84]	; (80056cc <vPortValidateInterruptPriority+0x74>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	7afa      	ldrb	r2, [r7, #11]
 800567a:	429a      	cmp	r2, r3
 800567c:	d20a      	bcs.n	8005694 <vPortValidateInterruptPriority+0x3c>
 800567e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005682:	f383 8811 	msr	BASEPRI, r3
 8005686:	f3bf 8f6f 	isb	sy
 800568a:	f3bf 8f4f 	dsb	sy
 800568e:	607b      	str	r3, [r7, #4]
 8005690:	bf00      	nop
 8005692:	e7fe      	b.n	8005692 <vPortValidateInterruptPriority+0x3a>
 8005694:	4b0e      	ldr	r3, [pc, #56]	; (80056d0 <vPortValidateInterruptPriority+0x78>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800569c:	4b0d      	ldr	r3, [pc, #52]	; (80056d4 <vPortValidateInterruptPriority+0x7c>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d90a      	bls.n	80056ba <vPortValidateInterruptPriority+0x62>
 80056a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a8:	f383 8811 	msr	BASEPRI, r3
 80056ac:	f3bf 8f6f 	isb	sy
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	603b      	str	r3, [r7, #0]
 80056b6:	bf00      	nop
 80056b8:	e7fe      	b.n	80056b8 <vPortValidateInterruptPriority+0x60>
 80056ba:	bf00      	nop
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	e000e3f0 	.word	0xe000e3f0
 80056cc:	20000ef4 	.word	0x20000ef4
 80056d0:	e000ed0c 	.word	0xe000ed0c
 80056d4:	20000ef8 	.word	0x20000ef8

080056d8 <pvPortMalloc>:
 80056d8:	b580      	push	{r7, lr}
 80056da:	b08a      	sub	sp, #40	; 0x28
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	2300      	movs	r3, #0
 80056e2:	61fb      	str	r3, [r7, #28]
 80056e4:	f7fe fcba 	bl	800405c <vTaskSuspendAll>
 80056e8:	4b5b      	ldr	r3, [pc, #364]	; (8005858 <pvPortMalloc+0x180>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d101      	bne.n	80056f4 <pvPortMalloc+0x1c>
 80056f0:	f000 f920 	bl	8005934 <prvHeapInit>
 80056f4:	4b59      	ldr	r3, [pc, #356]	; (800585c <pvPortMalloc+0x184>)
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4013      	ands	r3, r2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f040 8093 	bne.w	8005828 <pvPortMalloc+0x150>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d01d      	beq.n	8005744 <pvPortMalloc+0x6c>
 8005708:	2208      	movs	r2, #8
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4413      	add	r3, r2
 800570e:	607b      	str	r3, [r7, #4]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f003 0307 	and.w	r3, r3, #7
 8005716:	2b00      	cmp	r3, #0
 8005718:	d014      	beq.n	8005744 <pvPortMalloc+0x6c>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f023 0307 	bic.w	r3, r3, #7
 8005720:	3308      	adds	r3, #8
 8005722:	607b      	str	r3, [r7, #4]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f003 0307 	and.w	r3, r3, #7
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00a      	beq.n	8005744 <pvPortMalloc+0x6c>
 800572e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005732:	f383 8811 	msr	BASEPRI, r3
 8005736:	f3bf 8f6f 	isb	sy
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	617b      	str	r3, [r7, #20]
 8005740:	bf00      	nop
 8005742:	e7fe      	b.n	8005742 <pvPortMalloc+0x6a>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d06e      	beq.n	8005828 <pvPortMalloc+0x150>
 800574a:	4b45      	ldr	r3, [pc, #276]	; (8005860 <pvPortMalloc+0x188>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	429a      	cmp	r2, r3
 8005752:	d869      	bhi.n	8005828 <pvPortMalloc+0x150>
 8005754:	4b43      	ldr	r3, [pc, #268]	; (8005864 <pvPortMalloc+0x18c>)
 8005756:	623b      	str	r3, [r7, #32]
 8005758:	4b42      	ldr	r3, [pc, #264]	; (8005864 <pvPortMalloc+0x18c>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	627b      	str	r3, [r7, #36]	; 0x24
 800575e:	e004      	b.n	800576a <pvPortMalloc+0x92>
 8005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005762:	623b      	str	r3, [r7, #32]
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	627b      	str	r3, [r7, #36]	; 0x24
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	429a      	cmp	r2, r3
 8005772:	d903      	bls.n	800577c <pvPortMalloc+0xa4>
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1f1      	bne.n	8005760 <pvPortMalloc+0x88>
 800577c:	4b36      	ldr	r3, [pc, #216]	; (8005858 <pvPortMalloc+0x180>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005782:	429a      	cmp	r2, r3
 8005784:	d050      	beq.n	8005828 <pvPortMalloc+0x150>
 8005786:	6a3b      	ldr	r3, [r7, #32]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2208      	movs	r2, #8
 800578c:	4413      	add	r3, r2
 800578e:	61fb      	str	r3, [r7, #28]
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	601a      	str	r2, [r3, #0]
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	1ad2      	subs	r2, r2, r3
 80057a0:	2308      	movs	r3, #8
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d91f      	bls.n	80057e8 <pvPortMalloc+0x110>
 80057a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4413      	add	r3, r2
 80057ae:	61bb      	str	r3, [r7, #24]
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	f003 0307 	and.w	r3, r3, #7
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00a      	beq.n	80057d0 <pvPortMalloc+0xf8>
 80057ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	613b      	str	r3, [r7, #16]
 80057cc:	bf00      	nop
 80057ce:	e7fe      	b.n	80057ce <pvPortMalloc+0xf6>
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	1ad2      	subs	r2, r2, r3
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	605a      	str	r2, [r3, #4]
 80057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	605a      	str	r2, [r3, #4]
 80057e2:	69b8      	ldr	r0, [r7, #24]
 80057e4:	f000 f908 	bl	80059f8 <prvInsertBlockIntoFreeList>
 80057e8:	4b1d      	ldr	r3, [pc, #116]	; (8005860 <pvPortMalloc+0x188>)
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	4a1b      	ldr	r2, [pc, #108]	; (8005860 <pvPortMalloc+0x188>)
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	4b1a      	ldr	r3, [pc, #104]	; (8005860 <pvPortMalloc+0x188>)
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	4b1b      	ldr	r3, [pc, #108]	; (8005868 <pvPortMalloc+0x190>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d203      	bcs.n	800580a <pvPortMalloc+0x132>
 8005802:	4b17      	ldr	r3, [pc, #92]	; (8005860 <pvPortMalloc+0x188>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a18      	ldr	r2, [pc, #96]	; (8005868 <pvPortMalloc+0x190>)
 8005808:	6013      	str	r3, [r2, #0]
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	4b13      	ldr	r3, [pc, #76]	; (800585c <pvPortMalloc+0x184>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	431a      	orrs	r2, r3
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	605a      	str	r2, [r3, #4]
 8005818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581a:	2200      	movs	r2, #0
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	4b13      	ldr	r3, [pc, #76]	; (800586c <pvPortMalloc+0x194>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	3301      	adds	r3, #1
 8005824:	4a11      	ldr	r2, [pc, #68]	; (800586c <pvPortMalloc+0x194>)
 8005826:	6013      	str	r3, [r2, #0]
 8005828:	f7fe fc26 	bl	8004078 <xTaskResumeAll>
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	f003 0307 	and.w	r3, r3, #7
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00a      	beq.n	800584c <pvPortMalloc+0x174>
 8005836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583a:	f383 8811 	msr	BASEPRI, r3
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	60fb      	str	r3, [r7, #12]
 8005848:	bf00      	nop
 800584a:	e7fe      	b.n	800584a <pvPortMalloc+0x172>
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	4618      	mov	r0, r3
 8005850:	3728      	adds	r7, #40	; 0x28
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	20004b04 	.word	0x20004b04
 800585c:	20004b18 	.word	0x20004b18
 8005860:	20004b08 	.word	0x20004b08
 8005864:	20004afc 	.word	0x20004afc
 8005868:	20004b0c 	.word	0x20004b0c
 800586c:	20004b10 	.word	0x20004b10

08005870 <vPortFree>:
 8005870:	b580      	push	{r7, lr}
 8005872:	b086      	sub	sp, #24
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	617b      	str	r3, [r7, #20]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d04d      	beq.n	800591e <vPortFree+0xae>
 8005882:	2308      	movs	r3, #8
 8005884:	425b      	negs	r3, r3
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	4413      	add	r3, r2
 800588a:	617b      	str	r3, [r7, #20]
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	613b      	str	r3, [r7, #16]
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	4b24      	ldr	r3, [pc, #144]	; (8005928 <vPortFree+0xb8>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4013      	ands	r3, r2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10a      	bne.n	80058b4 <vPortFree+0x44>
 800589e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	60fb      	str	r3, [r7, #12]
 80058b0:	bf00      	nop
 80058b2:	e7fe      	b.n	80058b2 <vPortFree+0x42>
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00a      	beq.n	80058d2 <vPortFree+0x62>
 80058bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c0:	f383 8811 	msr	BASEPRI, r3
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	60bb      	str	r3, [r7, #8]
 80058ce:	bf00      	nop
 80058d0:	e7fe      	b.n	80058d0 <vPortFree+0x60>
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	4b14      	ldr	r3, [pc, #80]	; (8005928 <vPortFree+0xb8>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4013      	ands	r3, r2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d01e      	beq.n	800591e <vPortFree+0xae>
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d11a      	bne.n	800591e <vPortFree+0xae>
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	4b0e      	ldr	r3, [pc, #56]	; (8005928 <vPortFree+0xb8>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	43db      	mvns	r3, r3
 80058f2:	401a      	ands	r2, r3
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	605a      	str	r2, [r3, #4]
 80058f8:	f7fe fbb0 	bl	800405c <vTaskSuspendAll>
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	4b0a      	ldr	r3, [pc, #40]	; (800592c <vPortFree+0xbc>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4413      	add	r3, r2
 8005906:	4a09      	ldr	r2, [pc, #36]	; (800592c <vPortFree+0xbc>)
 8005908:	6013      	str	r3, [r2, #0]
 800590a:	6938      	ldr	r0, [r7, #16]
 800590c:	f000 f874 	bl	80059f8 <prvInsertBlockIntoFreeList>
 8005910:	4b07      	ldr	r3, [pc, #28]	; (8005930 <vPortFree+0xc0>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	3301      	adds	r3, #1
 8005916:	4a06      	ldr	r2, [pc, #24]	; (8005930 <vPortFree+0xc0>)
 8005918:	6013      	str	r3, [r2, #0]
 800591a:	f7fe fbad 	bl	8004078 <xTaskResumeAll>
 800591e:	bf00      	nop
 8005920:	3718      	adds	r7, #24
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	20004b18 	.word	0x20004b18
 800592c:	20004b08 	.word	0x20004b08
 8005930:	20004b14 	.word	0x20004b14

08005934 <prvHeapInit>:
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800593e:	60bb      	str	r3, [r7, #8]
 8005940:	4b27      	ldr	r3, [pc, #156]	; (80059e0 <prvHeapInit+0xac>)
 8005942:	60fb      	str	r3, [r7, #12]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f003 0307 	and.w	r3, r3, #7
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00c      	beq.n	8005968 <prvHeapInit+0x34>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	3307      	adds	r3, #7
 8005952:	60fb      	str	r3, [r7, #12]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 0307 	bic.w	r3, r3, #7
 800595a:	60fb      	str	r3, [r7, #12]
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	4a1f      	ldr	r2, [pc, #124]	; (80059e0 <prvHeapInit+0xac>)
 8005964:	4413      	add	r3, r2
 8005966:	60bb      	str	r3, [r7, #8]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	607b      	str	r3, [r7, #4]
 800596c:	4a1d      	ldr	r2, [pc, #116]	; (80059e4 <prvHeapInit+0xb0>)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6013      	str	r3, [r2, #0]
 8005972:	4b1c      	ldr	r3, [pc, #112]	; (80059e4 <prvHeapInit+0xb0>)
 8005974:	2200      	movs	r2, #0
 8005976:	605a      	str	r2, [r3, #4]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	4413      	add	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	2208      	movs	r2, #8
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	1a9b      	subs	r3, r3, r2
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f023 0307 	bic.w	r3, r3, #7
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4a15      	ldr	r2, [pc, #84]	; (80059e8 <prvHeapInit+0xb4>)
 8005994:	6013      	str	r3, [r2, #0]
 8005996:	4b14      	ldr	r3, [pc, #80]	; (80059e8 <prvHeapInit+0xb4>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2200      	movs	r2, #0
 800599c:	605a      	str	r2, [r3, #4]
 800599e:	4b12      	ldr	r3, [pc, #72]	; (80059e8 <prvHeapInit+0xb4>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2200      	movs	r2, #0
 80059a4:	601a      	str	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	603b      	str	r3, [r7, #0]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	1ad2      	subs	r2, r2, r3
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	605a      	str	r2, [r3, #4]
 80059b4:	4b0c      	ldr	r3, [pc, #48]	; (80059e8 <prvHeapInit+0xb4>)
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	4a0a      	ldr	r2, [pc, #40]	; (80059ec <prvHeapInit+0xb8>)
 80059c2:	6013      	str	r3, [r2, #0]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	4a09      	ldr	r2, [pc, #36]	; (80059f0 <prvHeapInit+0xbc>)
 80059ca:	6013      	str	r3, [r2, #0]
 80059cc:	4b09      	ldr	r3, [pc, #36]	; (80059f4 <prvHeapInit+0xc0>)
 80059ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	bf00      	nop
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	20000efc 	.word	0x20000efc
 80059e4:	20004afc 	.word	0x20004afc
 80059e8:	20004b04 	.word	0x20004b04
 80059ec:	20004b0c 	.word	0x20004b0c
 80059f0:	20004b08 	.word	0x20004b08
 80059f4:	20004b18 	.word	0x20004b18

080059f8 <prvInsertBlockIntoFreeList>:
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	4b28      	ldr	r3, [pc, #160]	; (8005aa4 <prvInsertBlockIntoFreeList+0xac>)
 8005a02:	60fb      	str	r3, [r7, #12]
 8005a04:	e002      	b.n	8005a0c <prvInsertBlockIntoFreeList+0x14>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	60fb      	str	r3, [r7, #12]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d8f7      	bhi.n	8005a06 <prvInsertBlockIntoFreeList+0xe>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	60bb      	str	r3, [r7, #8]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	4413      	add	r3, r2
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d108      	bne.n	8005a3a <prvInsertBlockIntoFreeList+0x42>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	441a      	add	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	605a      	str	r2, [r3, #4]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	607b      	str	r3, [r7, #4]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	60bb      	str	r3, [r7, #8]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	441a      	add	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d118      	bne.n	8005a80 <prvInsertBlockIntoFreeList+0x88>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	4b15      	ldr	r3, [pc, #84]	; (8005aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d00d      	beq.n	8005a76 <prvInsertBlockIntoFreeList+0x7e>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	441a      	add	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	605a      	str	r2, [r3, #4]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	601a      	str	r2, [r3, #0]
 8005a74:	e008      	b.n	8005a88 <prvInsertBlockIntoFreeList+0x90>
 8005a76:	4b0c      	ldr	r3, [pc, #48]	; (8005aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	e003      	b.n	8005a88 <prvInsertBlockIntoFreeList+0x90>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d002      	beq.n	8005a96 <prvInsertBlockIntoFreeList+0x9e>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	bf00      	nop
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	20004afc 	.word	0x20004afc
 8005aa8:	20004b04 	.word	0x20004b04

08005aac <std>:
 8005aac:	2300      	movs	r3, #0
 8005aae:	b510      	push	{r4, lr}
 8005ab0:	4604      	mov	r4, r0
 8005ab2:	e9c0 3300 	strd	r3, r3, [r0]
 8005ab6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005aba:	6083      	str	r3, [r0, #8]
 8005abc:	8181      	strh	r1, [r0, #12]
 8005abe:	6643      	str	r3, [r0, #100]	; 0x64
 8005ac0:	81c2      	strh	r2, [r0, #14]
 8005ac2:	6183      	str	r3, [r0, #24]
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	2208      	movs	r2, #8
 8005ac8:	305c      	adds	r0, #92	; 0x5c
 8005aca:	f000 f906 	bl	8005cda <memset>
 8005ace:	4b0d      	ldr	r3, [pc, #52]	; (8005b04 <std+0x58>)
 8005ad0:	6263      	str	r3, [r4, #36]	; 0x24
 8005ad2:	4b0d      	ldr	r3, [pc, #52]	; (8005b08 <std+0x5c>)
 8005ad4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ad6:	4b0d      	ldr	r3, [pc, #52]	; (8005b0c <std+0x60>)
 8005ad8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ada:	4b0d      	ldr	r3, [pc, #52]	; (8005b10 <std+0x64>)
 8005adc:	6323      	str	r3, [r4, #48]	; 0x30
 8005ade:	4b0d      	ldr	r3, [pc, #52]	; (8005b14 <std+0x68>)
 8005ae0:	6224      	str	r4, [r4, #32]
 8005ae2:	429c      	cmp	r4, r3
 8005ae4:	d006      	beq.n	8005af4 <std+0x48>
 8005ae6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005aea:	4294      	cmp	r4, r2
 8005aec:	d002      	beq.n	8005af4 <std+0x48>
 8005aee:	33d0      	adds	r3, #208	; 0xd0
 8005af0:	429c      	cmp	r4, r3
 8005af2:	d105      	bne.n	8005b00 <std+0x54>
 8005af4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005afc:	f000 b9bc 	b.w	8005e78 <__retarget_lock_init_recursive>
 8005b00:	bd10      	pop	{r4, pc}
 8005b02:	bf00      	nop
 8005b04:	08005c55 	.word	0x08005c55
 8005b08:	08005c77 	.word	0x08005c77
 8005b0c:	08005caf 	.word	0x08005caf
 8005b10:	08005cd3 	.word	0x08005cd3
 8005b14:	20004b1c 	.word	0x20004b1c

08005b18 <stdio_exit_handler>:
 8005b18:	4a02      	ldr	r2, [pc, #8]	; (8005b24 <stdio_exit_handler+0xc>)
 8005b1a:	4903      	ldr	r1, [pc, #12]	; (8005b28 <stdio_exit_handler+0x10>)
 8005b1c:	4803      	ldr	r0, [pc, #12]	; (8005b2c <stdio_exit_handler+0x14>)
 8005b1e:	f000 b869 	b.w	8005bf4 <_fwalk_sglue>
 8005b22:	bf00      	nop
 8005b24:	20000010 	.word	0x20000010
 8005b28:	08006741 	.word	0x08006741
 8005b2c:	2000001c 	.word	0x2000001c

08005b30 <cleanup_stdio>:
 8005b30:	6841      	ldr	r1, [r0, #4]
 8005b32:	4b0c      	ldr	r3, [pc, #48]	; (8005b64 <cleanup_stdio+0x34>)
 8005b34:	4299      	cmp	r1, r3
 8005b36:	b510      	push	{r4, lr}
 8005b38:	4604      	mov	r4, r0
 8005b3a:	d001      	beq.n	8005b40 <cleanup_stdio+0x10>
 8005b3c:	f000 fe00 	bl	8006740 <_fflush_r>
 8005b40:	68a1      	ldr	r1, [r4, #8]
 8005b42:	4b09      	ldr	r3, [pc, #36]	; (8005b68 <cleanup_stdio+0x38>)
 8005b44:	4299      	cmp	r1, r3
 8005b46:	d002      	beq.n	8005b4e <cleanup_stdio+0x1e>
 8005b48:	4620      	mov	r0, r4
 8005b4a:	f000 fdf9 	bl	8006740 <_fflush_r>
 8005b4e:	68e1      	ldr	r1, [r4, #12]
 8005b50:	4b06      	ldr	r3, [pc, #24]	; (8005b6c <cleanup_stdio+0x3c>)
 8005b52:	4299      	cmp	r1, r3
 8005b54:	d004      	beq.n	8005b60 <cleanup_stdio+0x30>
 8005b56:	4620      	mov	r0, r4
 8005b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b5c:	f000 bdf0 	b.w	8006740 <_fflush_r>
 8005b60:	bd10      	pop	{r4, pc}
 8005b62:	bf00      	nop
 8005b64:	20004b1c 	.word	0x20004b1c
 8005b68:	20004b84 	.word	0x20004b84
 8005b6c:	20004bec 	.word	0x20004bec

08005b70 <global_stdio_init.part.0>:
 8005b70:	b510      	push	{r4, lr}
 8005b72:	4b0b      	ldr	r3, [pc, #44]	; (8005ba0 <global_stdio_init.part.0+0x30>)
 8005b74:	4c0b      	ldr	r4, [pc, #44]	; (8005ba4 <global_stdio_init.part.0+0x34>)
 8005b76:	4a0c      	ldr	r2, [pc, #48]	; (8005ba8 <global_stdio_init.part.0+0x38>)
 8005b78:	601a      	str	r2, [r3, #0]
 8005b7a:	4620      	mov	r0, r4
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	2104      	movs	r1, #4
 8005b80:	f7ff ff94 	bl	8005aac <std>
 8005b84:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005b88:	2201      	movs	r2, #1
 8005b8a:	2109      	movs	r1, #9
 8005b8c:	f7ff ff8e 	bl	8005aac <std>
 8005b90:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005b94:	2202      	movs	r2, #2
 8005b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b9a:	2112      	movs	r1, #18
 8005b9c:	f7ff bf86 	b.w	8005aac <std>
 8005ba0:	20004c54 	.word	0x20004c54
 8005ba4:	20004b1c 	.word	0x20004b1c
 8005ba8:	08005b19 	.word	0x08005b19

08005bac <__sfp_lock_acquire>:
 8005bac:	4801      	ldr	r0, [pc, #4]	; (8005bb4 <__sfp_lock_acquire+0x8>)
 8005bae:	f000 b964 	b.w	8005e7a <__retarget_lock_acquire_recursive>
 8005bb2:	bf00      	nop
 8005bb4:	20004c5d 	.word	0x20004c5d

08005bb8 <__sfp_lock_release>:
 8005bb8:	4801      	ldr	r0, [pc, #4]	; (8005bc0 <__sfp_lock_release+0x8>)
 8005bba:	f000 b95f 	b.w	8005e7c <__retarget_lock_release_recursive>
 8005bbe:	bf00      	nop
 8005bc0:	20004c5d 	.word	0x20004c5d

08005bc4 <__sinit>:
 8005bc4:	b510      	push	{r4, lr}
 8005bc6:	4604      	mov	r4, r0
 8005bc8:	f7ff fff0 	bl	8005bac <__sfp_lock_acquire>
 8005bcc:	6a23      	ldr	r3, [r4, #32]
 8005bce:	b11b      	cbz	r3, 8005bd8 <__sinit+0x14>
 8005bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bd4:	f7ff bff0 	b.w	8005bb8 <__sfp_lock_release>
 8005bd8:	4b04      	ldr	r3, [pc, #16]	; (8005bec <__sinit+0x28>)
 8005bda:	6223      	str	r3, [r4, #32]
 8005bdc:	4b04      	ldr	r3, [pc, #16]	; (8005bf0 <__sinit+0x2c>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1f5      	bne.n	8005bd0 <__sinit+0xc>
 8005be4:	f7ff ffc4 	bl	8005b70 <global_stdio_init.part.0>
 8005be8:	e7f2      	b.n	8005bd0 <__sinit+0xc>
 8005bea:	bf00      	nop
 8005bec:	08005b31 	.word	0x08005b31
 8005bf0:	20004c54 	.word	0x20004c54

08005bf4 <_fwalk_sglue>:
 8005bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bf8:	4607      	mov	r7, r0
 8005bfa:	4688      	mov	r8, r1
 8005bfc:	4614      	mov	r4, r2
 8005bfe:	2600      	movs	r6, #0
 8005c00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c04:	f1b9 0901 	subs.w	r9, r9, #1
 8005c08:	d505      	bpl.n	8005c16 <_fwalk_sglue+0x22>
 8005c0a:	6824      	ldr	r4, [r4, #0]
 8005c0c:	2c00      	cmp	r4, #0
 8005c0e:	d1f7      	bne.n	8005c00 <_fwalk_sglue+0xc>
 8005c10:	4630      	mov	r0, r6
 8005c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c16:	89ab      	ldrh	r3, [r5, #12]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d907      	bls.n	8005c2c <_fwalk_sglue+0x38>
 8005c1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c20:	3301      	adds	r3, #1
 8005c22:	d003      	beq.n	8005c2c <_fwalk_sglue+0x38>
 8005c24:	4629      	mov	r1, r5
 8005c26:	4638      	mov	r0, r7
 8005c28:	47c0      	blx	r8
 8005c2a:	4306      	orrs	r6, r0
 8005c2c:	3568      	adds	r5, #104	; 0x68
 8005c2e:	e7e9      	b.n	8005c04 <_fwalk_sglue+0x10>

08005c30 <iprintf>:
 8005c30:	b40f      	push	{r0, r1, r2, r3}
 8005c32:	b507      	push	{r0, r1, r2, lr}
 8005c34:	4906      	ldr	r1, [pc, #24]	; (8005c50 <iprintf+0x20>)
 8005c36:	ab04      	add	r3, sp, #16
 8005c38:	6808      	ldr	r0, [r1, #0]
 8005c3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c3e:	6881      	ldr	r1, [r0, #8]
 8005c40:	9301      	str	r3, [sp, #4]
 8005c42:	f000 fa4d 	bl	80060e0 <_vfiprintf_r>
 8005c46:	b003      	add	sp, #12
 8005c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c4c:	b004      	add	sp, #16
 8005c4e:	4770      	bx	lr
 8005c50:	20000068 	.word	0x20000068

08005c54 <__sread>:
 8005c54:	b510      	push	{r4, lr}
 8005c56:	460c      	mov	r4, r1
 8005c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c5c:	f000 f8be 	bl	8005ddc <_read_r>
 8005c60:	2800      	cmp	r0, #0
 8005c62:	bfab      	itete	ge
 8005c64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c66:	89a3      	ldrhlt	r3, [r4, #12]
 8005c68:	181b      	addge	r3, r3, r0
 8005c6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c6e:	bfac      	ite	ge
 8005c70:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c72:	81a3      	strhlt	r3, [r4, #12]
 8005c74:	bd10      	pop	{r4, pc}

08005c76 <__swrite>:
 8005c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c7a:	461f      	mov	r7, r3
 8005c7c:	898b      	ldrh	r3, [r1, #12]
 8005c7e:	05db      	lsls	r3, r3, #23
 8005c80:	4605      	mov	r5, r0
 8005c82:	460c      	mov	r4, r1
 8005c84:	4616      	mov	r6, r2
 8005c86:	d505      	bpl.n	8005c94 <__swrite+0x1e>
 8005c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f000 f892 	bl	8005db8 <_lseek_r>
 8005c94:	89a3      	ldrh	r3, [r4, #12]
 8005c96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c9e:	81a3      	strh	r3, [r4, #12]
 8005ca0:	4632      	mov	r2, r6
 8005ca2:	463b      	mov	r3, r7
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005caa:	f000 b8a9 	b.w	8005e00 <_write_r>

08005cae <__sseek>:
 8005cae:	b510      	push	{r4, lr}
 8005cb0:	460c      	mov	r4, r1
 8005cb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cb6:	f000 f87f 	bl	8005db8 <_lseek_r>
 8005cba:	1c43      	adds	r3, r0, #1
 8005cbc:	89a3      	ldrh	r3, [r4, #12]
 8005cbe:	bf15      	itete	ne
 8005cc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005cc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005cc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005cca:	81a3      	strheq	r3, [r4, #12]
 8005ccc:	bf18      	it	ne
 8005cce:	81a3      	strhne	r3, [r4, #12]
 8005cd0:	bd10      	pop	{r4, pc}

08005cd2 <__sclose>:
 8005cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cd6:	f000 b809 	b.w	8005cec <_close_r>

08005cda <memset>:
 8005cda:	4402      	add	r2, r0
 8005cdc:	4603      	mov	r3, r0
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d100      	bne.n	8005ce4 <memset+0xa>
 8005ce2:	4770      	bx	lr
 8005ce4:	f803 1b01 	strb.w	r1, [r3], #1
 8005ce8:	e7f9      	b.n	8005cde <memset+0x4>
	...

08005cec <_close_r>:
 8005cec:	b538      	push	{r3, r4, r5, lr}
 8005cee:	4d06      	ldr	r5, [pc, #24]	; (8005d08 <_close_r+0x1c>)
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	4604      	mov	r4, r0
 8005cf4:	4608      	mov	r0, r1
 8005cf6:	602b      	str	r3, [r5, #0]
 8005cf8:	f7fa ff77 	bl	8000bea <_close>
 8005cfc:	1c43      	adds	r3, r0, #1
 8005cfe:	d102      	bne.n	8005d06 <_close_r+0x1a>
 8005d00:	682b      	ldr	r3, [r5, #0]
 8005d02:	b103      	cbz	r3, 8005d06 <_close_r+0x1a>
 8005d04:	6023      	str	r3, [r4, #0]
 8005d06:	bd38      	pop	{r3, r4, r5, pc}
 8005d08:	20004c58 	.word	0x20004c58

08005d0c <_reclaim_reent>:
 8005d0c:	4b29      	ldr	r3, [pc, #164]	; (8005db4 <_reclaim_reent+0xa8>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4283      	cmp	r3, r0
 8005d12:	b570      	push	{r4, r5, r6, lr}
 8005d14:	4604      	mov	r4, r0
 8005d16:	d04b      	beq.n	8005db0 <_reclaim_reent+0xa4>
 8005d18:	69c3      	ldr	r3, [r0, #28]
 8005d1a:	b143      	cbz	r3, 8005d2e <_reclaim_reent+0x22>
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d144      	bne.n	8005dac <_reclaim_reent+0xa0>
 8005d22:	69e3      	ldr	r3, [r4, #28]
 8005d24:	6819      	ldr	r1, [r3, #0]
 8005d26:	b111      	cbz	r1, 8005d2e <_reclaim_reent+0x22>
 8005d28:	4620      	mov	r0, r4
 8005d2a:	f000 f8b7 	bl	8005e9c <_free_r>
 8005d2e:	6961      	ldr	r1, [r4, #20]
 8005d30:	b111      	cbz	r1, 8005d38 <_reclaim_reent+0x2c>
 8005d32:	4620      	mov	r0, r4
 8005d34:	f000 f8b2 	bl	8005e9c <_free_r>
 8005d38:	69e1      	ldr	r1, [r4, #28]
 8005d3a:	b111      	cbz	r1, 8005d42 <_reclaim_reent+0x36>
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	f000 f8ad 	bl	8005e9c <_free_r>
 8005d42:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005d44:	b111      	cbz	r1, 8005d4c <_reclaim_reent+0x40>
 8005d46:	4620      	mov	r0, r4
 8005d48:	f000 f8a8 	bl	8005e9c <_free_r>
 8005d4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d4e:	b111      	cbz	r1, 8005d56 <_reclaim_reent+0x4a>
 8005d50:	4620      	mov	r0, r4
 8005d52:	f000 f8a3 	bl	8005e9c <_free_r>
 8005d56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005d58:	b111      	cbz	r1, 8005d60 <_reclaim_reent+0x54>
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	f000 f89e 	bl	8005e9c <_free_r>
 8005d60:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005d62:	b111      	cbz	r1, 8005d6a <_reclaim_reent+0x5e>
 8005d64:	4620      	mov	r0, r4
 8005d66:	f000 f899 	bl	8005e9c <_free_r>
 8005d6a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005d6c:	b111      	cbz	r1, 8005d74 <_reclaim_reent+0x68>
 8005d6e:	4620      	mov	r0, r4
 8005d70:	f000 f894 	bl	8005e9c <_free_r>
 8005d74:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005d76:	b111      	cbz	r1, 8005d7e <_reclaim_reent+0x72>
 8005d78:	4620      	mov	r0, r4
 8005d7a:	f000 f88f 	bl	8005e9c <_free_r>
 8005d7e:	6a23      	ldr	r3, [r4, #32]
 8005d80:	b1b3      	cbz	r3, 8005db0 <_reclaim_reent+0xa4>
 8005d82:	4620      	mov	r0, r4
 8005d84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005d88:	4718      	bx	r3
 8005d8a:	5949      	ldr	r1, [r1, r5]
 8005d8c:	b941      	cbnz	r1, 8005da0 <_reclaim_reent+0x94>
 8005d8e:	3504      	adds	r5, #4
 8005d90:	69e3      	ldr	r3, [r4, #28]
 8005d92:	2d80      	cmp	r5, #128	; 0x80
 8005d94:	68d9      	ldr	r1, [r3, #12]
 8005d96:	d1f8      	bne.n	8005d8a <_reclaim_reent+0x7e>
 8005d98:	4620      	mov	r0, r4
 8005d9a:	f000 f87f 	bl	8005e9c <_free_r>
 8005d9e:	e7c0      	b.n	8005d22 <_reclaim_reent+0x16>
 8005da0:	680e      	ldr	r6, [r1, #0]
 8005da2:	4620      	mov	r0, r4
 8005da4:	f000 f87a 	bl	8005e9c <_free_r>
 8005da8:	4631      	mov	r1, r6
 8005daa:	e7ef      	b.n	8005d8c <_reclaim_reent+0x80>
 8005dac:	2500      	movs	r5, #0
 8005dae:	e7ef      	b.n	8005d90 <_reclaim_reent+0x84>
 8005db0:	bd70      	pop	{r4, r5, r6, pc}
 8005db2:	bf00      	nop
 8005db4:	20000068 	.word	0x20000068

08005db8 <_lseek_r>:
 8005db8:	b538      	push	{r3, r4, r5, lr}
 8005dba:	4d07      	ldr	r5, [pc, #28]	; (8005dd8 <_lseek_r+0x20>)
 8005dbc:	4604      	mov	r4, r0
 8005dbe:	4608      	mov	r0, r1
 8005dc0:	4611      	mov	r1, r2
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	602a      	str	r2, [r5, #0]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f7fa ff36 	bl	8000c38 <_lseek>
 8005dcc:	1c43      	adds	r3, r0, #1
 8005dce:	d102      	bne.n	8005dd6 <_lseek_r+0x1e>
 8005dd0:	682b      	ldr	r3, [r5, #0]
 8005dd2:	b103      	cbz	r3, 8005dd6 <_lseek_r+0x1e>
 8005dd4:	6023      	str	r3, [r4, #0]
 8005dd6:	bd38      	pop	{r3, r4, r5, pc}
 8005dd8:	20004c58 	.word	0x20004c58

08005ddc <_read_r>:
 8005ddc:	b538      	push	{r3, r4, r5, lr}
 8005dde:	4d07      	ldr	r5, [pc, #28]	; (8005dfc <_read_r+0x20>)
 8005de0:	4604      	mov	r4, r0
 8005de2:	4608      	mov	r0, r1
 8005de4:	4611      	mov	r1, r2
 8005de6:	2200      	movs	r2, #0
 8005de8:	602a      	str	r2, [r5, #0]
 8005dea:	461a      	mov	r2, r3
 8005dec:	f7fa fee0 	bl	8000bb0 <_read>
 8005df0:	1c43      	adds	r3, r0, #1
 8005df2:	d102      	bne.n	8005dfa <_read_r+0x1e>
 8005df4:	682b      	ldr	r3, [r5, #0]
 8005df6:	b103      	cbz	r3, 8005dfa <_read_r+0x1e>
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	bd38      	pop	{r3, r4, r5, pc}
 8005dfc:	20004c58 	.word	0x20004c58

08005e00 <_write_r>:
 8005e00:	b538      	push	{r3, r4, r5, lr}
 8005e02:	4d07      	ldr	r5, [pc, #28]	; (8005e20 <_write_r+0x20>)
 8005e04:	4604      	mov	r4, r0
 8005e06:	4608      	mov	r0, r1
 8005e08:	4611      	mov	r1, r2
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	602a      	str	r2, [r5, #0]
 8005e0e:	461a      	mov	r2, r3
 8005e10:	f7fa fbe3 	bl	80005da <_write>
 8005e14:	1c43      	adds	r3, r0, #1
 8005e16:	d102      	bne.n	8005e1e <_write_r+0x1e>
 8005e18:	682b      	ldr	r3, [r5, #0]
 8005e1a:	b103      	cbz	r3, 8005e1e <_write_r+0x1e>
 8005e1c:	6023      	str	r3, [r4, #0]
 8005e1e:	bd38      	pop	{r3, r4, r5, pc}
 8005e20:	20004c58 	.word	0x20004c58

08005e24 <__errno>:
 8005e24:	4b01      	ldr	r3, [pc, #4]	; (8005e2c <__errno+0x8>)
 8005e26:	6818      	ldr	r0, [r3, #0]
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	20000068 	.word	0x20000068

08005e30 <__libc_init_array>:
 8005e30:	b570      	push	{r4, r5, r6, lr}
 8005e32:	4d0d      	ldr	r5, [pc, #52]	; (8005e68 <__libc_init_array+0x38>)
 8005e34:	4c0d      	ldr	r4, [pc, #52]	; (8005e6c <__libc_init_array+0x3c>)
 8005e36:	1b64      	subs	r4, r4, r5
 8005e38:	10a4      	asrs	r4, r4, #2
 8005e3a:	2600      	movs	r6, #0
 8005e3c:	42a6      	cmp	r6, r4
 8005e3e:	d109      	bne.n	8005e54 <__libc_init_array+0x24>
 8005e40:	4d0b      	ldr	r5, [pc, #44]	; (8005e70 <__libc_init_array+0x40>)
 8005e42:	4c0c      	ldr	r4, [pc, #48]	; (8005e74 <__libc_init_array+0x44>)
 8005e44:	f000 fdce 	bl	80069e4 <_init>
 8005e48:	1b64      	subs	r4, r4, r5
 8005e4a:	10a4      	asrs	r4, r4, #2
 8005e4c:	2600      	movs	r6, #0
 8005e4e:	42a6      	cmp	r6, r4
 8005e50:	d105      	bne.n	8005e5e <__libc_init_array+0x2e>
 8005e52:	bd70      	pop	{r4, r5, r6, pc}
 8005e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e58:	4798      	blx	r3
 8005e5a:	3601      	adds	r6, #1
 8005e5c:	e7ee      	b.n	8005e3c <__libc_init_array+0xc>
 8005e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e62:	4798      	blx	r3
 8005e64:	3601      	adds	r6, #1
 8005e66:	e7f2      	b.n	8005e4e <__libc_init_array+0x1e>
 8005e68:	08006b50 	.word	0x08006b50
 8005e6c:	08006b50 	.word	0x08006b50
 8005e70:	08006b50 	.word	0x08006b50
 8005e74:	08006b54 	.word	0x08006b54

08005e78 <__retarget_lock_init_recursive>:
 8005e78:	4770      	bx	lr

08005e7a <__retarget_lock_acquire_recursive>:
 8005e7a:	4770      	bx	lr

08005e7c <__retarget_lock_release_recursive>:
 8005e7c:	4770      	bx	lr

08005e7e <memcpy>:
 8005e7e:	440a      	add	r2, r1
 8005e80:	4291      	cmp	r1, r2
 8005e82:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e86:	d100      	bne.n	8005e8a <memcpy+0xc>
 8005e88:	4770      	bx	lr
 8005e8a:	b510      	push	{r4, lr}
 8005e8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e94:	4291      	cmp	r1, r2
 8005e96:	d1f9      	bne.n	8005e8c <memcpy+0xe>
 8005e98:	bd10      	pop	{r4, pc}
	...

08005e9c <_free_r>:
 8005e9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e9e:	2900      	cmp	r1, #0
 8005ea0:	d044      	beq.n	8005f2c <_free_r+0x90>
 8005ea2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ea6:	9001      	str	r0, [sp, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f1a1 0404 	sub.w	r4, r1, #4
 8005eae:	bfb8      	it	lt
 8005eb0:	18e4      	addlt	r4, r4, r3
 8005eb2:	f000 f8df 	bl	8006074 <__malloc_lock>
 8005eb6:	4a1e      	ldr	r2, [pc, #120]	; (8005f30 <_free_r+0x94>)
 8005eb8:	9801      	ldr	r0, [sp, #4]
 8005eba:	6813      	ldr	r3, [r2, #0]
 8005ebc:	b933      	cbnz	r3, 8005ecc <_free_r+0x30>
 8005ebe:	6063      	str	r3, [r4, #4]
 8005ec0:	6014      	str	r4, [r2, #0]
 8005ec2:	b003      	add	sp, #12
 8005ec4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ec8:	f000 b8da 	b.w	8006080 <__malloc_unlock>
 8005ecc:	42a3      	cmp	r3, r4
 8005ece:	d908      	bls.n	8005ee2 <_free_r+0x46>
 8005ed0:	6825      	ldr	r5, [r4, #0]
 8005ed2:	1961      	adds	r1, r4, r5
 8005ed4:	428b      	cmp	r3, r1
 8005ed6:	bf01      	itttt	eq
 8005ed8:	6819      	ldreq	r1, [r3, #0]
 8005eda:	685b      	ldreq	r3, [r3, #4]
 8005edc:	1949      	addeq	r1, r1, r5
 8005ede:	6021      	streq	r1, [r4, #0]
 8005ee0:	e7ed      	b.n	8005ebe <_free_r+0x22>
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	b10b      	cbz	r3, 8005eec <_free_r+0x50>
 8005ee8:	42a3      	cmp	r3, r4
 8005eea:	d9fa      	bls.n	8005ee2 <_free_r+0x46>
 8005eec:	6811      	ldr	r1, [r2, #0]
 8005eee:	1855      	adds	r5, r2, r1
 8005ef0:	42a5      	cmp	r5, r4
 8005ef2:	d10b      	bne.n	8005f0c <_free_r+0x70>
 8005ef4:	6824      	ldr	r4, [r4, #0]
 8005ef6:	4421      	add	r1, r4
 8005ef8:	1854      	adds	r4, r2, r1
 8005efa:	42a3      	cmp	r3, r4
 8005efc:	6011      	str	r1, [r2, #0]
 8005efe:	d1e0      	bne.n	8005ec2 <_free_r+0x26>
 8005f00:	681c      	ldr	r4, [r3, #0]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	6053      	str	r3, [r2, #4]
 8005f06:	440c      	add	r4, r1
 8005f08:	6014      	str	r4, [r2, #0]
 8005f0a:	e7da      	b.n	8005ec2 <_free_r+0x26>
 8005f0c:	d902      	bls.n	8005f14 <_free_r+0x78>
 8005f0e:	230c      	movs	r3, #12
 8005f10:	6003      	str	r3, [r0, #0]
 8005f12:	e7d6      	b.n	8005ec2 <_free_r+0x26>
 8005f14:	6825      	ldr	r5, [r4, #0]
 8005f16:	1961      	adds	r1, r4, r5
 8005f18:	428b      	cmp	r3, r1
 8005f1a:	bf04      	itt	eq
 8005f1c:	6819      	ldreq	r1, [r3, #0]
 8005f1e:	685b      	ldreq	r3, [r3, #4]
 8005f20:	6063      	str	r3, [r4, #4]
 8005f22:	bf04      	itt	eq
 8005f24:	1949      	addeq	r1, r1, r5
 8005f26:	6021      	streq	r1, [r4, #0]
 8005f28:	6054      	str	r4, [r2, #4]
 8005f2a:	e7ca      	b.n	8005ec2 <_free_r+0x26>
 8005f2c:	b003      	add	sp, #12
 8005f2e:	bd30      	pop	{r4, r5, pc}
 8005f30:	20004c60 	.word	0x20004c60

08005f34 <sbrk_aligned>:
 8005f34:	b570      	push	{r4, r5, r6, lr}
 8005f36:	4e0e      	ldr	r6, [pc, #56]	; (8005f70 <sbrk_aligned+0x3c>)
 8005f38:	460c      	mov	r4, r1
 8005f3a:	6831      	ldr	r1, [r6, #0]
 8005f3c:	4605      	mov	r5, r0
 8005f3e:	b911      	cbnz	r1, 8005f46 <sbrk_aligned+0x12>
 8005f40:	f000 fcbc 	bl	80068bc <_sbrk_r>
 8005f44:	6030      	str	r0, [r6, #0]
 8005f46:	4621      	mov	r1, r4
 8005f48:	4628      	mov	r0, r5
 8005f4a:	f000 fcb7 	bl	80068bc <_sbrk_r>
 8005f4e:	1c43      	adds	r3, r0, #1
 8005f50:	d00a      	beq.n	8005f68 <sbrk_aligned+0x34>
 8005f52:	1cc4      	adds	r4, r0, #3
 8005f54:	f024 0403 	bic.w	r4, r4, #3
 8005f58:	42a0      	cmp	r0, r4
 8005f5a:	d007      	beq.n	8005f6c <sbrk_aligned+0x38>
 8005f5c:	1a21      	subs	r1, r4, r0
 8005f5e:	4628      	mov	r0, r5
 8005f60:	f000 fcac 	bl	80068bc <_sbrk_r>
 8005f64:	3001      	adds	r0, #1
 8005f66:	d101      	bne.n	8005f6c <sbrk_aligned+0x38>
 8005f68:	f04f 34ff 	mov.w	r4, #4294967295
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	bd70      	pop	{r4, r5, r6, pc}
 8005f70:	20004c64 	.word	0x20004c64

08005f74 <_malloc_r>:
 8005f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f78:	1ccd      	adds	r5, r1, #3
 8005f7a:	f025 0503 	bic.w	r5, r5, #3
 8005f7e:	3508      	adds	r5, #8
 8005f80:	2d0c      	cmp	r5, #12
 8005f82:	bf38      	it	cc
 8005f84:	250c      	movcc	r5, #12
 8005f86:	2d00      	cmp	r5, #0
 8005f88:	4607      	mov	r7, r0
 8005f8a:	db01      	blt.n	8005f90 <_malloc_r+0x1c>
 8005f8c:	42a9      	cmp	r1, r5
 8005f8e:	d905      	bls.n	8005f9c <_malloc_r+0x28>
 8005f90:	230c      	movs	r3, #12
 8005f92:	603b      	str	r3, [r7, #0]
 8005f94:	2600      	movs	r6, #0
 8005f96:	4630      	mov	r0, r6
 8005f98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006070 <_malloc_r+0xfc>
 8005fa0:	f000 f868 	bl	8006074 <__malloc_lock>
 8005fa4:	f8d8 3000 	ldr.w	r3, [r8]
 8005fa8:	461c      	mov	r4, r3
 8005faa:	bb5c      	cbnz	r4, 8006004 <_malloc_r+0x90>
 8005fac:	4629      	mov	r1, r5
 8005fae:	4638      	mov	r0, r7
 8005fb0:	f7ff ffc0 	bl	8005f34 <sbrk_aligned>
 8005fb4:	1c43      	adds	r3, r0, #1
 8005fb6:	4604      	mov	r4, r0
 8005fb8:	d155      	bne.n	8006066 <_malloc_r+0xf2>
 8005fba:	f8d8 4000 	ldr.w	r4, [r8]
 8005fbe:	4626      	mov	r6, r4
 8005fc0:	2e00      	cmp	r6, #0
 8005fc2:	d145      	bne.n	8006050 <_malloc_r+0xdc>
 8005fc4:	2c00      	cmp	r4, #0
 8005fc6:	d048      	beq.n	800605a <_malloc_r+0xe6>
 8005fc8:	6823      	ldr	r3, [r4, #0]
 8005fca:	4631      	mov	r1, r6
 8005fcc:	4638      	mov	r0, r7
 8005fce:	eb04 0903 	add.w	r9, r4, r3
 8005fd2:	f000 fc73 	bl	80068bc <_sbrk_r>
 8005fd6:	4581      	cmp	r9, r0
 8005fd8:	d13f      	bne.n	800605a <_malloc_r+0xe6>
 8005fda:	6821      	ldr	r1, [r4, #0]
 8005fdc:	1a6d      	subs	r5, r5, r1
 8005fde:	4629      	mov	r1, r5
 8005fe0:	4638      	mov	r0, r7
 8005fe2:	f7ff ffa7 	bl	8005f34 <sbrk_aligned>
 8005fe6:	3001      	adds	r0, #1
 8005fe8:	d037      	beq.n	800605a <_malloc_r+0xe6>
 8005fea:	6823      	ldr	r3, [r4, #0]
 8005fec:	442b      	add	r3, r5
 8005fee:	6023      	str	r3, [r4, #0]
 8005ff0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d038      	beq.n	800606a <_malloc_r+0xf6>
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	42a2      	cmp	r2, r4
 8005ffc:	d12b      	bne.n	8006056 <_malloc_r+0xe2>
 8005ffe:	2200      	movs	r2, #0
 8006000:	605a      	str	r2, [r3, #4]
 8006002:	e00f      	b.n	8006024 <_malloc_r+0xb0>
 8006004:	6822      	ldr	r2, [r4, #0]
 8006006:	1b52      	subs	r2, r2, r5
 8006008:	d41f      	bmi.n	800604a <_malloc_r+0xd6>
 800600a:	2a0b      	cmp	r2, #11
 800600c:	d917      	bls.n	800603e <_malloc_r+0xca>
 800600e:	1961      	adds	r1, r4, r5
 8006010:	42a3      	cmp	r3, r4
 8006012:	6025      	str	r5, [r4, #0]
 8006014:	bf18      	it	ne
 8006016:	6059      	strne	r1, [r3, #4]
 8006018:	6863      	ldr	r3, [r4, #4]
 800601a:	bf08      	it	eq
 800601c:	f8c8 1000 	streq.w	r1, [r8]
 8006020:	5162      	str	r2, [r4, r5]
 8006022:	604b      	str	r3, [r1, #4]
 8006024:	4638      	mov	r0, r7
 8006026:	f104 060b 	add.w	r6, r4, #11
 800602a:	f000 f829 	bl	8006080 <__malloc_unlock>
 800602e:	f026 0607 	bic.w	r6, r6, #7
 8006032:	1d23      	adds	r3, r4, #4
 8006034:	1af2      	subs	r2, r6, r3
 8006036:	d0ae      	beq.n	8005f96 <_malloc_r+0x22>
 8006038:	1b9b      	subs	r3, r3, r6
 800603a:	50a3      	str	r3, [r4, r2]
 800603c:	e7ab      	b.n	8005f96 <_malloc_r+0x22>
 800603e:	42a3      	cmp	r3, r4
 8006040:	6862      	ldr	r2, [r4, #4]
 8006042:	d1dd      	bne.n	8006000 <_malloc_r+0x8c>
 8006044:	f8c8 2000 	str.w	r2, [r8]
 8006048:	e7ec      	b.n	8006024 <_malloc_r+0xb0>
 800604a:	4623      	mov	r3, r4
 800604c:	6864      	ldr	r4, [r4, #4]
 800604e:	e7ac      	b.n	8005faa <_malloc_r+0x36>
 8006050:	4634      	mov	r4, r6
 8006052:	6876      	ldr	r6, [r6, #4]
 8006054:	e7b4      	b.n	8005fc0 <_malloc_r+0x4c>
 8006056:	4613      	mov	r3, r2
 8006058:	e7cc      	b.n	8005ff4 <_malloc_r+0x80>
 800605a:	230c      	movs	r3, #12
 800605c:	603b      	str	r3, [r7, #0]
 800605e:	4638      	mov	r0, r7
 8006060:	f000 f80e 	bl	8006080 <__malloc_unlock>
 8006064:	e797      	b.n	8005f96 <_malloc_r+0x22>
 8006066:	6025      	str	r5, [r4, #0]
 8006068:	e7dc      	b.n	8006024 <_malloc_r+0xb0>
 800606a:	605b      	str	r3, [r3, #4]
 800606c:	deff      	udf	#255	; 0xff
 800606e:	bf00      	nop
 8006070:	20004c60 	.word	0x20004c60

08006074 <__malloc_lock>:
 8006074:	4801      	ldr	r0, [pc, #4]	; (800607c <__malloc_lock+0x8>)
 8006076:	f7ff bf00 	b.w	8005e7a <__retarget_lock_acquire_recursive>
 800607a:	bf00      	nop
 800607c:	20004c5c 	.word	0x20004c5c

08006080 <__malloc_unlock>:
 8006080:	4801      	ldr	r0, [pc, #4]	; (8006088 <__malloc_unlock+0x8>)
 8006082:	f7ff befb 	b.w	8005e7c <__retarget_lock_release_recursive>
 8006086:	bf00      	nop
 8006088:	20004c5c 	.word	0x20004c5c

0800608c <__sfputc_r>:
 800608c:	6893      	ldr	r3, [r2, #8]
 800608e:	3b01      	subs	r3, #1
 8006090:	2b00      	cmp	r3, #0
 8006092:	b410      	push	{r4}
 8006094:	6093      	str	r3, [r2, #8]
 8006096:	da08      	bge.n	80060aa <__sfputc_r+0x1e>
 8006098:	6994      	ldr	r4, [r2, #24]
 800609a:	42a3      	cmp	r3, r4
 800609c:	db01      	blt.n	80060a2 <__sfputc_r+0x16>
 800609e:	290a      	cmp	r1, #10
 80060a0:	d103      	bne.n	80060aa <__sfputc_r+0x1e>
 80060a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060a6:	f000 bb73 	b.w	8006790 <__swbuf_r>
 80060aa:	6813      	ldr	r3, [r2, #0]
 80060ac:	1c58      	adds	r0, r3, #1
 80060ae:	6010      	str	r0, [r2, #0]
 80060b0:	7019      	strb	r1, [r3, #0]
 80060b2:	4608      	mov	r0, r1
 80060b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <__sfputs_r>:
 80060ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060bc:	4606      	mov	r6, r0
 80060be:	460f      	mov	r7, r1
 80060c0:	4614      	mov	r4, r2
 80060c2:	18d5      	adds	r5, r2, r3
 80060c4:	42ac      	cmp	r4, r5
 80060c6:	d101      	bne.n	80060cc <__sfputs_r+0x12>
 80060c8:	2000      	movs	r0, #0
 80060ca:	e007      	b.n	80060dc <__sfputs_r+0x22>
 80060cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060d0:	463a      	mov	r2, r7
 80060d2:	4630      	mov	r0, r6
 80060d4:	f7ff ffda 	bl	800608c <__sfputc_r>
 80060d8:	1c43      	adds	r3, r0, #1
 80060da:	d1f3      	bne.n	80060c4 <__sfputs_r+0xa>
 80060dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080060e0 <_vfiprintf_r>:
 80060e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e4:	460d      	mov	r5, r1
 80060e6:	b09d      	sub	sp, #116	; 0x74
 80060e8:	4614      	mov	r4, r2
 80060ea:	4698      	mov	r8, r3
 80060ec:	4606      	mov	r6, r0
 80060ee:	b118      	cbz	r0, 80060f8 <_vfiprintf_r+0x18>
 80060f0:	6a03      	ldr	r3, [r0, #32]
 80060f2:	b90b      	cbnz	r3, 80060f8 <_vfiprintf_r+0x18>
 80060f4:	f7ff fd66 	bl	8005bc4 <__sinit>
 80060f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060fa:	07d9      	lsls	r1, r3, #31
 80060fc:	d405      	bmi.n	800610a <_vfiprintf_r+0x2a>
 80060fe:	89ab      	ldrh	r3, [r5, #12]
 8006100:	059a      	lsls	r2, r3, #22
 8006102:	d402      	bmi.n	800610a <_vfiprintf_r+0x2a>
 8006104:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006106:	f7ff feb8 	bl	8005e7a <__retarget_lock_acquire_recursive>
 800610a:	89ab      	ldrh	r3, [r5, #12]
 800610c:	071b      	lsls	r3, r3, #28
 800610e:	d501      	bpl.n	8006114 <_vfiprintf_r+0x34>
 8006110:	692b      	ldr	r3, [r5, #16]
 8006112:	b99b      	cbnz	r3, 800613c <_vfiprintf_r+0x5c>
 8006114:	4629      	mov	r1, r5
 8006116:	4630      	mov	r0, r6
 8006118:	f000 fb78 	bl	800680c <__swsetup_r>
 800611c:	b170      	cbz	r0, 800613c <_vfiprintf_r+0x5c>
 800611e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006120:	07dc      	lsls	r4, r3, #31
 8006122:	d504      	bpl.n	800612e <_vfiprintf_r+0x4e>
 8006124:	f04f 30ff 	mov.w	r0, #4294967295
 8006128:	b01d      	add	sp, #116	; 0x74
 800612a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800612e:	89ab      	ldrh	r3, [r5, #12]
 8006130:	0598      	lsls	r0, r3, #22
 8006132:	d4f7      	bmi.n	8006124 <_vfiprintf_r+0x44>
 8006134:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006136:	f7ff fea1 	bl	8005e7c <__retarget_lock_release_recursive>
 800613a:	e7f3      	b.n	8006124 <_vfiprintf_r+0x44>
 800613c:	2300      	movs	r3, #0
 800613e:	9309      	str	r3, [sp, #36]	; 0x24
 8006140:	2320      	movs	r3, #32
 8006142:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006146:	f8cd 800c 	str.w	r8, [sp, #12]
 800614a:	2330      	movs	r3, #48	; 0x30
 800614c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006300 <_vfiprintf_r+0x220>
 8006150:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006154:	f04f 0901 	mov.w	r9, #1
 8006158:	4623      	mov	r3, r4
 800615a:	469a      	mov	sl, r3
 800615c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006160:	b10a      	cbz	r2, 8006166 <_vfiprintf_r+0x86>
 8006162:	2a25      	cmp	r2, #37	; 0x25
 8006164:	d1f9      	bne.n	800615a <_vfiprintf_r+0x7a>
 8006166:	ebba 0b04 	subs.w	fp, sl, r4
 800616a:	d00b      	beq.n	8006184 <_vfiprintf_r+0xa4>
 800616c:	465b      	mov	r3, fp
 800616e:	4622      	mov	r2, r4
 8006170:	4629      	mov	r1, r5
 8006172:	4630      	mov	r0, r6
 8006174:	f7ff ffa1 	bl	80060ba <__sfputs_r>
 8006178:	3001      	adds	r0, #1
 800617a:	f000 80a9 	beq.w	80062d0 <_vfiprintf_r+0x1f0>
 800617e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006180:	445a      	add	r2, fp
 8006182:	9209      	str	r2, [sp, #36]	; 0x24
 8006184:	f89a 3000 	ldrb.w	r3, [sl]
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 80a1 	beq.w	80062d0 <_vfiprintf_r+0x1f0>
 800618e:	2300      	movs	r3, #0
 8006190:	f04f 32ff 	mov.w	r2, #4294967295
 8006194:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006198:	f10a 0a01 	add.w	sl, sl, #1
 800619c:	9304      	str	r3, [sp, #16]
 800619e:	9307      	str	r3, [sp, #28]
 80061a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061a4:	931a      	str	r3, [sp, #104]	; 0x68
 80061a6:	4654      	mov	r4, sl
 80061a8:	2205      	movs	r2, #5
 80061aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061ae:	4854      	ldr	r0, [pc, #336]	; (8006300 <_vfiprintf_r+0x220>)
 80061b0:	f7fa f81e 	bl	80001f0 <memchr>
 80061b4:	9a04      	ldr	r2, [sp, #16]
 80061b6:	b9d8      	cbnz	r0, 80061f0 <_vfiprintf_r+0x110>
 80061b8:	06d1      	lsls	r1, r2, #27
 80061ba:	bf44      	itt	mi
 80061bc:	2320      	movmi	r3, #32
 80061be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061c2:	0713      	lsls	r3, r2, #28
 80061c4:	bf44      	itt	mi
 80061c6:	232b      	movmi	r3, #43	; 0x2b
 80061c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061cc:	f89a 3000 	ldrb.w	r3, [sl]
 80061d0:	2b2a      	cmp	r3, #42	; 0x2a
 80061d2:	d015      	beq.n	8006200 <_vfiprintf_r+0x120>
 80061d4:	9a07      	ldr	r2, [sp, #28]
 80061d6:	4654      	mov	r4, sl
 80061d8:	2000      	movs	r0, #0
 80061da:	f04f 0c0a 	mov.w	ip, #10
 80061de:	4621      	mov	r1, r4
 80061e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061e4:	3b30      	subs	r3, #48	; 0x30
 80061e6:	2b09      	cmp	r3, #9
 80061e8:	d94d      	bls.n	8006286 <_vfiprintf_r+0x1a6>
 80061ea:	b1b0      	cbz	r0, 800621a <_vfiprintf_r+0x13a>
 80061ec:	9207      	str	r2, [sp, #28]
 80061ee:	e014      	b.n	800621a <_vfiprintf_r+0x13a>
 80061f0:	eba0 0308 	sub.w	r3, r0, r8
 80061f4:	fa09 f303 	lsl.w	r3, r9, r3
 80061f8:	4313      	orrs	r3, r2
 80061fa:	9304      	str	r3, [sp, #16]
 80061fc:	46a2      	mov	sl, r4
 80061fe:	e7d2      	b.n	80061a6 <_vfiprintf_r+0xc6>
 8006200:	9b03      	ldr	r3, [sp, #12]
 8006202:	1d19      	adds	r1, r3, #4
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	9103      	str	r1, [sp, #12]
 8006208:	2b00      	cmp	r3, #0
 800620a:	bfbb      	ittet	lt
 800620c:	425b      	neglt	r3, r3
 800620e:	f042 0202 	orrlt.w	r2, r2, #2
 8006212:	9307      	strge	r3, [sp, #28]
 8006214:	9307      	strlt	r3, [sp, #28]
 8006216:	bfb8      	it	lt
 8006218:	9204      	strlt	r2, [sp, #16]
 800621a:	7823      	ldrb	r3, [r4, #0]
 800621c:	2b2e      	cmp	r3, #46	; 0x2e
 800621e:	d10c      	bne.n	800623a <_vfiprintf_r+0x15a>
 8006220:	7863      	ldrb	r3, [r4, #1]
 8006222:	2b2a      	cmp	r3, #42	; 0x2a
 8006224:	d134      	bne.n	8006290 <_vfiprintf_r+0x1b0>
 8006226:	9b03      	ldr	r3, [sp, #12]
 8006228:	1d1a      	adds	r2, r3, #4
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	9203      	str	r2, [sp, #12]
 800622e:	2b00      	cmp	r3, #0
 8006230:	bfb8      	it	lt
 8006232:	f04f 33ff 	movlt.w	r3, #4294967295
 8006236:	3402      	adds	r4, #2
 8006238:	9305      	str	r3, [sp, #20]
 800623a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006310 <_vfiprintf_r+0x230>
 800623e:	7821      	ldrb	r1, [r4, #0]
 8006240:	2203      	movs	r2, #3
 8006242:	4650      	mov	r0, sl
 8006244:	f7f9 ffd4 	bl	80001f0 <memchr>
 8006248:	b138      	cbz	r0, 800625a <_vfiprintf_r+0x17a>
 800624a:	9b04      	ldr	r3, [sp, #16]
 800624c:	eba0 000a 	sub.w	r0, r0, sl
 8006250:	2240      	movs	r2, #64	; 0x40
 8006252:	4082      	lsls	r2, r0
 8006254:	4313      	orrs	r3, r2
 8006256:	3401      	adds	r4, #1
 8006258:	9304      	str	r3, [sp, #16]
 800625a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800625e:	4829      	ldr	r0, [pc, #164]	; (8006304 <_vfiprintf_r+0x224>)
 8006260:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006264:	2206      	movs	r2, #6
 8006266:	f7f9 ffc3 	bl	80001f0 <memchr>
 800626a:	2800      	cmp	r0, #0
 800626c:	d03f      	beq.n	80062ee <_vfiprintf_r+0x20e>
 800626e:	4b26      	ldr	r3, [pc, #152]	; (8006308 <_vfiprintf_r+0x228>)
 8006270:	bb1b      	cbnz	r3, 80062ba <_vfiprintf_r+0x1da>
 8006272:	9b03      	ldr	r3, [sp, #12]
 8006274:	3307      	adds	r3, #7
 8006276:	f023 0307 	bic.w	r3, r3, #7
 800627a:	3308      	adds	r3, #8
 800627c:	9303      	str	r3, [sp, #12]
 800627e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006280:	443b      	add	r3, r7
 8006282:	9309      	str	r3, [sp, #36]	; 0x24
 8006284:	e768      	b.n	8006158 <_vfiprintf_r+0x78>
 8006286:	fb0c 3202 	mla	r2, ip, r2, r3
 800628a:	460c      	mov	r4, r1
 800628c:	2001      	movs	r0, #1
 800628e:	e7a6      	b.n	80061de <_vfiprintf_r+0xfe>
 8006290:	2300      	movs	r3, #0
 8006292:	3401      	adds	r4, #1
 8006294:	9305      	str	r3, [sp, #20]
 8006296:	4619      	mov	r1, r3
 8006298:	f04f 0c0a 	mov.w	ip, #10
 800629c:	4620      	mov	r0, r4
 800629e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062a2:	3a30      	subs	r2, #48	; 0x30
 80062a4:	2a09      	cmp	r2, #9
 80062a6:	d903      	bls.n	80062b0 <_vfiprintf_r+0x1d0>
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d0c6      	beq.n	800623a <_vfiprintf_r+0x15a>
 80062ac:	9105      	str	r1, [sp, #20]
 80062ae:	e7c4      	b.n	800623a <_vfiprintf_r+0x15a>
 80062b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80062b4:	4604      	mov	r4, r0
 80062b6:	2301      	movs	r3, #1
 80062b8:	e7f0      	b.n	800629c <_vfiprintf_r+0x1bc>
 80062ba:	ab03      	add	r3, sp, #12
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	462a      	mov	r2, r5
 80062c0:	4b12      	ldr	r3, [pc, #72]	; (800630c <_vfiprintf_r+0x22c>)
 80062c2:	a904      	add	r1, sp, #16
 80062c4:	4630      	mov	r0, r6
 80062c6:	f3af 8000 	nop.w
 80062ca:	4607      	mov	r7, r0
 80062cc:	1c78      	adds	r0, r7, #1
 80062ce:	d1d6      	bne.n	800627e <_vfiprintf_r+0x19e>
 80062d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062d2:	07d9      	lsls	r1, r3, #31
 80062d4:	d405      	bmi.n	80062e2 <_vfiprintf_r+0x202>
 80062d6:	89ab      	ldrh	r3, [r5, #12]
 80062d8:	059a      	lsls	r2, r3, #22
 80062da:	d402      	bmi.n	80062e2 <_vfiprintf_r+0x202>
 80062dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062de:	f7ff fdcd 	bl	8005e7c <__retarget_lock_release_recursive>
 80062e2:	89ab      	ldrh	r3, [r5, #12]
 80062e4:	065b      	lsls	r3, r3, #25
 80062e6:	f53f af1d 	bmi.w	8006124 <_vfiprintf_r+0x44>
 80062ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062ec:	e71c      	b.n	8006128 <_vfiprintf_r+0x48>
 80062ee:	ab03      	add	r3, sp, #12
 80062f0:	9300      	str	r3, [sp, #0]
 80062f2:	462a      	mov	r2, r5
 80062f4:	4b05      	ldr	r3, [pc, #20]	; (800630c <_vfiprintf_r+0x22c>)
 80062f6:	a904      	add	r1, sp, #16
 80062f8:	4630      	mov	r0, r6
 80062fa:	f000 f879 	bl	80063f0 <_printf_i>
 80062fe:	e7e4      	b.n	80062ca <_vfiprintf_r+0x1ea>
 8006300:	08006b14 	.word	0x08006b14
 8006304:	08006b1e 	.word	0x08006b1e
 8006308:	00000000 	.word	0x00000000
 800630c:	080060bb 	.word	0x080060bb
 8006310:	08006b1a 	.word	0x08006b1a

08006314 <_printf_common>:
 8006314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006318:	4616      	mov	r6, r2
 800631a:	4699      	mov	r9, r3
 800631c:	688a      	ldr	r2, [r1, #8]
 800631e:	690b      	ldr	r3, [r1, #16]
 8006320:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006324:	4293      	cmp	r3, r2
 8006326:	bfb8      	it	lt
 8006328:	4613      	movlt	r3, r2
 800632a:	6033      	str	r3, [r6, #0]
 800632c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006330:	4607      	mov	r7, r0
 8006332:	460c      	mov	r4, r1
 8006334:	b10a      	cbz	r2, 800633a <_printf_common+0x26>
 8006336:	3301      	adds	r3, #1
 8006338:	6033      	str	r3, [r6, #0]
 800633a:	6823      	ldr	r3, [r4, #0]
 800633c:	0699      	lsls	r1, r3, #26
 800633e:	bf42      	ittt	mi
 8006340:	6833      	ldrmi	r3, [r6, #0]
 8006342:	3302      	addmi	r3, #2
 8006344:	6033      	strmi	r3, [r6, #0]
 8006346:	6825      	ldr	r5, [r4, #0]
 8006348:	f015 0506 	ands.w	r5, r5, #6
 800634c:	d106      	bne.n	800635c <_printf_common+0x48>
 800634e:	f104 0a19 	add.w	sl, r4, #25
 8006352:	68e3      	ldr	r3, [r4, #12]
 8006354:	6832      	ldr	r2, [r6, #0]
 8006356:	1a9b      	subs	r3, r3, r2
 8006358:	42ab      	cmp	r3, r5
 800635a:	dc26      	bgt.n	80063aa <_printf_common+0x96>
 800635c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006360:	1e13      	subs	r3, r2, #0
 8006362:	6822      	ldr	r2, [r4, #0]
 8006364:	bf18      	it	ne
 8006366:	2301      	movne	r3, #1
 8006368:	0692      	lsls	r2, r2, #26
 800636a:	d42b      	bmi.n	80063c4 <_printf_common+0xb0>
 800636c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006370:	4649      	mov	r1, r9
 8006372:	4638      	mov	r0, r7
 8006374:	47c0      	blx	r8
 8006376:	3001      	adds	r0, #1
 8006378:	d01e      	beq.n	80063b8 <_printf_common+0xa4>
 800637a:	6823      	ldr	r3, [r4, #0]
 800637c:	6922      	ldr	r2, [r4, #16]
 800637e:	f003 0306 	and.w	r3, r3, #6
 8006382:	2b04      	cmp	r3, #4
 8006384:	bf02      	ittt	eq
 8006386:	68e5      	ldreq	r5, [r4, #12]
 8006388:	6833      	ldreq	r3, [r6, #0]
 800638a:	1aed      	subeq	r5, r5, r3
 800638c:	68a3      	ldr	r3, [r4, #8]
 800638e:	bf0c      	ite	eq
 8006390:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006394:	2500      	movne	r5, #0
 8006396:	4293      	cmp	r3, r2
 8006398:	bfc4      	itt	gt
 800639a:	1a9b      	subgt	r3, r3, r2
 800639c:	18ed      	addgt	r5, r5, r3
 800639e:	2600      	movs	r6, #0
 80063a0:	341a      	adds	r4, #26
 80063a2:	42b5      	cmp	r5, r6
 80063a4:	d11a      	bne.n	80063dc <_printf_common+0xc8>
 80063a6:	2000      	movs	r0, #0
 80063a8:	e008      	b.n	80063bc <_printf_common+0xa8>
 80063aa:	2301      	movs	r3, #1
 80063ac:	4652      	mov	r2, sl
 80063ae:	4649      	mov	r1, r9
 80063b0:	4638      	mov	r0, r7
 80063b2:	47c0      	blx	r8
 80063b4:	3001      	adds	r0, #1
 80063b6:	d103      	bne.n	80063c0 <_printf_common+0xac>
 80063b8:	f04f 30ff 	mov.w	r0, #4294967295
 80063bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063c0:	3501      	adds	r5, #1
 80063c2:	e7c6      	b.n	8006352 <_printf_common+0x3e>
 80063c4:	18e1      	adds	r1, r4, r3
 80063c6:	1c5a      	adds	r2, r3, #1
 80063c8:	2030      	movs	r0, #48	; 0x30
 80063ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063ce:	4422      	add	r2, r4
 80063d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063d8:	3302      	adds	r3, #2
 80063da:	e7c7      	b.n	800636c <_printf_common+0x58>
 80063dc:	2301      	movs	r3, #1
 80063de:	4622      	mov	r2, r4
 80063e0:	4649      	mov	r1, r9
 80063e2:	4638      	mov	r0, r7
 80063e4:	47c0      	blx	r8
 80063e6:	3001      	adds	r0, #1
 80063e8:	d0e6      	beq.n	80063b8 <_printf_common+0xa4>
 80063ea:	3601      	adds	r6, #1
 80063ec:	e7d9      	b.n	80063a2 <_printf_common+0x8e>
	...

080063f0 <_printf_i>:
 80063f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063f4:	7e0f      	ldrb	r7, [r1, #24]
 80063f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063f8:	2f78      	cmp	r7, #120	; 0x78
 80063fa:	4691      	mov	r9, r2
 80063fc:	4680      	mov	r8, r0
 80063fe:	460c      	mov	r4, r1
 8006400:	469a      	mov	sl, r3
 8006402:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006406:	d807      	bhi.n	8006418 <_printf_i+0x28>
 8006408:	2f62      	cmp	r7, #98	; 0x62
 800640a:	d80a      	bhi.n	8006422 <_printf_i+0x32>
 800640c:	2f00      	cmp	r7, #0
 800640e:	f000 80d4 	beq.w	80065ba <_printf_i+0x1ca>
 8006412:	2f58      	cmp	r7, #88	; 0x58
 8006414:	f000 80c0 	beq.w	8006598 <_printf_i+0x1a8>
 8006418:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800641c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006420:	e03a      	b.n	8006498 <_printf_i+0xa8>
 8006422:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006426:	2b15      	cmp	r3, #21
 8006428:	d8f6      	bhi.n	8006418 <_printf_i+0x28>
 800642a:	a101      	add	r1, pc, #4	; (adr r1, 8006430 <_printf_i+0x40>)
 800642c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006430:	08006489 	.word	0x08006489
 8006434:	0800649d 	.word	0x0800649d
 8006438:	08006419 	.word	0x08006419
 800643c:	08006419 	.word	0x08006419
 8006440:	08006419 	.word	0x08006419
 8006444:	08006419 	.word	0x08006419
 8006448:	0800649d 	.word	0x0800649d
 800644c:	08006419 	.word	0x08006419
 8006450:	08006419 	.word	0x08006419
 8006454:	08006419 	.word	0x08006419
 8006458:	08006419 	.word	0x08006419
 800645c:	080065a1 	.word	0x080065a1
 8006460:	080064c9 	.word	0x080064c9
 8006464:	0800655b 	.word	0x0800655b
 8006468:	08006419 	.word	0x08006419
 800646c:	08006419 	.word	0x08006419
 8006470:	080065c3 	.word	0x080065c3
 8006474:	08006419 	.word	0x08006419
 8006478:	080064c9 	.word	0x080064c9
 800647c:	08006419 	.word	0x08006419
 8006480:	08006419 	.word	0x08006419
 8006484:	08006563 	.word	0x08006563
 8006488:	682b      	ldr	r3, [r5, #0]
 800648a:	1d1a      	adds	r2, r3, #4
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	602a      	str	r2, [r5, #0]
 8006490:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006494:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006498:	2301      	movs	r3, #1
 800649a:	e09f      	b.n	80065dc <_printf_i+0x1ec>
 800649c:	6820      	ldr	r0, [r4, #0]
 800649e:	682b      	ldr	r3, [r5, #0]
 80064a0:	0607      	lsls	r7, r0, #24
 80064a2:	f103 0104 	add.w	r1, r3, #4
 80064a6:	6029      	str	r1, [r5, #0]
 80064a8:	d501      	bpl.n	80064ae <_printf_i+0xbe>
 80064aa:	681e      	ldr	r6, [r3, #0]
 80064ac:	e003      	b.n	80064b6 <_printf_i+0xc6>
 80064ae:	0646      	lsls	r6, r0, #25
 80064b0:	d5fb      	bpl.n	80064aa <_printf_i+0xba>
 80064b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80064b6:	2e00      	cmp	r6, #0
 80064b8:	da03      	bge.n	80064c2 <_printf_i+0xd2>
 80064ba:	232d      	movs	r3, #45	; 0x2d
 80064bc:	4276      	negs	r6, r6
 80064be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064c2:	485a      	ldr	r0, [pc, #360]	; (800662c <_printf_i+0x23c>)
 80064c4:	230a      	movs	r3, #10
 80064c6:	e012      	b.n	80064ee <_printf_i+0xfe>
 80064c8:	682b      	ldr	r3, [r5, #0]
 80064ca:	6820      	ldr	r0, [r4, #0]
 80064cc:	1d19      	adds	r1, r3, #4
 80064ce:	6029      	str	r1, [r5, #0]
 80064d0:	0605      	lsls	r5, r0, #24
 80064d2:	d501      	bpl.n	80064d8 <_printf_i+0xe8>
 80064d4:	681e      	ldr	r6, [r3, #0]
 80064d6:	e002      	b.n	80064de <_printf_i+0xee>
 80064d8:	0641      	lsls	r1, r0, #25
 80064da:	d5fb      	bpl.n	80064d4 <_printf_i+0xe4>
 80064dc:	881e      	ldrh	r6, [r3, #0]
 80064de:	4853      	ldr	r0, [pc, #332]	; (800662c <_printf_i+0x23c>)
 80064e0:	2f6f      	cmp	r7, #111	; 0x6f
 80064e2:	bf0c      	ite	eq
 80064e4:	2308      	moveq	r3, #8
 80064e6:	230a      	movne	r3, #10
 80064e8:	2100      	movs	r1, #0
 80064ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064ee:	6865      	ldr	r5, [r4, #4]
 80064f0:	60a5      	str	r5, [r4, #8]
 80064f2:	2d00      	cmp	r5, #0
 80064f4:	bfa2      	ittt	ge
 80064f6:	6821      	ldrge	r1, [r4, #0]
 80064f8:	f021 0104 	bicge.w	r1, r1, #4
 80064fc:	6021      	strge	r1, [r4, #0]
 80064fe:	b90e      	cbnz	r6, 8006504 <_printf_i+0x114>
 8006500:	2d00      	cmp	r5, #0
 8006502:	d04b      	beq.n	800659c <_printf_i+0x1ac>
 8006504:	4615      	mov	r5, r2
 8006506:	fbb6 f1f3 	udiv	r1, r6, r3
 800650a:	fb03 6711 	mls	r7, r3, r1, r6
 800650e:	5dc7      	ldrb	r7, [r0, r7]
 8006510:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006514:	4637      	mov	r7, r6
 8006516:	42bb      	cmp	r3, r7
 8006518:	460e      	mov	r6, r1
 800651a:	d9f4      	bls.n	8006506 <_printf_i+0x116>
 800651c:	2b08      	cmp	r3, #8
 800651e:	d10b      	bne.n	8006538 <_printf_i+0x148>
 8006520:	6823      	ldr	r3, [r4, #0]
 8006522:	07de      	lsls	r6, r3, #31
 8006524:	d508      	bpl.n	8006538 <_printf_i+0x148>
 8006526:	6923      	ldr	r3, [r4, #16]
 8006528:	6861      	ldr	r1, [r4, #4]
 800652a:	4299      	cmp	r1, r3
 800652c:	bfde      	ittt	le
 800652e:	2330      	movle	r3, #48	; 0x30
 8006530:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006534:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006538:	1b52      	subs	r2, r2, r5
 800653a:	6122      	str	r2, [r4, #16]
 800653c:	f8cd a000 	str.w	sl, [sp]
 8006540:	464b      	mov	r3, r9
 8006542:	aa03      	add	r2, sp, #12
 8006544:	4621      	mov	r1, r4
 8006546:	4640      	mov	r0, r8
 8006548:	f7ff fee4 	bl	8006314 <_printf_common>
 800654c:	3001      	adds	r0, #1
 800654e:	d14a      	bne.n	80065e6 <_printf_i+0x1f6>
 8006550:	f04f 30ff 	mov.w	r0, #4294967295
 8006554:	b004      	add	sp, #16
 8006556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800655a:	6823      	ldr	r3, [r4, #0]
 800655c:	f043 0320 	orr.w	r3, r3, #32
 8006560:	6023      	str	r3, [r4, #0]
 8006562:	4833      	ldr	r0, [pc, #204]	; (8006630 <_printf_i+0x240>)
 8006564:	2778      	movs	r7, #120	; 0x78
 8006566:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800656a:	6823      	ldr	r3, [r4, #0]
 800656c:	6829      	ldr	r1, [r5, #0]
 800656e:	061f      	lsls	r7, r3, #24
 8006570:	f851 6b04 	ldr.w	r6, [r1], #4
 8006574:	d402      	bmi.n	800657c <_printf_i+0x18c>
 8006576:	065f      	lsls	r7, r3, #25
 8006578:	bf48      	it	mi
 800657a:	b2b6      	uxthmi	r6, r6
 800657c:	07df      	lsls	r7, r3, #31
 800657e:	bf48      	it	mi
 8006580:	f043 0320 	orrmi.w	r3, r3, #32
 8006584:	6029      	str	r1, [r5, #0]
 8006586:	bf48      	it	mi
 8006588:	6023      	strmi	r3, [r4, #0]
 800658a:	b91e      	cbnz	r6, 8006594 <_printf_i+0x1a4>
 800658c:	6823      	ldr	r3, [r4, #0]
 800658e:	f023 0320 	bic.w	r3, r3, #32
 8006592:	6023      	str	r3, [r4, #0]
 8006594:	2310      	movs	r3, #16
 8006596:	e7a7      	b.n	80064e8 <_printf_i+0xf8>
 8006598:	4824      	ldr	r0, [pc, #144]	; (800662c <_printf_i+0x23c>)
 800659a:	e7e4      	b.n	8006566 <_printf_i+0x176>
 800659c:	4615      	mov	r5, r2
 800659e:	e7bd      	b.n	800651c <_printf_i+0x12c>
 80065a0:	682b      	ldr	r3, [r5, #0]
 80065a2:	6826      	ldr	r6, [r4, #0]
 80065a4:	6961      	ldr	r1, [r4, #20]
 80065a6:	1d18      	adds	r0, r3, #4
 80065a8:	6028      	str	r0, [r5, #0]
 80065aa:	0635      	lsls	r5, r6, #24
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	d501      	bpl.n	80065b4 <_printf_i+0x1c4>
 80065b0:	6019      	str	r1, [r3, #0]
 80065b2:	e002      	b.n	80065ba <_printf_i+0x1ca>
 80065b4:	0670      	lsls	r0, r6, #25
 80065b6:	d5fb      	bpl.n	80065b0 <_printf_i+0x1c0>
 80065b8:	8019      	strh	r1, [r3, #0]
 80065ba:	2300      	movs	r3, #0
 80065bc:	6123      	str	r3, [r4, #16]
 80065be:	4615      	mov	r5, r2
 80065c0:	e7bc      	b.n	800653c <_printf_i+0x14c>
 80065c2:	682b      	ldr	r3, [r5, #0]
 80065c4:	1d1a      	adds	r2, r3, #4
 80065c6:	602a      	str	r2, [r5, #0]
 80065c8:	681d      	ldr	r5, [r3, #0]
 80065ca:	6862      	ldr	r2, [r4, #4]
 80065cc:	2100      	movs	r1, #0
 80065ce:	4628      	mov	r0, r5
 80065d0:	f7f9 fe0e 	bl	80001f0 <memchr>
 80065d4:	b108      	cbz	r0, 80065da <_printf_i+0x1ea>
 80065d6:	1b40      	subs	r0, r0, r5
 80065d8:	6060      	str	r0, [r4, #4]
 80065da:	6863      	ldr	r3, [r4, #4]
 80065dc:	6123      	str	r3, [r4, #16]
 80065de:	2300      	movs	r3, #0
 80065e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065e4:	e7aa      	b.n	800653c <_printf_i+0x14c>
 80065e6:	6923      	ldr	r3, [r4, #16]
 80065e8:	462a      	mov	r2, r5
 80065ea:	4649      	mov	r1, r9
 80065ec:	4640      	mov	r0, r8
 80065ee:	47d0      	blx	sl
 80065f0:	3001      	adds	r0, #1
 80065f2:	d0ad      	beq.n	8006550 <_printf_i+0x160>
 80065f4:	6823      	ldr	r3, [r4, #0]
 80065f6:	079b      	lsls	r3, r3, #30
 80065f8:	d413      	bmi.n	8006622 <_printf_i+0x232>
 80065fa:	68e0      	ldr	r0, [r4, #12]
 80065fc:	9b03      	ldr	r3, [sp, #12]
 80065fe:	4298      	cmp	r0, r3
 8006600:	bfb8      	it	lt
 8006602:	4618      	movlt	r0, r3
 8006604:	e7a6      	b.n	8006554 <_printf_i+0x164>
 8006606:	2301      	movs	r3, #1
 8006608:	4632      	mov	r2, r6
 800660a:	4649      	mov	r1, r9
 800660c:	4640      	mov	r0, r8
 800660e:	47d0      	blx	sl
 8006610:	3001      	adds	r0, #1
 8006612:	d09d      	beq.n	8006550 <_printf_i+0x160>
 8006614:	3501      	adds	r5, #1
 8006616:	68e3      	ldr	r3, [r4, #12]
 8006618:	9903      	ldr	r1, [sp, #12]
 800661a:	1a5b      	subs	r3, r3, r1
 800661c:	42ab      	cmp	r3, r5
 800661e:	dcf2      	bgt.n	8006606 <_printf_i+0x216>
 8006620:	e7eb      	b.n	80065fa <_printf_i+0x20a>
 8006622:	2500      	movs	r5, #0
 8006624:	f104 0619 	add.w	r6, r4, #25
 8006628:	e7f5      	b.n	8006616 <_printf_i+0x226>
 800662a:	bf00      	nop
 800662c:	08006b25 	.word	0x08006b25
 8006630:	08006b36 	.word	0x08006b36

08006634 <__sflush_r>:
 8006634:	898a      	ldrh	r2, [r1, #12]
 8006636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800663a:	4605      	mov	r5, r0
 800663c:	0710      	lsls	r0, r2, #28
 800663e:	460c      	mov	r4, r1
 8006640:	d458      	bmi.n	80066f4 <__sflush_r+0xc0>
 8006642:	684b      	ldr	r3, [r1, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	dc05      	bgt.n	8006654 <__sflush_r+0x20>
 8006648:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800664a:	2b00      	cmp	r3, #0
 800664c:	dc02      	bgt.n	8006654 <__sflush_r+0x20>
 800664e:	2000      	movs	r0, #0
 8006650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006654:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006656:	2e00      	cmp	r6, #0
 8006658:	d0f9      	beq.n	800664e <__sflush_r+0x1a>
 800665a:	2300      	movs	r3, #0
 800665c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006660:	682f      	ldr	r7, [r5, #0]
 8006662:	6a21      	ldr	r1, [r4, #32]
 8006664:	602b      	str	r3, [r5, #0]
 8006666:	d032      	beq.n	80066ce <__sflush_r+0x9a>
 8006668:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800666a:	89a3      	ldrh	r3, [r4, #12]
 800666c:	075a      	lsls	r2, r3, #29
 800666e:	d505      	bpl.n	800667c <__sflush_r+0x48>
 8006670:	6863      	ldr	r3, [r4, #4]
 8006672:	1ac0      	subs	r0, r0, r3
 8006674:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006676:	b10b      	cbz	r3, 800667c <__sflush_r+0x48>
 8006678:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800667a:	1ac0      	subs	r0, r0, r3
 800667c:	2300      	movs	r3, #0
 800667e:	4602      	mov	r2, r0
 8006680:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006682:	6a21      	ldr	r1, [r4, #32]
 8006684:	4628      	mov	r0, r5
 8006686:	47b0      	blx	r6
 8006688:	1c43      	adds	r3, r0, #1
 800668a:	89a3      	ldrh	r3, [r4, #12]
 800668c:	d106      	bne.n	800669c <__sflush_r+0x68>
 800668e:	6829      	ldr	r1, [r5, #0]
 8006690:	291d      	cmp	r1, #29
 8006692:	d82b      	bhi.n	80066ec <__sflush_r+0xb8>
 8006694:	4a29      	ldr	r2, [pc, #164]	; (800673c <__sflush_r+0x108>)
 8006696:	410a      	asrs	r2, r1
 8006698:	07d6      	lsls	r6, r2, #31
 800669a:	d427      	bmi.n	80066ec <__sflush_r+0xb8>
 800669c:	2200      	movs	r2, #0
 800669e:	6062      	str	r2, [r4, #4]
 80066a0:	04d9      	lsls	r1, r3, #19
 80066a2:	6922      	ldr	r2, [r4, #16]
 80066a4:	6022      	str	r2, [r4, #0]
 80066a6:	d504      	bpl.n	80066b2 <__sflush_r+0x7e>
 80066a8:	1c42      	adds	r2, r0, #1
 80066aa:	d101      	bne.n	80066b0 <__sflush_r+0x7c>
 80066ac:	682b      	ldr	r3, [r5, #0]
 80066ae:	b903      	cbnz	r3, 80066b2 <__sflush_r+0x7e>
 80066b0:	6560      	str	r0, [r4, #84]	; 0x54
 80066b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066b4:	602f      	str	r7, [r5, #0]
 80066b6:	2900      	cmp	r1, #0
 80066b8:	d0c9      	beq.n	800664e <__sflush_r+0x1a>
 80066ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066be:	4299      	cmp	r1, r3
 80066c0:	d002      	beq.n	80066c8 <__sflush_r+0x94>
 80066c2:	4628      	mov	r0, r5
 80066c4:	f7ff fbea 	bl	8005e9c <_free_r>
 80066c8:	2000      	movs	r0, #0
 80066ca:	6360      	str	r0, [r4, #52]	; 0x34
 80066cc:	e7c0      	b.n	8006650 <__sflush_r+0x1c>
 80066ce:	2301      	movs	r3, #1
 80066d0:	4628      	mov	r0, r5
 80066d2:	47b0      	blx	r6
 80066d4:	1c41      	adds	r1, r0, #1
 80066d6:	d1c8      	bne.n	800666a <__sflush_r+0x36>
 80066d8:	682b      	ldr	r3, [r5, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d0c5      	beq.n	800666a <__sflush_r+0x36>
 80066de:	2b1d      	cmp	r3, #29
 80066e0:	d001      	beq.n	80066e6 <__sflush_r+0xb2>
 80066e2:	2b16      	cmp	r3, #22
 80066e4:	d101      	bne.n	80066ea <__sflush_r+0xb6>
 80066e6:	602f      	str	r7, [r5, #0]
 80066e8:	e7b1      	b.n	800664e <__sflush_r+0x1a>
 80066ea:	89a3      	ldrh	r3, [r4, #12]
 80066ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066f0:	81a3      	strh	r3, [r4, #12]
 80066f2:	e7ad      	b.n	8006650 <__sflush_r+0x1c>
 80066f4:	690f      	ldr	r7, [r1, #16]
 80066f6:	2f00      	cmp	r7, #0
 80066f8:	d0a9      	beq.n	800664e <__sflush_r+0x1a>
 80066fa:	0793      	lsls	r3, r2, #30
 80066fc:	680e      	ldr	r6, [r1, #0]
 80066fe:	bf08      	it	eq
 8006700:	694b      	ldreq	r3, [r1, #20]
 8006702:	600f      	str	r7, [r1, #0]
 8006704:	bf18      	it	ne
 8006706:	2300      	movne	r3, #0
 8006708:	eba6 0807 	sub.w	r8, r6, r7
 800670c:	608b      	str	r3, [r1, #8]
 800670e:	f1b8 0f00 	cmp.w	r8, #0
 8006712:	dd9c      	ble.n	800664e <__sflush_r+0x1a>
 8006714:	6a21      	ldr	r1, [r4, #32]
 8006716:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006718:	4643      	mov	r3, r8
 800671a:	463a      	mov	r2, r7
 800671c:	4628      	mov	r0, r5
 800671e:	47b0      	blx	r6
 8006720:	2800      	cmp	r0, #0
 8006722:	dc06      	bgt.n	8006732 <__sflush_r+0xfe>
 8006724:	89a3      	ldrh	r3, [r4, #12]
 8006726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800672a:	81a3      	strh	r3, [r4, #12]
 800672c:	f04f 30ff 	mov.w	r0, #4294967295
 8006730:	e78e      	b.n	8006650 <__sflush_r+0x1c>
 8006732:	4407      	add	r7, r0
 8006734:	eba8 0800 	sub.w	r8, r8, r0
 8006738:	e7e9      	b.n	800670e <__sflush_r+0xda>
 800673a:	bf00      	nop
 800673c:	dfbffffe 	.word	0xdfbffffe

08006740 <_fflush_r>:
 8006740:	b538      	push	{r3, r4, r5, lr}
 8006742:	690b      	ldr	r3, [r1, #16]
 8006744:	4605      	mov	r5, r0
 8006746:	460c      	mov	r4, r1
 8006748:	b913      	cbnz	r3, 8006750 <_fflush_r+0x10>
 800674a:	2500      	movs	r5, #0
 800674c:	4628      	mov	r0, r5
 800674e:	bd38      	pop	{r3, r4, r5, pc}
 8006750:	b118      	cbz	r0, 800675a <_fflush_r+0x1a>
 8006752:	6a03      	ldr	r3, [r0, #32]
 8006754:	b90b      	cbnz	r3, 800675a <_fflush_r+0x1a>
 8006756:	f7ff fa35 	bl	8005bc4 <__sinit>
 800675a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d0f3      	beq.n	800674a <_fflush_r+0xa>
 8006762:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006764:	07d0      	lsls	r0, r2, #31
 8006766:	d404      	bmi.n	8006772 <_fflush_r+0x32>
 8006768:	0599      	lsls	r1, r3, #22
 800676a:	d402      	bmi.n	8006772 <_fflush_r+0x32>
 800676c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800676e:	f7ff fb84 	bl	8005e7a <__retarget_lock_acquire_recursive>
 8006772:	4628      	mov	r0, r5
 8006774:	4621      	mov	r1, r4
 8006776:	f7ff ff5d 	bl	8006634 <__sflush_r>
 800677a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800677c:	07da      	lsls	r2, r3, #31
 800677e:	4605      	mov	r5, r0
 8006780:	d4e4      	bmi.n	800674c <_fflush_r+0xc>
 8006782:	89a3      	ldrh	r3, [r4, #12]
 8006784:	059b      	lsls	r3, r3, #22
 8006786:	d4e1      	bmi.n	800674c <_fflush_r+0xc>
 8006788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800678a:	f7ff fb77 	bl	8005e7c <__retarget_lock_release_recursive>
 800678e:	e7dd      	b.n	800674c <_fflush_r+0xc>

08006790 <__swbuf_r>:
 8006790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006792:	460e      	mov	r6, r1
 8006794:	4614      	mov	r4, r2
 8006796:	4605      	mov	r5, r0
 8006798:	b118      	cbz	r0, 80067a2 <__swbuf_r+0x12>
 800679a:	6a03      	ldr	r3, [r0, #32]
 800679c:	b90b      	cbnz	r3, 80067a2 <__swbuf_r+0x12>
 800679e:	f7ff fa11 	bl	8005bc4 <__sinit>
 80067a2:	69a3      	ldr	r3, [r4, #24]
 80067a4:	60a3      	str	r3, [r4, #8]
 80067a6:	89a3      	ldrh	r3, [r4, #12]
 80067a8:	071a      	lsls	r2, r3, #28
 80067aa:	d525      	bpl.n	80067f8 <__swbuf_r+0x68>
 80067ac:	6923      	ldr	r3, [r4, #16]
 80067ae:	b31b      	cbz	r3, 80067f8 <__swbuf_r+0x68>
 80067b0:	6823      	ldr	r3, [r4, #0]
 80067b2:	6922      	ldr	r2, [r4, #16]
 80067b4:	1a98      	subs	r0, r3, r2
 80067b6:	6963      	ldr	r3, [r4, #20]
 80067b8:	b2f6      	uxtb	r6, r6
 80067ba:	4283      	cmp	r3, r0
 80067bc:	4637      	mov	r7, r6
 80067be:	dc04      	bgt.n	80067ca <__swbuf_r+0x3a>
 80067c0:	4621      	mov	r1, r4
 80067c2:	4628      	mov	r0, r5
 80067c4:	f7ff ffbc 	bl	8006740 <_fflush_r>
 80067c8:	b9e0      	cbnz	r0, 8006804 <__swbuf_r+0x74>
 80067ca:	68a3      	ldr	r3, [r4, #8]
 80067cc:	3b01      	subs	r3, #1
 80067ce:	60a3      	str	r3, [r4, #8]
 80067d0:	6823      	ldr	r3, [r4, #0]
 80067d2:	1c5a      	adds	r2, r3, #1
 80067d4:	6022      	str	r2, [r4, #0]
 80067d6:	701e      	strb	r6, [r3, #0]
 80067d8:	6962      	ldr	r2, [r4, #20]
 80067da:	1c43      	adds	r3, r0, #1
 80067dc:	429a      	cmp	r2, r3
 80067de:	d004      	beq.n	80067ea <__swbuf_r+0x5a>
 80067e0:	89a3      	ldrh	r3, [r4, #12]
 80067e2:	07db      	lsls	r3, r3, #31
 80067e4:	d506      	bpl.n	80067f4 <__swbuf_r+0x64>
 80067e6:	2e0a      	cmp	r6, #10
 80067e8:	d104      	bne.n	80067f4 <__swbuf_r+0x64>
 80067ea:	4621      	mov	r1, r4
 80067ec:	4628      	mov	r0, r5
 80067ee:	f7ff ffa7 	bl	8006740 <_fflush_r>
 80067f2:	b938      	cbnz	r0, 8006804 <__swbuf_r+0x74>
 80067f4:	4638      	mov	r0, r7
 80067f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067f8:	4621      	mov	r1, r4
 80067fa:	4628      	mov	r0, r5
 80067fc:	f000 f806 	bl	800680c <__swsetup_r>
 8006800:	2800      	cmp	r0, #0
 8006802:	d0d5      	beq.n	80067b0 <__swbuf_r+0x20>
 8006804:	f04f 37ff 	mov.w	r7, #4294967295
 8006808:	e7f4      	b.n	80067f4 <__swbuf_r+0x64>
	...

0800680c <__swsetup_r>:
 800680c:	b538      	push	{r3, r4, r5, lr}
 800680e:	4b2a      	ldr	r3, [pc, #168]	; (80068b8 <__swsetup_r+0xac>)
 8006810:	4605      	mov	r5, r0
 8006812:	6818      	ldr	r0, [r3, #0]
 8006814:	460c      	mov	r4, r1
 8006816:	b118      	cbz	r0, 8006820 <__swsetup_r+0x14>
 8006818:	6a03      	ldr	r3, [r0, #32]
 800681a:	b90b      	cbnz	r3, 8006820 <__swsetup_r+0x14>
 800681c:	f7ff f9d2 	bl	8005bc4 <__sinit>
 8006820:	89a3      	ldrh	r3, [r4, #12]
 8006822:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006826:	0718      	lsls	r0, r3, #28
 8006828:	d422      	bmi.n	8006870 <__swsetup_r+0x64>
 800682a:	06d9      	lsls	r1, r3, #27
 800682c:	d407      	bmi.n	800683e <__swsetup_r+0x32>
 800682e:	2309      	movs	r3, #9
 8006830:	602b      	str	r3, [r5, #0]
 8006832:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006836:	81a3      	strh	r3, [r4, #12]
 8006838:	f04f 30ff 	mov.w	r0, #4294967295
 800683c:	e034      	b.n	80068a8 <__swsetup_r+0x9c>
 800683e:	0758      	lsls	r0, r3, #29
 8006840:	d512      	bpl.n	8006868 <__swsetup_r+0x5c>
 8006842:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006844:	b141      	cbz	r1, 8006858 <__swsetup_r+0x4c>
 8006846:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800684a:	4299      	cmp	r1, r3
 800684c:	d002      	beq.n	8006854 <__swsetup_r+0x48>
 800684e:	4628      	mov	r0, r5
 8006850:	f7ff fb24 	bl	8005e9c <_free_r>
 8006854:	2300      	movs	r3, #0
 8006856:	6363      	str	r3, [r4, #52]	; 0x34
 8006858:	89a3      	ldrh	r3, [r4, #12]
 800685a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800685e:	81a3      	strh	r3, [r4, #12]
 8006860:	2300      	movs	r3, #0
 8006862:	6063      	str	r3, [r4, #4]
 8006864:	6923      	ldr	r3, [r4, #16]
 8006866:	6023      	str	r3, [r4, #0]
 8006868:	89a3      	ldrh	r3, [r4, #12]
 800686a:	f043 0308 	orr.w	r3, r3, #8
 800686e:	81a3      	strh	r3, [r4, #12]
 8006870:	6923      	ldr	r3, [r4, #16]
 8006872:	b94b      	cbnz	r3, 8006888 <__swsetup_r+0x7c>
 8006874:	89a3      	ldrh	r3, [r4, #12]
 8006876:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800687a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800687e:	d003      	beq.n	8006888 <__swsetup_r+0x7c>
 8006880:	4621      	mov	r1, r4
 8006882:	4628      	mov	r0, r5
 8006884:	f000 f850 	bl	8006928 <__smakebuf_r>
 8006888:	89a0      	ldrh	r0, [r4, #12]
 800688a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800688e:	f010 0301 	ands.w	r3, r0, #1
 8006892:	d00a      	beq.n	80068aa <__swsetup_r+0x9e>
 8006894:	2300      	movs	r3, #0
 8006896:	60a3      	str	r3, [r4, #8]
 8006898:	6963      	ldr	r3, [r4, #20]
 800689a:	425b      	negs	r3, r3
 800689c:	61a3      	str	r3, [r4, #24]
 800689e:	6923      	ldr	r3, [r4, #16]
 80068a0:	b943      	cbnz	r3, 80068b4 <__swsetup_r+0xa8>
 80068a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80068a6:	d1c4      	bne.n	8006832 <__swsetup_r+0x26>
 80068a8:	bd38      	pop	{r3, r4, r5, pc}
 80068aa:	0781      	lsls	r1, r0, #30
 80068ac:	bf58      	it	pl
 80068ae:	6963      	ldrpl	r3, [r4, #20]
 80068b0:	60a3      	str	r3, [r4, #8]
 80068b2:	e7f4      	b.n	800689e <__swsetup_r+0x92>
 80068b4:	2000      	movs	r0, #0
 80068b6:	e7f7      	b.n	80068a8 <__swsetup_r+0x9c>
 80068b8:	20000068 	.word	0x20000068

080068bc <_sbrk_r>:
 80068bc:	b538      	push	{r3, r4, r5, lr}
 80068be:	4d06      	ldr	r5, [pc, #24]	; (80068d8 <_sbrk_r+0x1c>)
 80068c0:	2300      	movs	r3, #0
 80068c2:	4604      	mov	r4, r0
 80068c4:	4608      	mov	r0, r1
 80068c6:	602b      	str	r3, [r5, #0]
 80068c8:	f7fa f9c4 	bl	8000c54 <_sbrk>
 80068cc:	1c43      	adds	r3, r0, #1
 80068ce:	d102      	bne.n	80068d6 <_sbrk_r+0x1a>
 80068d0:	682b      	ldr	r3, [r5, #0]
 80068d2:	b103      	cbz	r3, 80068d6 <_sbrk_r+0x1a>
 80068d4:	6023      	str	r3, [r4, #0]
 80068d6:	bd38      	pop	{r3, r4, r5, pc}
 80068d8:	20004c58 	.word	0x20004c58

080068dc <__swhatbuf_r>:
 80068dc:	b570      	push	{r4, r5, r6, lr}
 80068de:	460c      	mov	r4, r1
 80068e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068e4:	2900      	cmp	r1, #0
 80068e6:	b096      	sub	sp, #88	; 0x58
 80068e8:	4615      	mov	r5, r2
 80068ea:	461e      	mov	r6, r3
 80068ec:	da0d      	bge.n	800690a <__swhatbuf_r+0x2e>
 80068ee:	89a3      	ldrh	r3, [r4, #12]
 80068f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80068f4:	f04f 0100 	mov.w	r1, #0
 80068f8:	bf0c      	ite	eq
 80068fa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80068fe:	2340      	movne	r3, #64	; 0x40
 8006900:	2000      	movs	r0, #0
 8006902:	6031      	str	r1, [r6, #0]
 8006904:	602b      	str	r3, [r5, #0]
 8006906:	b016      	add	sp, #88	; 0x58
 8006908:	bd70      	pop	{r4, r5, r6, pc}
 800690a:	466a      	mov	r2, sp
 800690c:	f000 f848 	bl	80069a0 <_fstat_r>
 8006910:	2800      	cmp	r0, #0
 8006912:	dbec      	blt.n	80068ee <__swhatbuf_r+0x12>
 8006914:	9901      	ldr	r1, [sp, #4]
 8006916:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800691a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800691e:	4259      	negs	r1, r3
 8006920:	4159      	adcs	r1, r3
 8006922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006926:	e7eb      	b.n	8006900 <__swhatbuf_r+0x24>

08006928 <__smakebuf_r>:
 8006928:	898b      	ldrh	r3, [r1, #12]
 800692a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800692c:	079d      	lsls	r5, r3, #30
 800692e:	4606      	mov	r6, r0
 8006930:	460c      	mov	r4, r1
 8006932:	d507      	bpl.n	8006944 <__smakebuf_r+0x1c>
 8006934:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006938:	6023      	str	r3, [r4, #0]
 800693a:	6123      	str	r3, [r4, #16]
 800693c:	2301      	movs	r3, #1
 800693e:	6163      	str	r3, [r4, #20]
 8006940:	b002      	add	sp, #8
 8006942:	bd70      	pop	{r4, r5, r6, pc}
 8006944:	ab01      	add	r3, sp, #4
 8006946:	466a      	mov	r2, sp
 8006948:	f7ff ffc8 	bl	80068dc <__swhatbuf_r>
 800694c:	9900      	ldr	r1, [sp, #0]
 800694e:	4605      	mov	r5, r0
 8006950:	4630      	mov	r0, r6
 8006952:	f7ff fb0f 	bl	8005f74 <_malloc_r>
 8006956:	b948      	cbnz	r0, 800696c <__smakebuf_r+0x44>
 8006958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800695c:	059a      	lsls	r2, r3, #22
 800695e:	d4ef      	bmi.n	8006940 <__smakebuf_r+0x18>
 8006960:	f023 0303 	bic.w	r3, r3, #3
 8006964:	f043 0302 	orr.w	r3, r3, #2
 8006968:	81a3      	strh	r3, [r4, #12]
 800696a:	e7e3      	b.n	8006934 <__smakebuf_r+0xc>
 800696c:	89a3      	ldrh	r3, [r4, #12]
 800696e:	6020      	str	r0, [r4, #0]
 8006970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006974:	81a3      	strh	r3, [r4, #12]
 8006976:	9b00      	ldr	r3, [sp, #0]
 8006978:	6163      	str	r3, [r4, #20]
 800697a:	9b01      	ldr	r3, [sp, #4]
 800697c:	6120      	str	r0, [r4, #16]
 800697e:	b15b      	cbz	r3, 8006998 <__smakebuf_r+0x70>
 8006980:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006984:	4630      	mov	r0, r6
 8006986:	f000 f81d 	bl	80069c4 <_isatty_r>
 800698a:	b128      	cbz	r0, 8006998 <__smakebuf_r+0x70>
 800698c:	89a3      	ldrh	r3, [r4, #12]
 800698e:	f023 0303 	bic.w	r3, r3, #3
 8006992:	f043 0301 	orr.w	r3, r3, #1
 8006996:	81a3      	strh	r3, [r4, #12]
 8006998:	89a3      	ldrh	r3, [r4, #12]
 800699a:	431d      	orrs	r5, r3
 800699c:	81a5      	strh	r5, [r4, #12]
 800699e:	e7cf      	b.n	8006940 <__smakebuf_r+0x18>

080069a0 <_fstat_r>:
 80069a0:	b538      	push	{r3, r4, r5, lr}
 80069a2:	4d07      	ldr	r5, [pc, #28]	; (80069c0 <_fstat_r+0x20>)
 80069a4:	2300      	movs	r3, #0
 80069a6:	4604      	mov	r4, r0
 80069a8:	4608      	mov	r0, r1
 80069aa:	4611      	mov	r1, r2
 80069ac:	602b      	str	r3, [r5, #0]
 80069ae:	f7fa f928 	bl	8000c02 <_fstat>
 80069b2:	1c43      	adds	r3, r0, #1
 80069b4:	d102      	bne.n	80069bc <_fstat_r+0x1c>
 80069b6:	682b      	ldr	r3, [r5, #0]
 80069b8:	b103      	cbz	r3, 80069bc <_fstat_r+0x1c>
 80069ba:	6023      	str	r3, [r4, #0]
 80069bc:	bd38      	pop	{r3, r4, r5, pc}
 80069be:	bf00      	nop
 80069c0:	20004c58 	.word	0x20004c58

080069c4 <_isatty_r>:
 80069c4:	b538      	push	{r3, r4, r5, lr}
 80069c6:	4d06      	ldr	r5, [pc, #24]	; (80069e0 <_isatty_r+0x1c>)
 80069c8:	2300      	movs	r3, #0
 80069ca:	4604      	mov	r4, r0
 80069cc:	4608      	mov	r0, r1
 80069ce:	602b      	str	r3, [r5, #0]
 80069d0:	f7fa f927 	bl	8000c22 <_isatty>
 80069d4:	1c43      	adds	r3, r0, #1
 80069d6:	d102      	bne.n	80069de <_isatty_r+0x1a>
 80069d8:	682b      	ldr	r3, [r5, #0]
 80069da:	b103      	cbz	r3, 80069de <_isatty_r+0x1a>
 80069dc:	6023      	str	r3, [r4, #0]
 80069de:	bd38      	pop	{r3, r4, r5, pc}
 80069e0:	20004c58 	.word	0x20004c58

080069e4 <_init>:
 80069e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069e6:	bf00      	nop
 80069e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ea:	bc08      	pop	{r3}
 80069ec:	469e      	mov	lr, r3
 80069ee:	4770      	bx	lr

080069f0 <_fini>:
 80069f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f2:	bf00      	nop
 80069f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069f6:	bc08      	pop	{r3}
 80069f8:	469e      	mov	lr, r3
 80069fa:	4770      	bx	lr
