
CH12 DSP - Tutorial 12-1 Acquiring data from onboard Gyro sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b22c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800b3d8  0800b3d8  0001b3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3f4  0800b3f4  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3f4  0800b3f4  0001b3f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3fc  0800b3fc  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3fc  0800b3fc  0001b3fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b400  0800b400  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800b404  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b4  2**0
                  CONTENTS
 10 .bss          00000c48  200000b4  200000b4  000200b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000cfc  20000cfc  000200b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002462a  00000000  00000000  00020127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000515c  00000000  00000000  00044751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001f10  00000000  00000000  000498b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001811  00000000  00000000  0004b7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000299e4  00000000  00000000  0004cfd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000277a6  00000000  00000000  000769b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ee4df  00000000  00000000  0009e15b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008780  00000000  00000000  0018c63c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000d7  00000000  00000000  00194dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200000b4 	.word	0x200000b4
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800b3c0 	.word	0x0800b3c0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200000b8 	.word	0x200000b8
 80001e8:	0800b3c0 	.word	0x0800b3c0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f001 fcda 	bl	8001ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f834 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 faf2 	bl	8000adc <MX_GPIO_Init>
  MX_CRC_Init();
 80004f8:	f000 f89a 	bl	8000630 <MX_CRC_Init>
  MX_DMA2D_Init();
 80004fc:	f000 f8ac 	bl	8000658 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000500:	f000 fa9c 	bl	8000a3c <MX_FMC_Init>
  MX_I2C3_Init();
 8000504:	f000 f8da 	bl	80006bc <MX_I2C3_Init>
  MX_LTDC_Init();
 8000508:	f000 f918 	bl	800073c <MX_LTDC_Init>
  MX_SPI5_Init();
 800050c:	f000 f996 	bl	800083c <MX_SPI5_Init>
  MX_TIM1_Init();
 8000510:	f000 f9ca 	bl	80008a8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000514:	f000 fa66 	bl	80009e4 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 8000518:	f00a fb4c 	bl	800abb4 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 800051c:	f000 fa14 	bl	8000948 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
  BSP_GYRO_Init();
 8000520:	f001 fc2e 	bl	8001d80 <BSP_GYRO_Init>
  readID = BSP_GYRO_ReadID();
 8000524:	f001 fc92 	bl	8001e4c <BSP_GYRO_ReadID>
 8000528:	4603      	mov	r3, r0
 800052a:	461a      	mov	r2, r3
 800052c:	4b07      	ldr	r3, [pc, #28]	; (800054c <main+0x64>)
 800052e:	701a      	strb	r2, [r3, #0]

  // Start UART in Interrupt mode
  HAL_UART_Receive_IT(&huart1 , &recData , 1);
 8000530:	2201      	movs	r2, #1
 8000532:	4907      	ldr	r1, [pc, #28]	; (8000550 <main+0x68>)
 8000534:	4807      	ldr	r0, [pc, #28]	; (8000554 <main+0x6c>)
 8000536:	f007 f93c 	bl	80077b2 <HAL_UART_Receive_IT>
  {
	  /* USER CODE END WHILE */
	  //MX_USB_HOST_Process();
	  /* USER CODE END WHILE */
	  //MX_USB_HOST_Process();
	  if (sendDataFlag == 1){
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <main+0x70>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b01      	cmp	r3, #1
 8000540:	d1fb      	bne.n	800053a <main+0x52>
		  sendDataFlag = 0;
 8000542:	4b05      	ldr	r3, [pc, #20]	; (8000558 <main+0x70>)
 8000544:	2200      	movs	r2, #0
 8000546:	701a      	strb	r2, [r3, #0]
	  if (sendDataFlag == 1){
 8000548:	e7f7      	b.n	800053a <main+0x52>
 800054a:	bf00      	nop
 800054c:	20000378 	.word	0x20000378
 8000550:	2000038d 	.word	0x2000038d
 8000554:	200002fc 	.word	0x200002fc
 8000558:	2000038c 	.word	0x2000038c

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	; 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0320 	add.w	r3, r7, #32
 8000566:	2230      	movs	r2, #48	; 0x30
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f00a fe98 	bl	800b2a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	4b28      	ldr	r3, [pc, #160]	; (8000628 <SystemClock_Config+0xcc>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	4a27      	ldr	r2, [pc, #156]	; (8000628 <SystemClock_Config+0xcc>)
 800058a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058e:	6413      	str	r3, [r2, #64]	; 0x40
 8000590:	4b25      	ldr	r3, [pc, #148]	; (8000628 <SystemClock_Config+0xcc>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	4b22      	ldr	r3, [pc, #136]	; (800062c <SystemClock_Config+0xd0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a21      	ldr	r2, [pc, #132]	; (800062c <SystemClock_Config+0xd0>)
 80005a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <SystemClock_Config+0xd0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b8:	2301      	movs	r3, #1
 80005ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c2:	2302      	movs	r3, #2
 80005c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005cc:	2308      	movs	r3, #8
 80005ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005d0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005da:	2307      	movs	r3, #7
 80005dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	4618      	mov	r0, r3
 80005e4:	f005 f996 	bl	8005914 <HAL_RCC_OscConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ee:	f000 fc0b 	bl	8000e08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f2:	230f      	movs	r3, #15
 80005f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f6:	2302      	movs	r3, #2
 80005f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000602:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000608:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800060a:	f107 030c 	add.w	r3, r7, #12
 800060e:	2105      	movs	r1, #5
 8000610:	4618      	mov	r0, r3
 8000612:	f005 fbf7 	bl	8005e04 <HAL_RCC_ClockConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800061c:	f000 fbf4 	bl	8000e08 <Error_Handler>
  }
}
 8000620:	bf00      	nop
 8000622:	3750      	adds	r7, #80	; 0x50
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_CRC_Init+0x20>)
 8000636:	4a07      	ldr	r2, [pc, #28]	; (8000654 <MX_CRC_Init+0x24>)
 8000638:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_CRC_Init+0x20>)
 800063c:	f001 fdd9 	bl	80021f2 <HAL_CRC_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000646:	f000 fbdf 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	200000d0 	.word	0x200000d0
 8000654:	40023000 	.word	0x40023000

08000658 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800065c:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <MX_DMA2D_Init+0x5c>)
 800065e:	4a16      	ldr	r2, [pc, #88]	; (80006b8 <MX_DMA2D_Init+0x60>)
 8000660:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000662:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <MX_DMA2D_Init+0x5c>)
 8000664:	2200      	movs	r2, #0
 8000666:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <MX_DMA2D_Init+0x5c>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_DMA2D_Init+0x5c>)
 8000670:	2200      	movs	r2, #0
 8000672:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_DMA2D_Init+0x5c>)
 8000676:	2200      	movs	r2, #0
 8000678:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_DMA2D_Init+0x5c>)
 800067c:	2200      	movs	r2, #0
 800067e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_DMA2D_Init+0x5c>)
 8000682:	2200      	movs	r2, #0
 8000684:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_DMA2D_Init+0x5c>)
 8000688:	2200      	movs	r2, #0
 800068a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800068c:	4809      	ldr	r0, [pc, #36]	; (80006b4 <MX_DMA2D_Init+0x5c>)
 800068e:	f001 fe5e 	bl	800234e <HAL_DMA2D_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000698:	f000 fbb6 	bl	8000e08 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800069c:	2101      	movs	r1, #1
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_DMA2D_Init+0x5c>)
 80006a0:	f001 ffae 	bl	8002600 <HAL_DMA2D_ConfigLayer>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80006aa:	f000 fbad 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200000d8 	.word	0x200000d8
 80006b8:	4002b000 	.word	0x4002b000

080006bc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <MX_I2C3_Init+0x74>)
 80006c2:	4a1c      	ldr	r2, [pc, #112]	; (8000734 <MX_I2C3_Init+0x78>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80006c6:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <MX_I2C3_Init+0x74>)
 80006c8:	4a1b      	ldr	r2, [pc, #108]	; (8000738 <MX_I2C3_Init+0x7c>)
 80006ca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006cc:	4b18      	ldr	r3, [pc, #96]	; (8000730 <MX_I2C3_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80006d2:	4b17      	ldr	r3, [pc, #92]	; (8000730 <MX_I2C3_Init+0x74>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d8:	4b15      	ldr	r3, [pc, #84]	; (8000730 <MX_I2C3_Init+0x74>)
 80006da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006de:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <MX_I2C3_Init+0x74>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80006e6:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_I2C3_Init+0x74>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ec:	4b10      	ldr	r3, [pc, #64]	; (8000730 <MX_I2C3_Init+0x74>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_I2C3_Init+0x74>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80006f8:	480d      	ldr	r0, [pc, #52]	; (8000730 <MX_I2C3_Init+0x74>)
 80006fa:	f004 fbe3 	bl	8004ec4 <HAL_I2C_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000704:	f000 fb80 	bl	8000e08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000708:	2100      	movs	r1, #0
 800070a:	4809      	ldr	r0, [pc, #36]	; (8000730 <MX_I2C3_Init+0x74>)
 800070c:	f004 fd1e 	bl	800514c <HAL_I2CEx_ConfigAnalogFilter>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000716:	f000 fb77 	bl	8000e08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800071a:	2100      	movs	r1, #0
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <MX_I2C3_Init+0x74>)
 800071e:	f004 fd51 	bl	80051c4 <HAL_I2CEx_ConfigDigitalFilter>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000728:	f000 fb6e 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000118 	.word	0x20000118
 8000734:	40005c00 	.word	0x40005c00
 8000738:	000186a0 	.word	0x000186a0

0800073c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08e      	sub	sp, #56	; 0x38
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2234      	movs	r2, #52	; 0x34
 8000746:	2100      	movs	r1, #0
 8000748:	4618      	mov	r0, r3
 800074a:	f00a fda9 	bl	800b2a0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800074e:	4b39      	ldr	r3, [pc, #228]	; (8000834 <MX_LTDC_Init+0xf8>)
 8000750:	4a39      	ldr	r2, [pc, #228]	; (8000838 <MX_LTDC_Init+0xfc>)
 8000752:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000754:	4b37      	ldr	r3, [pc, #220]	; (8000834 <MX_LTDC_Init+0xf8>)
 8000756:	2200      	movs	r2, #0
 8000758:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800075a:	4b36      	ldr	r3, [pc, #216]	; (8000834 <MX_LTDC_Init+0xf8>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000760:	4b34      	ldr	r3, [pc, #208]	; (8000834 <MX_LTDC_Init+0xf8>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000766:	4b33      	ldr	r3, [pc, #204]	; (8000834 <MX_LTDC_Init+0xf8>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 800076c:	4b31      	ldr	r3, [pc, #196]	; (8000834 <MX_LTDC_Init+0xf8>)
 800076e:	2209      	movs	r2, #9
 8000770:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000772:	4b30      	ldr	r3, [pc, #192]	; (8000834 <MX_LTDC_Init+0xf8>)
 8000774:	2201      	movs	r2, #1
 8000776:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000778:	4b2e      	ldr	r3, [pc, #184]	; (8000834 <MX_LTDC_Init+0xf8>)
 800077a:	221d      	movs	r2, #29
 800077c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800077e:	4b2d      	ldr	r3, [pc, #180]	; (8000834 <MX_LTDC_Init+0xf8>)
 8000780:	2203      	movs	r2, #3
 8000782:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000784:	4b2b      	ldr	r3, [pc, #172]	; (8000834 <MX_LTDC_Init+0xf8>)
 8000786:	f240 120d 	movw	r2, #269	; 0x10d
 800078a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 800078c:	4b29      	ldr	r3, [pc, #164]	; (8000834 <MX_LTDC_Init+0xf8>)
 800078e:	f240 1243 	movw	r2, #323	; 0x143
 8000792:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000794:	4b27      	ldr	r3, [pc, #156]	; (8000834 <MX_LTDC_Init+0xf8>)
 8000796:	f240 1217 	movw	r2, #279	; 0x117
 800079a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 800079c:	4b25      	ldr	r3, [pc, #148]	; (8000834 <MX_LTDC_Init+0xf8>)
 800079e:	f240 1247 	movw	r2, #327	; 0x147
 80007a2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80007a4:	4b23      	ldr	r3, [pc, #140]	; (8000834 <MX_LTDC_Init+0xf8>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80007ac:	4b21      	ldr	r3, [pc, #132]	; (8000834 <MX_LTDC_Init+0xf8>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80007b4:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <MX_LTDC_Init+0xf8>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80007bc:	481d      	ldr	r0, [pc, #116]	; (8000834 <MX_LTDC_Init+0xf8>)
 80007be:	f004 fd41 	bl	8005244 <HAL_LTDC_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80007c8:	f000 fb1e 	bl	8000e08 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80007d0:	23f0      	movs	r3, #240	; 0xf0
 80007d2:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80007d8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80007dc:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80007de:	2302      	movs	r3, #2
 80007e0:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80007e2:	23ff      	movs	r3, #255	; 0xff
 80007e4:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80007ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80007ee:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80007f0:	2307      	movs	r3, #7
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80007f4:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80007fa:	23f0      	movs	r3, #240	; 0xf0
 80007fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80007fe:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000802:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2200      	movs	r2, #0
 800081a:	4619      	mov	r1, r3
 800081c:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_LTDC_Init+0xf8>)
 800081e:	f004 fea3 	bl	8005568 <HAL_LTDC_ConfigLayer>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000828:	f000 faee 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	3738      	adds	r7, #56	; 0x38
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	2000016c 	.word	0x2000016c
 8000838:	40016800 	.word	0x40016800

0800083c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000840:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <MX_SPI5_Init+0x64>)
 8000842:	4a18      	ldr	r2, [pc, #96]	; (80008a4 <MX_SPI5_Init+0x68>)
 8000844:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000846:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <MX_SPI5_Init+0x64>)
 8000848:	f44f 7282 	mov.w	r2, #260	; 0x104
 800084c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800084e:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_SPI5_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <MX_SPI5_Init+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_SPI5_Init+0x64>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_SPI5_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_SPI5_Init+0x64>)
 8000868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800086c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_SPI5_Init+0x64>)
 8000870:	2218      	movs	r2, #24
 8000872:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000874:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <MX_SPI5_Init+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_SPI5_Init+0x64>)
 800087c:	2200      	movs	r2, #0
 800087e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <MX_SPI5_Init+0x64>)
 8000882:	2200      	movs	r2, #0
 8000884:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_SPI5_Init+0x64>)
 8000888:	220a      	movs	r2, #10
 800088a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800088c:	4804      	ldr	r0, [pc, #16]	; (80008a0 <MX_SPI5_Init+0x64>)
 800088e:	f005 fecd 	bl	800662c <HAL_SPI_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000898:	f000 fab6 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000214 	.word	0x20000214
 80008a4:	40015000 	.word	0x40015000

080008a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ae:	f107 0308 	add.w	r3, r7, #8
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008bc:	463b      	mov	r3, r7
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008c4:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <MX_TIM1_Init+0x98>)
 80008c6:	4a1f      	ldr	r2, [pc, #124]	; (8000944 <MX_TIM1_Init+0x9c>)
 80008c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008ca:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <MX_TIM1_Init+0x98>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <MX_TIM1_Init+0x98>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_TIM1_Init+0x98>)
 80008d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_TIM1_Init+0x98>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008e4:	4b16      	ldr	r3, [pc, #88]	; (8000940 <MX_TIM1_Init+0x98>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <MX_TIM1_Init+0x98>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008f0:	4813      	ldr	r0, [pc, #76]	; (8000940 <MX_TIM1_Init+0x98>)
 80008f2:	f006 f9e7 	bl	8006cc4 <HAL_TIM_Base_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80008fc:	f000 fa84 	bl	8000e08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000904:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000906:	f107 0308 	add.w	r3, r7, #8
 800090a:	4619      	mov	r1, r3
 800090c:	480c      	ldr	r0, [pc, #48]	; (8000940 <MX_TIM1_Init+0x98>)
 800090e:	f006 fbaf 	bl	8007070 <HAL_TIM_ConfigClockSource>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000918:	f000 fa76 	bl	8000e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091c:	2300      	movs	r3, #0
 800091e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000924:	463b      	mov	r3, r7
 8000926:	4619      	mov	r1, r3
 8000928:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_TIM1_Init+0x98>)
 800092a:	f006 fdd7 	bl	80074dc <HAL_TIMEx_MasterConfigSynchronization>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000934:	f000 fa68 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	3718      	adds	r7, #24
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	2000026c 	.word	0x2000026c
 8000944:	40010000 	.word	0x40010000

08000948 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800094e:	f107 0308 	add.w	r3, r7, #8
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095c:	463b      	mov	r3, r7
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000964:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <MX_TIM2_Init+0x98>)
 8000966:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800096a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 800096c:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <MX_TIM2_Init+0x98>)
 800096e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000972:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_TIM2_Init+0x98>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <MX_TIM2_Init+0x98>)
 800097c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000980:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_TIM2_Init+0x98>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000988:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_TIM2_Init+0x98>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800098e:	4814      	ldr	r0, [pc, #80]	; (80009e0 <MX_TIM2_Init+0x98>)
 8000990:	f006 f998 	bl	8006cc4 <HAL_TIM_Base_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800099a:	f000 fa35 	bl	8000e08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800099e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009a4:	f107 0308 	add.w	r3, r7, #8
 80009a8:	4619      	mov	r1, r3
 80009aa:	480d      	ldr	r0, [pc, #52]	; (80009e0 <MX_TIM2_Init+0x98>)
 80009ac:	f006 fb60 	bl	8007070 <HAL_TIM_ConfigClockSource>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80009b6:	f000 fa27 	bl	8000e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ba:	2300      	movs	r3, #0
 80009bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009c2:	463b      	mov	r3, r7
 80009c4:	4619      	mov	r1, r3
 80009c6:	4806      	ldr	r0, [pc, #24]	; (80009e0 <MX_TIM2_Init+0x98>)
 80009c8:	f006 fd88 	bl	80074dc <HAL_TIMEx_MasterConfigSynchronization>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80009d2:	f000 fa19 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200002b4 	.word	0x200002b4

080009e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 80009ea:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <MX_USART1_UART_Init+0x50>)
 80009ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 80009f0:	4a11      	ldr	r2, [pc, #68]	; (8000a38 <MX_USART1_UART_Init+0x54>)
 80009f2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009fa:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a00:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a06:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 8000a08:	220c      	movs	r2, #12
 8000a0a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8000a12:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 8000a14:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 8000a1c:	f006 fdee 	bl	80075fc <HAL_UART_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a26:	f000 f9ef 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200002fc 	.word	0x200002fc
 8000a34:	40011000 	.word	0x40011000
 8000a38:	001e8480 	.word	0x001e8480

08000a3c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
 8000a50:	615a      	str	r2, [r3, #20]
 8000a52:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a54:	4b1f      	ldr	r3, [pc, #124]	; (8000ad4 <MX_FMC_Init+0x98>)
 8000a56:	4a20      	ldr	r2, [pc, #128]	; (8000ad8 <MX_FMC_Init+0x9c>)
 8000a58:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000a5a:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <MX_FMC_Init+0x98>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a60:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <MX_FMC_Init+0x98>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a66:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <MX_FMC_Init+0x98>)
 8000a68:	2204      	movs	r2, #4
 8000a6a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a6c:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <MX_FMC_Init+0x98>)
 8000a6e:	2210      	movs	r2, #16
 8000a70:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a72:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <MX_FMC_Init+0x98>)
 8000a74:	2240      	movs	r2, #64	; 0x40
 8000a76:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a78:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <MX_FMC_Init+0x98>)
 8000a7a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000a7e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a80:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MX_FMC_Init+0x98>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a86:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <MX_FMC_Init+0x98>)
 8000a88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a8c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_FMC_Init+0x98>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_FMC_Init+0x98>)
 8000a96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a9a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000aa0:	2307      	movs	r3, #7
 8000aa2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000aa4:	2304      	movs	r3, #4
 8000aa6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000aa8:	2307      	movs	r3, #7
 8000aaa:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000aac:	2303      	movs	r3, #3
 8000aae:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	4619      	mov	r1, r3
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_FMC_Init+0x98>)
 8000abe:	f005 fd81 	bl	80065c4 <HAL_SDRAM_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000ac8:	f000 f99e 	bl	8000e08 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000acc:	bf00      	nop
 8000ace:	3720      	adds	r7, #32
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000344 	.word	0x20000344
 8000ad8:	a0000140 	.word	0xa0000140

08000adc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08e      	sub	sp, #56	; 0x38
 8000ae0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]
 8000af0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
 8000af6:	4b7b      	ldr	r3, [pc, #492]	; (8000ce4 <MX_GPIO_Init+0x208>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a7a      	ldr	r2, [pc, #488]	; (8000ce4 <MX_GPIO_Init+0x208>)
 8000afc:	f043 0304 	orr.w	r3, r3, #4
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b78      	ldr	r3, [pc, #480]	; (8000ce4 <MX_GPIO_Init+0x208>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0304 	and.w	r3, r3, #4
 8000b0a:	623b      	str	r3, [r7, #32]
 8000b0c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
 8000b12:	4b74      	ldr	r3, [pc, #464]	; (8000ce4 <MX_GPIO_Init+0x208>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a73      	ldr	r2, [pc, #460]	; (8000ce4 <MX_GPIO_Init+0x208>)
 8000b18:	f043 0320 	orr.w	r3, r3, #32
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b71      	ldr	r3, [pc, #452]	; (8000ce4 <MX_GPIO_Init+0x208>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0320 	and.w	r3, r3, #32
 8000b26:	61fb      	str	r3, [r7, #28]
 8000b28:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61bb      	str	r3, [r7, #24]
 8000b2e:	4b6d      	ldr	r3, [pc, #436]	; (8000ce4 <MX_GPIO_Init+0x208>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a6c      	ldr	r2, [pc, #432]	; (8000ce4 <MX_GPIO_Init+0x208>)
 8000b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b6a      	ldr	r3, [pc, #424]	; (8000ce4 <MX_GPIO_Init+0x208>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b42:	61bb      	str	r3, [r7, #24]
 8000b44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	4b66      	ldr	r3, [pc, #408]	; (8000ce4 <MX_GPIO_Init+0x208>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a65      	ldr	r2, [pc, #404]	; (8000ce4 <MX_GPIO_Init+0x208>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b63      	ldr	r3, [pc, #396]	; (8000ce4 <MX_GPIO_Init+0x208>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b5f      	ldr	r3, [pc, #380]	; (8000ce4 <MX_GPIO_Init+0x208>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a5e      	ldr	r2, [pc, #376]	; (8000ce4 <MX_GPIO_Init+0x208>)
 8000b6c:	f043 0302 	orr.w	r3, r3, #2
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b5c      	ldr	r3, [pc, #368]	; (8000ce4 <MX_GPIO_Init+0x208>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b58      	ldr	r3, [pc, #352]	; (8000ce4 <MX_GPIO_Init+0x208>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a57      	ldr	r2, [pc, #348]	; (8000ce4 <MX_GPIO_Init+0x208>)
 8000b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b55      	ldr	r3, [pc, #340]	; (8000ce4 <MX_GPIO_Init+0x208>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	4b51      	ldr	r3, [pc, #324]	; (8000ce4 <MX_GPIO_Init+0x208>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a50      	ldr	r2, [pc, #320]	; (8000ce4 <MX_GPIO_Init+0x208>)
 8000ba4:	f043 0310 	orr.w	r3, r3, #16
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b4e      	ldr	r3, [pc, #312]	; (8000ce4 <MX_GPIO_Init+0x208>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0310 	and.w	r3, r3, #16
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	4b4a      	ldr	r3, [pc, #296]	; (8000ce4 <MX_GPIO_Init+0x208>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a49      	ldr	r2, [pc, #292]	; (8000ce4 <MX_GPIO_Init+0x208>)
 8000bc0:	f043 0308 	orr.w	r3, r3, #8
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b47      	ldr	r3, [pc, #284]	; (8000ce4 <MX_GPIO_Init+0x208>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0308 	and.w	r3, r3, #8
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2116      	movs	r1, #22
 8000bd6:	4844      	ldr	r0, [pc, #272]	; (8000ce8 <MX_GPIO_Init+0x20c>)
 8000bd8:	f002 f85c 	bl	8002c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2180      	movs	r1, #128	; 0x80
 8000be0:	4842      	ldr	r0, [pc, #264]	; (8000cec <MX_GPIO_Init+0x210>)
 8000be2:	f002 f857 	bl	8002c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000bec:	4840      	ldr	r0, [pc, #256]	; (8000cf0 <MX_GPIO_Init+0x214>)
 8000bee:	f002 f851 	bl	8002c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000bf8:	483e      	ldr	r0, [pc, #248]	; (8000cf4 <MX_GPIO_Init+0x218>)
 8000bfa:	f002 f84b 	bl	8002c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000bfe:	2316      	movs	r3, #22
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c12:	4619      	mov	r1, r3
 8000c14:	4834      	ldr	r0, [pc, #208]	; (8000ce8 <MX_GPIO_Init+0x20c>)
 8000c16:	f001 fd85 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000c1a:	f248 0307 	movw	r3, #32775	; 0x8007
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c20:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2e:	4619      	mov	r1, r3
 8000c30:	482e      	ldr	r0, [pc, #184]	; (8000cec <MX_GPIO_Init+0x210>)
 8000c32:	f001 fd77 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000c36:	2380      	movs	r3, #128	; 0x80
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4827      	ldr	r0, [pc, #156]	; (8000cec <MX_GPIO_Init+0x210>)
 8000c4e:	f001 fd69 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000c52:	2320      	movs	r3, #32
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c56:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c64:	4619      	mov	r1, r3
 8000c66:	4820      	ldr	r0, [pc, #128]	; (8000ce8 <MX_GPIO_Init+0x20c>)
 8000c68:	f001 fd5c 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	481e      	ldr	r0, [pc, #120]	; (8000cf8 <MX_GPIO_Init+0x21c>)
 8000c80:	f001 fd50 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000c84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c96:	4619      	mov	r1, r3
 8000c98:	4815      	ldr	r0, [pc, #84]	; (8000cf0 <MX_GPIO_Init+0x214>)
 8000c9a:	f001 fd43 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000c9e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	480e      	ldr	r0, [pc, #56]	; (8000cf0 <MX_GPIO_Init+0x214>)
 8000cb8:	f001 fd34 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000cbc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4807      	ldr	r0, [pc, #28]	; (8000cf4 <MX_GPIO_Init+0x218>)
 8000cd6:	f001 fd25 	bl	8002724 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cda:	bf00      	nop
 8000cdc:	3738      	adds	r7, #56	; 0x38
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020800 	.word	0x40020800
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	40020c00 	.word	0x40020c00
 8000cf4:	40021800 	.word	0x40021800
 8000cf8:	40020400 	.word	0x40020400

08000cfc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d0c:	d13b      	bne.n	8000d86 <HAL_TIM_PeriodElapsedCallback+0x8a>
	{
		BSP_GYRO_GetXYZ(xyz);
 8000d0e:	4820      	ldr	r0, [pc, #128]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000d10:	f001 f8b4 	bl	8001e7c <BSP_GYRO_GetXYZ>
		if (cnt < 300)
 8000d14:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000d1c:	da2a      	bge.n	8000d74 <HAL_TIM_PeriodElapsedCallback+0x78>
		{
			xyz[0] /= 1000;
 8000d1e:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000d20:	ed93 7a00 	vldr	s14, [r3]
 8000d24:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8000d98 <HAL_TIM_PeriodElapsedCallback+0x9c>
 8000d28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d2c:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000d2e:	edc3 7a00 	vstr	s15, [r3]
			xyz[1] /= 1000;
 8000d32:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000d34:	ed93 7a01 	vldr	s14, [r3, #4]
 8000d38:	eddf 6a17 	vldr	s13, [pc, #92]	; 8000d98 <HAL_TIM_PeriodElapsedCallback+0x9c>
 8000d3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d40:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000d42:	edc3 7a01 	vstr	s15, [r3, #4]
			xyz[2] /= 1000;
 8000d46:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000d48:	ed93 7a02 	vldr	s14, [r3, #8]
 8000d4c:	eddf 6a12 	vldr	s13, [pc, #72]	; 8000d98 <HAL_TIM_PeriodElapsedCallback+0x9c>
 8000d50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d54:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000d56:	edc3 7a02 	vstr	s15, [r3, #8]
			//xyzArr[cnt] = xyz[0];
			//xyzArr[cnt+1] = xyz[1];
			//xyzArr[cnt+2] = xyz[2];
			cnt += 3;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	3303      	adds	r3, #3
 8000d60:	4a0c      	ldr	r2, [pc, #48]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000d62:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*) xyz, 12, 5000);
 8000d64:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d68:	220c      	movs	r2, #12
 8000d6a:	4909      	ldr	r1, [pc, #36]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000d6c:	480b      	ldr	r0, [pc, #44]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000d6e:	f006 fc95 	bl	800769c <HAL_UART_Transmit>
			sendDataFlag = 1;
			HAL_TIM_Base_Start_IT(&htim2);
			cnt = 0;
		}
	}
}
 8000d72:	e008      	b.n	8000d86 <HAL_TIM_PeriodElapsedCallback+0x8a>
			sendDataFlag = 1;
 8000d74:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim2);
 8000d7a:	480a      	ldr	r0, [pc, #40]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000d7c:	f006 f818 	bl	8006db0 <HAL_TIM_Base_Start_IT>
			cnt = 0;
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	2000037c 	.word	0x2000037c
 8000d94:	20000388 	.word	0x20000388
 8000d98:	447a0000 	.word	0x447a0000
 8000d9c:	200002fc 	.word	0x200002fc
 8000da0:	2000038c 	.word	0x2000038c
 8000da4:	200002b4 	.word	0x200002b4

08000da8 <HAL_UART_RxCpltCallback>:

/*Callback function to receive message from Python client*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	if(recData == 'g'){
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <HAL_UART_RxCpltCallback+0x50>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b67      	cmp	r3, #103	; 0x67
 8000db6:	d109      	bne.n	8000dcc <HAL_UART_RxCpltCallback+0x24>
		  /*Message to start ADC received!, turn on the red led*/
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8000db8:	2201      	movs	r2, #1
 8000dba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dbe:	480f      	ldr	r0, [pc, #60]	; (8000dfc <HAL_UART_RxCpltCallback+0x54>)
 8000dc0:	f001 ff68 	bl	8002c94 <HAL_GPIO_WritePin>
		  /*Start the timer*/
		HAL_TIM_Base_Start_IT(&htim2);
 8000dc4:	480e      	ldr	r0, [pc, #56]	; (8000e00 <HAL_UART_RxCpltCallback+0x58>)
 8000dc6:	f005 fff3 	bl	8006db0 <HAL_TIM_Base_Start_IT>
 8000dca:	e00c      	b.n	8000de6 <HAL_UART_RxCpltCallback+0x3e>
	}

	else if (recData == 'r'){
 8000dcc:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_UART_RxCpltCallback+0x50>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b72      	cmp	r3, #114	; 0x72
 8000dd2:	d108      	bne.n	8000de6 <HAL_UART_RxCpltCallback+0x3e>
		/*Turn off red led*/
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dda:	4808      	ldr	r0, [pc, #32]	; (8000dfc <HAL_UART_RxCpltCallback+0x54>)
 8000ddc:	f001 ff5a 	bl	8002c94 <HAL_GPIO_WritePin>
		/*Stop the timer*/
		HAL_TIM_Base_Stop(&htim2);
 8000de0:	4807      	ldr	r0, [pc, #28]	; (8000e00 <HAL_UART_RxCpltCallback+0x58>)
 8000de2:	f005 ffbe 	bl	8006d62 <HAL_TIM_Base_Stop>
	}

	HAL_UART_Receive_IT(&huart1 , &recData , 1);
 8000de6:	2201      	movs	r2, #1
 8000de8:	4903      	ldr	r1, [pc, #12]	; (8000df8 <HAL_UART_RxCpltCallback+0x50>)
 8000dea:	4806      	ldr	r0, [pc, #24]	; (8000e04 <HAL_UART_RxCpltCallback+0x5c>)
 8000dec:	f006 fce1 	bl	80077b2 <HAL_UART_Receive_IT>
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	2000038d 	.word	0x2000038d
 8000dfc:	40021800 	.word	0x40021800
 8000e00:	200002b4 	.word	0x200002b4
 8000e04:	200002fc 	.word	0x200002fc

08000e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e0c:	b672      	cpsid	i
}
 8000e0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <Error_Handler+0x8>
	...

08000e14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	4a0f      	ldr	r2, [pc, #60]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e28:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	603b      	str	r3, [r7, #0]
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	4a08      	ldr	r2, [pc, #32]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e44:	6413      	str	r3, [r2, #64]	; 0x40
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800

08000e64 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <HAL_CRC_MspInit+0x3c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d10d      	bne.n	8000e92 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <HAL_CRC_MspInit+0x40>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a09      	ldr	r2, [pc, #36]	; (8000ea4 <HAL_CRC_MspInit+0x40>)
 8000e80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <HAL_CRC_MspInit+0x40>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	40023000 	.word	0x40023000
 8000ea4:	40023800 	.word	0x40023800

08000ea8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <HAL_DMA2D_MspInit+0x48>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d115      	bne.n	8000ee6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <HAL_DMA2D_MspInit+0x4c>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a0c      	ldr	r2, [pc, #48]	; (8000ef4 <HAL_DMA2D_MspInit+0x4c>)
 8000ec4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <HAL_DMA2D_MspInit+0x4c>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2105      	movs	r1, #5
 8000eda:	205a      	movs	r0, #90	; 0x5a
 8000edc:	f001 f953 	bl	8002186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000ee0:	205a      	movs	r0, #90	; 0x5a
 8000ee2:	f001 f96c 	bl	80021be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	4002b000 	.word	0x4002b000
 8000ef4:	40023800 	.word	0x40023800

08000ef8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a29      	ldr	r2, [pc, #164]	; (8000fbc <HAL_I2C_MspInit+0xc4>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d14b      	bne.n	8000fb2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	4b28      	ldr	r3, [pc, #160]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a27      	ldr	r2, [pc, #156]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b25      	ldr	r3, [pc, #148]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a20      	ldr	r2, [pc, #128]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000f52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f58:	2312      	movs	r3, #18
 8000f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f64:	2304      	movs	r3, #4
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4815      	ldr	r0, [pc, #84]	; (8000fc4 <HAL_I2C_MspInit+0xcc>)
 8000f70:	f001 fbd8 	bl	8002724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000f74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f7a:	2312      	movs	r3, #18
 8000f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f86:	2304      	movs	r3, #4
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	4619      	mov	r1, r3
 8000f90:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <HAL_I2C_MspInit+0xd0>)
 8000f92:	f001 fbc7 	bl	8002724 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000fa0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000fb2:	bf00      	nop
 8000fb4:	3728      	adds	r7, #40	; 0x28
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40005c00 	.word	0x40005c00
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40020800 	.word	0x40020800
 8000fc8:	40020000 	.word	0x40020000

08000fcc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b09a      	sub	sp, #104	; 0x68
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe8:	2230      	movs	r2, #48	; 0x30
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f00a f957 	bl	800b2a0 <memset>
  if(hltdc->Instance==LTDC)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a85      	ldr	r2, [pc, #532]	; (800120c <HAL_LTDC_MspInit+0x240>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	f040 8103 	bne.w	8001204 <HAL_LTDC_MspInit+0x238>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000ffe:	2308      	movs	r3, #8
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 8001002:	2364      	movs	r3, #100	; 0x64
 8001004:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001006:	2302      	movs	r3, #2
 8001008:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800100a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800100e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001014:	4618      	mov	r0, r3
 8001016:	f005 f915 	bl	8006244 <HAL_RCCEx_PeriphCLKConfig>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8001020:	f7ff fef2 	bl	8000e08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001024:	2300      	movs	r3, #0
 8001026:	623b      	str	r3, [r7, #32]
 8001028:	4b79      	ldr	r3, [pc, #484]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 800102a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102c:	4a78      	ldr	r2, [pc, #480]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 800102e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001032:	6453      	str	r3, [r2, #68]	; 0x44
 8001034:	4b76      	ldr	r3, [pc, #472]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 8001036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001038:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800103c:	623b      	str	r3, [r7, #32]
 800103e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
 8001044:	4b72      	ldr	r3, [pc, #456]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 8001046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001048:	4a71      	ldr	r2, [pc, #452]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 800104a:	f043 0320 	orr.w	r3, r3, #32
 800104e:	6313      	str	r3, [r2, #48]	; 0x30
 8001050:	4b6f      	ldr	r3, [pc, #444]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 8001052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001054:	f003 0320 	and.w	r3, r3, #32
 8001058:	61fb      	str	r3, [r7, #28]
 800105a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105c:	2300      	movs	r3, #0
 800105e:	61bb      	str	r3, [r7, #24]
 8001060:	4b6b      	ldr	r3, [pc, #428]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 8001062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001064:	4a6a      	ldr	r2, [pc, #424]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	6313      	str	r3, [r2, #48]	; 0x30
 800106c:	4b68      	ldr	r3, [pc, #416]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 800106e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	61bb      	str	r3, [r7, #24]
 8001076:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	4b64      	ldr	r3, [pc, #400]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 800107e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001080:	4a63      	ldr	r2, [pc, #396]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 8001082:	f043 0302 	orr.w	r3, r3, #2
 8001086:	6313      	str	r3, [r2, #48]	; 0x30
 8001088:	4b61      	ldr	r3, [pc, #388]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 800108a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	4b5d      	ldr	r3, [pc, #372]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 800109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109c:	4a5c      	ldr	r2, [pc, #368]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 800109e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010a2:	6313      	str	r3, [r2, #48]	; 0x30
 80010a4:	4b5a      	ldr	r3, [pc, #360]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 80010a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	4b56      	ldr	r3, [pc, #344]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 80010b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b8:	4a55      	ldr	r2, [pc, #340]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 80010ba:	f043 0304 	orr.w	r3, r3, #4
 80010be:	6313      	str	r3, [r2, #48]	; 0x30
 80010c0:	4b53      	ldr	r3, [pc, #332]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 80010c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010cc:	2300      	movs	r3, #0
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	4b4f      	ldr	r3, [pc, #316]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 80010d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d4:	4a4e      	ldr	r2, [pc, #312]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 80010d6:	f043 0308 	orr.w	r3, r3, #8
 80010da:	6313      	str	r3, [r2, #48]	; 0x30
 80010dc:	4b4c      	ldr	r3, [pc, #304]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e0:	f003 0308 	and.w	r3, r3, #8
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80010e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ec:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010fa:	230e      	movs	r3, #14
 80010fc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80010fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001102:	4619      	mov	r1, r3
 8001104:	4843      	ldr	r0, [pc, #268]	; (8001214 <HAL_LTDC_MspInit+0x248>)
 8001106:	f001 fb0d 	bl	8002724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800110a:	f641 0358 	movw	r3, #6232	; 0x1858
 800110e:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	2302      	movs	r3, #2
 8001112:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800111c:	230e      	movs	r3, #14
 800111e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001120:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001124:	4619      	mov	r1, r3
 8001126:	483c      	ldr	r0, [pc, #240]	; (8001218 <HAL_LTDC_MspInit+0x24c>)
 8001128:	f001 fafc 	bl	8002724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800112c:	2303      	movs	r3, #3
 800112e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800113c:	2309      	movs	r3, #9
 800113e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001140:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001144:	4619      	mov	r1, r3
 8001146:	4835      	ldr	r0, [pc, #212]	; (800121c <HAL_LTDC_MspInit+0x250>)
 8001148:	f001 faec 	bl	8002724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800114c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001150:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2300      	movs	r3, #0
 800115c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800115e:	230e      	movs	r3, #14
 8001160:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001162:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001166:	4619      	mov	r1, r3
 8001168:	482c      	ldr	r0, [pc, #176]	; (800121c <HAL_LTDC_MspInit+0x250>)
 800116a:	f001 fadb 	bl	8002724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800116e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001172:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001180:	230e      	movs	r3, #14
 8001182:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001184:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001188:	4619      	mov	r1, r3
 800118a:	4825      	ldr	r0, [pc, #148]	; (8001220 <HAL_LTDC_MspInit+0x254>)
 800118c:	f001 faca 	bl	8002724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001190:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001194:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	2302      	movs	r3, #2
 8001198:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011a2:	230e      	movs	r3, #14
 80011a4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011aa:	4619      	mov	r1, r3
 80011ac:	481d      	ldr	r0, [pc, #116]	; (8001224 <HAL_LTDC_MspInit+0x258>)
 80011ae:	f001 fab9 	bl	8002724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80011b2:	2348      	movs	r3, #72	; 0x48
 80011b4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011c2:	230e      	movs	r3, #14
 80011c4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011ca:	4619      	mov	r1, r3
 80011cc:	4816      	ldr	r0, [pc, #88]	; (8001228 <HAL_LTDC_MspInit+0x25c>)
 80011ce:	f001 faa9 	bl	8002724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80011d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011d6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80011e4:	2309      	movs	r3, #9
 80011e6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011ec:	4619      	mov	r1, r3
 80011ee:	480c      	ldr	r0, [pc, #48]	; (8001220 <HAL_LTDC_MspInit+0x254>)
 80011f0:	f001 fa98 	bl	8002724 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2105      	movs	r1, #5
 80011f8:	2058      	movs	r0, #88	; 0x58
 80011fa:	f000 ffc4 	bl	8002186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80011fe:	2058      	movs	r0, #88	; 0x58
 8001200:	f000 ffdd 	bl	80021be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001204:	bf00      	nop
 8001206:	3768      	adds	r7, #104	; 0x68
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40016800 	.word	0x40016800
 8001210:	40023800 	.word	0x40023800
 8001214:	40021400 	.word	0x40021400
 8001218:	40020000 	.word	0x40020000
 800121c:	40020400 	.word	0x40020400
 8001220:	40021800 	.word	0x40021800
 8001224:	40020800 	.word	0x40020800
 8001228:	40020c00 	.word	0x40020c00

0800122c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a19      	ldr	r2, [pc, #100]	; (80012b0 <HAL_SPI_MspInit+0x84>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d12c      	bne.n	80012a8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <HAL_SPI_MspInit+0x88>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	4a17      	ldr	r2, [pc, #92]	; (80012b4 <HAL_SPI_MspInit+0x88>)
 8001258:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800125c:	6453      	str	r3, [r2, #68]	; 0x44
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <HAL_SPI_MspInit+0x88>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <HAL_SPI_MspInit+0x88>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a10      	ldr	r2, [pc, #64]	; (80012b4 <HAL_SPI_MspInit+0x88>)
 8001274:	f043 0320 	orr.w	r3, r3, #32
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <HAL_SPI_MspInit+0x88>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0320 	and.w	r3, r3, #32
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001286:	f44f 7360 	mov.w	r3, #896	; 0x380
 800128a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2300      	movs	r3, #0
 8001296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001298:	2305      	movs	r3, #5
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4619      	mov	r1, r3
 80012a2:	4805      	ldr	r0, [pc, #20]	; (80012b8 <HAL_SPI_MspInit+0x8c>)
 80012a4:	f001 fa3e 	bl	8002724 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80012a8:	bf00      	nop
 80012aa:	3728      	adds	r7, #40	; 0x28
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40015000 	.word	0x40015000
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40021400 	.word	0x40021400

080012bc <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a08      	ldr	r2, [pc, #32]	; (80012ec <HAL_SPI_MspDeInit+0x30>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d10a      	bne.n	80012e4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <HAL_SPI_MspDeInit+0x34>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	4a07      	ldr	r2, [pc, #28]	; (80012f0 <HAL_SPI_MspDeInit+0x34>)
 80012d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80012d8:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80012da:	f44f 7160 	mov.w	r1, #896	; 0x380
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <HAL_SPI_MspDeInit+0x38>)
 80012e0:	f001 fbcc 	bl	8002a7c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40015000 	.word	0x40015000
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40021400 	.word	0x40021400

080012f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a18      	ldr	r2, [pc, #96]	; (8001368 <HAL_TIM_Base_MspInit+0x70>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d10e      	bne.n	8001328 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <HAL_TIM_Base_MspInit+0x74>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	4a16      	ldr	r2, [pc, #88]	; (800136c <HAL_TIM_Base_MspInit+0x74>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6453      	str	r3, [r2, #68]	; 0x44
 800131a:	4b14      	ldr	r3, [pc, #80]	; (800136c <HAL_TIM_Base_MspInit+0x74>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001326:	e01a      	b.n	800135e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001330:	d115      	bne.n	800135e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <HAL_TIM_Base_MspInit+0x74>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	4a0c      	ldr	r2, [pc, #48]	; (800136c <HAL_TIM_Base_MspInit+0x74>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6413      	str	r3, [r2, #64]	; 0x40
 8001342:	4b0a      	ldr	r3, [pc, #40]	; (800136c <HAL_TIM_Base_MspInit+0x74>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2101      	movs	r1, #1
 8001352:	201c      	movs	r0, #28
 8001354:	f000 ff17 	bl	8002186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001358:	201c      	movs	r0, #28
 800135a:	f000 ff30 	bl	80021be <HAL_NVIC_EnableIRQ>
}
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40010000 	.word	0x40010000
 800136c:	40023800 	.word	0x40023800

08001370 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	; 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a1d      	ldr	r2, [pc, #116]	; (8001404 <HAL_UART_MspInit+0x94>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d134      	bne.n	80013fc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <HAL_UART_MspInit+0x98>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	4a1b      	ldr	r2, [pc, #108]	; (8001408 <HAL_UART_MspInit+0x98>)
 800139c:	f043 0310 	orr.w	r3, r3, #16
 80013a0:	6453      	str	r3, [r2, #68]	; 0x44
 80013a2:	4b19      	ldr	r3, [pc, #100]	; (8001408 <HAL_UART_MspInit+0x98>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	f003 0310 	and.w	r3, r3, #16
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	4b15      	ldr	r3, [pc, #84]	; (8001408 <HAL_UART_MspInit+0x98>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a14      	ldr	r2, [pc, #80]	; (8001408 <HAL_UART_MspInit+0x98>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b12      	ldr	r3, [pc, #72]	; (8001408 <HAL_UART_MspInit+0x98>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80013ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013dc:	2307      	movs	r3, #7
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	4619      	mov	r1, r3
 80013e6:	4809      	ldr	r0, [pc, #36]	; (800140c <HAL_UART_MspInit+0x9c>)
 80013e8:	f001 f99c 	bl	8002724 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2101      	movs	r1, #1
 80013f0:	2025      	movs	r0, #37	; 0x25
 80013f2:	f000 fec8 	bl	8002186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013f6:	2025      	movs	r0, #37	; 0x25
 80013f8:	f000 fee1 	bl	80021be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013fc:	bf00      	nop
 80013fe:	3728      	adds	r7, #40	; 0x28
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40011000 	.word	0x40011000
 8001408:	40023800 	.word	0x40023800
 800140c:	40020000 	.word	0x40020000

08001410 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001424:	4b3b      	ldr	r3, [pc, #236]	; (8001514 <HAL_FMC_MspInit+0x104>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d16f      	bne.n	800150c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800142c:	4b39      	ldr	r3, [pc, #228]	; (8001514 <HAL_FMC_MspInit+0x104>)
 800142e:	2201      	movs	r2, #1
 8001430:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	4b38      	ldr	r3, [pc, #224]	; (8001518 <HAL_FMC_MspInit+0x108>)
 8001438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800143a:	4a37      	ldr	r2, [pc, #220]	; (8001518 <HAL_FMC_MspInit+0x108>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6393      	str	r3, [r2, #56]	; 0x38
 8001442:	4b35      	ldr	r3, [pc, #212]	; (8001518 <HAL_FMC_MspInit+0x108>)
 8001444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800144e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001452:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001454:	2302      	movs	r3, #2
 8001456:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145c:	2303      	movs	r3, #3
 800145e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001460:	230c      	movs	r3, #12
 8001462:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	4619      	mov	r1, r3
 8001468:	482c      	ldr	r0, [pc, #176]	; (800151c <HAL_FMC_MspInit+0x10c>)
 800146a:	f001 f95b 	bl	8002724 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800146e:	2301      	movs	r3, #1
 8001470:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800147e:	230c      	movs	r3, #12
 8001480:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	4619      	mov	r1, r3
 8001486:	4826      	ldr	r0, [pc, #152]	; (8001520 <HAL_FMC_MspInit+0x110>)
 8001488:	f001 f94c 	bl	8002724 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800148c:	f248 1333 	movw	r3, #33075	; 0x8133
 8001490:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800149e:	230c      	movs	r3, #12
 80014a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	4619      	mov	r1, r3
 80014a6:	481f      	ldr	r0, [pc, #124]	; (8001524 <HAL_FMC_MspInit+0x114>)
 80014a8:	f001 f93c 	bl	8002724 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80014ac:	f64f 7383 	movw	r3, #65411	; 0xff83
 80014b0:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	2302      	movs	r3, #2
 80014b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ba:	2303      	movs	r3, #3
 80014bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014be:	230c      	movs	r3, #12
 80014c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	4619      	mov	r1, r3
 80014c6:	4818      	ldr	r0, [pc, #96]	; (8001528 <HAL_FMC_MspInit+0x118>)
 80014c8:	f001 f92c 	bl	8002724 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80014cc:	f24c 7303 	movw	r3, #50947	; 0xc703
 80014d0:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d2:	2302      	movs	r3, #2
 80014d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014da:	2303      	movs	r3, #3
 80014dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014de:	230c      	movs	r3, #12
 80014e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	4619      	mov	r1, r3
 80014e6:	4811      	ldr	r0, [pc, #68]	; (800152c <HAL_FMC_MspInit+0x11c>)
 80014e8:	f001 f91c 	bl	8002724 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80014ec:	2360      	movs	r3, #96	; 0x60
 80014ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014fc:	230c      	movs	r3, #12
 80014fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	4619      	mov	r1, r3
 8001504:	480a      	ldr	r0, [pc, #40]	; (8001530 <HAL_FMC_MspInit+0x120>)
 8001506:	f001 f90d 	bl	8002724 <HAL_GPIO_Init>
 800150a:	e000      	b.n	800150e <HAL_FMC_MspInit+0xfe>
    return;
 800150c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000390 	.word	0x20000390
 8001518:	40023800 	.word	0x40023800
 800151c:	40021400 	.word	0x40021400
 8001520:	40020800 	.word	0x40020800
 8001524:	40021800 	.word	0x40021800
 8001528:	40021000 	.word	0x40021000
 800152c:	40020c00 	.word	0x40020c00
 8001530:	40020400 	.word	0x40020400

08001534 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800153c:	f7ff ff68 	bl	8001410 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800154c:	e7fe      	b.n	800154c <NMI_Handler+0x4>

0800154e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <HardFault_Handler+0x4>

08001554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <MemManage_Handler+0x4>

0800155a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155e:	e7fe      	b.n	800155e <BusFault_Handler+0x4>

08001560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <UsageFault_Handler+0x4>

08001566 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001594:	f000 fcd8 	bl	8001f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}

0800159c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <TIM2_IRQHandler+0x10>)
 80015a2:	f005 fc75 	bl	8006e90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200002b4 	.word	0x200002b4

080015b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015b4:	4802      	ldr	r0, [pc, #8]	; (80015c0 <USART1_IRQHandler+0x10>)
 80015b6:	f006 f921 	bl	80077fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200002fc 	.word	0x200002fc

080015c4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <OTG_HS_IRQHandler+0x10>)
 80015ca:	f001 fe5d 	bl	8003288 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	200007d4 	.word	0x200007d4

080015d8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <LTDC_IRQHandler+0x10>)
 80015de:	f003 ff01 	bl	80053e4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	2000016c 	.word	0x2000016c

080015ec <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80015f0:	4802      	ldr	r0, [pc, #8]	; (80015fc <DMA2D_IRQHandler+0x10>)
 80015f2:	f000 fef5 	bl	80023e0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200000d8 	.word	0x200000d8

08001600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001608:	4a14      	ldr	r2, [pc, #80]	; (800165c <_sbrk+0x5c>)
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <_sbrk+0x60>)
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001614:	4b13      	ldr	r3, [pc, #76]	; (8001664 <_sbrk+0x64>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d102      	bne.n	8001622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <_sbrk+0x64>)
 800161e:	4a12      	ldr	r2, [pc, #72]	; (8001668 <_sbrk+0x68>)
 8001620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <_sbrk+0x64>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	429a      	cmp	r2, r3
 800162e:	d207      	bcs.n	8001640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001630:	f009 fe4e 	bl	800b2d0 <__errno>
 8001634:	4603      	mov	r3, r0
 8001636:	220c      	movs	r2, #12
 8001638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
 800163e:	e009      	b.n	8001654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001646:	4b07      	ldr	r3, [pc, #28]	; (8001664 <_sbrk+0x64>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	4a05      	ldr	r2, [pc, #20]	; (8001664 <_sbrk+0x64>)
 8001650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001652:	68fb      	ldr	r3, [r7, #12]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20030000 	.word	0x20030000
 8001660:	00000400 	.word	0x00000400
 8001664:	20000394 	.word	0x20000394
 8001668:	20000d00 	.word	0x20000d00

0800166c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <SystemInit+0x20>)
 8001672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001676:	4a05      	ldr	r2, [pc, #20]	; (800168c <SystemInit+0x20>)
 8001678:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800167c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001690:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001694:	f7ff ffea 	bl	800166c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001698:	480c      	ldr	r0, [pc, #48]	; (80016cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800169a:	490d      	ldr	r1, [pc, #52]	; (80016d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800169c:	4a0d      	ldr	r2, [pc, #52]	; (80016d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800169e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a0:	e002      	b.n	80016a8 <LoopCopyDataInit>

080016a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a6:	3304      	adds	r3, #4

080016a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016ac:	d3f9      	bcc.n	80016a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ae:	4a0a      	ldr	r2, [pc, #40]	; (80016d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016b0:	4c0a      	ldr	r4, [pc, #40]	; (80016dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80016b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b4:	e001      	b.n	80016ba <LoopFillZerobss>

080016b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b8:	3204      	adds	r2, #4

080016ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016bc:	d3fb      	bcc.n	80016b6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80016be:	f009 fe0d 	bl	800b2dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016c2:	f7fe ff11 	bl	80004e8 <main>
  bx  lr    
 80016c6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80016c8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80016cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d0:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 80016d4:	0800b404 	.word	0x0800b404
  ldr r2, =_sbss
 80016d8:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 80016dc:	20000cfc 	.word	0x20000cfc

080016e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e0:	e7fe      	b.n	80016e0 <ADC_IRQHandler>

080016e2 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b084      	sub	sp, #16
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	4603      	mov	r3, r0
 80016ea:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80016ec:	2300      	movs	r3, #0
 80016ee:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80016f0:	f000 fa8e 	bl	8001c10 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80016f4:	88fb      	ldrh	r3, [r7, #6]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80016fa:	f107 030f 	add.w	r3, r7, #15
 80016fe:	2201      	movs	r2, #1
 8001700:	2120      	movs	r1, #32
 8001702:	4618      	mov	r0, r3
 8001704:	f000 fad0 	bl	8001ca8 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8001708:	88fb      	ldrh	r3, [r7, #6]
 800170a:	0a1b      	lsrs	r3, r3, #8
 800170c:	b29b      	uxth	r3, r3
 800170e:	b2db      	uxtb	r3, r3
 8001710:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8001712:	f107 030f 	add.w	r3, r7, #15
 8001716:	2201      	movs	r2, #1
 8001718:	2123      	movs	r1, #35	; 0x23
 800171a:	4618      	mov	r0, r3
 800171c:	f000 fac4 	bl	8001ca8 <GYRO_IO_Write>
}
 8001720:	bf00      	nop
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 800173c:	f000 fa68 	bl	8001c10 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8001740:	1dfb      	adds	r3, r7, #7
 8001742:	2201      	movs	r2, #1
 8001744:	210f      	movs	r1, #15
 8001746:	4618      	mov	r0, r3
 8001748:	f000 fae0 	bl	8001d0c <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 800174c:	79fb      	ldrb	r3, [r7, #7]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800175c:	1dfb      	adds	r3, r7, #7
 800175e:	2201      	movs	r2, #1
 8001760:	2124      	movs	r1, #36	; 0x24
 8001762:	4618      	mov	r0, r3
 8001764:	f000 fad2 	bl	8001d0c <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800176e:	b2db      	uxtb	r3, r3
 8001770:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001772:	1dfb      	adds	r3, r7, #7
 8001774:	2201      	movs	r2, #1
 8001776:	2124      	movs	r1, #36	; 0x24
 8001778:	4618      	mov	r0, r3
 800177a:	f000 fa95 	bl	8001ca8 <GYRO_IO_Write>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8001786:	b580      	push	{r7, lr}
 8001788:	b084      	sub	sp, #16
 800178a:	af00      	add	r7, sp, #0
 800178c:	4603      	mov	r3, r0
 800178e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001790:	2300      	movs	r3, #0
 8001792:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001794:	88fb      	ldrh	r3, [r7, #6]
 8001796:	b2db      	uxtb	r3, r3
 8001798:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800179a:	f107 030f 	add.w	r3, r7, #15
 800179e:	2201      	movs	r2, #1
 80017a0:	2120      	movs	r1, #32
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 fa80 	bl	8001ca8 <GYRO_IO_Write>
}
 80017a8:	bf00      	nop
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 80017ba:	2300      	movs	r3, #0
 80017bc:	73fb      	strb	r3, [r7, #15]
 80017be:	2300      	movs	r3, #0
 80017c0:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80017c2:	f107 030f 	add.w	r3, r7, #15
 80017c6:	2201      	movs	r2, #1
 80017c8:	2130      	movs	r1, #48	; 0x30
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 fa9e 	bl	8001d0c <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80017d0:	f107 030e 	add.w	r3, r7, #14
 80017d4:	2201      	movs	r2, #1
 80017d6:	2122      	movs	r1, #34	; 0x22
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 fa97 	bl	8001d0c <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 80017de:	7bfb      	ldrb	r3, [r7, #15]
 80017e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 80017e8:	88fb      	ldrh	r3, [r7, #6]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	121b      	asrs	r3, r3, #8
 80017ee:	b25a      	sxtb	r2, r3
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	b25b      	sxtb	r3, r3
 80017f4:	4313      	orrs	r3, r2
 80017f6:	b25b      	sxtb	r3, r3
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 80017fc:	7bbb      	ldrb	r3, [r7, #14]
 80017fe:	f023 0320 	bic.w	r3, r3, #32
 8001802:	b2db      	uxtb	r3, r3
 8001804:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	b2da      	uxtb	r2, r3
 800180a:	7bbb      	ldrb	r3, [r7, #14]
 800180c:	4313      	orrs	r3, r2
 800180e:	b2db      	uxtb	r3, r3
 8001810:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001812:	f107 030f 	add.w	r3, r7, #15
 8001816:	2201      	movs	r2, #1
 8001818:	2130      	movs	r1, #48	; 0x30
 800181a:	4618      	mov	r0, r3
 800181c:	f000 fa44 	bl	8001ca8 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001820:	f107 030e 	add.w	r3, r7, #14
 8001824:	2201      	movs	r2, #1
 8001826:	2122      	movs	r1, #34	; 0x22
 8001828:	4618      	mov	r0, r3
 800182a:	f000 fa3d 	bl	8001ca8 <GYRO_IO_Write>
}
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8001836:	b580      	push	{r7, lr}
 8001838:	b084      	sub	sp, #16
 800183a:	af00      	add	r7, sp, #0
 800183c:	4603      	mov	r3, r0
 800183e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001840:	f107 030f 	add.w	r3, r7, #15
 8001844:	2201      	movs	r2, #1
 8001846:	2122      	movs	r1, #34	; 0x22
 8001848:	4618      	mov	r0, r3
 800184a:	f000 fa5f 	bl	8001d0c <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d10a      	bne.n	800186a <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001854:	7bfb      	ldrb	r3, [r7, #15]
 8001856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800185a:	b2db      	uxtb	r3, r3
 800185c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001864:	b2db      	uxtb	r3, r3
 8001866:	73fb      	strb	r3, [r7, #15]
 8001868:	e00c      	b.n	8001884 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d109      	bne.n	8001884 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	f023 0308 	bic.w	r3, r3, #8
 8001876:	b2db      	uxtb	r3, r3
 8001878:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	f043 0308 	orr.w	r3, r3, #8
 8001880:	b2db      	uxtb	r3, r3
 8001882:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001884:	f107 030f 	add.w	r3, r7, #15
 8001888:	2201      	movs	r2, #1
 800188a:	2122      	movs	r1, #34	; 0x22
 800188c:	4618      	mov	r0, r3
 800188e:	f000 fa0b 	bl	8001ca8 <GYRO_IO_Write>
}
 8001892:	bf00      	nop
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 800189a:	b580      	push	{r7, lr}
 800189c:	b084      	sub	sp, #16
 800189e:	af00      	add	r7, sp, #0
 80018a0:	4603      	mov	r3, r0
 80018a2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80018a4:	f107 030f 	add.w	r3, r7, #15
 80018a8:	2201      	movs	r2, #1
 80018aa:	2122      	movs	r1, #34	; 0x22
 80018ac:	4618      	mov	r0, r3
 80018ae:	f000 fa2d 	bl	8001d0c <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d107      	bne.n	80018c8 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
 80018c4:	73fb      	strb	r3, [r7, #15]
 80018c6:	e009      	b.n	80018dc <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d106      	bne.n	80018dc <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	f023 0308 	bic.w	r3, r3, #8
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80018dc:	f107 030f 	add.w	r3, r7, #15
 80018e0:	2201      	movs	r2, #1
 80018e2:	2122      	movs	r1, #34	; 0x22
 80018e4:	4618      	mov	r0, r3
 80018e6:	f000 f9df 	bl	8001ca8 <GYRO_IO_Write>
}
 80018ea:	bf00      	nop
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b084      	sub	sp, #16
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	4603      	mov	r3, r0
 80018fa:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80018fc:	f107 030f 	add.w	r3, r7, #15
 8001900:	2201      	movs	r2, #1
 8001902:	2121      	movs	r1, #33	; 0x21
 8001904:	4618      	mov	r0, r3
 8001906:	f000 fa01 	bl	8001d0c <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001910:	b2db      	uxtb	r3, r3
 8001912:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8001914:	7bfa      	ldrb	r2, [r7, #15]
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	4313      	orrs	r3, r2
 800191a:	b2db      	uxtb	r3, r3
 800191c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800191e:	f107 030f 	add.w	r3, r7, #15
 8001922:	2201      	movs	r2, #1
 8001924:	2121      	movs	r1, #33	; 0x21
 8001926:	4618      	mov	r0, r3
 8001928:	f000 f9be 	bl	8001ca8 <GYRO_IO_Write>
}
 800192c:	bf00      	nop
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800193e:	f107 030f 	add.w	r3, r7, #15
 8001942:	2201      	movs	r2, #1
 8001944:	2124      	movs	r1, #36	; 0x24
 8001946:	4618      	mov	r0, r3
 8001948:	f000 f9e0 	bl	8001d0c <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	f023 0310 	bic.w	r3, r3, #16
 8001952:	b2db      	uxtb	r3, r3
 8001954:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001956:	7bfa      	ldrb	r2, [r7, #15]
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	4313      	orrs	r3, r2
 800195c:	b2db      	uxtb	r3, r3
 800195e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001960:	f107 030f 	add.w	r3, r7, #15
 8001964:	2201      	movs	r2, #1
 8001966:	2124      	movs	r1, #36	; 0x24
 8001968:	4618      	mov	r0, r3
 800196a:	f000 f99d 	bl	8001ca8 <GYRO_IO_Write>
}
 800196e:	bf00      	nop
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08a      	sub	sp, #40	; 0x28
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001980:	2300      	movs	r3, #0
 8001982:	61bb      	str	r3, [r7, #24]
 8001984:	2300      	movs	r3, #0
 8001986:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001988:	f107 0310 	add.w	r3, r7, #16
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001996:	f04f 0300 	mov.w	r3, #0
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 800199c:	2300      	movs	r3, #0
 800199e:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 80019a0:	f107 030f 	add.w	r3, r7, #15
 80019a4:	2201      	movs	r2, #1
 80019a6:	2123      	movs	r1, #35	; 0x23
 80019a8:	4618      	mov	r0, r3
 80019aa:	f000 f9af 	bl	8001d0c <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 80019ae:	f107 0318 	add.w	r3, r7, #24
 80019b2:	2206      	movs	r2, #6
 80019b4:	2128      	movs	r1, #40	; 0x28
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 f9a8 	bl	8001d0c <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d123      	bne.n	8001a0e <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	623b      	str	r3, [r7, #32]
 80019ca:	e01c      	b.n	8001a06 <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 80019cc:	6a3b      	ldr	r3, [r7, #32]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	3301      	adds	r3, #1
 80019d2:	3328      	adds	r3, #40	; 0x28
 80019d4:	443b      	add	r3, r7
 80019d6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	021b      	lsls	r3, r3, #8
 80019de:	b29a      	uxth	r2, r3
 80019e0:	6a3b      	ldr	r3, [r7, #32]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	3328      	adds	r3, #40	; 0x28
 80019e6:	443b      	add	r3, r7
 80019e8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	4413      	add	r3, r2
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	b21a      	sxth	r2, r3
 80019f4:	6a3b      	ldr	r3, [r7, #32]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	3328      	adds	r3, #40	; 0x28
 80019fa:	443b      	add	r3, r7
 80019fc:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001a00:	6a3b      	ldr	r3, [r7, #32]
 8001a02:	3301      	adds	r3, #1
 8001a04:	623b      	str	r3, [r7, #32]
 8001a06:	6a3b      	ldr	r3, [r7, #32]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	dddf      	ble.n	80019cc <L3GD20_ReadXYZAngRate+0x54>
 8001a0c:	e022      	b.n	8001a54 <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	623b      	str	r3, [r7, #32]
 8001a12:	e01c      	b.n	8001a4e <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	3328      	adds	r3, #40	; 0x28
 8001a1a:	443b      	add	r3, r7
 8001a1c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	021b      	lsls	r3, r3, #8
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	3328      	adds	r3, #40	; 0x28
 8001a2e:	443b      	add	r3, r7
 8001a30:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	4413      	add	r3, r2
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	b21a      	sxth	r2, r3
 8001a3c:	6a3b      	ldr	r3, [r7, #32]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	3328      	adds	r3, #40	; 0x28
 8001a42:	443b      	add	r3, r7
 8001a44:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001a48:	6a3b      	ldr	r3, [r7, #32]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	623b      	str	r3, [r7, #32]
 8001a4e:	6a3b      	ldr	r3, [r7, #32]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	dddf      	ble.n	8001a14 <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001a5a:	2b20      	cmp	r3, #32
 8001a5c:	d00c      	beq.n	8001a78 <L3GD20_ReadXYZAngRate+0x100>
 8001a5e:	2b20      	cmp	r3, #32
 8001a60:	dc0d      	bgt.n	8001a7e <L3GD20_ReadXYZAngRate+0x106>
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d002      	beq.n	8001a6c <L3GD20_ReadXYZAngRate+0xf4>
 8001a66:	2b10      	cmp	r3, #16
 8001a68:	d003      	beq.n	8001a72 <L3GD20_ReadXYZAngRate+0xfa>
 8001a6a:	e008      	b.n	8001a7e <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8001a6c:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <L3GD20_ReadXYZAngRate+0x14c>)
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001a70:	e005      	b.n	8001a7e <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8001a72:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <L3GD20_ReadXYZAngRate+0x150>)
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001a76:	e002      	b.n	8001a7e <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8001a78:	4b14      	ldr	r3, [pc, #80]	; (8001acc <L3GD20_ReadXYZAngRate+0x154>)
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001a7c:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8001a7e:	2300      	movs	r3, #0
 8001a80:	623b      	str	r3, [r7, #32]
 8001a82:	e016      	b.n	8001ab2 <L3GD20_ReadXYZAngRate+0x13a>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8001a84:	6a3b      	ldr	r3, [r7, #32]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	3328      	adds	r3, #40	; 0x28
 8001a8a:	443b      	add	r3, r7
 8001a8c:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001a90:	ee07 3a90 	vmov	s15, r3
 8001a94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a98:	6a3b      	ldr	r3, [r7, #32]
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa8:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001aac:	6a3b      	ldr	r3, [r7, #32]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	623b      	str	r3, [r7, #32]
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	dde5      	ble.n	8001a84 <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 8001ab8:	bf00      	nop
 8001aba:	bf00      	nop
 8001abc:	3728      	adds	r7, #40	; 0x28
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	410c0000 	.word	0x410c0000
 8001ac8:	418c0000 	.word	0x418c0000
 8001acc:	428c0000 	.word	0x428c0000

08001ad0 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001ad4:	4819      	ldr	r0, [pc, #100]	; (8001b3c <SPIx_Init+0x6c>)
 8001ad6:	f005 f80a 	bl	8006aee <HAL_SPI_GetState>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d12b      	bne.n	8001b38 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001ae0:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <SPIx_Init+0x6c>)
 8001ae2:	4a17      	ldr	r2, [pc, #92]	; (8001b40 <SPIx_Init+0x70>)
 8001ae4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <SPIx_Init+0x6c>)
 8001ae8:	2218      	movs	r2, #24
 8001aea:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001aec:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <SPIx_Init+0x6c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001af2:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <SPIx_Init+0x6c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001af8:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <SPIx_Init+0x6c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001afe:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <SPIx_Init+0x6c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001b04:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <SPIx_Init+0x6c>)
 8001b06:	2207      	movs	r2, #7
 8001b08:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <SPIx_Init+0x6c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001b10:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <SPIx_Init+0x6c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <SPIx_Init+0x6c>)
 8001b18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b1c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001b1e:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <SPIx_Init+0x6c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <SPIx_Init+0x6c>)
 8001b26:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b2a:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8001b2c:	4803      	ldr	r0, [pc, #12]	; (8001b3c <SPIx_Init+0x6c>)
 8001b2e:	f000 f835 	bl	8001b9c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001b32:	4802      	ldr	r0, [pc, #8]	; (8001b3c <SPIx_Init+0x6c>)
 8001b34:	f004 fd7a 	bl	800662c <HAL_SPI_Init>
  }
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000398 	.word	0x20000398
 8001b40:	40015000 	.word	0x40015000

08001b44 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af02      	add	r7, sp, #8
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	73fb      	strb	r3, [r7, #15]

  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if (HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *) &Byte, (uint8_t *) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001b52:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <SPIx_WriteRead+0x38>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f107 020f 	add.w	r2, r7, #15
 8001b5a:	1df9      	adds	r1, r7, #7
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	2301      	movs	r3, #1
 8001b60:	4807      	ldr	r0, [pc, #28]	; (8001b80 <SPIx_WriteRead+0x3c>)
 8001b62:	f004 fe14 	bl	800678e <HAL_SPI_TransmitReceive>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8001b6c:	f000 f80a 	bl	8001b84 <SPIx_Error>
  }

  return receivedbyte;
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000038 	.word	0x20000038
 8001b80:	20000398 	.word	0x20000398

08001b84 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001b88:	4803      	ldr	r0, [pc, #12]	; (8001b98 <SPIx_Error+0x14>)
 8001b8a:	f004 fdd8 	bl	800673e <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001b8e:	f7ff ff9f 	bl	8001ad0 <SPIx_Init>
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000398 	.word	0x20000398

08001b9c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08a      	sub	sp, #40	; 0x28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <SPIx_MspInit+0x6c>)
 8001baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bac:	4a16      	ldr	r2, [pc, #88]	; (8001c08 <SPIx_MspInit+0x6c>)
 8001bae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bb2:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb4:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <SPIx_MspInit+0x6c>)
 8001bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <SPIx_MspInit+0x6c>)
 8001bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc8:	4a0f      	ldr	r2, [pc, #60]	; (8001c08 <SPIx_MspInit+0x6c>)
 8001bca:	f043 0320 	orr.w	r3, r3, #32
 8001bce:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd0:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <SPIx_MspInit+0x6c>)
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd4:	f003 0320 	and.w	r3, r3, #32
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001bdc:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001be6:	2302      	movs	r3, #2
 8001be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001bea:	2301      	movs	r3, #1
 8001bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001bee:	2305      	movs	r3, #5
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8001bf2:	f107 0314 	add.w	r3, r7, #20
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4804      	ldr	r0, [pc, #16]	; (8001c0c <SPIx_MspInit+0x70>)
 8001bfa:	f000 fd93 	bl	8002724 <HAL_GPIO_Init>
}
 8001bfe:	bf00      	nop
 8001c00:	3728      	adds	r7, #40	; 0x28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40021400 	.word	0x40021400

08001c10 <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */
  GYRO_CS_GPIO_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	4b20      	ldr	r3, [pc, #128]	; (8001c9c <GYRO_IO_Init+0x8c>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a1f      	ldr	r2, [pc, #124]	; (8001c9c <GYRO_IO_Init+0x8c>)
 8001c20:	f043 0304 	orr.w	r3, r3, #4
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4b1d      	ldr	r3, [pc, #116]	; (8001c9c <GYRO_IO_Init+0x8c>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8001c32:	2302      	movs	r3, #2
 8001c34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001c36:	2301      	movs	r3, #1
 8001c38:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001c42:	f107 030c 	add.w	r3, r7, #12
 8001c46:	4619      	mov	r1, r3
 8001c48:	4815      	ldr	r0, [pc, #84]	; (8001ca0 <GYRO_IO_Init+0x90>)
 8001c4a:	f000 fd6b 	bl	8002724 <HAL_GPIO_Init>

  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 8001c4e:	2201      	movs	r2, #1
 8001c50:	2102      	movs	r1, #2
 8001c52:	4813      	ldr	r0, [pc, #76]	; (8001ca0 <GYRO_IO_Init+0x90>)
 8001c54:	f001 f81e 	bl	8002c94 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8001c58:	2300      	movs	r3, #0
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <GYRO_IO_Init+0x8c>)
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c60:	4a0e      	ldr	r2, [pc, #56]	; (8001c9c <GYRO_IO_Init+0x8c>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6313      	str	r3, [r2, #48]	; 0x30
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <GYRO_IO_Init+0x8c>)
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8001c74:	2306      	movs	r3, #6
 8001c76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001c84:	f107 030c 	add.w	r3, r7, #12
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4806      	ldr	r0, [pc, #24]	; (8001ca4 <GYRO_IO_Init+0x94>)
 8001c8c:	f000 fd4a 	bl	8002724 <HAL_GPIO_Init>

  SPIx_Init();
 8001c90:	f7ff ff1e 	bl	8001ad0 <SPIx_Init>
}
 8001c94:	bf00      	nop
 8001c96:	3720      	adds	r7, #32
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40020800 	.word	0x40020800
 8001ca4:	40020000 	.word	0x40020000

08001ca8 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	70fb      	strb	r3, [r7, #3]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit:
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if (NumByteToWrite > 0x01)
 8001cb8:	883b      	ldrh	r3, [r7, #0]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d903      	bls.n	8001cc6 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8001cbe:	78fb      	ldrb	r3, [r7, #3]
 8001cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cc4:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2102      	movs	r1, #2
 8001cca:	480f      	ldr	r0, [pc, #60]	; (8001d08 <GYRO_IO_Write+0x60>)
 8001ccc:	f000 ffe2 	bl	8002c94 <HAL_GPIO_WritePin>

  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8001cd0:	78fb      	ldrb	r3, [r7, #3]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff ff36 	bl	8001b44 <SPIx_WriteRead>

  /* Send the data that will be written into the device (MSB First) */
  while (NumByteToWrite >= 0x01)
 8001cd8:	e00a      	b.n	8001cf0 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff ff30 	bl	8001b44 <SPIx_WriteRead>
    NumByteToWrite--;
 8001ce4:	883b      	ldrh	r3, [r7, #0]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3301      	adds	r3, #1
 8001cee:	607b      	str	r3, [r7, #4]
  while (NumByteToWrite >= 0x01)
 8001cf0:	883b      	ldrh	r3, [r7, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f1      	bne.n	8001cda <GYRO_IO_Write+0x32>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	2102      	movs	r1, #2
 8001cfa:	4803      	ldr	r0, [pc, #12]	; (8001d08 <GYRO_IO_Write+0x60>)
 8001cfc:	f000 ffca 	bl	8002c94 <HAL_GPIO_WritePin>
}
 8001d00:	bf00      	nop
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40020800 	.word	0x40020800

08001d0c <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	70fb      	strb	r3, [r7, #3]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	803b      	strh	r3, [r7, #0]
  if (NumByteToRead > 0x01)
 8001d1c:	883b      	ldrh	r3, [r7, #0]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d904      	bls.n	8001d2c <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8001d22:	78fb      	ldrb	r3, [r7, #3]
 8001d24:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001d28:	70fb      	strb	r3, [r7, #3]
 8001d2a:	e003      	b.n	8001d34 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d32:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8001d34:	2200      	movs	r2, #0
 8001d36:	2102      	movs	r1, #2
 8001d38:	4810      	ldr	r0, [pc, #64]	; (8001d7c <GYRO_IO_Read+0x70>)
 8001d3a:	f000 ffab 	bl	8002c94 <HAL_GPIO_WritePin>

  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8001d3e:	78fb      	ldrb	r3, [r7, #3]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff feff 	bl	8001b44 <SPIx_WriteRead>

  /* Receive the data that will be read from the device (MSB First) */
  while (NumByteToRead > 0x00)
 8001d46:	e00c      	b.n	8001d62 <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f7ff fefb 	bl	8001b44 <SPIx_WriteRead>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	461a      	mov	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8001d56:	883b      	ldrh	r3, [r7, #0]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	607b      	str	r3, [r7, #4]
  while (NumByteToRead > 0x00)
 8001d62:	883b      	ldrh	r3, [r7, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1ef      	bne.n	8001d48 <GYRO_IO_Read+0x3c>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 8001d68:	2201      	movs	r2, #1
 8001d6a:	2102      	movs	r1, #2
 8001d6c:	4803      	ldr	r0, [pc, #12]	; (8001d7c <GYRO_IO_Read+0x70>)
 8001d6e:	f000 ff91 	bl	8002c94 <HAL_GPIO_WritePin>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40020800 	.word	0x40020800

08001d80 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0, 0};
 8001d8e:	2300      	movs	r3, #0
 8001d90:	703b      	strb	r3, [r7, #0]
 8001d92:	2300      	movs	r3, #0
 8001d94:	707b      	strb	r3, [r7, #1]

  if ((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8001d96:	4b2b      	ldr	r3, [pc, #172]	; (8001e44 <BSP_GYRO_Init+0xc4>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	4798      	blx	r3
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2bd3      	cmp	r3, #211	; 0xd3
 8001da0:	d005      	beq.n	8001dae <BSP_GYRO_Init+0x2e>
 8001da2:	4b28      	ldr	r3, [pc, #160]	; (8001e44 <BSP_GYRO_Init+0xc4>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	4798      	blx	r3
 8001da8:	4603      	mov	r3, r0
 8001daa:	2bd4      	cmp	r3, #212	; 0xd4
 8001dac:	d145      	bne.n	8001e3a <BSP_GYRO_Init+0xba>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8001dae:	4b26      	ldr	r3, [pc, #152]	; (8001e48 <BSP_GYRO_Init+0xc8>)
 8001db0:	4a24      	ldr	r2, [pc, #144]	; (8001e44 <BSP_GYRO_Init+0xc4>)
 8001db2:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8001db4:	2308      	movs	r3, #8
 8001db6:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8001db8:	2300      	movs	r3, #0
 8001dba:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8001dbc:	2307      	movs	r3, #7
 8001dbe:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8001dc0:	2330      	movs	r3, #48	; 0x30
 8001dc2:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8001dcc:	2310      	movs	r3, #16
 8001dce:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8001dd0:	793a      	ldrb	r2, [r7, #4]
 8001dd2:	797b      	ldrb	r3, [r7, #5]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	b2da      	uxtb	r2, r3
                      Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8001dd8:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	b2da      	uxtb	r2, r3
                      Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8001dde:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8001de0:	4313      	orrs	r3, r2
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t)((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8001de6:	7a3a      	ldrb	r2, [r7, #8]
 8001de8:	7a7b      	ldrb	r3, [r7, #9]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	b2da      	uxtb	r2, r3
                        Gyro_InitStructure.Full_Scale) << 8);
 8001dee:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t)((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8001df0:	4313      	orrs	r3, r2
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	021b      	lsls	r3, r3, #8
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	89bb      	ldrh	r3, [r7, #12]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8001e00:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <BSP_GYRO_Init+0xc8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	89ba      	ldrh	r2, [r7, #12]
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t)((Gyro_FilterStructure.HighPassFilter_Mode_Selection | \
 8001e14:	783a      	ldrb	r2, [r7, #0]
                      Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8001e16:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t)((Gyro_FilterStructure.HighPassFilter_Mode_Selection | \
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <BSP_GYRO_Init+0xc8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e24:	89ba      	ldrh	r2, [r7, #12]
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	4610      	mov	r0, r2
 8001e2a:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <BSP_GYRO_Init+0xc8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e32:	2010      	movs	r0, #16
 8001e34:	4798      	blx	r3

    ret = GYRO_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000004 	.word	0x20000004
 8001e48:	200003f0 	.word	0x200003f0

08001e4c <BSP_GYRO_ReadID>:
/**
  * @brief  Read ID of gyroscope component.
  * @retval ID
  */
uint8_t BSP_GYRO_ReadID(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
  uint8_t id = 0x00;
 8001e52:	2300      	movs	r3, #0
 8001e54:	71fb      	strb	r3, [r7, #7]

  if (GyroscopeDrv->ReadID != NULL)
 8001e56:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <BSP_GYRO_ReadID+0x2c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <BSP_GYRO_ReadID+0x20>
  {
    id = GyroscopeDrv->ReadID();
 8001e60:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <BSP_GYRO_ReadID+0x2c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	4798      	blx	r3
 8001e68:	4603      	mov	r3, r0
 8001e6a:	71fb      	strb	r3, [r7, #7]
  }
  return id;
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	200003f0 	.word	0x200003f0

08001e7c <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  if (GyroscopeDrv->GetXYZ != NULL)
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <BSP_GYRO_GetXYZ+0x24>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d004      	beq.n	8001e98 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 8001e8e:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <BSP_GYRO_GetXYZ+0x24>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	4798      	blx	r3
  }
}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	200003f0 	.word	0x200003f0

08001ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ea8:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <HAL_Init+0x40>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a0d      	ldr	r2, [pc, #52]	; (8001ee4 <HAL_Init+0x40>)
 8001eae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <HAL_Init+0x40>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <HAL_Init+0x40>)
 8001eba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ebe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ec0:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <HAL_Init+0x40>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a07      	ldr	r2, [pc, #28]	; (8001ee4 <HAL_Init+0x40>)
 8001ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ecc:	2003      	movs	r0, #3
 8001ece:	f000 f94f 	bl	8002170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f000 f808 	bl	8001ee8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed8:	f7fe ff9c 	bl	8000e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40023c00 	.word	0x40023c00

08001ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ef0:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <HAL_InitTick+0x54>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <HAL_InitTick+0x58>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 f967 	bl	80021da <HAL_SYSTICK_Config>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e00e      	b.n	8001f34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b0f      	cmp	r3, #15
 8001f1a:	d80a      	bhi.n	8001f32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	f04f 30ff 	mov.w	r0, #4294967295
 8001f24:	f000 f92f 	bl	8002186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f28:	4a06      	ldr	r2, [pc, #24]	; (8001f44 <HAL_InitTick+0x5c>)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	e000      	b.n	8001f34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	20000040 	.word	0x20000040
 8001f44:	2000003c 	.word	0x2000003c

08001f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <HAL_IncTick+0x20>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <HAL_IncTick+0x24>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	4a04      	ldr	r2, [pc, #16]	; (8001f6c <HAL_IncTick+0x24>)
 8001f5a:	6013      	str	r3, [r2, #0]
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	20000040 	.word	0x20000040
 8001f6c:	200003f4 	.word	0x200003f4

08001f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return uwTick;
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <HAL_GetTick+0x14>)
 8001f76:	681b      	ldr	r3, [r3, #0]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	200003f4 	.word	0x200003f4

08001f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f90:	f7ff ffee 	bl	8001f70 <HAL_GetTick>
 8001f94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa0:	d005      	beq.n	8001fae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <HAL_Delay+0x44>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4413      	add	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fae:	bf00      	nop
 8001fb0:	f7ff ffde 	bl	8001f70 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d8f7      	bhi.n	8001fb0 <HAL_Delay+0x28>
  {
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000040 	.word	0x20000040

08001fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fec:	4013      	ands	r3, r2
 8001fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ff8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002002:	4a04      	ldr	r2, [pc, #16]	; (8002014 <__NVIC_SetPriorityGrouping+0x44>)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	60d3      	str	r3, [r2, #12]
}
 8002008:	bf00      	nop
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800201c:	4b04      	ldr	r3, [pc, #16]	; (8002030 <__NVIC_GetPriorityGrouping+0x18>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	0a1b      	lsrs	r3, r3, #8
 8002022:	f003 0307 	and.w	r3, r3, #7
}
 8002026:	4618      	mov	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	2b00      	cmp	r3, #0
 8002044:	db0b      	blt.n	800205e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	f003 021f 	and.w	r2, r3, #31
 800204c:	4907      	ldr	r1, [pc, #28]	; (800206c <__NVIC_EnableIRQ+0x38>)
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	095b      	lsrs	r3, r3, #5
 8002054:	2001      	movs	r0, #1
 8002056:	fa00 f202 	lsl.w	r2, r0, r2
 800205a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	e000e100 	.word	0xe000e100

08002070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	6039      	str	r1, [r7, #0]
 800207a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800207c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002080:	2b00      	cmp	r3, #0
 8002082:	db0a      	blt.n	800209a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	b2da      	uxtb	r2, r3
 8002088:	490c      	ldr	r1, [pc, #48]	; (80020bc <__NVIC_SetPriority+0x4c>)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	0112      	lsls	r2, r2, #4
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	440b      	add	r3, r1
 8002094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002098:	e00a      	b.n	80020b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	b2da      	uxtb	r2, r3
 800209e:	4908      	ldr	r1, [pc, #32]	; (80020c0 <__NVIC_SetPriority+0x50>)
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	3b04      	subs	r3, #4
 80020a8:	0112      	lsls	r2, r2, #4
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	440b      	add	r3, r1
 80020ae:	761a      	strb	r2, [r3, #24]
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000e100 	.word	0xe000e100
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b089      	sub	sp, #36	; 0x24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f1c3 0307 	rsb	r3, r3, #7
 80020de:	2b04      	cmp	r3, #4
 80020e0:	bf28      	it	cs
 80020e2:	2304      	movcs	r3, #4
 80020e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3304      	adds	r3, #4
 80020ea:	2b06      	cmp	r3, #6
 80020ec:	d902      	bls.n	80020f4 <NVIC_EncodePriority+0x30>
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3b03      	subs	r3, #3
 80020f2:	e000      	b.n	80020f6 <NVIC_EncodePriority+0x32>
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f8:	f04f 32ff 	mov.w	r2, #4294967295
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43da      	mvns	r2, r3
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	401a      	ands	r2, r3
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800210c:	f04f 31ff 	mov.w	r1, #4294967295
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	fa01 f303 	lsl.w	r3, r1, r3
 8002116:	43d9      	mvns	r1, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800211c:	4313      	orrs	r3, r2
         );
}
 800211e:	4618      	mov	r0, r3
 8002120:	3724      	adds	r7, #36	; 0x24
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
	...

0800212c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3b01      	subs	r3, #1
 8002138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800213c:	d301      	bcc.n	8002142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800213e:	2301      	movs	r3, #1
 8002140:	e00f      	b.n	8002162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002142:	4a0a      	ldr	r2, [pc, #40]	; (800216c <SysTick_Config+0x40>)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3b01      	subs	r3, #1
 8002148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800214a:	210f      	movs	r1, #15
 800214c:	f04f 30ff 	mov.w	r0, #4294967295
 8002150:	f7ff ff8e 	bl	8002070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002154:	4b05      	ldr	r3, [pc, #20]	; (800216c <SysTick_Config+0x40>)
 8002156:	2200      	movs	r2, #0
 8002158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800215a:	4b04      	ldr	r3, [pc, #16]	; (800216c <SysTick_Config+0x40>)
 800215c:	2207      	movs	r2, #7
 800215e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	e000e010 	.word	0xe000e010

08002170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff ff29 	bl	8001fd0 <__NVIC_SetPriorityGrouping>
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002186:	b580      	push	{r7, lr}
 8002188:	b086      	sub	sp, #24
 800218a:	af00      	add	r7, sp, #0
 800218c:	4603      	mov	r3, r0
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	607a      	str	r2, [r7, #4]
 8002192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002198:	f7ff ff3e 	bl	8002018 <__NVIC_GetPriorityGrouping>
 800219c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	68b9      	ldr	r1, [r7, #8]
 80021a2:	6978      	ldr	r0, [r7, #20]
 80021a4:	f7ff ff8e 	bl	80020c4 <NVIC_EncodePriority>
 80021a8:	4602      	mov	r2, r0
 80021aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ae:	4611      	mov	r1, r2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff ff5d 	bl	8002070 <__NVIC_SetPriority>
}
 80021b6:	bf00      	nop
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b082      	sub	sp, #8
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	4603      	mov	r3, r0
 80021c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff ff31 	bl	8002034 <__NVIC_EnableIRQ>
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7ff ffa2 	bl	800212c <SysTick_Config>
 80021e8:	4603      	mov	r3, r0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e00e      	b.n	8002222 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	795b      	ldrb	r3, [r3, #5]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d105      	bne.n	800221a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7fe fe25 	bl	8000e64 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b084      	sub	sp, #16
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002236:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002238:	f7ff fe9a 	bl	8001f70 <HAL_GetTick>
 800223c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d008      	beq.n	800225c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2280      	movs	r2, #128	; 0x80
 800224e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e052      	b.n	8002302 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0216 	bic.w	r2, r2, #22
 800226a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695a      	ldr	r2, [r3, #20]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800227a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	2b00      	cmp	r3, #0
 8002282:	d103      	bne.n	800228c <HAL_DMA_Abort+0x62>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002288:	2b00      	cmp	r3, #0
 800228a:	d007      	beq.n	800229c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0208 	bic.w	r2, r2, #8
 800229a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0201 	bic.w	r2, r2, #1
 80022aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ac:	e013      	b.n	80022d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ae:	f7ff fe5f 	bl	8001f70 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b05      	cmp	r3, #5
 80022ba:	d90c      	bls.n	80022d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2220      	movs	r2, #32
 80022c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2203      	movs	r2, #3
 80022c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e015      	b.n	8002302 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1e4      	bne.n	80022ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e8:	223f      	movs	r2, #63	; 0x3f
 80022ea:	409a      	lsls	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d004      	beq.n	8002328 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2280      	movs	r2, #128	; 0x80
 8002322:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e00c      	b.n	8002342 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2205      	movs	r2, #5
 800232c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0201 	bic.w	r2, r2, #1
 800233e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e03b      	b.n	80023d8 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d106      	bne.n	800237a <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7fe fd97 	bl	8000ea8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2202      	movs	r2, #2
 800237e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800239e:	f023 0107 	bic.w	r1, r3, #7
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80023b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	68d1      	ldr	r1, [r2, #12]
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6812      	ldr	r2, [r2, #0]
 80023c4:	430b      	orrs	r3, r1
 80023c6:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d026      	beq.n	8002450 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002408:	2b00      	cmp	r3, #0
 800240a:	d021      	beq.n	8002450 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800241a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002420:	f043 0201 	orr.w	r2, r3, #1
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2201      	movs	r2, #1
 800242e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2204      	movs	r2, #4
 8002434:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 0320 	and.w	r3, r3, #32
 8002456:	2b00      	cmp	r3, #0
 8002458:	d026      	beq.n	80024a8 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d021      	beq.n	80024a8 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002472:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2220      	movs	r2, #32
 800247a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002480:	f043 0202 	orr.w	r2, r3, #2
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2204      	movs	r2, #4
 800248c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d026      	beq.n	8002500 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d021      	beq.n	8002500 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ca:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2208      	movs	r2, #8
 80024d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d8:	f043 0204 	orr.w	r2, r3, #4
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2204      	movs	r2, #4
 80024e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 0304 	and.w	r3, r3, #4
 8002506:	2b00      	cmp	r3, #0
 8002508:	d013      	beq.n	8002532 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00e      	beq.n	8002532 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002522:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2204      	movs	r2, #4
 800252a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f853 	bl	80025d8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d024      	beq.n	8002586 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002542:	2b00      	cmp	r3, #0
 8002544:	d01f      	beq.n	8002586 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002554:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2202      	movs	r2, #2
 800255c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f003 0310 	and.w	r3, r3, #16
 800258c:	2b00      	cmp	r3, #0
 800258e:	d01f      	beq.n	80025d0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d01a      	beq.n	80025d0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025a8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2210      	movs	r2, #16
 80025b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f80e 	bl	80025ec <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80025d0:	bf00      	nop
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002600:	b480      	push	{r7}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_DMA2D_ConfigLayer+0x20>
 800261c:	2302      	movs	r3, #2
 800261e:	e079      	b.n	8002714 <HAL_DMA2D_ConfigLayer+0x114>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	3318      	adds	r3, #24
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	4413      	add	r3, r2
 800263a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	041b      	lsls	r3, r3, #16
 8002646:	4313      	orrs	r3, r2
 8002648:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800264a:	4b35      	ldr	r3, [pc, #212]	; (8002720 <HAL_DMA2D_ConfigLayer+0x120>)
 800264c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b0a      	cmp	r3, #10
 8002654:	d003      	beq.n	800265e <HAL_DMA2D_ConfigLayer+0x5e>
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b09      	cmp	r3, #9
 800265c:	d107      	bne.n	800266e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4313      	orrs	r3, r2
 800266a:	617b      	str	r3, [r7, #20]
 800266c:	e005      	b.n	800267a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	061b      	lsls	r3, r3, #24
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	4313      	orrs	r3, r2
 8002678:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d120      	bne.n	80026c2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	43db      	mvns	r3, r3
 800268a:	ea02 0103 	and.w	r1, r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	430a      	orrs	r2, r1
 8002696:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	6812      	ldr	r2, [r2, #0]
 80026a0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b0a      	cmp	r3, #10
 80026a8:	d003      	beq.n	80026b2 <HAL_DMA2D_ConfigLayer+0xb2>
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b09      	cmp	r3, #9
 80026b0:	d127      	bne.n	8002702 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	68da      	ldr	r2, [r3, #12]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80026be:	629a      	str	r2, [r3, #40]	; 0x28
 80026c0:	e01f      	b.n	8002702 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	69da      	ldr	r2, [r3, #28]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	ea02 0103 	and.w	r1, r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b0a      	cmp	r3, #10
 80026ea:	d003      	beq.n	80026f4 <HAL_DMA2D_ConfigLayer+0xf4>
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b09      	cmp	r3, #9
 80026f2:	d106      	bne.n	8002702 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002700:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	371c      	adds	r7, #28
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	ff03000f 	.word	0xff03000f

08002724 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002724:	b480      	push	{r7}
 8002726:	b089      	sub	sp, #36	; 0x24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002732:	2300      	movs	r3, #0
 8002734:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002736:	2300      	movs	r3, #0
 8002738:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
 800273e:	e177      	b.n	8002a30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002740:	2201      	movs	r2, #1
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	4013      	ands	r3, r2
 8002752:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	429a      	cmp	r2, r3
 800275a:	f040 8166 	bne.w	8002a2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	2b01      	cmp	r3, #1
 8002768:	d005      	beq.n	8002776 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002772:	2b02      	cmp	r3, #2
 8002774:	d130      	bne.n	80027d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	2203      	movs	r2, #3
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027ac:	2201      	movs	r2, #1
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	091b      	lsrs	r3, r3, #4
 80027c2:	f003 0201 	and.w	r2, r3, #1
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	2b03      	cmp	r3, #3
 80027e2:	d017      	beq.n	8002814 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	2203      	movs	r2, #3
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43db      	mvns	r3, r3
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	4013      	ands	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d123      	bne.n	8002868 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	08da      	lsrs	r2, r3, #3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3208      	adds	r2, #8
 8002828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800282c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	220f      	movs	r2, #15
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4013      	ands	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	08da      	lsrs	r2, r3, #3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3208      	adds	r2, #8
 8002862:	69b9      	ldr	r1, [r7, #24]
 8002864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	2203      	movs	r2, #3
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 0203 	and.w	r2, r3, #3
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 80c0 	beq.w	8002a2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	4b66      	ldr	r3, [pc, #408]	; (8002a48 <HAL_GPIO_Init+0x324>)
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	4a65      	ldr	r2, [pc, #404]	; (8002a48 <HAL_GPIO_Init+0x324>)
 80028b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028b8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ba:	4b63      	ldr	r3, [pc, #396]	; (8002a48 <HAL_GPIO_Init+0x324>)
 80028bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028c6:	4a61      	ldr	r2, [pc, #388]	; (8002a4c <HAL_GPIO_Init+0x328>)
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	089b      	lsrs	r3, r3, #2
 80028cc:	3302      	adds	r3, #2
 80028ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	220f      	movs	r2, #15
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43db      	mvns	r3, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4013      	ands	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a58      	ldr	r2, [pc, #352]	; (8002a50 <HAL_GPIO_Init+0x32c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d037      	beq.n	8002962 <HAL_GPIO_Init+0x23e>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a57      	ldr	r2, [pc, #348]	; (8002a54 <HAL_GPIO_Init+0x330>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d031      	beq.n	800295e <HAL_GPIO_Init+0x23a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a56      	ldr	r2, [pc, #344]	; (8002a58 <HAL_GPIO_Init+0x334>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d02b      	beq.n	800295a <HAL_GPIO_Init+0x236>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a55      	ldr	r2, [pc, #340]	; (8002a5c <HAL_GPIO_Init+0x338>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d025      	beq.n	8002956 <HAL_GPIO_Init+0x232>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a54      	ldr	r2, [pc, #336]	; (8002a60 <HAL_GPIO_Init+0x33c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d01f      	beq.n	8002952 <HAL_GPIO_Init+0x22e>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a53      	ldr	r2, [pc, #332]	; (8002a64 <HAL_GPIO_Init+0x340>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d019      	beq.n	800294e <HAL_GPIO_Init+0x22a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a52      	ldr	r2, [pc, #328]	; (8002a68 <HAL_GPIO_Init+0x344>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d013      	beq.n	800294a <HAL_GPIO_Init+0x226>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a51      	ldr	r2, [pc, #324]	; (8002a6c <HAL_GPIO_Init+0x348>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d00d      	beq.n	8002946 <HAL_GPIO_Init+0x222>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a50      	ldr	r2, [pc, #320]	; (8002a70 <HAL_GPIO_Init+0x34c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d007      	beq.n	8002942 <HAL_GPIO_Init+0x21e>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a4f      	ldr	r2, [pc, #316]	; (8002a74 <HAL_GPIO_Init+0x350>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d101      	bne.n	800293e <HAL_GPIO_Init+0x21a>
 800293a:	2309      	movs	r3, #9
 800293c:	e012      	b.n	8002964 <HAL_GPIO_Init+0x240>
 800293e:	230a      	movs	r3, #10
 8002940:	e010      	b.n	8002964 <HAL_GPIO_Init+0x240>
 8002942:	2308      	movs	r3, #8
 8002944:	e00e      	b.n	8002964 <HAL_GPIO_Init+0x240>
 8002946:	2307      	movs	r3, #7
 8002948:	e00c      	b.n	8002964 <HAL_GPIO_Init+0x240>
 800294a:	2306      	movs	r3, #6
 800294c:	e00a      	b.n	8002964 <HAL_GPIO_Init+0x240>
 800294e:	2305      	movs	r3, #5
 8002950:	e008      	b.n	8002964 <HAL_GPIO_Init+0x240>
 8002952:	2304      	movs	r3, #4
 8002954:	e006      	b.n	8002964 <HAL_GPIO_Init+0x240>
 8002956:	2303      	movs	r3, #3
 8002958:	e004      	b.n	8002964 <HAL_GPIO_Init+0x240>
 800295a:	2302      	movs	r3, #2
 800295c:	e002      	b.n	8002964 <HAL_GPIO_Init+0x240>
 800295e:	2301      	movs	r3, #1
 8002960:	e000      	b.n	8002964 <HAL_GPIO_Init+0x240>
 8002962:	2300      	movs	r3, #0
 8002964:	69fa      	ldr	r2, [r7, #28]
 8002966:	f002 0203 	and.w	r2, r2, #3
 800296a:	0092      	lsls	r2, r2, #2
 800296c:	4093      	lsls	r3, r2
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002974:	4935      	ldr	r1, [pc, #212]	; (8002a4c <HAL_GPIO_Init+0x328>)
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	089b      	lsrs	r3, r3, #2
 800297a:	3302      	adds	r3, #2
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002982:	4b3d      	ldr	r3, [pc, #244]	; (8002a78 <HAL_GPIO_Init+0x354>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	43db      	mvns	r3, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4013      	ands	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029a6:	4a34      	ldr	r2, [pc, #208]	; (8002a78 <HAL_GPIO_Init+0x354>)
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029ac:	4b32      	ldr	r3, [pc, #200]	; (8002a78 <HAL_GPIO_Init+0x354>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029d0:	4a29      	ldr	r2, [pc, #164]	; (8002a78 <HAL_GPIO_Init+0x354>)
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029d6:	4b28      	ldr	r3, [pc, #160]	; (8002a78 <HAL_GPIO_Init+0x354>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	43db      	mvns	r3, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4013      	ands	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029fa:	4a1f      	ldr	r2, [pc, #124]	; (8002a78 <HAL_GPIO_Init+0x354>)
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a00:	4b1d      	ldr	r3, [pc, #116]	; (8002a78 <HAL_GPIO_Init+0x354>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a24:	4a14      	ldr	r2, [pc, #80]	; (8002a78 <HAL_GPIO_Init+0x354>)
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	61fb      	str	r3, [r7, #28]
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	2b0f      	cmp	r3, #15
 8002a34:	f67f ae84 	bls.w	8002740 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a38:	bf00      	nop
 8002a3a:	bf00      	nop
 8002a3c:	3724      	adds	r7, #36	; 0x24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40013800 	.word	0x40013800
 8002a50:	40020000 	.word	0x40020000
 8002a54:	40020400 	.word	0x40020400
 8002a58:	40020800 	.word	0x40020800
 8002a5c:	40020c00 	.word	0x40020c00
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40021400 	.word	0x40021400
 8002a68:	40021800 	.word	0x40021800
 8002a6c:	40021c00 	.word	0x40021c00
 8002a70:	40022000 	.word	0x40022000
 8002a74:	40022400 	.word	0x40022400
 8002a78:	40013c00 	.word	0x40013c00

08002a7c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b087      	sub	sp, #28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	e0d9      	b.n	8002c4c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a98:	2201      	movs	r2, #1
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	f040 80c9 	bne.w	8002c46 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002ab4:	4a6b      	ldr	r2, [pc, #428]	; (8002c64 <HAL_GPIO_DeInit+0x1e8>)
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	089b      	lsrs	r3, r3, #2
 8002aba:	3302      	adds	r3, #2
 8002abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f003 0303 	and.w	r3, r3, #3
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	220f      	movs	r2, #15
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a63      	ldr	r2, [pc, #396]	; (8002c68 <HAL_GPIO_DeInit+0x1ec>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d037      	beq.n	8002b4e <HAL_GPIO_DeInit+0xd2>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a62      	ldr	r2, [pc, #392]	; (8002c6c <HAL_GPIO_DeInit+0x1f0>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d031      	beq.n	8002b4a <HAL_GPIO_DeInit+0xce>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a61      	ldr	r2, [pc, #388]	; (8002c70 <HAL_GPIO_DeInit+0x1f4>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d02b      	beq.n	8002b46 <HAL_GPIO_DeInit+0xca>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a60      	ldr	r2, [pc, #384]	; (8002c74 <HAL_GPIO_DeInit+0x1f8>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d025      	beq.n	8002b42 <HAL_GPIO_DeInit+0xc6>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a5f      	ldr	r2, [pc, #380]	; (8002c78 <HAL_GPIO_DeInit+0x1fc>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d01f      	beq.n	8002b3e <HAL_GPIO_DeInit+0xc2>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a5e      	ldr	r2, [pc, #376]	; (8002c7c <HAL_GPIO_DeInit+0x200>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d019      	beq.n	8002b3a <HAL_GPIO_DeInit+0xbe>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a5d      	ldr	r2, [pc, #372]	; (8002c80 <HAL_GPIO_DeInit+0x204>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d013      	beq.n	8002b36 <HAL_GPIO_DeInit+0xba>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a5c      	ldr	r2, [pc, #368]	; (8002c84 <HAL_GPIO_DeInit+0x208>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d00d      	beq.n	8002b32 <HAL_GPIO_DeInit+0xb6>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a5b      	ldr	r2, [pc, #364]	; (8002c88 <HAL_GPIO_DeInit+0x20c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d007      	beq.n	8002b2e <HAL_GPIO_DeInit+0xb2>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a5a      	ldr	r2, [pc, #360]	; (8002c8c <HAL_GPIO_DeInit+0x210>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d101      	bne.n	8002b2a <HAL_GPIO_DeInit+0xae>
 8002b26:	2309      	movs	r3, #9
 8002b28:	e012      	b.n	8002b50 <HAL_GPIO_DeInit+0xd4>
 8002b2a:	230a      	movs	r3, #10
 8002b2c:	e010      	b.n	8002b50 <HAL_GPIO_DeInit+0xd4>
 8002b2e:	2308      	movs	r3, #8
 8002b30:	e00e      	b.n	8002b50 <HAL_GPIO_DeInit+0xd4>
 8002b32:	2307      	movs	r3, #7
 8002b34:	e00c      	b.n	8002b50 <HAL_GPIO_DeInit+0xd4>
 8002b36:	2306      	movs	r3, #6
 8002b38:	e00a      	b.n	8002b50 <HAL_GPIO_DeInit+0xd4>
 8002b3a:	2305      	movs	r3, #5
 8002b3c:	e008      	b.n	8002b50 <HAL_GPIO_DeInit+0xd4>
 8002b3e:	2304      	movs	r3, #4
 8002b40:	e006      	b.n	8002b50 <HAL_GPIO_DeInit+0xd4>
 8002b42:	2303      	movs	r3, #3
 8002b44:	e004      	b.n	8002b50 <HAL_GPIO_DeInit+0xd4>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e002      	b.n	8002b50 <HAL_GPIO_DeInit+0xd4>
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <HAL_GPIO_DeInit+0xd4>
 8002b4e:	2300      	movs	r3, #0
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	f002 0203 	and.w	r2, r2, #3
 8002b56:	0092      	lsls	r2, r2, #2
 8002b58:	4093      	lsls	r3, r2
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d132      	bne.n	8002bc6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002b60:	4b4b      	ldr	r3, [pc, #300]	; (8002c90 <HAL_GPIO_DeInit+0x214>)
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	43db      	mvns	r3, r3
 8002b68:	4949      	ldr	r1, [pc, #292]	; (8002c90 <HAL_GPIO_DeInit+0x214>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002b6e:	4b48      	ldr	r3, [pc, #288]	; (8002c90 <HAL_GPIO_DeInit+0x214>)
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	4946      	ldr	r1, [pc, #280]	; (8002c90 <HAL_GPIO_DeInit+0x214>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002b7c:	4b44      	ldr	r3, [pc, #272]	; (8002c90 <HAL_GPIO_DeInit+0x214>)
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	43db      	mvns	r3, r3
 8002b84:	4942      	ldr	r1, [pc, #264]	; (8002c90 <HAL_GPIO_DeInit+0x214>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002b8a:	4b41      	ldr	r3, [pc, #260]	; (8002c90 <HAL_GPIO_DeInit+0x214>)
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	43db      	mvns	r3, r3
 8002b92:	493f      	ldr	r1, [pc, #252]	; (8002c90 <HAL_GPIO_DeInit+0x214>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	220f      	movs	r2, #15
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002ba8:	4a2e      	ldr	r2, [pc, #184]	; (8002c64 <HAL_GPIO_DeInit+0x1e8>)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	089b      	lsrs	r3, r3, #2
 8002bae:	3302      	adds	r3, #2
 8002bb0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	43da      	mvns	r2, r3
 8002bb8:	482a      	ldr	r0, [pc, #168]	; (8002c64 <HAL_GPIO_DeInit+0x1e8>)
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	089b      	lsrs	r3, r3, #2
 8002bbe:	400a      	ands	r2, r1
 8002bc0:	3302      	adds	r3, #2
 8002bc2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	2103      	movs	r1, #3
 8002bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	401a      	ands	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	08da      	lsrs	r2, r3, #3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3208      	adds	r2, #8
 8002be4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	220f      	movs	r2, #15
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	08d2      	lsrs	r2, r2, #3
 8002bfc:	4019      	ands	r1, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3208      	adds	r2, #8
 8002c02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	2103      	movs	r1, #3
 8002c10:	fa01 f303 	lsl.w	r3, r1, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	401a      	ands	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	2101      	movs	r1, #1
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	fa01 f303 	lsl.w	r3, r1, r3
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	401a      	ands	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	2103      	movs	r1, #3
 8002c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	401a      	ands	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	2b0f      	cmp	r3, #15
 8002c50:	f67f af22 	bls.w	8002a98 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002c54:	bf00      	nop
 8002c56:	bf00      	nop
 8002c58:	371c      	adds	r7, #28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40013800 	.word	0x40013800
 8002c68:	40020000 	.word	0x40020000
 8002c6c:	40020400 	.word	0x40020400
 8002c70:	40020800 	.word	0x40020800
 8002c74:	40020c00 	.word	0x40020c00
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40021400 	.word	0x40021400
 8002c80:	40021800 	.word	0x40021800
 8002c84:	40021c00 	.word	0x40021c00
 8002c88:	40022000 	.word	0x40022000
 8002c8c:	40022400 	.word	0x40022400
 8002c90:	40013c00 	.word	0x40013c00

08002c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	807b      	strh	r3, [r7, #2]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ca4:	787b      	ldrb	r3, [r7, #1]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002caa:	887a      	ldrh	r2, [r7, #2]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cb0:	e003      	b.n	8002cba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cb2:	887b      	ldrh	r3, [r7, #2]
 8002cb4:	041a      	lsls	r2, r3, #16
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	619a      	str	r2, [r3, #24]
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b086      	sub	sp, #24
 8002cca:	af02      	add	r7, sp, #8
 8002ccc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e059      	b.n	8002d8c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f007 ffb2 	bl	800ac5c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2203      	movs	r2, #3
 8002cfc:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d06:	d102      	bne.n	8002d0e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f005 fe03 	bl	800891e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6818      	ldr	r0, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	7c1a      	ldrb	r2, [r3, #16]
 8002d20:	f88d 2000 	strb.w	r2, [sp]
 8002d24:	3304      	adds	r3, #4
 8002d26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d28:	f005 fd84 	bl	8008834 <USB_CoreInit>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d005      	beq.n	8002d3e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2202      	movs	r2, #2
 8002d36:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e026      	b.n	8002d8c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2101      	movs	r1, #1
 8002d44:	4618      	mov	r0, r3
 8002d46:	f005 fdfb 	bl	8008940 <USB_SetCurrentMode>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d005      	beq.n	8002d5c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e017      	b.n	8002d8c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6818      	ldr	r0, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	7c1a      	ldrb	r2, [r3, #16]
 8002d64:	f88d 2000 	strb.w	r2, [sp]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d6c:	f005 ff9e 	bl	8008cac <USB_HostInit>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d005      	beq.n	8002d82 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2202      	movs	r2, #2
 8002d7a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e004      	b.n	8002d8c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002d94:	b590      	push	{r4, r7, lr}
 8002d96:	b08b      	sub	sp, #44	; 0x2c
 8002d98:	af04      	add	r7, sp, #16
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	4608      	mov	r0, r1
 8002d9e:	4611      	mov	r1, r2
 8002da0:	461a      	mov	r2, r3
 8002da2:	4603      	mov	r3, r0
 8002da4:	70fb      	strb	r3, [r7, #3]
 8002da6:	460b      	mov	r3, r1
 8002da8:	70bb      	strb	r3, [r7, #2]
 8002daa:	4613      	mov	r3, r2
 8002dac:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002dae:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002db0:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <HAL_HCD_HC_Init+0x2c>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e09d      	b.n	8002efc <HAL_HCD_HC_Init+0x168>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002dc8:	78fa      	ldrb	r2, [r7, #3]
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	1a9b      	subs	r3, r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	3319      	adds	r3, #25
 8002dd8:	2200      	movs	r2, #0
 8002dda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002ddc:	78fa      	ldrb	r2, [r7, #3]
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	4613      	mov	r3, r2
 8002de2:	011b      	lsls	r3, r3, #4
 8002de4:	1a9b      	subs	r3, r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	3314      	adds	r3, #20
 8002dec:	787a      	ldrb	r2, [r7, #1]
 8002dee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002df0:	78fa      	ldrb	r2, [r7, #3]
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	1a9b      	subs	r3, r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	3315      	adds	r3, #21
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002e04:	78fa      	ldrb	r2, [r7, #3]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	1a9b      	subs	r3, r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	3326      	adds	r3, #38	; 0x26
 8002e14:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002e18:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002e1a:	78fa      	ldrb	r2, [r7, #3]
 8002e1c:	78bb      	ldrb	r3, [r7, #2]
 8002e1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e22:	b2d8      	uxtb	r0, r3
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	1a9b      	subs	r3, r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	3316      	adds	r3, #22
 8002e32:	4602      	mov	r2, r0
 8002e34:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002e36:	78fb      	ldrb	r3, [r7, #3]
 8002e38:	4619      	mov	r1, r3
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 fbac 	bl	8003598 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002e40:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	da0a      	bge.n	8002e5e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002e48:	78fa      	ldrb	r2, [r7, #3]
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	011b      	lsls	r3, r3, #4
 8002e50:	1a9b      	subs	r3, r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	3317      	adds	r3, #23
 8002e58:	2201      	movs	r2, #1
 8002e5a:	701a      	strb	r2, [r3, #0]
 8002e5c:	e009      	b.n	8002e72 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002e5e:	78fa      	ldrb	r2, [r7, #3]
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	1a9b      	subs	r3, r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	3317      	adds	r3, #23
 8002e6e:	2200      	movs	r2, #0
 8002e70:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f006 f852 	bl	8008f20 <USB_GetHostSpeed>
 8002e7c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002e7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d10b      	bne.n	8002e9e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002e86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d107      	bne.n	8002e9e <HAL_HCD_HC_Init+0x10a>
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d104      	bne.n	8002e9e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	2bbc      	cmp	r3, #188	; 0xbc
 8002e98:	d901      	bls.n	8002e9e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002e9a:	23bc      	movs	r3, #188	; 0xbc
 8002e9c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002e9e:	78fa      	ldrb	r2, [r7, #3]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	1a9b      	subs	r3, r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	3318      	adds	r3, #24
 8002eae:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002eb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002eb4:	78fa      	ldrb	r2, [r7, #3]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	b298      	uxth	r0, r3
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	1a9b      	subs	r3, r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	3328      	adds	r3, #40	; 0x28
 8002ec8:	4602      	mov	r2, r0
 8002eca:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	787c      	ldrb	r4, [r7, #1]
 8002ed6:	78ba      	ldrb	r2, [r7, #2]
 8002ed8:	78f9      	ldrb	r1, [r7, #3]
 8002eda:	9302      	str	r3, [sp, #8]
 8002edc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002ee0:	9301      	str	r3, [sp, #4]
 8002ee2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	4623      	mov	r3, r4
 8002eea:	f006 f841 	bl	8008f70 <USB_HC_Init>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	371c      	adds	r7, #28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd90      	pop	{r4, r7, pc}

08002f04 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d101      	bne.n	8002f22 <HAL_HCD_HC_Halt+0x1e>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e00f      	b.n	8002f42 <HAL_HCD_HC_Halt+0x3e>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	78fa      	ldrb	r2, [r7, #3]
 8002f30:	4611      	mov	r1, r2
 8002f32:	4618      	mov	r0, r3
 8002f34:	f006 fbd3 	bl	80096de <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	4608      	mov	r0, r1
 8002f56:	4611      	mov	r1, r2
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	70fb      	strb	r3, [r7, #3]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	70bb      	strb	r3, [r7, #2]
 8002f62:	4613      	mov	r3, r2
 8002f64:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002f66:	78fa      	ldrb	r2, [r7, #3]
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	3317      	adds	r3, #23
 8002f76:	78ba      	ldrb	r2, [r7, #2]
 8002f78:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002f7a:	78fa      	ldrb	r2, [r7, #3]
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	1a9b      	subs	r3, r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	3326      	adds	r3, #38	; 0x26
 8002f8a:	787a      	ldrb	r2, [r7, #1]
 8002f8c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002f8e:	7c3b      	ldrb	r3, [r7, #16]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d114      	bne.n	8002fbe <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002f94:	78fa      	ldrb	r2, [r7, #3]
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	1a9b      	subs	r3, r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	332a      	adds	r3, #42	; 0x2a
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002fa8:	78fa      	ldrb	r2, [r7, #3]
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	1a9b      	subs	r3, r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	3319      	adds	r3, #25
 8002fb8:	7f3a      	ldrb	r2, [r7, #28]
 8002fba:	701a      	strb	r2, [r3, #0]
 8002fbc:	e009      	b.n	8002fd2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002fbe:	78fa      	ldrb	r2, [r7, #3]
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	332a      	adds	r3, #42	; 0x2a
 8002fce:	2202      	movs	r2, #2
 8002fd0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002fd2:	787b      	ldrb	r3, [r7, #1]
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	f200 8102 	bhi.w	80031de <HAL_HCD_HC_SubmitRequest+0x292>
 8002fda:	a201      	add	r2, pc, #4	; (adr r2, 8002fe0 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe0:	08002ff1 	.word	0x08002ff1
 8002fe4:	080031c9 	.word	0x080031c9
 8002fe8:	080030b5 	.word	0x080030b5
 8002fec:	0800313f 	.word	0x0800313f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002ff0:	7c3b      	ldrb	r3, [r7, #16]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	f040 80f5 	bne.w	80031e2 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002ff8:	78bb      	ldrb	r3, [r7, #2]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d12d      	bne.n	800305a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002ffe:	8b3b      	ldrh	r3, [r7, #24]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d109      	bne.n	8003018 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003004:	78fa      	ldrb	r2, [r7, #3]
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	1a9b      	subs	r3, r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	333d      	adds	r3, #61	; 0x3d
 8003014:	2201      	movs	r2, #1
 8003016:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003018:	78fa      	ldrb	r2, [r7, #3]
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	333d      	adds	r3, #61	; 0x3d
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10a      	bne.n	8003044 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800302e:	78fa      	ldrb	r2, [r7, #3]
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	011b      	lsls	r3, r3, #4
 8003036:	1a9b      	subs	r3, r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	440b      	add	r3, r1
 800303c:	332a      	adds	r3, #42	; 0x2a
 800303e:	2200      	movs	r2, #0
 8003040:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003042:	e0ce      	b.n	80031e2 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003044:	78fa      	ldrb	r2, [r7, #3]
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	011b      	lsls	r3, r3, #4
 800304c:	1a9b      	subs	r3, r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	332a      	adds	r3, #42	; 0x2a
 8003054:	2202      	movs	r2, #2
 8003056:	701a      	strb	r2, [r3, #0]
      break;
 8003058:	e0c3      	b.n	80031e2 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800305a:	78fa      	ldrb	r2, [r7, #3]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	1a9b      	subs	r3, r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	331a      	adds	r3, #26
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b01      	cmp	r3, #1
 800306e:	f040 80b8 	bne.w	80031e2 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	1a9b      	subs	r3, r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	333c      	adds	r3, #60	; 0x3c
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10a      	bne.n	800309e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003088:	78fa      	ldrb	r2, [r7, #3]
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	1a9b      	subs	r3, r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	332a      	adds	r3, #42	; 0x2a
 8003098:	2200      	movs	r2, #0
 800309a:	701a      	strb	r2, [r3, #0]
      break;
 800309c:	e0a1      	b.n	80031e2 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800309e:	78fa      	ldrb	r2, [r7, #3]
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	1a9b      	subs	r3, r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	332a      	adds	r3, #42	; 0x2a
 80030ae:	2202      	movs	r2, #2
 80030b0:	701a      	strb	r2, [r3, #0]
      break;
 80030b2:	e096      	b.n	80031e2 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80030b4:	78bb      	ldrb	r3, [r7, #2]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d120      	bne.n	80030fc <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80030ba:	78fa      	ldrb	r2, [r7, #3]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	1a9b      	subs	r3, r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	333d      	adds	r3, #61	; 0x3d
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10a      	bne.n	80030e6 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030d0:	78fa      	ldrb	r2, [r7, #3]
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	1a9b      	subs	r3, r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	332a      	adds	r3, #42	; 0x2a
 80030e0:	2200      	movs	r2, #0
 80030e2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80030e4:	e07e      	b.n	80031e4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030e6:	78fa      	ldrb	r2, [r7, #3]
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	1a9b      	subs	r3, r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	332a      	adds	r3, #42	; 0x2a
 80030f6:	2202      	movs	r2, #2
 80030f8:	701a      	strb	r2, [r3, #0]
      break;
 80030fa:	e073      	b.n	80031e4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80030fc:	78fa      	ldrb	r2, [r7, #3]
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	4613      	mov	r3, r2
 8003102:	011b      	lsls	r3, r3, #4
 8003104:	1a9b      	subs	r3, r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	333c      	adds	r3, #60	; 0x3c
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10a      	bne.n	8003128 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003112:	78fa      	ldrb	r2, [r7, #3]
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	4613      	mov	r3, r2
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	1a9b      	subs	r3, r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	440b      	add	r3, r1
 8003120:	332a      	adds	r3, #42	; 0x2a
 8003122:	2200      	movs	r2, #0
 8003124:	701a      	strb	r2, [r3, #0]
      break;
 8003126:	e05d      	b.n	80031e4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003128:	78fa      	ldrb	r2, [r7, #3]
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	1a9b      	subs	r3, r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	332a      	adds	r3, #42	; 0x2a
 8003138:	2202      	movs	r2, #2
 800313a:	701a      	strb	r2, [r3, #0]
      break;
 800313c:	e052      	b.n	80031e4 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800313e:	78bb      	ldrb	r3, [r7, #2]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d120      	bne.n	8003186 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003144:	78fa      	ldrb	r2, [r7, #3]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	333d      	adds	r3, #61	; 0x3d
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10a      	bne.n	8003170 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800315a:	78fa      	ldrb	r2, [r7, #3]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	332a      	adds	r3, #42	; 0x2a
 800316a:	2200      	movs	r2, #0
 800316c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800316e:	e039      	b.n	80031e4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003170:	78fa      	ldrb	r2, [r7, #3]
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	332a      	adds	r3, #42	; 0x2a
 8003180:	2202      	movs	r2, #2
 8003182:	701a      	strb	r2, [r3, #0]
      break;
 8003184:	e02e      	b.n	80031e4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	333c      	adds	r3, #60	; 0x3c
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10a      	bne.n	80031b2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800319c:	78fa      	ldrb	r2, [r7, #3]
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	1a9b      	subs	r3, r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	332a      	adds	r3, #42	; 0x2a
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]
      break;
 80031b0:	e018      	b.n	80031e4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031b2:	78fa      	ldrb	r2, [r7, #3]
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	1a9b      	subs	r3, r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	332a      	adds	r3, #42	; 0x2a
 80031c2:	2202      	movs	r2, #2
 80031c4:	701a      	strb	r2, [r3, #0]
      break;
 80031c6:	e00d      	b.n	80031e4 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031c8:	78fa      	ldrb	r2, [r7, #3]
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	1a9b      	subs	r3, r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	332a      	adds	r3, #42	; 0x2a
 80031d8:	2200      	movs	r2, #0
 80031da:	701a      	strb	r2, [r3, #0]
      break;
 80031dc:	e002      	b.n	80031e4 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80031de:	bf00      	nop
 80031e0:	e000      	b.n	80031e4 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80031e2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80031e4:	78fa      	ldrb	r2, [r7, #3]
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	1a9b      	subs	r3, r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	332c      	adds	r3, #44	; 0x2c
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80031f8:	78fa      	ldrb	r2, [r7, #3]
 80031fa:	8b39      	ldrh	r1, [r7, #24]
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	4613      	mov	r3, r2
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	1a9b      	subs	r3, r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4403      	add	r3, r0
 8003208:	3334      	adds	r3, #52	; 0x34
 800320a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800320c:	78fa      	ldrb	r2, [r7, #3]
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	334c      	adds	r3, #76	; 0x4c
 800321c:	2200      	movs	r2, #0
 800321e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003220:	78fa      	ldrb	r2, [r7, #3]
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	1a9b      	subs	r3, r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	3338      	adds	r3, #56	; 0x38
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003234:	78fa      	ldrb	r2, [r7, #3]
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	4613      	mov	r3, r2
 800323a:	011b      	lsls	r3, r3, #4
 800323c:	1a9b      	subs	r3, r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	3315      	adds	r3, #21
 8003244:	78fa      	ldrb	r2, [r7, #3]
 8003246:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003248:	78fa      	ldrb	r2, [r7, #3]
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	4613      	mov	r3, r2
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	1a9b      	subs	r3, r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	334d      	adds	r3, #77	; 0x4d
 8003258:	2200      	movs	r2, #0
 800325a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6818      	ldr	r0, [r3, #0]
 8003260:	78fa      	ldrb	r2, [r7, #3]
 8003262:	4613      	mov	r3, r2
 8003264:	011b      	lsls	r3, r3, #4
 8003266:	1a9b      	subs	r3, r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	3310      	adds	r3, #16
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	4413      	add	r3, r2
 8003270:	1d19      	adds	r1, r3, #4
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	799b      	ldrb	r3, [r3, #6]
 8003276:	461a      	mov	r2, r3
 8003278:	f005 ffa6 	bl	80091c8 <USB_HC_StartXfer>
 800327c:	4603      	mov	r3, r0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop

08003288 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f005 fcc4 	bl	8008c2c <USB_GetMode>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	f040 80fb 	bne.w	80034a2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f005 fc87 	bl	8008bc4 <USB_ReadInterrupts>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 80f1 	beq.w	80034a0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f005 fc7e 	bl	8008bc4 <USB_ReadInterrupts>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032d2:	d104      	bne.n	80032de <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80032dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f005 fc6e 	bl	8008bc4 <USB_ReadInterrupts>
 80032e8:	4603      	mov	r3, r0
 80032ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032f2:	d104      	bne.n	80032fe <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80032fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f005 fc5e 	bl	8008bc4 <USB_ReadInterrupts>
 8003308:	4603      	mov	r3, r0
 800330a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800330e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003312:	d104      	bne.n	800331e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800331c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f005 fc4e 	bl	8008bc4 <USB_ReadInterrupts>
 8003328:	4603      	mov	r3, r0
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b02      	cmp	r3, #2
 8003330:	d103      	bne.n	800333a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2202      	movs	r2, #2
 8003338:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f005 fc40 	bl	8008bc4 <USB_ReadInterrupts>
 8003344:	4603      	mov	r3, r0
 8003346:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800334a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800334e:	d120      	bne.n	8003392 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003358:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d113      	bne.n	8003392 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800336a:	2110      	movs	r1, #16
 800336c:	6938      	ldr	r0, [r7, #16]
 800336e:	f005 fb33 	bl	80089d8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003372:	6938      	ldr	r0, [r7, #16]
 8003374:	f005 fb62 	bl	8008a3c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	7a5b      	ldrb	r3, [r3, #9]
 800337c:	2b02      	cmp	r3, #2
 800337e:	d105      	bne.n	800338c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2101      	movs	r1, #1
 8003386:	4618      	mov	r0, r3
 8003388:	f005 fd54 	bl	8008e34 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f007 fcdf 	bl	800ad50 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f005 fc14 	bl	8008bc4 <USB_ReadInterrupts>
 800339c:	4603      	mov	r3, r0
 800339e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033a6:	d102      	bne.n	80033ae <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f001 fd17 	bl	8004ddc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f005 fc06 	bl	8008bc4 <USB_ReadInterrupts>
 80033b8:	4603      	mov	r3, r0
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d106      	bne.n	80033d0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f007 fca8 	bl	800ad18 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2208      	movs	r2, #8
 80033ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f005 fbf5 	bl	8008bc4 <USB_ReadInterrupts>
 80033da:	4603      	mov	r3, r0
 80033dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033e4:	d139      	bne.n	800345a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f006 f966 	bl	80096bc <USB_HC_ReadInterrupt>
 80033f0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80033f2:	2300      	movs	r3, #0
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	e025      	b.n	8003444 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	fa22 f303 	lsr.w	r3, r2, r3
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d018      	beq.n	800343e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4413      	add	r3, r2
 8003414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800341e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003422:	d106      	bne.n	8003432 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	b2db      	uxtb	r3, r3
 8003428:	4619      	mov	r1, r3
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f8e9 	bl	8003602 <HCD_HC_IN_IRQHandler>
 8003430:	e005      	b.n	800343e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	b2db      	uxtb	r3, r3
 8003436:	4619      	mov	r1, r3
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 ff4b 	bl	80042d4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	3301      	adds	r3, #1
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	795b      	ldrb	r3, [r3, #5]
 8003448:	461a      	mov	r2, r3
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	4293      	cmp	r3, r2
 800344e:	d3d3      	bcc.n	80033f8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003458:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f005 fbb0 	bl	8008bc4 <USB_ReadInterrupts>
 8003464:	4603      	mov	r3, r0
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b10      	cmp	r3, #16
 800346c:	d101      	bne.n	8003472 <HAL_HCD_IRQHandler+0x1ea>
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <HAL_HCD_IRQHandler+0x1ec>
 8003472:	2300      	movs	r3, #0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d014      	beq.n	80034a2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699a      	ldr	r2, [r3, #24]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0210 	bic.w	r2, r2, #16
 8003486:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f001 fbc8 	bl	8004c1e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	699a      	ldr	r2, [r3, #24]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f042 0210 	orr.w	r2, r2, #16
 800349c:	619a      	str	r2, [r3, #24]
 800349e:	e000      	b.n	80034a2 <HAL_HCD_IRQHandler+0x21a>
      return;
 80034a0:	bf00      	nop
    }
  }
}
 80034a2:	3718      	adds	r7, #24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d101      	bne.n	80034be <HAL_HCD_Start+0x16>
 80034ba:	2302      	movs	r3, #2
 80034bc:	e013      	b.n	80034e6 <HAL_HCD_Start+0x3e>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2101      	movs	r1, #1
 80034cc:	4618      	mov	r0, r3
 80034ce:	f005 fcee 	bl	8008eae <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f005 fa10 	bl	80088fc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <HAL_HCD_Stop+0x16>
 8003500:	2302      	movs	r3, #2
 8003502:	e00d      	b.n	8003520 <HAL_HCD_Stop+0x32>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f006 fa41 	bl	8009998 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	460b      	mov	r3, r1
 8003532:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003534:	78fa      	ldrb	r2, [r7, #3]
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	4613      	mov	r3, r2
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	334c      	adds	r3, #76	; 0x4c
 8003544:	781b      	ldrb	r3, [r3, #0]
}
 8003546:	4618      	mov	r0, r3
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	460b      	mov	r3, r1
 800355c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800355e:	78fa      	ldrb	r2, [r7, #3]
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	3338      	adds	r3, #56	; 0x38
 800356e:	681b      	ldr	r3, [r3, #0]
}
 8003570:	4618      	mov	r0, r3
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4618      	mov	r0, r3
 800358a:	f005 fce0 	bl	8008f4e <USB_GetCurrentFrame>
 800358e:	4603      	mov	r3, r0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	460b      	mov	r3, r1
 80035a2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80035a4:	78fa      	ldrb	r2, [r7, #3]
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	331a      	adds	r3, #26
 80035b4:	2200      	movs	r2, #0
 80035b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80035b8:	78fa      	ldrb	r2, [r7, #3]
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	1a9b      	subs	r3, r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	331b      	adds	r3, #27
 80035c8:	2200      	movs	r2, #0
 80035ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80035cc:	78fa      	ldrb	r2, [r7, #3]
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	4613      	mov	r3, r2
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	1a9b      	subs	r3, r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	3325      	adds	r3, #37	; 0x25
 80035dc:	2200      	movs	r2, #0
 80035de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80035e0:	78fa      	ldrb	r2, [r7, #3]
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	1a9b      	subs	r3, r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	3324      	adds	r3, #36	; 0x24
 80035f0:	2200      	movs	r2, #0
 80035f2:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b086      	sub	sp, #24
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	460b      	mov	r3, r1
 800360c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	78fa      	ldrb	r2, [r7, #3]
 800361e:	4611      	mov	r1, r2
 8003620:	4618      	mov	r0, r3
 8003622:	f005 fae2 	bl	8008bea <USB_ReadChInterrupts>
 8003626:	4603      	mov	r3, r0
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	2b04      	cmp	r3, #4
 800362e:	d11a      	bne.n	8003666 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003630:	78fb      	ldrb	r3, [r7, #3]
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	4413      	add	r3, r2
 8003638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363c:	461a      	mov	r2, r3
 800363e:	2304      	movs	r3, #4
 8003640:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003642:	78fa      	ldrb	r2, [r7, #3]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	1a9b      	subs	r3, r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	334d      	adds	r3, #77	; 0x4d
 8003652:	2207      	movs	r2, #7
 8003654:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	78fa      	ldrb	r2, [r7, #3]
 800365c:	4611      	mov	r1, r2
 800365e:	4618      	mov	r0, r3
 8003660:	f006 f83d 	bl	80096de <USB_HC_Halt>
 8003664:	e09e      	b.n	80037a4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	78fa      	ldrb	r2, [r7, #3]
 800366c:	4611      	mov	r1, r2
 800366e:	4618      	mov	r0, r3
 8003670:	f005 fabb 	bl	8008bea <USB_ReadChInterrupts>
 8003674:	4603      	mov	r3, r0
 8003676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800367e:	d11b      	bne.n	80036b8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003680:	78fb      	ldrb	r3, [r7, #3]
 8003682:	015a      	lsls	r2, r3, #5
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	4413      	add	r3, r2
 8003688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800368c:	461a      	mov	r2, r3
 800368e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003692:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003694:	78fa      	ldrb	r2, [r7, #3]
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	4613      	mov	r3, r2
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	1a9b      	subs	r3, r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	334d      	adds	r3, #77	; 0x4d
 80036a4:	2208      	movs	r2, #8
 80036a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	78fa      	ldrb	r2, [r7, #3]
 80036ae:	4611      	mov	r1, r2
 80036b0:	4618      	mov	r0, r3
 80036b2:	f006 f814 	bl	80096de <USB_HC_Halt>
 80036b6:	e075      	b.n	80037a4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	78fa      	ldrb	r2, [r7, #3]
 80036be:	4611      	mov	r1, r2
 80036c0:	4618      	mov	r0, r3
 80036c2:	f005 fa92 	bl	8008bea <USB_ReadChInterrupts>
 80036c6:	4603      	mov	r3, r0
 80036c8:	f003 0308 	and.w	r3, r3, #8
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d11a      	bne.n	8003706 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80036d0:	78fb      	ldrb	r3, [r7, #3]
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036dc:	461a      	mov	r2, r3
 80036de:	2308      	movs	r3, #8
 80036e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80036e2:	78fa      	ldrb	r2, [r7, #3]
 80036e4:	6879      	ldr	r1, [r7, #4]
 80036e6:	4613      	mov	r3, r2
 80036e8:	011b      	lsls	r3, r3, #4
 80036ea:	1a9b      	subs	r3, r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	440b      	add	r3, r1
 80036f0:	334d      	adds	r3, #77	; 0x4d
 80036f2:	2206      	movs	r2, #6
 80036f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	78fa      	ldrb	r2, [r7, #3]
 80036fc:	4611      	mov	r1, r2
 80036fe:	4618      	mov	r0, r3
 8003700:	f005 ffed 	bl	80096de <USB_HC_Halt>
 8003704:	e04e      	b.n	80037a4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	78fa      	ldrb	r2, [r7, #3]
 800370c:	4611      	mov	r1, r2
 800370e:	4618      	mov	r0, r3
 8003710:	f005 fa6b 	bl	8008bea <USB_ReadChInterrupts>
 8003714:	4603      	mov	r3, r0
 8003716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800371a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800371e:	d11b      	bne.n	8003758 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003720:	78fb      	ldrb	r3, [r7, #3]
 8003722:	015a      	lsls	r2, r3, #5
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	4413      	add	r3, r2
 8003728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800372c:	461a      	mov	r2, r3
 800372e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003732:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003734:	78fa      	ldrb	r2, [r7, #3]
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	4613      	mov	r3, r2
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	334d      	adds	r3, #77	; 0x4d
 8003744:	2209      	movs	r2, #9
 8003746:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	78fa      	ldrb	r2, [r7, #3]
 800374e:	4611      	mov	r1, r2
 8003750:	4618      	mov	r0, r3
 8003752:	f005 ffc4 	bl	80096de <USB_HC_Halt>
 8003756:	e025      	b.n	80037a4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	78fa      	ldrb	r2, [r7, #3]
 800375e:	4611      	mov	r1, r2
 8003760:	4618      	mov	r0, r3
 8003762:	f005 fa42 	bl	8008bea <USB_ReadChInterrupts>
 8003766:	4603      	mov	r3, r0
 8003768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376c:	2b80      	cmp	r3, #128	; 0x80
 800376e:	d119      	bne.n	80037a4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003770:	78fb      	ldrb	r3, [r7, #3]
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	4413      	add	r3, r2
 8003778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800377c:	461a      	mov	r2, r3
 800377e:	2380      	movs	r3, #128	; 0x80
 8003780:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003782:	78fa      	ldrb	r2, [r7, #3]
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	1a9b      	subs	r3, r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	334d      	adds	r3, #77	; 0x4d
 8003792:	2207      	movs	r2, #7
 8003794:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	78fa      	ldrb	r2, [r7, #3]
 800379c:	4611      	mov	r1, r2
 800379e:	4618      	mov	r0, r3
 80037a0:	f005 ff9d 	bl	80096de <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	78fa      	ldrb	r2, [r7, #3]
 80037aa:	4611      	mov	r1, r2
 80037ac:	4618      	mov	r0, r3
 80037ae:	f005 fa1c 	bl	8008bea <USB_ReadChInterrupts>
 80037b2:	4603      	mov	r3, r0
 80037b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037bc:	d112      	bne.n	80037e4 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	78fa      	ldrb	r2, [r7, #3]
 80037c4:	4611      	mov	r1, r2
 80037c6:	4618      	mov	r0, r3
 80037c8:	f005 ff89 	bl	80096de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80037cc:	78fb      	ldrb	r3, [r7, #3]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d8:	461a      	mov	r2, r3
 80037da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037de:	6093      	str	r3, [r2, #8]
 80037e0:	f000 bd75 	b.w	80042ce <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	78fa      	ldrb	r2, [r7, #3]
 80037ea:	4611      	mov	r1, r2
 80037ec:	4618      	mov	r0, r3
 80037ee:	f005 f9fc 	bl	8008bea <USB_ReadChInterrupts>
 80037f2:	4603      	mov	r3, r0
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	f040 8128 	bne.w	8003a4e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80037fe:	78fb      	ldrb	r3, [r7, #3]
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4413      	add	r3, r2
 8003806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380a:	461a      	mov	r2, r3
 800380c:	2320      	movs	r3, #32
 800380e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003810:	78fa      	ldrb	r2, [r7, #3]
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	4613      	mov	r3, r2
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	1a9b      	subs	r3, r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	331b      	adds	r3, #27
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d119      	bne.n	800385a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003826:	78fa      	ldrb	r2, [r7, #3]
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	1a9b      	subs	r3, r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	440b      	add	r3, r1
 8003834:	331b      	adds	r3, #27
 8003836:	2200      	movs	r2, #0
 8003838:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800383a:	78fb      	ldrb	r3, [r7, #3]
 800383c:	015a      	lsls	r2, r3, #5
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	4413      	add	r3, r2
 8003842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	78fa      	ldrb	r2, [r7, #3]
 800384a:	0151      	lsls	r1, r2, #5
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	440a      	add	r2, r1
 8003850:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003858:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	799b      	ldrb	r3, [r3, #6]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d01b      	beq.n	800389a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003862:	78fa      	ldrb	r2, [r7, #3]
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	4613      	mov	r3, r2
 8003868:	011b      	lsls	r3, r3, #4
 800386a:	1a9b      	subs	r3, r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	440b      	add	r3, r1
 8003870:	3330      	adds	r3, #48	; 0x30
 8003872:	6819      	ldr	r1, [r3, #0]
 8003874:	78fb      	ldrb	r3, [r7, #3]
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	4413      	add	r3, r2
 800387c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003886:	78fa      	ldrb	r2, [r7, #3]
 8003888:	1ac9      	subs	r1, r1, r3
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	4613      	mov	r3, r2
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	1a9b      	subs	r3, r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4403      	add	r3, r0
 8003896:	3338      	adds	r3, #56	; 0x38
 8003898:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800389a:	78fa      	ldrb	r2, [r7, #3]
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	334d      	adds	r3, #77	; 0x4d
 80038aa:	2201      	movs	r2, #1
 80038ac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80038ae:	78fa      	ldrb	r2, [r7, #3]
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	4613      	mov	r3, r2
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	1a9b      	subs	r3, r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	440b      	add	r3, r1
 80038bc:	3344      	adds	r3, #68	; 0x44
 80038be:	2200      	movs	r2, #0
 80038c0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80038c2:	78fb      	ldrb	r3, [r7, #3]
 80038c4:	015a      	lsls	r2, r3, #5
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ce:	461a      	mov	r2, r3
 80038d0:	2301      	movs	r3, #1
 80038d2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038d4:	78fa      	ldrb	r2, [r7, #3]
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	4613      	mov	r3, r2
 80038da:	011b      	lsls	r3, r3, #4
 80038dc:	1a9b      	subs	r3, r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	3326      	adds	r3, #38	; 0x26
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80038ea:	78fa      	ldrb	r2, [r7, #3]
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	1a9b      	subs	r3, r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	3326      	adds	r3, #38	; 0x26
 80038fa:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d110      	bne.n	8003922 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	78fa      	ldrb	r2, [r7, #3]
 8003906:	4611      	mov	r1, r2
 8003908:	4618      	mov	r0, r3
 800390a:	f005 fee8 	bl	80096de <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800390e:	78fb      	ldrb	r3, [r7, #3]
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4413      	add	r3, r2
 8003916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800391a:	461a      	mov	r2, r3
 800391c:	2310      	movs	r3, #16
 800391e:	6093      	str	r3, [r2, #8]
 8003920:	e03d      	b.n	800399e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003922:	78fa      	ldrb	r2, [r7, #3]
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	4613      	mov	r3, r2
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	1a9b      	subs	r3, r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	440b      	add	r3, r1
 8003930:	3326      	adds	r3, #38	; 0x26
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2b03      	cmp	r3, #3
 8003936:	d00a      	beq.n	800394e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003938:	78fa      	ldrb	r2, [r7, #3]
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	1a9b      	subs	r3, r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	3326      	adds	r3, #38	; 0x26
 8003948:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800394a:	2b01      	cmp	r3, #1
 800394c:	d127      	bne.n	800399e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800394e:	78fb      	ldrb	r3, [r7, #3]
 8003950:	015a      	lsls	r2, r3, #5
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	4413      	add	r3, r2
 8003956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	78fa      	ldrb	r2, [r7, #3]
 800395e:	0151      	lsls	r1, r2, #5
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	440a      	add	r2, r1
 8003964:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003968:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800396c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800396e:	78fa      	ldrb	r2, [r7, #3]
 8003970:	6879      	ldr	r1, [r7, #4]
 8003972:	4613      	mov	r3, r2
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	1a9b      	subs	r3, r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	440b      	add	r3, r1
 800397c:	334c      	adds	r3, #76	; 0x4c
 800397e:	2201      	movs	r2, #1
 8003980:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003982:	78fa      	ldrb	r2, [r7, #3]
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	1a9b      	subs	r3, r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	334c      	adds	r3, #76	; 0x4c
 8003992:	781a      	ldrb	r2, [r3, #0]
 8003994:	78fb      	ldrb	r3, [r7, #3]
 8003996:	4619      	mov	r1, r3
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f007 f9e7 	bl	800ad6c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	799b      	ldrb	r3, [r3, #6]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d13b      	bne.n	8003a1e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80039a6:	78fa      	ldrb	r2, [r7, #3]
 80039a8:	6879      	ldr	r1, [r7, #4]
 80039aa:	4613      	mov	r3, r2
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	1a9b      	subs	r3, r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	440b      	add	r3, r1
 80039b4:	3338      	adds	r3, #56	; 0x38
 80039b6:	6819      	ldr	r1, [r3, #0]
 80039b8:	78fa      	ldrb	r2, [r7, #3]
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	4613      	mov	r3, r2
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	1a9b      	subs	r3, r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4403      	add	r3, r0
 80039c6:	3328      	adds	r3, #40	; 0x28
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	440b      	add	r3, r1
 80039cc:	1e59      	subs	r1, r3, #1
 80039ce:	78fa      	ldrb	r2, [r7, #3]
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	4613      	mov	r3, r2
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	1a9b      	subs	r3, r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4403      	add	r3, r0
 80039dc:	3328      	adds	r3, #40	; 0x28
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 8470 	beq.w	80042ce <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80039ee:	78fa      	ldrb	r2, [r7, #3]
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	4613      	mov	r3, r2
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	1a9b      	subs	r3, r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	333c      	adds	r3, #60	; 0x3c
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	78fa      	ldrb	r2, [r7, #3]
 8003a02:	f083 0301 	eor.w	r3, r3, #1
 8003a06:	b2d8      	uxtb	r0, r3
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	1a9b      	subs	r3, r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	440b      	add	r3, r1
 8003a14:	333c      	adds	r3, #60	; 0x3c
 8003a16:	4602      	mov	r2, r0
 8003a18:	701a      	strb	r2, [r3, #0]
 8003a1a:	f000 bc58 	b.w	80042ce <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003a1e:	78fa      	ldrb	r2, [r7, #3]
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	4613      	mov	r3, r2
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	1a9b      	subs	r3, r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	440b      	add	r3, r1
 8003a2c:	333c      	adds	r3, #60	; 0x3c
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	78fa      	ldrb	r2, [r7, #3]
 8003a32:	f083 0301 	eor.w	r3, r3, #1
 8003a36:	b2d8      	uxtb	r0, r3
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	1a9b      	subs	r3, r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	440b      	add	r3, r1
 8003a44:	333c      	adds	r3, #60	; 0x3c
 8003a46:	4602      	mov	r2, r0
 8003a48:	701a      	strb	r2, [r3, #0]
 8003a4a:	f000 bc40 	b.w	80042ce <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	78fa      	ldrb	r2, [r7, #3]
 8003a54:	4611      	mov	r1, r2
 8003a56:	4618      	mov	r0, r3
 8003a58:	f005 f8c7 	bl	8008bea <USB_ReadChInterrupts>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	2b20      	cmp	r3, #32
 8003a64:	d131      	bne.n	8003aca <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003a66:	78fb      	ldrb	r3, [r7, #3]
 8003a68:	015a      	lsls	r2, r3, #5
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a72:	461a      	mov	r2, r3
 8003a74:	2320      	movs	r3, #32
 8003a76:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003a78:	78fa      	ldrb	r2, [r7, #3]
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	1a9b      	subs	r3, r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	331a      	adds	r3, #26
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	f040 841f 	bne.w	80042ce <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003a90:	78fa      	ldrb	r2, [r7, #3]
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	4613      	mov	r3, r2
 8003a96:	011b      	lsls	r3, r3, #4
 8003a98:	1a9b      	subs	r3, r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	440b      	add	r3, r1
 8003a9e:	331b      	adds	r3, #27
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003aa4:	78fa      	ldrb	r2, [r7, #3]
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	1a9b      	subs	r3, r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	334d      	adds	r3, #77	; 0x4d
 8003ab4:	2203      	movs	r2, #3
 8003ab6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	78fa      	ldrb	r2, [r7, #3]
 8003abe:	4611      	mov	r1, r2
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f005 fe0c 	bl	80096de <USB_HC_Halt>
 8003ac6:	f000 bc02 	b.w	80042ce <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	78fa      	ldrb	r2, [r7, #3]
 8003ad0:	4611      	mov	r1, r2
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f005 f889 	bl	8008bea <USB_ReadChInterrupts>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	f040 8305 	bne.w	80040ee <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003ae4:	78fb      	ldrb	r3, [r7, #3]
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af0:	461a      	mov	r2, r3
 8003af2:	2302      	movs	r3, #2
 8003af4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003af6:	78fa      	ldrb	r2, [r7, #3]
 8003af8:	6879      	ldr	r1, [r7, #4]
 8003afa:	4613      	mov	r3, r2
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	1a9b      	subs	r3, r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	440b      	add	r3, r1
 8003b04:	334d      	adds	r3, #77	; 0x4d
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d114      	bne.n	8003b36 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b0c:	78fa      	ldrb	r2, [r7, #3]
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	4613      	mov	r3, r2
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	1a9b      	subs	r3, r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	334d      	adds	r3, #77	; 0x4d
 8003b1c:	2202      	movs	r2, #2
 8003b1e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003b20:	78fa      	ldrb	r2, [r7, #3]
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	4613      	mov	r3, r2
 8003b26:	011b      	lsls	r3, r3, #4
 8003b28:	1a9b      	subs	r3, r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	334c      	adds	r3, #76	; 0x4c
 8003b30:	2201      	movs	r2, #1
 8003b32:	701a      	strb	r2, [r3, #0]
 8003b34:	e2cc      	b.n	80040d0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003b36:	78fa      	ldrb	r2, [r7, #3]
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	1a9b      	subs	r3, r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	440b      	add	r3, r1
 8003b44:	334d      	adds	r3, #77	; 0x4d
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b06      	cmp	r3, #6
 8003b4a:	d114      	bne.n	8003b76 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b4c:	78fa      	ldrb	r2, [r7, #3]
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	4613      	mov	r3, r2
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	1a9b      	subs	r3, r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	334d      	adds	r3, #77	; 0x4d
 8003b5c:	2202      	movs	r2, #2
 8003b5e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003b60:	78fa      	ldrb	r2, [r7, #3]
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	4613      	mov	r3, r2
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	334c      	adds	r3, #76	; 0x4c
 8003b70:	2205      	movs	r2, #5
 8003b72:	701a      	strb	r2, [r3, #0]
 8003b74:	e2ac      	b.n	80040d0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003b76:	78fa      	ldrb	r2, [r7, #3]
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	1a9b      	subs	r3, r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	440b      	add	r3, r1
 8003b84:	334d      	adds	r3, #77	; 0x4d
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b07      	cmp	r3, #7
 8003b8a:	d00b      	beq.n	8003ba4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003b8c:	78fa      	ldrb	r2, [r7, #3]
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	4613      	mov	r3, r2
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	1a9b      	subs	r3, r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	334d      	adds	r3, #77	; 0x4d
 8003b9c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003b9e:	2b09      	cmp	r3, #9
 8003ba0:	f040 80a6 	bne.w	8003cf0 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ba4:	78fa      	ldrb	r2, [r7, #3]
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	011b      	lsls	r3, r3, #4
 8003bac:	1a9b      	subs	r3, r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	334d      	adds	r3, #77	; 0x4d
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003bb8:	78fa      	ldrb	r2, [r7, #3]
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	1a9b      	subs	r3, r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	3344      	adds	r3, #68	; 0x44
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	1c59      	adds	r1, r3, #1
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	011b      	lsls	r3, r3, #4
 8003bd2:	1a9b      	subs	r3, r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4403      	add	r3, r0
 8003bd8:	3344      	adds	r3, #68	; 0x44
 8003bda:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003bdc:	78fa      	ldrb	r2, [r7, #3]
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	4613      	mov	r3, r2
 8003be2:	011b      	lsls	r3, r3, #4
 8003be4:	1a9b      	subs	r3, r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	3344      	adds	r3, #68	; 0x44
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d943      	bls.n	8003c7a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003bf2:	78fa      	ldrb	r2, [r7, #3]
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	011b      	lsls	r3, r3, #4
 8003bfa:	1a9b      	subs	r3, r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	440b      	add	r3, r1
 8003c00:	3344      	adds	r3, #68	; 0x44
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003c06:	78fa      	ldrb	r2, [r7, #3]
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	1a9b      	subs	r3, r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	440b      	add	r3, r1
 8003c14:	331a      	adds	r3, #26
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d123      	bne.n	8003c64 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003c1c:	78fa      	ldrb	r2, [r7, #3]
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	4613      	mov	r3, r2
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	1a9b      	subs	r3, r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	440b      	add	r3, r1
 8003c2a:	331b      	adds	r3, #27
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003c30:	78fa      	ldrb	r2, [r7, #3]
 8003c32:	6879      	ldr	r1, [r7, #4]
 8003c34:	4613      	mov	r3, r2
 8003c36:	011b      	lsls	r3, r3, #4
 8003c38:	1a9b      	subs	r3, r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	331c      	adds	r3, #28
 8003c40:	2200      	movs	r2, #0
 8003c42:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003c44:	78fb      	ldrb	r3, [r7, #3]
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	78fa      	ldrb	r2, [r7, #3]
 8003c54:	0151      	lsls	r1, r2, #5
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	440a      	add	r2, r1
 8003c5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c62:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003c64:	78fa      	ldrb	r2, [r7, #3]
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	1a9b      	subs	r3, r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	334c      	adds	r3, #76	; 0x4c
 8003c74:	2204      	movs	r2, #4
 8003c76:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c78:	e229      	b.n	80040ce <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c7a:	78fa      	ldrb	r2, [r7, #3]
 8003c7c:	6879      	ldr	r1, [r7, #4]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	1a9b      	subs	r3, r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	440b      	add	r3, r1
 8003c88:	334c      	adds	r3, #76	; 0x4c
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c8e:	78fa      	ldrb	r2, [r7, #3]
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	3326      	adds	r3, #38	; 0x26
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00b      	beq.n	8003cbc <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ca4:	78fa      	ldrb	r2, [r7, #3]
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	1a9b      	subs	r3, r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	440b      	add	r3, r1
 8003cb2:	3326      	adds	r3, #38	; 0x26
 8003cb4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	f040 8209 	bne.w	80040ce <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003cbc:	78fb      	ldrb	r3, [r7, #3]
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003cd2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003cda:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003cdc:	78fb      	ldrb	r3, [r7, #3]
 8003cde:	015a      	lsls	r2, r3, #5
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce8:	461a      	mov	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003cee:	e1ee      	b.n	80040ce <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003cf0:	78fa      	ldrb	r2, [r7, #3]
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	1a9b      	subs	r3, r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	334d      	adds	r3, #77	; 0x4d
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	2b05      	cmp	r3, #5
 8003d04:	f040 80c8 	bne.w	8003e98 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d08:	78fa      	ldrb	r2, [r7, #3]
 8003d0a:	6879      	ldr	r1, [r7, #4]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	1a9b      	subs	r3, r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	440b      	add	r3, r1
 8003d16:	334d      	adds	r3, #77	; 0x4d
 8003d18:	2202      	movs	r2, #2
 8003d1a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003d1c:	78fa      	ldrb	r2, [r7, #3]
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	4613      	mov	r3, r2
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	331b      	adds	r3, #27
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	f040 81ce 	bne.w	80040d0 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003d34:	78fa      	ldrb	r2, [r7, #3]
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	1a9b      	subs	r3, r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	3326      	adds	r3, #38	; 0x26
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	2b03      	cmp	r3, #3
 8003d48:	d16b      	bne.n	8003e22 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003d4a:	78fa      	ldrb	r2, [r7, #3]
 8003d4c:	6879      	ldr	r1, [r7, #4]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	1a9b      	subs	r3, r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	3348      	adds	r3, #72	; 0x48
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	1c59      	adds	r1, r3, #1
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	4613      	mov	r3, r2
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	1a9b      	subs	r3, r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4403      	add	r3, r0
 8003d6a:	3348      	adds	r3, #72	; 0x48
 8003d6c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003d6e:	78fa      	ldrb	r2, [r7, #3]
 8003d70:	6879      	ldr	r1, [r7, #4]
 8003d72:	4613      	mov	r3, r2
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	1a9b      	subs	r3, r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	440b      	add	r3, r1
 8003d7c:	3348      	adds	r3, #72	; 0x48
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d943      	bls.n	8003e0c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003d84:	78fa      	ldrb	r2, [r7, #3]
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	011b      	lsls	r3, r3, #4
 8003d8c:	1a9b      	subs	r3, r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	440b      	add	r3, r1
 8003d92:	3348      	adds	r3, #72	; 0x48
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003d98:	78fa      	ldrb	r2, [r7, #3]
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	011b      	lsls	r3, r3, #4
 8003da0:	1a9b      	subs	r3, r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	440b      	add	r3, r1
 8003da6:	331b      	adds	r3, #27
 8003da8:	2200      	movs	r2, #0
 8003daa:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003dac:	78fa      	ldrb	r2, [r7, #3]
 8003dae:	6879      	ldr	r1, [r7, #4]
 8003db0:	4613      	mov	r3, r2
 8003db2:	011b      	lsls	r3, r3, #4
 8003db4:	1a9b      	subs	r3, r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	440b      	add	r3, r1
 8003dba:	3344      	adds	r3, #68	; 0x44
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d809      	bhi.n	8003dd6 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003dc2:	78fa      	ldrb	r2, [r7, #3]
 8003dc4:	6879      	ldr	r1, [r7, #4]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	1a9b      	subs	r3, r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	440b      	add	r3, r1
 8003dd0:	331c      	adds	r3, #28
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003dd6:	78fb      	ldrb	r3, [r7, #3]
 8003dd8:	015a      	lsls	r2, r3, #5
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	78fa      	ldrb	r2, [r7, #3]
 8003de6:	0151      	lsls	r1, r2, #5
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	440a      	add	r2, r1
 8003dec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003df0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003df4:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003df6:	78fa      	ldrb	r2, [r7, #3]
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	1a9b      	subs	r3, r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	440b      	add	r3, r1
 8003e04:	334c      	adds	r3, #76	; 0x4c
 8003e06:	2204      	movs	r2, #4
 8003e08:	701a      	strb	r2, [r3, #0]
 8003e0a:	e014      	b.n	8003e36 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e0c:	78fa      	ldrb	r2, [r7, #3]
 8003e0e:	6879      	ldr	r1, [r7, #4]
 8003e10:	4613      	mov	r3, r2
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	1a9b      	subs	r3, r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	440b      	add	r3, r1
 8003e1a:	334c      	adds	r3, #76	; 0x4c
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	701a      	strb	r2, [r3, #0]
 8003e20:	e009      	b.n	8003e36 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e22:	78fa      	ldrb	r2, [r7, #3]
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	1a9b      	subs	r3, r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	440b      	add	r3, r1
 8003e30:	334c      	adds	r3, #76	; 0x4c
 8003e32:	2202      	movs	r2, #2
 8003e34:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e36:	78fa      	ldrb	r2, [r7, #3]
 8003e38:	6879      	ldr	r1, [r7, #4]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	1a9b      	subs	r3, r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	440b      	add	r3, r1
 8003e44:	3326      	adds	r3, #38	; 0x26
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00b      	beq.n	8003e64 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003e4c:	78fa      	ldrb	r2, [r7, #3]
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	4613      	mov	r3, r2
 8003e52:	011b      	lsls	r3, r3, #4
 8003e54:	1a9b      	subs	r3, r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	3326      	adds	r3, #38	; 0x26
 8003e5c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	f040 8136 	bne.w	80040d0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003e64:	78fb      	ldrb	r3, [r7, #3]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e7a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e82:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003e84:	78fb      	ldrb	r3, [r7, #3]
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e90:	461a      	mov	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	e11b      	b.n	80040d0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003e98:	78fa      	ldrb	r2, [r7, #3]
 8003e9a:	6879      	ldr	r1, [r7, #4]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	1a9b      	subs	r3, r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	334d      	adds	r3, #77	; 0x4d
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	2b03      	cmp	r3, #3
 8003eac:	f040 8081 	bne.w	8003fb2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003eb0:	78fa      	ldrb	r2, [r7, #3]
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	011b      	lsls	r3, r3, #4
 8003eb8:	1a9b      	subs	r3, r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	334d      	adds	r3, #77	; 0x4d
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003ec4:	78fa      	ldrb	r2, [r7, #3]
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	1a9b      	subs	r3, r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	331b      	adds	r3, #27
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	f040 80fa 	bne.w	80040d0 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003edc:	78fa      	ldrb	r2, [r7, #3]
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	1a9b      	subs	r3, r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	440b      	add	r3, r1
 8003eea:	334c      	adds	r3, #76	; 0x4c
 8003eec:	2202      	movs	r2, #2
 8003eee:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003ef0:	78fb      	ldrb	r3, [r7, #3]
 8003ef2:	015a      	lsls	r2, r3, #5
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	78fa      	ldrb	r2, [r7, #3]
 8003f00:	0151      	lsls	r1, r2, #5
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	440a      	add	r2, r1
 8003f06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f0e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003f10:	78fb      	ldrb	r3, [r7, #3]
 8003f12:	015a      	lsls	r2, r3, #5
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	4413      	add	r3, r2
 8003f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	78fa      	ldrb	r2, [r7, #3]
 8003f20:	0151      	lsls	r1, r2, #5
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	440a      	add	r2, r1
 8003f26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f2e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003f30:	78fb      	ldrb	r3, [r7, #3]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	78fa      	ldrb	r2, [r7, #3]
 8003f40:	0151      	lsls	r1, r2, #5
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	440a      	add	r2, r1
 8003f46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f4a:	f023 0320 	bic.w	r3, r3, #32
 8003f4e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f50:	78fa      	ldrb	r2, [r7, #3]
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	4613      	mov	r3, r2
 8003f56:	011b      	lsls	r3, r3, #4
 8003f58:	1a9b      	subs	r3, r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	3326      	adds	r3, #38	; 0x26
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00b      	beq.n	8003f7e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003f66:	78fa      	ldrb	r2, [r7, #3]
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	1a9b      	subs	r3, r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	440b      	add	r3, r1
 8003f74:	3326      	adds	r3, #38	; 0x26
 8003f76:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	f040 80a9 	bne.w	80040d0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003f7e:	78fb      	ldrb	r3, [r7, #3]
 8003f80:	015a      	lsls	r2, r3, #5
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	4413      	add	r3, r2
 8003f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f94:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f9c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003f9e:	78fb      	ldrb	r3, [r7, #3]
 8003fa0:	015a      	lsls	r2, r3, #5
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003faa:	461a      	mov	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6013      	str	r3, [r2, #0]
 8003fb0:	e08e      	b.n	80040d0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003fb2:	78fa      	ldrb	r2, [r7, #3]
 8003fb4:	6879      	ldr	r1, [r7, #4]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	1a9b      	subs	r3, r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	440b      	add	r3, r1
 8003fc0:	334d      	adds	r3, #77	; 0x4d
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b04      	cmp	r3, #4
 8003fc6:	d143      	bne.n	8004050 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003fc8:	78fa      	ldrb	r2, [r7, #3]
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	011b      	lsls	r3, r3, #4
 8003fd0:	1a9b      	subs	r3, r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	334d      	adds	r3, #77	; 0x4d
 8003fd8:	2202      	movs	r2, #2
 8003fda:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003fdc:	78fa      	ldrb	r2, [r7, #3]
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	011b      	lsls	r3, r3, #4
 8003fe4:	1a9b      	subs	r3, r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	334c      	adds	r3, #76	; 0x4c
 8003fec:	2202      	movs	r2, #2
 8003fee:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ff0:	78fa      	ldrb	r2, [r7, #3]
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	1a9b      	subs	r3, r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	3326      	adds	r3, #38	; 0x26
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004006:	78fa      	ldrb	r2, [r7, #3]
 8004008:	6879      	ldr	r1, [r7, #4]
 800400a:	4613      	mov	r3, r2
 800400c:	011b      	lsls	r3, r3, #4
 800400e:	1a9b      	subs	r3, r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	440b      	add	r3, r1
 8004014:	3326      	adds	r3, #38	; 0x26
 8004016:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004018:	2b02      	cmp	r3, #2
 800401a:	d159      	bne.n	80040d0 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800401c:	78fb      	ldrb	r3, [r7, #3]
 800401e:	015a      	lsls	r2, r3, #5
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	4413      	add	r3, r2
 8004024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004032:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800403a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800403c:	78fb      	ldrb	r3, [r7, #3]
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	4413      	add	r3, r2
 8004044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004048:	461a      	mov	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6013      	str	r3, [r2, #0]
 800404e:	e03f      	b.n	80040d0 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004050:	78fa      	ldrb	r2, [r7, #3]
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	4613      	mov	r3, r2
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	1a9b      	subs	r3, r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	334d      	adds	r3, #77	; 0x4d
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	2b08      	cmp	r3, #8
 8004064:	d126      	bne.n	80040b4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004066:	78fa      	ldrb	r2, [r7, #3]
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	4613      	mov	r3, r2
 800406c:	011b      	lsls	r3, r3, #4
 800406e:	1a9b      	subs	r3, r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	440b      	add	r3, r1
 8004074:	334d      	adds	r3, #77	; 0x4d
 8004076:	2202      	movs	r2, #2
 8004078:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800407a:	78fa      	ldrb	r2, [r7, #3]
 800407c:	6879      	ldr	r1, [r7, #4]
 800407e:	4613      	mov	r3, r2
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	1a9b      	subs	r3, r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	440b      	add	r3, r1
 8004088:	3344      	adds	r3, #68	; 0x44
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	1c59      	adds	r1, r3, #1
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	4613      	mov	r3, r2
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	1a9b      	subs	r3, r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4403      	add	r3, r0
 800409a:	3344      	adds	r3, #68	; 0x44
 800409c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800409e:	78fa      	ldrb	r2, [r7, #3]
 80040a0:	6879      	ldr	r1, [r7, #4]
 80040a2:	4613      	mov	r3, r2
 80040a4:	011b      	lsls	r3, r3, #4
 80040a6:	1a9b      	subs	r3, r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	440b      	add	r3, r1
 80040ac:	334c      	adds	r3, #76	; 0x4c
 80040ae:	2204      	movs	r2, #4
 80040b0:	701a      	strb	r2, [r3, #0]
 80040b2:	e00d      	b.n	80040d0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80040b4:	78fa      	ldrb	r2, [r7, #3]
 80040b6:	6879      	ldr	r1, [r7, #4]
 80040b8:	4613      	mov	r3, r2
 80040ba:	011b      	lsls	r3, r3, #4
 80040bc:	1a9b      	subs	r3, r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	440b      	add	r3, r1
 80040c2:	334d      	adds	r3, #77	; 0x4d
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	f000 8100 	beq.w	80042cc <HCD_HC_IN_IRQHandler+0xcca>
 80040cc:	e000      	b.n	80040d0 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80040ce:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80040d0:	78fa      	ldrb	r2, [r7, #3]
 80040d2:	6879      	ldr	r1, [r7, #4]
 80040d4:	4613      	mov	r3, r2
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	1a9b      	subs	r3, r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	440b      	add	r3, r1
 80040de:	334c      	adds	r3, #76	; 0x4c
 80040e0:	781a      	ldrb	r2, [r3, #0]
 80040e2:	78fb      	ldrb	r3, [r7, #3]
 80040e4:	4619      	mov	r1, r3
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f006 fe40 	bl	800ad6c <HAL_HCD_HC_NotifyURBChange_Callback>
 80040ec:	e0ef      	b.n	80042ce <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	78fa      	ldrb	r2, [r7, #3]
 80040f4:	4611      	mov	r1, r2
 80040f6:	4618      	mov	r0, r3
 80040f8:	f004 fd77 	bl	8008bea <USB_ReadChInterrupts>
 80040fc:	4603      	mov	r3, r0
 80040fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004102:	2b40      	cmp	r3, #64	; 0x40
 8004104:	d12f      	bne.n	8004166 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004106:	78fb      	ldrb	r3, [r7, #3]
 8004108:	015a      	lsls	r2, r3, #5
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	4413      	add	r3, r2
 800410e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004112:	461a      	mov	r2, r3
 8004114:	2340      	movs	r3, #64	; 0x40
 8004116:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004118:	78fa      	ldrb	r2, [r7, #3]
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	4613      	mov	r3, r2
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	1a9b      	subs	r3, r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	334d      	adds	r3, #77	; 0x4d
 8004128:	2205      	movs	r2, #5
 800412a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800412c:	78fa      	ldrb	r2, [r7, #3]
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	4613      	mov	r3, r2
 8004132:	011b      	lsls	r3, r3, #4
 8004134:	1a9b      	subs	r3, r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	331a      	adds	r3, #26
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d109      	bne.n	8004156 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004142:	78fa      	ldrb	r2, [r7, #3]
 8004144:	6879      	ldr	r1, [r7, #4]
 8004146:	4613      	mov	r3, r2
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	1a9b      	subs	r3, r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	440b      	add	r3, r1
 8004150:	3344      	adds	r3, #68	; 0x44
 8004152:	2200      	movs	r2, #0
 8004154:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	78fa      	ldrb	r2, [r7, #3]
 800415c:	4611      	mov	r1, r2
 800415e:	4618      	mov	r0, r3
 8004160:	f005 fabd 	bl	80096de <USB_HC_Halt>
 8004164:	e0b3      	b.n	80042ce <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	78fa      	ldrb	r2, [r7, #3]
 800416c:	4611      	mov	r1, r2
 800416e:	4618      	mov	r0, r3
 8004170:	f004 fd3b 	bl	8008bea <USB_ReadChInterrupts>
 8004174:	4603      	mov	r3, r0
 8004176:	f003 0310 	and.w	r3, r3, #16
 800417a:	2b10      	cmp	r3, #16
 800417c:	f040 80a7 	bne.w	80042ce <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004180:	78fa      	ldrb	r2, [r7, #3]
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	4613      	mov	r3, r2
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	1a9b      	subs	r3, r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	3326      	adds	r3, #38	; 0x26
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	2b03      	cmp	r3, #3
 8004194:	d11b      	bne.n	80041ce <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004196:	78fa      	ldrb	r2, [r7, #3]
 8004198:	6879      	ldr	r1, [r7, #4]
 800419a:	4613      	mov	r3, r2
 800419c:	011b      	lsls	r3, r3, #4
 800419e:	1a9b      	subs	r3, r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	440b      	add	r3, r1
 80041a4:	3344      	adds	r3, #68	; 0x44
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80041aa:	78fa      	ldrb	r2, [r7, #3]
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	4613      	mov	r3, r2
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	1a9b      	subs	r3, r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	440b      	add	r3, r1
 80041b8:	334d      	adds	r3, #77	; 0x4d
 80041ba:	2204      	movs	r2, #4
 80041bc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	78fa      	ldrb	r2, [r7, #3]
 80041c4:	4611      	mov	r1, r2
 80041c6:	4618      	mov	r0, r3
 80041c8:	f005 fa89 	bl	80096de <USB_HC_Halt>
 80041cc:	e03f      	b.n	800424e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80041ce:	78fa      	ldrb	r2, [r7, #3]
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	4613      	mov	r3, r2
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	1a9b      	subs	r3, r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	440b      	add	r3, r1
 80041dc:	3326      	adds	r3, #38	; 0x26
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00a      	beq.n	80041fa <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80041e4:	78fa      	ldrb	r2, [r7, #3]
 80041e6:	6879      	ldr	r1, [r7, #4]
 80041e8:	4613      	mov	r3, r2
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	1a9b      	subs	r3, r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	3326      	adds	r3, #38	; 0x26
 80041f4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d129      	bne.n	800424e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80041fa:	78fa      	ldrb	r2, [r7, #3]
 80041fc:	6879      	ldr	r1, [r7, #4]
 80041fe:	4613      	mov	r3, r2
 8004200:	011b      	lsls	r3, r3, #4
 8004202:	1a9b      	subs	r3, r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	440b      	add	r3, r1
 8004208:	3344      	adds	r3, #68	; 0x44
 800420a:	2200      	movs	r2, #0
 800420c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	799b      	ldrb	r3, [r3, #6]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <HCD_HC_IN_IRQHandler+0xc2a>
 8004216:	78fa      	ldrb	r2, [r7, #3]
 8004218:	6879      	ldr	r1, [r7, #4]
 800421a:	4613      	mov	r3, r2
 800421c:	011b      	lsls	r3, r3, #4
 800421e:	1a9b      	subs	r3, r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	440b      	add	r3, r1
 8004224:	331b      	adds	r3, #27
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d110      	bne.n	800424e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800422c:	78fa      	ldrb	r2, [r7, #3]
 800422e:	6879      	ldr	r1, [r7, #4]
 8004230:	4613      	mov	r3, r2
 8004232:	011b      	lsls	r3, r3, #4
 8004234:	1a9b      	subs	r3, r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	440b      	add	r3, r1
 800423a:	334d      	adds	r3, #77	; 0x4d
 800423c:	2204      	movs	r2, #4
 800423e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	78fa      	ldrb	r2, [r7, #3]
 8004246:	4611      	mov	r1, r2
 8004248:	4618      	mov	r0, r3
 800424a:	f005 fa48 	bl	80096de <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800424e:	78fa      	ldrb	r2, [r7, #3]
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	4613      	mov	r3, r2
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	1a9b      	subs	r3, r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	440b      	add	r3, r1
 800425c:	331b      	adds	r3, #27
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d129      	bne.n	80042b8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004264:	78fa      	ldrb	r2, [r7, #3]
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	4613      	mov	r3, r2
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	1a9b      	subs	r3, r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	331b      	adds	r3, #27
 8004274:	2200      	movs	r2, #0
 8004276:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004278:	78fb      	ldrb	r3, [r7, #3]
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	4413      	add	r3, r2
 8004280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	78fa      	ldrb	r2, [r7, #3]
 8004288:	0151      	lsls	r1, r2, #5
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	440a      	add	r2, r1
 800428e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004296:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004298:	78fb      	ldrb	r3, [r7, #3]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	78fa      	ldrb	r2, [r7, #3]
 80042a8:	0151      	lsls	r1, r2, #5
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	440a      	add	r2, r1
 80042ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042b2:	f043 0320 	orr.w	r3, r3, #32
 80042b6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80042b8:	78fb      	ldrb	r3, [r7, #3]
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c4:	461a      	mov	r2, r3
 80042c6:	2310      	movs	r3, #16
 80042c8:	6093      	str	r3, [r2, #8]
 80042ca:	e000      	b.n	80042ce <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80042cc:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80042ce:	3718      	adds	r7, #24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	460b      	mov	r3, r1
 80042de:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	78fa      	ldrb	r2, [r7, #3]
 80042f0:	4611      	mov	r1, r2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f004 fc79 	bl	8008bea <USB_ReadChInterrupts>
 80042f8:	4603      	mov	r3, r0
 80042fa:	f003 0304 	and.w	r3, r3, #4
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d11b      	bne.n	800433a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004302:	78fb      	ldrb	r3, [r7, #3]
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	4413      	add	r3, r2
 800430a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800430e:	461a      	mov	r2, r3
 8004310:	2304      	movs	r3, #4
 8004312:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004314:	78fa      	ldrb	r2, [r7, #3]
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	4613      	mov	r3, r2
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	1a9b      	subs	r3, r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	334d      	adds	r3, #77	; 0x4d
 8004324:	2207      	movs	r2, #7
 8004326:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	78fa      	ldrb	r2, [r7, #3]
 800432e:	4611      	mov	r1, r2
 8004330:	4618      	mov	r0, r3
 8004332:	f005 f9d4 	bl	80096de <USB_HC_Halt>
 8004336:	f000 bc6f 	b.w	8004c18 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	78fa      	ldrb	r2, [r7, #3]
 8004340:	4611      	mov	r1, r2
 8004342:	4618      	mov	r0, r3
 8004344:	f004 fc51 	bl	8008bea <USB_ReadChInterrupts>
 8004348:	4603      	mov	r3, r0
 800434a:	f003 0320 	and.w	r3, r3, #32
 800434e:	2b20      	cmp	r3, #32
 8004350:	f040 8082 	bne.w	8004458 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004354:	78fb      	ldrb	r3, [r7, #3]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	4413      	add	r3, r2
 800435c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004360:	461a      	mov	r2, r3
 8004362:	2320      	movs	r3, #32
 8004364:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004366:	78fa      	ldrb	r2, [r7, #3]
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	4613      	mov	r3, r2
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	1a9b      	subs	r3, r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	440b      	add	r3, r1
 8004374:	3319      	adds	r3, #25
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d124      	bne.n	80043c6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800437c:	78fa      	ldrb	r2, [r7, #3]
 800437e:	6879      	ldr	r1, [r7, #4]
 8004380:	4613      	mov	r3, r2
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	1a9b      	subs	r3, r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	440b      	add	r3, r1
 800438a:	3319      	adds	r3, #25
 800438c:	2200      	movs	r2, #0
 800438e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004390:	78fa      	ldrb	r2, [r7, #3]
 8004392:	6879      	ldr	r1, [r7, #4]
 8004394:	4613      	mov	r3, r2
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	1a9b      	subs	r3, r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	440b      	add	r3, r1
 800439e:	334c      	adds	r3, #76	; 0x4c
 80043a0:	2202      	movs	r2, #2
 80043a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80043a4:	78fa      	ldrb	r2, [r7, #3]
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	4613      	mov	r3, r2
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	1a9b      	subs	r3, r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	334d      	adds	r3, #77	; 0x4d
 80043b4:	2203      	movs	r2, #3
 80043b6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	78fa      	ldrb	r2, [r7, #3]
 80043be:	4611      	mov	r1, r2
 80043c0:	4618      	mov	r0, r3
 80043c2:	f005 f98c 	bl	80096de <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80043c6:	78fa      	ldrb	r2, [r7, #3]
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	4613      	mov	r3, r2
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	1a9b      	subs	r3, r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	440b      	add	r3, r1
 80043d4:	331a      	adds	r3, #26
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	f040 841d 	bne.w	8004c18 <HCD_HC_OUT_IRQHandler+0x944>
 80043de:	78fa      	ldrb	r2, [r7, #3]
 80043e0:	6879      	ldr	r1, [r7, #4]
 80043e2:	4613      	mov	r3, r2
 80043e4:	011b      	lsls	r3, r3, #4
 80043e6:	1a9b      	subs	r3, r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	440b      	add	r3, r1
 80043ec:	331b      	adds	r3, #27
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f040 8411 	bne.w	8004c18 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80043f6:	78fa      	ldrb	r2, [r7, #3]
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	4613      	mov	r3, r2
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	1a9b      	subs	r3, r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	440b      	add	r3, r1
 8004404:	3326      	adds	r3, #38	; 0x26
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d009      	beq.n	8004420 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800440c:	78fa      	ldrb	r2, [r7, #3]
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	4613      	mov	r3, r2
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	1a9b      	subs	r3, r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	331b      	adds	r3, #27
 800441c:	2201      	movs	r2, #1
 800441e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004420:	78fa      	ldrb	r2, [r7, #3]
 8004422:	6879      	ldr	r1, [r7, #4]
 8004424:	4613      	mov	r3, r2
 8004426:	011b      	lsls	r3, r3, #4
 8004428:	1a9b      	subs	r3, r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	334d      	adds	r3, #77	; 0x4d
 8004430:	2203      	movs	r2, #3
 8004432:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	78fa      	ldrb	r2, [r7, #3]
 800443a:	4611      	mov	r1, r2
 800443c:	4618      	mov	r0, r3
 800443e:	f005 f94e 	bl	80096de <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004442:	78fa      	ldrb	r2, [r7, #3]
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	4613      	mov	r3, r2
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	1a9b      	subs	r3, r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	440b      	add	r3, r1
 8004450:	3344      	adds	r3, #68	; 0x44
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	e3df      	b.n	8004c18 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	78fa      	ldrb	r2, [r7, #3]
 800445e:	4611      	mov	r1, r2
 8004460:	4618      	mov	r0, r3
 8004462:	f004 fbc2 	bl	8008bea <USB_ReadChInterrupts>
 8004466:	4603      	mov	r3, r0
 8004468:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800446c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004470:	d111      	bne.n	8004496 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004472:	78fb      	ldrb	r3, [r7, #3]
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	4413      	add	r3, r2
 800447a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800447e:	461a      	mov	r2, r3
 8004480:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004484:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	78fa      	ldrb	r2, [r7, #3]
 800448c:	4611      	mov	r1, r2
 800448e:	4618      	mov	r0, r3
 8004490:	f005 f925 	bl	80096de <USB_HC_Halt>
 8004494:	e3c0      	b.n	8004c18 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	78fa      	ldrb	r2, [r7, #3]
 800449c:	4611      	mov	r1, r2
 800449e:	4618      	mov	r0, r3
 80044a0:	f004 fba3 	bl	8008bea <USB_ReadChInterrupts>
 80044a4:	4603      	mov	r3, r0
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d168      	bne.n	8004580 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80044ae:	78fa      	ldrb	r2, [r7, #3]
 80044b0:	6879      	ldr	r1, [r7, #4]
 80044b2:	4613      	mov	r3, r2
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	1a9b      	subs	r3, r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	440b      	add	r3, r1
 80044bc:	3344      	adds	r3, #68	; 0x44
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	78fa      	ldrb	r2, [r7, #3]
 80044c8:	4611      	mov	r1, r2
 80044ca:	4618      	mov	r0, r3
 80044cc:	f004 fb8d 	bl	8008bea <USB_ReadChInterrupts>
 80044d0:	4603      	mov	r3, r0
 80044d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d6:	2b40      	cmp	r3, #64	; 0x40
 80044d8:	d112      	bne.n	8004500 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80044da:	78fa      	ldrb	r2, [r7, #3]
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	4613      	mov	r3, r2
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	1a9b      	subs	r3, r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	440b      	add	r3, r1
 80044e8:	3319      	adds	r3, #25
 80044ea:	2201      	movs	r2, #1
 80044ec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80044ee:	78fb      	ldrb	r3, [r7, #3]
 80044f0:	015a      	lsls	r2, r3, #5
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044fa:	461a      	mov	r2, r3
 80044fc:	2340      	movs	r3, #64	; 0x40
 80044fe:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004500:	78fa      	ldrb	r2, [r7, #3]
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	4613      	mov	r3, r2
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	1a9b      	subs	r3, r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	440b      	add	r3, r1
 800450e:	331b      	adds	r3, #27
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d019      	beq.n	800454a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004516:	78fa      	ldrb	r2, [r7, #3]
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	4613      	mov	r3, r2
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	1a9b      	subs	r3, r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	440b      	add	r3, r1
 8004524:	331b      	adds	r3, #27
 8004526:	2200      	movs	r2, #0
 8004528:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800452a:	78fb      	ldrb	r3, [r7, #3]
 800452c:	015a      	lsls	r2, r3, #5
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	4413      	add	r3, r2
 8004532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	78fa      	ldrb	r2, [r7, #3]
 800453a:	0151      	lsls	r1, r2, #5
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	440a      	add	r2, r1
 8004540:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004548:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800454a:	78fb      	ldrb	r3, [r7, #3]
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	4413      	add	r3, r2
 8004552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004556:	461a      	mov	r2, r3
 8004558:	2301      	movs	r3, #1
 800455a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800455c:	78fa      	ldrb	r2, [r7, #3]
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	4613      	mov	r3, r2
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	1a9b      	subs	r3, r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	334d      	adds	r3, #77	; 0x4d
 800456c:	2201      	movs	r2, #1
 800456e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	78fa      	ldrb	r2, [r7, #3]
 8004576:	4611      	mov	r1, r2
 8004578:	4618      	mov	r0, r3
 800457a:	f005 f8b0 	bl	80096de <USB_HC_Halt>
 800457e:	e34b      	b.n	8004c18 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	78fa      	ldrb	r2, [r7, #3]
 8004586:	4611      	mov	r1, r2
 8004588:	4618      	mov	r0, r3
 800458a:	f004 fb2e 	bl	8008bea <USB_ReadChInterrupts>
 800458e:	4603      	mov	r3, r0
 8004590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004594:	2b40      	cmp	r3, #64	; 0x40
 8004596:	d139      	bne.n	800460c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004598:	78fa      	ldrb	r2, [r7, #3]
 800459a:	6879      	ldr	r1, [r7, #4]
 800459c:	4613      	mov	r3, r2
 800459e:	011b      	lsls	r3, r3, #4
 80045a0:	1a9b      	subs	r3, r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	440b      	add	r3, r1
 80045a6:	334d      	adds	r3, #77	; 0x4d
 80045a8:	2205      	movs	r2, #5
 80045aa:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80045ac:	78fa      	ldrb	r2, [r7, #3]
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	4613      	mov	r3, r2
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	1a9b      	subs	r3, r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	440b      	add	r3, r1
 80045ba:	331a      	adds	r3, #26
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d109      	bne.n	80045d6 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80045c2:	78fa      	ldrb	r2, [r7, #3]
 80045c4:	6879      	ldr	r1, [r7, #4]
 80045c6:	4613      	mov	r3, r2
 80045c8:	011b      	lsls	r3, r3, #4
 80045ca:	1a9b      	subs	r3, r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	440b      	add	r3, r1
 80045d0:	3319      	adds	r3, #25
 80045d2:	2201      	movs	r2, #1
 80045d4:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80045d6:	78fa      	ldrb	r2, [r7, #3]
 80045d8:	6879      	ldr	r1, [r7, #4]
 80045da:	4613      	mov	r3, r2
 80045dc:	011b      	lsls	r3, r3, #4
 80045de:	1a9b      	subs	r3, r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	440b      	add	r3, r1
 80045e4:	3344      	adds	r3, #68	; 0x44
 80045e6:	2200      	movs	r2, #0
 80045e8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	78fa      	ldrb	r2, [r7, #3]
 80045f0:	4611      	mov	r1, r2
 80045f2:	4618      	mov	r0, r3
 80045f4:	f005 f873 	bl	80096de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80045f8:	78fb      	ldrb	r3, [r7, #3]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004604:	461a      	mov	r2, r3
 8004606:	2340      	movs	r3, #64	; 0x40
 8004608:	6093      	str	r3, [r2, #8]
 800460a:	e305      	b.n	8004c18 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	78fa      	ldrb	r2, [r7, #3]
 8004612:	4611      	mov	r1, r2
 8004614:	4618      	mov	r0, r3
 8004616:	f004 fae8 	bl	8008bea <USB_ReadChInterrupts>
 800461a:	4603      	mov	r3, r0
 800461c:	f003 0308 	and.w	r3, r3, #8
 8004620:	2b08      	cmp	r3, #8
 8004622:	d11a      	bne.n	800465a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004624:	78fb      	ldrb	r3, [r7, #3]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	4413      	add	r3, r2
 800462c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004630:	461a      	mov	r2, r3
 8004632:	2308      	movs	r3, #8
 8004634:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004636:	78fa      	ldrb	r2, [r7, #3]
 8004638:	6879      	ldr	r1, [r7, #4]
 800463a:	4613      	mov	r3, r2
 800463c:	011b      	lsls	r3, r3, #4
 800463e:	1a9b      	subs	r3, r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	440b      	add	r3, r1
 8004644:	334d      	adds	r3, #77	; 0x4d
 8004646:	2206      	movs	r2, #6
 8004648:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	78fa      	ldrb	r2, [r7, #3]
 8004650:	4611      	mov	r1, r2
 8004652:	4618      	mov	r0, r3
 8004654:	f005 f843 	bl	80096de <USB_HC_Halt>
 8004658:	e2de      	b.n	8004c18 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	78fa      	ldrb	r2, [r7, #3]
 8004660:	4611      	mov	r1, r2
 8004662:	4618      	mov	r0, r3
 8004664:	f004 fac1 	bl	8008bea <USB_ReadChInterrupts>
 8004668:	4603      	mov	r3, r0
 800466a:	f003 0310 	and.w	r3, r3, #16
 800466e:	2b10      	cmp	r3, #16
 8004670:	d144      	bne.n	80046fc <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004672:	78fa      	ldrb	r2, [r7, #3]
 8004674:	6879      	ldr	r1, [r7, #4]
 8004676:	4613      	mov	r3, r2
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	1a9b      	subs	r3, r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	440b      	add	r3, r1
 8004680:	3344      	adds	r3, #68	; 0x44
 8004682:	2200      	movs	r2, #0
 8004684:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004686:	78fa      	ldrb	r2, [r7, #3]
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	4613      	mov	r3, r2
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	1a9b      	subs	r3, r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	440b      	add	r3, r1
 8004694:	334d      	adds	r3, #77	; 0x4d
 8004696:	2204      	movs	r2, #4
 8004698:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800469a:	78fa      	ldrb	r2, [r7, #3]
 800469c:	6879      	ldr	r1, [r7, #4]
 800469e:	4613      	mov	r3, r2
 80046a0:	011b      	lsls	r3, r3, #4
 80046a2:	1a9b      	subs	r3, r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	440b      	add	r3, r1
 80046a8:	3319      	adds	r3, #25
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d114      	bne.n	80046da <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80046b0:	78fa      	ldrb	r2, [r7, #3]
 80046b2:	6879      	ldr	r1, [r7, #4]
 80046b4:	4613      	mov	r3, r2
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	1a9b      	subs	r3, r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	440b      	add	r3, r1
 80046be:	3318      	adds	r3, #24
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d109      	bne.n	80046da <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80046c6:	78fa      	ldrb	r2, [r7, #3]
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	4613      	mov	r3, r2
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	1a9b      	subs	r3, r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	440b      	add	r3, r1
 80046d4:	3319      	adds	r3, #25
 80046d6:	2201      	movs	r2, #1
 80046d8:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	78fa      	ldrb	r2, [r7, #3]
 80046e0:	4611      	mov	r1, r2
 80046e2:	4618      	mov	r0, r3
 80046e4:	f004 fffb 	bl	80096de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80046e8:	78fb      	ldrb	r3, [r7, #3]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f4:	461a      	mov	r2, r3
 80046f6:	2310      	movs	r3, #16
 80046f8:	6093      	str	r3, [r2, #8]
 80046fa:	e28d      	b.n	8004c18 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	78fa      	ldrb	r2, [r7, #3]
 8004702:	4611      	mov	r1, r2
 8004704:	4618      	mov	r0, r3
 8004706:	f004 fa70 	bl	8008bea <USB_ReadChInterrupts>
 800470a:	4603      	mov	r3, r0
 800470c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004710:	2b80      	cmp	r3, #128	; 0x80
 8004712:	d169      	bne.n	80047e8 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	799b      	ldrb	r3, [r3, #6]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d111      	bne.n	8004740 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800471c:	78fa      	ldrb	r2, [r7, #3]
 800471e:	6879      	ldr	r1, [r7, #4]
 8004720:	4613      	mov	r3, r2
 8004722:	011b      	lsls	r3, r3, #4
 8004724:	1a9b      	subs	r3, r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	440b      	add	r3, r1
 800472a:	334d      	adds	r3, #77	; 0x4d
 800472c:	2207      	movs	r2, #7
 800472e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	78fa      	ldrb	r2, [r7, #3]
 8004736:	4611      	mov	r1, r2
 8004738:	4618      	mov	r0, r3
 800473a:	f004 ffd0 	bl	80096de <USB_HC_Halt>
 800473e:	e049      	b.n	80047d4 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004740:	78fa      	ldrb	r2, [r7, #3]
 8004742:	6879      	ldr	r1, [r7, #4]
 8004744:	4613      	mov	r3, r2
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	1a9b      	subs	r3, r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	3344      	adds	r3, #68	; 0x44
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	1c59      	adds	r1, r3, #1
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	4613      	mov	r3, r2
 8004758:	011b      	lsls	r3, r3, #4
 800475a:	1a9b      	subs	r3, r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4403      	add	r3, r0
 8004760:	3344      	adds	r3, #68	; 0x44
 8004762:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004764:	78fa      	ldrb	r2, [r7, #3]
 8004766:	6879      	ldr	r1, [r7, #4]
 8004768:	4613      	mov	r3, r2
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	1a9b      	subs	r3, r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	440b      	add	r3, r1
 8004772:	3344      	adds	r3, #68	; 0x44
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b02      	cmp	r3, #2
 8004778:	d922      	bls.n	80047c0 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800477a:	78fa      	ldrb	r2, [r7, #3]
 800477c:	6879      	ldr	r1, [r7, #4]
 800477e:	4613      	mov	r3, r2
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	1a9b      	subs	r3, r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	440b      	add	r3, r1
 8004788:	3344      	adds	r3, #68	; 0x44
 800478a:	2200      	movs	r2, #0
 800478c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800478e:	78fa      	ldrb	r2, [r7, #3]
 8004790:	6879      	ldr	r1, [r7, #4]
 8004792:	4613      	mov	r3, r2
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	1a9b      	subs	r3, r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	440b      	add	r3, r1
 800479c:	334c      	adds	r3, #76	; 0x4c
 800479e:	2204      	movs	r2, #4
 80047a0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80047a2:	78fa      	ldrb	r2, [r7, #3]
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	4613      	mov	r3, r2
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	1a9b      	subs	r3, r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	440b      	add	r3, r1
 80047b0:	334c      	adds	r3, #76	; 0x4c
 80047b2:	781a      	ldrb	r2, [r3, #0]
 80047b4:	78fb      	ldrb	r3, [r7, #3]
 80047b6:	4619      	mov	r1, r3
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f006 fad7 	bl	800ad6c <HAL_HCD_HC_NotifyURBChange_Callback>
 80047be:	e009      	b.n	80047d4 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80047c0:	78fa      	ldrb	r2, [r7, #3]
 80047c2:	6879      	ldr	r1, [r7, #4]
 80047c4:	4613      	mov	r3, r2
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	1a9b      	subs	r3, r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	440b      	add	r3, r1
 80047ce:	334c      	adds	r3, #76	; 0x4c
 80047d0:	2202      	movs	r2, #2
 80047d2:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80047d4:	78fb      	ldrb	r3, [r7, #3]
 80047d6:	015a      	lsls	r2, r3, #5
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	4413      	add	r3, r2
 80047dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e0:	461a      	mov	r2, r3
 80047e2:	2380      	movs	r3, #128	; 0x80
 80047e4:	6093      	str	r3, [r2, #8]
 80047e6:	e217      	b.n	8004c18 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	78fa      	ldrb	r2, [r7, #3]
 80047ee:	4611      	mov	r1, r2
 80047f0:	4618      	mov	r0, r3
 80047f2:	f004 f9fa 	bl	8008bea <USB_ReadChInterrupts>
 80047f6:	4603      	mov	r3, r0
 80047f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004800:	d11b      	bne.n	800483a <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004802:	78fa      	ldrb	r2, [r7, #3]
 8004804:	6879      	ldr	r1, [r7, #4]
 8004806:	4613      	mov	r3, r2
 8004808:	011b      	lsls	r3, r3, #4
 800480a:	1a9b      	subs	r3, r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	440b      	add	r3, r1
 8004810:	334d      	adds	r3, #77	; 0x4d
 8004812:	2209      	movs	r2, #9
 8004814:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	78fa      	ldrb	r2, [r7, #3]
 800481c:	4611      	mov	r1, r2
 800481e:	4618      	mov	r0, r3
 8004820:	f004 ff5d 	bl	80096de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004824:	78fb      	ldrb	r3, [r7, #3]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	4413      	add	r3, r2
 800482c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004830:	461a      	mov	r2, r3
 8004832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004836:	6093      	str	r3, [r2, #8]
 8004838:	e1ee      	b.n	8004c18 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	78fa      	ldrb	r2, [r7, #3]
 8004840:	4611      	mov	r1, r2
 8004842:	4618      	mov	r0, r3
 8004844:	f004 f9d1 	bl	8008bea <USB_ReadChInterrupts>
 8004848:	4603      	mov	r3, r0
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b02      	cmp	r3, #2
 8004850:	f040 81df 	bne.w	8004c12 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004854:	78fb      	ldrb	r3, [r7, #3]
 8004856:	015a      	lsls	r2, r3, #5
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	4413      	add	r3, r2
 800485c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004860:	461a      	mov	r2, r3
 8004862:	2302      	movs	r3, #2
 8004864:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004866:	78fa      	ldrb	r2, [r7, #3]
 8004868:	6879      	ldr	r1, [r7, #4]
 800486a:	4613      	mov	r3, r2
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	1a9b      	subs	r3, r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	440b      	add	r3, r1
 8004874:	334d      	adds	r3, #77	; 0x4d
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	2b01      	cmp	r3, #1
 800487a:	f040 8093 	bne.w	80049a4 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800487e:	78fa      	ldrb	r2, [r7, #3]
 8004880:	6879      	ldr	r1, [r7, #4]
 8004882:	4613      	mov	r3, r2
 8004884:	011b      	lsls	r3, r3, #4
 8004886:	1a9b      	subs	r3, r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	440b      	add	r3, r1
 800488c:	334d      	adds	r3, #77	; 0x4d
 800488e:	2202      	movs	r2, #2
 8004890:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004892:	78fa      	ldrb	r2, [r7, #3]
 8004894:	6879      	ldr	r1, [r7, #4]
 8004896:	4613      	mov	r3, r2
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	1a9b      	subs	r3, r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	440b      	add	r3, r1
 80048a0:	334c      	adds	r3, #76	; 0x4c
 80048a2:	2201      	movs	r2, #1
 80048a4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80048a6:	78fa      	ldrb	r2, [r7, #3]
 80048a8:	6879      	ldr	r1, [r7, #4]
 80048aa:	4613      	mov	r3, r2
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	1a9b      	subs	r3, r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	440b      	add	r3, r1
 80048b4:	3326      	adds	r3, #38	; 0x26
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d00b      	beq.n	80048d4 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80048bc:	78fa      	ldrb	r2, [r7, #3]
 80048be:	6879      	ldr	r1, [r7, #4]
 80048c0:	4613      	mov	r3, r2
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	1a9b      	subs	r3, r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	440b      	add	r3, r1
 80048ca:	3326      	adds	r3, #38	; 0x26
 80048cc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80048ce:	2b03      	cmp	r3, #3
 80048d0:	f040 8190 	bne.w	8004bf4 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	799b      	ldrb	r3, [r3, #6]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d115      	bne.n	8004908 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80048dc:	78fa      	ldrb	r2, [r7, #3]
 80048de:	6879      	ldr	r1, [r7, #4]
 80048e0:	4613      	mov	r3, r2
 80048e2:	011b      	lsls	r3, r3, #4
 80048e4:	1a9b      	subs	r3, r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	440b      	add	r3, r1
 80048ea:	333d      	adds	r3, #61	; 0x3d
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	78fa      	ldrb	r2, [r7, #3]
 80048f0:	f083 0301 	eor.w	r3, r3, #1
 80048f4:	b2d8      	uxtb	r0, r3
 80048f6:	6879      	ldr	r1, [r7, #4]
 80048f8:	4613      	mov	r3, r2
 80048fa:	011b      	lsls	r3, r3, #4
 80048fc:	1a9b      	subs	r3, r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	440b      	add	r3, r1
 8004902:	333d      	adds	r3, #61	; 0x3d
 8004904:	4602      	mov	r2, r0
 8004906:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	799b      	ldrb	r3, [r3, #6]
 800490c:	2b01      	cmp	r3, #1
 800490e:	f040 8171 	bne.w	8004bf4 <HCD_HC_OUT_IRQHandler+0x920>
 8004912:	78fa      	ldrb	r2, [r7, #3]
 8004914:	6879      	ldr	r1, [r7, #4]
 8004916:	4613      	mov	r3, r2
 8004918:	011b      	lsls	r3, r3, #4
 800491a:	1a9b      	subs	r3, r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	440b      	add	r3, r1
 8004920:	3334      	adds	r3, #52	; 0x34
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 8165 	beq.w	8004bf4 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800492a:	78fa      	ldrb	r2, [r7, #3]
 800492c:	6879      	ldr	r1, [r7, #4]
 800492e:	4613      	mov	r3, r2
 8004930:	011b      	lsls	r3, r3, #4
 8004932:	1a9b      	subs	r3, r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	440b      	add	r3, r1
 8004938:	3334      	adds	r3, #52	; 0x34
 800493a:	6819      	ldr	r1, [r3, #0]
 800493c:	78fa      	ldrb	r2, [r7, #3]
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	4613      	mov	r3, r2
 8004942:	011b      	lsls	r3, r3, #4
 8004944:	1a9b      	subs	r3, r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4403      	add	r3, r0
 800494a:	3328      	adds	r3, #40	; 0x28
 800494c:	881b      	ldrh	r3, [r3, #0]
 800494e:	440b      	add	r3, r1
 8004950:	1e59      	subs	r1, r3, #1
 8004952:	78fa      	ldrb	r2, [r7, #3]
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	4613      	mov	r3, r2
 8004958:	011b      	lsls	r3, r3, #4
 800495a:	1a9b      	subs	r3, r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4403      	add	r3, r0
 8004960:	3328      	adds	r3, #40	; 0x28
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	fbb1 f3f3 	udiv	r3, r1, r3
 8004968:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 813f 	beq.w	8004bf4 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004976:	78fa      	ldrb	r2, [r7, #3]
 8004978:	6879      	ldr	r1, [r7, #4]
 800497a:	4613      	mov	r3, r2
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	1a9b      	subs	r3, r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	440b      	add	r3, r1
 8004984:	333d      	adds	r3, #61	; 0x3d
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	78fa      	ldrb	r2, [r7, #3]
 800498a:	f083 0301 	eor.w	r3, r3, #1
 800498e:	b2d8      	uxtb	r0, r3
 8004990:	6879      	ldr	r1, [r7, #4]
 8004992:	4613      	mov	r3, r2
 8004994:	011b      	lsls	r3, r3, #4
 8004996:	1a9b      	subs	r3, r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	440b      	add	r3, r1
 800499c:	333d      	adds	r3, #61	; 0x3d
 800499e:	4602      	mov	r2, r0
 80049a0:	701a      	strb	r2, [r3, #0]
 80049a2:	e127      	b.n	8004bf4 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80049a4:	78fa      	ldrb	r2, [r7, #3]
 80049a6:	6879      	ldr	r1, [r7, #4]
 80049a8:	4613      	mov	r3, r2
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	1a9b      	subs	r3, r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	440b      	add	r3, r1
 80049b2:	334d      	adds	r3, #77	; 0x4d
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	2b03      	cmp	r3, #3
 80049b8:	d120      	bne.n	80049fc <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80049ba:	78fa      	ldrb	r2, [r7, #3]
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	4613      	mov	r3, r2
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	1a9b      	subs	r3, r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	440b      	add	r3, r1
 80049c8:	334d      	adds	r3, #77	; 0x4d
 80049ca:	2202      	movs	r2, #2
 80049cc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80049ce:	78fa      	ldrb	r2, [r7, #3]
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	4613      	mov	r3, r2
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	1a9b      	subs	r3, r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	440b      	add	r3, r1
 80049dc:	331b      	adds	r3, #27
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	f040 8107 	bne.w	8004bf4 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80049e6:	78fa      	ldrb	r2, [r7, #3]
 80049e8:	6879      	ldr	r1, [r7, #4]
 80049ea:	4613      	mov	r3, r2
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	1a9b      	subs	r3, r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	440b      	add	r3, r1
 80049f4:	334c      	adds	r3, #76	; 0x4c
 80049f6:	2202      	movs	r2, #2
 80049f8:	701a      	strb	r2, [r3, #0]
 80049fa:	e0fb      	b.n	8004bf4 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80049fc:	78fa      	ldrb	r2, [r7, #3]
 80049fe:	6879      	ldr	r1, [r7, #4]
 8004a00:	4613      	mov	r3, r2
 8004a02:	011b      	lsls	r3, r3, #4
 8004a04:	1a9b      	subs	r3, r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	440b      	add	r3, r1
 8004a0a:	334d      	adds	r3, #77	; 0x4d
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d13a      	bne.n	8004a88 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a12:	78fa      	ldrb	r2, [r7, #3]
 8004a14:	6879      	ldr	r1, [r7, #4]
 8004a16:	4613      	mov	r3, r2
 8004a18:	011b      	lsls	r3, r3, #4
 8004a1a:	1a9b      	subs	r3, r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	440b      	add	r3, r1
 8004a20:	334d      	adds	r3, #77	; 0x4d
 8004a22:	2202      	movs	r2, #2
 8004a24:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004a26:	78fa      	ldrb	r2, [r7, #3]
 8004a28:	6879      	ldr	r1, [r7, #4]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	011b      	lsls	r3, r3, #4
 8004a2e:	1a9b      	subs	r3, r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	440b      	add	r3, r1
 8004a34:	334c      	adds	r3, #76	; 0x4c
 8004a36:	2202      	movs	r2, #2
 8004a38:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004a3a:	78fa      	ldrb	r2, [r7, #3]
 8004a3c:	6879      	ldr	r1, [r7, #4]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	011b      	lsls	r3, r3, #4
 8004a42:	1a9b      	subs	r3, r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	440b      	add	r3, r1
 8004a48:	331b      	adds	r3, #27
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	f040 80d1 	bne.w	8004bf4 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004a52:	78fa      	ldrb	r2, [r7, #3]
 8004a54:	6879      	ldr	r1, [r7, #4]
 8004a56:	4613      	mov	r3, r2
 8004a58:	011b      	lsls	r3, r3, #4
 8004a5a:	1a9b      	subs	r3, r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	440b      	add	r3, r1
 8004a60:	331b      	adds	r3, #27
 8004a62:	2200      	movs	r2, #0
 8004a64:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004a66:	78fb      	ldrb	r3, [r7, #3]
 8004a68:	015a      	lsls	r2, r3, #5
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	78fa      	ldrb	r2, [r7, #3]
 8004a76:	0151      	lsls	r1, r2, #5
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	440a      	add	r2, r1
 8004a7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a84:	6053      	str	r3, [r2, #4]
 8004a86:	e0b5      	b.n	8004bf4 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004a88:	78fa      	ldrb	r2, [r7, #3]
 8004a8a:	6879      	ldr	r1, [r7, #4]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	011b      	lsls	r3, r3, #4
 8004a90:	1a9b      	subs	r3, r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	440b      	add	r3, r1
 8004a96:	334d      	adds	r3, #77	; 0x4d
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	2b05      	cmp	r3, #5
 8004a9c:	d114      	bne.n	8004ac8 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a9e:	78fa      	ldrb	r2, [r7, #3]
 8004aa0:	6879      	ldr	r1, [r7, #4]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	1a9b      	subs	r3, r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	440b      	add	r3, r1
 8004aac:	334d      	adds	r3, #77	; 0x4d
 8004aae:	2202      	movs	r2, #2
 8004ab0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004ab2:	78fa      	ldrb	r2, [r7, #3]
 8004ab4:	6879      	ldr	r1, [r7, #4]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	011b      	lsls	r3, r3, #4
 8004aba:	1a9b      	subs	r3, r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	440b      	add	r3, r1
 8004ac0:	334c      	adds	r3, #76	; 0x4c
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	701a      	strb	r2, [r3, #0]
 8004ac6:	e095      	b.n	8004bf4 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004ac8:	78fa      	ldrb	r2, [r7, #3]
 8004aca:	6879      	ldr	r1, [r7, #4]
 8004acc:	4613      	mov	r3, r2
 8004ace:	011b      	lsls	r3, r3, #4
 8004ad0:	1a9b      	subs	r3, r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	334d      	adds	r3, #77	; 0x4d
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	2b06      	cmp	r3, #6
 8004adc:	d114      	bne.n	8004b08 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ade:	78fa      	ldrb	r2, [r7, #3]
 8004ae0:	6879      	ldr	r1, [r7, #4]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	011b      	lsls	r3, r3, #4
 8004ae6:	1a9b      	subs	r3, r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	440b      	add	r3, r1
 8004aec:	334d      	adds	r3, #77	; 0x4d
 8004aee:	2202      	movs	r2, #2
 8004af0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004af2:	78fa      	ldrb	r2, [r7, #3]
 8004af4:	6879      	ldr	r1, [r7, #4]
 8004af6:	4613      	mov	r3, r2
 8004af8:	011b      	lsls	r3, r3, #4
 8004afa:	1a9b      	subs	r3, r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	440b      	add	r3, r1
 8004b00:	334c      	adds	r3, #76	; 0x4c
 8004b02:	2205      	movs	r2, #5
 8004b04:	701a      	strb	r2, [r3, #0]
 8004b06:	e075      	b.n	8004bf4 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004b08:	78fa      	ldrb	r2, [r7, #3]
 8004b0a:	6879      	ldr	r1, [r7, #4]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	011b      	lsls	r3, r3, #4
 8004b10:	1a9b      	subs	r3, r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	440b      	add	r3, r1
 8004b16:	334d      	adds	r3, #77	; 0x4d
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	2b07      	cmp	r3, #7
 8004b1c:	d00a      	beq.n	8004b34 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004b1e:	78fa      	ldrb	r2, [r7, #3]
 8004b20:	6879      	ldr	r1, [r7, #4]
 8004b22:	4613      	mov	r3, r2
 8004b24:	011b      	lsls	r3, r3, #4
 8004b26:	1a9b      	subs	r3, r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	440b      	add	r3, r1
 8004b2c:	334d      	adds	r3, #77	; 0x4d
 8004b2e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004b30:	2b09      	cmp	r3, #9
 8004b32:	d170      	bne.n	8004c16 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b34:	78fa      	ldrb	r2, [r7, #3]
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	011b      	lsls	r3, r3, #4
 8004b3c:	1a9b      	subs	r3, r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	440b      	add	r3, r1
 8004b42:	334d      	adds	r3, #77	; 0x4d
 8004b44:	2202      	movs	r2, #2
 8004b46:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004b48:	78fa      	ldrb	r2, [r7, #3]
 8004b4a:	6879      	ldr	r1, [r7, #4]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	011b      	lsls	r3, r3, #4
 8004b50:	1a9b      	subs	r3, r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	440b      	add	r3, r1
 8004b56:	3344      	adds	r3, #68	; 0x44
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	1c59      	adds	r1, r3, #1
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	011b      	lsls	r3, r3, #4
 8004b62:	1a9b      	subs	r3, r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4403      	add	r3, r0
 8004b68:	3344      	adds	r3, #68	; 0x44
 8004b6a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b6c:	78fa      	ldrb	r2, [r7, #3]
 8004b6e:	6879      	ldr	r1, [r7, #4]
 8004b70:	4613      	mov	r3, r2
 8004b72:	011b      	lsls	r3, r3, #4
 8004b74:	1a9b      	subs	r3, r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	440b      	add	r3, r1
 8004b7a:	3344      	adds	r3, #68	; 0x44
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d914      	bls.n	8004bac <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004b82:	78fa      	ldrb	r2, [r7, #3]
 8004b84:	6879      	ldr	r1, [r7, #4]
 8004b86:	4613      	mov	r3, r2
 8004b88:	011b      	lsls	r3, r3, #4
 8004b8a:	1a9b      	subs	r3, r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	440b      	add	r3, r1
 8004b90:	3344      	adds	r3, #68	; 0x44
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004b96:	78fa      	ldrb	r2, [r7, #3]
 8004b98:	6879      	ldr	r1, [r7, #4]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	011b      	lsls	r3, r3, #4
 8004b9e:	1a9b      	subs	r3, r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	440b      	add	r3, r1
 8004ba4:	334c      	adds	r3, #76	; 0x4c
 8004ba6:	2204      	movs	r2, #4
 8004ba8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004baa:	e022      	b.n	8004bf2 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004bac:	78fa      	ldrb	r2, [r7, #3]
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	011b      	lsls	r3, r3, #4
 8004bb4:	1a9b      	subs	r3, r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	334c      	adds	r3, #76	; 0x4c
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004bc0:	78fb      	ldrb	r3, [r7, #3]
 8004bc2:	015a      	lsls	r2, r3, #5
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004bd6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004bde:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004be0:	78fb      	ldrb	r3, [r7, #3]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bec:	461a      	mov	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004bf2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004bf4:	78fa      	ldrb	r2, [r7, #3]
 8004bf6:	6879      	ldr	r1, [r7, #4]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	011b      	lsls	r3, r3, #4
 8004bfc:	1a9b      	subs	r3, r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	440b      	add	r3, r1
 8004c02:	334c      	adds	r3, #76	; 0x4c
 8004c04:	781a      	ldrb	r2, [r3, #0]
 8004c06:	78fb      	ldrb	r3, [r7, #3]
 8004c08:	4619      	mov	r1, r3
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f006 f8ae 	bl	800ad6c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004c10:	e002      	b.n	8004c18 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004c12:	bf00      	nop
 8004c14:	e000      	b.n	8004c18 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8004c16:	bf00      	nop
  }
}
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b08a      	sub	sp, #40	; 0x28
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	0c5b      	lsrs	r3, r3, #17
 8004c44:	f003 030f 	and.w	r3, r3, #15
 8004c48:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	091b      	lsrs	r3, r3, #4
 8004c4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c52:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d004      	beq.n	8004c64 <HCD_RXQLVL_IRQHandler+0x46>
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2b05      	cmp	r3, #5
 8004c5e:	f000 80b6 	beq.w	8004dce <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004c62:	e0b7      	b.n	8004dd4 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f000 80b3 	beq.w	8004dd2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	4613      	mov	r3, r2
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	1a9b      	subs	r3, r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	440b      	add	r3, r1
 8004c7a:	332c      	adds	r3, #44	; 0x2c
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f000 80a7 	beq.w	8004dd2 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	011b      	lsls	r3, r3, #4
 8004c8c:	1a9b      	subs	r3, r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	440b      	add	r3, r1
 8004c92:	3338      	adds	r3, #56	; 0x38
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	18d1      	adds	r1, r2, r3
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	011b      	lsls	r3, r3, #4
 8004ca2:	1a9b      	subs	r3, r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4403      	add	r3, r0
 8004ca8:	3334      	adds	r3, #52	; 0x34
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4299      	cmp	r1, r3
 8004cae:	f200 8083 	bhi.w	8004db8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6818      	ldr	r0, [r3, #0]
 8004cb6:	6879      	ldr	r1, [r7, #4]
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	011b      	lsls	r3, r3, #4
 8004cbe:	1a9b      	subs	r3, r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	440b      	add	r3, r1
 8004cc4:	332c      	adds	r3, #44	; 0x2c
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	b292      	uxth	r2, r2
 8004ccc:	4619      	mov	r1, r3
 8004cce:	f003 ff21 	bl	8008b14 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	1a9b      	subs	r3, r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	440b      	add	r3, r1
 8004ce0:	332c      	adds	r3, #44	; 0x2c
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	18d1      	adds	r1, r2, r3
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	4613      	mov	r3, r2
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	1a9b      	subs	r3, r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4403      	add	r3, r0
 8004cf6:	332c      	adds	r3, #44	; 0x2c
 8004cf8:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004cfa:	6879      	ldr	r1, [r7, #4]
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	011b      	lsls	r3, r3, #4
 8004d02:	1a9b      	subs	r3, r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	440b      	add	r3, r1
 8004d08:	3338      	adds	r3, #56	; 0x38
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	18d1      	adds	r1, r2, r3
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	4613      	mov	r3, r2
 8004d16:	011b      	lsls	r3, r3, #4
 8004d18:	1a9b      	subs	r3, r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4403      	add	r3, r0
 8004d1e:	3338      	adds	r3, #56	; 0x38
 8004d20:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	6a3b      	ldr	r3, [r7, #32]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	0cdb      	lsrs	r3, r3, #19
 8004d32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d36:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004d38:	6879      	ldr	r1, [r7, #4]
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	011b      	lsls	r3, r3, #4
 8004d40:	1a9b      	subs	r3, r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	440b      	add	r3, r1
 8004d46:	3328      	adds	r3, #40	; 0x28
 8004d48:	881b      	ldrh	r3, [r3, #0]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d13f      	bne.n	8004dd2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d03c      	beq.n	8004dd2 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d6e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d76:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	015a      	lsls	r2, r3, #5
 8004d7c:	6a3b      	ldr	r3, [r7, #32]
 8004d7e:	4413      	add	r3, r2
 8004d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d84:	461a      	mov	r2, r3
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004d8a:	6879      	ldr	r1, [r7, #4]
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	011b      	lsls	r3, r3, #4
 8004d92:	1a9b      	subs	r3, r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	440b      	add	r3, r1
 8004d98:	333c      	adds	r3, #60	; 0x3c
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	f083 0301 	eor.w	r3, r3, #1
 8004da0:	b2d8      	uxtb	r0, r3
 8004da2:	6879      	ldr	r1, [r7, #4]
 8004da4:	69ba      	ldr	r2, [r7, #24]
 8004da6:	4613      	mov	r3, r2
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	1a9b      	subs	r3, r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	440b      	add	r3, r1
 8004db0:	333c      	adds	r3, #60	; 0x3c
 8004db2:	4602      	mov	r2, r0
 8004db4:	701a      	strb	r2, [r3, #0]
      break;
 8004db6:	e00c      	b.n	8004dd2 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004db8:	6879      	ldr	r1, [r7, #4]
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	1a9b      	subs	r3, r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	440b      	add	r3, r1
 8004dc6:	334c      	adds	r3, #76	; 0x4c
 8004dc8:	2204      	movs	r2, #4
 8004dca:	701a      	strb	r2, [r3, #0]
      break;
 8004dcc:	e001      	b.n	8004dd2 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004dce:	bf00      	nop
 8004dd0:	e000      	b.n	8004dd4 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004dd2:	bf00      	nop
  }
}
 8004dd4:	bf00      	nop
 8004dd6:	3728      	adds	r7, #40	; 0x28
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004e08:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d10b      	bne.n	8004e2c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d102      	bne.n	8004e24 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f005 ff88 	bl	800ad34 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f043 0302 	orr.w	r3, r3, #2
 8004e2a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f003 0308 	and.w	r3, r3, #8
 8004e32:	2b08      	cmp	r3, #8
 8004e34:	d132      	bne.n	8004e9c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	f043 0308 	orr.w	r3, r3, #8
 8004e3c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f003 0304 	and.w	r3, r3, #4
 8004e44:	2b04      	cmp	r3, #4
 8004e46:	d126      	bne.n	8004e96 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	7a5b      	ldrb	r3, [r3, #9]
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d113      	bne.n	8004e78 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004e56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e5a:	d106      	bne.n	8004e6a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2102      	movs	r1, #2
 8004e62:	4618      	mov	r0, r3
 8004e64:	f003 ffe6 	bl	8008e34 <USB_InitFSLSPClkSel>
 8004e68:	e011      	b.n	8004e8e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2101      	movs	r1, #1
 8004e70:	4618      	mov	r0, r3
 8004e72:	f003 ffdf 	bl	8008e34 <USB_InitFSLSPClkSel>
 8004e76:	e00a      	b.n	8004e8e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	79db      	ldrb	r3, [r3, #7]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d106      	bne.n	8004e8e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e86:	461a      	mov	r2, r3
 8004e88:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004e8c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f005 ff7a 	bl	800ad88 <HAL_HCD_PortEnabled_Callback>
 8004e94:	e002      	b.n	8004e9c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f005 ff84 	bl	800ada4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f003 0320 	and.w	r3, r3, #32
 8004ea2:	2b20      	cmp	r3, #32
 8004ea4:	d103      	bne.n	8004eae <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	f043 0320 	orr.w	r3, r3, #32
 8004eac:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	6013      	str	r3, [r2, #0]
}
 8004eba:	bf00      	nop
 8004ebc:	3718      	adds	r7, #24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
	...

08004ec4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e12b      	b.n	800512e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d106      	bne.n	8004ef0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7fc f804 	bl	8000ef8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2224      	movs	r2, #36	; 0x24
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 0201 	bic.w	r2, r2, #1
 8004f06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f28:	f001 f964 	bl	80061f4 <HAL_RCC_GetPCLK1Freq>
 8004f2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	4a81      	ldr	r2, [pc, #516]	; (8005138 <HAL_I2C_Init+0x274>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d807      	bhi.n	8004f48 <HAL_I2C_Init+0x84>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4a80      	ldr	r2, [pc, #512]	; (800513c <HAL_I2C_Init+0x278>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	bf94      	ite	ls
 8004f40:	2301      	movls	r3, #1
 8004f42:	2300      	movhi	r3, #0
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	e006      	b.n	8004f56 <HAL_I2C_Init+0x92>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4a7d      	ldr	r2, [pc, #500]	; (8005140 <HAL_I2C_Init+0x27c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	bf94      	ite	ls
 8004f50:	2301      	movls	r3, #1
 8004f52:	2300      	movhi	r3, #0
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e0e7      	b.n	800512e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4a78      	ldr	r2, [pc, #480]	; (8005144 <HAL_I2C_Init+0x280>)
 8004f62:	fba2 2303 	umull	r2, r3, r2, r3
 8004f66:	0c9b      	lsrs	r3, r3, #18
 8004f68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	4a6a      	ldr	r2, [pc, #424]	; (8005138 <HAL_I2C_Init+0x274>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d802      	bhi.n	8004f98 <HAL_I2C_Init+0xd4>
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	3301      	adds	r3, #1
 8004f96:	e009      	b.n	8004fac <HAL_I2C_Init+0xe8>
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f9e:	fb02 f303 	mul.w	r3, r2, r3
 8004fa2:	4a69      	ldr	r2, [pc, #420]	; (8005148 <HAL_I2C_Init+0x284>)
 8004fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa8:	099b      	lsrs	r3, r3, #6
 8004faa:	3301      	adds	r3, #1
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	6812      	ldr	r2, [r2, #0]
 8004fb0:	430b      	orrs	r3, r1
 8004fb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004fbe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	495c      	ldr	r1, [pc, #368]	; (8005138 <HAL_I2C_Init+0x274>)
 8004fc8:	428b      	cmp	r3, r1
 8004fca:	d819      	bhi.n	8005000 <HAL_I2C_Init+0x13c>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	1e59      	subs	r1, r3, #1
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	005b      	lsls	r3, r3, #1
 8004fd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fda:	1c59      	adds	r1, r3, #1
 8004fdc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004fe0:	400b      	ands	r3, r1
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <HAL_I2C_Init+0x138>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	1e59      	subs	r1, r3, #1
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	005b      	lsls	r3, r3, #1
 8004ff0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ffa:	e051      	b.n	80050a0 <HAL_I2C_Init+0x1dc>
 8004ffc:	2304      	movs	r3, #4
 8004ffe:	e04f      	b.n	80050a0 <HAL_I2C_Init+0x1dc>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d111      	bne.n	800502c <HAL_I2C_Init+0x168>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	1e58      	subs	r0, r3, #1
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6859      	ldr	r1, [r3, #4]
 8005010:	460b      	mov	r3, r1
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	440b      	add	r3, r1
 8005016:	fbb0 f3f3 	udiv	r3, r0, r3
 800501a:	3301      	adds	r3, #1
 800501c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005020:	2b00      	cmp	r3, #0
 8005022:	bf0c      	ite	eq
 8005024:	2301      	moveq	r3, #1
 8005026:	2300      	movne	r3, #0
 8005028:	b2db      	uxtb	r3, r3
 800502a:	e012      	b.n	8005052 <HAL_I2C_Init+0x18e>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	1e58      	subs	r0, r3, #1
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6859      	ldr	r1, [r3, #4]
 8005034:	460b      	mov	r3, r1
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	440b      	add	r3, r1
 800503a:	0099      	lsls	r1, r3, #2
 800503c:	440b      	add	r3, r1
 800503e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005042:	3301      	adds	r3, #1
 8005044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005048:	2b00      	cmp	r3, #0
 800504a:	bf0c      	ite	eq
 800504c:	2301      	moveq	r3, #1
 800504e:	2300      	movne	r3, #0
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <HAL_I2C_Init+0x196>
 8005056:	2301      	movs	r3, #1
 8005058:	e022      	b.n	80050a0 <HAL_I2C_Init+0x1dc>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10e      	bne.n	8005080 <HAL_I2C_Init+0x1bc>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	1e58      	subs	r0, r3, #1
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6859      	ldr	r1, [r3, #4]
 800506a:	460b      	mov	r3, r1
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	440b      	add	r3, r1
 8005070:	fbb0 f3f3 	udiv	r3, r0, r3
 8005074:	3301      	adds	r3, #1
 8005076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800507a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800507e:	e00f      	b.n	80050a0 <HAL_I2C_Init+0x1dc>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	1e58      	subs	r0, r3, #1
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6859      	ldr	r1, [r3, #4]
 8005088:	460b      	mov	r3, r1
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	440b      	add	r3, r1
 800508e:	0099      	lsls	r1, r3, #2
 8005090:	440b      	add	r3, r1
 8005092:	fbb0 f3f3 	udiv	r3, r0, r3
 8005096:	3301      	adds	r3, #1
 8005098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800509c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	6809      	ldr	r1, [r1, #0]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	69da      	ldr	r2, [r3, #28]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	431a      	orrs	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80050ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	6911      	ldr	r1, [r2, #16]
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	68d2      	ldr	r2, [r2, #12]
 80050da:	4311      	orrs	r1, r2
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6812      	ldr	r2, [r2, #0]
 80050e0:	430b      	orrs	r3, r1
 80050e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	695a      	ldr	r2, [r3, #20]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	431a      	orrs	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0201 	orr.w	r2, r2, #1
 800510e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2220      	movs	r2, #32
 800511a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	000186a0 	.word	0x000186a0
 800513c:	001e847f 	.word	0x001e847f
 8005140:	003d08ff 	.word	0x003d08ff
 8005144:	431bde83 	.word	0x431bde83
 8005148:	10624dd3 	.word	0x10624dd3

0800514c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b20      	cmp	r3, #32
 8005160:	d129      	bne.n	80051b6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2224      	movs	r2, #36	; 0x24
 8005166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0201 	bic.w	r2, r2, #1
 8005178:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0210 	bic.w	r2, r2, #16
 8005188:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0201 	orr.w	r2, r2, #1
 80051a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80051b2:	2300      	movs	r3, #0
 80051b4:	e000      	b.n	80051b8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80051b6:	2302      	movs	r3, #2
  }
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80051ce:	2300      	movs	r3, #0
 80051d0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b20      	cmp	r3, #32
 80051dc:	d12a      	bne.n	8005234 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2224      	movs	r2, #36	; 0x24
 80051e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 0201 	bic.w	r2, r2, #1
 80051f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80051fe:	89fb      	ldrh	r3, [r7, #14]
 8005200:	f023 030f 	bic.w	r3, r3, #15
 8005204:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	b29a      	uxth	r2, r3
 800520a:	89fb      	ldrh	r3, [r7, #14]
 800520c:	4313      	orrs	r3, r2
 800520e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	89fa      	ldrh	r2, [r7, #14]
 8005216:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f042 0201 	orr.w	r2, r2, #1
 8005226:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2220      	movs	r2, #32
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005230:	2300      	movs	r3, #0
 8005232:	e000      	b.n	8005236 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005234:	2302      	movs	r3, #2
  }
}
 8005236:	4618      	mov	r0, r3
 8005238:	3714      	adds	r7, #20
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
	...

08005244 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e0bf      	b.n	80053d6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d106      	bne.n	8005270 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7fb feae 	bl	8000fcc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2202      	movs	r2, #2
 8005274:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	699a      	ldr	r2, [r3, #24]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005286:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6999      	ldr	r1, [r3, #24]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800529c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6899      	ldr	r1, [r3, #8]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	4b4a      	ldr	r3, [pc, #296]	; (80053e0 <HAL_LTDC_Init+0x19c>)
 80052b8:	400b      	ands	r3, r1
 80052ba:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	041b      	lsls	r3, r3, #16
 80052c2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6899      	ldr	r1, [r3, #8]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	699a      	ldr	r2, [r3, #24]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	431a      	orrs	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68d9      	ldr	r1, [r3, #12]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	4b3e      	ldr	r3, [pc, #248]	; (80053e0 <HAL_LTDC_Init+0x19c>)
 80052e6:	400b      	ands	r3, r1
 80052e8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	041b      	lsls	r3, r3, #16
 80052f0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68d9      	ldr	r1, [r3, #12]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a1a      	ldr	r2, [r3, #32]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	431a      	orrs	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6919      	ldr	r1, [r3, #16]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	4b33      	ldr	r3, [pc, #204]	; (80053e0 <HAL_LTDC_Init+0x19c>)
 8005314:	400b      	ands	r3, r1
 8005316:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	041b      	lsls	r3, r3, #16
 800531e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6919      	ldr	r1, [r3, #16]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	431a      	orrs	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6959      	ldr	r1, [r3, #20]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	4b27      	ldr	r3, [pc, #156]	; (80053e0 <HAL_LTDC_Init+0x19c>)
 8005342:	400b      	ands	r3, r1
 8005344:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534a:	041b      	lsls	r3, r3, #16
 800534c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6959      	ldr	r1, [r3, #20]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	431a      	orrs	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800536a:	021b      	lsls	r3, r3, #8
 800536c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005374:	041b      	lsls	r3, r3, #16
 8005376:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005386:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4313      	orrs	r3, r2
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800539a:	431a      	orrs	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	430a      	orrs	r2, r1
 80053a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f042 0206 	orr.w	r2, r2, #6
 80053b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699a      	ldr	r2, [r3, #24]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0201 	orr.w	r2, r2, #1
 80053c2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	f000f800 	.word	0xf000f800

080053e4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053fa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f003 0304 	and.w	r3, r3, #4
 8005402:	2b00      	cmp	r3, #0
 8005404:	d023      	beq.n	800544e <HAL_LTDC_IRQHandler+0x6a>
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b00      	cmp	r3, #0
 800540e:	d01e      	beq.n	800544e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0204 	bic.w	r2, r2, #4
 800541e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2204      	movs	r2, #4
 8005426:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800542e:	f043 0201 	orr.w	r2, r3, #1
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2204      	movs	r2, #4
 800543c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 f86f 	bl	800552c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d023      	beq.n	80054a0 <HAL_LTDC_IRQHandler+0xbc>
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d01e      	beq.n	80054a0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f022 0202 	bic.w	r2, r2, #2
 8005470:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2202      	movs	r2, #2
 8005478:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005480:	f043 0202 	orr.w	r2, r3, #2
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2204      	movs	r2, #4
 800548e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f846 	bl	800552c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d01b      	beq.n	80054e2 <HAL_LTDC_IRQHandler+0xfe>
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d016      	beq.n	80054e2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 0201 	bic.w	r2, r2, #1
 80054c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2201      	movs	r2, #1
 80054ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 f82f 	bl	8005540 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f003 0308 	and.w	r3, r3, #8
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d01b      	beq.n	8005524 <HAL_LTDC_IRQHandler+0x140>
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	f003 0308 	and.w	r3, r3, #8
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d016      	beq.n	8005524 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 0208 	bic.w	r2, r2, #8
 8005504:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2208      	movs	r2, #8
 800550c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f818 	bl	8005554 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005524:	bf00      	nop
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005568:	b5b0      	push	{r4, r5, r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800557a:	2b01      	cmp	r3, #1
 800557c:	d101      	bne.n	8005582 <HAL_LTDC_ConfigLayer+0x1a>
 800557e:	2302      	movs	r3, #2
 8005580:	e02c      	b.n	80055dc <HAL_LTDC_ConfigLayer+0x74>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2202      	movs	r2, #2
 800558e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2134      	movs	r1, #52	; 0x34
 8005598:	fb01 f303 	mul.w	r3, r1, r3
 800559c:	4413      	add	r3, r2
 800559e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	4614      	mov	r4, r2
 80055a6:	461d      	mov	r5, r3
 80055a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055b4:	682b      	ldr	r3, [r5, #0]
 80055b6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	68b9      	ldr	r1, [r7, #8]
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 f811 	bl	80055e4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2201      	movs	r2, #1
 80055c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bdb0      	pop	{r4, r5, r7, pc}

080055e4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b089      	sub	sp, #36	; 0x24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	0c1b      	lsrs	r3, r3, #16
 80055fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005600:	4413      	add	r3, r2
 8005602:	041b      	lsls	r3, r3, #16
 8005604:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	461a      	mov	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	01db      	lsls	r3, r3, #7
 8005610:	4413      	add	r3, r2
 8005612:	3384      	adds	r3, #132	; 0x84
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	6812      	ldr	r2, [r2, #0]
 800561a:	4611      	mov	r1, r2
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	01d2      	lsls	r2, r2, #7
 8005620:	440a      	add	r2, r1
 8005622:	3284      	adds	r2, #132	; 0x84
 8005624:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005628:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	0c1b      	lsrs	r3, r3, #16
 8005636:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800563a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800563c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4619      	mov	r1, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	01db      	lsls	r3, r3, #7
 8005648:	440b      	add	r3, r1
 800564a:	3384      	adds	r3, #132	; 0x84
 800564c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005652:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	68da      	ldr	r2, [r3, #12]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005662:	4413      	add	r3, r2
 8005664:	041b      	lsls	r3, r3, #16
 8005666:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	461a      	mov	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	01db      	lsls	r3, r3, #7
 8005672:	4413      	add	r3, r2
 8005674:	3384      	adds	r3, #132	; 0x84
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	6812      	ldr	r2, [r2, #0]
 800567c:	4611      	mov	r1, r2
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	01d2      	lsls	r2, r2, #7
 8005682:	440a      	add	r2, r1
 8005684:	3284      	adds	r2, #132	; 0x84
 8005686:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800568a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	689a      	ldr	r2, [r3, #8]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800569a:	4413      	add	r3, r2
 800569c:	1c5a      	adds	r2, r3, #1
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4619      	mov	r1, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	01db      	lsls	r3, r3, #7
 80056a8:	440b      	add	r3, r1
 80056aa:	3384      	adds	r3, #132	; 0x84
 80056ac:	4619      	mov	r1, r3
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	461a      	mov	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	01db      	lsls	r3, r3, #7
 80056be:	4413      	add	r3, r2
 80056c0:	3384      	adds	r3, #132	; 0x84
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	6812      	ldr	r2, [r2, #0]
 80056c8:	4611      	mov	r1, r2
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	01d2      	lsls	r2, r2, #7
 80056ce:	440a      	add	r2, r1
 80056d0:	3284      	adds	r2, #132	; 0x84
 80056d2:	f023 0307 	bic.w	r3, r3, #7
 80056d6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	461a      	mov	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	01db      	lsls	r3, r3, #7
 80056e2:	4413      	add	r3, r2
 80056e4:	3384      	adds	r3, #132	; 0x84
 80056e6:	461a      	mov	r2, r3
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80056f4:	021b      	lsls	r3, r3, #8
 80056f6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80056fe:	041b      	lsls	r3, r3, #16
 8005700:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	061b      	lsls	r3, r3, #24
 8005708:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	461a      	mov	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	01db      	lsls	r3, r3, #7
 8005714:	4413      	add	r3, r2
 8005716:	3384      	adds	r3, #132	; 0x84
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	461a      	mov	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	01db      	lsls	r3, r3, #7
 8005724:	4413      	add	r3, r2
 8005726:	3384      	adds	r3, #132	; 0x84
 8005728:	461a      	mov	r2, r3
 800572a:	2300      	movs	r3, #0
 800572c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005734:	461a      	mov	r2, r3
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	431a      	orrs	r2, r3
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	431a      	orrs	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4619      	mov	r1, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	01db      	lsls	r3, r3, #7
 8005748:	440b      	add	r3, r1
 800574a:	3384      	adds	r3, #132	; 0x84
 800574c:	4619      	mov	r1, r3
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	4313      	orrs	r3, r2
 8005752:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	461a      	mov	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	01db      	lsls	r3, r3, #7
 800575e:	4413      	add	r3, r2
 8005760:	3384      	adds	r3, #132	; 0x84
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	6812      	ldr	r2, [r2, #0]
 8005768:	4611      	mov	r1, r2
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	01d2      	lsls	r2, r2, #7
 800576e:	440a      	add	r2, r1
 8005770:	3284      	adds	r2, #132	; 0x84
 8005772:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005776:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	461a      	mov	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	01db      	lsls	r3, r3, #7
 8005782:	4413      	add	r3, r2
 8005784:	3384      	adds	r3, #132	; 0x84
 8005786:	461a      	mov	r2, r3
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	01db      	lsls	r3, r3, #7
 8005798:	4413      	add	r3, r2
 800579a:	3384      	adds	r3, #132	; 0x84
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	6812      	ldr	r2, [r2, #0]
 80057a2:	4611      	mov	r1, r2
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	01d2      	lsls	r2, r2, #7
 80057a8:	440a      	add	r2, r1
 80057aa:	3284      	adds	r2, #132	; 0x84
 80057ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80057b0:	f023 0307 	bic.w	r3, r3, #7
 80057b4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	69da      	ldr	r2, [r3, #28]
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	68f9      	ldr	r1, [r7, #12]
 80057c0:	6809      	ldr	r1, [r1, #0]
 80057c2:	4608      	mov	r0, r1
 80057c4:	6879      	ldr	r1, [r7, #4]
 80057c6:	01c9      	lsls	r1, r1, #7
 80057c8:	4401      	add	r1, r0
 80057ca:	3184      	adds	r1, #132	; 0x84
 80057cc:	4313      	orrs	r3, r2
 80057ce:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	461a      	mov	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	01db      	lsls	r3, r3, #7
 80057da:	4413      	add	r3, r2
 80057dc:	3384      	adds	r3, #132	; 0x84
 80057de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	461a      	mov	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	01db      	lsls	r3, r3, #7
 80057ea:	4413      	add	r3, r2
 80057ec:	3384      	adds	r3, #132	; 0x84
 80057ee:	461a      	mov	r2, r3
 80057f0:	2300      	movs	r3, #0
 80057f2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	461a      	mov	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	01db      	lsls	r3, r3, #7
 80057fe:	4413      	add	r3, r2
 8005800:	3384      	adds	r3, #132	; 0x84
 8005802:	461a      	mov	r2, r3
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005808:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d102      	bne.n	8005818 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005812:	2304      	movs	r3, #4
 8005814:	61fb      	str	r3, [r7, #28]
 8005816:	e01b      	b.n	8005850 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d102      	bne.n	8005826 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005820:	2303      	movs	r3, #3
 8005822:	61fb      	str	r3, [r7, #28]
 8005824:	e014      	b.n	8005850 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	2b04      	cmp	r3, #4
 800582c:	d00b      	beq.n	8005846 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005832:	2b02      	cmp	r3, #2
 8005834:	d007      	beq.n	8005846 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800583a:	2b03      	cmp	r3, #3
 800583c:	d003      	beq.n	8005846 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005842:	2b07      	cmp	r3, #7
 8005844:	d102      	bne.n	800584c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005846:	2302      	movs	r3, #2
 8005848:	61fb      	str	r3, [r7, #28]
 800584a:	e001      	b.n	8005850 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800584c:	2301      	movs	r3, #1
 800584e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	461a      	mov	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	01db      	lsls	r3, r3, #7
 800585a:	4413      	add	r3, r2
 800585c:	3384      	adds	r3, #132	; 0x84
 800585e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	6812      	ldr	r2, [r2, #0]
 8005864:	4611      	mov	r1, r2
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	01d2      	lsls	r2, r2, #7
 800586a:	440a      	add	r2, r1
 800586c:	3284      	adds	r2, #132	; 0x84
 800586e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005872:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005878:	69fa      	ldr	r2, [r7, #28]
 800587a:	fb02 f303 	mul.w	r3, r2, r3
 800587e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	6859      	ldr	r1, [r3, #4]
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	1acb      	subs	r3, r1, r3
 800588a:	69f9      	ldr	r1, [r7, #28]
 800588c:	fb01 f303 	mul.w	r3, r1, r3
 8005890:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005892:	68f9      	ldr	r1, [r7, #12]
 8005894:	6809      	ldr	r1, [r1, #0]
 8005896:	4608      	mov	r0, r1
 8005898:	6879      	ldr	r1, [r7, #4]
 800589a:	01c9      	lsls	r1, r1, #7
 800589c:	4401      	add	r1, r0
 800589e:	3184      	adds	r1, #132	; 0x84
 80058a0:	4313      	orrs	r3, r2
 80058a2:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	461a      	mov	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	01db      	lsls	r3, r3, #7
 80058ae:	4413      	add	r3, r2
 80058b0:	3384      	adds	r3, #132	; 0x84
 80058b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	6812      	ldr	r2, [r2, #0]
 80058b8:	4611      	mov	r1, r2
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	01d2      	lsls	r2, r2, #7
 80058be:	440a      	add	r2, r1
 80058c0:	3284      	adds	r2, #132	; 0x84
 80058c2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80058c6:	f023 0307 	bic.w	r3, r3, #7
 80058ca:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	461a      	mov	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	01db      	lsls	r3, r3, #7
 80058d6:	4413      	add	r3, r2
 80058d8:	3384      	adds	r3, #132	; 0x84
 80058da:	461a      	mov	r2, r3
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	461a      	mov	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	01db      	lsls	r3, r3, #7
 80058ec:	4413      	add	r3, r2
 80058ee:	3384      	adds	r3, #132	; 0x84
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	6812      	ldr	r2, [r2, #0]
 80058f6:	4611      	mov	r1, r2
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	01d2      	lsls	r2, r2, #7
 80058fc:	440a      	add	r2, r1
 80058fe:	3284      	adds	r2, #132	; 0x84
 8005900:	f043 0301 	orr.w	r3, r3, #1
 8005904:	6013      	str	r3, [r2, #0]
}
 8005906:	bf00      	nop
 8005908:	3724      	adds	r7, #36	; 0x24
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
	...

08005914 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e267      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b00      	cmp	r3, #0
 8005930:	d075      	beq.n	8005a1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005932:	4b88      	ldr	r3, [pc, #544]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f003 030c 	and.w	r3, r3, #12
 800593a:	2b04      	cmp	r3, #4
 800593c:	d00c      	beq.n	8005958 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800593e:	4b85      	ldr	r3, [pc, #532]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005946:	2b08      	cmp	r3, #8
 8005948:	d112      	bne.n	8005970 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800594a:	4b82      	ldr	r3, [pc, #520]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005952:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005956:	d10b      	bne.n	8005970 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005958:	4b7e      	ldr	r3, [pc, #504]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d05b      	beq.n	8005a1c <HAL_RCC_OscConfig+0x108>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d157      	bne.n	8005a1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e242      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005978:	d106      	bne.n	8005988 <HAL_RCC_OscConfig+0x74>
 800597a:	4b76      	ldr	r3, [pc, #472]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a75      	ldr	r2, [pc, #468]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005984:	6013      	str	r3, [r2, #0]
 8005986:	e01d      	b.n	80059c4 <HAL_RCC_OscConfig+0xb0>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005990:	d10c      	bne.n	80059ac <HAL_RCC_OscConfig+0x98>
 8005992:	4b70      	ldr	r3, [pc, #448]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a6f      	ldr	r2, [pc, #444]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005998:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	4b6d      	ldr	r3, [pc, #436]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a6c      	ldr	r2, [pc, #432]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 80059a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059a8:	6013      	str	r3, [r2, #0]
 80059aa:	e00b      	b.n	80059c4 <HAL_RCC_OscConfig+0xb0>
 80059ac:	4b69      	ldr	r3, [pc, #420]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a68      	ldr	r2, [pc, #416]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 80059b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059b6:	6013      	str	r3, [r2, #0]
 80059b8:	4b66      	ldr	r3, [pc, #408]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a65      	ldr	r2, [pc, #404]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 80059be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d013      	beq.n	80059f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059cc:	f7fc fad0 	bl	8001f70 <HAL_GetTick>
 80059d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059d2:	e008      	b.n	80059e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059d4:	f7fc facc 	bl	8001f70 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b64      	cmp	r3, #100	; 0x64
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e207      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059e6:	4b5b      	ldr	r3, [pc, #364]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d0f0      	beq.n	80059d4 <HAL_RCC_OscConfig+0xc0>
 80059f2:	e014      	b.n	8005a1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059f4:	f7fc fabc 	bl	8001f70 <HAL_GetTick>
 80059f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059fa:	e008      	b.n	8005a0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059fc:	f7fc fab8 	bl	8001f70 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b64      	cmp	r3, #100	; 0x64
 8005a08:	d901      	bls.n	8005a0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e1f3      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a0e:	4b51      	ldr	r3, [pc, #324]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1f0      	bne.n	80059fc <HAL_RCC_OscConfig+0xe8>
 8005a1a:	e000      	b.n	8005a1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d063      	beq.n	8005af2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a2a:	4b4a      	ldr	r3, [pc, #296]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f003 030c 	and.w	r3, r3, #12
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00b      	beq.n	8005a4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a36:	4b47      	ldr	r3, [pc, #284]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a3e:	2b08      	cmp	r3, #8
 8005a40:	d11c      	bne.n	8005a7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a42:	4b44      	ldr	r3, [pc, #272]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d116      	bne.n	8005a7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a4e:	4b41      	ldr	r3, [pc, #260]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d005      	beq.n	8005a66 <HAL_RCC_OscConfig+0x152>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d001      	beq.n	8005a66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e1c7      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a66:	4b3b      	ldr	r3, [pc, #236]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	4937      	ldr	r1, [pc, #220]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a7a:	e03a      	b.n	8005af2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d020      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a84:	4b34      	ldr	r3, [pc, #208]	; (8005b58 <HAL_RCC_OscConfig+0x244>)
 8005a86:	2201      	movs	r2, #1
 8005a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a8a:	f7fc fa71 	bl	8001f70 <HAL_GetTick>
 8005a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a90:	e008      	b.n	8005aa4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a92:	f7fc fa6d 	bl	8001f70 <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d901      	bls.n	8005aa4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e1a8      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aa4:	4b2b      	ldr	r3, [pc, #172]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0302 	and.w	r3, r3, #2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d0f0      	beq.n	8005a92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ab0:	4b28      	ldr	r3, [pc, #160]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	00db      	lsls	r3, r3, #3
 8005abe:	4925      	ldr	r1, [pc, #148]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	600b      	str	r3, [r1, #0]
 8005ac4:	e015      	b.n	8005af2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ac6:	4b24      	ldr	r3, [pc, #144]	; (8005b58 <HAL_RCC_OscConfig+0x244>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005acc:	f7fc fa50 	bl	8001f70 <HAL_GetTick>
 8005ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ad2:	e008      	b.n	8005ae6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ad4:	f7fc fa4c 	bl	8001f70 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d901      	bls.n	8005ae6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e187      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ae6:	4b1b      	ldr	r3, [pc, #108]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1f0      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0308 	and.w	r3, r3, #8
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d036      	beq.n	8005b6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d016      	beq.n	8005b34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b06:	4b15      	ldr	r3, [pc, #84]	; (8005b5c <HAL_RCC_OscConfig+0x248>)
 8005b08:	2201      	movs	r2, #1
 8005b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b0c:	f7fc fa30 	bl	8001f70 <HAL_GetTick>
 8005b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b14:	f7fc fa2c 	bl	8001f70 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e167      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b26:	4b0b      	ldr	r3, [pc, #44]	; (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d0f0      	beq.n	8005b14 <HAL_RCC_OscConfig+0x200>
 8005b32:	e01b      	b.n	8005b6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b34:	4b09      	ldr	r3, [pc, #36]	; (8005b5c <HAL_RCC_OscConfig+0x248>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b3a:	f7fc fa19 	bl	8001f70 <HAL_GetTick>
 8005b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b40:	e00e      	b.n	8005b60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b42:	f7fc fa15 	bl	8001f70 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d907      	bls.n	8005b60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e150      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
 8005b54:	40023800 	.word	0x40023800
 8005b58:	42470000 	.word	0x42470000
 8005b5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b60:	4b88      	ldr	r3, [pc, #544]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b64:	f003 0302 	and.w	r3, r3, #2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1ea      	bne.n	8005b42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0304 	and.w	r3, r3, #4
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 8097 	beq.w	8005ca8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b7e:	4b81      	ldr	r3, [pc, #516]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10f      	bne.n	8005baa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60bb      	str	r3, [r7, #8]
 8005b8e:	4b7d      	ldr	r3, [pc, #500]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	4a7c      	ldr	r2, [pc, #496]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b98:	6413      	str	r3, [r2, #64]	; 0x40
 8005b9a:	4b7a      	ldr	r3, [pc, #488]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ba2:	60bb      	str	r3, [r7, #8]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005baa:	4b77      	ldr	r3, [pc, #476]	; (8005d88 <HAL_RCC_OscConfig+0x474>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d118      	bne.n	8005be8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bb6:	4b74      	ldr	r3, [pc, #464]	; (8005d88 <HAL_RCC_OscConfig+0x474>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a73      	ldr	r2, [pc, #460]	; (8005d88 <HAL_RCC_OscConfig+0x474>)
 8005bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bc2:	f7fc f9d5 	bl	8001f70 <HAL_GetTick>
 8005bc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bc8:	e008      	b.n	8005bdc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bca:	f7fc f9d1 	bl	8001f70 <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d901      	bls.n	8005bdc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e10c      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bdc:	4b6a      	ldr	r3, [pc, #424]	; (8005d88 <HAL_RCC_OscConfig+0x474>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d0f0      	beq.n	8005bca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d106      	bne.n	8005bfe <HAL_RCC_OscConfig+0x2ea>
 8005bf0:	4b64      	ldr	r3, [pc, #400]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf4:	4a63      	ldr	r2, [pc, #396]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005bf6:	f043 0301 	orr.w	r3, r3, #1
 8005bfa:	6713      	str	r3, [r2, #112]	; 0x70
 8005bfc:	e01c      	b.n	8005c38 <HAL_RCC_OscConfig+0x324>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	2b05      	cmp	r3, #5
 8005c04:	d10c      	bne.n	8005c20 <HAL_RCC_OscConfig+0x30c>
 8005c06:	4b5f      	ldr	r3, [pc, #380]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c0a:	4a5e      	ldr	r2, [pc, #376]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c0c:	f043 0304 	orr.w	r3, r3, #4
 8005c10:	6713      	str	r3, [r2, #112]	; 0x70
 8005c12:	4b5c      	ldr	r3, [pc, #368]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c16:	4a5b      	ldr	r2, [pc, #364]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c18:	f043 0301 	orr.w	r3, r3, #1
 8005c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8005c1e:	e00b      	b.n	8005c38 <HAL_RCC_OscConfig+0x324>
 8005c20:	4b58      	ldr	r3, [pc, #352]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c24:	4a57      	ldr	r2, [pc, #348]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c26:	f023 0301 	bic.w	r3, r3, #1
 8005c2a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c2c:	4b55      	ldr	r3, [pc, #340]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c30:	4a54      	ldr	r2, [pc, #336]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c32:	f023 0304 	bic.w	r3, r3, #4
 8005c36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d015      	beq.n	8005c6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c40:	f7fc f996 	bl	8001f70 <HAL_GetTick>
 8005c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c46:	e00a      	b.n	8005c5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c48:	f7fc f992 	bl	8001f70 <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e0cb      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c5e:	4b49      	ldr	r3, [pc, #292]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d0ee      	beq.n	8005c48 <HAL_RCC_OscConfig+0x334>
 8005c6a:	e014      	b.n	8005c96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c6c:	f7fc f980 	bl	8001f70 <HAL_GetTick>
 8005c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c72:	e00a      	b.n	8005c8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c74:	f7fc f97c 	bl	8001f70 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d901      	bls.n	8005c8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e0b5      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c8a:	4b3e      	ldr	r3, [pc, #248]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1ee      	bne.n	8005c74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c96:	7dfb      	ldrb	r3, [r7, #23]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d105      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c9c:	4b39      	ldr	r3, [pc, #228]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca0:	4a38      	ldr	r2, [pc, #224]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005ca2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ca6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 80a1 	beq.w	8005df4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cb2:	4b34      	ldr	r3, [pc, #208]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f003 030c 	and.w	r3, r3, #12
 8005cba:	2b08      	cmp	r3, #8
 8005cbc:	d05c      	beq.n	8005d78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d141      	bne.n	8005d4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cc6:	4b31      	ldr	r3, [pc, #196]	; (8005d8c <HAL_RCC_OscConfig+0x478>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ccc:	f7fc f950 	bl	8001f70 <HAL_GetTick>
 8005cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cd2:	e008      	b.n	8005ce6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cd4:	f7fc f94c 	bl	8001f70 <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e087      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ce6:	4b27      	ldr	r3, [pc, #156]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1f0      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	69da      	ldr	r2, [r3, #28]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d00:	019b      	lsls	r3, r3, #6
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d08:	085b      	lsrs	r3, r3, #1
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	041b      	lsls	r3, r3, #16
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d14:	061b      	lsls	r3, r3, #24
 8005d16:	491b      	ldr	r1, [pc, #108]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d1c:	4b1b      	ldr	r3, [pc, #108]	; (8005d8c <HAL_RCC_OscConfig+0x478>)
 8005d1e:	2201      	movs	r2, #1
 8005d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d22:	f7fc f925 	bl	8001f70 <HAL_GetTick>
 8005d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d28:	e008      	b.n	8005d3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d2a:	f7fc f921 	bl	8001f70 <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d901      	bls.n	8005d3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e05c      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d3c:	4b11      	ldr	r3, [pc, #68]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d0f0      	beq.n	8005d2a <HAL_RCC_OscConfig+0x416>
 8005d48:	e054      	b.n	8005df4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d4a:	4b10      	ldr	r3, [pc, #64]	; (8005d8c <HAL_RCC_OscConfig+0x478>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d50:	f7fc f90e 	bl	8001f70 <HAL_GetTick>
 8005d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d56:	e008      	b.n	8005d6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d58:	f7fc f90a 	bl	8001f70 <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d901      	bls.n	8005d6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e045      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d6a:	4b06      	ldr	r3, [pc, #24]	; (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1f0      	bne.n	8005d58 <HAL_RCC_OscConfig+0x444>
 8005d76:	e03d      	b.n	8005df4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d107      	bne.n	8005d90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e038      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
 8005d84:	40023800 	.word	0x40023800
 8005d88:	40007000 	.word	0x40007000
 8005d8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d90:	4b1b      	ldr	r3, [pc, #108]	; (8005e00 <HAL_RCC_OscConfig+0x4ec>)
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d028      	beq.n	8005df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d121      	bne.n	8005df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d11a      	bne.n	8005df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005dc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d111      	bne.n	8005df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd6:	085b      	lsrs	r3, r3, #1
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d107      	bne.n	8005df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d001      	beq.n	8005df4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e000      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3718      	adds	r7, #24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	40023800 	.word	0x40023800

08005e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d101      	bne.n	8005e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e0cc      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e18:	4b68      	ldr	r3, [pc, #416]	; (8005fbc <HAL_RCC_ClockConfig+0x1b8>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 030f 	and.w	r3, r3, #15
 8005e20:	683a      	ldr	r2, [r7, #0]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d90c      	bls.n	8005e40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e26:	4b65      	ldr	r3, [pc, #404]	; (8005fbc <HAL_RCC_ClockConfig+0x1b8>)
 8005e28:	683a      	ldr	r2, [r7, #0]
 8005e2a:	b2d2      	uxtb	r2, r2
 8005e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e2e:	4b63      	ldr	r3, [pc, #396]	; (8005fbc <HAL_RCC_ClockConfig+0x1b8>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 030f 	and.w	r3, r3, #15
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d001      	beq.n	8005e40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e0b8      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0302 	and.w	r3, r3, #2
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d020      	beq.n	8005e8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d005      	beq.n	8005e64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e58:	4b59      	ldr	r3, [pc, #356]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	4a58      	ldr	r2, [pc, #352]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0308 	and.w	r3, r3, #8
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d005      	beq.n	8005e7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e70:	4b53      	ldr	r3, [pc, #332]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	4a52      	ldr	r2, [pc, #328]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e7c:	4b50      	ldr	r3, [pc, #320]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	494d      	ldr	r1, [pc, #308]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d044      	beq.n	8005f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d107      	bne.n	8005eb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ea2:	4b47      	ldr	r3, [pc, #284]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d119      	bne.n	8005ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e07f      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d003      	beq.n	8005ec2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	d107      	bne.n	8005ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ec2:	4b3f      	ldr	r3, [pc, #252]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d109      	bne.n	8005ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e06f      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ed2:	4b3b      	ldr	r3, [pc, #236]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e067      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ee2:	4b37      	ldr	r3, [pc, #220]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f023 0203 	bic.w	r2, r3, #3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	4934      	ldr	r1, [pc, #208]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ef4:	f7fc f83c 	bl	8001f70 <HAL_GetTick>
 8005ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005efa:	e00a      	b.n	8005f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005efc:	f7fc f838 	bl	8001f70 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d901      	bls.n	8005f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e04f      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f12:	4b2b      	ldr	r3, [pc, #172]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f003 020c 	and.w	r2, r3, #12
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d1eb      	bne.n	8005efc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f24:	4b25      	ldr	r3, [pc, #148]	; (8005fbc <HAL_RCC_ClockConfig+0x1b8>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 030f 	and.w	r3, r3, #15
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d20c      	bcs.n	8005f4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f32:	4b22      	ldr	r3, [pc, #136]	; (8005fbc <HAL_RCC_ClockConfig+0x1b8>)
 8005f34:	683a      	ldr	r2, [r7, #0]
 8005f36:	b2d2      	uxtb	r2, r2
 8005f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f3a:	4b20      	ldr	r3, [pc, #128]	; (8005fbc <HAL_RCC_ClockConfig+0x1b8>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 030f 	and.w	r3, r3, #15
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d001      	beq.n	8005f4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e032      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0304 	and.w	r3, r3, #4
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d008      	beq.n	8005f6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f58:	4b19      	ldr	r3, [pc, #100]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	4916      	ldr	r1, [pc, #88]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0308 	and.w	r3, r3, #8
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d009      	beq.n	8005f8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f76:	4b12      	ldr	r3, [pc, #72]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	490e      	ldr	r1, [pc, #56]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f8a:	f000 f821 	bl	8005fd0 <HAL_RCC_GetSysClockFreq>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	4b0b      	ldr	r3, [pc, #44]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	091b      	lsrs	r3, r3, #4
 8005f96:	f003 030f 	and.w	r3, r3, #15
 8005f9a:	490a      	ldr	r1, [pc, #40]	; (8005fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005f9c:	5ccb      	ldrb	r3, [r1, r3]
 8005f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005fa2:	4a09      	ldr	r2, [pc, #36]	; (8005fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005fa6:	4b09      	ldr	r3, [pc, #36]	; (8005fcc <HAL_RCC_ClockConfig+0x1c8>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fb ff9c 	bl	8001ee8 <HAL_InitTick>

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	40023c00 	.word	0x40023c00
 8005fc0:	40023800 	.word	0x40023800
 8005fc4:	0800b3dc 	.word	0x0800b3dc
 8005fc8:	20000000 	.word	0x20000000
 8005fcc:	2000003c 	.word	0x2000003c

08005fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fd4:	b094      	sub	sp, #80	; 0x50
 8005fd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	647b      	str	r3, [r7, #68]	; 0x44
 8005fdc:	2300      	movs	r3, #0
 8005fde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fe8:	4b79      	ldr	r3, [pc, #484]	; (80061d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f003 030c 	and.w	r3, r3, #12
 8005ff0:	2b08      	cmp	r3, #8
 8005ff2:	d00d      	beq.n	8006010 <HAL_RCC_GetSysClockFreq+0x40>
 8005ff4:	2b08      	cmp	r3, #8
 8005ff6:	f200 80e1 	bhi.w	80061bc <HAL_RCC_GetSysClockFreq+0x1ec>
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d002      	beq.n	8006004 <HAL_RCC_GetSysClockFreq+0x34>
 8005ffe:	2b04      	cmp	r3, #4
 8006000:	d003      	beq.n	800600a <HAL_RCC_GetSysClockFreq+0x3a>
 8006002:	e0db      	b.n	80061bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006004:	4b73      	ldr	r3, [pc, #460]	; (80061d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006006:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006008:	e0db      	b.n	80061c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800600a:	4b73      	ldr	r3, [pc, #460]	; (80061d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800600c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800600e:	e0d8      	b.n	80061c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006010:	4b6f      	ldr	r3, [pc, #444]	; (80061d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006018:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800601a:	4b6d      	ldr	r3, [pc, #436]	; (80061d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d063      	beq.n	80060ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006026:	4b6a      	ldr	r3, [pc, #424]	; (80061d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	099b      	lsrs	r3, r3, #6
 800602c:	2200      	movs	r2, #0
 800602e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006030:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006038:	633b      	str	r3, [r7, #48]	; 0x30
 800603a:	2300      	movs	r3, #0
 800603c:	637b      	str	r3, [r7, #52]	; 0x34
 800603e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006042:	4622      	mov	r2, r4
 8006044:	462b      	mov	r3, r5
 8006046:	f04f 0000 	mov.w	r0, #0
 800604a:	f04f 0100 	mov.w	r1, #0
 800604e:	0159      	lsls	r1, r3, #5
 8006050:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006054:	0150      	lsls	r0, r2, #5
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	4621      	mov	r1, r4
 800605c:	1a51      	subs	r1, r2, r1
 800605e:	6139      	str	r1, [r7, #16]
 8006060:	4629      	mov	r1, r5
 8006062:	eb63 0301 	sbc.w	r3, r3, r1
 8006066:	617b      	str	r3, [r7, #20]
 8006068:	f04f 0200 	mov.w	r2, #0
 800606c:	f04f 0300 	mov.w	r3, #0
 8006070:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006074:	4659      	mov	r1, fp
 8006076:	018b      	lsls	r3, r1, #6
 8006078:	4651      	mov	r1, sl
 800607a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800607e:	4651      	mov	r1, sl
 8006080:	018a      	lsls	r2, r1, #6
 8006082:	4651      	mov	r1, sl
 8006084:	ebb2 0801 	subs.w	r8, r2, r1
 8006088:	4659      	mov	r1, fp
 800608a:	eb63 0901 	sbc.w	r9, r3, r1
 800608e:	f04f 0200 	mov.w	r2, #0
 8006092:	f04f 0300 	mov.w	r3, #0
 8006096:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800609a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800609e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060a2:	4690      	mov	r8, r2
 80060a4:	4699      	mov	r9, r3
 80060a6:	4623      	mov	r3, r4
 80060a8:	eb18 0303 	adds.w	r3, r8, r3
 80060ac:	60bb      	str	r3, [r7, #8]
 80060ae:	462b      	mov	r3, r5
 80060b0:	eb49 0303 	adc.w	r3, r9, r3
 80060b4:	60fb      	str	r3, [r7, #12]
 80060b6:	f04f 0200 	mov.w	r2, #0
 80060ba:	f04f 0300 	mov.w	r3, #0
 80060be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80060c2:	4629      	mov	r1, r5
 80060c4:	024b      	lsls	r3, r1, #9
 80060c6:	4621      	mov	r1, r4
 80060c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80060cc:	4621      	mov	r1, r4
 80060ce:	024a      	lsls	r2, r1, #9
 80060d0:	4610      	mov	r0, r2
 80060d2:	4619      	mov	r1, r3
 80060d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060d6:	2200      	movs	r2, #0
 80060d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80060da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80060e0:	f7fa f884 	bl	80001ec <__aeabi_uldivmod>
 80060e4:	4602      	mov	r2, r0
 80060e6:	460b      	mov	r3, r1
 80060e8:	4613      	mov	r3, r2
 80060ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060ec:	e058      	b.n	80061a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060ee:	4b38      	ldr	r3, [pc, #224]	; (80061d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	099b      	lsrs	r3, r3, #6
 80060f4:	2200      	movs	r2, #0
 80060f6:	4618      	mov	r0, r3
 80060f8:	4611      	mov	r1, r2
 80060fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80060fe:	623b      	str	r3, [r7, #32]
 8006100:	2300      	movs	r3, #0
 8006102:	627b      	str	r3, [r7, #36]	; 0x24
 8006104:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006108:	4642      	mov	r2, r8
 800610a:	464b      	mov	r3, r9
 800610c:	f04f 0000 	mov.w	r0, #0
 8006110:	f04f 0100 	mov.w	r1, #0
 8006114:	0159      	lsls	r1, r3, #5
 8006116:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800611a:	0150      	lsls	r0, r2, #5
 800611c:	4602      	mov	r2, r0
 800611e:	460b      	mov	r3, r1
 8006120:	4641      	mov	r1, r8
 8006122:	ebb2 0a01 	subs.w	sl, r2, r1
 8006126:	4649      	mov	r1, r9
 8006128:	eb63 0b01 	sbc.w	fp, r3, r1
 800612c:	f04f 0200 	mov.w	r2, #0
 8006130:	f04f 0300 	mov.w	r3, #0
 8006134:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006138:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800613c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006140:	ebb2 040a 	subs.w	r4, r2, sl
 8006144:	eb63 050b 	sbc.w	r5, r3, fp
 8006148:	f04f 0200 	mov.w	r2, #0
 800614c:	f04f 0300 	mov.w	r3, #0
 8006150:	00eb      	lsls	r3, r5, #3
 8006152:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006156:	00e2      	lsls	r2, r4, #3
 8006158:	4614      	mov	r4, r2
 800615a:	461d      	mov	r5, r3
 800615c:	4643      	mov	r3, r8
 800615e:	18e3      	adds	r3, r4, r3
 8006160:	603b      	str	r3, [r7, #0]
 8006162:	464b      	mov	r3, r9
 8006164:	eb45 0303 	adc.w	r3, r5, r3
 8006168:	607b      	str	r3, [r7, #4]
 800616a:	f04f 0200 	mov.w	r2, #0
 800616e:	f04f 0300 	mov.w	r3, #0
 8006172:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006176:	4629      	mov	r1, r5
 8006178:	028b      	lsls	r3, r1, #10
 800617a:	4621      	mov	r1, r4
 800617c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006180:	4621      	mov	r1, r4
 8006182:	028a      	lsls	r2, r1, #10
 8006184:	4610      	mov	r0, r2
 8006186:	4619      	mov	r1, r3
 8006188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800618a:	2200      	movs	r2, #0
 800618c:	61bb      	str	r3, [r7, #24]
 800618e:	61fa      	str	r2, [r7, #28]
 8006190:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006194:	f7fa f82a 	bl	80001ec <__aeabi_uldivmod>
 8006198:	4602      	mov	r2, r0
 800619a:	460b      	mov	r3, r1
 800619c:	4613      	mov	r3, r2
 800619e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061a0:	4b0b      	ldr	r3, [pc, #44]	; (80061d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	0c1b      	lsrs	r3, r3, #16
 80061a6:	f003 0303 	and.w	r3, r3, #3
 80061aa:	3301      	adds	r3, #1
 80061ac:	005b      	lsls	r3, r3, #1
 80061ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80061b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80061ba:	e002      	b.n	80061c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061bc:	4b05      	ldr	r3, [pc, #20]	; (80061d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80061be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80061c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3750      	adds	r7, #80	; 0x50
 80061c8:	46bd      	mov	sp, r7
 80061ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061ce:	bf00      	nop
 80061d0:	40023800 	.word	0x40023800
 80061d4:	00f42400 	.word	0x00f42400
 80061d8:	007a1200 	.word	0x007a1200

080061dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061dc:	b480      	push	{r7}
 80061de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061e0:	4b03      	ldr	r3, [pc, #12]	; (80061f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80061e2:	681b      	ldr	r3, [r3, #0]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	20000000 	.word	0x20000000

080061f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80061f8:	f7ff fff0 	bl	80061dc <HAL_RCC_GetHCLKFreq>
 80061fc:	4602      	mov	r2, r0
 80061fe:	4b05      	ldr	r3, [pc, #20]	; (8006214 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	0a9b      	lsrs	r3, r3, #10
 8006204:	f003 0307 	and.w	r3, r3, #7
 8006208:	4903      	ldr	r1, [pc, #12]	; (8006218 <HAL_RCC_GetPCLK1Freq+0x24>)
 800620a:	5ccb      	ldrb	r3, [r1, r3]
 800620c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006210:	4618      	mov	r0, r3
 8006212:	bd80      	pop	{r7, pc}
 8006214:	40023800 	.word	0x40023800
 8006218:	0800b3ec 	.word	0x0800b3ec

0800621c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006220:	f7ff ffdc 	bl	80061dc <HAL_RCC_GetHCLKFreq>
 8006224:	4602      	mov	r2, r0
 8006226:	4b05      	ldr	r3, [pc, #20]	; (800623c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	0b5b      	lsrs	r3, r3, #13
 800622c:	f003 0307 	and.w	r3, r3, #7
 8006230:	4903      	ldr	r1, [pc, #12]	; (8006240 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006232:	5ccb      	ldrb	r3, [r1, r3]
 8006234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006238:	4618      	mov	r0, r3
 800623a:	bd80      	pop	{r7, pc}
 800623c:	40023800 	.word	0x40023800
 8006240:	0800b3ec 	.word	0x0800b3ec

08006244 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800624c:	2300      	movs	r3, #0
 800624e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006250:	2300      	movs	r3, #0
 8006252:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10b      	bne.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006268:	2b00      	cmp	r3, #0
 800626a:	d105      	bne.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006274:	2b00      	cmp	r3, #0
 8006276:	d075      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006278:	4b91      	ldr	r3, [pc, #580]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800627a:	2200      	movs	r2, #0
 800627c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800627e:	f7fb fe77 	bl	8001f70 <HAL_GetTick>
 8006282:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006284:	e008      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006286:	f7fb fe73 	bl	8001f70 <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	2b02      	cmp	r3, #2
 8006292:	d901      	bls.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e189      	b.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006298:	4b8a      	ldr	r3, [pc, #552]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1f0      	bne.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d009      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	019a      	lsls	r2, r3, #6
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	071b      	lsls	r3, r3, #28
 80062bc:	4981      	ldr	r1, [pc, #516]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0302 	and.w	r3, r3, #2
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d01f      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80062d0:	4b7c      	ldr	r3, [pc, #496]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062d6:	0f1b      	lsrs	r3, r3, #28
 80062d8:	f003 0307 	and.w	r3, r3, #7
 80062dc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	019a      	lsls	r2, r3, #6
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	061b      	lsls	r3, r3, #24
 80062ea:	431a      	orrs	r2, r3
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	071b      	lsls	r3, r3, #28
 80062f0:	4974      	ldr	r1, [pc, #464]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80062f8:	4b72      	ldr	r3, [pc, #456]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062fe:	f023 021f 	bic.w	r2, r3, #31
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	3b01      	subs	r3, #1
 8006308:	496e      	ldr	r1, [pc, #440]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800630a:	4313      	orrs	r3, r2
 800630c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00d      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	019a      	lsls	r2, r3, #6
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	061b      	lsls	r3, r3, #24
 8006328:	431a      	orrs	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	071b      	lsls	r3, r3, #28
 8006330:	4964      	ldr	r1, [pc, #400]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006332:	4313      	orrs	r3, r2
 8006334:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006338:	4b61      	ldr	r3, [pc, #388]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800633a:	2201      	movs	r2, #1
 800633c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800633e:	f7fb fe17 	bl	8001f70 <HAL_GetTick>
 8006342:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006344:	e008      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006346:	f7fb fe13 	bl	8001f70 <HAL_GetTick>
 800634a:	4602      	mov	r2, r0
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	2b02      	cmp	r3, #2
 8006352:	d901      	bls.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e129      	b.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006358:	4b5a      	ldr	r3, [pc, #360]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d0f0      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0304 	and.w	r3, r3, #4
 800636c:	2b00      	cmp	r3, #0
 800636e:	d105      	bne.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006378:	2b00      	cmp	r3, #0
 800637a:	d079      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800637c:	4b52      	ldr	r3, [pc, #328]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800637e:	2200      	movs	r2, #0
 8006380:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006382:	f7fb fdf5 	bl	8001f70 <HAL_GetTick>
 8006386:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006388:	e008      	b.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800638a:	f7fb fdf1 	bl	8001f70 <HAL_GetTick>
 800638e:	4602      	mov	r2, r0
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	2b02      	cmp	r3, #2
 8006396:	d901      	bls.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e107      	b.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800639c:	4b49      	ldr	r3, [pc, #292]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063a8:	d0ef      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0304 	and.w	r3, r3, #4
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d020      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80063b6:	4b43      	ldr	r3, [pc, #268]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063bc:	0f1b      	lsrs	r3, r3, #28
 80063be:	f003 0307 	and.w	r3, r3, #7
 80063c2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	019a      	lsls	r2, r3, #6
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	061b      	lsls	r3, r3, #24
 80063d0:	431a      	orrs	r2, r3
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	071b      	lsls	r3, r3, #28
 80063d6:	493b      	ldr	r1, [pc, #236]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80063de:	4b39      	ldr	r3, [pc, #228]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063e4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a1b      	ldr	r3, [r3, #32]
 80063ec:	3b01      	subs	r3, #1
 80063ee:	021b      	lsls	r3, r3, #8
 80063f0:	4934      	ldr	r1, [pc, #208]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0308 	and.w	r3, r3, #8
 8006400:	2b00      	cmp	r3, #0
 8006402:	d01e      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006404:	4b2f      	ldr	r3, [pc, #188]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800640a:	0e1b      	lsrs	r3, r3, #24
 800640c:	f003 030f 	and.w	r3, r3, #15
 8006410:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	019a      	lsls	r2, r3, #6
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	061b      	lsls	r3, r3, #24
 800641c:	431a      	orrs	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	071b      	lsls	r3, r3, #28
 8006424:	4927      	ldr	r1, [pc, #156]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006426:	4313      	orrs	r3, r2
 8006428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800642c:	4b25      	ldr	r3, [pc, #148]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800642e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006432:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643a:	4922      	ldr	r1, [pc, #136]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800643c:	4313      	orrs	r3, r2
 800643e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006442:	4b21      	ldr	r3, [pc, #132]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006444:	2201      	movs	r2, #1
 8006446:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006448:	f7fb fd92 	bl	8001f70 <HAL_GetTick>
 800644c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800644e:	e008      	b.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006450:	f7fb fd8e 	bl	8001f70 <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	2b02      	cmp	r3, #2
 800645c:	d901      	bls.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e0a4      	b.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006462:	4b18      	ldr	r3, [pc, #96]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800646a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800646e:	d1ef      	bne.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0320 	and.w	r3, r3, #32
 8006478:	2b00      	cmp	r3, #0
 800647a:	f000 808b 	beq.w	8006594 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800647e:	2300      	movs	r3, #0
 8006480:	60fb      	str	r3, [r7, #12]
 8006482:	4b10      	ldr	r3, [pc, #64]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006486:	4a0f      	ldr	r2, [pc, #60]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800648c:	6413      	str	r3, [r2, #64]	; 0x40
 800648e:	4b0d      	ldr	r3, [pc, #52]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006496:	60fb      	str	r3, [r7, #12]
 8006498:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800649a:	4b0c      	ldr	r3, [pc, #48]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a0b      	ldr	r2, [pc, #44]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80064a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064a4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80064a6:	f7fb fd63 	bl	8001f70 <HAL_GetTick>
 80064aa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80064ac:	e010      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80064ae:	f7fb fd5f 	bl	8001f70 <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d909      	bls.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e075      	b.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x368>
 80064c0:	42470068 	.word	0x42470068
 80064c4:	40023800 	.word	0x40023800
 80064c8:	42470070 	.word	0x42470070
 80064cc:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80064d0:	4b38      	ldr	r3, [pc, #224]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d0e8      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064dc:	4b36      	ldr	r3, [pc, #216]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80064de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064e4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d02f      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d028      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80064fa:	4b2f      	ldr	r3, [pc, #188]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80064fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006502:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006504:	4b2d      	ldr	r3, [pc, #180]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006506:	2201      	movs	r2, #1
 8006508:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800650a:	4b2c      	ldr	r3, [pc, #176]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800650c:	2200      	movs	r2, #0
 800650e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006510:	4a29      	ldr	r2, [pc, #164]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006516:	4b28      	ldr	r3, [pc, #160]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b01      	cmp	r3, #1
 8006520:	d114      	bne.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006522:	f7fb fd25 	bl	8001f70 <HAL_GetTick>
 8006526:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006528:	e00a      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800652a:	f7fb fd21 	bl	8001f70 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	f241 3288 	movw	r2, #5000	; 0x1388
 8006538:	4293      	cmp	r3, r2
 800653a:	d901      	bls.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e035      	b.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006540:	4b1d      	ldr	r3, [pc, #116]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006544:	f003 0302 	and.w	r3, r3, #2
 8006548:	2b00      	cmp	r3, #0
 800654a:	d0ee      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006550:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006554:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006558:	d10d      	bne.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800655a:	4b17      	ldr	r3, [pc, #92]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006566:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800656a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800656e:	4912      	ldr	r1, [pc, #72]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006570:	4313      	orrs	r3, r2
 8006572:	608b      	str	r3, [r1, #8]
 8006574:	e005      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006576:	4b10      	ldr	r3, [pc, #64]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	4a0f      	ldr	r2, [pc, #60]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800657c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006580:	6093      	str	r3, [r2, #8]
 8006582:	4b0d      	ldr	r3, [pc, #52]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006584:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800658e:	490a      	ldr	r1, [pc, #40]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006590:	4313      	orrs	r3, r2
 8006592:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0310 	and.w	r3, r3, #16
 800659c:	2b00      	cmp	r3, #0
 800659e:	d004      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80065a6:	4b06      	ldr	r3, [pc, #24]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80065a8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3718      	adds	r7, #24
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	40007000 	.word	0x40007000
 80065b8:	40023800 	.word	0x40023800
 80065bc:	42470e40 	.word	0x42470e40
 80065c0:	424711e0 	.word	0x424711e0

080065c4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d101      	bne.n	80065d8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e025      	b.n	8006624 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d106      	bne.n	80065f2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7fa ffa1 	bl	8001534 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2202      	movs	r2, #2
 80065f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	3304      	adds	r3, #4
 8006602:	4619      	mov	r1, r3
 8006604:	4610      	mov	r0, r2
 8006606:	f002 f84f 	bl	80086a8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6818      	ldr	r0, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	461a      	mov	r2, r3
 8006614:	6839      	ldr	r1, [r7, #0]
 8006616:	f002 f8a4 	bl	8008762 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3708      	adds	r7, #8
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d101      	bne.n	800663e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e07b      	b.n	8006736 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006642:	2b00      	cmp	r3, #0
 8006644:	d108      	bne.n	8006658 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800664e:	d009      	beq.n	8006664 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	61da      	str	r2, [r3, #28]
 8006656:	e005      	b.n	8006664 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006670:	b2db      	uxtb	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d106      	bne.n	8006684 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7fa fdd4 	bl	800122c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2202      	movs	r2, #2
 8006688:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800669a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80066ac:	431a      	orrs	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066b6:	431a      	orrs	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	f003 0302 	and.w	r3, r3, #2
 80066c0:	431a      	orrs	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	431a      	orrs	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066d4:	431a      	orrs	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	69db      	ldr	r3, [r3, #28]
 80066da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066de:	431a      	orrs	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066e8:	ea42 0103 	orr.w	r1, r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	430a      	orrs	r2, r1
 80066fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	0c1b      	lsrs	r3, r3, #16
 8006702:	f003 0104 	and.w	r1, r3, #4
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670a:	f003 0210 	and.w	r2, r3, #16
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	430a      	orrs	r2, r1
 8006714:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	69da      	ldr	r2, [r3, #28]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006724:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b082      	sub	sp, #8
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d101      	bne.n	8006750 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e01a      	b.n	8006786 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006766:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f7fa fda7 	bl	80012bc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3708      	adds	r7, #8
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b08c      	sub	sp, #48	; 0x30
 8006792:	af00      	add	r7, sp, #0
 8006794:	60f8      	str	r0, [r7, #12]
 8006796:	60b9      	str	r1, [r7, #8]
 8006798:	607a      	str	r2, [r7, #4]
 800679a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800679c:	2301      	movs	r3, #1
 800679e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80067a0:	2300      	movs	r3, #0
 80067a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d101      	bne.n	80067b4 <HAL_SPI_TransmitReceive+0x26>
 80067b0:	2302      	movs	r3, #2
 80067b2:	e198      	b.n	8006ae6 <HAL_SPI_TransmitReceive+0x358>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067bc:	f7fb fbd8 	bl	8001f70 <HAL_GetTick>
 80067c0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80067d2:	887b      	ldrh	r3, [r7, #2]
 80067d4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80067d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d00f      	beq.n	80067fe <HAL_SPI_TransmitReceive+0x70>
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067e4:	d107      	bne.n	80067f6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d103      	bne.n	80067f6 <HAL_SPI_TransmitReceive+0x68>
 80067ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067f2:	2b04      	cmp	r3, #4
 80067f4:	d003      	beq.n	80067fe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80067f6:	2302      	movs	r3, #2
 80067f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80067fc:	e16d      	b.n	8006ada <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d005      	beq.n	8006810 <HAL_SPI_TransmitReceive+0x82>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d002      	beq.n	8006810 <HAL_SPI_TransmitReceive+0x82>
 800680a:	887b      	ldrh	r3, [r7, #2]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d103      	bne.n	8006818 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006816:	e160      	b.n	8006ada <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b04      	cmp	r3, #4
 8006822:	d003      	beq.n	800682c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2205      	movs	r2, #5
 8006828:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	887a      	ldrh	r2, [r7, #2]
 800683c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	887a      	ldrh	r2, [r7, #2]
 8006842:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	887a      	ldrh	r2, [r7, #2]
 800684e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	887a      	ldrh	r2, [r7, #2]
 8006854:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800686c:	2b40      	cmp	r3, #64	; 0x40
 800686e:	d007      	beq.n	8006880 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800687e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006888:	d17c      	bne.n	8006984 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d002      	beq.n	8006898 <HAL_SPI_TransmitReceive+0x10a>
 8006892:	8b7b      	ldrh	r3, [r7, #26]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d16a      	bne.n	800696e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689c:	881a      	ldrh	r2, [r3, #0]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a8:	1c9a      	adds	r2, r3, #2
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	3b01      	subs	r3, #1
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068bc:	e057      	b.n	800696e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	f003 0302 	and.w	r3, r3, #2
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d11b      	bne.n	8006904 <HAL_SPI_TransmitReceive+0x176>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d016      	beq.n	8006904 <HAL_SPI_TransmitReceive+0x176>
 80068d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d113      	bne.n	8006904 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e0:	881a      	ldrh	r2, [r3, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ec:	1c9a      	adds	r2, r3, #2
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	3b01      	subs	r3, #1
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006900:	2300      	movs	r3, #0
 8006902:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b01      	cmp	r3, #1
 8006910:	d119      	bne.n	8006946 <HAL_SPI_TransmitReceive+0x1b8>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006916:	b29b      	uxth	r3, r3
 8006918:	2b00      	cmp	r3, #0
 800691a:	d014      	beq.n	8006946 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68da      	ldr	r2, [r3, #12]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006926:	b292      	uxth	r2, r2
 8006928:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692e:	1c9a      	adds	r2, r3, #2
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006938:	b29b      	uxth	r3, r3
 800693a:	3b01      	subs	r3, #1
 800693c:	b29a      	uxth	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006942:	2301      	movs	r3, #1
 8006944:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006946:	f7fb fb13 	bl	8001f70 <HAL_GetTick>
 800694a:	4602      	mov	r2, r0
 800694c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006952:	429a      	cmp	r2, r3
 8006954:	d80b      	bhi.n	800696e <HAL_SPI_TransmitReceive+0x1e0>
 8006956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695c:	d007      	beq.n	800696e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800696c:	e0b5      	b.n	8006ada <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006972:	b29b      	uxth	r3, r3
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1a2      	bne.n	80068be <HAL_SPI_TransmitReceive+0x130>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800697c:	b29b      	uxth	r3, r3
 800697e:	2b00      	cmp	r3, #0
 8006980:	d19d      	bne.n	80068be <HAL_SPI_TransmitReceive+0x130>
 8006982:	e080      	b.n	8006a86 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d002      	beq.n	8006992 <HAL_SPI_TransmitReceive+0x204>
 800698c:	8b7b      	ldrh	r3, [r7, #26]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d16f      	bne.n	8006a72 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	330c      	adds	r3, #12
 800699c:	7812      	ldrb	r2, [r2, #0]
 800699e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a4:	1c5a      	adds	r2, r3, #1
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	3b01      	subs	r3, #1
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069b8:	e05b      	b.n	8006a72 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f003 0302 	and.w	r3, r3, #2
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d11c      	bne.n	8006a02 <HAL_SPI_TransmitReceive+0x274>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d017      	beq.n	8006a02 <HAL_SPI_TransmitReceive+0x274>
 80069d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d114      	bne.n	8006a02 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	330c      	adds	r3, #12
 80069e2:	7812      	ldrb	r2, [r2, #0]
 80069e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ea:	1c5a      	adds	r2, r3, #1
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	3b01      	subs	r3, #1
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80069fe:	2300      	movs	r3, #0
 8006a00:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	f003 0301 	and.w	r3, r3, #1
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d119      	bne.n	8006a44 <HAL_SPI_TransmitReceive+0x2b6>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d014      	beq.n	8006a44 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68da      	ldr	r2, [r3, #12]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a24:	b2d2      	uxtb	r2, r2
 8006a26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2c:	1c5a      	adds	r2, r3, #1
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a40:	2301      	movs	r3, #1
 8006a42:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006a44:	f7fb fa94 	bl	8001f70 <HAL_GetTick>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d803      	bhi.n	8006a5c <HAL_SPI_TransmitReceive+0x2ce>
 8006a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a5a:	d102      	bne.n	8006a62 <HAL_SPI_TransmitReceive+0x2d4>
 8006a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d107      	bne.n	8006a72 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006a70:	e033      	b.n	8006ada <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d19e      	bne.n	80069ba <HAL_SPI_TransmitReceive+0x22c>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d199      	bne.n	80069ba <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f000 f8c6 	bl	8006c1c <SPI_EndRxTxTransaction>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d006      	beq.n	8006aa4 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2220      	movs	r2, #32
 8006aa0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006aa2:	e01a      	b.n	8006ada <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10a      	bne.n	8006ac2 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006aac:	2300      	movs	r3, #0
 8006aae:	617b      	str	r3, [r7, #20]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	617b      	str	r3, [r7, #20]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	617b      	str	r3, [r7, #20]
 8006ac0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d003      	beq.n	8006ad2 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ad0:	e003      	b.n	8006ada <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ae2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3730      	adds	r7, #48	; 0x30
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006aee:	b480      	push	{r7}
 8006af0:	b083      	sub	sp, #12
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006afc:	b2db      	uxtb	r3, r3
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
	...

08006b0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b088      	sub	sp, #32
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	603b      	str	r3, [r7, #0]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b1c:	f7fb fa28 	bl	8001f70 <HAL_GetTick>
 8006b20:	4602      	mov	r2, r0
 8006b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b24:	1a9b      	subs	r3, r3, r2
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	4413      	add	r3, r2
 8006b2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b2c:	f7fb fa20 	bl	8001f70 <HAL_GetTick>
 8006b30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b32:	4b39      	ldr	r3, [pc, #228]	; (8006c18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	015b      	lsls	r3, r3, #5
 8006b38:	0d1b      	lsrs	r3, r3, #20
 8006b3a:	69fa      	ldr	r2, [r7, #28]
 8006b3c:	fb02 f303 	mul.w	r3, r2, r3
 8006b40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b42:	e054      	b.n	8006bee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b4a:	d050      	beq.n	8006bee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b4c:	f7fb fa10 	bl	8001f70 <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	69fa      	ldr	r2, [r7, #28]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d902      	bls.n	8006b62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d13d      	bne.n	8006bde <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b7a:	d111      	bne.n	8006ba0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b84:	d004      	beq.n	8006b90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b8e:	d107      	bne.n	8006ba0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ba8:	d10f      	bne.n	8006bca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bb8:	601a      	str	r2, [r3, #0]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e017      	b.n	8006c0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d101      	bne.n	8006be8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006be4:	2300      	movs	r3, #0
 8006be6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	3b01      	subs	r3, #1
 8006bec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	689a      	ldr	r2, [r3, #8]
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	68ba      	ldr	r2, [r7, #8]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	bf0c      	ite	eq
 8006bfe:	2301      	moveq	r3, #1
 8006c00:	2300      	movne	r3, #0
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	461a      	mov	r2, r3
 8006c06:	79fb      	ldrb	r3, [r7, #7]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d19b      	bne.n	8006b44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3720      	adds	r7, #32
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	20000000 	.word	0x20000000

08006c1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b088      	sub	sp, #32
 8006c20:	af02      	add	r7, sp, #8
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	2102      	movs	r1, #2
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f7ff ff6a 	bl	8006b0c <SPI_WaitFlagStateUntilTimeout>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d007      	beq.n	8006c4e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c42:	f043 0220 	orr.w	r2, r3, #32
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e032      	b.n	8006cb4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006c4e:	4b1b      	ldr	r3, [pc, #108]	; (8006cbc <SPI_EndRxTxTransaction+0xa0>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a1b      	ldr	r2, [pc, #108]	; (8006cc0 <SPI_EndRxTxTransaction+0xa4>)
 8006c54:	fba2 2303 	umull	r2, r3, r2, r3
 8006c58:	0d5b      	lsrs	r3, r3, #21
 8006c5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c5e:	fb02 f303 	mul.w	r3, r2, r3
 8006c62:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c6c:	d112      	bne.n	8006c94 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	9300      	str	r3, [sp, #0]
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	2200      	movs	r2, #0
 8006c76:	2180      	movs	r1, #128	; 0x80
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f7ff ff47 	bl	8006b0c <SPI_WaitFlagStateUntilTimeout>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d016      	beq.n	8006cb2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c88:	f043 0220 	orr.w	r2, r3, #32
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e00f      	b.n	8006cb4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00a      	beq.n	8006cb0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006caa:	2b80      	cmp	r3, #128	; 0x80
 8006cac:	d0f2      	beq.n	8006c94 <SPI_EndRxTxTransaction+0x78>
 8006cae:	e000      	b.n	8006cb2 <SPI_EndRxTxTransaction+0x96>
        break;
 8006cb0:	bf00      	nop
  }

  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3718      	adds	r7, #24
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	20000000 	.word	0x20000000
 8006cc0:	165e9f81 	.word	0x165e9f81

08006cc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e041      	b.n	8006d5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d106      	bne.n	8006cf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7fa fb04 	bl	80012f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2202      	movs	r2, #2
 8006cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	3304      	adds	r3, #4
 8006d00:	4619      	mov	r1, r3
 8006d02:	4610      	mov	r0, r2
 8006d04:	f000 faa4 	bl	8007250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b083      	sub	sp, #12
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	6a1a      	ldr	r2, [r3, #32]
 8006d70:	f241 1311 	movw	r3, #4369	; 0x1111
 8006d74:	4013      	ands	r3, r2
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10f      	bne.n	8006d9a <HAL_TIM_Base_Stop+0x38>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	6a1a      	ldr	r2, [r3, #32]
 8006d80:	f240 4344 	movw	r3, #1092	; 0x444
 8006d84:	4013      	ands	r3, r2
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d107      	bne.n	8006d9a <HAL_TIM_Base_Stop+0x38>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f022 0201 	bic.w	r2, r2, #1
 8006d98:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d001      	beq.n	8006dc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e04e      	b.n	8006e66 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2202      	movs	r2, #2
 8006dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68da      	ldr	r2, [r3, #12]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f042 0201 	orr.w	r2, r2, #1
 8006dde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a23      	ldr	r2, [pc, #140]	; (8006e74 <HAL_TIM_Base_Start_IT+0xc4>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d022      	beq.n	8006e30 <HAL_TIM_Base_Start_IT+0x80>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006df2:	d01d      	beq.n	8006e30 <HAL_TIM_Base_Start_IT+0x80>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a1f      	ldr	r2, [pc, #124]	; (8006e78 <HAL_TIM_Base_Start_IT+0xc8>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d018      	beq.n	8006e30 <HAL_TIM_Base_Start_IT+0x80>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a1e      	ldr	r2, [pc, #120]	; (8006e7c <HAL_TIM_Base_Start_IT+0xcc>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d013      	beq.n	8006e30 <HAL_TIM_Base_Start_IT+0x80>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a1c      	ldr	r2, [pc, #112]	; (8006e80 <HAL_TIM_Base_Start_IT+0xd0>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d00e      	beq.n	8006e30 <HAL_TIM_Base_Start_IT+0x80>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a1b      	ldr	r2, [pc, #108]	; (8006e84 <HAL_TIM_Base_Start_IT+0xd4>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d009      	beq.n	8006e30 <HAL_TIM_Base_Start_IT+0x80>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a19      	ldr	r2, [pc, #100]	; (8006e88 <HAL_TIM_Base_Start_IT+0xd8>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d004      	beq.n	8006e30 <HAL_TIM_Base_Start_IT+0x80>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a18      	ldr	r2, [pc, #96]	; (8006e8c <HAL_TIM_Base_Start_IT+0xdc>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d111      	bne.n	8006e54 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	f003 0307 	and.w	r3, r3, #7
 8006e3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2b06      	cmp	r3, #6
 8006e40:	d010      	beq.n	8006e64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f042 0201 	orr.w	r2, r2, #1
 8006e50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e52:	e007      	b.n	8006e64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f042 0201 	orr.w	r2, r2, #1
 8006e62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	40010000 	.word	0x40010000
 8006e78:	40000400 	.word	0x40000400
 8006e7c:	40000800 	.word	0x40000800
 8006e80:	40000c00 	.word	0x40000c00
 8006e84:	40010400 	.word	0x40010400
 8006e88:	40014000 	.word	0x40014000
 8006e8c:	40001800 	.word	0x40001800

08006e90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	f003 0302 	and.w	r3, r3, #2
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d020      	beq.n	8006ef4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f003 0302 	and.w	r3, r3, #2
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d01b      	beq.n	8006ef4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f06f 0202 	mvn.w	r2, #2
 8006ec4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	699b      	ldr	r3, [r3, #24]
 8006ed2:	f003 0303 	and.w	r3, r3, #3
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f999 	bl	8007212 <HAL_TIM_IC_CaptureCallback>
 8006ee0:	e005      	b.n	8006eee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f98b 	bl	80071fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 f99c 	bl	8007226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	f003 0304 	and.w	r3, r3, #4
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d020      	beq.n	8006f40 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f003 0304 	and.w	r3, r3, #4
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d01b      	beq.n	8006f40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f06f 0204 	mvn.w	r2, #4
 8006f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2202      	movs	r2, #2
 8006f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d003      	beq.n	8006f2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f973 	bl	8007212 <HAL_TIM_IC_CaptureCallback>
 8006f2c:	e005      	b.n	8006f3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f965 	bl	80071fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 f976 	bl	8007226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	f003 0308 	and.w	r3, r3, #8
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d020      	beq.n	8006f8c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f003 0308 	and.w	r3, r3, #8
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d01b      	beq.n	8006f8c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f06f 0208 	mvn.w	r2, #8
 8006f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2204      	movs	r2, #4
 8006f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	69db      	ldr	r3, [r3, #28]
 8006f6a:	f003 0303 	and.w	r3, r3, #3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d003      	beq.n	8006f7a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f94d 	bl	8007212 <HAL_TIM_IC_CaptureCallback>
 8006f78:	e005      	b.n	8006f86 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f93f 	bl	80071fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f950 	bl	8007226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	f003 0310 	and.w	r3, r3, #16
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d020      	beq.n	8006fd8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f003 0310 	and.w	r3, r3, #16
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d01b      	beq.n	8006fd8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f06f 0210 	mvn.w	r2, #16
 8006fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2208      	movs	r2, #8
 8006fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	69db      	ldr	r3, [r3, #28]
 8006fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d003      	beq.n	8006fc6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f927 	bl	8007212 <HAL_TIM_IC_CaptureCallback>
 8006fc4:	e005      	b.n	8006fd2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f919 	bl	80071fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 f92a 	bl	8007226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00c      	beq.n	8006ffc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f003 0301 	and.w	r3, r3, #1
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d007      	beq.n	8006ffc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f06f 0201 	mvn.w	r2, #1
 8006ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f7f9 fe80 	bl	8000cfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00c      	beq.n	8007020 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800700c:	2b00      	cmp	r3, #0
 800700e:	d007      	beq.n	8007020 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fae4 	bl	80075e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00c      	beq.n	8007044 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007030:	2b00      	cmp	r3, #0
 8007032:	d007      	beq.n	8007044 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800703c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f8fb 	bl	800723a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	f003 0320 	and.w	r3, r3, #32
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00c      	beq.n	8007068 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f003 0320 	and.w	r3, r3, #32
 8007054:	2b00      	cmp	r3, #0
 8007056:	d007      	beq.n	8007068 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f06f 0220 	mvn.w	r2, #32
 8007060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fab6 	bl	80075d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007068:	bf00      	nop
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007084:	2b01      	cmp	r3, #1
 8007086:	d101      	bne.n	800708c <HAL_TIM_ConfigClockSource+0x1c>
 8007088:	2302      	movs	r3, #2
 800708a:	e0b4      	b.n	80071f6 <HAL_TIM_ConfigClockSource+0x186>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2202      	movs	r2, #2
 8007098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80070aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070c4:	d03e      	beq.n	8007144 <HAL_TIM_ConfigClockSource+0xd4>
 80070c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070ca:	f200 8087 	bhi.w	80071dc <HAL_TIM_ConfigClockSource+0x16c>
 80070ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070d2:	f000 8086 	beq.w	80071e2 <HAL_TIM_ConfigClockSource+0x172>
 80070d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070da:	d87f      	bhi.n	80071dc <HAL_TIM_ConfigClockSource+0x16c>
 80070dc:	2b70      	cmp	r3, #112	; 0x70
 80070de:	d01a      	beq.n	8007116 <HAL_TIM_ConfigClockSource+0xa6>
 80070e0:	2b70      	cmp	r3, #112	; 0x70
 80070e2:	d87b      	bhi.n	80071dc <HAL_TIM_ConfigClockSource+0x16c>
 80070e4:	2b60      	cmp	r3, #96	; 0x60
 80070e6:	d050      	beq.n	800718a <HAL_TIM_ConfigClockSource+0x11a>
 80070e8:	2b60      	cmp	r3, #96	; 0x60
 80070ea:	d877      	bhi.n	80071dc <HAL_TIM_ConfigClockSource+0x16c>
 80070ec:	2b50      	cmp	r3, #80	; 0x50
 80070ee:	d03c      	beq.n	800716a <HAL_TIM_ConfigClockSource+0xfa>
 80070f0:	2b50      	cmp	r3, #80	; 0x50
 80070f2:	d873      	bhi.n	80071dc <HAL_TIM_ConfigClockSource+0x16c>
 80070f4:	2b40      	cmp	r3, #64	; 0x40
 80070f6:	d058      	beq.n	80071aa <HAL_TIM_ConfigClockSource+0x13a>
 80070f8:	2b40      	cmp	r3, #64	; 0x40
 80070fa:	d86f      	bhi.n	80071dc <HAL_TIM_ConfigClockSource+0x16c>
 80070fc:	2b30      	cmp	r3, #48	; 0x30
 80070fe:	d064      	beq.n	80071ca <HAL_TIM_ConfigClockSource+0x15a>
 8007100:	2b30      	cmp	r3, #48	; 0x30
 8007102:	d86b      	bhi.n	80071dc <HAL_TIM_ConfigClockSource+0x16c>
 8007104:	2b20      	cmp	r3, #32
 8007106:	d060      	beq.n	80071ca <HAL_TIM_ConfigClockSource+0x15a>
 8007108:	2b20      	cmp	r3, #32
 800710a:	d867      	bhi.n	80071dc <HAL_TIM_ConfigClockSource+0x16c>
 800710c:	2b00      	cmp	r3, #0
 800710e:	d05c      	beq.n	80071ca <HAL_TIM_ConfigClockSource+0x15a>
 8007110:	2b10      	cmp	r3, #16
 8007112:	d05a      	beq.n	80071ca <HAL_TIM_ConfigClockSource+0x15a>
 8007114:	e062      	b.n	80071dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007126:	f000 f9b9 	bl	800749c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007138:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	609a      	str	r2, [r3, #8]
      break;
 8007142:	e04f      	b.n	80071e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007154:	f000 f9a2 	bl	800749c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	689a      	ldr	r2, [r3, #8]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007166:	609a      	str	r2, [r3, #8]
      break;
 8007168:	e03c      	b.n	80071e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007176:	461a      	mov	r2, r3
 8007178:	f000 f916 	bl	80073a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2150      	movs	r1, #80	; 0x50
 8007182:	4618      	mov	r0, r3
 8007184:	f000 f96f 	bl	8007466 <TIM_ITRx_SetConfig>
      break;
 8007188:	e02c      	b.n	80071e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007196:	461a      	mov	r2, r3
 8007198:	f000 f935 	bl	8007406 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2160      	movs	r1, #96	; 0x60
 80071a2:	4618      	mov	r0, r3
 80071a4:	f000 f95f 	bl	8007466 <TIM_ITRx_SetConfig>
      break;
 80071a8:	e01c      	b.n	80071e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071b6:	461a      	mov	r2, r3
 80071b8:	f000 f8f6 	bl	80073a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2140      	movs	r1, #64	; 0x40
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 f94f 	bl	8007466 <TIM_ITRx_SetConfig>
      break;
 80071c8:	e00c      	b.n	80071e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4619      	mov	r1, r3
 80071d4:	4610      	mov	r0, r2
 80071d6:	f000 f946 	bl	8007466 <TIM_ITRx_SetConfig>
      break;
 80071da:	e003      	b.n	80071e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	73fb      	strb	r3, [r7, #15]
      break;
 80071e0:	e000      	b.n	80071e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80071e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071fe:	b480      	push	{r7}
 8007200:	b083      	sub	sp, #12
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007206:	bf00      	nop
 8007208:	370c      	adds	r7, #12
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr

08007212 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007212:	b480      	push	{r7}
 8007214:	b083      	sub	sp, #12
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800721a:	bf00      	nop
 800721c:	370c      	adds	r7, #12
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007226:	b480      	push	{r7}
 8007228:	b083      	sub	sp, #12
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800722e:	bf00      	nop
 8007230:	370c      	adds	r7, #12
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr

0800723a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800723a:	b480      	push	{r7}
 800723c:	b083      	sub	sp, #12
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007242:	bf00      	nop
 8007244:	370c      	adds	r7, #12
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
	...

08007250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a46      	ldr	r2, [pc, #280]	; (800737c <TIM_Base_SetConfig+0x12c>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d013      	beq.n	8007290 <TIM_Base_SetConfig+0x40>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800726e:	d00f      	beq.n	8007290 <TIM_Base_SetConfig+0x40>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a43      	ldr	r2, [pc, #268]	; (8007380 <TIM_Base_SetConfig+0x130>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d00b      	beq.n	8007290 <TIM_Base_SetConfig+0x40>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a42      	ldr	r2, [pc, #264]	; (8007384 <TIM_Base_SetConfig+0x134>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d007      	beq.n	8007290 <TIM_Base_SetConfig+0x40>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a41      	ldr	r2, [pc, #260]	; (8007388 <TIM_Base_SetConfig+0x138>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d003      	beq.n	8007290 <TIM_Base_SetConfig+0x40>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a40      	ldr	r2, [pc, #256]	; (800738c <TIM_Base_SetConfig+0x13c>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d108      	bne.n	80072a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	4313      	orrs	r3, r2
 80072a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a35      	ldr	r2, [pc, #212]	; (800737c <TIM_Base_SetConfig+0x12c>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d02b      	beq.n	8007302 <TIM_Base_SetConfig+0xb2>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b0:	d027      	beq.n	8007302 <TIM_Base_SetConfig+0xb2>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a32      	ldr	r2, [pc, #200]	; (8007380 <TIM_Base_SetConfig+0x130>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d023      	beq.n	8007302 <TIM_Base_SetConfig+0xb2>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a31      	ldr	r2, [pc, #196]	; (8007384 <TIM_Base_SetConfig+0x134>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d01f      	beq.n	8007302 <TIM_Base_SetConfig+0xb2>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a30      	ldr	r2, [pc, #192]	; (8007388 <TIM_Base_SetConfig+0x138>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d01b      	beq.n	8007302 <TIM_Base_SetConfig+0xb2>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a2f      	ldr	r2, [pc, #188]	; (800738c <TIM_Base_SetConfig+0x13c>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d017      	beq.n	8007302 <TIM_Base_SetConfig+0xb2>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a2e      	ldr	r2, [pc, #184]	; (8007390 <TIM_Base_SetConfig+0x140>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d013      	beq.n	8007302 <TIM_Base_SetConfig+0xb2>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a2d      	ldr	r2, [pc, #180]	; (8007394 <TIM_Base_SetConfig+0x144>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d00f      	beq.n	8007302 <TIM_Base_SetConfig+0xb2>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a2c      	ldr	r2, [pc, #176]	; (8007398 <TIM_Base_SetConfig+0x148>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d00b      	beq.n	8007302 <TIM_Base_SetConfig+0xb2>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a2b      	ldr	r2, [pc, #172]	; (800739c <TIM_Base_SetConfig+0x14c>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d007      	beq.n	8007302 <TIM_Base_SetConfig+0xb2>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a2a      	ldr	r2, [pc, #168]	; (80073a0 <TIM_Base_SetConfig+0x150>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d003      	beq.n	8007302 <TIM_Base_SetConfig+0xb2>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a29      	ldr	r2, [pc, #164]	; (80073a4 <TIM_Base_SetConfig+0x154>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d108      	bne.n	8007314 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	4313      	orrs	r3, r2
 8007312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	4313      	orrs	r3, r2
 8007320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	689a      	ldr	r2, [r3, #8]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a10      	ldr	r2, [pc, #64]	; (800737c <TIM_Base_SetConfig+0x12c>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d003      	beq.n	8007348 <TIM_Base_SetConfig+0xf8>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a12      	ldr	r2, [pc, #72]	; (800738c <TIM_Base_SetConfig+0x13c>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d103      	bne.n	8007350 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	691a      	ldr	r2, [r3, #16]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	f003 0301 	and.w	r3, r3, #1
 800735e:	2b01      	cmp	r3, #1
 8007360:	d105      	bne.n	800736e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	f023 0201 	bic.w	r2, r3, #1
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	611a      	str	r2, [r3, #16]
  }
}
 800736e:	bf00      	nop
 8007370:	3714      	adds	r7, #20
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	40010000 	.word	0x40010000
 8007380:	40000400 	.word	0x40000400
 8007384:	40000800 	.word	0x40000800
 8007388:	40000c00 	.word	0x40000c00
 800738c:	40010400 	.word	0x40010400
 8007390:	40014000 	.word	0x40014000
 8007394:	40014400 	.word	0x40014400
 8007398:	40014800 	.word	0x40014800
 800739c:	40001800 	.word	0x40001800
 80073a0:	40001c00 	.word	0x40001c00
 80073a4:	40002000 	.word	0x40002000

080073a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b087      	sub	sp, #28
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6a1b      	ldr	r3, [r3, #32]
 80073b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6a1b      	ldr	r3, [r3, #32]
 80073be:	f023 0201 	bic.w	r2, r3, #1
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	011b      	lsls	r3, r3, #4
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	4313      	orrs	r3, r2
 80073dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f023 030a 	bic.w	r3, r3, #10
 80073e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	621a      	str	r2, [r3, #32]
}
 80073fa:	bf00      	nop
 80073fc:	371c      	adds	r7, #28
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr

08007406 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007406:	b480      	push	{r7}
 8007408:	b087      	sub	sp, #28
 800740a:	af00      	add	r7, sp, #0
 800740c:	60f8      	str	r0, [r7, #12]
 800740e:	60b9      	str	r1, [r7, #8]
 8007410:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6a1b      	ldr	r3, [r3, #32]
 8007416:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6a1b      	ldr	r3, [r3, #32]
 800741c:	f023 0210 	bic.w	r2, r3, #16
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007430:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	031b      	lsls	r3, r3, #12
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	4313      	orrs	r3, r2
 800743a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007442:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	011b      	lsls	r3, r3, #4
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	4313      	orrs	r3, r2
 800744c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	621a      	str	r2, [r3, #32]
}
 800745a:	bf00      	nop
 800745c:	371c      	adds	r7, #28
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr

08007466 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007466:	b480      	push	{r7}
 8007468:	b085      	sub	sp, #20
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800747c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	4313      	orrs	r3, r2
 8007484:	f043 0307 	orr.w	r3, r3, #7
 8007488:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	609a      	str	r2, [r3, #8]
}
 8007490:	bf00      	nop
 8007492:	3714      	adds	r7, #20
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800749c:	b480      	push	{r7}
 800749e:	b087      	sub	sp, #28
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]
 80074a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	021a      	lsls	r2, r3, #8
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	431a      	orrs	r2, r3
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	697a      	ldr	r2, [r7, #20]
 80074ce:	609a      	str	r2, [r3, #8]
}
 80074d0:	bf00      	nop
 80074d2:	371c      	adds	r7, #28
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d101      	bne.n	80074f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074f0:	2302      	movs	r3, #2
 80074f2:	e05a      	b.n	80075aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2202      	movs	r2, #2
 8007500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800751a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	4313      	orrs	r3, r2
 8007524:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a21      	ldr	r2, [pc, #132]	; (80075b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d022      	beq.n	800757e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007540:	d01d      	beq.n	800757e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a1d      	ldr	r2, [pc, #116]	; (80075bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d018      	beq.n	800757e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a1b      	ldr	r2, [pc, #108]	; (80075c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d013      	beq.n	800757e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a1a      	ldr	r2, [pc, #104]	; (80075c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d00e      	beq.n	800757e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a18      	ldr	r2, [pc, #96]	; (80075c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d009      	beq.n	800757e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a17      	ldr	r2, [pc, #92]	; (80075cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d004      	beq.n	800757e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a15      	ldr	r2, [pc, #84]	; (80075d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d10c      	bne.n	8007598 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007584:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	4313      	orrs	r3, r2
 800758e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68ba      	ldr	r2, [r7, #8]
 8007596:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3714      	adds	r7, #20
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	40010000 	.word	0x40010000
 80075bc:	40000400 	.word	0x40000400
 80075c0:	40000800 	.word	0x40000800
 80075c4:	40000c00 	.word	0x40000c00
 80075c8:	40010400 	.word	0x40010400
 80075cc:	40014000 	.word	0x40014000
 80075d0:	40001800 	.word	0x40001800

080075d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075f0:	bf00      	nop
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d101      	bne.n	800760e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e042      	b.n	8007694 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b00      	cmp	r3, #0
 8007618:	d106      	bne.n	8007628 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f7f9 fea4 	bl	8001370 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2224      	movs	r2, #36	; 0x24
 800762c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68da      	ldr	r2, [r3, #12]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800763e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 fdbd 	bl	80081c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	691a      	ldr	r2, [r3, #16]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007654:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	695a      	ldr	r2, [r3, #20]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007664:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68da      	ldr	r2, [r3, #12]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007674:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2220      	movs	r2, #32
 8007680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2220      	movs	r2, #32
 8007688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b08a      	sub	sp, #40	; 0x28
 80076a0:	af02      	add	r7, sp, #8
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	603b      	str	r3, [r7, #0]
 80076a8:	4613      	mov	r3, r2
 80076aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80076ac:	2300      	movs	r3, #0
 80076ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	2b20      	cmp	r3, #32
 80076ba:	d175      	bne.n	80077a8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d002      	beq.n	80076c8 <HAL_UART_Transmit+0x2c>
 80076c2:	88fb      	ldrh	r3, [r7, #6]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d101      	bne.n	80076cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e06e      	b.n	80077aa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2221      	movs	r2, #33	; 0x21
 80076d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076da:	f7fa fc49 	bl	8001f70 <HAL_GetTick>
 80076de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	88fa      	ldrh	r2, [r7, #6]
 80076e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	88fa      	ldrh	r2, [r7, #6]
 80076ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076f4:	d108      	bne.n	8007708 <HAL_UART_Transmit+0x6c>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d104      	bne.n	8007708 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80076fe:	2300      	movs	r3, #0
 8007700:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	61bb      	str	r3, [r7, #24]
 8007706:	e003      	b.n	8007710 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800770c:	2300      	movs	r3, #0
 800770e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007710:	e02e      	b.n	8007770 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	9300      	str	r3, [sp, #0]
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	2200      	movs	r2, #0
 800771a:	2180      	movs	r1, #128	; 0x80
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f000 fb1f 	bl	8007d60 <UART_WaitOnFlagUntilTimeout>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d005      	beq.n	8007734 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2220      	movs	r2, #32
 800772c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8007730:	2303      	movs	r3, #3
 8007732:	e03a      	b.n	80077aa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d10b      	bne.n	8007752 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	881b      	ldrh	r3, [r3, #0]
 800773e:	461a      	mov	r2, r3
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007748:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	3302      	adds	r3, #2
 800774e:	61bb      	str	r3, [r7, #24]
 8007750:	e007      	b.n	8007762 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	781a      	ldrb	r2, [r3, #0]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	3301      	adds	r3, #1
 8007760:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007766:	b29b      	uxth	r3, r3
 8007768:	3b01      	subs	r3, #1
 800776a:	b29a      	uxth	r2, r3
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007774:	b29b      	uxth	r3, r3
 8007776:	2b00      	cmp	r3, #0
 8007778:	d1cb      	bne.n	8007712 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	9300      	str	r3, [sp, #0]
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	2200      	movs	r2, #0
 8007782:	2140      	movs	r1, #64	; 0x40
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f000 faeb 	bl	8007d60 <UART_WaitOnFlagUntilTimeout>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d005      	beq.n	800779c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2220      	movs	r2, #32
 8007794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8007798:	2303      	movs	r3, #3
 800779a:	e006      	b.n	80077aa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2220      	movs	r2, #32
 80077a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80077a4:	2300      	movs	r3, #0
 80077a6:	e000      	b.n	80077aa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80077a8:	2302      	movs	r3, #2
  }
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3720      	adds	r7, #32
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b084      	sub	sp, #16
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	60f8      	str	r0, [r7, #12]
 80077ba:	60b9      	str	r1, [r7, #8]
 80077bc:	4613      	mov	r3, r2
 80077be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	2b20      	cmp	r3, #32
 80077ca:	d112      	bne.n	80077f2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d002      	beq.n	80077d8 <HAL_UART_Receive_IT+0x26>
 80077d2:	88fb      	ldrh	r3, [r7, #6]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d101      	bne.n	80077dc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	e00b      	b.n	80077f4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80077e2:	88fb      	ldrh	r3, [r7, #6]
 80077e4:	461a      	mov	r2, r3
 80077e6:	68b9      	ldr	r1, [r7, #8]
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f000 fb12 	bl	8007e12 <UART_Start_Receive_IT>
 80077ee:	4603      	mov	r3, r0
 80077f0:	e000      	b.n	80077f4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80077f2:	2302      	movs	r3, #2
  }
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3710      	adds	r7, #16
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b0ba      	sub	sp, #232	; 0xe8
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	695b      	ldr	r3, [r3, #20]
 800781e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007822:	2300      	movs	r3, #0
 8007824:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007828:	2300      	movs	r3, #0
 800782a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800782e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007832:	f003 030f 	and.w	r3, r3, #15
 8007836:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800783a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800783e:	2b00      	cmp	r3, #0
 8007840:	d10f      	bne.n	8007862 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007846:	f003 0320 	and.w	r3, r3, #32
 800784a:	2b00      	cmp	r3, #0
 800784c:	d009      	beq.n	8007862 <HAL_UART_IRQHandler+0x66>
 800784e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007852:	f003 0320 	and.w	r3, r3, #32
 8007856:	2b00      	cmp	r3, #0
 8007858:	d003      	beq.n	8007862 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 fbf2 	bl	8008044 <UART_Receive_IT>
      return;
 8007860:	e25b      	b.n	8007d1a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007862:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007866:	2b00      	cmp	r3, #0
 8007868:	f000 80de 	beq.w	8007a28 <HAL_UART_IRQHandler+0x22c>
 800786c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007870:	f003 0301 	and.w	r3, r3, #1
 8007874:	2b00      	cmp	r3, #0
 8007876:	d106      	bne.n	8007886 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800787c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007880:	2b00      	cmp	r3, #0
 8007882:	f000 80d1 	beq.w	8007a28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800788a:	f003 0301 	and.w	r3, r3, #1
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00b      	beq.n	80078aa <HAL_UART_IRQHandler+0xae>
 8007892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800789a:	2b00      	cmp	r3, #0
 800789c:	d005      	beq.n	80078aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a2:	f043 0201 	orr.w	r2, r3, #1
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ae:	f003 0304 	and.w	r3, r3, #4
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00b      	beq.n	80078ce <HAL_UART_IRQHandler+0xd2>
 80078b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078ba:	f003 0301 	and.w	r3, r3, #1
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d005      	beq.n	80078ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078c6:	f043 0202 	orr.w	r2, r3, #2
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078d2:	f003 0302 	and.w	r3, r3, #2
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00b      	beq.n	80078f2 <HAL_UART_IRQHandler+0xf6>
 80078da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078de:	f003 0301 	and.w	r3, r3, #1
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d005      	beq.n	80078f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ea:	f043 0204 	orr.w	r2, r3, #4
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80078f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078f6:	f003 0308 	and.w	r3, r3, #8
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d011      	beq.n	8007922 <HAL_UART_IRQHandler+0x126>
 80078fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007902:	f003 0320 	and.w	r3, r3, #32
 8007906:	2b00      	cmp	r3, #0
 8007908:	d105      	bne.n	8007916 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800790a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800790e:	f003 0301 	and.w	r3, r3, #1
 8007912:	2b00      	cmp	r3, #0
 8007914:	d005      	beq.n	8007922 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800791a:	f043 0208 	orr.w	r2, r3, #8
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007926:	2b00      	cmp	r3, #0
 8007928:	f000 81f2 	beq.w	8007d10 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800792c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007930:	f003 0320 	and.w	r3, r3, #32
 8007934:	2b00      	cmp	r3, #0
 8007936:	d008      	beq.n	800794a <HAL_UART_IRQHandler+0x14e>
 8007938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800793c:	f003 0320 	and.w	r3, r3, #32
 8007940:	2b00      	cmp	r3, #0
 8007942:	d002      	beq.n	800794a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 fb7d 	bl	8008044 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	695b      	ldr	r3, [r3, #20]
 8007950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007954:	2b40      	cmp	r3, #64	; 0x40
 8007956:	bf0c      	ite	eq
 8007958:	2301      	moveq	r3, #1
 800795a:	2300      	movne	r3, #0
 800795c:	b2db      	uxtb	r3, r3
 800795e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007966:	f003 0308 	and.w	r3, r3, #8
 800796a:	2b00      	cmp	r3, #0
 800796c:	d103      	bne.n	8007976 <HAL_UART_IRQHandler+0x17a>
 800796e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007972:	2b00      	cmp	r3, #0
 8007974:	d04f      	beq.n	8007a16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fa85 	bl	8007e86 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	695b      	ldr	r3, [r3, #20]
 8007982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007986:	2b40      	cmp	r3, #64	; 0x40
 8007988:	d141      	bne.n	8007a0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	3314      	adds	r3, #20
 8007990:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007994:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007998:	e853 3f00 	ldrex	r3, [r3]
 800799c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80079a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	3314      	adds	r3, #20
 80079b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80079b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80079ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80079c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80079c6:	e841 2300 	strex	r3, r2, [r1]
 80079ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80079ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1d9      	bne.n	800798a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d013      	beq.n	8007a06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e2:	4a7e      	ldr	r2, [pc, #504]	; (8007bdc <HAL_UART_IRQHandler+0x3e0>)
 80079e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7fa fc8d 	bl	800230a <HAL_DMA_Abort_IT>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d016      	beq.n	8007a24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007a00:	4610      	mov	r0, r2
 8007a02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a04:	e00e      	b.n	8007a24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f994 	bl	8007d34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a0c:	e00a      	b.n	8007a24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f990 	bl	8007d34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a14:	e006      	b.n	8007a24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f98c 	bl	8007d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007a22:	e175      	b.n	8007d10 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a24:	bf00      	nop
    return;
 8007a26:	e173      	b.n	8007d10 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	f040 814f 	bne.w	8007cd0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a36:	f003 0310 	and.w	r3, r3, #16
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f000 8148 	beq.w	8007cd0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a44:	f003 0310 	and.w	r3, r3, #16
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f000 8141 	beq.w	8007cd0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a4e:	2300      	movs	r3, #0
 8007a50:	60bb      	str	r3, [r7, #8]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	60bb      	str	r3, [r7, #8]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	60bb      	str	r3, [r7, #8]
 8007a62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a6e:	2b40      	cmp	r3, #64	; 0x40
 8007a70:	f040 80b6 	bne.w	8007be0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f000 8145 	beq.w	8007d14 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a92:	429a      	cmp	r2, r3
 8007a94:	f080 813e 	bcs.w	8007d14 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a9e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa4:	69db      	ldr	r3, [r3, #28]
 8007aa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aaa:	f000 8088 	beq.w	8007bbe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	330c      	adds	r3, #12
 8007ab4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007abc:	e853 3f00 	ldrex	r3, [r3]
 8007ac0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007ac4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007acc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	330c      	adds	r3, #12
 8007ad6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007ada:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007ade:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007ae6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007aea:	e841 2300 	strex	r3, r2, [r1]
 8007aee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1d9      	bne.n	8007aae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	3314      	adds	r3, #20
 8007b00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b04:	e853 3f00 	ldrex	r3, [r3]
 8007b08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b0c:	f023 0301 	bic.w	r3, r3, #1
 8007b10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	3314      	adds	r3, #20
 8007b1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b1e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007b22:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b2a:	e841 2300 	strex	r3, r2, [r1]
 8007b2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d1e1      	bne.n	8007afa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	3314      	adds	r3, #20
 8007b3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b40:	e853 3f00 	ldrex	r3, [r3]
 8007b44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	3314      	adds	r3, #20
 8007b56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007b5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b62:	e841 2300 	strex	r3, r2, [r1]
 8007b66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007b68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1e3      	bne.n	8007b36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2220      	movs	r2, #32
 8007b72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	330c      	adds	r3, #12
 8007b82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b86:	e853 3f00 	ldrex	r3, [r3]
 8007b8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b8e:	f023 0310 	bic.w	r3, r3, #16
 8007b92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	330c      	adds	r3, #12
 8007b9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007ba0:	65ba      	str	r2, [r7, #88]	; 0x58
 8007ba2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ba6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ba8:	e841 2300 	strex	r3, r2, [r1]
 8007bac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1e3      	bne.n	8007b7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f7fa fb36 	bl	800222a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2202      	movs	r2, #2
 8007bc2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f8b7 	bl	8007d48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007bda:	e09b      	b.n	8007d14 <HAL_UART_IRQHandler+0x518>
 8007bdc:	08007f4d 	.word	0x08007f4d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f000 808e 	beq.w	8007d18 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007bfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f000 8089 	beq.w	8007d18 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	330c      	adds	r3, #12
 8007c0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c10:	e853 3f00 	ldrex	r3, [r3]
 8007c14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	330c      	adds	r3, #12
 8007c26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007c2a:	647a      	str	r2, [r7, #68]	; 0x44
 8007c2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c32:	e841 2300 	strex	r3, r2, [r1]
 8007c36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d1e3      	bne.n	8007c06 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	3314      	adds	r3, #20
 8007c44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c48:	e853 3f00 	ldrex	r3, [r3]
 8007c4c:	623b      	str	r3, [r7, #32]
   return(result);
 8007c4e:	6a3b      	ldr	r3, [r7, #32]
 8007c50:	f023 0301 	bic.w	r3, r3, #1
 8007c54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	3314      	adds	r3, #20
 8007c5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c62:	633a      	str	r2, [r7, #48]	; 0x30
 8007c64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c6a:	e841 2300 	strex	r3, r2, [r1]
 8007c6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d1e3      	bne.n	8007c3e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2220      	movs	r2, #32
 8007c7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	330c      	adds	r3, #12
 8007c8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	e853 3f00 	ldrex	r3, [r3]
 8007c92:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f023 0310 	bic.w	r3, r3, #16
 8007c9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	330c      	adds	r3, #12
 8007ca4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007ca8:	61fa      	str	r2, [r7, #28]
 8007caa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cac:	69b9      	ldr	r1, [r7, #24]
 8007cae:	69fa      	ldr	r2, [r7, #28]
 8007cb0:	e841 2300 	strex	r3, r2, [r1]
 8007cb4:	617b      	str	r3, [r7, #20]
   return(result);
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1e3      	bne.n	8007c84 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2202      	movs	r2, #2
 8007cc0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007cc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 f83d 	bl	8007d48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007cce:	e023      	b.n	8007d18 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d009      	beq.n	8007cf0 <HAL_UART_IRQHandler+0x4f4>
 8007cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d003      	beq.n	8007cf0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 f943 	bl	8007f74 <UART_Transmit_IT>
    return;
 8007cee:	e014      	b.n	8007d1a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00e      	beq.n	8007d1a <HAL_UART_IRQHandler+0x51e>
 8007cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d008      	beq.n	8007d1a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 f983 	bl	8008014 <UART_EndTransmit_IT>
    return;
 8007d0e:	e004      	b.n	8007d1a <HAL_UART_IRQHandler+0x51e>
    return;
 8007d10:	bf00      	nop
 8007d12:	e002      	b.n	8007d1a <HAL_UART_IRQHandler+0x51e>
      return;
 8007d14:	bf00      	nop
 8007d16:	e000      	b.n	8007d1a <HAL_UART_IRQHandler+0x51e>
      return;
 8007d18:	bf00      	nop
  }
}
 8007d1a:	37e8      	adds	r7, #232	; 0xe8
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d28:	bf00      	nop
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	460b      	mov	r3, r1
 8007d52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d54:	bf00      	nop
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b086      	sub	sp, #24
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	603b      	str	r3, [r7, #0]
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d70:	e03b      	b.n	8007dea <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d72:	6a3b      	ldr	r3, [r7, #32]
 8007d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d78:	d037      	beq.n	8007dea <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d7a:	f7fa f8f9 	bl	8001f70 <HAL_GetTick>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	6a3a      	ldr	r2, [r7, #32]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d302      	bcc.n	8007d90 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d8a:	6a3b      	ldr	r3, [r7, #32]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d101      	bne.n	8007d94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d90:	2303      	movs	r3, #3
 8007d92:	e03a      	b.n	8007e0a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	f003 0304 	and.w	r3, r3, #4
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d023      	beq.n	8007dea <UART_WaitOnFlagUntilTimeout+0x8a>
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	2b80      	cmp	r3, #128	; 0x80
 8007da6:	d020      	beq.n	8007dea <UART_WaitOnFlagUntilTimeout+0x8a>
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	2b40      	cmp	r3, #64	; 0x40
 8007dac:	d01d      	beq.n	8007dea <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 0308 	and.w	r3, r3, #8
 8007db8:	2b08      	cmp	r3, #8
 8007dba:	d116      	bne.n	8007dea <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	617b      	str	r3, [r7, #20]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	617b      	str	r3, [r7, #20]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	617b      	str	r3, [r7, #20]
 8007dd0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f000 f857 	bl	8007e86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2208      	movs	r2, #8
 8007ddc:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e00f      	b.n	8007e0a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	4013      	ands	r3, r2
 8007df4:	68ba      	ldr	r2, [r7, #8]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	bf0c      	ite	eq
 8007dfa:	2301      	moveq	r3, #1
 8007dfc:	2300      	movne	r3, #0
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	461a      	mov	r2, r3
 8007e02:	79fb      	ldrb	r3, [r7, #7]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d0b4      	beq.n	8007d72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3718      	adds	r7, #24
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b085      	sub	sp, #20
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	60f8      	str	r0, [r7, #12]
 8007e1a:	60b9      	str	r1, [r7, #8]
 8007e1c:	4613      	mov	r3, r2
 8007e1e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	68ba      	ldr	r2, [r7, #8]
 8007e24:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	88fa      	ldrh	r2, [r7, #6]
 8007e2a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	88fa      	ldrh	r2, [r7, #6]
 8007e30:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2222      	movs	r2, #34	; 0x22
 8007e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d007      	beq.n	8007e58 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	68da      	ldr	r2, [r3, #12]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e56:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	695a      	ldr	r2, [r3, #20]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f042 0201 	orr.w	r2, r2, #1
 8007e66:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	68da      	ldr	r2, [r3, #12]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f042 0220 	orr.w	r2, r2, #32
 8007e76:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3714      	adds	r7, #20
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr

08007e86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e86:	b480      	push	{r7}
 8007e88:	b095      	sub	sp, #84	; 0x54
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	330c      	adds	r3, #12
 8007e94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e98:	e853 3f00 	ldrex	r3, [r3]
 8007e9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	330c      	adds	r3, #12
 8007eac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007eae:	643a      	str	r2, [r7, #64]	; 0x40
 8007eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007eb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007eb6:	e841 2300 	strex	r3, r2, [r1]
 8007eba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d1e5      	bne.n	8007e8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	3314      	adds	r3, #20
 8007ec8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eca:	6a3b      	ldr	r3, [r7, #32]
 8007ecc:	e853 3f00 	ldrex	r3, [r3]
 8007ed0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	f023 0301 	bic.w	r3, r3, #1
 8007ed8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	3314      	adds	r3, #20
 8007ee0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ee2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ee4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007eea:	e841 2300 	strex	r3, r2, [r1]
 8007eee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1e5      	bne.n	8007ec2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d119      	bne.n	8007f32 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	330c      	adds	r3, #12
 8007f04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	e853 3f00 	ldrex	r3, [r3]
 8007f0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	f023 0310 	bic.w	r3, r3, #16
 8007f14:	647b      	str	r3, [r7, #68]	; 0x44
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	330c      	adds	r3, #12
 8007f1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f1e:	61ba      	str	r2, [r7, #24]
 8007f20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f22:	6979      	ldr	r1, [r7, #20]
 8007f24:	69ba      	ldr	r2, [r7, #24]
 8007f26:	e841 2300 	strex	r3, r2, [r1]
 8007f2a:	613b      	str	r3, [r7, #16]
   return(result);
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1e5      	bne.n	8007efe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2220      	movs	r2, #32
 8007f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007f40:	bf00      	nop
 8007f42:	3754      	adds	r7, #84	; 0x54
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2200      	movs	r2, #0
 8007f64:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	f7ff fee4 	bl	8007d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f6c:	bf00      	nop
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	2b21      	cmp	r3, #33	; 0x21
 8007f86:	d13e      	bne.n	8008006 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f90:	d114      	bne.n	8007fbc <UART_Transmit_IT+0x48>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d110      	bne.n	8007fbc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a1b      	ldr	r3, [r3, #32]
 8007f9e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	881b      	ldrh	r3, [r3, #0]
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a1b      	ldr	r3, [r3, #32]
 8007fb4:	1c9a      	adds	r2, r3, #2
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	621a      	str	r2, [r3, #32]
 8007fba:	e008      	b.n	8007fce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a1b      	ldr	r3, [r3, #32]
 8007fc0:	1c59      	adds	r1, r3, #1
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	6211      	str	r1, [r2, #32]
 8007fc6:	781a      	ldrb	r2, [r3, #0]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	4619      	mov	r1, r3
 8007fdc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d10f      	bne.n	8008002 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68da      	ldr	r2, [r3, #12]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ff0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	68da      	ldr	r2, [r3, #12]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008000:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008002:	2300      	movs	r3, #0
 8008004:	e000      	b.n	8008008 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008006:	2302      	movs	r3, #2
  }
}
 8008008:	4618      	mov	r0, r3
 800800a:	3714      	adds	r7, #20
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68da      	ldr	r2, [r3, #12]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800802a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2220      	movs	r2, #32
 8008030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f7ff fe73 	bl	8007d20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800803a:	2300      	movs	r3, #0
}
 800803c:	4618      	mov	r0, r3
 800803e:	3708      	adds	r7, #8
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b08c      	sub	sp, #48	; 0x30
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008052:	b2db      	uxtb	r3, r3
 8008054:	2b22      	cmp	r3, #34	; 0x22
 8008056:	f040 80ae 	bne.w	80081b6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008062:	d117      	bne.n	8008094 <UART_Receive_IT+0x50>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d113      	bne.n	8008094 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800806c:	2300      	movs	r3, #0
 800806e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008074:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	b29b      	uxth	r3, r3
 800807e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008082:	b29a      	uxth	r2, r3
 8008084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008086:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800808c:	1c9a      	adds	r2, r3, #2
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	629a      	str	r2, [r3, #40]	; 0x28
 8008092:	e026      	b.n	80080e2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008098:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800809a:	2300      	movs	r3, #0
 800809c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080a6:	d007      	beq.n	80080b8 <UART_Receive_IT+0x74>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d10a      	bne.n	80080c6 <UART_Receive_IT+0x82>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d106      	bne.n	80080c6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	b2da      	uxtb	r2, r3
 80080c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c2:	701a      	strb	r2, [r3, #0]
 80080c4:	e008      	b.n	80080d8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080d2:	b2da      	uxtb	r2, r3
 80080d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080dc:	1c5a      	adds	r2, r3, #1
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	3b01      	subs	r3, #1
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	4619      	mov	r1, r3
 80080f0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d15d      	bne.n	80081b2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68da      	ldr	r2, [r3, #12]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f022 0220 	bic.w	r2, r2, #32
 8008104:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68da      	ldr	r2, [r3, #12]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008114:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	695a      	ldr	r2, [r3, #20]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f022 0201 	bic.w	r2, r2, #1
 8008124:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2220      	movs	r2, #32
 800812a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008138:	2b01      	cmp	r3, #1
 800813a:	d135      	bne.n	80081a8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	330c      	adds	r3, #12
 8008148:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	e853 3f00 	ldrex	r3, [r3]
 8008150:	613b      	str	r3, [r7, #16]
   return(result);
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	f023 0310 	bic.w	r3, r3, #16
 8008158:	627b      	str	r3, [r7, #36]	; 0x24
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	330c      	adds	r3, #12
 8008160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008162:	623a      	str	r2, [r7, #32]
 8008164:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008166:	69f9      	ldr	r1, [r7, #28]
 8008168:	6a3a      	ldr	r2, [r7, #32]
 800816a:	e841 2300 	strex	r3, r2, [r1]
 800816e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1e5      	bne.n	8008142 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 0310 	and.w	r3, r3, #16
 8008180:	2b10      	cmp	r3, #16
 8008182:	d10a      	bne.n	800819a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008184:	2300      	movs	r3, #0
 8008186:	60fb      	str	r3, [r7, #12]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	60fb      	str	r3, [r7, #12]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	60fb      	str	r3, [r7, #12]
 8008198:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800819e:	4619      	mov	r1, r3
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7ff fdd1 	bl	8007d48 <HAL_UARTEx_RxEventCallback>
 80081a6:	e002      	b.n	80081ae <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7f8 fdfd 	bl	8000da8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80081ae:	2300      	movs	r3, #0
 80081b0:	e002      	b.n	80081b8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80081b2:	2300      	movs	r3, #0
 80081b4:	e000      	b.n	80081b8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80081b6:	2302      	movs	r3, #2
  }
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3730      	adds	r7, #48	; 0x30
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081c4:	b0c0      	sub	sp, #256	; 0x100
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80081d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081dc:	68d9      	ldr	r1, [r3, #12]
 80081de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	ea40 0301 	orr.w	r3, r0, r1
 80081e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80081ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081ee:	689a      	ldr	r2, [r3, #8]
 80081f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	431a      	orrs	r2, r3
 80081f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081fc:	695b      	ldr	r3, [r3, #20]
 80081fe:	431a      	orrs	r2, r3
 8008200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008204:	69db      	ldr	r3, [r3, #28]
 8008206:	4313      	orrs	r3, r2
 8008208:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800820c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008218:	f021 010c 	bic.w	r1, r1, #12
 800821c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008226:	430b      	orrs	r3, r1
 8008228:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800822a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800823a:	6999      	ldr	r1, [r3, #24]
 800823c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	ea40 0301 	orr.w	r3, r0, r1
 8008246:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	4b8f      	ldr	r3, [pc, #572]	; (800848c <UART_SetConfig+0x2cc>)
 8008250:	429a      	cmp	r2, r3
 8008252:	d005      	beq.n	8008260 <UART_SetConfig+0xa0>
 8008254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	4b8d      	ldr	r3, [pc, #564]	; (8008490 <UART_SetConfig+0x2d0>)
 800825c:	429a      	cmp	r2, r3
 800825e:	d104      	bne.n	800826a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008260:	f7fd ffdc 	bl	800621c <HAL_RCC_GetPCLK2Freq>
 8008264:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008268:	e003      	b.n	8008272 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800826a:	f7fd ffc3 	bl	80061f4 <HAL_RCC_GetPCLK1Freq>
 800826e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008276:	69db      	ldr	r3, [r3, #28]
 8008278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800827c:	f040 810c 	bne.w	8008498 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008280:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008284:	2200      	movs	r2, #0
 8008286:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800828a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800828e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008292:	4622      	mov	r2, r4
 8008294:	462b      	mov	r3, r5
 8008296:	1891      	adds	r1, r2, r2
 8008298:	65b9      	str	r1, [r7, #88]	; 0x58
 800829a:	415b      	adcs	r3, r3
 800829c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800829e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80082a2:	4621      	mov	r1, r4
 80082a4:	eb12 0801 	adds.w	r8, r2, r1
 80082a8:	4629      	mov	r1, r5
 80082aa:	eb43 0901 	adc.w	r9, r3, r1
 80082ae:	f04f 0200 	mov.w	r2, #0
 80082b2:	f04f 0300 	mov.w	r3, #0
 80082b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80082ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80082be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80082c2:	4690      	mov	r8, r2
 80082c4:	4699      	mov	r9, r3
 80082c6:	4623      	mov	r3, r4
 80082c8:	eb18 0303 	adds.w	r3, r8, r3
 80082cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80082d0:	462b      	mov	r3, r5
 80082d2:	eb49 0303 	adc.w	r3, r9, r3
 80082d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80082da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80082e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80082ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80082ee:	460b      	mov	r3, r1
 80082f0:	18db      	adds	r3, r3, r3
 80082f2:	653b      	str	r3, [r7, #80]	; 0x50
 80082f4:	4613      	mov	r3, r2
 80082f6:	eb42 0303 	adc.w	r3, r2, r3
 80082fa:	657b      	str	r3, [r7, #84]	; 0x54
 80082fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008300:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008304:	f7f7 ff72 	bl	80001ec <__aeabi_uldivmod>
 8008308:	4602      	mov	r2, r0
 800830a:	460b      	mov	r3, r1
 800830c:	4b61      	ldr	r3, [pc, #388]	; (8008494 <UART_SetConfig+0x2d4>)
 800830e:	fba3 2302 	umull	r2, r3, r3, r2
 8008312:	095b      	lsrs	r3, r3, #5
 8008314:	011c      	lsls	r4, r3, #4
 8008316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800831a:	2200      	movs	r2, #0
 800831c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008320:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008324:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008328:	4642      	mov	r2, r8
 800832a:	464b      	mov	r3, r9
 800832c:	1891      	adds	r1, r2, r2
 800832e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008330:	415b      	adcs	r3, r3
 8008332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008334:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008338:	4641      	mov	r1, r8
 800833a:	eb12 0a01 	adds.w	sl, r2, r1
 800833e:	4649      	mov	r1, r9
 8008340:	eb43 0b01 	adc.w	fp, r3, r1
 8008344:	f04f 0200 	mov.w	r2, #0
 8008348:	f04f 0300 	mov.w	r3, #0
 800834c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008350:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008354:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008358:	4692      	mov	sl, r2
 800835a:	469b      	mov	fp, r3
 800835c:	4643      	mov	r3, r8
 800835e:	eb1a 0303 	adds.w	r3, sl, r3
 8008362:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008366:	464b      	mov	r3, r9
 8008368:	eb4b 0303 	adc.w	r3, fp, r3
 800836c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800837c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008380:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008384:	460b      	mov	r3, r1
 8008386:	18db      	adds	r3, r3, r3
 8008388:	643b      	str	r3, [r7, #64]	; 0x40
 800838a:	4613      	mov	r3, r2
 800838c:	eb42 0303 	adc.w	r3, r2, r3
 8008390:	647b      	str	r3, [r7, #68]	; 0x44
 8008392:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008396:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800839a:	f7f7 ff27 	bl	80001ec <__aeabi_uldivmod>
 800839e:	4602      	mov	r2, r0
 80083a0:	460b      	mov	r3, r1
 80083a2:	4611      	mov	r1, r2
 80083a4:	4b3b      	ldr	r3, [pc, #236]	; (8008494 <UART_SetConfig+0x2d4>)
 80083a6:	fba3 2301 	umull	r2, r3, r3, r1
 80083aa:	095b      	lsrs	r3, r3, #5
 80083ac:	2264      	movs	r2, #100	; 0x64
 80083ae:	fb02 f303 	mul.w	r3, r2, r3
 80083b2:	1acb      	subs	r3, r1, r3
 80083b4:	00db      	lsls	r3, r3, #3
 80083b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80083ba:	4b36      	ldr	r3, [pc, #216]	; (8008494 <UART_SetConfig+0x2d4>)
 80083bc:	fba3 2302 	umull	r2, r3, r3, r2
 80083c0:	095b      	lsrs	r3, r3, #5
 80083c2:	005b      	lsls	r3, r3, #1
 80083c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80083c8:	441c      	add	r4, r3
 80083ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083ce:	2200      	movs	r2, #0
 80083d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80083d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80083dc:	4642      	mov	r2, r8
 80083de:	464b      	mov	r3, r9
 80083e0:	1891      	adds	r1, r2, r2
 80083e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80083e4:	415b      	adcs	r3, r3
 80083e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80083ec:	4641      	mov	r1, r8
 80083ee:	1851      	adds	r1, r2, r1
 80083f0:	6339      	str	r1, [r7, #48]	; 0x30
 80083f2:	4649      	mov	r1, r9
 80083f4:	414b      	adcs	r3, r1
 80083f6:	637b      	str	r3, [r7, #52]	; 0x34
 80083f8:	f04f 0200 	mov.w	r2, #0
 80083fc:	f04f 0300 	mov.w	r3, #0
 8008400:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008404:	4659      	mov	r1, fp
 8008406:	00cb      	lsls	r3, r1, #3
 8008408:	4651      	mov	r1, sl
 800840a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800840e:	4651      	mov	r1, sl
 8008410:	00ca      	lsls	r2, r1, #3
 8008412:	4610      	mov	r0, r2
 8008414:	4619      	mov	r1, r3
 8008416:	4603      	mov	r3, r0
 8008418:	4642      	mov	r2, r8
 800841a:	189b      	adds	r3, r3, r2
 800841c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008420:	464b      	mov	r3, r9
 8008422:	460a      	mov	r2, r1
 8008424:	eb42 0303 	adc.w	r3, r2, r3
 8008428:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800842c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008438:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800843c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008440:	460b      	mov	r3, r1
 8008442:	18db      	adds	r3, r3, r3
 8008444:	62bb      	str	r3, [r7, #40]	; 0x28
 8008446:	4613      	mov	r3, r2
 8008448:	eb42 0303 	adc.w	r3, r2, r3
 800844c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800844e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008452:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008456:	f7f7 fec9 	bl	80001ec <__aeabi_uldivmod>
 800845a:	4602      	mov	r2, r0
 800845c:	460b      	mov	r3, r1
 800845e:	4b0d      	ldr	r3, [pc, #52]	; (8008494 <UART_SetConfig+0x2d4>)
 8008460:	fba3 1302 	umull	r1, r3, r3, r2
 8008464:	095b      	lsrs	r3, r3, #5
 8008466:	2164      	movs	r1, #100	; 0x64
 8008468:	fb01 f303 	mul.w	r3, r1, r3
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	00db      	lsls	r3, r3, #3
 8008470:	3332      	adds	r3, #50	; 0x32
 8008472:	4a08      	ldr	r2, [pc, #32]	; (8008494 <UART_SetConfig+0x2d4>)
 8008474:	fba2 2303 	umull	r2, r3, r2, r3
 8008478:	095b      	lsrs	r3, r3, #5
 800847a:	f003 0207 	and.w	r2, r3, #7
 800847e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4422      	add	r2, r4
 8008486:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008488:	e106      	b.n	8008698 <UART_SetConfig+0x4d8>
 800848a:	bf00      	nop
 800848c:	40011000 	.word	0x40011000
 8008490:	40011400 	.word	0x40011400
 8008494:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800849c:	2200      	movs	r2, #0
 800849e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80084a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80084a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80084aa:	4642      	mov	r2, r8
 80084ac:	464b      	mov	r3, r9
 80084ae:	1891      	adds	r1, r2, r2
 80084b0:	6239      	str	r1, [r7, #32]
 80084b2:	415b      	adcs	r3, r3
 80084b4:	627b      	str	r3, [r7, #36]	; 0x24
 80084b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80084ba:	4641      	mov	r1, r8
 80084bc:	1854      	adds	r4, r2, r1
 80084be:	4649      	mov	r1, r9
 80084c0:	eb43 0501 	adc.w	r5, r3, r1
 80084c4:	f04f 0200 	mov.w	r2, #0
 80084c8:	f04f 0300 	mov.w	r3, #0
 80084cc:	00eb      	lsls	r3, r5, #3
 80084ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084d2:	00e2      	lsls	r2, r4, #3
 80084d4:	4614      	mov	r4, r2
 80084d6:	461d      	mov	r5, r3
 80084d8:	4643      	mov	r3, r8
 80084da:	18e3      	adds	r3, r4, r3
 80084dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80084e0:	464b      	mov	r3, r9
 80084e2:	eb45 0303 	adc.w	r3, r5, r3
 80084e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80084ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80084f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80084fa:	f04f 0200 	mov.w	r2, #0
 80084fe:	f04f 0300 	mov.w	r3, #0
 8008502:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008506:	4629      	mov	r1, r5
 8008508:	008b      	lsls	r3, r1, #2
 800850a:	4621      	mov	r1, r4
 800850c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008510:	4621      	mov	r1, r4
 8008512:	008a      	lsls	r2, r1, #2
 8008514:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008518:	f7f7 fe68 	bl	80001ec <__aeabi_uldivmod>
 800851c:	4602      	mov	r2, r0
 800851e:	460b      	mov	r3, r1
 8008520:	4b60      	ldr	r3, [pc, #384]	; (80086a4 <UART_SetConfig+0x4e4>)
 8008522:	fba3 2302 	umull	r2, r3, r3, r2
 8008526:	095b      	lsrs	r3, r3, #5
 8008528:	011c      	lsls	r4, r3, #4
 800852a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800852e:	2200      	movs	r2, #0
 8008530:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008534:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008538:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800853c:	4642      	mov	r2, r8
 800853e:	464b      	mov	r3, r9
 8008540:	1891      	adds	r1, r2, r2
 8008542:	61b9      	str	r1, [r7, #24]
 8008544:	415b      	adcs	r3, r3
 8008546:	61fb      	str	r3, [r7, #28]
 8008548:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800854c:	4641      	mov	r1, r8
 800854e:	1851      	adds	r1, r2, r1
 8008550:	6139      	str	r1, [r7, #16]
 8008552:	4649      	mov	r1, r9
 8008554:	414b      	adcs	r3, r1
 8008556:	617b      	str	r3, [r7, #20]
 8008558:	f04f 0200 	mov.w	r2, #0
 800855c:	f04f 0300 	mov.w	r3, #0
 8008560:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008564:	4659      	mov	r1, fp
 8008566:	00cb      	lsls	r3, r1, #3
 8008568:	4651      	mov	r1, sl
 800856a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800856e:	4651      	mov	r1, sl
 8008570:	00ca      	lsls	r2, r1, #3
 8008572:	4610      	mov	r0, r2
 8008574:	4619      	mov	r1, r3
 8008576:	4603      	mov	r3, r0
 8008578:	4642      	mov	r2, r8
 800857a:	189b      	adds	r3, r3, r2
 800857c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008580:	464b      	mov	r3, r9
 8008582:	460a      	mov	r2, r1
 8008584:	eb42 0303 	adc.w	r3, r2, r3
 8008588:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800858c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	67bb      	str	r3, [r7, #120]	; 0x78
 8008596:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008598:	f04f 0200 	mov.w	r2, #0
 800859c:	f04f 0300 	mov.w	r3, #0
 80085a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80085a4:	4649      	mov	r1, r9
 80085a6:	008b      	lsls	r3, r1, #2
 80085a8:	4641      	mov	r1, r8
 80085aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085ae:	4641      	mov	r1, r8
 80085b0:	008a      	lsls	r2, r1, #2
 80085b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80085b6:	f7f7 fe19 	bl	80001ec <__aeabi_uldivmod>
 80085ba:	4602      	mov	r2, r0
 80085bc:	460b      	mov	r3, r1
 80085be:	4611      	mov	r1, r2
 80085c0:	4b38      	ldr	r3, [pc, #224]	; (80086a4 <UART_SetConfig+0x4e4>)
 80085c2:	fba3 2301 	umull	r2, r3, r3, r1
 80085c6:	095b      	lsrs	r3, r3, #5
 80085c8:	2264      	movs	r2, #100	; 0x64
 80085ca:	fb02 f303 	mul.w	r3, r2, r3
 80085ce:	1acb      	subs	r3, r1, r3
 80085d0:	011b      	lsls	r3, r3, #4
 80085d2:	3332      	adds	r3, #50	; 0x32
 80085d4:	4a33      	ldr	r2, [pc, #204]	; (80086a4 <UART_SetConfig+0x4e4>)
 80085d6:	fba2 2303 	umull	r2, r3, r2, r3
 80085da:	095b      	lsrs	r3, r3, #5
 80085dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085e0:	441c      	add	r4, r3
 80085e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085e6:	2200      	movs	r2, #0
 80085e8:	673b      	str	r3, [r7, #112]	; 0x70
 80085ea:	677a      	str	r2, [r7, #116]	; 0x74
 80085ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80085f0:	4642      	mov	r2, r8
 80085f2:	464b      	mov	r3, r9
 80085f4:	1891      	adds	r1, r2, r2
 80085f6:	60b9      	str	r1, [r7, #8]
 80085f8:	415b      	adcs	r3, r3
 80085fa:	60fb      	str	r3, [r7, #12]
 80085fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008600:	4641      	mov	r1, r8
 8008602:	1851      	adds	r1, r2, r1
 8008604:	6039      	str	r1, [r7, #0]
 8008606:	4649      	mov	r1, r9
 8008608:	414b      	adcs	r3, r1
 800860a:	607b      	str	r3, [r7, #4]
 800860c:	f04f 0200 	mov.w	r2, #0
 8008610:	f04f 0300 	mov.w	r3, #0
 8008614:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008618:	4659      	mov	r1, fp
 800861a:	00cb      	lsls	r3, r1, #3
 800861c:	4651      	mov	r1, sl
 800861e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008622:	4651      	mov	r1, sl
 8008624:	00ca      	lsls	r2, r1, #3
 8008626:	4610      	mov	r0, r2
 8008628:	4619      	mov	r1, r3
 800862a:	4603      	mov	r3, r0
 800862c:	4642      	mov	r2, r8
 800862e:	189b      	adds	r3, r3, r2
 8008630:	66bb      	str	r3, [r7, #104]	; 0x68
 8008632:	464b      	mov	r3, r9
 8008634:	460a      	mov	r2, r1
 8008636:	eb42 0303 	adc.w	r3, r2, r3
 800863a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800863c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	663b      	str	r3, [r7, #96]	; 0x60
 8008646:	667a      	str	r2, [r7, #100]	; 0x64
 8008648:	f04f 0200 	mov.w	r2, #0
 800864c:	f04f 0300 	mov.w	r3, #0
 8008650:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008654:	4649      	mov	r1, r9
 8008656:	008b      	lsls	r3, r1, #2
 8008658:	4641      	mov	r1, r8
 800865a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800865e:	4641      	mov	r1, r8
 8008660:	008a      	lsls	r2, r1, #2
 8008662:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008666:	f7f7 fdc1 	bl	80001ec <__aeabi_uldivmod>
 800866a:	4602      	mov	r2, r0
 800866c:	460b      	mov	r3, r1
 800866e:	4b0d      	ldr	r3, [pc, #52]	; (80086a4 <UART_SetConfig+0x4e4>)
 8008670:	fba3 1302 	umull	r1, r3, r3, r2
 8008674:	095b      	lsrs	r3, r3, #5
 8008676:	2164      	movs	r1, #100	; 0x64
 8008678:	fb01 f303 	mul.w	r3, r1, r3
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	011b      	lsls	r3, r3, #4
 8008680:	3332      	adds	r3, #50	; 0x32
 8008682:	4a08      	ldr	r2, [pc, #32]	; (80086a4 <UART_SetConfig+0x4e4>)
 8008684:	fba2 2303 	umull	r2, r3, r2, r3
 8008688:	095b      	lsrs	r3, r3, #5
 800868a:	f003 020f 	and.w	r2, r3, #15
 800868e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4422      	add	r2, r4
 8008696:	609a      	str	r2, [r3, #8]
}
 8008698:	bf00      	nop
 800869a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800869e:	46bd      	mov	sp, r7
 80086a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086a4:	51eb851f 	.word	0x51eb851f

080086a8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d123      	bne.n	8008702 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80086c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80086c6:	683a      	ldr	r2, [r7, #0]
 80086c8:	6851      	ldr	r1, [r2, #4]
 80086ca:	683a      	ldr	r2, [r7, #0]
 80086cc:	6892      	ldr	r2, [r2, #8]
 80086ce:	4311      	orrs	r1, r2
 80086d0:	683a      	ldr	r2, [r7, #0]
 80086d2:	68d2      	ldr	r2, [r2, #12]
 80086d4:	4311      	orrs	r1, r2
 80086d6:	683a      	ldr	r2, [r7, #0]
 80086d8:	6912      	ldr	r2, [r2, #16]
 80086da:	4311      	orrs	r1, r2
 80086dc:	683a      	ldr	r2, [r7, #0]
 80086de:	6952      	ldr	r2, [r2, #20]
 80086e0:	4311      	orrs	r1, r2
 80086e2:	683a      	ldr	r2, [r7, #0]
 80086e4:	6992      	ldr	r2, [r2, #24]
 80086e6:	4311      	orrs	r1, r2
 80086e8:	683a      	ldr	r2, [r7, #0]
 80086ea:	69d2      	ldr	r2, [r2, #28]
 80086ec:	4311      	orrs	r1, r2
 80086ee:	683a      	ldr	r2, [r7, #0]
 80086f0:	6a12      	ldr	r2, [r2, #32]
 80086f2:	4311      	orrs	r1, r2
 80086f4:	683a      	ldr	r2, [r7, #0]
 80086f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80086f8:	430a      	orrs	r2, r1
 80086fa:	431a      	orrs	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	601a      	str	r2, [r3, #0]
 8008700:	e028      	b.n	8008754 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	69d9      	ldr	r1, [r3, #28]
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	6a1b      	ldr	r3, [r3, #32]
 8008712:	4319      	orrs	r1, r3
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008718:	430b      	orrs	r3, r1
 800871a:	431a      	orrs	r2, r3
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008728:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800872c:	683a      	ldr	r2, [r7, #0]
 800872e:	6851      	ldr	r1, [r2, #4]
 8008730:	683a      	ldr	r2, [r7, #0]
 8008732:	6892      	ldr	r2, [r2, #8]
 8008734:	4311      	orrs	r1, r2
 8008736:	683a      	ldr	r2, [r7, #0]
 8008738:	68d2      	ldr	r2, [r2, #12]
 800873a:	4311      	orrs	r1, r2
 800873c:	683a      	ldr	r2, [r7, #0]
 800873e:	6912      	ldr	r2, [r2, #16]
 8008740:	4311      	orrs	r1, r2
 8008742:	683a      	ldr	r2, [r7, #0]
 8008744:	6952      	ldr	r2, [r2, #20]
 8008746:	4311      	orrs	r1, r2
 8008748:	683a      	ldr	r2, [r7, #0]
 800874a:	6992      	ldr	r2, [r2, #24]
 800874c:	430a      	orrs	r2, r1
 800874e:	431a      	orrs	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	370c      	adds	r7, #12
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr

08008762 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008762:	b480      	push	{r7}
 8008764:	b085      	sub	sp, #20
 8008766:	af00      	add	r7, sp, #0
 8008768:	60f8      	str	r0, [r7, #12]
 800876a:	60b9      	str	r1, [r7, #8]
 800876c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d128      	bne.n	80087c6 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	1e59      	subs	r1, r3, #1
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	3b01      	subs	r3, #1
 8008788:	011b      	lsls	r3, r3, #4
 800878a:	4319      	orrs	r1, r3
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	689b      	ldr	r3, [r3, #8]
 8008790:	3b01      	subs	r3, #1
 8008792:	021b      	lsls	r3, r3, #8
 8008794:	4319      	orrs	r1, r3
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	3b01      	subs	r3, #1
 800879c:	031b      	lsls	r3, r3, #12
 800879e:	4319      	orrs	r1, r3
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	3b01      	subs	r3, #1
 80087a6:	041b      	lsls	r3, r3, #16
 80087a8:	4319      	orrs	r1, r3
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	695b      	ldr	r3, [r3, #20]
 80087ae:	3b01      	subs	r3, #1
 80087b0:	051b      	lsls	r3, r3, #20
 80087b2:	4319      	orrs	r1, r3
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	699b      	ldr	r3, [r3, #24]
 80087b8:	3b01      	subs	r3, #1
 80087ba:	061b      	lsls	r3, r3, #24
 80087bc:	430b      	orrs	r3, r1
 80087be:	431a      	orrs	r2, r3
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	609a      	str	r2, [r3, #8]
 80087c4:	e02f      	b.n	8008826 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80087ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	68d2      	ldr	r2, [r2, #12]
 80087d6:	3a01      	subs	r2, #1
 80087d8:	0311      	lsls	r1, r2, #12
 80087da:	68ba      	ldr	r2, [r7, #8]
 80087dc:	6952      	ldr	r2, [r2, #20]
 80087de:	3a01      	subs	r2, #1
 80087e0:	0512      	lsls	r2, r2, #20
 80087e2:	430a      	orrs	r2, r1
 80087e4:	431a      	orrs	r2, r3
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	1e59      	subs	r1, r3, #1
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	3b01      	subs	r3, #1
 80087fe:	011b      	lsls	r3, r3, #4
 8008800:	4319      	orrs	r1, r3
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	3b01      	subs	r3, #1
 8008808:	021b      	lsls	r3, r3, #8
 800880a:	4319      	orrs	r1, r3
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	3b01      	subs	r3, #1
 8008812:	041b      	lsls	r3, r3, #16
 8008814:	4319      	orrs	r1, r3
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	699b      	ldr	r3, [r3, #24]
 800881a:	3b01      	subs	r3, #1
 800881c:	061b      	lsls	r3, r3, #24
 800881e:	430b      	orrs	r3, r1
 8008820:	431a      	orrs	r2, r3
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8008826:	2300      	movs	r3, #0
}
 8008828:	4618      	mov	r0, r3
 800882a:	3714      	adds	r7, #20
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008834:	b084      	sub	sp, #16
 8008836:	b580      	push	{r7, lr}
 8008838:	b084      	sub	sp, #16
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
 800883e:	f107 001c 	add.w	r0, r7, #28
 8008842:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008846:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800884a:	2b01      	cmp	r3, #1
 800884c:	d123      	bne.n	8008896 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008852:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008876:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800887a:	2b01      	cmp	r3, #1
 800887c:	d105      	bne.n	800888a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 f9dc 	bl	8008c48 <USB_CoreReset>
 8008890:	4603      	mov	r3, r0
 8008892:	73fb      	strb	r3, [r7, #15]
 8008894:	e01b      	b.n	80088ce <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 f9d0 	bl	8008c48 <USB_CoreReset>
 80088a8:	4603      	mov	r3, r0
 80088aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80088ac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d106      	bne.n	80088c2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	639a      	str	r2, [r3, #56]	; 0x38
 80088c0:	e005      	b.n	80088ce <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80088ce:	7fbb      	ldrb	r3, [r7, #30]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d10b      	bne.n	80088ec <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	f043 0206 	orr.w	r2, r3, #6
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	f043 0220 	orr.w	r2, r3, #32
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80088ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80088f8:	b004      	add	sp, #16
 80088fa:	4770      	bx	lr

080088fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	f043 0201 	orr.w	r2, r3, #1
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	370c      	adds	r7, #12
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr

0800891e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800891e:	b480      	push	{r7}
 8008920:	b083      	sub	sp, #12
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	f023 0201 	bic.w	r2, r3, #1
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	460b      	mov	r3, r1
 800894a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800894c:	2300      	movs	r3, #0
 800894e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800895c:	78fb      	ldrb	r3, [r7, #3]
 800895e:	2b01      	cmp	r3, #1
 8008960:	d115      	bne.n	800898e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800896e:	200a      	movs	r0, #10
 8008970:	f7f9 fb0a 	bl	8001f88 <HAL_Delay>
      ms += 10U;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	330a      	adds	r3, #10
 8008978:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 f956 	bl	8008c2c <USB_GetMode>
 8008980:	4603      	mov	r3, r0
 8008982:	2b01      	cmp	r3, #1
 8008984:	d01e      	beq.n	80089c4 <USB_SetCurrentMode+0x84>
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2bc7      	cmp	r3, #199	; 0xc7
 800898a:	d9f0      	bls.n	800896e <USB_SetCurrentMode+0x2e>
 800898c:	e01a      	b.n	80089c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800898e:	78fb      	ldrb	r3, [r7, #3]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d115      	bne.n	80089c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80089a0:	200a      	movs	r0, #10
 80089a2:	f7f9 faf1 	bl	8001f88 <HAL_Delay>
      ms += 10U;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	330a      	adds	r3, #10
 80089aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 f93d 	bl	8008c2c <USB_GetMode>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d005      	beq.n	80089c4 <USB_SetCurrentMode+0x84>
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2bc7      	cmp	r3, #199	; 0xc7
 80089bc:	d9f0      	bls.n	80089a0 <USB_SetCurrentMode+0x60>
 80089be:	e001      	b.n	80089c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	e005      	b.n	80089d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2bc8      	cmp	r3, #200	; 0xc8
 80089c8:	d101      	bne.n	80089ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	e000      	b.n	80089d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3710      	adds	r7, #16
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80089e2:	2300      	movs	r3, #0
 80089e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	3301      	adds	r3, #1
 80089ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80089f2:	d901      	bls.n	80089f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80089f4:	2303      	movs	r3, #3
 80089f6:	e01b      	b.n	8008a30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	daf2      	bge.n	80089e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008a00:	2300      	movs	r3, #0
 8008a02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	019b      	lsls	r3, r3, #6
 8008a08:	f043 0220 	orr.w	r2, r3, #32
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	3301      	adds	r3, #1
 8008a14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008a1c:	d901      	bls.n	8008a22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	e006      	b.n	8008a30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	f003 0320 	and.w	r3, r3, #32
 8008a2a:	2b20      	cmp	r3, #32
 8008a2c:	d0f0      	beq.n	8008a10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008a2e:	2300      	movs	r3, #0
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3714      	adds	r7, #20
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a44:	2300      	movs	r3, #0
 8008a46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008a54:	d901      	bls.n	8008a5a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008a56:	2303      	movs	r3, #3
 8008a58:	e018      	b.n	8008a8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	daf2      	bge.n	8008a48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008a62:	2300      	movs	r3, #0
 8008a64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2210      	movs	r2, #16
 8008a6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008a78:	d901      	bls.n	8008a7e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	e006      	b.n	8008a8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	f003 0310 	and.w	r3, r3, #16
 8008a86:	2b10      	cmp	r3, #16
 8008a88:	d0f0      	beq.n	8008a6c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008a8a:	2300      	movs	r3, #0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3714      	adds	r7, #20
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b089      	sub	sp, #36	; 0x24
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	4611      	mov	r1, r2
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	71fb      	strb	r3, [r7, #7]
 8008aaa:	4613      	mov	r3, r2
 8008aac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008ab6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d123      	bne.n	8008b06 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008abe:	88bb      	ldrh	r3, [r7, #4]
 8008ac0:	3303      	adds	r3, #3
 8008ac2:	089b      	lsrs	r3, r3, #2
 8008ac4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	61bb      	str	r3, [r7, #24]
 8008aca:	e018      	b.n	8008afe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008acc:	79fb      	ldrb	r3, [r7, #7]
 8008ace:	031a      	lsls	r2, r3, #12
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ad8:	461a      	mov	r2, r3
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008aec:	69fb      	ldr	r3, [r7, #28]
 8008aee:	3301      	adds	r3, #1
 8008af0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	3301      	adds	r3, #1
 8008af6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	3301      	adds	r3, #1
 8008afc:	61bb      	str	r3, [r7, #24]
 8008afe:	69ba      	ldr	r2, [r7, #24]
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d3e2      	bcc.n	8008acc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3724      	adds	r7, #36	; 0x24
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b08b      	sub	sp, #44	; 0x2c
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	4613      	mov	r3, r2
 8008b20:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008b2a:	88fb      	ldrh	r3, [r7, #6]
 8008b2c:	089b      	lsrs	r3, r3, #2
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008b32:	88fb      	ldrh	r3, [r7, #6]
 8008b34:	f003 0303 	and.w	r3, r3, #3
 8008b38:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	623b      	str	r3, [r7, #32]
 8008b3e:	e014      	b.n	8008b6a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008b40:	69bb      	ldr	r3, [r7, #24]
 8008b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4a:	601a      	str	r2, [r3, #0]
    pDest++;
 8008b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4e:	3301      	adds	r3, #1
 8008b50:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b54:	3301      	adds	r3, #1
 8008b56:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b60:	3301      	adds	r3, #1
 8008b62:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008b64:	6a3b      	ldr	r3, [r7, #32]
 8008b66:	3301      	adds	r3, #1
 8008b68:	623b      	str	r3, [r7, #32]
 8008b6a:	6a3a      	ldr	r2, [r7, #32]
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d3e6      	bcc.n	8008b40 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008b72:	8bfb      	ldrh	r3, [r7, #30]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d01e      	beq.n	8008bb6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b82:	461a      	mov	r2, r3
 8008b84:	f107 0310 	add.w	r3, r7, #16
 8008b88:	6812      	ldr	r2, [r2, #0]
 8008b8a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008b8c:	693a      	ldr	r2, [r7, #16]
 8008b8e:	6a3b      	ldr	r3, [r7, #32]
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	00db      	lsls	r3, r3, #3
 8008b94:	fa22 f303 	lsr.w	r3, r2, r3
 8008b98:	b2da      	uxtb	r2, r3
 8008b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9c:	701a      	strb	r2, [r3, #0]
      i++;
 8008b9e:	6a3b      	ldr	r3, [r7, #32]
 8008ba0:	3301      	adds	r3, #1
 8008ba2:	623b      	str	r3, [r7, #32]
      pDest++;
 8008ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008baa:	8bfb      	ldrh	r3, [r7, #30]
 8008bac:	3b01      	subs	r3, #1
 8008bae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008bb0:	8bfb      	ldrh	r3, [r7, #30]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1ea      	bne.n	8008b8c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	372c      	adds	r7, #44	; 0x2c
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	695b      	ldr	r3, [r3, #20]
 8008bd0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	699b      	ldr	r3, [r3, #24]
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	4013      	ands	r3, r2
 8008bda:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3714      	adds	r7, #20
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8008bea:	b480      	push	{r7}
 8008bec:	b085      	sub	sp, #20
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8008bfa:	78fb      	ldrb	r3, [r7, #3]
 8008bfc:	015a      	lsls	r2, r3, #5
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	4413      	add	r3, r2
 8008c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8008c0a:	78fb      	ldrb	r3, [r7, #3]
 8008c0c:	015a      	lsls	r2, r3, #5
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	4413      	add	r3, r2
 8008c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	68ba      	ldr	r2, [r7, #8]
 8008c1a:	4013      	ands	r3, r2
 8008c1c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008c1e:	68bb      	ldr	r3, [r7, #8]
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3714      	adds	r7, #20
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	695b      	ldr	r3, [r3, #20]
 8008c38:	f003 0301 	and.w	r3, r3, #1
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c50:	2300      	movs	r3, #0
 8008c52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	3301      	adds	r3, #1
 8008c58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008c60:	d901      	bls.n	8008c66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008c62:	2303      	movs	r3, #3
 8008c64:	e01b      	b.n	8008c9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	daf2      	bge.n	8008c54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	691b      	ldr	r3, [r3, #16]
 8008c76:	f043 0201 	orr.w	r2, r3, #1
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	3301      	adds	r3, #1
 8008c82:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008c8a:	d901      	bls.n	8008c90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	e006      	b.n	8008c9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	691b      	ldr	r3, [r3, #16]
 8008c94:	f003 0301 	and.w	r3, r3, #1
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d0f0      	beq.n	8008c7e <USB_CoreReset+0x36>

  return HAL_OK;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3714      	adds	r7, #20
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr
	...

08008cac <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008cac:	b084      	sub	sp, #16
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b086      	sub	sp, #24
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008cba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ccc:	461a      	mov	r2, r3
 8008cce:	2300      	movs	r3, #0
 8008cd0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cee:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d119      	bne.n	8008d36 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008d02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d10a      	bne.n	8008d20 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d18:	f043 0304 	orr.w	r3, r3, #4
 8008d1c:	6013      	str	r3, [r2, #0]
 8008d1e:	e014      	b.n	8008d4a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	68fa      	ldr	r2, [r7, #12]
 8008d2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d2e:	f023 0304 	bic.w	r3, r3, #4
 8008d32:	6013      	str	r3, [r2, #0]
 8008d34:	e009      	b.n	8008d4a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d44:	f023 0304 	bic.w	r3, r3, #4
 8008d48:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008d4a:	2110      	movs	r1, #16
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f7ff fe43 	bl	80089d8 <USB_FlushTxFifo>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d001      	beq.n	8008d5c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f7ff fe6d 	bl	8008a3c <USB_FlushRxFifo>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d001      	beq.n	8008d6c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	613b      	str	r3, [r7, #16]
 8008d70:	e015      	b.n	8008d9e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	015a      	lsls	r2, r3, #5
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	4413      	add	r3, r2
 8008d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d7e:	461a      	mov	r2, r3
 8008d80:	f04f 33ff 	mov.w	r3, #4294967295
 8008d84:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	015a      	lsls	r2, r3, #5
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d92:	461a      	mov	r2, r3
 8008d94:	2300      	movs	r3, #0
 8008d96:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	613b      	str	r3, [r7, #16]
 8008d9e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008da2:	461a      	mov	r2, r3
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d3e3      	bcc.n	8008d72 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f04f 32ff 	mov.w	r2, #4294967295
 8008db6:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4a18      	ldr	r2, [pc, #96]	; (8008e1c <USB_HostInit+0x170>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d10b      	bne.n	8008dd8 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008dc6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4a15      	ldr	r2, [pc, #84]	; (8008e20 <USB_HostInit+0x174>)
 8008dcc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a14      	ldr	r2, [pc, #80]	; (8008e24 <USB_HostInit+0x178>)
 8008dd2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008dd6:	e009      	b.n	8008dec <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2280      	movs	r2, #128	; 0x80
 8008ddc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4a11      	ldr	r2, [pc, #68]	; (8008e28 <USB_HostInit+0x17c>)
 8008de2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a11      	ldr	r2, [pc, #68]	; (8008e2c <USB_HostInit+0x180>)
 8008de8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008dec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d105      	bne.n	8008e00 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	699b      	ldr	r3, [r3, #24]
 8008df8:	f043 0210 	orr.w	r2, r3, #16
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	699a      	ldr	r2, [r3, #24]
 8008e04:	4b0a      	ldr	r3, [pc, #40]	; (8008e30 <USB_HostInit+0x184>)
 8008e06:	4313      	orrs	r3, r2
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3718      	adds	r7, #24
 8008e12:	46bd      	mov	sp, r7
 8008e14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e18:	b004      	add	sp, #16
 8008e1a:	4770      	bx	lr
 8008e1c:	40040000 	.word	0x40040000
 8008e20:	01000200 	.word	0x01000200
 8008e24:	00e00300 	.word	0x00e00300
 8008e28:	00600080 	.word	0x00600080
 8008e2c:	004000e0 	.word	0x004000e0
 8008e30:	a3200008 	.word	0xa3200008

08008e34 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	68fa      	ldr	r2, [r7, #12]
 8008e4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e52:	f023 0303 	bic.w	r3, r3, #3
 8008e56:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	78fb      	ldrb	r3, [r7, #3]
 8008e62:	f003 0303 	and.w	r3, r3, #3
 8008e66:	68f9      	ldr	r1, [r7, #12]
 8008e68:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008e70:	78fb      	ldrb	r3, [r7, #3]
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d107      	bne.n	8008e86 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008e82:	6053      	str	r3, [r2, #4]
 8008e84:	e00c      	b.n	8008ea0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8008e86:	78fb      	ldrb	r3, [r7, #3]
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	d107      	bne.n	8008e9c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e92:	461a      	mov	r2, r3
 8008e94:	f241 7370 	movw	r3, #6000	; 0x1770
 8008e98:	6053      	str	r3, [r2, #4]
 8008e9a:	e001      	b.n	8008ea0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e000      	b.n	8008ea2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3714      	adds	r7, #20
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr

08008eae <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008eae:	b480      	push	{r7}
 8008eb0:	b085      	sub	sp, #20
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008ed2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d109      	bne.n	8008ef2 <USB_DriveVbus+0x44>
 8008ede:	78fb      	ldrb	r3, [r7, #3]
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d106      	bne.n	8008ef2 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008eec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008ef0:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008efc:	d109      	bne.n	8008f12 <USB_DriveVbus+0x64>
 8008efe:	78fb      	ldrb	r3, [r7, #3]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d106      	bne.n	8008f12 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008f0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f10:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3714      	adds	r7, #20
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	0c5b      	lsrs	r3, r3, #17
 8008f3e:	f003 0303 	and.w	r3, r3, #3
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3714      	adds	r7, #20
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr

08008f4e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8008f4e:	b480      	push	{r7}
 8008f50:	b085      	sub	sp, #20
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	b29b      	uxth	r3, r3
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3714      	adds	r7, #20
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b088      	sub	sp, #32
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	4608      	mov	r0, r1
 8008f7a:	4611      	mov	r1, r2
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	4603      	mov	r3, r0
 8008f80:	70fb      	strb	r3, [r7, #3]
 8008f82:	460b      	mov	r3, r1
 8008f84:	70bb      	strb	r3, [r7, #2]
 8008f86:	4613      	mov	r3, r2
 8008f88:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8008f92:	78fb      	ldrb	r3, [r7, #3]
 8008f94:	015a      	lsls	r2, r3, #5
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	4413      	add	r3, r2
 8008f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8008fa4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008fa6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008faa:	2b03      	cmp	r3, #3
 8008fac:	d87c      	bhi.n	80090a8 <USB_HC_Init+0x138>
 8008fae:	a201      	add	r2, pc, #4	; (adr r2, 8008fb4 <USB_HC_Init+0x44>)
 8008fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb4:	08008fc5 	.word	0x08008fc5
 8008fb8:	0800906b 	.word	0x0800906b
 8008fbc:	08008fc5 	.word	0x08008fc5
 8008fc0:	0800902d 	.word	0x0800902d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008fc4:	78fb      	ldrb	r3, [r7, #3]
 8008fc6:	015a      	lsls	r2, r3, #5
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	4413      	add	r3, r2
 8008fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	f240 439d 	movw	r3, #1181	; 0x49d
 8008fd6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008fd8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	da10      	bge.n	8009002 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008fe0:	78fb      	ldrb	r3, [r7, #3]
 8008fe2:	015a      	lsls	r2, r3, #5
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	78fa      	ldrb	r2, [r7, #3]
 8008ff0:	0151      	lsls	r1, r2, #5
 8008ff2:	693a      	ldr	r2, [r7, #16]
 8008ff4:	440a      	add	r2, r1
 8008ff6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ffe:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8009000:	e055      	b.n	80090ae <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4a6f      	ldr	r2, [pc, #444]	; (80091c4 <USB_HC_Init+0x254>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d151      	bne.n	80090ae <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800900a:	78fb      	ldrb	r3, [r7, #3]
 800900c:	015a      	lsls	r2, r3, #5
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	4413      	add	r3, r2
 8009012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	78fa      	ldrb	r2, [r7, #3]
 800901a:	0151      	lsls	r1, r2, #5
 800901c:	693a      	ldr	r2, [r7, #16]
 800901e:	440a      	add	r2, r1
 8009020:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009024:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009028:	60d3      	str	r3, [r2, #12]
      break;
 800902a:	e040      	b.n	80090ae <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800902c:	78fb      	ldrb	r3, [r7, #3]
 800902e:	015a      	lsls	r2, r3, #5
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	4413      	add	r3, r2
 8009034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009038:	461a      	mov	r2, r3
 800903a:	f240 639d 	movw	r3, #1693	; 0x69d
 800903e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009040:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009044:	2b00      	cmp	r3, #0
 8009046:	da34      	bge.n	80090b2 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009048:	78fb      	ldrb	r3, [r7, #3]
 800904a:	015a      	lsls	r2, r3, #5
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	4413      	add	r3, r2
 8009050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	78fa      	ldrb	r2, [r7, #3]
 8009058:	0151      	lsls	r1, r2, #5
 800905a:	693a      	ldr	r2, [r7, #16]
 800905c:	440a      	add	r2, r1
 800905e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009066:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009068:	e023      	b.n	80090b2 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800906a:	78fb      	ldrb	r3, [r7, #3]
 800906c:	015a      	lsls	r2, r3, #5
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	4413      	add	r3, r2
 8009072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009076:	461a      	mov	r2, r3
 8009078:	f240 2325 	movw	r3, #549	; 0x225
 800907c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800907e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009082:	2b00      	cmp	r3, #0
 8009084:	da17      	bge.n	80090b6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009086:	78fb      	ldrb	r3, [r7, #3]
 8009088:	015a      	lsls	r2, r3, #5
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	4413      	add	r3, r2
 800908e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	78fa      	ldrb	r2, [r7, #3]
 8009096:	0151      	lsls	r1, r2, #5
 8009098:	693a      	ldr	r2, [r7, #16]
 800909a:	440a      	add	r2, r1
 800909c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090a0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80090a4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80090a6:	e006      	b.n	80090b6 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80090a8:	2301      	movs	r3, #1
 80090aa:	77fb      	strb	r3, [r7, #31]
      break;
 80090ac:	e004      	b.n	80090b8 <USB_HC_Init+0x148>
      break;
 80090ae:	bf00      	nop
 80090b0:	e002      	b.n	80090b8 <USB_HC_Init+0x148>
      break;
 80090b2:	bf00      	nop
 80090b4:	e000      	b.n	80090b8 <USB_HC_Init+0x148>
      break;
 80090b6:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80090b8:	78fb      	ldrb	r3, [r7, #3]
 80090ba:	015a      	lsls	r2, r3, #5
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	4413      	add	r3, r2
 80090c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090c4:	461a      	mov	r2, r3
 80090c6:	2300      	movs	r3, #0
 80090c8:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80090ca:	78fb      	ldrb	r3, [r7, #3]
 80090cc:	015a      	lsls	r2, r3, #5
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	4413      	add	r3, r2
 80090d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	78fa      	ldrb	r2, [r7, #3]
 80090da:	0151      	lsls	r1, r2, #5
 80090dc:	693a      	ldr	r2, [r7, #16]
 80090de:	440a      	add	r2, r1
 80090e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090e4:	f043 0302 	orr.w	r3, r3, #2
 80090e8:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090f0:	699a      	ldr	r2, [r3, #24]
 80090f2:	78fb      	ldrb	r3, [r7, #3]
 80090f4:	f003 030f 	and.w	r3, r3, #15
 80090f8:	2101      	movs	r1, #1
 80090fa:	fa01 f303 	lsl.w	r3, r1, r3
 80090fe:	6939      	ldr	r1, [r7, #16]
 8009100:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009104:	4313      	orrs	r3, r2
 8009106:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	699b      	ldr	r3, [r3, #24]
 800910c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009114:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009118:	2b00      	cmp	r3, #0
 800911a:	da03      	bge.n	8009124 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800911c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009120:	61bb      	str	r3, [r7, #24]
 8009122:	e001      	b.n	8009128 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8009124:	2300      	movs	r3, #0
 8009126:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f7ff fef9 	bl	8008f20 <USB_GetHostSpeed>
 800912e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009130:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009134:	2b02      	cmp	r3, #2
 8009136:	d106      	bne.n	8009146 <USB_HC_Init+0x1d6>
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2b02      	cmp	r3, #2
 800913c:	d003      	beq.n	8009146 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800913e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009142:	617b      	str	r3, [r7, #20]
 8009144:	e001      	b.n	800914a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009146:	2300      	movs	r3, #0
 8009148:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800914a:	787b      	ldrb	r3, [r7, #1]
 800914c:	059b      	lsls	r3, r3, #22
 800914e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009152:	78bb      	ldrb	r3, [r7, #2]
 8009154:	02db      	lsls	r3, r3, #11
 8009156:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800915a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800915c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009160:	049b      	lsls	r3, r3, #18
 8009162:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009166:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8009168:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800916a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800916e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	431a      	orrs	r2, r3
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009178:	78fa      	ldrb	r2, [r7, #3]
 800917a:	0151      	lsls	r1, r2, #5
 800917c:	693a      	ldr	r2, [r7, #16]
 800917e:	440a      	add	r2, r1
 8009180:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009184:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009188:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800918a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800918e:	2b03      	cmp	r3, #3
 8009190:	d003      	beq.n	800919a <USB_HC_Init+0x22a>
 8009192:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009196:	2b01      	cmp	r3, #1
 8009198:	d10f      	bne.n	80091ba <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800919a:	78fb      	ldrb	r3, [r7, #3]
 800919c:	015a      	lsls	r2, r3, #5
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	4413      	add	r3, r2
 80091a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	78fa      	ldrb	r2, [r7, #3]
 80091aa:	0151      	lsls	r1, r2, #5
 80091ac:	693a      	ldr	r2, [r7, #16]
 80091ae:	440a      	add	r2, r1
 80091b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80091b8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80091ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3720      	adds	r7, #32
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	40040000 	.word	0x40040000

080091c8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b08c      	sub	sp, #48	; 0x30
 80091cc:	af02      	add	r7, sp, #8
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	4613      	mov	r3, r2
 80091d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	785b      	ldrb	r3, [r3, #1]
 80091de:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80091e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091e4:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	4a5d      	ldr	r2, [pc, #372]	; (8009360 <USB_HC_StartXfer+0x198>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d12f      	bne.n	800924e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80091ee:	79fb      	ldrb	r3, [r7, #7]
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d11c      	bne.n	800922e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	7c9b      	ldrb	r3, [r3, #18]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d003      	beq.n	8009204 <USB_HC_StartXfer+0x3c>
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	7c9b      	ldrb	r3, [r3, #18]
 8009200:	2b02      	cmp	r3, #2
 8009202:	d124      	bne.n	800924e <USB_HC_StartXfer+0x86>
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	799b      	ldrb	r3, [r3, #6]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d120      	bne.n	800924e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	015a      	lsls	r2, r3, #5
 8009210:	6a3b      	ldr	r3, [r7, #32]
 8009212:	4413      	add	r3, r2
 8009214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009218:	68db      	ldr	r3, [r3, #12]
 800921a:	69fa      	ldr	r2, [r7, #28]
 800921c:	0151      	lsls	r1, r2, #5
 800921e:	6a3a      	ldr	r2, [r7, #32]
 8009220:	440a      	add	r2, r1
 8009222:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800922a:	60d3      	str	r3, [r2, #12]
 800922c:	e00f      	b.n	800924e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	791b      	ldrb	r3, [r3, #4]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d10b      	bne.n	800924e <USB_HC_StartXfer+0x86>
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	795b      	ldrb	r3, [r3, #5]
 800923a:	2b01      	cmp	r3, #1
 800923c:	d107      	bne.n	800924e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	785b      	ldrb	r3, [r3, #1]
 8009242:	4619      	mov	r1, r3
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f000 fb6b 	bl	8009920 <USB_DoPing>
        return HAL_OK;
 800924a:	2300      	movs	r3, #0
 800924c:	e232      	b.n	80096b4 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	799b      	ldrb	r3, [r3, #6]
 8009252:	2b01      	cmp	r3, #1
 8009254:	d158      	bne.n	8009308 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8009256:	2301      	movs	r3, #1
 8009258:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	78db      	ldrb	r3, [r3, #3]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d007      	beq.n	8009272 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009262:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009264:	68ba      	ldr	r2, [r7, #8]
 8009266:	8a92      	ldrh	r2, [r2, #20]
 8009268:	fb03 f202 	mul.w	r2, r3, r2
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	61da      	str	r2, [r3, #28]
 8009270:	e07c      	b.n	800936c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	7c9b      	ldrb	r3, [r3, #18]
 8009276:	2b01      	cmp	r3, #1
 8009278:	d130      	bne.n	80092dc <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	6a1b      	ldr	r3, [r3, #32]
 800927e:	2bbc      	cmp	r3, #188	; 0xbc
 8009280:	d918      	bls.n	80092b4 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	8a9b      	ldrh	r3, [r3, #20]
 8009286:	461a      	mov	r2, r3
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	69da      	ldr	r2, [r3, #28]
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	2b01      	cmp	r3, #1
 800929a:	d003      	beq.n	80092a4 <USB_HC_StartXfer+0xdc>
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d103      	bne.n	80092ac <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	2202      	movs	r2, #2
 80092a8:	60da      	str	r2, [r3, #12]
 80092aa:	e05f      	b.n	800936c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	2201      	movs	r2, #1
 80092b0:	60da      	str	r2, [r3, #12]
 80092b2:	e05b      	b.n	800936c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	6a1a      	ldr	r2, [r3, #32]
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d007      	beq.n	80092d4 <USB_HC_StartXfer+0x10c>
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	2b02      	cmp	r3, #2
 80092ca:	d003      	beq.n	80092d4 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	2204      	movs	r2, #4
 80092d0:	60da      	str	r2, [r3, #12]
 80092d2:	e04b      	b.n	800936c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	2203      	movs	r2, #3
 80092d8:	60da      	str	r2, [r3, #12]
 80092da:	e047      	b.n	800936c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80092dc:	79fb      	ldrb	r3, [r7, #7]
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d10d      	bne.n	80092fe <USB_HC_StartXfer+0x136>
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	6a1b      	ldr	r3, [r3, #32]
 80092e6:	68ba      	ldr	r2, [r7, #8]
 80092e8:	8a92      	ldrh	r2, [r2, #20]
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d907      	bls.n	80092fe <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80092ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80092f0:	68ba      	ldr	r2, [r7, #8]
 80092f2:	8a92      	ldrh	r2, [r2, #20]
 80092f4:	fb03 f202 	mul.w	r2, r3, r2
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	61da      	str	r2, [r3, #28]
 80092fc:	e036      	b.n	800936c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	6a1a      	ldr	r2, [r3, #32]
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	61da      	str	r2, [r3, #28]
 8009306:	e031      	b.n	800936c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	6a1b      	ldr	r3, [r3, #32]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d018      	beq.n	8009342 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	6a1b      	ldr	r3, [r3, #32]
 8009314:	68ba      	ldr	r2, [r7, #8]
 8009316:	8a92      	ldrh	r2, [r2, #20]
 8009318:	4413      	add	r3, r2
 800931a:	3b01      	subs	r3, #1
 800931c:	68ba      	ldr	r2, [r7, #8]
 800931e:	8a92      	ldrh	r2, [r2, #20]
 8009320:	fbb3 f3f2 	udiv	r3, r3, r2
 8009324:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 8009326:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009328:	8b7b      	ldrh	r3, [r7, #26]
 800932a:	429a      	cmp	r2, r3
 800932c:	d90b      	bls.n	8009346 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800932e:	8b7b      	ldrh	r3, [r7, #26]
 8009330:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009332:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009334:	68ba      	ldr	r2, [r7, #8]
 8009336:	8a92      	ldrh	r2, [r2, #20]
 8009338:	fb03 f202 	mul.w	r2, r3, r2
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	61da      	str	r2, [r3, #28]
 8009340:	e001      	b.n	8009346 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8009342:	2301      	movs	r3, #1
 8009344:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	78db      	ldrb	r3, [r3, #3]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00a      	beq.n	8009364 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800934e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009350:	68ba      	ldr	r2, [r7, #8]
 8009352:	8a92      	ldrh	r2, [r2, #20]
 8009354:	fb03 f202 	mul.w	r2, r3, r2
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	61da      	str	r2, [r3, #28]
 800935c:	e006      	b.n	800936c <USB_HC_StartXfer+0x1a4>
 800935e:	bf00      	nop
 8009360:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	6a1a      	ldr	r2, [r3, #32]
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	69db      	ldr	r3, [r3, #28]
 8009370:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009374:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009376:	04d9      	lsls	r1, r3, #19
 8009378:	4ba3      	ldr	r3, [pc, #652]	; (8009608 <USB_HC_StartXfer+0x440>)
 800937a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800937c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	7d9b      	ldrb	r3, [r3, #22]
 8009382:	075b      	lsls	r3, r3, #29
 8009384:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009388:	69f9      	ldr	r1, [r7, #28]
 800938a:	0148      	lsls	r0, r1, #5
 800938c:	6a39      	ldr	r1, [r7, #32]
 800938e:	4401      	add	r1, r0
 8009390:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009394:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009396:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009398:	79fb      	ldrb	r3, [r7, #7]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d009      	beq.n	80093b2 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	6999      	ldr	r1, [r3, #24]
 80093a2:	69fb      	ldr	r3, [r7, #28]
 80093a4:	015a      	lsls	r2, r3, #5
 80093a6:	6a3b      	ldr	r3, [r7, #32]
 80093a8:	4413      	add	r3, r2
 80093aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093ae:	460a      	mov	r2, r1
 80093b0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80093b2:	6a3b      	ldr	r3, [r7, #32]
 80093b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	f003 0301 	and.w	r3, r3, #1
 80093be:	2b00      	cmp	r3, #0
 80093c0:	bf0c      	ite	eq
 80093c2:	2301      	moveq	r3, #1
 80093c4:	2300      	movne	r3, #0
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	015a      	lsls	r2, r3, #5
 80093ce:	6a3b      	ldr	r3, [r7, #32]
 80093d0:	4413      	add	r3, r2
 80093d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	69fa      	ldr	r2, [r7, #28]
 80093da:	0151      	lsls	r1, r2, #5
 80093dc:	6a3a      	ldr	r2, [r7, #32]
 80093de:	440a      	add	r2, r1
 80093e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093e4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80093e8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80093ea:	69fb      	ldr	r3, [r7, #28]
 80093ec:	015a      	lsls	r2, r3, #5
 80093ee:	6a3b      	ldr	r3, [r7, #32]
 80093f0:	4413      	add	r3, r2
 80093f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093f6:	681a      	ldr	r2, [r3, #0]
 80093f8:	7e7b      	ldrb	r3, [r7, #25]
 80093fa:	075b      	lsls	r3, r3, #29
 80093fc:	69f9      	ldr	r1, [r7, #28]
 80093fe:	0148      	lsls	r0, r1, #5
 8009400:	6a39      	ldr	r1, [r7, #32]
 8009402:	4401      	add	r1, r0
 8009404:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009408:	4313      	orrs	r3, r2
 800940a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	799b      	ldrb	r3, [r3, #6]
 8009410:	2b01      	cmp	r3, #1
 8009412:	f040 80c3 	bne.w	800959c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	7c5b      	ldrb	r3, [r3, #17]
 800941a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800941c:	68ba      	ldr	r2, [r7, #8]
 800941e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009420:	4313      	orrs	r3, r2
 8009422:	69fa      	ldr	r2, [r7, #28]
 8009424:	0151      	lsls	r1, r2, #5
 8009426:	6a3a      	ldr	r2, [r7, #32]
 8009428:	440a      	add	r2, r1
 800942a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800942e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009432:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	015a      	lsls	r2, r3, #5
 8009438:	6a3b      	ldr	r3, [r7, #32]
 800943a:	4413      	add	r3, r2
 800943c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	69fa      	ldr	r2, [r7, #28]
 8009444:	0151      	lsls	r1, r2, #5
 8009446:	6a3a      	ldr	r2, [r7, #32]
 8009448:	440a      	add	r2, r1
 800944a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800944e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009452:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	79db      	ldrb	r3, [r3, #7]
 8009458:	2b01      	cmp	r3, #1
 800945a:	d123      	bne.n	80094a4 <USB_HC_StartXfer+0x2dc>
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	78db      	ldrb	r3, [r3, #3]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d11f      	bne.n	80094a4 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009464:	69fb      	ldr	r3, [r7, #28]
 8009466:	015a      	lsls	r2, r3, #5
 8009468:	6a3b      	ldr	r3, [r7, #32]
 800946a:	4413      	add	r3, r2
 800946c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	69fa      	ldr	r2, [r7, #28]
 8009474:	0151      	lsls	r1, r2, #5
 8009476:	6a3a      	ldr	r2, [r7, #32]
 8009478:	440a      	add	r2, r1
 800947a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800947e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009482:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8009484:	69fb      	ldr	r3, [r7, #28]
 8009486:	015a      	lsls	r2, r3, #5
 8009488:	6a3b      	ldr	r3, [r7, #32]
 800948a:	4413      	add	r3, r2
 800948c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	69fa      	ldr	r2, [r7, #28]
 8009494:	0151      	lsls	r1, r2, #5
 8009496:	6a3a      	ldr	r2, [r7, #32]
 8009498:	440a      	add	r2, r1
 800949a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800949e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094a2:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	7c9b      	ldrb	r3, [r3, #18]
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d003      	beq.n	80094b4 <USB_HC_StartXfer+0x2ec>
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	7c9b      	ldrb	r3, [r3, #18]
 80094b0:	2b03      	cmp	r3, #3
 80094b2:	d117      	bne.n	80094e4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d113      	bne.n	80094e4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	78db      	ldrb	r3, [r3, #3]
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d10f      	bne.n	80094e4 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	015a      	lsls	r2, r3, #5
 80094c8:	6a3b      	ldr	r3, [r7, #32]
 80094ca:	4413      	add	r3, r2
 80094cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	69fa      	ldr	r2, [r7, #28]
 80094d4:	0151      	lsls	r1, r2, #5
 80094d6:	6a3a      	ldr	r2, [r7, #32]
 80094d8:	440a      	add	r2, r1
 80094da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094e2:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	7c9b      	ldrb	r3, [r3, #18]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d162      	bne.n	80095b2 <USB_HC_StartXfer+0x3ea>
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	78db      	ldrb	r3, [r3, #3]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d15e      	bne.n	80095b2 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	3b01      	subs	r3, #1
 80094fa:	2b03      	cmp	r3, #3
 80094fc:	d858      	bhi.n	80095b0 <USB_HC_StartXfer+0x3e8>
 80094fe:	a201      	add	r2, pc, #4	; (adr r2, 8009504 <USB_HC_StartXfer+0x33c>)
 8009500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009504:	08009515 	.word	0x08009515
 8009508:	08009537 	.word	0x08009537
 800950c:	08009559 	.word	0x08009559
 8009510:	0800957b 	.word	0x0800957b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	015a      	lsls	r2, r3, #5
 8009518:	6a3b      	ldr	r3, [r7, #32]
 800951a:	4413      	add	r3, r2
 800951c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	69fa      	ldr	r2, [r7, #28]
 8009524:	0151      	lsls	r1, r2, #5
 8009526:	6a3a      	ldr	r2, [r7, #32]
 8009528:	440a      	add	r2, r1
 800952a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800952e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009532:	6053      	str	r3, [r2, #4]
          break;
 8009534:	e03d      	b.n	80095b2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	015a      	lsls	r2, r3, #5
 800953a:	6a3b      	ldr	r3, [r7, #32]
 800953c:	4413      	add	r3, r2
 800953e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	69fa      	ldr	r2, [r7, #28]
 8009546:	0151      	lsls	r1, r2, #5
 8009548:	6a3a      	ldr	r2, [r7, #32]
 800954a:	440a      	add	r2, r1
 800954c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009550:	f043 030e 	orr.w	r3, r3, #14
 8009554:	6053      	str	r3, [r2, #4]
          break;
 8009556:	e02c      	b.n	80095b2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	015a      	lsls	r2, r3, #5
 800955c:	6a3b      	ldr	r3, [r7, #32]
 800955e:	4413      	add	r3, r2
 8009560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	69fa      	ldr	r2, [r7, #28]
 8009568:	0151      	lsls	r1, r2, #5
 800956a:	6a3a      	ldr	r2, [r7, #32]
 800956c:	440a      	add	r2, r1
 800956e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009576:	6053      	str	r3, [r2, #4]
          break;
 8009578:	e01b      	b.n	80095b2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800957a:	69fb      	ldr	r3, [r7, #28]
 800957c:	015a      	lsls	r2, r3, #5
 800957e:	6a3b      	ldr	r3, [r7, #32]
 8009580:	4413      	add	r3, r2
 8009582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	69fa      	ldr	r2, [r7, #28]
 800958a:	0151      	lsls	r1, r2, #5
 800958c:	6a3a      	ldr	r2, [r7, #32]
 800958e:	440a      	add	r2, r1
 8009590:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009594:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009598:	6053      	str	r3, [r2, #4]
          break;
 800959a:	e00a      	b.n	80095b2 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800959c:	69fb      	ldr	r3, [r7, #28]
 800959e:	015a      	lsls	r2, r3, #5
 80095a0:	6a3b      	ldr	r3, [r7, #32]
 80095a2:	4413      	add	r3, r2
 80095a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095a8:	461a      	mov	r2, r3
 80095aa:	2300      	movs	r3, #0
 80095ac:	6053      	str	r3, [r2, #4]
 80095ae:	e000      	b.n	80095b2 <USB_HC_StartXfer+0x3ea>
          break;
 80095b0:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80095b2:	69fb      	ldr	r3, [r7, #28]
 80095b4:	015a      	lsls	r2, r3, #5
 80095b6:	6a3b      	ldr	r3, [r7, #32]
 80095b8:	4413      	add	r3, r2
 80095ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80095c8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	78db      	ldrb	r3, [r3, #3]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d004      	beq.n	80095dc <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095d8:	613b      	str	r3, [r7, #16]
 80095da:	e003      	b.n	80095e4 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80095e2:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80095ea:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	015a      	lsls	r2, r3, #5
 80095f0:	6a3b      	ldr	r3, [r7, #32]
 80095f2:	4413      	add	r3, r2
 80095f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095f8:	461a      	mov	r2, r3
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80095fe:	79fb      	ldrb	r3, [r7, #7]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d003      	beq.n	800960c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8009604:	2300      	movs	r3, #0
 8009606:	e055      	b.n	80096b4 <USB_HC_StartXfer+0x4ec>
 8009608:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	78db      	ldrb	r3, [r3, #3]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d14e      	bne.n	80096b2 <USB_HC_StartXfer+0x4ea>
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	6a1b      	ldr	r3, [r3, #32]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d04a      	beq.n	80096b2 <USB_HC_StartXfer+0x4ea>
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	79db      	ldrb	r3, [r3, #7]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d146      	bne.n	80096b2 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	7c9b      	ldrb	r3, [r3, #18]
 8009628:	2b03      	cmp	r3, #3
 800962a:	d831      	bhi.n	8009690 <USB_HC_StartXfer+0x4c8>
 800962c:	a201      	add	r2, pc, #4	; (adr r2, 8009634 <USB_HC_StartXfer+0x46c>)
 800962e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009632:	bf00      	nop
 8009634:	08009645 	.word	0x08009645
 8009638:	08009669 	.word	0x08009669
 800963c:	08009645 	.word	0x08009645
 8009640:	08009669 	.word	0x08009669
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	6a1b      	ldr	r3, [r3, #32]
 8009648:	3303      	adds	r3, #3
 800964a:	089b      	lsrs	r3, r3, #2
 800964c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800964e:	8afa      	ldrh	r2, [r7, #22]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009654:	b29b      	uxth	r3, r3
 8009656:	429a      	cmp	r2, r3
 8009658:	d91c      	bls.n	8009694 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	699b      	ldr	r3, [r3, #24]
 800965e:	f043 0220 	orr.w	r2, r3, #32
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	619a      	str	r2, [r3, #24]
        }
        break;
 8009666:	e015      	b.n	8009694 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	6a1b      	ldr	r3, [r3, #32]
 800966c:	3303      	adds	r3, #3
 800966e:	089b      	lsrs	r3, r3, #2
 8009670:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009672:	8afa      	ldrh	r2, [r7, #22]
 8009674:	6a3b      	ldr	r3, [r7, #32]
 8009676:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800967a:	691b      	ldr	r3, [r3, #16]
 800967c:	b29b      	uxth	r3, r3
 800967e:	429a      	cmp	r2, r3
 8009680:	d90a      	bls.n	8009698 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	699b      	ldr	r3, [r3, #24]
 8009686:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	619a      	str	r2, [r3, #24]
        }
        break;
 800968e:	e003      	b.n	8009698 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8009690:	bf00      	nop
 8009692:	e002      	b.n	800969a <USB_HC_StartXfer+0x4d2>
        break;
 8009694:	bf00      	nop
 8009696:	e000      	b.n	800969a <USB_HC_StartXfer+0x4d2>
        break;
 8009698:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	6999      	ldr	r1, [r3, #24]
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	785a      	ldrb	r2, [r3, #1]
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	6a1b      	ldr	r3, [r3, #32]
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	2000      	movs	r0, #0
 80096aa:	9000      	str	r0, [sp, #0]
 80096ac:	68f8      	ldr	r0, [r7, #12]
 80096ae:	f7ff f9f3 	bl	8008a98 <USB_WritePacket>
  }

  return HAL_OK;
 80096b2:	2300      	movs	r3, #0
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3728      	adds	r7, #40	; 0x28
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80096bc:	b480      	push	{r7}
 80096be:	b085      	sub	sp, #20
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096ce:	695b      	ldr	r3, [r3, #20]
 80096d0:	b29b      	uxth	r3, r3
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3714      	adds	r7, #20
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr

080096de <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80096de:	b480      	push	{r7}
 80096e0:	b089      	sub	sp, #36	; 0x24
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
 80096e6:	460b      	mov	r3, r1
 80096e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80096ee:	78fb      	ldrb	r3, [r7, #3]
 80096f0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80096f2:	2300      	movs	r3, #0
 80096f4:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80096f6:	69bb      	ldr	r3, [r7, #24]
 80096f8:	015a      	lsls	r2, r3, #5
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	4413      	add	r3, r2
 80096fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	0c9b      	lsrs	r3, r3, #18
 8009706:	f003 0303 	and.w	r3, r3, #3
 800970a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800970c:	69bb      	ldr	r3, [r7, #24]
 800970e:	015a      	lsls	r2, r3, #5
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	4413      	add	r3, r2
 8009714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	0fdb      	lsrs	r3, r3, #31
 800971c:	f003 0301 	and.w	r3, r3, #1
 8009720:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8009722:	69bb      	ldr	r3, [r7, #24]
 8009724:	015a      	lsls	r2, r3, #5
 8009726:	69fb      	ldr	r3, [r7, #28]
 8009728:	4413      	add	r3, r2
 800972a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	0fdb      	lsrs	r3, r3, #31
 8009732:	f003 0301 	and.w	r3, r3, #1
 8009736:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	f003 0320 	and.w	r3, r3, #32
 8009740:	2b20      	cmp	r3, #32
 8009742:	d10d      	bne.n	8009760 <USB_HC_Halt+0x82>
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d10a      	bne.n	8009760 <USB_HC_Halt+0x82>
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d005      	beq.n	800975c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	2b01      	cmp	r3, #1
 8009754:	d002      	beq.n	800975c <USB_HC_Halt+0x7e>
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	2b03      	cmp	r3, #3
 800975a:	d101      	bne.n	8009760 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800975c:	2300      	movs	r3, #0
 800975e:	e0d8      	b.n	8009912 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d002      	beq.n	800976c <USB_HC_Halt+0x8e>
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	2b02      	cmp	r3, #2
 800976a:	d173      	bne.n	8009854 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800976c:	69bb      	ldr	r3, [r7, #24]
 800976e:	015a      	lsls	r2, r3, #5
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	4413      	add	r3, r2
 8009774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	69ba      	ldr	r2, [r7, #24]
 800977c:	0151      	lsls	r1, r2, #5
 800977e:	69fa      	ldr	r2, [r7, #28]
 8009780:	440a      	add	r2, r1
 8009782:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009786:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800978a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	f003 0320 	and.w	r3, r3, #32
 8009794:	2b00      	cmp	r3, #0
 8009796:	d14a      	bne.n	800982e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d133      	bne.n	800980c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80097a4:	69bb      	ldr	r3, [r7, #24]
 80097a6:	015a      	lsls	r2, r3, #5
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	4413      	add	r3, r2
 80097ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	69ba      	ldr	r2, [r7, #24]
 80097b4:	0151      	lsls	r1, r2, #5
 80097b6:	69fa      	ldr	r2, [r7, #28]
 80097b8:	440a      	add	r2, r1
 80097ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80097c2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	015a      	lsls	r2, r3, #5
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	4413      	add	r3, r2
 80097cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	69ba      	ldr	r2, [r7, #24]
 80097d4:	0151      	lsls	r1, r2, #5
 80097d6:	69fa      	ldr	r2, [r7, #28]
 80097d8:	440a      	add	r2, r1
 80097da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80097e2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	3301      	adds	r3, #1
 80097e8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097f0:	d82e      	bhi.n	8009850 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80097f2:	69bb      	ldr	r3, [r7, #24]
 80097f4:	015a      	lsls	r2, r3, #5
 80097f6:	69fb      	ldr	r3, [r7, #28]
 80097f8:	4413      	add	r3, r2
 80097fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009804:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009808:	d0ec      	beq.n	80097e4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800980a:	e081      	b.n	8009910 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800980c:	69bb      	ldr	r3, [r7, #24]
 800980e:	015a      	lsls	r2, r3, #5
 8009810:	69fb      	ldr	r3, [r7, #28]
 8009812:	4413      	add	r3, r2
 8009814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	69ba      	ldr	r2, [r7, #24]
 800981c:	0151      	lsls	r1, r2, #5
 800981e:	69fa      	ldr	r2, [r7, #28]
 8009820:	440a      	add	r2, r1
 8009822:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009826:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800982a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800982c:	e070      	b.n	8009910 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800982e:	69bb      	ldr	r3, [r7, #24]
 8009830:	015a      	lsls	r2, r3, #5
 8009832:	69fb      	ldr	r3, [r7, #28]
 8009834:	4413      	add	r3, r2
 8009836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	69ba      	ldr	r2, [r7, #24]
 800983e:	0151      	lsls	r1, r2, #5
 8009840:	69fa      	ldr	r2, [r7, #28]
 8009842:	440a      	add	r2, r1
 8009844:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009848:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800984c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800984e:	e05f      	b.n	8009910 <USB_HC_Halt+0x232>
            break;
 8009850:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009852:	e05d      	b.n	8009910 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009854:	69bb      	ldr	r3, [r7, #24]
 8009856:	015a      	lsls	r2, r3, #5
 8009858:	69fb      	ldr	r3, [r7, #28]
 800985a:	4413      	add	r3, r2
 800985c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	69ba      	ldr	r2, [r7, #24]
 8009864:	0151      	lsls	r1, r2, #5
 8009866:	69fa      	ldr	r2, [r7, #28]
 8009868:	440a      	add	r2, r1
 800986a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800986e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009872:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800987a:	691b      	ldr	r3, [r3, #16]
 800987c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009880:	2b00      	cmp	r3, #0
 8009882:	d133      	bne.n	80098ec <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009884:	69bb      	ldr	r3, [r7, #24]
 8009886:	015a      	lsls	r2, r3, #5
 8009888:	69fb      	ldr	r3, [r7, #28]
 800988a:	4413      	add	r3, r2
 800988c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	69ba      	ldr	r2, [r7, #24]
 8009894:	0151      	lsls	r1, r2, #5
 8009896:	69fa      	ldr	r2, [r7, #28]
 8009898:	440a      	add	r2, r1
 800989a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800989e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80098a2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80098a4:	69bb      	ldr	r3, [r7, #24]
 80098a6:	015a      	lsls	r2, r3, #5
 80098a8:	69fb      	ldr	r3, [r7, #28]
 80098aa:	4413      	add	r3, r2
 80098ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	69ba      	ldr	r2, [r7, #24]
 80098b4:	0151      	lsls	r1, r2, #5
 80098b6:	69fa      	ldr	r2, [r7, #28]
 80098b8:	440a      	add	r2, r1
 80098ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80098c2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	3301      	adds	r3, #1
 80098c8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80098d0:	d81d      	bhi.n	800990e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	015a      	lsls	r2, r3, #5
 80098d6:	69fb      	ldr	r3, [r7, #28]
 80098d8:	4413      	add	r3, r2
 80098da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098e8:	d0ec      	beq.n	80098c4 <USB_HC_Halt+0x1e6>
 80098ea:	e011      	b.n	8009910 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80098ec:	69bb      	ldr	r3, [r7, #24]
 80098ee:	015a      	lsls	r2, r3, #5
 80098f0:	69fb      	ldr	r3, [r7, #28]
 80098f2:	4413      	add	r3, r2
 80098f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	69ba      	ldr	r2, [r7, #24]
 80098fc:	0151      	lsls	r1, r2, #5
 80098fe:	69fa      	ldr	r2, [r7, #28]
 8009900:	440a      	add	r2, r1
 8009902:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800990a:	6013      	str	r3, [r2, #0]
 800990c:	e000      	b.n	8009910 <USB_HC_Halt+0x232>
          break;
 800990e:	bf00      	nop
    }
  }

  return HAL_OK;
 8009910:	2300      	movs	r3, #0
}
 8009912:	4618      	mov	r0, r3
 8009914:	3724      	adds	r7, #36	; 0x24
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr
	...

08009920 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009920:	b480      	push	{r7}
 8009922:	b087      	sub	sp, #28
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	460b      	mov	r3, r1
 800992a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009930:	78fb      	ldrb	r3, [r7, #3]
 8009932:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009934:	2301      	movs	r3, #1
 8009936:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	04da      	lsls	r2, r3, #19
 800993c:	4b15      	ldr	r3, [pc, #84]	; (8009994 <USB_DoPing+0x74>)
 800993e:	4013      	ands	r3, r2
 8009940:	693a      	ldr	r2, [r7, #16]
 8009942:	0151      	lsls	r1, r2, #5
 8009944:	697a      	ldr	r2, [r7, #20]
 8009946:	440a      	add	r2, r1
 8009948:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800994c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009950:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	015a      	lsls	r2, r3, #5
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	4413      	add	r3, r2
 800995a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009968:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009970:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	015a      	lsls	r2, r3, #5
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	4413      	add	r3, r2
 800997a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800997e:	461a      	mov	r2, r3
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009984:	2300      	movs	r3, #0
}
 8009986:	4618      	mov	r0, r3
 8009988:	371c      	adds	r7, #28
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	1ff80000 	.word	0x1ff80000

08009998 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b088      	sub	sp, #32
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80099a0:	2300      	movs	r3, #0
 80099a2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80099a8:	2300      	movs	r3, #0
 80099aa:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f7fe ffb6 	bl	800891e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80099b2:	2110      	movs	r1, #16
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f7ff f80f 	bl	80089d8 <USB_FlushTxFifo>
 80099ba:	4603      	mov	r3, r0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d001      	beq.n	80099c4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80099c0:	2301      	movs	r3, #1
 80099c2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f7ff f839 	bl	8008a3c <USB_FlushRxFifo>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d001      	beq.n	80099d4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80099d0:	2301      	movs	r3, #1
 80099d2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80099d4:	2300      	movs	r3, #0
 80099d6:	61bb      	str	r3, [r7, #24]
 80099d8:	e01f      	b.n	8009a1a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	015a      	lsls	r2, r3, #5
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	4413      	add	r3, r2
 80099e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80099f0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80099f8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009a00:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009a02:	69bb      	ldr	r3, [r7, #24]
 8009a04:	015a      	lsls	r2, r3, #5
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	4413      	add	r3, r2
 8009a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a0e:	461a      	mov	r2, r3
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	3301      	adds	r3, #1
 8009a18:	61bb      	str	r3, [r7, #24]
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	2b0f      	cmp	r3, #15
 8009a1e:	d9dc      	bls.n	80099da <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009a20:	2300      	movs	r3, #0
 8009a22:	61bb      	str	r3, [r7, #24]
 8009a24:	e034      	b.n	8009a90 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	015a      	lsls	r2, r3, #5
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a3c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a44:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009a4c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009a4e:	69bb      	ldr	r3, [r7, #24]
 8009a50:	015a      	lsls	r2, r3, #5
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	4413      	add	r3, r2
 8009a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	3301      	adds	r3, #1
 8009a64:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a6c:	d80c      	bhi.n	8009a88 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	015a      	lsls	r2, r3, #5
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	4413      	add	r3, r2
 8009a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a84:	d0ec      	beq.n	8009a60 <USB_StopHost+0xc8>
 8009a86:	e000      	b.n	8009a8a <USB_StopHost+0xf2>
        break;
 8009a88:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009a8a:	69bb      	ldr	r3, [r7, #24]
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	61bb      	str	r3, [r7, #24]
 8009a90:	69bb      	ldr	r3, [r7, #24]
 8009a92:	2b0f      	cmp	r3, #15
 8009a94:	d9c7      	bls.n	8009a26 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8009aa2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8009aaa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f7fe ff25 	bl	80088fc <USB_EnableGlobalInt>

  return ret;
 8009ab2:	7ffb      	ldrb	r3, [r7, #31]
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3720      	adds	r7, #32
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009abc:	b590      	push	{r4, r7, lr}
 8009abe:	b089      	sub	sp, #36	; 0x24
 8009ac0:	af04      	add	r7, sp, #16
 8009ac2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	2202      	movs	r2, #2
 8009ac8:	2102      	movs	r1, #2
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 fc85 	bl	800a3da <USBH_FindInterface>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009ad4:	7bfb      	ldrb	r3, [r7, #15]
 8009ad6:	2bff      	cmp	r3, #255	; 0xff
 8009ad8:	d002      	beq.n	8009ae0 <USBH_CDC_InterfaceInit+0x24>
 8009ada:	7bfb      	ldrb	r3, [r7, #15]
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d901      	bls.n	8009ae4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009ae0:	2302      	movs	r3, #2
 8009ae2:	e13d      	b.n	8009d60 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009ae4:	7bfb      	ldrb	r3, [r7, #15]
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 fc5a 	bl	800a3a2 <USBH_SelectInterface>
 8009aee:	4603      	mov	r3, r0
 8009af0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009af2:	7bbb      	ldrb	r3, [r7, #14]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d001      	beq.n	8009afc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009af8:	2302      	movs	r3, #2
 8009afa:	e131      	b.n	8009d60 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009b02:	2050      	movs	r0, #80	; 0x50
 8009b04:	f001 fb10 	bl	800b128 <malloc>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b12:	69db      	ldr	r3, [r3, #28]
 8009b14:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d101      	bne.n	8009b20 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009b1c:	2302      	movs	r3, #2
 8009b1e:	e11f      	b.n	8009d60 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009b20:	2250      	movs	r2, #80	; 0x50
 8009b22:	2100      	movs	r1, #0
 8009b24:	68b8      	ldr	r0, [r7, #8]
 8009b26:	f001 fbbb 	bl	800b2a0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009b2a:	7bfb      	ldrb	r3, [r7, #15]
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	211a      	movs	r1, #26
 8009b30:	fb01 f303 	mul.w	r3, r1, r3
 8009b34:	4413      	add	r3, r2
 8009b36:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	b25b      	sxtb	r3, r3
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	da15      	bge.n	8009b6e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009b42:	7bfb      	ldrb	r3, [r7, #15]
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	211a      	movs	r1, #26
 8009b48:	fb01 f303 	mul.w	r3, r1, r3
 8009b4c:	4413      	add	r3, r2
 8009b4e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009b52:	781a      	ldrb	r2, [r3, #0]
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009b58:	7bfb      	ldrb	r3, [r7, #15]
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	211a      	movs	r1, #26
 8009b5e:	fb01 f303 	mul.w	r3, r1, r3
 8009b62:	4413      	add	r3, r2
 8009b64:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009b68:	881a      	ldrh	r2, [r3, #0]
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	785b      	ldrb	r3, [r3, #1]
 8009b72:	4619      	mov	r1, r3
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 ffba 	bl	800aaee <USBH_AllocPipe>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	7819      	ldrb	r1, [r3, #0]
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	7858      	ldrb	r0, [r3, #1]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009b96:	68ba      	ldr	r2, [r7, #8]
 8009b98:	8952      	ldrh	r2, [r2, #10]
 8009b9a:	9202      	str	r2, [sp, #8]
 8009b9c:	2203      	movs	r2, #3
 8009b9e:	9201      	str	r2, [sp, #4]
 8009ba0:	9300      	str	r3, [sp, #0]
 8009ba2:	4623      	mov	r3, r4
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 ff72 	bl	800aa90 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f001 fa3b 	bl	800b030 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009bba:	2300      	movs	r3, #0
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	210a      	movs	r1, #10
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 fc0a 	bl	800a3da <USBH_FindInterface>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009bca:	7bfb      	ldrb	r3, [r7, #15]
 8009bcc:	2bff      	cmp	r3, #255	; 0xff
 8009bce:	d002      	beq.n	8009bd6 <USBH_CDC_InterfaceInit+0x11a>
 8009bd0:	7bfb      	ldrb	r3, [r7, #15]
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d901      	bls.n	8009bda <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009bd6:	2302      	movs	r3, #2
 8009bd8:	e0c2      	b.n	8009d60 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009bda:	7bfb      	ldrb	r3, [r7, #15]
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	211a      	movs	r1, #26
 8009be0:	fb01 f303 	mul.w	r3, r1, r3
 8009be4:	4413      	add	r3, r2
 8009be6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	b25b      	sxtb	r3, r3
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	da16      	bge.n	8009c20 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009bf2:	7bfb      	ldrb	r3, [r7, #15]
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	211a      	movs	r1, #26
 8009bf8:	fb01 f303 	mul.w	r3, r1, r3
 8009bfc:	4413      	add	r3, r2
 8009bfe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009c02:	781a      	ldrb	r2, [r3, #0]
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009c08:	7bfb      	ldrb	r3, [r7, #15]
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	211a      	movs	r1, #26
 8009c0e:	fb01 f303 	mul.w	r3, r1, r3
 8009c12:	4413      	add	r3, r2
 8009c14:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009c18:	881a      	ldrh	r2, [r3, #0]
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	835a      	strh	r2, [r3, #26]
 8009c1e:	e015      	b.n	8009c4c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009c20:	7bfb      	ldrb	r3, [r7, #15]
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	211a      	movs	r1, #26
 8009c26:	fb01 f303 	mul.w	r3, r1, r3
 8009c2a:	4413      	add	r3, r2
 8009c2c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009c30:	781a      	ldrb	r2, [r3, #0]
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009c36:	7bfb      	ldrb	r3, [r7, #15]
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	211a      	movs	r1, #26
 8009c3c:	fb01 f303 	mul.w	r3, r1, r3
 8009c40:	4413      	add	r3, r2
 8009c42:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009c46:	881a      	ldrh	r2, [r3, #0]
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009c4c:	7bfb      	ldrb	r3, [r7, #15]
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	211a      	movs	r1, #26
 8009c52:	fb01 f303 	mul.w	r3, r1, r3
 8009c56:	4413      	add	r3, r2
 8009c58:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	b25b      	sxtb	r3, r3
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	da16      	bge.n	8009c92 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009c64:	7bfb      	ldrb	r3, [r7, #15]
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	211a      	movs	r1, #26
 8009c6a:	fb01 f303 	mul.w	r3, r1, r3
 8009c6e:	4413      	add	r3, r2
 8009c70:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009c74:	781a      	ldrb	r2, [r3, #0]
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009c7a:	7bfb      	ldrb	r3, [r7, #15]
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	211a      	movs	r1, #26
 8009c80:	fb01 f303 	mul.w	r3, r1, r3
 8009c84:	4413      	add	r3, r2
 8009c86:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009c8a:	881a      	ldrh	r2, [r3, #0]
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	835a      	strh	r2, [r3, #26]
 8009c90:	e015      	b.n	8009cbe <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009c92:	7bfb      	ldrb	r3, [r7, #15]
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	211a      	movs	r1, #26
 8009c98:	fb01 f303 	mul.w	r3, r1, r3
 8009c9c:	4413      	add	r3, r2
 8009c9e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009ca2:	781a      	ldrb	r2, [r3, #0]
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009ca8:	7bfb      	ldrb	r3, [r7, #15]
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	211a      	movs	r1, #26
 8009cae:	fb01 f303 	mul.w	r3, r1, r3
 8009cb2:	4413      	add	r3, r2
 8009cb4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009cb8:	881a      	ldrh	r2, [r3, #0]
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	7b9b      	ldrb	r3, [r3, #14]
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 ff12 	bl	800aaee <USBH_AllocPipe>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	461a      	mov	r2, r3
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	7bdb      	ldrb	r3, [r3, #15]
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 ff08 	bl	800aaee <USBH_AllocPipe>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	7b59      	ldrb	r1, [r3, #13]
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	7b98      	ldrb	r0, [r3, #14]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009cfa:	68ba      	ldr	r2, [r7, #8]
 8009cfc:	8b12      	ldrh	r2, [r2, #24]
 8009cfe:	9202      	str	r2, [sp, #8]
 8009d00:	2202      	movs	r2, #2
 8009d02:	9201      	str	r2, [sp, #4]
 8009d04:	9300      	str	r3, [sp, #0]
 8009d06:	4623      	mov	r3, r4
 8009d08:	4602      	mov	r2, r0
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 fec0 	bl	800aa90 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	7b19      	ldrb	r1, [r3, #12]
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	7bd8      	ldrb	r0, [r3, #15]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009d24:	68ba      	ldr	r2, [r7, #8]
 8009d26:	8b52      	ldrh	r2, [r2, #26]
 8009d28:	9202      	str	r2, [sp, #8]
 8009d2a:	2202      	movs	r2, #2
 8009d2c:	9201      	str	r2, [sp, #4]
 8009d2e:	9300      	str	r3, [sp, #0]
 8009d30:	4623      	mov	r3, r4
 8009d32:	4602      	mov	r2, r0
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 feab 	bl	800aa90 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	7b5b      	ldrb	r3, [r3, #13]
 8009d46:	2200      	movs	r2, #0
 8009d48:	4619      	mov	r1, r3
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f001 f970 	bl	800b030 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	7b1b      	ldrb	r3, [r3, #12]
 8009d54:	2200      	movs	r2, #0
 8009d56:	4619      	mov	r1, r3
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f001 f969 	bl	800b030 <USBH_LL_SetToggle>

  return USBH_OK;
 8009d5e:	2300      	movs	r3, #0
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3714      	adds	r7, #20
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd90      	pop	{r4, r7, pc}

08009d68 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d76:	69db      	ldr	r3, [r3, #28]
 8009d78:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	781b      	ldrb	r3, [r3, #0]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d00e      	beq.n	8009da0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	4619      	mov	r1, r3
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 fea0 	bl	800aace <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	4619      	mov	r1, r3
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 fecb 	bl	800ab30 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	7b1b      	ldrb	r3, [r3, #12]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d00e      	beq.n	8009dc6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	7b1b      	ldrb	r3, [r3, #12]
 8009dac:	4619      	mov	r1, r3
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 fe8d 	bl	800aace <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	7b1b      	ldrb	r3, [r3, #12]
 8009db8:	4619      	mov	r1, r3
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 feb8 	bl	800ab30 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	7b5b      	ldrb	r3, [r3, #13]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00e      	beq.n	8009dec <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	7b5b      	ldrb	r3, [r3, #13]
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 fe7a 	bl	800aace <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	7b5b      	ldrb	r3, [r3, #13]
 8009dde:	4619      	mov	r1, r3
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 fea5 	bl	800ab30 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2200      	movs	r2, #0
 8009dea:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009df2:	69db      	ldr	r3, [r3, #28]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d00b      	beq.n	8009e10 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dfe:	69db      	ldr	r3, [r3, #28]
 8009e00:	4618      	mov	r0, r3
 8009e02:	f001 f999 	bl	800b138 <free>
    phost->pActiveClass->pData = 0U;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3710      	adds	r7, #16
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b084      	sub	sp, #16
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e28:	69db      	ldr	r3, [r3, #28]
 8009e2a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	3340      	adds	r3, #64	; 0x40
 8009e30:	4619      	mov	r1, r3
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f000 f8b1 	bl	8009f9a <GetLineCoding>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009e3c:	7afb      	ldrb	r3, [r7, #11]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d105      	bne.n	8009e4e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009e48:	2102      	movs	r1, #2
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009e4e:	7afb      	ldrb	r3, [r7, #11]
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3710      	adds	r7, #16
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009e60:	2301      	movs	r3, #1
 8009e62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009e64:	2300      	movs	r3, #0
 8009e66:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e6e:	69db      	ldr	r3, [r3, #28]
 8009e70:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009e78:	2b04      	cmp	r3, #4
 8009e7a:	d877      	bhi.n	8009f6c <USBH_CDC_Process+0x114>
 8009e7c:	a201      	add	r2, pc, #4	; (adr r2, 8009e84 <USBH_CDC_Process+0x2c>)
 8009e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e82:	bf00      	nop
 8009e84:	08009e99 	.word	0x08009e99
 8009e88:	08009e9f 	.word	0x08009e9f
 8009e8c:	08009ecf 	.word	0x08009ecf
 8009e90:	08009f43 	.word	0x08009f43
 8009e94:	08009f51 	.word	0x08009f51
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8009e9c:	e06d      	b.n	8009f7a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 f897 	bl	8009fd8 <SetLineCoding>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009eae:	7bbb      	ldrb	r3, [r7, #14]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d104      	bne.n	8009ebe <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	2202      	movs	r2, #2
 8009eb8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009ebc:	e058      	b.n	8009f70 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009ebe:	7bbb      	ldrb	r3, [r7, #14]
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d055      	beq.n	8009f70 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	2204      	movs	r2, #4
 8009ec8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009ecc:	e050      	b.n	8009f70 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	3340      	adds	r3, #64	; 0x40
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f000 f860 	bl	8009f9a <GetLineCoding>
 8009eda:	4603      	mov	r3, r0
 8009edc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009ede:	7bbb      	ldrb	r3, [r7, #14]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d126      	bne.n	8009f32 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ef6:	791b      	ldrb	r3, [r3, #4]
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d13b      	bne.n	8009f74 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f06:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d133      	bne.n	8009f74 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f16:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d12b      	bne.n	8009f74 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f24:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d124      	bne.n	8009f74 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 f958 	bl	800a1e0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009f30:	e020      	b.n	8009f74 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009f32:	7bbb      	ldrb	r3, [r7, #14]
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d01d      	beq.n	8009f74 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	2204      	movs	r2, #4
 8009f3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009f40:	e018      	b.n	8009f74 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 f867 	bl	800a016 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 f8da 	bl	800a102 <CDC_ProcessReception>
      break;
 8009f4e:	e014      	b.n	8009f7a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009f50:	2100      	movs	r1, #0
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 fb27 	bl	800a5a6 <USBH_ClrFeature>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009f5c:	7bbb      	ldrb	r3, [r7, #14]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d10a      	bne.n	8009f78 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	2200      	movs	r2, #0
 8009f66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8009f6a:	e005      	b.n	8009f78 <USBH_CDC_Process+0x120>

    default:
      break;
 8009f6c:	bf00      	nop
 8009f6e:	e004      	b.n	8009f7a <USBH_CDC_Process+0x122>
      break;
 8009f70:	bf00      	nop
 8009f72:	e002      	b.n	8009f7a <USBH_CDC_Process+0x122>
      break;
 8009f74:	bf00      	nop
 8009f76:	e000      	b.n	8009f7a <USBH_CDC_Process+0x122>
      break;
 8009f78:	bf00      	nop

  }

  return status;
 8009f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3710      	adds	r7, #16
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009f8c:	2300      	movs	r3, #0
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	370c      	adds	r7, #12
 8009f92:	46bd      	mov	sp, r7
 8009f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f98:	4770      	bx	lr

08009f9a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009f9a:	b580      	push	{r7, lr}
 8009f9c:	b082      	sub	sp, #8
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
 8009fa2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	22a1      	movs	r2, #161	; 0xa1
 8009fa8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2221      	movs	r2, #33	; 0x21
 8009fae:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2207      	movs	r2, #7
 8009fc0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	2207      	movs	r2, #7
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 fb10 	bl	800a5ee <USBH_CtlReq>
 8009fce:	4603      	mov	r3, r0
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2221      	movs	r2, #33	; 0x21
 8009fe6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2220      	movs	r2, #32
 8009fec:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2207      	movs	r2, #7
 8009ffe:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	2207      	movs	r2, #7
 800a004:	4619      	mov	r1, r3
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 faf1 	bl	800a5ee <USBH_CtlReq>
 800a00c:	4603      	mov	r3, r0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3708      	adds	r7, #8
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}

0800a016 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a016:	b580      	push	{r7, lr}
 800a018:	b086      	sub	sp, #24
 800a01a:	af02      	add	r7, sp, #8
 800a01c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a024:	69db      	ldr	r3, [r3, #28]
 800a026:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a028:	2300      	movs	r3, #0
 800a02a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a032:	2b01      	cmp	r3, #1
 800a034:	d002      	beq.n	800a03c <CDC_ProcessTransmission+0x26>
 800a036:	2b02      	cmp	r3, #2
 800a038:	d023      	beq.n	800a082 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a03a:	e05e      	b.n	800a0fa <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a040:	68fa      	ldr	r2, [r7, #12]
 800a042:	8b12      	ldrh	r2, [r2, #24]
 800a044:	4293      	cmp	r3, r2
 800a046:	d90b      	bls.n	800a060 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	69d9      	ldr	r1, [r3, #28]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	8b1a      	ldrh	r2, [r3, #24]
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	7b5b      	ldrb	r3, [r3, #13]
 800a054:	2001      	movs	r0, #1
 800a056:	9000      	str	r0, [sp, #0]
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 fcd6 	bl	800aa0a <USBH_BulkSendData>
 800a05e:	e00b      	b.n	800a078 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800a068:	b29a      	uxth	r2, r3
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	7b5b      	ldrb	r3, [r3, #13]
 800a06e:	2001      	movs	r0, #1
 800a070:	9000      	str	r0, [sp, #0]
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 fcc9 	bl	800aa0a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2202      	movs	r2, #2
 800a07c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a080:	e03b      	b.n	800a0fa <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	7b5b      	ldrb	r3, [r3, #13]
 800a086:	4619      	mov	r1, r3
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 ffa7 	bl	800afdc <USBH_LL_GetURBState>
 800a08e:	4603      	mov	r3, r0
 800a090:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a092:	7afb      	ldrb	r3, [r7, #11]
 800a094:	2b01      	cmp	r3, #1
 800a096:	d128      	bne.n	800a0ea <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09c:	68fa      	ldr	r2, [r7, #12]
 800a09e:	8b12      	ldrh	r2, [r2, #24]
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d90e      	bls.n	800a0c2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	8b12      	ldrh	r2, [r2, #24]
 800a0ac:	1a9a      	subs	r2, r3, r2
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	69db      	ldr	r3, [r3, #28]
 800a0b6:	68fa      	ldr	r2, [r7, #12]
 800a0b8:	8b12      	ldrh	r2, [r2, #24]
 800a0ba:	441a      	add	r2, r3
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	61da      	str	r2, [r3, #28]
 800a0c0:	e002      	b.n	800a0c8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d004      	beq.n	800a0da <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a0d8:	e00e      	b.n	800a0f8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 f868 	bl	800a1b8 <USBH_CDC_TransmitCallback>
      break;
 800a0e8:	e006      	b.n	800a0f8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800a0ea:	7afb      	ldrb	r3, [r7, #11]
 800a0ec:	2b02      	cmp	r3, #2
 800a0ee:	d103      	bne.n	800a0f8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a0f8:	bf00      	nop
  }
}
 800a0fa:	bf00      	nop
 800a0fc:	3710      	adds	r7, #16
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a102:	b580      	push	{r7, lr}
 800a104:	b086      	sub	sp, #24
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a110:	69db      	ldr	r3, [r3, #28]
 800a112:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a114:	2300      	movs	r3, #0
 800a116:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a11e:	2b03      	cmp	r3, #3
 800a120:	d002      	beq.n	800a128 <CDC_ProcessReception+0x26>
 800a122:	2b04      	cmp	r3, #4
 800a124:	d00e      	beq.n	800a144 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a126:	e043      	b.n	800a1b0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	6a19      	ldr	r1, [r3, #32]
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	8b5a      	ldrh	r2, [r3, #26]
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	7b1b      	ldrb	r3, [r3, #12]
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 fc8d 	bl	800aa54 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	2204      	movs	r2, #4
 800a13e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a142:	e035      	b.n	800a1b0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	7b1b      	ldrb	r3, [r3, #12]
 800a148:	4619      	mov	r1, r3
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 ff46 	bl	800afdc <USBH_LL_GetURBState>
 800a150:	4603      	mov	r3, r0
 800a152:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a154:	7cfb      	ldrb	r3, [r7, #19]
 800a156:	2b01      	cmp	r3, #1
 800a158:	d129      	bne.n	800a1ae <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	7b1b      	ldrb	r3, [r3, #12]
 800a15e:	4619      	mov	r1, r3
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 fea9 	bl	800aeb8 <USBH_LL_GetLastXferSize>
 800a166:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	429a      	cmp	r2, r3
 800a170:	d016      	beq.n	800a1a0 <CDC_ProcessReception+0x9e>
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	8b5b      	ldrh	r3, [r3, #26]
 800a176:	461a      	mov	r2, r3
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d910      	bls.n	800a1a0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	1ad2      	subs	r2, r2, r3
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	6a1a      	ldr	r2, [r3, #32]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	441a      	add	r2, r3
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	2203      	movs	r2, #3
 800a19a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a19e:	e006      	b.n	800a1ae <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 f80f 	bl	800a1cc <USBH_CDC_ReceiveCallback>
      break;
 800a1ae:	bf00      	nop
  }
}
 800a1b0:	bf00      	nop
 800a1b2:	3718      	adds	r7, #24
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a1c0:	bf00      	nop
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a1d4:	bf00      	nop
 800a1d6:	370c      	adds	r7, #12
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr

0800a1e0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b083      	sub	sp, #12
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a1e8:	bf00      	nop
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	4613      	mov	r3, r2
 800a200:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d101      	bne.n	800a20c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a208:	2302      	movs	r3, #2
 800a20a:	e029      	b.n	800a260 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	79fa      	ldrb	r2, [r7, #7]
 800a210:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2200      	movs	r2, #0
 800a218:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2200      	movs	r2, #0
 800a220:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a224:	68f8      	ldr	r0, [r7, #12]
 800a226:	f000 f81f 	bl	800a268 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2200      	movs	r2, #0
 800a22e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2200      	movs	r2, #0
 800a236:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2200      	movs	r2, #0
 800a23e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2200      	movs	r2, #0
 800a246:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d003      	beq.n	800a258 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	68ba      	ldr	r2, [r7, #8]
 800a254:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a258:	68f8      	ldr	r0, [r7, #12]
 800a25a:	f000 fdb1 	bl	800adc0 <USBH_LL_Init>

  return USBH_OK;
 800a25e:	2300      	movs	r3, #0
}
 800a260:	4618      	mov	r0, r3
 800a262:	3710      	adds	r7, #16
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a270:	2300      	movs	r3, #0
 800a272:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a274:	2300      	movs	r3, #0
 800a276:	60fb      	str	r3, [r7, #12]
 800a278:	e009      	b.n	800a28e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	33e0      	adds	r3, #224	; 0xe0
 800a280:	009b      	lsls	r3, r3, #2
 800a282:	4413      	add	r3, r2
 800a284:	2200      	movs	r2, #0
 800a286:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	3301      	adds	r3, #1
 800a28c:	60fb      	str	r3, [r7, #12]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2b0f      	cmp	r3, #15
 800a292:	d9f2      	bls.n	800a27a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a294:	2300      	movs	r3, #0
 800a296:	60fb      	str	r3, [r7, #12]
 800a298:	e009      	b.n	800a2ae <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	4413      	add	r3, r2
 800a2a0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	60fb      	str	r3, [r7, #12]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2b4:	d3f1      	bcc.n	800a29a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2201      	movs	r2, #1
 800a2c6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2240      	movs	r2, #64	; 0x40
 800a2da:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	331c      	adds	r3, #28
 800a306:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a30a:	2100      	movs	r1, #0
 800a30c:	4618      	mov	r0, r3
 800a30e:	f000 ffc7 	bl	800b2a0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a318:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a31c:	2100      	movs	r1, #0
 800a31e:	4618      	mov	r0, r3
 800a320:	f000 ffbe 	bl	800b2a0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f203 3326 	addw	r3, r3, #806	; 0x326
 800a32a:	2212      	movs	r2, #18
 800a32c:	2100      	movs	r1, #0
 800a32e:	4618      	mov	r0, r3
 800a330:	f000 ffb6 	bl	800b2a0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a33a:	223e      	movs	r2, #62	; 0x3e
 800a33c:	2100      	movs	r1, #0
 800a33e:	4618      	mov	r0, r3
 800a340:	f000 ffae 	bl	800b2a0 <memset>

  return USBH_OK;
 800a344:	2300      	movs	r3, #0
}
 800a346:	4618      	mov	r0, r3
 800a348:	3710      	adds	r7, #16
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a34e:	b480      	push	{r7}
 800a350:	b085      	sub	sp, #20
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
 800a356:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a358:	2300      	movs	r3, #0
 800a35a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d016      	beq.n	800a390 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d10e      	bne.n	800a38a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a372:	1c59      	adds	r1, r3, #1
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	33de      	adds	r3, #222	; 0xde
 800a37e:	6839      	ldr	r1, [r7, #0]
 800a380:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a384:	2300      	movs	r3, #0
 800a386:	73fb      	strb	r3, [r7, #15]
 800a388:	e004      	b.n	800a394 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a38a:	2302      	movs	r3, #2
 800a38c:	73fb      	strb	r3, [r7, #15]
 800a38e:	e001      	b.n	800a394 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a390:	2302      	movs	r3, #2
 800a392:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a394:	7bfb      	ldrb	r3, [r7, #15]
}
 800a396:	4618      	mov	r0, r3
 800a398:	3714      	adds	r7, #20
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr

0800a3a2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a3a2:	b480      	push	{r7}
 800a3a4:	b085      	sub	sp, #20
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
 800a3aa:	460b      	mov	r3, r1
 800a3ac:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a3b8:	78fa      	ldrb	r2, [r7, #3]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d204      	bcs.n	800a3c8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	78fa      	ldrb	r2, [r7, #3]
 800a3c2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a3c6:	e001      	b.n	800a3cc <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a3c8:	2302      	movs	r3, #2
 800a3ca:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a3cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3714      	adds	r7, #20
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr

0800a3da <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a3da:	b480      	push	{r7}
 800a3dc:	b087      	sub	sp, #28
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
 800a3e2:	4608      	mov	r0, r1
 800a3e4:	4611      	mov	r1, r2
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	70fb      	strb	r3, [r7, #3]
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	70bb      	strb	r3, [r7, #2]
 800a3f0:	4613      	mov	r3, r2
 800a3f2:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a402:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a404:	e025      	b.n	800a452 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a406:	7dfb      	ldrb	r3, [r7, #23]
 800a408:	221a      	movs	r2, #26
 800a40a:	fb02 f303 	mul.w	r3, r2, r3
 800a40e:	3308      	adds	r3, #8
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	4413      	add	r3, r2
 800a414:	3302      	adds	r3, #2
 800a416:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	795b      	ldrb	r3, [r3, #5]
 800a41c:	78fa      	ldrb	r2, [r7, #3]
 800a41e:	429a      	cmp	r2, r3
 800a420:	d002      	beq.n	800a428 <USBH_FindInterface+0x4e>
 800a422:	78fb      	ldrb	r3, [r7, #3]
 800a424:	2bff      	cmp	r3, #255	; 0xff
 800a426:	d111      	bne.n	800a44c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a42c:	78ba      	ldrb	r2, [r7, #2]
 800a42e:	429a      	cmp	r2, r3
 800a430:	d002      	beq.n	800a438 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a432:	78bb      	ldrb	r3, [r7, #2]
 800a434:	2bff      	cmp	r3, #255	; 0xff
 800a436:	d109      	bne.n	800a44c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a43c:	787a      	ldrb	r2, [r7, #1]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d002      	beq.n	800a448 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a442:	787b      	ldrb	r3, [r7, #1]
 800a444:	2bff      	cmp	r3, #255	; 0xff
 800a446:	d101      	bne.n	800a44c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a448:	7dfb      	ldrb	r3, [r7, #23]
 800a44a:	e006      	b.n	800a45a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a44c:	7dfb      	ldrb	r3, [r7, #23]
 800a44e:	3301      	adds	r3, #1
 800a450:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a452:	7dfb      	ldrb	r3, [r7, #23]
 800a454:	2b01      	cmp	r3, #1
 800a456:	d9d6      	bls.n	800a406 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a458:	23ff      	movs	r3, #255	; 0xff
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	371c      	adds	r7, #28
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr

0800a466 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800a466:	b580      	push	{r7, lr}
 800a468:	b082      	sub	sp, #8
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 fcec 	bl	800ae4c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a474:	2101      	movs	r1, #1
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 fdc3 	bl	800b002 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a47c:	2300      	movs	r3, #0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3708      	adds	r7, #8
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a486:	b480      	push	{r7}
 800a488:	b083      	sub	sp, #12
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
 800a48e:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	683a      	ldr	r2, [r7, #0]
 800a494:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a498:	bf00      	nop
 800a49a:	370c      	adds	r7, #12
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b082      	sub	sp, #8
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a4b2:	1c5a      	adds	r2, r3, #1
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 f804 	bl	800a4c8 <USBH_HandleSof>
}
 800a4c0:	bf00      	nop
 800a4c2:	3708      	adds	r7, #8
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	b2db      	uxtb	r3, r3
 800a4d6:	2b0b      	cmp	r3, #11
 800a4d8:	d10a      	bne.n	800a4f0 <USBH_HandleSof+0x28>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d005      	beq.n	800a4f0 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4ea:	699b      	ldr	r3, [r3, #24]
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	4798      	blx	r3
  }
}
 800a4f0:	bf00      	nop
 800a4f2:	3708      	adds	r7, #8
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2201      	movs	r2, #1
 800a504:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a508:	bf00      	nop
}
 800a50a:	370c      	adds	r7, #12
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr

0800a514 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a524:	bf00      	nop
}
 800a526:	370c      	adds	r7, #12
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr

0800a530 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a530:	b480      	push	{r7}
 800a532:	b083      	sub	sp, #12
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2201      	movs	r2, #1
 800a53c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2200      	movs	r2, #0
 800a544:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a550:	2300      	movs	r3, #0
}
 800a552:	4618      	mov	r0, r3
 800a554:	370c      	adds	r7, #12
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr

0800a55e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a55e:	b580      	push	{r7, lr}
 800a560:	b082      	sub	sp, #8
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2201      	movs	r2, #1
 800a56a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2200      	movs	r2, #0
 800a57a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 fc7f 	bl	800ae82 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	791b      	ldrb	r3, [r3, #4]
 800a588:	4619      	mov	r1, r3
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 fad0 	bl	800ab30 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	795b      	ldrb	r3, [r3, #5]
 800a594:	4619      	mov	r1, r3
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 faca 	bl	800ab30 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a59c:	2300      	movs	r3, #0
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3708      	adds	r7, #8
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b082      	sub	sp, #8
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	789b      	ldrb	r3, [r3, #2]
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d10f      	bne.n	800a5da <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2202      	movs	r2, #2
 800a5be:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a5cc:	78fb      	ldrb	r3, [r7, #3]
 800a5ce:	b29a      	uxth	r2, r3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a5da:	2200      	movs	r2, #0
 800a5dc:	2100      	movs	r1, #0
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 f805 	bl	800a5ee <USBH_CtlReq>
 800a5e4:	4603      	mov	r3, r0
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3708      	adds	r7, #8
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}

0800a5ee <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a5ee:	b580      	push	{r7, lr}
 800a5f0:	b086      	sub	sp, #24
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	60f8      	str	r0, [r7, #12]
 800a5f6:	60b9      	str	r1, [r7, #8]
 800a5f8:	4613      	mov	r3, r2
 800a5fa:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	789b      	ldrb	r3, [r3, #2]
 800a604:	2b01      	cmp	r3, #1
 800a606:	d002      	beq.n	800a60e <USBH_CtlReq+0x20>
 800a608:	2b02      	cmp	r3, #2
 800a60a:	d00f      	beq.n	800a62c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a60c:	e027      	b.n	800a65e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	68ba      	ldr	r2, [r7, #8]
 800a612:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	88fa      	ldrh	r2, [r7, #6]
 800a618:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2201      	movs	r2, #1
 800a61e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2202      	movs	r2, #2
 800a624:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a626:	2301      	movs	r3, #1
 800a628:	75fb      	strb	r3, [r7, #23]
      break;
 800a62a:	e018      	b.n	800a65e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a62c:	68f8      	ldr	r0, [r7, #12]
 800a62e:	f000 f81b 	bl	800a668 <USBH_HandleControl>
 800a632:	4603      	mov	r3, r0
 800a634:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a636:	7dfb      	ldrb	r3, [r7, #23]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d002      	beq.n	800a642 <USBH_CtlReq+0x54>
 800a63c:	7dfb      	ldrb	r3, [r7, #23]
 800a63e:	2b03      	cmp	r3, #3
 800a640:	d106      	bne.n	800a650 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2201      	movs	r2, #1
 800a646:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2200      	movs	r2, #0
 800a64c:	761a      	strb	r2, [r3, #24]
      break;
 800a64e:	e005      	b.n	800a65c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a650:	7dfb      	ldrb	r3, [r7, #23]
 800a652:	2b02      	cmp	r3, #2
 800a654:	d102      	bne.n	800a65c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2201      	movs	r2, #1
 800a65a:	709a      	strb	r2, [r3, #2]
      break;
 800a65c:	bf00      	nop
  }
  return status;
 800a65e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a660:	4618      	mov	r0, r3
 800a662:	3718      	adds	r7, #24
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b086      	sub	sp, #24
 800a66c:	af02      	add	r7, sp, #8
 800a66e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a670:	2301      	movs	r3, #1
 800a672:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a674:	2300      	movs	r3, #0
 800a676:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	7e1b      	ldrb	r3, [r3, #24]
 800a67c:	3b01      	subs	r3, #1
 800a67e:	2b0a      	cmp	r3, #10
 800a680:	f200 8156 	bhi.w	800a930 <USBH_HandleControl+0x2c8>
 800a684:	a201      	add	r2, pc, #4	; (adr r2, 800a68c <USBH_HandleControl+0x24>)
 800a686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a68a:	bf00      	nop
 800a68c:	0800a6b9 	.word	0x0800a6b9
 800a690:	0800a6d3 	.word	0x0800a6d3
 800a694:	0800a73d 	.word	0x0800a73d
 800a698:	0800a763 	.word	0x0800a763
 800a69c:	0800a79b 	.word	0x0800a79b
 800a6a0:	0800a7c5 	.word	0x0800a7c5
 800a6a4:	0800a817 	.word	0x0800a817
 800a6a8:	0800a839 	.word	0x0800a839
 800a6ac:	0800a875 	.word	0x0800a875
 800a6b0:	0800a89b 	.word	0x0800a89b
 800a6b4:	0800a8d9 	.word	0x0800a8d9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f103 0110 	add.w	r1, r3, #16
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	795b      	ldrb	r3, [r3, #5]
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 f943 	bl	800a950 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2202      	movs	r2, #2
 800a6ce:	761a      	strb	r2, [r3, #24]
      break;
 800a6d0:	e139      	b.n	800a946 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	795b      	ldrb	r3, [r3, #5]
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 fc7f 	bl	800afdc <USBH_LL_GetURBState>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a6e2:	7bbb      	ldrb	r3, [r7, #14]
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d11e      	bne.n	800a726 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	7c1b      	ldrb	r3, [r3, #16]
 800a6ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a6f0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	8adb      	ldrh	r3, [r3, #22]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d00a      	beq.n	800a710 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a6fa:	7b7b      	ldrb	r3, [r7, #13]
 800a6fc:	2b80      	cmp	r3, #128	; 0x80
 800a6fe:	d103      	bne.n	800a708 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2203      	movs	r2, #3
 800a704:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a706:	e115      	b.n	800a934 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2205      	movs	r2, #5
 800a70c:	761a      	strb	r2, [r3, #24]
      break;
 800a70e:	e111      	b.n	800a934 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a710:	7b7b      	ldrb	r3, [r7, #13]
 800a712:	2b80      	cmp	r3, #128	; 0x80
 800a714:	d103      	bne.n	800a71e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2209      	movs	r2, #9
 800a71a:	761a      	strb	r2, [r3, #24]
      break;
 800a71c:	e10a      	b.n	800a934 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2207      	movs	r2, #7
 800a722:	761a      	strb	r2, [r3, #24]
      break;
 800a724:	e106      	b.n	800a934 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a726:	7bbb      	ldrb	r3, [r7, #14]
 800a728:	2b04      	cmp	r3, #4
 800a72a:	d003      	beq.n	800a734 <USBH_HandleControl+0xcc>
 800a72c:	7bbb      	ldrb	r3, [r7, #14]
 800a72e:	2b02      	cmp	r3, #2
 800a730:	f040 8100 	bne.w	800a934 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	220b      	movs	r2, #11
 800a738:	761a      	strb	r2, [r3, #24]
      break;
 800a73a:	e0fb      	b.n	800a934 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a742:	b29a      	uxth	r2, r3
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6899      	ldr	r1, [r3, #8]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	899a      	ldrh	r2, [r3, #12]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	791b      	ldrb	r3, [r3, #4]
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 f93a 	bl	800a9ce <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2204      	movs	r2, #4
 800a75e:	761a      	strb	r2, [r3, #24]
      break;
 800a760:	e0f1      	b.n	800a946 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	791b      	ldrb	r3, [r3, #4]
 800a766:	4619      	mov	r1, r3
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f000 fc37 	bl	800afdc <USBH_LL_GetURBState>
 800a76e:	4603      	mov	r3, r0
 800a770:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a772:	7bbb      	ldrb	r3, [r7, #14]
 800a774:	2b01      	cmp	r3, #1
 800a776:	d102      	bne.n	800a77e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2209      	movs	r2, #9
 800a77c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a77e:	7bbb      	ldrb	r3, [r7, #14]
 800a780:	2b05      	cmp	r3, #5
 800a782:	d102      	bne.n	800a78a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a784:	2303      	movs	r3, #3
 800a786:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a788:	e0d6      	b.n	800a938 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a78a:	7bbb      	ldrb	r3, [r7, #14]
 800a78c:	2b04      	cmp	r3, #4
 800a78e:	f040 80d3 	bne.w	800a938 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	220b      	movs	r2, #11
 800a796:	761a      	strb	r2, [r3, #24]
      break;
 800a798:	e0ce      	b.n	800a938 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6899      	ldr	r1, [r3, #8]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	899a      	ldrh	r2, [r3, #12]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	795b      	ldrb	r3, [r3, #5]
 800a7a6:	2001      	movs	r0, #1
 800a7a8:	9000      	str	r0, [sp, #0]
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 f8ea 	bl	800a984 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a7b6:	b29a      	uxth	r2, r3
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2206      	movs	r2, #6
 800a7c0:	761a      	strb	r2, [r3, #24]
      break;
 800a7c2:	e0c0      	b.n	800a946 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	795b      	ldrb	r3, [r3, #5]
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 fc06 	bl	800afdc <USBH_LL_GetURBState>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a7d4:	7bbb      	ldrb	r3, [r7, #14]
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d103      	bne.n	800a7e2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2207      	movs	r2, #7
 800a7de:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a7e0:	e0ac      	b.n	800a93c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a7e2:	7bbb      	ldrb	r3, [r7, #14]
 800a7e4:	2b05      	cmp	r3, #5
 800a7e6:	d105      	bne.n	800a7f4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	220c      	movs	r2, #12
 800a7ec:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a7ee:	2303      	movs	r3, #3
 800a7f0:	73fb      	strb	r3, [r7, #15]
      break;
 800a7f2:	e0a3      	b.n	800a93c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a7f4:	7bbb      	ldrb	r3, [r7, #14]
 800a7f6:	2b02      	cmp	r3, #2
 800a7f8:	d103      	bne.n	800a802 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2205      	movs	r2, #5
 800a7fe:	761a      	strb	r2, [r3, #24]
      break;
 800a800:	e09c      	b.n	800a93c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a802:	7bbb      	ldrb	r3, [r7, #14]
 800a804:	2b04      	cmp	r3, #4
 800a806:	f040 8099 	bne.w	800a93c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	220b      	movs	r2, #11
 800a80e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a810:	2302      	movs	r3, #2
 800a812:	73fb      	strb	r3, [r7, #15]
      break;
 800a814:	e092      	b.n	800a93c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	791b      	ldrb	r3, [r3, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	2100      	movs	r1, #0
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 f8d5 	bl	800a9ce <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a82a:	b29a      	uxth	r2, r3
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2208      	movs	r2, #8
 800a834:	761a      	strb	r2, [r3, #24]

      break;
 800a836:	e086      	b.n	800a946 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	791b      	ldrb	r3, [r3, #4]
 800a83c:	4619      	mov	r1, r3
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 fbcc 	bl	800afdc <USBH_LL_GetURBState>
 800a844:	4603      	mov	r3, r0
 800a846:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a848:	7bbb      	ldrb	r3, [r7, #14]
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d105      	bne.n	800a85a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	220d      	movs	r2, #13
 800a852:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a854:	2300      	movs	r3, #0
 800a856:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a858:	e072      	b.n	800a940 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a85a:	7bbb      	ldrb	r3, [r7, #14]
 800a85c:	2b04      	cmp	r3, #4
 800a85e:	d103      	bne.n	800a868 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	220b      	movs	r2, #11
 800a864:	761a      	strb	r2, [r3, #24]
      break;
 800a866:	e06b      	b.n	800a940 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a868:	7bbb      	ldrb	r3, [r7, #14]
 800a86a:	2b05      	cmp	r3, #5
 800a86c:	d168      	bne.n	800a940 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a86e:	2303      	movs	r3, #3
 800a870:	73fb      	strb	r3, [r7, #15]
      break;
 800a872:	e065      	b.n	800a940 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	795b      	ldrb	r3, [r3, #5]
 800a878:	2201      	movs	r2, #1
 800a87a:	9200      	str	r2, [sp, #0]
 800a87c:	2200      	movs	r2, #0
 800a87e:	2100      	movs	r1, #0
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 f87f 	bl	800a984 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a88c:	b29a      	uxth	r2, r3
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	220a      	movs	r2, #10
 800a896:	761a      	strb	r2, [r3, #24]
      break;
 800a898:	e055      	b.n	800a946 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	795b      	ldrb	r3, [r3, #5]
 800a89e:	4619      	mov	r1, r3
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 fb9b 	bl	800afdc <USBH_LL_GetURBState>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a8aa:	7bbb      	ldrb	r3, [r7, #14]
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d105      	bne.n	800a8bc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	220d      	movs	r2, #13
 800a8b8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a8ba:	e043      	b.n	800a944 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a8bc:	7bbb      	ldrb	r3, [r7, #14]
 800a8be:	2b02      	cmp	r3, #2
 800a8c0:	d103      	bne.n	800a8ca <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2209      	movs	r2, #9
 800a8c6:	761a      	strb	r2, [r3, #24]
      break;
 800a8c8:	e03c      	b.n	800a944 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a8ca:	7bbb      	ldrb	r3, [r7, #14]
 800a8cc:	2b04      	cmp	r3, #4
 800a8ce:	d139      	bne.n	800a944 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	220b      	movs	r2, #11
 800a8d4:	761a      	strb	r2, [r3, #24]
      break;
 800a8d6:	e035      	b.n	800a944 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	7e5b      	ldrb	r3, [r3, #25]
 800a8dc:	3301      	adds	r3, #1
 800a8de:	b2da      	uxtb	r2, r3
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	765a      	strb	r2, [r3, #25]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	7e5b      	ldrb	r3, [r3, #25]
 800a8e8:	2b02      	cmp	r3, #2
 800a8ea:	d806      	bhi.n	800a8fa <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a8f8:	e025      	b.n	800a946 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a900:	2106      	movs	r1, #6
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2200      	movs	r2, #0
 800a90a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	795b      	ldrb	r3, [r3, #5]
 800a910:	4619      	mov	r1, r3
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f000 f90c 	bl	800ab30 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	791b      	ldrb	r3, [r3, #4]
 800a91c:	4619      	mov	r1, r3
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 f906 	bl	800ab30 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2200      	movs	r2, #0
 800a928:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a92a:	2302      	movs	r3, #2
 800a92c:	73fb      	strb	r3, [r7, #15]
      break;
 800a92e:	e00a      	b.n	800a946 <USBH_HandleControl+0x2de>

    default:
      break;
 800a930:	bf00      	nop
 800a932:	e008      	b.n	800a946 <USBH_HandleControl+0x2de>
      break;
 800a934:	bf00      	nop
 800a936:	e006      	b.n	800a946 <USBH_HandleControl+0x2de>
      break;
 800a938:	bf00      	nop
 800a93a:	e004      	b.n	800a946 <USBH_HandleControl+0x2de>
      break;
 800a93c:	bf00      	nop
 800a93e:	e002      	b.n	800a946 <USBH_HandleControl+0x2de>
      break;
 800a940:	bf00      	nop
 800a942:	e000      	b.n	800a946 <USBH_HandleControl+0x2de>
      break;
 800a944:	bf00      	nop
  }

  return status;
 800a946:	7bfb      	ldrb	r3, [r7, #15]
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3710      	adds	r7, #16
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b088      	sub	sp, #32
 800a954:	af04      	add	r7, sp, #16
 800a956:	60f8      	str	r0, [r7, #12]
 800a958:	60b9      	str	r1, [r7, #8]
 800a95a:	4613      	mov	r3, r2
 800a95c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a95e:	79f9      	ldrb	r1, [r7, #7]
 800a960:	2300      	movs	r3, #0
 800a962:	9303      	str	r3, [sp, #12]
 800a964:	2308      	movs	r3, #8
 800a966:	9302      	str	r3, [sp, #8]
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	9301      	str	r3, [sp, #4]
 800a96c:	2300      	movs	r3, #0
 800a96e:	9300      	str	r3, [sp, #0]
 800a970:	2300      	movs	r3, #0
 800a972:	2200      	movs	r2, #0
 800a974:	68f8      	ldr	r0, [r7, #12]
 800a976:	f000 fb00 	bl	800af7a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a97a:	2300      	movs	r3, #0
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3710      	adds	r7, #16
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b088      	sub	sp, #32
 800a988:	af04      	add	r7, sp, #16
 800a98a:	60f8      	str	r0, [r7, #12]
 800a98c:	60b9      	str	r1, [r7, #8]
 800a98e:	4611      	mov	r1, r2
 800a990:	461a      	mov	r2, r3
 800a992:	460b      	mov	r3, r1
 800a994:	80fb      	strh	r3, [r7, #6]
 800a996:	4613      	mov	r3, r2
 800a998:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d001      	beq.n	800a9a8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a9a8:	7979      	ldrb	r1, [r7, #5]
 800a9aa:	7e3b      	ldrb	r3, [r7, #24]
 800a9ac:	9303      	str	r3, [sp, #12]
 800a9ae:	88fb      	ldrh	r3, [r7, #6]
 800a9b0:	9302      	str	r3, [sp, #8]
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	9301      	str	r3, [sp, #4]
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	9300      	str	r3, [sp, #0]
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	2200      	movs	r2, #0
 800a9be:	68f8      	ldr	r0, [r7, #12]
 800a9c0:	f000 fadb 	bl	800af7a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a9c4:	2300      	movs	r3, #0
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3710      	adds	r7, #16
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}

0800a9ce <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a9ce:	b580      	push	{r7, lr}
 800a9d0:	b088      	sub	sp, #32
 800a9d2:	af04      	add	r7, sp, #16
 800a9d4:	60f8      	str	r0, [r7, #12]
 800a9d6:	60b9      	str	r1, [r7, #8]
 800a9d8:	4611      	mov	r1, r2
 800a9da:	461a      	mov	r2, r3
 800a9dc:	460b      	mov	r3, r1
 800a9de:	80fb      	strh	r3, [r7, #6]
 800a9e0:	4613      	mov	r3, r2
 800a9e2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a9e4:	7979      	ldrb	r1, [r7, #5]
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	9303      	str	r3, [sp, #12]
 800a9ea:	88fb      	ldrh	r3, [r7, #6]
 800a9ec:	9302      	str	r3, [sp, #8]
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	9301      	str	r3, [sp, #4]
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	9300      	str	r3, [sp, #0]
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	f000 fabd 	bl	800af7a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800aa00:	2300      	movs	r3, #0

}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3710      	adds	r7, #16
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b088      	sub	sp, #32
 800aa0e:	af04      	add	r7, sp, #16
 800aa10:	60f8      	str	r0, [r7, #12]
 800aa12:	60b9      	str	r1, [r7, #8]
 800aa14:	4611      	mov	r1, r2
 800aa16:	461a      	mov	r2, r3
 800aa18:	460b      	mov	r3, r1
 800aa1a:	80fb      	strh	r3, [r7, #6]
 800aa1c:	4613      	mov	r3, r2
 800aa1e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d001      	beq.n	800aa2e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aa2e:	7979      	ldrb	r1, [r7, #5]
 800aa30:	7e3b      	ldrb	r3, [r7, #24]
 800aa32:	9303      	str	r3, [sp, #12]
 800aa34:	88fb      	ldrh	r3, [r7, #6]
 800aa36:	9302      	str	r3, [sp, #8]
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	9301      	str	r3, [sp, #4]
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	9300      	str	r3, [sp, #0]
 800aa40:	2302      	movs	r3, #2
 800aa42:	2200      	movs	r2, #0
 800aa44:	68f8      	ldr	r0, [r7, #12]
 800aa46:	f000 fa98 	bl	800af7a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800aa4a:	2300      	movs	r3, #0
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3710      	adds	r7, #16
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b088      	sub	sp, #32
 800aa58:	af04      	add	r7, sp, #16
 800aa5a:	60f8      	str	r0, [r7, #12]
 800aa5c:	60b9      	str	r1, [r7, #8]
 800aa5e:	4611      	mov	r1, r2
 800aa60:	461a      	mov	r2, r3
 800aa62:	460b      	mov	r3, r1
 800aa64:	80fb      	strh	r3, [r7, #6]
 800aa66:	4613      	mov	r3, r2
 800aa68:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aa6a:	7979      	ldrb	r1, [r7, #5]
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	9303      	str	r3, [sp, #12]
 800aa70:	88fb      	ldrh	r3, [r7, #6]
 800aa72:	9302      	str	r3, [sp, #8]
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	9301      	str	r3, [sp, #4]
 800aa78:	2301      	movs	r3, #1
 800aa7a:	9300      	str	r3, [sp, #0]
 800aa7c:	2302      	movs	r3, #2
 800aa7e:	2201      	movs	r2, #1
 800aa80:	68f8      	ldr	r0, [r7, #12]
 800aa82:	f000 fa7a 	bl	800af7a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800aa86:	2300      	movs	r3, #0
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3710      	adds	r7, #16
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b086      	sub	sp, #24
 800aa94:	af04      	add	r7, sp, #16
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	4608      	mov	r0, r1
 800aa9a:	4611      	mov	r1, r2
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	70fb      	strb	r3, [r7, #3]
 800aaa2:	460b      	mov	r3, r1
 800aaa4:	70bb      	strb	r3, [r7, #2]
 800aaa6:	4613      	mov	r3, r2
 800aaa8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800aaaa:	7878      	ldrb	r0, [r7, #1]
 800aaac:	78ba      	ldrb	r2, [r7, #2]
 800aaae:	78f9      	ldrb	r1, [r7, #3]
 800aab0:	8b3b      	ldrh	r3, [r7, #24]
 800aab2:	9302      	str	r3, [sp, #8]
 800aab4:	7d3b      	ldrb	r3, [r7, #20]
 800aab6:	9301      	str	r3, [sp, #4]
 800aab8:	7c3b      	ldrb	r3, [r7, #16]
 800aaba:	9300      	str	r3, [sp, #0]
 800aabc:	4603      	mov	r3, r0
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f000 fa0d 	bl	800aede <USBH_LL_OpenPipe>

  return USBH_OK;
 800aac4:	2300      	movs	r3, #0
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3708      	adds	r7, #8
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}

0800aace <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800aace:	b580      	push	{r7, lr}
 800aad0:	b082      	sub	sp, #8
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
 800aad6:	460b      	mov	r3, r1
 800aad8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800aada:	78fb      	ldrb	r3, [r7, #3]
 800aadc:	4619      	mov	r1, r3
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 fa2c 	bl	800af3c <USBH_LL_ClosePipe>

  return USBH_OK;
 800aae4:	2300      	movs	r3, #0
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3708      	adds	r7, #8
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}

0800aaee <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800aaee:	b580      	push	{r7, lr}
 800aaf0:	b084      	sub	sp, #16
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 f836 	bl	800ab6c <USBH_GetFreePipe>
 800ab00:	4603      	mov	r3, r0
 800ab02:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ab04:	89fb      	ldrh	r3, [r7, #14]
 800ab06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d00a      	beq.n	800ab24 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ab0e:	78fa      	ldrb	r2, [r7, #3]
 800ab10:	89fb      	ldrh	r3, [r7, #14]
 800ab12:	f003 030f 	and.w	r3, r3, #15
 800ab16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ab1a:	6879      	ldr	r1, [r7, #4]
 800ab1c:	33e0      	adds	r3, #224	; 0xe0
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	440b      	add	r3, r1
 800ab22:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ab24:	89fb      	ldrh	r3, [r7, #14]
 800ab26:	b2db      	uxtb	r3, r3
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3710      	adds	r7, #16
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b083      	sub	sp, #12
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	460b      	mov	r3, r1
 800ab3a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ab3c:	78fb      	ldrb	r3, [r7, #3]
 800ab3e:	2b0f      	cmp	r3, #15
 800ab40:	d80d      	bhi.n	800ab5e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ab42:	78fb      	ldrb	r3, [r7, #3]
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	33e0      	adds	r3, #224	; 0xe0
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	4413      	add	r3, r2
 800ab4c:	685a      	ldr	r2, [r3, #4]
 800ab4e:	78fb      	ldrb	r3, [r7, #3]
 800ab50:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ab54:	6879      	ldr	r1, [r7, #4]
 800ab56:	33e0      	adds	r3, #224	; 0xe0
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	440b      	add	r3, r1
 800ab5c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ab5e:	2300      	movs	r3, #0
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	370c      	adds	r7, #12
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b085      	sub	sp, #20
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ab74:	2300      	movs	r3, #0
 800ab76:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ab78:	2300      	movs	r3, #0
 800ab7a:	73fb      	strb	r3, [r7, #15]
 800ab7c:	e00f      	b.n	800ab9e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ab7e:	7bfb      	ldrb	r3, [r7, #15]
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	33e0      	adds	r3, #224	; 0xe0
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	4413      	add	r3, r2
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d102      	bne.n	800ab98 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ab92:	7bfb      	ldrb	r3, [r7, #15]
 800ab94:	b29b      	uxth	r3, r3
 800ab96:	e007      	b.n	800aba8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ab98:	7bfb      	ldrb	r3, [r7, #15]
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	73fb      	strb	r3, [r7, #15]
 800ab9e:	7bfb      	ldrb	r3, [r7, #15]
 800aba0:	2b0f      	cmp	r3, #15
 800aba2:	d9ec      	bls.n	800ab7e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800aba4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3714      	adds	r7, #20
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800abb8:	2200      	movs	r2, #0
 800abba:	490e      	ldr	r1, [pc, #56]	; (800abf4 <MX_USB_HOST_Init+0x40>)
 800abbc:	480e      	ldr	r0, [pc, #56]	; (800abf8 <MX_USB_HOST_Init+0x44>)
 800abbe:	f7ff fb19 	bl	800a1f4 <USBH_Init>
 800abc2:	4603      	mov	r3, r0
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d001      	beq.n	800abcc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800abc8:	f7f6 f91e 	bl	8000e08 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800abcc:	490b      	ldr	r1, [pc, #44]	; (800abfc <MX_USB_HOST_Init+0x48>)
 800abce:	480a      	ldr	r0, [pc, #40]	; (800abf8 <MX_USB_HOST_Init+0x44>)
 800abd0:	f7ff fbbd 	bl	800a34e <USBH_RegisterClass>
 800abd4:	4603      	mov	r3, r0
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d001      	beq.n	800abde <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800abda:	f7f6 f915 	bl	8000e08 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800abde:	4806      	ldr	r0, [pc, #24]	; (800abf8 <MX_USB_HOST_Init+0x44>)
 800abe0:	f7ff fc41 	bl	800a466 <USBH_Start>
 800abe4:	4603      	mov	r3, r0
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d001      	beq.n	800abee <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800abea:	f7f6 f90d 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800abee:	bf00      	nop
 800abf0:	bd80      	pop	{r7, pc}
 800abf2:	bf00      	nop
 800abf4:	0800ac01 	.word	0x0800ac01
 800abf8:	200003f8 	.word	0x200003f8
 800abfc:	20000044 	.word	0x20000044

0800ac00 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	460b      	mov	r3, r1
 800ac0a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ac0c:	78fb      	ldrb	r3, [r7, #3]
 800ac0e:	3b01      	subs	r3, #1
 800ac10:	2b04      	cmp	r3, #4
 800ac12:	d819      	bhi.n	800ac48 <USBH_UserProcess+0x48>
 800ac14:	a201      	add	r2, pc, #4	; (adr r2, 800ac1c <USBH_UserProcess+0x1c>)
 800ac16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac1a:	bf00      	nop
 800ac1c:	0800ac49 	.word	0x0800ac49
 800ac20:	0800ac39 	.word	0x0800ac39
 800ac24:	0800ac49 	.word	0x0800ac49
 800ac28:	0800ac41 	.word	0x0800ac41
 800ac2c:	0800ac31 	.word	0x0800ac31
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ac30:	4b09      	ldr	r3, [pc, #36]	; (800ac58 <USBH_UserProcess+0x58>)
 800ac32:	2203      	movs	r2, #3
 800ac34:	701a      	strb	r2, [r3, #0]
  break;
 800ac36:	e008      	b.n	800ac4a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ac38:	4b07      	ldr	r3, [pc, #28]	; (800ac58 <USBH_UserProcess+0x58>)
 800ac3a:	2202      	movs	r2, #2
 800ac3c:	701a      	strb	r2, [r3, #0]
  break;
 800ac3e:	e004      	b.n	800ac4a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ac40:	4b05      	ldr	r3, [pc, #20]	; (800ac58 <USBH_UserProcess+0x58>)
 800ac42:	2201      	movs	r2, #1
 800ac44:	701a      	strb	r2, [r3, #0]
  break;
 800ac46:	e000      	b.n	800ac4a <USBH_UserProcess+0x4a>

  default:
  break;
 800ac48:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ac4a:	bf00      	nop
 800ac4c:	370c      	adds	r7, #12
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr
 800ac56:	bf00      	nop
 800ac58:	200007d0 	.word	0x200007d0

0800ac5c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b08a      	sub	sp, #40	; 0x28
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac64:	f107 0314 	add.w	r3, r7, #20
 800ac68:	2200      	movs	r2, #0
 800ac6a:	601a      	str	r2, [r3, #0]
 800ac6c:	605a      	str	r2, [r3, #4]
 800ac6e:	609a      	str	r2, [r3, #8]
 800ac70:	60da      	str	r2, [r3, #12]
 800ac72:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4a24      	ldr	r2, [pc, #144]	; (800ad0c <HAL_HCD_MspInit+0xb0>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d141      	bne.n	800ad02 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ac7e:	2300      	movs	r3, #0
 800ac80:	613b      	str	r3, [r7, #16]
 800ac82:	4b23      	ldr	r3, [pc, #140]	; (800ad10 <HAL_HCD_MspInit+0xb4>)
 800ac84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac86:	4a22      	ldr	r2, [pc, #136]	; (800ad10 <HAL_HCD_MspInit+0xb4>)
 800ac88:	f043 0302 	orr.w	r3, r3, #2
 800ac8c:	6313      	str	r3, [r2, #48]	; 0x30
 800ac8e:	4b20      	ldr	r3, [pc, #128]	; (800ad10 <HAL_HCD_MspInit+0xb4>)
 800ac90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac92:	f003 0302 	and.w	r3, r3, #2
 800ac96:	613b      	str	r3, [r7, #16]
 800ac98:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800ac9a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800ac9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aca0:	2302      	movs	r3, #2
 800aca2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aca4:	2300      	movs	r3, #0
 800aca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aca8:	2300      	movs	r3, #0
 800acaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800acac:	230c      	movs	r3, #12
 800acae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800acb0:	f107 0314 	add.w	r3, r7, #20
 800acb4:	4619      	mov	r1, r3
 800acb6:	4817      	ldr	r0, [pc, #92]	; (800ad14 <HAL_HCD_MspInit+0xb8>)
 800acb8:	f7f7 fd34 	bl	8002724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800acbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800acc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800acc2:	2300      	movs	r3, #0
 800acc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acc6:	2300      	movs	r3, #0
 800acc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800acca:	f107 0314 	add.w	r3, r7, #20
 800acce:	4619      	mov	r1, r3
 800acd0:	4810      	ldr	r0, [pc, #64]	; (800ad14 <HAL_HCD_MspInit+0xb8>)
 800acd2:	f7f7 fd27 	bl	8002724 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800acd6:	2300      	movs	r3, #0
 800acd8:	60fb      	str	r3, [r7, #12]
 800acda:	4b0d      	ldr	r3, [pc, #52]	; (800ad10 <HAL_HCD_MspInit+0xb4>)
 800acdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acde:	4a0c      	ldr	r2, [pc, #48]	; (800ad10 <HAL_HCD_MspInit+0xb4>)
 800ace0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ace4:	6313      	str	r3, [r2, #48]	; 0x30
 800ace6:	4b0a      	ldr	r3, [pc, #40]	; (800ad10 <HAL_HCD_MspInit+0xb4>)
 800ace8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800acee:	60fb      	str	r3, [r7, #12]
 800acf0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800acf2:	2200      	movs	r2, #0
 800acf4:	2100      	movs	r1, #0
 800acf6:	204d      	movs	r0, #77	; 0x4d
 800acf8:	f7f7 fa45 	bl	8002186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800acfc:	204d      	movs	r0, #77	; 0x4d
 800acfe:	f7f7 fa5e 	bl	80021be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800ad02:	bf00      	nop
 800ad04:	3728      	adds	r7, #40	; 0x28
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	40040000 	.word	0x40040000
 800ad10:	40023800 	.word	0x40023800
 800ad14:	40020400 	.word	0x40020400

0800ad18 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800ad26:	4618      	mov	r0, r3
 800ad28:	f7ff fbbc 	bl	800a4a4 <USBH_LL_IncTimer>
}
 800ad2c:	bf00      	nop
 800ad2e:	3708      	adds	r7, #8
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800ad42:	4618      	mov	r0, r3
 800ad44:	f7ff fbf4 	bl	800a530 <USBH_LL_Connect>
}
 800ad48:	bf00      	nop
 800ad4a:	3708      	adds	r7, #8
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7ff fbfd 	bl	800a55e <USBH_LL_Disconnect>
}
 800ad64:	bf00      	nop
 800ad66:	3708      	adds	r7, #8
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b083      	sub	sp, #12
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	460b      	mov	r3, r1
 800ad76:	70fb      	strb	r3, [r7, #3]
 800ad78:	4613      	mov	r3, r2
 800ad7a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ad7c:	bf00      	nop
 800ad7e:	370c      	adds	r7, #12
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr

0800ad88 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800ad96:	4618      	mov	r0, r3
 800ad98:	f7ff fbae 	bl	800a4f8 <USBH_LL_PortEnabled>
}
 800ad9c:	bf00      	nop
 800ad9e:	3708      	adds	r7, #8
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7ff fbae 	bl	800a514 <USBH_LL_PortDisabled>
}
 800adb8:	bf00      	nop
 800adba:	3708      	adds	r7, #8
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800adce:	2b00      	cmp	r3, #0
 800add0:	d132      	bne.n	800ae38 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800add2:	4a1c      	ldr	r2, [pc, #112]	; (800ae44 <USBH_LL_Init+0x84>)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_HS;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	4a19      	ldr	r2, [pc, #100]	; (800ae44 <USBH_LL_Init+0x84>)
 800adde:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800ade2:	4b18      	ldr	r3, [pc, #96]	; (800ae44 <USBH_LL_Init+0x84>)
 800ade4:	4a18      	ldr	r2, [pc, #96]	; (800ae48 <USBH_LL_Init+0x88>)
 800ade6:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800ade8:	4b16      	ldr	r3, [pc, #88]	; (800ae44 <USBH_LL_Init+0x84>)
 800adea:	220c      	movs	r2, #12
 800adec:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800adee:	4b15      	ldr	r3, [pc, #84]	; (800ae44 <USBH_LL_Init+0x84>)
 800adf0:	2201      	movs	r2, #1
 800adf2:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800adf4:	4b13      	ldr	r3, [pc, #76]	; (800ae44 <USBH_LL_Init+0x84>)
 800adf6:	2200      	movs	r2, #0
 800adf8:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800adfa:	4b12      	ldr	r3, [pc, #72]	; (800ae44 <USBH_LL_Init+0x84>)
 800adfc:	2202      	movs	r2, #2
 800adfe:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800ae00:	4b10      	ldr	r3, [pc, #64]	; (800ae44 <USBH_LL_Init+0x84>)
 800ae02:	2200      	movs	r2, #0
 800ae04:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800ae06:	4b0f      	ldr	r3, [pc, #60]	; (800ae44 <USBH_LL_Init+0x84>)
 800ae08:	2200      	movs	r2, #0
 800ae0a:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800ae0c:	4b0d      	ldr	r3, [pc, #52]	; (800ae44 <USBH_LL_Init+0x84>)
 800ae0e:	2200      	movs	r2, #0
 800ae10:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800ae12:	4b0c      	ldr	r3, [pc, #48]	; (800ae44 <USBH_LL_Init+0x84>)
 800ae14:	2200      	movs	r2, #0
 800ae16:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800ae18:	480a      	ldr	r0, [pc, #40]	; (800ae44 <USBH_LL_Init+0x84>)
 800ae1a:	f7f7 ff54 	bl	8002cc6 <HAL_HCD_Init>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d001      	beq.n	800ae28 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800ae24:	f7f5 fff0 	bl	8000e08 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800ae28:	4806      	ldr	r0, [pc, #24]	; (800ae44 <USBH_LL_Init+0x84>)
 800ae2a:	f7f8 fba7 	bl	800357c <HAL_HCD_GetCurrentFrame>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	4619      	mov	r1, r3
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f7ff fb27 	bl	800a486 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ae38:	2300      	movs	r3, #0
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3708      	adds	r7, #8
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	200007d4 	.word	0x200007d4
 800ae48:	40040000 	.word	0x40040000

0800ae4c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae54:	2300      	movs	r3, #0
 800ae56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7f8 fb20 	bl	80034a8 <HAL_HCD_Start>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ae6c:	7bfb      	ldrb	r3, [r7, #15]
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f000 f912 	bl	800b098 <USBH_Get_USB_Status>
 800ae74:	4603      	mov	r3, r0
 800ae76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae78:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3710      	adds	r7, #16
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}

0800ae82 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ae82:	b580      	push	{r7, lr}
 800ae84:	b084      	sub	sp, #16
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f7f8 fb28 	bl	80034ee <HAL_HCD_Stop>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aea2:	7bfb      	ldrb	r3, [r7, #15]
 800aea4:	4618      	mov	r0, r3
 800aea6:	f000 f8f7 	bl	800b098 <USBH_Get_USB_Status>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aeae:	7bbb      	ldrb	r3, [r7, #14]
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3710      	adds	r7, #16
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	460b      	mov	r3, r1
 800aec2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aeca:	78fa      	ldrb	r2, [r7, #3]
 800aecc:	4611      	mov	r1, r2
 800aece:	4618      	mov	r0, r3
 800aed0:	f7f8 fb3f 	bl	8003552 <HAL_HCD_HC_GetXferCount>
 800aed4:	4603      	mov	r3, r0
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3708      	adds	r7, #8
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800aede:	b590      	push	{r4, r7, lr}
 800aee0:	b089      	sub	sp, #36	; 0x24
 800aee2:	af04      	add	r7, sp, #16
 800aee4:	6078      	str	r0, [r7, #4]
 800aee6:	4608      	mov	r0, r1
 800aee8:	4611      	mov	r1, r2
 800aeea:	461a      	mov	r2, r3
 800aeec:	4603      	mov	r3, r0
 800aeee:	70fb      	strb	r3, [r7, #3]
 800aef0:	460b      	mov	r3, r1
 800aef2:	70bb      	strb	r3, [r7, #2]
 800aef4:	4613      	mov	r3, r2
 800aef6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aef8:	2300      	movs	r3, #0
 800aefa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aefc:	2300      	movs	r3, #0
 800aefe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800af06:	787c      	ldrb	r4, [r7, #1]
 800af08:	78ba      	ldrb	r2, [r7, #2]
 800af0a:	78f9      	ldrb	r1, [r7, #3]
 800af0c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800af0e:	9302      	str	r3, [sp, #8]
 800af10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800af14:	9301      	str	r3, [sp, #4]
 800af16:	f897 3020 	ldrb.w	r3, [r7, #32]
 800af1a:	9300      	str	r3, [sp, #0]
 800af1c:	4623      	mov	r3, r4
 800af1e:	f7f7 ff39 	bl	8002d94 <HAL_HCD_HC_Init>
 800af22:	4603      	mov	r3, r0
 800af24:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800af26:	7bfb      	ldrb	r3, [r7, #15]
 800af28:	4618      	mov	r0, r3
 800af2a:	f000 f8b5 	bl	800b098 <USBH_Get_USB_Status>
 800af2e:	4603      	mov	r3, r0
 800af30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af32:	7bbb      	ldrb	r3, [r7, #14]
}
 800af34:	4618      	mov	r0, r3
 800af36:	3714      	adds	r7, #20
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd90      	pop	{r4, r7, pc}

0800af3c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	460b      	mov	r3, r1
 800af46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af48:	2300      	movs	r3, #0
 800af4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af4c:	2300      	movs	r3, #0
 800af4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800af56:	78fa      	ldrb	r2, [r7, #3]
 800af58:	4611      	mov	r1, r2
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7f7 ffd2 	bl	8002f04 <HAL_HCD_HC_Halt>
 800af60:	4603      	mov	r3, r0
 800af62:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800af64:	7bfb      	ldrb	r3, [r7, #15]
 800af66:	4618      	mov	r0, r3
 800af68:	f000 f896 	bl	800b098 <USBH_Get_USB_Status>
 800af6c:	4603      	mov	r3, r0
 800af6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af70:	7bbb      	ldrb	r3, [r7, #14]
}
 800af72:	4618      	mov	r0, r3
 800af74:	3710      	adds	r7, #16
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}

0800af7a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800af7a:	b590      	push	{r4, r7, lr}
 800af7c:	b089      	sub	sp, #36	; 0x24
 800af7e:	af04      	add	r7, sp, #16
 800af80:	6078      	str	r0, [r7, #4]
 800af82:	4608      	mov	r0, r1
 800af84:	4611      	mov	r1, r2
 800af86:	461a      	mov	r2, r3
 800af88:	4603      	mov	r3, r0
 800af8a:	70fb      	strb	r3, [r7, #3]
 800af8c:	460b      	mov	r3, r1
 800af8e:	70bb      	strb	r3, [r7, #2]
 800af90:	4613      	mov	r3, r2
 800af92:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af94:	2300      	movs	r3, #0
 800af96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af98:	2300      	movs	r3, #0
 800af9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800afa2:	787c      	ldrb	r4, [r7, #1]
 800afa4:	78ba      	ldrb	r2, [r7, #2]
 800afa6:	78f9      	ldrb	r1, [r7, #3]
 800afa8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800afac:	9303      	str	r3, [sp, #12]
 800afae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800afb0:	9302      	str	r3, [sp, #8]
 800afb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb4:	9301      	str	r3, [sp, #4]
 800afb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800afba:	9300      	str	r3, [sp, #0]
 800afbc:	4623      	mov	r3, r4
 800afbe:	f7f7 ffc5 	bl	8002f4c <HAL_HCD_HC_SubmitRequest>
 800afc2:	4603      	mov	r3, r0
 800afc4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800afc6:	7bfb      	ldrb	r3, [r7, #15]
 800afc8:	4618      	mov	r0, r3
 800afca:	f000 f865 	bl	800b098 <USBH_Get_USB_Status>
 800afce:	4603      	mov	r3, r0
 800afd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afd2:	7bbb      	ldrb	r3, [r7, #14]
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3714      	adds	r7, #20
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd90      	pop	{r4, r7, pc}

0800afdc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	460b      	mov	r3, r1
 800afe6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800afee:	78fa      	ldrb	r2, [r7, #3]
 800aff0:	4611      	mov	r1, r2
 800aff2:	4618      	mov	r0, r3
 800aff4:	f7f8 fa98 	bl	8003528 <HAL_HCD_HC_GetURBState>
 800aff8:	4603      	mov	r3, r0
}
 800affa:	4618      	mov	r0, r3
 800affc:	3708      	adds	r7, #8
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}

0800b002 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b002:	b580      	push	{r7, lr}
 800b004:	b082      	sub	sp, #8
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
 800b00a:	460b      	mov	r3, r1
 800b00c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b014:	2b00      	cmp	r3, #0
 800b016:	d103      	bne.n	800b020 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800b018:	78fb      	ldrb	r3, [r7, #3]
 800b01a:	4618      	mov	r0, r3
 800b01c:	f000 f868 	bl	800b0f0 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b020:	20c8      	movs	r0, #200	; 0xc8
 800b022:	f7f6 ffb1 	bl	8001f88 <HAL_Delay>
  return USBH_OK;
 800b026:	2300      	movs	r3, #0
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3708      	adds	r7, #8
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b030:	b480      	push	{r7}
 800b032:	b085      	sub	sp, #20
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	460b      	mov	r3, r1
 800b03a:	70fb      	strb	r3, [r7, #3]
 800b03c:	4613      	mov	r3, r2
 800b03e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b046:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b048:	78fa      	ldrb	r2, [r7, #3]
 800b04a:	68f9      	ldr	r1, [r7, #12]
 800b04c:	4613      	mov	r3, r2
 800b04e:	011b      	lsls	r3, r3, #4
 800b050:	1a9b      	subs	r3, r3, r2
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	440b      	add	r3, r1
 800b056:	3317      	adds	r3, #23
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d00a      	beq.n	800b074 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b05e:	78fa      	ldrb	r2, [r7, #3]
 800b060:	68f9      	ldr	r1, [r7, #12]
 800b062:	4613      	mov	r3, r2
 800b064:	011b      	lsls	r3, r3, #4
 800b066:	1a9b      	subs	r3, r3, r2
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	440b      	add	r3, r1
 800b06c:	333c      	adds	r3, #60	; 0x3c
 800b06e:	78ba      	ldrb	r2, [r7, #2]
 800b070:	701a      	strb	r2, [r3, #0]
 800b072:	e009      	b.n	800b088 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b074:	78fa      	ldrb	r2, [r7, #3]
 800b076:	68f9      	ldr	r1, [r7, #12]
 800b078:	4613      	mov	r3, r2
 800b07a:	011b      	lsls	r3, r3, #4
 800b07c:	1a9b      	subs	r3, r3, r2
 800b07e:	009b      	lsls	r3, r3, #2
 800b080:	440b      	add	r3, r1
 800b082:	333d      	adds	r3, #61	; 0x3d
 800b084:	78ba      	ldrb	r2, [r7, #2]
 800b086:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b088:	2300      	movs	r3, #0
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3714      	adds	r7, #20
 800b08e:	46bd      	mov	sp, r7
 800b090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b094:	4770      	bx	lr
	...

0800b098 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b098:	b480      	push	{r7}
 800b09a:	b085      	sub	sp, #20
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	4603      	mov	r3, r0
 800b0a0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b0a6:	79fb      	ldrb	r3, [r7, #7]
 800b0a8:	2b03      	cmp	r3, #3
 800b0aa:	d817      	bhi.n	800b0dc <USBH_Get_USB_Status+0x44>
 800b0ac:	a201      	add	r2, pc, #4	; (adr r2, 800b0b4 <USBH_Get_USB_Status+0x1c>)
 800b0ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b2:	bf00      	nop
 800b0b4:	0800b0c5 	.word	0x0800b0c5
 800b0b8:	0800b0cb 	.word	0x0800b0cb
 800b0bc:	0800b0d1 	.word	0x0800b0d1
 800b0c0:	0800b0d7 	.word	0x0800b0d7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	73fb      	strb	r3, [r7, #15]
    break;
 800b0c8:	e00b      	b.n	800b0e2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b0ca:	2302      	movs	r3, #2
 800b0cc:	73fb      	strb	r3, [r7, #15]
    break;
 800b0ce:	e008      	b.n	800b0e2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	73fb      	strb	r3, [r7, #15]
    break;
 800b0d4:	e005      	b.n	800b0e2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b0d6:	2302      	movs	r3, #2
 800b0d8:	73fb      	strb	r3, [r7, #15]
    break;
 800b0da:	e002      	b.n	800b0e2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b0dc:	2302      	movs	r3, #2
 800b0de:	73fb      	strb	r3, [r7, #15]
    break;
 800b0e0:	bf00      	nop
  }
  return usb_status;
 800b0e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3714      	adds	r7, #20
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr

0800b0f0 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b084      	sub	sp, #16
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b0fa:	79fb      	ldrb	r3, [r7, #7]
 800b0fc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800b0fe:	79fb      	ldrb	r3, [r7, #7]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d102      	bne.n	800b10a <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800b104:	2301      	movs	r3, #1
 800b106:	73fb      	strb	r3, [r7, #15]
 800b108:	e001      	b.n	800b10e <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800b10a:	2300      	movs	r3, #0
 800b10c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800b10e:	7bfb      	ldrb	r3, [r7, #15]
 800b110:	461a      	mov	r2, r3
 800b112:	2110      	movs	r1, #16
 800b114:	4803      	ldr	r0, [pc, #12]	; (800b124 <MX_DriverVbusHS+0x34>)
 800b116:	f7f7 fdbd 	bl	8002c94 <HAL_GPIO_WritePin>
}
 800b11a:	bf00      	nop
 800b11c:	3710      	adds	r7, #16
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	40020800 	.word	0x40020800

0800b128 <malloc>:
 800b128:	4b02      	ldr	r3, [pc, #8]	; (800b134 <malloc+0xc>)
 800b12a:	4601      	mov	r1, r0
 800b12c:	6818      	ldr	r0, [r3, #0]
 800b12e:	f000 b82b 	b.w	800b188 <_malloc_r>
 800b132:	bf00      	nop
 800b134:	200000b0 	.word	0x200000b0

0800b138 <free>:
 800b138:	4b02      	ldr	r3, [pc, #8]	; (800b144 <free+0xc>)
 800b13a:	4601      	mov	r1, r0
 800b13c:	6818      	ldr	r0, [r3, #0]
 800b13e:	f000 b8f3 	b.w	800b328 <_free_r>
 800b142:	bf00      	nop
 800b144:	200000b0 	.word	0x200000b0

0800b148 <sbrk_aligned>:
 800b148:	b570      	push	{r4, r5, r6, lr}
 800b14a:	4e0e      	ldr	r6, [pc, #56]	; (800b184 <sbrk_aligned+0x3c>)
 800b14c:	460c      	mov	r4, r1
 800b14e:	6831      	ldr	r1, [r6, #0]
 800b150:	4605      	mov	r5, r0
 800b152:	b911      	cbnz	r1, 800b15a <sbrk_aligned+0x12>
 800b154:	f000 f8ac 	bl	800b2b0 <_sbrk_r>
 800b158:	6030      	str	r0, [r6, #0]
 800b15a:	4621      	mov	r1, r4
 800b15c:	4628      	mov	r0, r5
 800b15e:	f000 f8a7 	bl	800b2b0 <_sbrk_r>
 800b162:	1c43      	adds	r3, r0, #1
 800b164:	d00a      	beq.n	800b17c <sbrk_aligned+0x34>
 800b166:	1cc4      	adds	r4, r0, #3
 800b168:	f024 0403 	bic.w	r4, r4, #3
 800b16c:	42a0      	cmp	r0, r4
 800b16e:	d007      	beq.n	800b180 <sbrk_aligned+0x38>
 800b170:	1a21      	subs	r1, r4, r0
 800b172:	4628      	mov	r0, r5
 800b174:	f000 f89c 	bl	800b2b0 <_sbrk_r>
 800b178:	3001      	adds	r0, #1
 800b17a:	d101      	bne.n	800b180 <sbrk_aligned+0x38>
 800b17c:	f04f 34ff 	mov.w	r4, #4294967295
 800b180:	4620      	mov	r0, r4
 800b182:	bd70      	pop	{r4, r5, r6, pc}
 800b184:	20000bb8 	.word	0x20000bb8

0800b188 <_malloc_r>:
 800b188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b18c:	1ccd      	adds	r5, r1, #3
 800b18e:	f025 0503 	bic.w	r5, r5, #3
 800b192:	3508      	adds	r5, #8
 800b194:	2d0c      	cmp	r5, #12
 800b196:	bf38      	it	cc
 800b198:	250c      	movcc	r5, #12
 800b19a:	2d00      	cmp	r5, #0
 800b19c:	4607      	mov	r7, r0
 800b19e:	db01      	blt.n	800b1a4 <_malloc_r+0x1c>
 800b1a0:	42a9      	cmp	r1, r5
 800b1a2:	d905      	bls.n	800b1b0 <_malloc_r+0x28>
 800b1a4:	230c      	movs	r3, #12
 800b1a6:	603b      	str	r3, [r7, #0]
 800b1a8:	2600      	movs	r6, #0
 800b1aa:	4630      	mov	r0, r6
 800b1ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b284 <_malloc_r+0xfc>
 800b1b4:	f000 f868 	bl	800b288 <__malloc_lock>
 800b1b8:	f8d8 3000 	ldr.w	r3, [r8]
 800b1bc:	461c      	mov	r4, r3
 800b1be:	bb5c      	cbnz	r4, 800b218 <_malloc_r+0x90>
 800b1c0:	4629      	mov	r1, r5
 800b1c2:	4638      	mov	r0, r7
 800b1c4:	f7ff ffc0 	bl	800b148 <sbrk_aligned>
 800b1c8:	1c43      	adds	r3, r0, #1
 800b1ca:	4604      	mov	r4, r0
 800b1cc:	d155      	bne.n	800b27a <_malloc_r+0xf2>
 800b1ce:	f8d8 4000 	ldr.w	r4, [r8]
 800b1d2:	4626      	mov	r6, r4
 800b1d4:	2e00      	cmp	r6, #0
 800b1d6:	d145      	bne.n	800b264 <_malloc_r+0xdc>
 800b1d8:	2c00      	cmp	r4, #0
 800b1da:	d048      	beq.n	800b26e <_malloc_r+0xe6>
 800b1dc:	6823      	ldr	r3, [r4, #0]
 800b1de:	4631      	mov	r1, r6
 800b1e0:	4638      	mov	r0, r7
 800b1e2:	eb04 0903 	add.w	r9, r4, r3
 800b1e6:	f000 f863 	bl	800b2b0 <_sbrk_r>
 800b1ea:	4581      	cmp	r9, r0
 800b1ec:	d13f      	bne.n	800b26e <_malloc_r+0xe6>
 800b1ee:	6821      	ldr	r1, [r4, #0]
 800b1f0:	1a6d      	subs	r5, r5, r1
 800b1f2:	4629      	mov	r1, r5
 800b1f4:	4638      	mov	r0, r7
 800b1f6:	f7ff ffa7 	bl	800b148 <sbrk_aligned>
 800b1fa:	3001      	adds	r0, #1
 800b1fc:	d037      	beq.n	800b26e <_malloc_r+0xe6>
 800b1fe:	6823      	ldr	r3, [r4, #0]
 800b200:	442b      	add	r3, r5
 800b202:	6023      	str	r3, [r4, #0]
 800b204:	f8d8 3000 	ldr.w	r3, [r8]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d038      	beq.n	800b27e <_malloc_r+0xf6>
 800b20c:	685a      	ldr	r2, [r3, #4]
 800b20e:	42a2      	cmp	r2, r4
 800b210:	d12b      	bne.n	800b26a <_malloc_r+0xe2>
 800b212:	2200      	movs	r2, #0
 800b214:	605a      	str	r2, [r3, #4]
 800b216:	e00f      	b.n	800b238 <_malloc_r+0xb0>
 800b218:	6822      	ldr	r2, [r4, #0]
 800b21a:	1b52      	subs	r2, r2, r5
 800b21c:	d41f      	bmi.n	800b25e <_malloc_r+0xd6>
 800b21e:	2a0b      	cmp	r2, #11
 800b220:	d917      	bls.n	800b252 <_malloc_r+0xca>
 800b222:	1961      	adds	r1, r4, r5
 800b224:	42a3      	cmp	r3, r4
 800b226:	6025      	str	r5, [r4, #0]
 800b228:	bf18      	it	ne
 800b22a:	6059      	strne	r1, [r3, #4]
 800b22c:	6863      	ldr	r3, [r4, #4]
 800b22e:	bf08      	it	eq
 800b230:	f8c8 1000 	streq.w	r1, [r8]
 800b234:	5162      	str	r2, [r4, r5]
 800b236:	604b      	str	r3, [r1, #4]
 800b238:	4638      	mov	r0, r7
 800b23a:	f104 060b 	add.w	r6, r4, #11
 800b23e:	f000 f829 	bl	800b294 <__malloc_unlock>
 800b242:	f026 0607 	bic.w	r6, r6, #7
 800b246:	1d23      	adds	r3, r4, #4
 800b248:	1af2      	subs	r2, r6, r3
 800b24a:	d0ae      	beq.n	800b1aa <_malloc_r+0x22>
 800b24c:	1b9b      	subs	r3, r3, r6
 800b24e:	50a3      	str	r3, [r4, r2]
 800b250:	e7ab      	b.n	800b1aa <_malloc_r+0x22>
 800b252:	42a3      	cmp	r3, r4
 800b254:	6862      	ldr	r2, [r4, #4]
 800b256:	d1dd      	bne.n	800b214 <_malloc_r+0x8c>
 800b258:	f8c8 2000 	str.w	r2, [r8]
 800b25c:	e7ec      	b.n	800b238 <_malloc_r+0xb0>
 800b25e:	4623      	mov	r3, r4
 800b260:	6864      	ldr	r4, [r4, #4]
 800b262:	e7ac      	b.n	800b1be <_malloc_r+0x36>
 800b264:	4634      	mov	r4, r6
 800b266:	6876      	ldr	r6, [r6, #4]
 800b268:	e7b4      	b.n	800b1d4 <_malloc_r+0x4c>
 800b26a:	4613      	mov	r3, r2
 800b26c:	e7cc      	b.n	800b208 <_malloc_r+0x80>
 800b26e:	230c      	movs	r3, #12
 800b270:	603b      	str	r3, [r7, #0]
 800b272:	4638      	mov	r0, r7
 800b274:	f000 f80e 	bl	800b294 <__malloc_unlock>
 800b278:	e797      	b.n	800b1aa <_malloc_r+0x22>
 800b27a:	6025      	str	r5, [r4, #0]
 800b27c:	e7dc      	b.n	800b238 <_malloc_r+0xb0>
 800b27e:	605b      	str	r3, [r3, #4]
 800b280:	deff      	udf	#255	; 0xff
 800b282:	bf00      	nop
 800b284:	20000bb4 	.word	0x20000bb4

0800b288 <__malloc_lock>:
 800b288:	4801      	ldr	r0, [pc, #4]	; (800b290 <__malloc_lock+0x8>)
 800b28a:	f000 b84b 	b.w	800b324 <__retarget_lock_acquire_recursive>
 800b28e:	bf00      	nop
 800b290:	20000cf8 	.word	0x20000cf8

0800b294 <__malloc_unlock>:
 800b294:	4801      	ldr	r0, [pc, #4]	; (800b29c <__malloc_unlock+0x8>)
 800b296:	f000 b846 	b.w	800b326 <__retarget_lock_release_recursive>
 800b29a:	bf00      	nop
 800b29c:	20000cf8 	.word	0x20000cf8

0800b2a0 <memset>:
 800b2a0:	4402      	add	r2, r0
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d100      	bne.n	800b2aa <memset+0xa>
 800b2a8:	4770      	bx	lr
 800b2aa:	f803 1b01 	strb.w	r1, [r3], #1
 800b2ae:	e7f9      	b.n	800b2a4 <memset+0x4>

0800b2b0 <_sbrk_r>:
 800b2b0:	b538      	push	{r3, r4, r5, lr}
 800b2b2:	4d06      	ldr	r5, [pc, #24]	; (800b2cc <_sbrk_r+0x1c>)
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	4604      	mov	r4, r0
 800b2b8:	4608      	mov	r0, r1
 800b2ba:	602b      	str	r3, [r5, #0]
 800b2bc:	f7f6 f9a0 	bl	8001600 <_sbrk>
 800b2c0:	1c43      	adds	r3, r0, #1
 800b2c2:	d102      	bne.n	800b2ca <_sbrk_r+0x1a>
 800b2c4:	682b      	ldr	r3, [r5, #0]
 800b2c6:	b103      	cbz	r3, 800b2ca <_sbrk_r+0x1a>
 800b2c8:	6023      	str	r3, [r4, #0]
 800b2ca:	bd38      	pop	{r3, r4, r5, pc}
 800b2cc:	20000cf4 	.word	0x20000cf4

0800b2d0 <__errno>:
 800b2d0:	4b01      	ldr	r3, [pc, #4]	; (800b2d8 <__errno+0x8>)
 800b2d2:	6818      	ldr	r0, [r3, #0]
 800b2d4:	4770      	bx	lr
 800b2d6:	bf00      	nop
 800b2d8:	200000b0 	.word	0x200000b0

0800b2dc <__libc_init_array>:
 800b2dc:	b570      	push	{r4, r5, r6, lr}
 800b2de:	4d0d      	ldr	r5, [pc, #52]	; (800b314 <__libc_init_array+0x38>)
 800b2e0:	4c0d      	ldr	r4, [pc, #52]	; (800b318 <__libc_init_array+0x3c>)
 800b2e2:	1b64      	subs	r4, r4, r5
 800b2e4:	10a4      	asrs	r4, r4, #2
 800b2e6:	2600      	movs	r6, #0
 800b2e8:	42a6      	cmp	r6, r4
 800b2ea:	d109      	bne.n	800b300 <__libc_init_array+0x24>
 800b2ec:	4d0b      	ldr	r5, [pc, #44]	; (800b31c <__libc_init_array+0x40>)
 800b2ee:	4c0c      	ldr	r4, [pc, #48]	; (800b320 <__libc_init_array+0x44>)
 800b2f0:	f000 f866 	bl	800b3c0 <_init>
 800b2f4:	1b64      	subs	r4, r4, r5
 800b2f6:	10a4      	asrs	r4, r4, #2
 800b2f8:	2600      	movs	r6, #0
 800b2fa:	42a6      	cmp	r6, r4
 800b2fc:	d105      	bne.n	800b30a <__libc_init_array+0x2e>
 800b2fe:	bd70      	pop	{r4, r5, r6, pc}
 800b300:	f855 3b04 	ldr.w	r3, [r5], #4
 800b304:	4798      	blx	r3
 800b306:	3601      	adds	r6, #1
 800b308:	e7ee      	b.n	800b2e8 <__libc_init_array+0xc>
 800b30a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b30e:	4798      	blx	r3
 800b310:	3601      	adds	r6, #1
 800b312:	e7f2      	b.n	800b2fa <__libc_init_array+0x1e>
 800b314:	0800b3fc 	.word	0x0800b3fc
 800b318:	0800b3fc 	.word	0x0800b3fc
 800b31c:	0800b3fc 	.word	0x0800b3fc
 800b320:	0800b400 	.word	0x0800b400

0800b324 <__retarget_lock_acquire_recursive>:
 800b324:	4770      	bx	lr

0800b326 <__retarget_lock_release_recursive>:
 800b326:	4770      	bx	lr

0800b328 <_free_r>:
 800b328:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b32a:	2900      	cmp	r1, #0
 800b32c:	d044      	beq.n	800b3b8 <_free_r+0x90>
 800b32e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b332:	9001      	str	r0, [sp, #4]
 800b334:	2b00      	cmp	r3, #0
 800b336:	f1a1 0404 	sub.w	r4, r1, #4
 800b33a:	bfb8      	it	lt
 800b33c:	18e4      	addlt	r4, r4, r3
 800b33e:	f7ff ffa3 	bl	800b288 <__malloc_lock>
 800b342:	4a1e      	ldr	r2, [pc, #120]	; (800b3bc <_free_r+0x94>)
 800b344:	9801      	ldr	r0, [sp, #4]
 800b346:	6813      	ldr	r3, [r2, #0]
 800b348:	b933      	cbnz	r3, 800b358 <_free_r+0x30>
 800b34a:	6063      	str	r3, [r4, #4]
 800b34c:	6014      	str	r4, [r2, #0]
 800b34e:	b003      	add	sp, #12
 800b350:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b354:	f7ff bf9e 	b.w	800b294 <__malloc_unlock>
 800b358:	42a3      	cmp	r3, r4
 800b35a:	d908      	bls.n	800b36e <_free_r+0x46>
 800b35c:	6825      	ldr	r5, [r4, #0]
 800b35e:	1961      	adds	r1, r4, r5
 800b360:	428b      	cmp	r3, r1
 800b362:	bf01      	itttt	eq
 800b364:	6819      	ldreq	r1, [r3, #0]
 800b366:	685b      	ldreq	r3, [r3, #4]
 800b368:	1949      	addeq	r1, r1, r5
 800b36a:	6021      	streq	r1, [r4, #0]
 800b36c:	e7ed      	b.n	800b34a <_free_r+0x22>
 800b36e:	461a      	mov	r2, r3
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	b10b      	cbz	r3, 800b378 <_free_r+0x50>
 800b374:	42a3      	cmp	r3, r4
 800b376:	d9fa      	bls.n	800b36e <_free_r+0x46>
 800b378:	6811      	ldr	r1, [r2, #0]
 800b37a:	1855      	adds	r5, r2, r1
 800b37c:	42a5      	cmp	r5, r4
 800b37e:	d10b      	bne.n	800b398 <_free_r+0x70>
 800b380:	6824      	ldr	r4, [r4, #0]
 800b382:	4421      	add	r1, r4
 800b384:	1854      	adds	r4, r2, r1
 800b386:	42a3      	cmp	r3, r4
 800b388:	6011      	str	r1, [r2, #0]
 800b38a:	d1e0      	bne.n	800b34e <_free_r+0x26>
 800b38c:	681c      	ldr	r4, [r3, #0]
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	6053      	str	r3, [r2, #4]
 800b392:	440c      	add	r4, r1
 800b394:	6014      	str	r4, [r2, #0]
 800b396:	e7da      	b.n	800b34e <_free_r+0x26>
 800b398:	d902      	bls.n	800b3a0 <_free_r+0x78>
 800b39a:	230c      	movs	r3, #12
 800b39c:	6003      	str	r3, [r0, #0]
 800b39e:	e7d6      	b.n	800b34e <_free_r+0x26>
 800b3a0:	6825      	ldr	r5, [r4, #0]
 800b3a2:	1961      	adds	r1, r4, r5
 800b3a4:	428b      	cmp	r3, r1
 800b3a6:	bf04      	itt	eq
 800b3a8:	6819      	ldreq	r1, [r3, #0]
 800b3aa:	685b      	ldreq	r3, [r3, #4]
 800b3ac:	6063      	str	r3, [r4, #4]
 800b3ae:	bf04      	itt	eq
 800b3b0:	1949      	addeq	r1, r1, r5
 800b3b2:	6021      	streq	r1, [r4, #0]
 800b3b4:	6054      	str	r4, [r2, #4]
 800b3b6:	e7ca      	b.n	800b34e <_free_r+0x26>
 800b3b8:	b003      	add	sp, #12
 800b3ba:	bd30      	pop	{r4, r5, pc}
 800b3bc:	20000bb4 	.word	0x20000bb4

0800b3c0 <_init>:
 800b3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3c2:	bf00      	nop
 800b3c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3c6:	bc08      	pop	{r3}
 800b3c8:	469e      	mov	lr, r3
 800b3ca:	4770      	bx	lr

0800b3cc <_fini>:
 800b3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ce:	bf00      	nop
 800b3d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3d2:	bc08      	pop	{r3}
 800b3d4:	469e      	mov	lr, r3
 800b3d6:	4770      	bx	lr
