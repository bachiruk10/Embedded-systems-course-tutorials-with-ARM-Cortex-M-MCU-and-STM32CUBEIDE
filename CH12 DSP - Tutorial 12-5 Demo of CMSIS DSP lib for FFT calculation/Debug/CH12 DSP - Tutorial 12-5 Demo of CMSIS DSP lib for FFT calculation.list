
CH12 DSP - Tutorial 12-5 Demo of CMSIS DSP lib for FFT calculation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046a4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013c74  08004850  08004850  00014850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080184c4  080184c4  0003005c  2**0
                  CONTENTS
  4 .ARM          00000008  080184c4  080184c4  000284c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080184cc  080184cc  0003005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080184cc  080184cc  000284cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080184d0  080184d0  000284d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080184d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003005c  2**0
                  CONTENTS
 10 .bss          00002ae0  2000005c  2000005c  0003005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002b3c  20002b3c  0003005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003005c  2**0
                  CONTENTS, READONLY
 13 .comment      000000b3  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f257  00000000  00000000  0003013f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000028b9  00000000  00000000  0003f396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000df0  00000000  00000000  00041c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009e9  00000000  00000000  00042a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024da4  00000000  00000000  00043429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010a67  00000000  00000000  000681cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e6cb5  00000000  00000000  00078c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000039cc  00000000  00000000  0015f8ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000ac  00000000  00000000  001632b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    000032d8  00000000  00000000  00163364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000140  00000000  00000000  0016663c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000005c 	.word	0x2000005c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004838 	.word	0x08004838

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000060 	.word	0x20000060
 80001e8:	08004838 	.word	0x08004838

080001ec <arm_bitreversal_32>:
 80001ec:	1c4b      	adds	r3, r1, #1
 80001ee:	2b01      	cmp	r3, #1
 80001f0:	bf98      	it	ls
 80001f2:	4770      	bxls	lr
 80001f4:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001f8:	1c91      	adds	r1, r2, #2
 80001fa:	089b      	lsrs	r3, r3, #2

080001fc <arm_bitreversal_32_0>:
 80001fc:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000200:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000204:	880a      	ldrh	r2, [r1, #0]
 8000206:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800020a:	4480      	add	r8, r0
 800020c:	4481      	add	r9, r0
 800020e:	4402      	add	r2, r0
 8000210:	4484      	add	ip, r0
 8000212:	f8d9 7000 	ldr.w	r7, [r9]
 8000216:	f8d8 6000 	ldr.w	r6, [r8]
 800021a:	6815      	ldr	r5, [r2, #0]
 800021c:	f8dc 4000 	ldr.w	r4, [ip]
 8000220:	f8c9 6000 	str.w	r6, [r9]
 8000224:	f8c8 7000 	str.w	r7, [r8]
 8000228:	f8cc 5000 	str.w	r5, [ip]
 800022c:	6014      	str	r4, [r2, #0]
 800022e:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000232:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000236:	6855      	ldr	r5, [r2, #4]
 8000238:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800023c:	f8c9 6004 	str.w	r6, [r9, #4]
 8000240:	f8c8 7004 	str.w	r7, [r8, #4]
 8000244:	f8cc 5004 	str.w	r5, [ip, #4]
 8000248:	6054      	str	r4, [r2, #4]
 800024a:	3108      	adds	r1, #8
 800024c:	3b01      	subs	r3, #1
 800024e:	d1d5      	bne.n	80001fc <arm_bitreversal_32_0>
 8000250:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000254:	4770      	bx	lr

08000256 <arm_bitreversal_16>:
 8000256:	1c4b      	adds	r3, r1, #1
 8000258:	2b01      	cmp	r3, #1
 800025a:	bf98      	it	ls
 800025c:	4770      	bxls	lr
 800025e:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000262:	1c91      	adds	r1, r2, #2
 8000264:	089b      	lsrs	r3, r3, #2

08000266 <arm_bitreversal_16_0>:
 8000266:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800026a:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 800026e:	880a      	ldrh	r2, [r1, #0]
 8000270:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000274:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 8000278:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 800027c:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000280:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000284:	f8d9 7000 	ldr.w	r7, [r9]
 8000288:	f8d8 6000 	ldr.w	r6, [r8]
 800028c:	6815      	ldr	r5, [r2, #0]
 800028e:	f8dc 4000 	ldr.w	r4, [ip]
 8000292:	f8c9 6000 	str.w	r6, [r9]
 8000296:	f8c8 7000 	str.w	r7, [r8]
 800029a:	f8cc 5000 	str.w	r5, [ip]
 800029e:	6014      	str	r4, [r2, #0]
 80002a0:	3108      	adds	r1, #8
 80002a2:	3b01      	subs	r3, #1
 80002a4:	d1df      	bne.n	8000266 <arm_bitreversal_16_0>
 80002a6:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002aa:	4770      	bx	lr

080002ac <__aeabi_uldivmod>:
 80002ac:	b953      	cbnz	r3, 80002c4 <__aeabi_uldivmod+0x18>
 80002ae:	b94a      	cbnz	r2, 80002c4 <__aeabi_uldivmod+0x18>
 80002b0:	2900      	cmp	r1, #0
 80002b2:	bf08      	it	eq
 80002b4:	2800      	cmpeq	r0, #0
 80002b6:	bf1c      	itt	ne
 80002b8:	f04f 31ff 	movne.w	r1, #4294967295
 80002bc:	f04f 30ff 	movne.w	r0, #4294967295
 80002c0:	f000 b970 	b.w	80005a4 <__aeabi_idiv0>
 80002c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002cc:	f000 f806 	bl	80002dc <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4770      	bx	lr

080002dc <__udivmoddi4>:
 80002dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e0:	9e08      	ldr	r6, [sp, #32]
 80002e2:	460d      	mov	r5, r1
 80002e4:	4604      	mov	r4, r0
 80002e6:	460f      	mov	r7, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14a      	bne.n	8000382 <__udivmoddi4+0xa6>
 80002ec:	428a      	cmp	r2, r1
 80002ee:	4694      	mov	ip, r2
 80002f0:	d965      	bls.n	80003be <__udivmoddi4+0xe2>
 80002f2:	fab2 f382 	clz	r3, r2
 80002f6:	b143      	cbz	r3, 800030a <__udivmoddi4+0x2e>
 80002f8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002fc:	f1c3 0220 	rsb	r2, r3, #32
 8000300:	409f      	lsls	r7, r3
 8000302:	fa20 f202 	lsr.w	r2, r0, r2
 8000306:	4317      	orrs	r7, r2
 8000308:	409c      	lsls	r4, r3
 800030a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800030e:	fa1f f58c 	uxth.w	r5, ip
 8000312:	fbb7 f1fe 	udiv	r1, r7, lr
 8000316:	0c22      	lsrs	r2, r4, #16
 8000318:	fb0e 7711 	mls	r7, lr, r1, r7
 800031c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000320:	fb01 f005 	mul.w	r0, r1, r5
 8000324:	4290      	cmp	r0, r2
 8000326:	d90a      	bls.n	800033e <__udivmoddi4+0x62>
 8000328:	eb1c 0202 	adds.w	r2, ip, r2
 800032c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000330:	f080 811c 	bcs.w	800056c <__udivmoddi4+0x290>
 8000334:	4290      	cmp	r0, r2
 8000336:	f240 8119 	bls.w	800056c <__udivmoddi4+0x290>
 800033a:	3902      	subs	r1, #2
 800033c:	4462      	add	r2, ip
 800033e:	1a12      	subs	r2, r2, r0
 8000340:	b2a4      	uxth	r4, r4
 8000342:	fbb2 f0fe 	udiv	r0, r2, lr
 8000346:	fb0e 2210 	mls	r2, lr, r0, r2
 800034a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800034e:	fb00 f505 	mul.w	r5, r0, r5
 8000352:	42a5      	cmp	r5, r4
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x90>
 8000356:	eb1c 0404 	adds.w	r4, ip, r4
 800035a:	f100 32ff 	add.w	r2, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x294>
 8000362:	42a5      	cmp	r5, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x294>
 8000368:	4464      	add	r4, ip
 800036a:	3802      	subs	r0, #2
 800036c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000370:	1b64      	subs	r4, r4, r5
 8000372:	2100      	movs	r1, #0
 8000374:	b11e      	cbz	r6, 800037e <__udivmoddi4+0xa2>
 8000376:	40dc      	lsrs	r4, r3
 8000378:	2300      	movs	r3, #0
 800037a:	e9c6 4300 	strd	r4, r3, [r6]
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	428b      	cmp	r3, r1
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0xbc>
 8000386:	2e00      	cmp	r6, #0
 8000388:	f000 80ed 	beq.w	8000566 <__udivmoddi4+0x28a>
 800038c:	2100      	movs	r1, #0
 800038e:	e9c6 0500 	strd	r0, r5, [r6]
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	d149      	bne.n	8000434 <__udivmoddi4+0x158>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	d302      	bcc.n	80003aa <__udivmoddi4+0xce>
 80003a4:	4282      	cmp	r2, r0
 80003a6:	f200 80f8 	bhi.w	800059a <__udivmoddi4+0x2be>
 80003aa:	1a84      	subs	r4, r0, r2
 80003ac:	eb65 0203 	sbc.w	r2, r5, r3
 80003b0:	2001      	movs	r0, #1
 80003b2:	4617      	mov	r7, r2
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d0e2      	beq.n	800037e <__udivmoddi4+0xa2>
 80003b8:	e9c6 4700 	strd	r4, r7, [r6]
 80003bc:	e7df      	b.n	800037e <__udivmoddi4+0xa2>
 80003be:	b902      	cbnz	r2, 80003c2 <__udivmoddi4+0xe6>
 80003c0:	deff      	udf	#255	; 0xff
 80003c2:	fab2 f382 	clz	r3, r2
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	f040 8090 	bne.w	80004ec <__udivmoddi4+0x210>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	2101      	movs	r1, #1
 80003d8:	fbb2 f5f7 	udiv	r5, r2, r7
 80003dc:	fb07 2015 	mls	r0, r7, r5, r2
 80003e0:	0c22      	lsrs	r2, r4, #16
 80003e2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e6:	fb0e f005 	mul.w	r0, lr, r5
 80003ea:	4290      	cmp	r0, r2
 80003ec:	d908      	bls.n	8000400 <__udivmoddi4+0x124>
 80003ee:	eb1c 0202 	adds.w	r2, ip, r2
 80003f2:	f105 38ff 	add.w	r8, r5, #4294967295
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0x122>
 80003f8:	4290      	cmp	r0, r2
 80003fa:	f200 80cb 	bhi.w	8000594 <__udivmoddi4+0x2b8>
 80003fe:	4645      	mov	r5, r8
 8000400:	1a12      	subs	r2, r2, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb2 f0f7 	udiv	r0, r2, r7
 8000408:	fb07 2210 	mls	r2, r7, r0, r2
 800040c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000410:	fb0e fe00 	mul.w	lr, lr, r0
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x14e>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000420:	d202      	bcs.n	8000428 <__udivmoddi4+0x14c>
 8000422:	45a6      	cmp	lr, r4
 8000424:	f200 80bb 	bhi.w	800059e <__udivmoddi4+0x2c2>
 8000428:	4610      	mov	r0, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000432:	e79f      	b.n	8000374 <__udivmoddi4+0x98>
 8000434:	f1c1 0720 	rsb	r7, r1, #32
 8000438:	408b      	lsls	r3, r1
 800043a:	fa22 fc07 	lsr.w	ip, r2, r7
 800043e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000442:	fa05 f401 	lsl.w	r4, r5, r1
 8000446:	fa20 f307 	lsr.w	r3, r0, r7
 800044a:	40fd      	lsrs	r5, r7
 800044c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000450:	4323      	orrs	r3, r4
 8000452:	fbb5 f8f9 	udiv	r8, r5, r9
 8000456:	fa1f fe8c 	uxth.w	lr, ip
 800045a:	fb09 5518 	mls	r5, r9, r8, r5
 800045e:	0c1c      	lsrs	r4, r3, #16
 8000460:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000464:	fb08 f50e 	mul.w	r5, r8, lr
 8000468:	42a5      	cmp	r5, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	fa00 f001 	lsl.w	r0, r0, r1
 8000472:	d90b      	bls.n	800048c <__udivmoddi4+0x1b0>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f108 3aff 	add.w	sl, r8, #4294967295
 800047c:	f080 8088 	bcs.w	8000590 <__udivmoddi4+0x2b4>
 8000480:	42a5      	cmp	r5, r4
 8000482:	f240 8085 	bls.w	8000590 <__udivmoddi4+0x2b4>
 8000486:	f1a8 0802 	sub.w	r8, r8, #2
 800048a:	4464      	add	r4, ip
 800048c:	1b64      	subs	r4, r4, r5
 800048e:	b29d      	uxth	r5, r3
 8000490:	fbb4 f3f9 	udiv	r3, r4, r9
 8000494:	fb09 4413 	mls	r4, r9, r3, r4
 8000498:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800049c:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a0:	45a6      	cmp	lr, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x1da>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f103 35ff 	add.w	r5, r3, #4294967295
 80004ac:	d26c      	bcs.n	8000588 <__udivmoddi4+0x2ac>
 80004ae:	45a6      	cmp	lr, r4
 80004b0:	d96a      	bls.n	8000588 <__udivmoddi4+0x2ac>
 80004b2:	3b02      	subs	r3, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ba:	fba3 9502 	umull	r9, r5, r3, r2
 80004be:	eba4 040e 	sub.w	r4, r4, lr
 80004c2:	42ac      	cmp	r4, r5
 80004c4:	46c8      	mov	r8, r9
 80004c6:	46ae      	mov	lr, r5
 80004c8:	d356      	bcc.n	8000578 <__udivmoddi4+0x29c>
 80004ca:	d053      	beq.n	8000574 <__udivmoddi4+0x298>
 80004cc:	b156      	cbz	r6, 80004e4 <__udivmoddi4+0x208>
 80004ce:	ebb0 0208 	subs.w	r2, r0, r8
 80004d2:	eb64 040e 	sbc.w	r4, r4, lr
 80004d6:	fa04 f707 	lsl.w	r7, r4, r7
 80004da:	40ca      	lsrs	r2, r1
 80004dc:	40cc      	lsrs	r4, r1
 80004de:	4317      	orrs	r7, r2
 80004e0:	e9c6 7400 	strd	r7, r4, [r6]
 80004e4:	4618      	mov	r0, r3
 80004e6:	2100      	movs	r1, #0
 80004e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ec:	f1c3 0120 	rsb	r1, r3, #32
 80004f0:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f4:	fa20 f201 	lsr.w	r2, r0, r1
 80004f8:	fa25 f101 	lsr.w	r1, r5, r1
 80004fc:	409d      	lsls	r5, r3
 80004fe:	432a      	orrs	r2, r5
 8000500:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000504:	fa1f fe8c 	uxth.w	lr, ip
 8000508:	fbb1 f0f7 	udiv	r0, r1, r7
 800050c:	fb07 1510 	mls	r5, r7, r0, r1
 8000510:	0c11      	lsrs	r1, r2, #16
 8000512:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000516:	fb00 f50e 	mul.w	r5, r0, lr
 800051a:	428d      	cmp	r5, r1
 800051c:	fa04 f403 	lsl.w	r4, r4, r3
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x258>
 8000522:	eb1c 0101 	adds.w	r1, ip, r1
 8000526:	f100 38ff 	add.w	r8, r0, #4294967295
 800052a:	d22f      	bcs.n	800058c <__udivmoddi4+0x2b0>
 800052c:	428d      	cmp	r5, r1
 800052e:	d92d      	bls.n	800058c <__udivmoddi4+0x2b0>
 8000530:	3802      	subs	r0, #2
 8000532:	4461      	add	r1, ip
 8000534:	1b49      	subs	r1, r1, r5
 8000536:	b292      	uxth	r2, r2
 8000538:	fbb1 f5f7 	udiv	r5, r1, r7
 800053c:	fb07 1115 	mls	r1, r7, r5, r1
 8000540:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000544:	fb05 f10e 	mul.w	r1, r5, lr
 8000548:	4291      	cmp	r1, r2
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x282>
 800054c:	eb1c 0202 	adds.w	r2, ip, r2
 8000550:	f105 38ff 	add.w	r8, r5, #4294967295
 8000554:	d216      	bcs.n	8000584 <__udivmoddi4+0x2a8>
 8000556:	4291      	cmp	r1, r2
 8000558:	d914      	bls.n	8000584 <__udivmoddi4+0x2a8>
 800055a:	3d02      	subs	r5, #2
 800055c:	4462      	add	r2, ip
 800055e:	1a52      	subs	r2, r2, r1
 8000560:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000564:	e738      	b.n	80003d8 <__udivmoddi4+0xfc>
 8000566:	4631      	mov	r1, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e708      	b.n	800037e <__udivmoddi4+0xa2>
 800056c:	4639      	mov	r1, r7
 800056e:	e6e6      	b.n	800033e <__udivmoddi4+0x62>
 8000570:	4610      	mov	r0, r2
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x90>
 8000574:	4548      	cmp	r0, r9
 8000576:	d2a9      	bcs.n	80004cc <__udivmoddi4+0x1f0>
 8000578:	ebb9 0802 	subs.w	r8, r9, r2
 800057c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000580:	3b01      	subs	r3, #1
 8000582:	e7a3      	b.n	80004cc <__udivmoddi4+0x1f0>
 8000584:	4645      	mov	r5, r8
 8000586:	e7ea      	b.n	800055e <__udivmoddi4+0x282>
 8000588:	462b      	mov	r3, r5
 800058a:	e794      	b.n	80004b6 <__udivmoddi4+0x1da>
 800058c:	4640      	mov	r0, r8
 800058e:	e7d1      	b.n	8000534 <__udivmoddi4+0x258>
 8000590:	46d0      	mov	r8, sl
 8000592:	e77b      	b.n	800048c <__udivmoddi4+0x1b0>
 8000594:	3d02      	subs	r5, #2
 8000596:	4462      	add	r2, ip
 8000598:	e732      	b.n	8000400 <__udivmoddi4+0x124>
 800059a:	4608      	mov	r0, r1
 800059c:	e70a      	b.n	80003b4 <__udivmoddi4+0xd8>
 800059e:	4464      	add	r4, ip
 80005a0:	3802      	subs	r0, #2
 80005a2:	e742      	b.n	800042a <__udivmoddi4+0x14e>

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f000 fbf3 	bl	8000d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f865 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 f9d5 	bl	8000964 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ba:	f000 f99d 	bl	80008f8 <MX_DMA_Init>
  MX_ADC1_Init();
 80005be:	f000 f8cf 	bl	8000760 <MX_ADC1_Init>
  MX_TIM8_Init();
 80005c2:	f000 f949 	bl	8000858 <MX_TIM8_Init>
  MX_DAC_Init();
 80005c6:	f000 f91d 	bl	8000804 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  /* Start ADC sampling using DMA */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) pData, length);
 80005ca:	2210      	movs	r2, #16
 80005cc:	4923      	ldr	r1, [pc, #140]	; (800065c <main+0xb4>)
 80005ce:	4824      	ldr	r0, [pc, #144]	; (8000660 <main+0xb8>)
 80005d0:	f000 fda8 	bl	8001124 <HAL_ADC_Start_DMA>
  /* Start timer for sampling frequency of 1 kHz */
  //HAL_TIM_Base_Start(&htim8);



  for (i = 0; i < 1024; i++)
 80005d4:	4b23      	ldr	r3, [pc, #140]	; (8000664 <main+0xbc>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	e027      	b.n	800062c <main+0x84>
  {
  arr[i] = arm_sin_f32(2 * PI * i * 50 / 1024) + 5;
 80005dc:	4b21      	ldr	r3, [pc, #132]	; (8000664 <main+0xbc>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	ee07 3a90 	vmov	s15, r3
 80005e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005e8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000668 <main+0xc0>
 80005ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005f0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800066c <main+0xc4>
 80005f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005f8:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8000670 <main+0xc8>
 80005fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000600:	eeb0 0a47 	vmov.f32	s0, s14
 8000604:	f003 fd9e 	bl	8004144 <arm_sin_f32>
 8000608:	eef0 7a40 	vmov.f32	s15, s0
 800060c:	4b15      	ldr	r3, [pc, #84]	; (8000664 <main+0xbc>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000614:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000618:	4a16      	ldr	r2, [pc, #88]	; (8000674 <main+0xcc>)
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	4413      	add	r3, r2
 800061e:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 1024; i++)
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <main+0xbc>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	3301      	adds	r3, #1
 8000628:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <main+0xbc>)
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <main+0xbc>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000634:	dbd2      	blt.n	80005dc <main+0x34>
  }
  arm_rfft_fast_instance_f32 S;
  arm_rfft_fast_init_f32(&S, 1024);
 8000636:	463b      	mov	r3, r7
 8000638:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800063c:	4618      	mov	r0, r3
 800063e:	f002 ffa7 	bl	8003590 <arm_rfft_fast_init_f32>
  arm_rfft_fast_f32(&S, arr, arr2, 0);
 8000642:	4638      	mov	r0, r7
 8000644:	2300      	movs	r3, #0
 8000646:	4a0c      	ldr	r2, [pc, #48]	; (8000678 <main+0xd0>)
 8000648:	490a      	ldr	r1, [pc, #40]	; (8000674 <main+0xcc>)
 800064a:	f003 f825 	bl	8003698 <arm_rfft_fast_f32>
  arm_cmplx_mag_f32(arr2, arr3, 512);
 800064e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000652:	490a      	ldr	r1, [pc, #40]	; (800067c <main+0xd4>)
 8000654:	4808      	ldr	r0, [pc, #32]	; (8000678 <main+0xd0>)
 8000656:	f003 fc8d 	bl	8003f74 <arm_cmplx_mag_f32>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065a:	e7fe      	b.n	800065a <main+0xb2>
 800065c:	200001dc 	.word	0x200001dc
 8000660:	20000078 	.word	0x20000078
 8000664:	200001fc 	.word	0x200001fc
 8000668:	40c90fdb 	.word	0x40c90fdb
 800066c:	42480000 	.word	0x42480000
 8000670:	44800000 	.word	0x44800000
 8000674:	20000200 	.word	0x20000200
 8000678:	20001200 	.word	0x20001200
 800067c:	20002200 	.word	0x20002200

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b094      	sub	sp, #80	; 0x50
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	2230      	movs	r2, #48	; 0x30
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f004 f87e 	bl	8004790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	4b2b      	ldr	r3, [pc, #172]	; (8000758 <SystemClock_Config+0xd8>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	4a2a      	ldr	r2, [pc, #168]	; (8000758 <SystemClock_Config+0xd8>)
 80006ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b2:	6413      	str	r3, [r2, #64]	; 0x40
 80006b4:	4b28      	ldr	r3, [pc, #160]	; (8000758 <SystemClock_Config+0xd8>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c0:	2300      	movs	r3, #0
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	4b25      	ldr	r3, [pc, #148]	; (800075c <SystemClock_Config+0xdc>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a24      	ldr	r2, [pc, #144]	; (800075c <SystemClock_Config+0xdc>)
 80006ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	4b22      	ldr	r3, [pc, #136]	; (800075c <SystemClock_Config+0xdc>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006dc:	2302      	movs	r3, #2
 80006de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e0:	2301      	movs	r3, #1
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e4:	2310      	movs	r3, #16
 80006e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e8:	2302      	movs	r3, #2
 80006ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ec:	2300      	movs	r3, #0
 80006ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f0:	2308      	movs	r3, #8
 80006f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006f4:	23b4      	movs	r3, #180	; 0xb4
 80006f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006fc:	2307      	movs	r3, #7
 80006fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	f107 0320 	add.w	r3, r7, #32
 8000704:	4618      	mov	r0, r3
 8000706:	f002 f807 	bl	8002718 <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000710:	f000 f976 	bl	8000a00 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000714:	f001 ffb0 	bl	8002678 <HAL_PWREx_EnableOverDrive>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800071e:	f000 f96f 	bl	8000a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000722:	230f      	movs	r3, #15
 8000724:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000726:	2302      	movs	r3, #2
 8000728:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800072e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000732:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000738:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800073a:	f107 030c 	add.w	r3, r7, #12
 800073e:	2105      	movs	r1, #5
 8000740:	4618      	mov	r0, r3
 8000742:	f002 fa61 	bl	8002c08 <HAL_RCC_ClockConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800074c:	f000 f958 	bl	8000a00 <Error_Handler>
  }
}
 8000750:	bf00      	nop
 8000752:	3750      	adds	r7, #80	; 0x50
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000766:	463b      	mov	r3, r7
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000772:	4b22      	ldr	r3, [pc, #136]	; (80007fc <MX_ADC1_Init+0x9c>)
 8000774:	4a22      	ldr	r2, [pc, #136]	; (8000800 <MX_ADC1_Init+0xa0>)
 8000776:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000778:	4b20      	ldr	r3, [pc, #128]	; (80007fc <MX_ADC1_Init+0x9c>)
 800077a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800077e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000780:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <MX_ADC1_Init+0x9c>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000786:	4b1d      	ldr	r3, [pc, #116]	; (80007fc <MX_ADC1_Init+0x9c>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800078c:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <MX_ADC1_Init+0x9c>)
 800078e:	2200      	movs	r2, #0
 8000790:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000792:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <MX_ADC1_Init+0x9c>)
 8000794:	2200      	movs	r2, #0
 8000796:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800079a:	4b18      	ldr	r3, [pc, #96]	; (80007fc <MX_ADC1_Init+0x9c>)
 800079c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <MX_ADC1_Init+0x9c>)
 80007a4:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80007a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_ADC1_Init+0x9c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_ADC1_Init+0x9c>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_ADC1_Init+0x9c>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_ADC1_Init+0x9c>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c4:	480d      	ldr	r0, [pc, #52]	; (80007fc <MX_ADC1_Init+0x9c>)
 80007c6:	f000 fb59 	bl	8000e7c <HAL_ADC_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80007d0:	f000 f916 	bl	8000a00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007d4:	2305      	movs	r3, #5
 80007d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007d8:	2301      	movs	r3, #1
 80007da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007dc:	2300      	movs	r3, #0
 80007de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e0:	463b      	mov	r3, r7
 80007e2:	4619      	mov	r1, r3
 80007e4:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_ADC1_Init+0x9c>)
 80007e6:	f000 fdcb 	bl	8001380 <HAL_ADC_ConfigChannel>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80007f0:	f000 f906 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000078 	.word	0x20000078
 8000800:	40012000 	.word	0x40012000

08000804 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800080a:	463b      	mov	r3, r7
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_DAC_Init+0x4c>)
 8000814:	4a0f      	ldr	r2, [pc, #60]	; (8000854 <MX_DAC_Init+0x50>)
 8000816:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000818:	480d      	ldr	r0, [pc, #52]	; (8000850 <MX_DAC_Init+0x4c>)
 800081a:	f001 f97c 	bl	8001b16 <HAL_DAC_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000824:	f000 f8ec 	bl	8000a00 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8000828:	230c      	movs	r3, #12
 800082a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800082c:	2300      	movs	r3, #0
 800082e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000830:	463b      	mov	r3, r7
 8000832:	2200      	movs	r2, #0
 8000834:	4619      	mov	r1, r3
 8000836:	4806      	ldr	r0, [pc, #24]	; (8000850 <MX_DAC_Init+0x4c>)
 8000838:	f001 f98f 	bl	8001b5a <HAL_DAC_ConfigChannel>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000842:	f000 f8dd 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000120 	.word	0x20000120
 8000854:	40007400 	.word	0x40007400

08000858 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086c:	463b      	mov	r3, r7
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <MX_TIM8_Init+0x98>)
 8000876:	4a1f      	ldr	r2, [pc, #124]	; (80008f4 <MX_TIM8_Init+0x9c>)
 8000878:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 800087a:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <MX_TIM8_Init+0x98>)
 800087c:	22b3      	movs	r2, #179	; 0xb3
 800087e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <MX_TIM8_Init+0x98>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 8000886:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_TIM8_Init+0x98>)
 8000888:	2263      	movs	r2, #99	; 0x63
 800088a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088c:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_TIM8_Init+0x98>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000892:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <MX_TIM8_Init+0x98>)
 8000894:	2200      	movs	r2, #0
 8000896:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000898:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <MX_TIM8_Init+0x98>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800089e:	4814      	ldr	r0, [pc, #80]	; (80008f0 <MX_TIM8_Init+0x98>)
 80008a0:	f002 fb9e 	bl	8002fe0 <HAL_TIM_Base_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM8_Init+0x56>
  {
    Error_Handler();
 80008aa:	f000 f8a9 	bl	8000a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80008b4:	f107 0308 	add.w	r3, r7, #8
 80008b8:	4619      	mov	r1, r3
 80008ba:	480d      	ldr	r0, [pc, #52]	; (80008f0 <MX_TIM8_Init+0x98>)
 80008bc:	f002 fbdf 	bl	800307e <HAL_TIM_ConfigClockSource>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM8_Init+0x72>
  {
    Error_Handler();
 80008c6:	f000 f89b 	bl	8000a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008ca:	2320      	movs	r3, #32
 80008cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80008d2:	463b      	mov	r3, r7
 80008d4:	4619      	mov	r1, r3
 80008d6:	4806      	ldr	r0, [pc, #24]	; (80008f0 <MX_TIM8_Init+0x98>)
 80008d8:	f002 fdde 	bl	8003498 <HAL_TIMEx_MasterConfigSynchronization>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 80008e2:	f000 f88d 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	3718      	adds	r7, #24
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000194 	.word	0x20000194
 80008f4:	40010400 	.word	0x40010400

080008f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	4b17      	ldr	r3, [pc, #92]	; (8000960 <MX_DMA_Init+0x68>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a16      	ldr	r2, [pc, #88]	; (8000960 <MX_DMA_Init+0x68>)
 8000908:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_DMA_Init+0x68>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <MX_DMA_Init+0x68>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a0f      	ldr	r2, [pc, #60]	; (8000960 <MX_DMA_Init+0x68>)
 8000924:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <MX_DMA_Init+0x68>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 1, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2101      	movs	r1, #1
 800093a:	2010      	movs	r0, #16
 800093c:	f001 f8b5 	bl	8001aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000940:	2010      	movs	r0, #16
 8000942:	f001 f8ce 	bl	8001ae2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2101      	movs	r1, #1
 800094a:	2038      	movs	r0, #56	; 0x38
 800094c:	f001 f8ad 	bl	8001aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000950:	2038      	movs	r0, #56	; 0x38
 8000952:	f001 f8c6 	bl	8001ae2 <HAL_NVIC_EnableIRQ>

}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800

08000964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <MX_GPIO_Init+0x80>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a18      	ldr	r2, [pc, #96]	; (80009e4 <MX_GPIO_Init+0x80>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <MX_GPIO_Init+0x80>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <MX_GPIO_Init+0x80>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a11      	ldr	r2, [pc, #68]	; (80009e4 <MX_GPIO_Init+0x80>)
 80009a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_GPIO_Init+0x80>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009b8:	480b      	ldr	r0, [pc, #44]	; (80009e8 <MX_GPIO_Init+0x84>)
 80009ba:	f001 fe43 	bl	8002644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	4619      	mov	r1, r3
 80009d6:	4804      	ldr	r0, [pc, #16]	; (80009e8 <MX_GPIO_Init+0x84>)
 80009d8:	f001 fc88 	bl	80022ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009dc:	bf00      	nop
 80009de:	3720      	adds	r7, #32
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40021800 	.word	0x40021800

080009ec <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]



}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <Error_Handler+0x8>
	...

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	4a0f      	ldr	r2, [pc, #60]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a20:	6453      	str	r3, [r2, #68]	; 0x44
 8000a22:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8000a4a:	2006      	movs	r0, #6
 8000a4c:	f001 f822 	bl	8001a94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40023800 	.word	0x40023800

08000a5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a33      	ldr	r2, [pc, #204]	; (8000b48 <HAL_ADC_MspInit+0xec>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d15f      	bne.n	8000b3e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b32      	ldr	r3, [pc, #200]	; (8000b4c <HAL_ADC_MspInit+0xf0>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	4a31      	ldr	r2, [pc, #196]	; (8000b4c <HAL_ADC_MspInit+0xf0>)
 8000a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8e:	4b2f      	ldr	r3, [pc, #188]	; (8000b4c <HAL_ADC_MspInit+0xf0>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	4b2b      	ldr	r3, [pc, #172]	; (8000b4c <HAL_ADC_MspInit+0xf0>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a2a      	ldr	r2, [pc, #168]	; (8000b4c <HAL_ADC_MspInit+0xf0>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <HAL_ADC_MspInit+0xf0>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ab6:	2320      	movs	r3, #32
 8000ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aba:	2303      	movs	r3, #3
 8000abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4821      	ldr	r0, [pc, #132]	; (8000b50 <HAL_ADC_MspInit+0xf4>)
 8000aca:	f001 fc0f 	bl	80022ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000ace:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <HAL_ADC_MspInit+0xf8>)
 8000ad0:	4a21      	ldr	r2, [pc, #132]	; (8000b58 <HAL_ADC_MspInit+0xfc>)
 8000ad2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ad4:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <HAL_ADC_MspInit+0xf8>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ada:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <HAL_ADC_MspInit+0xf8>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <HAL_ADC_MspInit+0xf8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ae6:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <HAL_ADC_MspInit+0xf8>)
 8000ae8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000aee:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <HAL_ADC_MspInit+0xf8>)
 8000af0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000af4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000af6:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <HAL_ADC_MspInit+0xf8>)
 8000af8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000afc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <HAL_ADC_MspInit+0xf8>)
 8000b00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b04:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b06:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <HAL_ADC_MspInit+0xf8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <HAL_ADC_MspInit+0xf8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b12:	4810      	ldr	r0, [pc, #64]	; (8000b54 <HAL_ADC_MspInit+0xf8>)
 8000b14:	f001 f87a 	bl	8001c0c <HAL_DMA_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000b1e:	f7ff ff6f 	bl	8000a00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a0b      	ldr	r2, [pc, #44]	; (8000b54 <HAL_ADC_MspInit+0xf8>)
 8000b26:	639a      	str	r2, [r3, #56]	; 0x38
 8000b28:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <HAL_ADC_MspInit+0xf8>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2101      	movs	r1, #1
 8000b32:	2012      	movs	r0, #18
 8000b34:	f000 ffb9 	bl	8001aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000b38:	2012      	movs	r0, #18
 8000b3a:	f000 ffd2 	bl	8001ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b3e:	bf00      	nop
 8000b40:	3728      	adds	r7, #40	; 0x28
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40012000 	.word	0x40012000
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40020000 	.word	0x40020000
 8000b54:	200000c0 	.word	0x200000c0
 8000b58:	40026410 	.word	0x40026410

08000b5c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a2f      	ldr	r2, [pc, #188]	; (8000c38 <HAL_DAC_MspInit+0xdc>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d158      	bne.n	8000c30 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	4b2e      	ldr	r3, [pc, #184]	; (8000c3c <HAL_DAC_MspInit+0xe0>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	4a2d      	ldr	r2, [pc, #180]	; (8000c3c <HAL_DAC_MspInit+0xe0>)
 8000b88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8e:	4b2b      	ldr	r3, [pc, #172]	; (8000c3c <HAL_DAC_MspInit+0xe0>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	4b27      	ldr	r3, [pc, #156]	; (8000c3c <HAL_DAC_MspInit+0xe0>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a26      	ldr	r2, [pc, #152]	; (8000c3c <HAL_DAC_MspInit+0xe0>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b24      	ldr	r3, [pc, #144]	; (8000c3c <HAL_DAC_MspInit+0xe0>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bb6:	2310      	movs	r3, #16
 8000bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	481d      	ldr	r0, [pc, #116]	; (8000c40 <HAL_DAC_MspInit+0xe4>)
 8000bca:	f001 fb8f 	bl	80022ec <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8000bce:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <HAL_DAC_MspInit+0xe8>)
 8000bd0:	4a1d      	ldr	r2, [pc, #116]	; (8000c48 <HAL_DAC_MspInit+0xec>)
 8000bd2:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <HAL_DAC_MspInit+0xe8>)
 8000bd6:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000bda:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bdc:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <HAL_DAC_MspInit+0xe8>)
 8000bde:	2240      	movs	r2, #64	; 0x40
 8000be0:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be2:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <HAL_DAC_MspInit+0xe8>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8000be8:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <HAL_DAC_MspInit+0xe8>)
 8000bea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bee:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <HAL_DAC_MspInit+0xe8>)
 8000bf2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bf6:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_DAC_MspInit+0xe8>)
 8000bfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bfe:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8000c00:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <HAL_DAC_MspInit+0xe8>)
 8000c02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c06:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8000c08:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <HAL_DAC_MspInit+0xe8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <HAL_DAC_MspInit+0xe8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8000c14:	480b      	ldr	r0, [pc, #44]	; (8000c44 <HAL_DAC_MspInit+0xe8>)
 8000c16:	f000 fff9 	bl	8001c0c <HAL_DMA_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8000c20:	f7ff feee 	bl	8000a00 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <HAL_DAC_MspInit+0xe8>)
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <HAL_DAC_MspInit+0xe8>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000c30:	bf00      	nop
 8000c32:	3728      	adds	r7, #40	; 0x28
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40007400 	.word	0x40007400
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020000 	.word	0x40020000
 8000c44:	20000134 	.word	0x20000134
 8000c48:	40026088 	.word	0x40026088

08000c4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0b      	ldr	r2, [pc, #44]	; (8000c88 <HAL_TIM_Base_MspInit+0x3c>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d10d      	bne.n	8000c7a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <HAL_TIM_Base_MspInit+0x40>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	4a09      	ldr	r2, [pc, #36]	; (8000c8c <HAL_TIM_Base_MspInit+0x40>)
 8000c68:	f043 0302 	orr.w	r3, r3, #2
 8000c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c6e:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <HAL_TIM_Base_MspInit+0x40>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000c7a:	bf00      	nop
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40010400 	.word	0x40010400
 8000c8c:	40023800 	.word	0x40023800

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c94:	e7fe      	b.n	8000c94 <NMI_Handler+0x4>

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <UsageFault_Handler+0x4>

08000cae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cdc:	f000 f8ae 	bl	8000e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <DMA1_Stream5_IRQHandler+0x10>)
 8000cea:	f001 f895 	bl	8001e18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000134 	.word	0x20000134

08000cf8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <ADC_IRQHandler+0x10>)
 8000cfe:	f000 f900 	bl	8000f02 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000078 	.word	0x20000078

08000d0c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d10:	4802      	ldr	r0, [pc, #8]	; (8000d1c <DMA2_Stream0_IRQHandler+0x10>)
 8000d12:	f001 f881 	bl	8001e18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200000c0 	.word	0x200000c0

08000d20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <SystemInit+0x20>)
 8000d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d2a:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <SystemInit+0x20>)
 8000d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <Reset_Handler>:
 8000d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d7c <LoopFillZerobss+0xe>
 8000d48:	f7ff ffea 	bl	8000d20 <SystemInit>
 8000d4c:	480c      	ldr	r0, [pc, #48]	; (8000d80 <LoopFillZerobss+0x12>)
 8000d4e:	490d      	ldr	r1, [pc, #52]	; (8000d84 <LoopFillZerobss+0x16>)
 8000d50:	4a0d      	ldr	r2, [pc, #52]	; (8000d88 <LoopFillZerobss+0x1a>)
 8000d52:	2300      	movs	r3, #0
 8000d54:	e002      	b.n	8000d5c <LoopCopyDataInit>

08000d56 <CopyDataInit>:
 8000d56:	58d4      	ldr	r4, [r2, r3]
 8000d58:	50c4      	str	r4, [r0, r3]
 8000d5a:	3304      	adds	r3, #4

08000d5c <LoopCopyDataInit>:
 8000d5c:	18c4      	adds	r4, r0, r3
 8000d5e:	428c      	cmp	r4, r1
 8000d60:	d3f9      	bcc.n	8000d56 <CopyDataInit>
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <LoopFillZerobss+0x1e>)
 8000d64:	4c0a      	ldr	r4, [pc, #40]	; (8000d90 <LoopFillZerobss+0x22>)
 8000d66:	2300      	movs	r3, #0
 8000d68:	e001      	b.n	8000d6e <LoopFillZerobss>

08000d6a <FillZerobss>:
 8000d6a:	6013      	str	r3, [r2, #0]
 8000d6c:	3204      	adds	r2, #4

08000d6e <LoopFillZerobss>:
 8000d6e:	42a2      	cmp	r2, r4
 8000d70:	d3fb      	bcc.n	8000d6a <FillZerobss>
 8000d72:	f003 fd1b 	bl	80047ac <__libc_init_array>
 8000d76:	f7ff fc17 	bl	80005a8 <main>
 8000d7a:	4770      	bx	lr
 8000d7c:	20030000 	.word	0x20030000
 8000d80:	20000000 	.word	0x20000000
 8000d84:	2000005c 	.word	0x2000005c
 8000d88:	080184d4 	.word	0x080184d4
 8000d8c:	2000005c 	.word	0x2000005c
 8000d90:	20002b3c 	.word	0x20002b3c

08000d94 <CAN1_RX0_IRQHandler>:
 8000d94:	e7fe      	b.n	8000d94 <CAN1_RX0_IRQHandler>
	...

08000d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <HAL_Init+0x40>)
 8000da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <HAL_Init+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <HAL_Init+0x40>)
 8000dae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <HAL_Init+0x40>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <HAL_Init+0x40>)
 8000dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f000 fe67 	bl	8001a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f000 f808 	bl	8000ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dcc:	f7ff fe1e 	bl	8000a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40023c00 	.word	0x40023c00

08000ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <HAL_InitTick+0x54>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <HAL_InitTick+0x58>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4619      	mov	r1, r3
 8000dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 fe7f 	bl	8001afe <HAL_SYSTICK_Config>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e00e      	b.n	8000e28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b0f      	cmp	r3, #15
 8000e0e:	d80a      	bhi.n	8000e26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e10:	2200      	movs	r2, #0
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295
 8000e18:	f000 fe47 	bl	8001aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e1c:	4a06      	ldr	r2, [pc, #24]	; (8000e38 <HAL_InitTick+0x5c>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	e000      	b.n	8000e28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000000 	.word	0x20000000
 8000e34:	20000008 	.word	0x20000008
 8000e38:	20000004 	.word	0x20000004

08000e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_IncTick+0x20>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_IncTick+0x24>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <HAL_IncTick+0x24>)
 8000e4e:	6013      	str	r3, [r2, #0]
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000008 	.word	0x20000008
 8000e60:	20002a00 	.word	0x20002a00

08000e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return uwTick;
 8000e68:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <HAL_GetTick+0x14>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	20002a00 	.word	0x20002a00

08000e7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e84:	2300      	movs	r3, #0
 8000e86:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d101      	bne.n	8000e92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e033      	b.n	8000efa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d109      	bne.n	8000eae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff fdde 	bl	8000a5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	f003 0310 	and.w	r3, r3, #16
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d118      	bne.n	8000eec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ec2:	f023 0302 	bic.w	r3, r3, #2
 8000ec6:	f043 0202 	orr.w	r2, r3, #2
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f000 fb88 	bl	80015e4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	f023 0303 	bic.w	r3, r3, #3
 8000ee2:	f043 0201 	orr.w	r2, r3, #1
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	641a      	str	r2, [r3, #64]	; 0x40
 8000eea:	e001      	b.n	8000ef0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b086      	sub	sp, #24
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	f003 0320 	and.w	r3, r3, #32
 8000f30:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d049      	beq.n	8000fcc <HAL_ADC_IRQHandler+0xca>
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d046      	beq.n	8000fcc <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f003 0310 	and.w	r3, r3, #16
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d105      	bne.n	8000f56 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d12b      	bne.n	8000fbc <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d127      	bne.n	8000fbc <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f72:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d006      	beq.n	8000f88 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d119      	bne.n	8000fbc <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	685a      	ldr	r2, [r3, #4]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f022 0220 	bic.w	r2, r2, #32
 8000f96:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d105      	bne.n	8000fbc <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	f043 0201 	orr.w	r2, r3, #1
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff fd15 	bl	80009ec <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f06f 0212 	mvn.w	r2, #18
 8000fca:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f003 0304 	and.w	r3, r3, #4
 8000fd2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fda:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d057      	beq.n	8001092 <HAL_ADC_IRQHandler+0x190>
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d054      	beq.n	8001092 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	f003 0310 	and.w	r3, r3, #16
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d105      	bne.n	8001000 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d139      	bne.n	8001082 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001014:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001018:	2b00      	cmp	r3, #0
 800101a:	d006      	beq.n	800102a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001026:	2b00      	cmp	r3, #0
 8001028:	d12b      	bne.n	8001082 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001034:	2b00      	cmp	r3, #0
 8001036:	d124      	bne.n	8001082 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001042:	2b00      	cmp	r3, #0
 8001044:	d11d      	bne.n	8001082 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800104a:	2b00      	cmp	r3, #0
 800104c:	d119      	bne.n	8001082 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800105c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001072:	2b00      	cmp	r3, #0
 8001074:	d105      	bne.n	8001082 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	f043 0201 	orr.w	r2, r3, #1
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f000 fc2c 	bl	80018e0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f06f 020c 	mvn.w	r2, #12
 8001090:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010a0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d017      	beq.n	80010d8 <HAL_ADC_IRQHandler+0x1d6>
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d014      	beq.n	80010d8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d10d      	bne.n	80010d8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 f945 	bl	8001358 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f06f 0201 	mvn.w	r2, #1
 80010d6:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f003 0320 	and.w	r3, r3, #32
 80010de:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010e6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d015      	beq.n	800111a <HAL_ADC_IRQHandler+0x218>
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d012      	beq.n	800111a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f8:	f043 0202 	orr.w	r2, r3, #2
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f06f 0220 	mvn.w	r2, #32
 8001108:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f000 f92e 	bl	800136c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f06f 0220 	mvn.w	r2, #32
 8001118:	601a      	str	r2, [r3, #0]
  }
}
 800111a:	bf00      	nop
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800113a:	2b01      	cmp	r3, #1
 800113c:	d101      	bne.n	8001142 <HAL_ADC_Start_DMA+0x1e>
 800113e:	2302      	movs	r3, #2
 8001140:	e0e9      	b.n	8001316 <HAL_ADC_Start_DMA+0x1f2>
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2201      	movs	r2, #1
 8001146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	2b01      	cmp	r3, #1
 8001156:	d018      	beq.n	800118a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	689a      	ldr	r2, [r3, #8]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f042 0201 	orr.w	r2, r2, #1
 8001166:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001168:	4b6d      	ldr	r3, [pc, #436]	; (8001320 <HAL_ADC_Start_DMA+0x1fc>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a6d      	ldr	r2, [pc, #436]	; (8001324 <HAL_ADC_Start_DMA+0x200>)
 800116e:	fba2 2303 	umull	r2, r3, r2, r3
 8001172:	0c9a      	lsrs	r2, r3, #18
 8001174:	4613      	mov	r3, r2
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	4413      	add	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800117c:	e002      	b.n	8001184 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	3b01      	subs	r3, #1
 8001182:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f9      	bne.n	800117e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001198:	d107      	bne.n	80011aa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011a8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	f040 80a1 	bne.w	80012fc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011c2:	f023 0301 	bic.w	r3, r3, #1
 80011c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d007      	beq.n	80011ec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011f8:	d106      	bne.n	8001208 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f023 0206 	bic.w	r2, r3, #6
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	645a      	str	r2, [r3, #68]	; 0x44
 8001206:	e002      	b.n	800120e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2200      	movs	r2, #0
 800120c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2200      	movs	r2, #0
 8001212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001216:	4b44      	ldr	r3, [pc, #272]	; (8001328 <HAL_ADC_Start_DMA+0x204>)
 8001218:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800121e:	4a43      	ldr	r2, [pc, #268]	; (800132c <HAL_ADC_Start_DMA+0x208>)
 8001220:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001226:	4a42      	ldr	r2, [pc, #264]	; (8001330 <HAL_ADC_Start_DMA+0x20c>)
 8001228:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800122e:	4a41      	ldr	r2, [pc, #260]	; (8001334 <HAL_ADC_Start_DMA+0x210>)
 8001230:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800123a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800124a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689a      	ldr	r2, [r3, #8]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800125a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	334c      	adds	r3, #76	; 0x4c
 8001266:	4619      	mov	r1, r3
 8001268:	68ba      	ldr	r2, [r7, #8]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f000 fd7c 	bl	8001d68 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 031f 	and.w	r3, r3, #31
 8001278:	2b00      	cmp	r3, #0
 800127a:	d12a      	bne.n	80012d2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a2d      	ldr	r2, [pc, #180]	; (8001338 <HAL_ADC_Start_DMA+0x214>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d015      	beq.n	80012b2 <HAL_ADC_Start_DMA+0x18e>
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a2c      	ldr	r2, [pc, #176]	; (800133c <HAL_ADC_Start_DMA+0x218>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d105      	bne.n	800129c <HAL_ADC_Start_DMA+0x178>
 8001290:	4b25      	ldr	r3, [pc, #148]	; (8001328 <HAL_ADC_Start_DMA+0x204>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 031f 	and.w	r3, r3, #31
 8001298:	2b00      	cmp	r3, #0
 800129a:	d00a      	beq.n	80012b2 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a27      	ldr	r2, [pc, #156]	; (8001340 <HAL_ADC_Start_DMA+0x21c>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d136      	bne.n	8001314 <HAL_ADC_Start_DMA+0x1f0>
 80012a6:	4b20      	ldr	r3, [pc, #128]	; (8001328 <HAL_ADC_Start_DMA+0x204>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 0310 	and.w	r3, r3, #16
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d130      	bne.n	8001314 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d129      	bne.n	8001314 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689a      	ldr	r2, [r3, #8]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	e020      	b.n	8001314 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a18      	ldr	r2, [pc, #96]	; (8001338 <HAL_ADC_Start_DMA+0x214>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d11b      	bne.n	8001314 <HAL_ADC_Start_DMA+0x1f0>
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d114      	bne.n	8001314 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	e00b      	b.n	8001314 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	f043 0210 	orr.w	r2, r3, #16
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130c:	f043 0201 	orr.w	r2, r3, #1
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000000 	.word	0x20000000
 8001324:	431bde83 	.word	0x431bde83
 8001328:	40012300 	.word	0x40012300
 800132c:	080017dd 	.word	0x080017dd
 8001330:	08001897 	.word	0x08001897
 8001334:	080018b3 	.word	0x080018b3
 8001338:	40012000 	.word	0x40012000
 800133c:	40012100 	.word	0x40012100
 8001340:	40012200 	.word	0x40012200

08001344 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001394:	2b01      	cmp	r3, #1
 8001396:	d101      	bne.n	800139c <HAL_ADC_ConfigChannel+0x1c>
 8001398:	2302      	movs	r3, #2
 800139a:	e113      	b.n	80015c4 <HAL_ADC_ConfigChannel+0x244>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2201      	movs	r2, #1
 80013a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b09      	cmp	r3, #9
 80013aa:	d925      	bls.n	80013f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	68d9      	ldr	r1, [r3, #12]
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	461a      	mov	r2, r3
 80013ba:	4613      	mov	r3, r2
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	4413      	add	r3, r2
 80013c0:	3b1e      	subs	r3, #30
 80013c2:	2207      	movs	r2, #7
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43da      	mvns	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	400a      	ands	r2, r1
 80013d0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	68d9      	ldr	r1, [r3, #12]
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	4603      	mov	r3, r0
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	4403      	add	r3, r0
 80013ea:	3b1e      	subs	r3, #30
 80013ec:	409a      	lsls	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	430a      	orrs	r2, r1
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	e022      	b.n	800143e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6919      	ldr	r1, [r3, #16]
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	b29b      	uxth	r3, r3
 8001404:	461a      	mov	r2, r3
 8001406:	4613      	mov	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4413      	add	r3, r2
 800140c:	2207      	movs	r2, #7
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43da      	mvns	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	400a      	ands	r2, r1
 800141a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6919      	ldr	r1, [r3, #16]
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	689a      	ldr	r2, [r3, #8]
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	b29b      	uxth	r3, r3
 800142c:	4618      	mov	r0, r3
 800142e:	4603      	mov	r3, r0
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4403      	add	r3, r0
 8001434:	409a      	lsls	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	430a      	orrs	r2, r1
 800143c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b06      	cmp	r3, #6
 8001444:	d824      	bhi.n	8001490 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	4613      	mov	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	3b05      	subs	r3, #5
 8001458:	221f      	movs	r2, #31
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43da      	mvns	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	400a      	ands	r2, r1
 8001466:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	b29b      	uxth	r3, r3
 8001474:	4618      	mov	r0, r3
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	4613      	mov	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	3b05      	subs	r3, #5
 8001482:	fa00 f203 	lsl.w	r2, r0, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	430a      	orrs	r2, r1
 800148c:	635a      	str	r2, [r3, #52]	; 0x34
 800148e:	e04c      	b.n	800152a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b0c      	cmp	r3, #12
 8001496:	d824      	bhi.n	80014e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	3b23      	subs	r3, #35	; 0x23
 80014aa:	221f      	movs	r2, #31
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43da      	mvns	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	400a      	ands	r2, r1
 80014b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	4613      	mov	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	3b23      	subs	r3, #35	; 0x23
 80014d4:	fa00 f203 	lsl.w	r2, r0, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	430a      	orrs	r2, r1
 80014de:	631a      	str	r2, [r3, #48]	; 0x30
 80014e0:	e023      	b.n	800152a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	4613      	mov	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	3b41      	subs	r3, #65	; 0x41
 80014f4:	221f      	movs	r2, #31
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43da      	mvns	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	400a      	ands	r2, r1
 8001502:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	b29b      	uxth	r3, r3
 8001510:	4618      	mov	r0, r3
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	3b41      	subs	r3, #65	; 0x41
 800151e:	fa00 f203 	lsl.w	r2, r0, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	430a      	orrs	r2, r1
 8001528:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800152a:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <HAL_ADC_ConfigChannel+0x250>)
 800152c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a28      	ldr	r2, [pc, #160]	; (80015d4 <HAL_ADC_ConfigChannel+0x254>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d10f      	bne.n	8001558 <HAL_ADC_ConfigChannel+0x1d8>
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b12      	cmp	r3, #18
 800153e:	d10b      	bne.n	8001558 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a1d      	ldr	r2, [pc, #116]	; (80015d4 <HAL_ADC_ConfigChannel+0x254>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d12b      	bne.n	80015ba <HAL_ADC_ConfigChannel+0x23a>
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a1c      	ldr	r2, [pc, #112]	; (80015d8 <HAL_ADC_ConfigChannel+0x258>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d003      	beq.n	8001574 <HAL_ADC_ConfigChannel+0x1f4>
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b11      	cmp	r3, #17
 8001572:	d122      	bne.n	80015ba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a11      	ldr	r2, [pc, #68]	; (80015d8 <HAL_ADC_ConfigChannel+0x258>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d111      	bne.n	80015ba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <HAL_ADC_ConfigChannel+0x25c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a11      	ldr	r2, [pc, #68]	; (80015e0 <HAL_ADC_ConfigChannel+0x260>)
 800159c:	fba2 2303 	umull	r2, r3, r2, r3
 80015a0:	0c9a      	lsrs	r2, r3, #18
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80015ac:	e002      	b.n	80015b4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	3b01      	subs	r3, #1
 80015b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f9      	bne.n	80015ae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	40012300 	.word	0x40012300
 80015d4:	40012000 	.word	0x40012000
 80015d8:	10000012 	.word	0x10000012
 80015dc:	20000000 	.word	0x20000000
 80015e0:	431bde83 	.word	0x431bde83

080015e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015ec:	4b79      	ldr	r3, [pc, #484]	; (80017d4 <ADC_Init+0x1f0>)
 80015ee:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	431a      	orrs	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001618:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6859      	ldr	r1, [r3, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	021a      	lsls	r2, r3, #8
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800163c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6859      	ldr	r1, [r3, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800165e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6899      	ldr	r1, [r3, #8]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68da      	ldr	r2, [r3, #12]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	430a      	orrs	r2, r1
 8001670:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001676:	4a58      	ldr	r2, [pc, #352]	; (80017d8 <ADC_Init+0x1f4>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d022      	beq.n	80016c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800168a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6899      	ldr	r1, [r3, #8]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6899      	ldr	r1, [r3, #8]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	e00f      	b.n	80016e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016e0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0202 	bic.w	r2, r2, #2
 80016f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6899      	ldr	r1, [r3, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	7e1b      	ldrb	r3, [r3, #24]
 80016fc:	005a      	lsls	r2, r3, #1
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 3020 	ldrb.w	r3, [r3, #32]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d01b      	beq.n	8001748 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800171e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800172e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6859      	ldr	r1, [r3, #4]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	3b01      	subs	r3, #1
 800173c:	035a      	lsls	r2, r3, #13
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	430a      	orrs	r2, r1
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	e007      	b.n	8001758 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001756:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001766:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	3b01      	subs	r3, #1
 8001774:	051a      	lsls	r2, r3, #20
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800178c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6899      	ldr	r1, [r3, #8]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800179a:	025a      	lsls	r2, r3, #9
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6899      	ldr	r1, [r3, #8]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	029a      	lsls	r2, r3, #10
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	609a      	str	r2, [r3, #8]
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	40012300 	.word	0x40012300
 80017d8:	0f000001 	.word	0x0f000001

080017dc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d13c      	bne.n	8001870 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d12b      	bne.n	8001868 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001814:	2b00      	cmp	r3, #0
 8001816:	d127      	bne.n	8001868 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001822:	2b00      	cmp	r3, #0
 8001824:	d006      	beq.n	8001834 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001830:	2b00      	cmp	r3, #0
 8001832:	d119      	bne.n	8001868 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 0220 	bic.w	r2, r2, #32
 8001842:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001854:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d105      	bne.n	8001868 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	f043 0201 	orr.w	r2, r3, #1
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f7ff f8bf 	bl	80009ec <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800186e:	e00e      	b.n	800188e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	f003 0310 	and.w	r3, r3, #16
 8001878:	2b00      	cmp	r3, #0
 800187a:	d003      	beq.n	8001884 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f7ff fd75 	bl	800136c <HAL_ADC_ErrorCallback>
}
 8001882:	e004      	b.n	800188e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	4798      	blx	r3
}
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b084      	sub	sp, #16
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80018a4:	68f8      	ldr	r0, [r7, #12]
 80018a6:	f7ff fd4d 	bl	8001344 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b084      	sub	sp, #16
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018be:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2240      	movs	r2, #64	; 0x40
 80018c4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	f043 0204 	orr.w	r2, r3, #4
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f7ff fd4a 	bl	800136c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018d8:	bf00      	nop
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001910:	4013      	ands	r3, r2
 8001912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800191c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001926:	4a04      	ldr	r2, [pc, #16]	; (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	60d3      	str	r3, [r2, #12]
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001940:	4b04      	ldr	r3, [pc, #16]	; (8001954 <__NVIC_GetPriorityGrouping+0x18>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	f003 0307 	and.w	r3, r3, #7
}
 800194a:	4618      	mov	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	2b00      	cmp	r3, #0
 8001968:	db0b      	blt.n	8001982 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	f003 021f 	and.w	r2, r3, #31
 8001970:	4907      	ldr	r1, [pc, #28]	; (8001990 <__NVIC_EnableIRQ+0x38>)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	2001      	movs	r0, #1
 800197a:	fa00 f202 	lsl.w	r2, r0, r2
 800197e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000e100 	.word	0xe000e100

08001994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	6039      	str	r1, [r7, #0]
 800199e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	db0a      	blt.n	80019be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	490c      	ldr	r1, [pc, #48]	; (80019e0 <__NVIC_SetPriority+0x4c>)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	0112      	lsls	r2, r2, #4
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	440b      	add	r3, r1
 80019b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019bc:	e00a      	b.n	80019d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4908      	ldr	r1, [pc, #32]	; (80019e4 <__NVIC_SetPriority+0x50>)
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	3b04      	subs	r3, #4
 80019cc:	0112      	lsls	r2, r2, #4
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	440b      	add	r3, r1
 80019d2:	761a      	strb	r2, [r3, #24]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000e100 	.word	0xe000e100
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	; 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f1c3 0307 	rsb	r3, r3, #7
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	bf28      	it	cs
 8001a06:	2304      	movcs	r3, #4
 8001a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	2b06      	cmp	r3, #6
 8001a10:	d902      	bls.n	8001a18 <NVIC_EncodePriority+0x30>
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3b03      	subs	r3, #3
 8001a16:	e000      	b.n	8001a1a <NVIC_EncodePriority+0x32>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43da      	mvns	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a30:	f04f 31ff 	mov.w	r1, #4294967295
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	43d9      	mvns	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a40:	4313      	orrs	r3, r2
         );
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3724      	adds	r7, #36	; 0x24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a60:	d301      	bcc.n	8001a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a62:	2301      	movs	r3, #1
 8001a64:	e00f      	b.n	8001a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a66:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <SysTick_Config+0x40>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a6e:	210f      	movs	r1, #15
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295
 8001a74:	f7ff ff8e 	bl	8001994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <SysTick_Config+0x40>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7e:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <SysTick_Config+0x40>)
 8001a80:	2207      	movs	r2, #7
 8001a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	e000e010 	.word	0xe000e010

08001a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff ff29 	bl	80018f4 <__NVIC_SetPriorityGrouping>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b086      	sub	sp, #24
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
 8001ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001abc:	f7ff ff3e 	bl	800193c <__NVIC_GetPriorityGrouping>
 8001ac0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	6978      	ldr	r0, [r7, #20]
 8001ac8:	f7ff ff8e 	bl	80019e8 <NVIC_EncodePriority>
 8001acc:	4602      	mov	r2, r0
 8001ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff5d 	bl	8001994 <__NVIC_SetPriority>
}
 8001ada:	bf00      	nop
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4603      	mov	r3, r0
 8001aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff31 	bl	8001958 <__NVIC_EnableIRQ>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff ffa2 	bl	8001a50 <SysTick_Config>
 8001b0c:	4603      	mov	r3, r0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e014      	b.n	8001b52 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	791b      	ldrb	r3, [r3, #4]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d105      	bne.n	8001b3e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff f80f 	bl	8000b5c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2202      	movs	r2, #2
 8001b42:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b089      	sub	sp, #36	; 0x24
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	60f8      	str	r0, [r7, #12]
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d002      	beq.n	8001b76 <HAL_DAC_ConfigChannel+0x1c>
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e042      	b.n	8001c00 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	795b      	ldrb	r3, [r3, #5]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d101      	bne.n	8001b86 <HAL_DAC_ConfigChannel+0x2c>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e03c      	b.n	8001c00 <HAL_DAC_ConfigChannel+0xa6>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f003 0310 	and.w	r3, r3, #16
 8001ba0:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f003 0310 	and.w	r3, r3, #16
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6819      	ldr	r1, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f003 0310 	and.w	r3, r3, #16
 8001be2:	22c0      	movs	r2, #192	; 0xc0
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43da      	mvns	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	400a      	ands	r2, r1
 8001bf0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001bfe:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3724      	adds	r7, #36	; 0x24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c18:	f7ff f924 	bl	8000e64 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e099      	b.n	8001d5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0201 	bic.w	r2, r2, #1
 8001c46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c48:	e00f      	b.n	8001c6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c4a:	f7ff f90b 	bl	8000e64 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b05      	cmp	r3, #5
 8001c56:	d908      	bls.n	8001c6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2203      	movs	r2, #3
 8001c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e078      	b.n	8001d5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1e8      	bne.n	8001c4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	4b38      	ldr	r3, [pc, #224]	; (8001d64 <HAL_DMA_Init+0x158>)
 8001c84:	4013      	ands	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ca2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d107      	bne.n	8001cd4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f023 0307 	bic.w	r3, r3, #7
 8001cea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	d117      	bne.n	8001d2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00e      	beq.n	8001d2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 fa6f 	bl	80021f4 <DMA_CheckFifoParam>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d008      	beq.n	8001d2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2240      	movs	r2, #64	; 0x40
 8001d20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e016      	b.n	8001d5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 fa26 	bl	8002188 <DMA_CalcBaseAndBitshift>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d44:	223f      	movs	r2, #63	; 0x3f
 8001d46:	409a      	lsls	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	f010803f 	.word	0xf010803f

08001d68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d101      	bne.n	8001d8e <HAL_DMA_Start_IT+0x26>
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e040      	b.n	8001e10 <HAL_DMA_Start_IT+0xa8>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d12f      	bne.n	8001e02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2202      	movs	r2, #2
 8001da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	68b9      	ldr	r1, [r7, #8]
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f000 f9b8 	bl	800212c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc0:	223f      	movs	r2, #63	; 0x3f
 8001dc2:	409a      	lsls	r2, r3
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0216 	orr.w	r2, r2, #22
 8001dd6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d007      	beq.n	8001df0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0208 	orr.w	r2, r2, #8
 8001dee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0201 	orr.w	r2, r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	e005      	b.n	8001e0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e24:	4b8e      	ldr	r3, [pc, #568]	; (8002060 <HAL_DMA_IRQHandler+0x248>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a8e      	ldr	r2, [pc, #568]	; (8002064 <HAL_DMA_IRQHandler+0x24c>)
 8001e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2e:	0a9b      	lsrs	r3, r3, #10
 8001e30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e42:	2208      	movs	r2, #8
 8001e44:	409a      	lsls	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d01a      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d013      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 0204 	bic.w	r2, r2, #4
 8001e6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e70:	2208      	movs	r2, #8
 8001e72:	409a      	lsls	r2, r3
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7c:	f043 0201 	orr.w	r2, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e88:	2201      	movs	r2, #1
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d012      	beq.n	8001eba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00b      	beq.n	8001eba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb2:	f043 0202 	orr.w	r2, r3, #2
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	409a      	lsls	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d012      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00b      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001edc:	2204      	movs	r2, #4
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee8:	f043 0204 	orr.w	r2, r3, #4
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef4:	2210      	movs	r2, #16
 8001ef6:	409a      	lsls	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4013      	ands	r3, r2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d043      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d03c      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f12:	2210      	movs	r2, #16
 8001f14:	409a      	lsls	r2, r3
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d018      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d108      	bne.n	8001f48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d024      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	4798      	blx	r3
 8001f46:	e01f      	b.n	8001f88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d01b      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	4798      	blx	r3
 8001f58:	e016      	b.n	8001f88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d107      	bne.n	8001f78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0208 	bic.w	r2, r2, #8
 8001f76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4013      	ands	r3, r2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 808f 	beq.w	80020b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0310 	and.w	r3, r3, #16
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 8087 	beq.w	80020b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fae:	2220      	movs	r2, #32
 8001fb0:	409a      	lsls	r2, r3
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b05      	cmp	r3, #5
 8001fc0:	d136      	bne.n	8002030 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0216 	bic.w	r2, r2, #22
 8001fd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	695a      	ldr	r2, [r3, #20]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fe0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d103      	bne.n	8001ff2 <HAL_DMA_IRQHandler+0x1da>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d007      	beq.n	8002002 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0208 	bic.w	r2, r2, #8
 8002000:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002006:	223f      	movs	r2, #63	; 0x3f
 8002008:	409a      	lsls	r2, r3
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002022:	2b00      	cmp	r3, #0
 8002024:	d07e      	beq.n	8002124 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	4798      	blx	r3
        }
        return;
 800202e:	e079      	b.n	8002124 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d01d      	beq.n	800207a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10d      	bne.n	8002068 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002050:	2b00      	cmp	r3, #0
 8002052:	d031      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	4798      	blx	r3
 800205c:	e02c      	b.n	80020b8 <HAL_DMA_IRQHandler+0x2a0>
 800205e:	bf00      	nop
 8002060:	20000000 	.word	0x20000000
 8002064:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206c:	2b00      	cmp	r3, #0
 800206e:	d023      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	4798      	blx	r3
 8002078:	e01e      	b.n	80020b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10f      	bne.n	80020a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0210 	bic.w	r2, r2, #16
 8002096:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d032      	beq.n	8002126 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d022      	beq.n	8002112 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2205      	movs	r2, #5
 80020d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0201 	bic.w	r2, r2, #1
 80020e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	3301      	adds	r3, #1
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d307      	bcc.n	8002100 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f2      	bne.n	80020e4 <HAL_DMA_IRQHandler+0x2cc>
 80020fe:	e000      	b.n	8002102 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002100:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002116:	2b00      	cmp	r3, #0
 8002118:	d005      	beq.n	8002126 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	4798      	blx	r3
 8002122:	e000      	b.n	8002126 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002124:	bf00      	nop
    }
  }
}
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002148:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	2b40      	cmp	r3, #64	; 0x40
 8002158:	d108      	bne.n	800216c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800216a:	e007      	b.n	800217c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	60da      	str	r2, [r3, #12]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	3b10      	subs	r3, #16
 8002198:	4a14      	ldr	r2, [pc, #80]	; (80021ec <DMA_CalcBaseAndBitshift+0x64>)
 800219a:	fba2 2303 	umull	r2, r3, r2, r3
 800219e:	091b      	lsrs	r3, r3, #4
 80021a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021a2:	4a13      	ldr	r2, [pc, #76]	; (80021f0 <DMA_CalcBaseAndBitshift+0x68>)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4413      	add	r3, r2
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d909      	bls.n	80021ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021be:	f023 0303 	bic.w	r3, r3, #3
 80021c2:	1d1a      	adds	r2, r3, #4
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	659a      	str	r2, [r3, #88]	; 0x58
 80021c8:	e007      	b.n	80021da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021d2:	f023 0303 	bic.w	r3, r3, #3
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	aaaaaaab 	.word	0xaaaaaaab
 80021f0:	08004860 	.word	0x08004860

080021f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021fc:	2300      	movs	r3, #0
 80021fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002204:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d11f      	bne.n	800224e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	2b03      	cmp	r3, #3
 8002212:	d856      	bhi.n	80022c2 <DMA_CheckFifoParam+0xce>
 8002214:	a201      	add	r2, pc, #4	; (adr r2, 800221c <DMA_CheckFifoParam+0x28>)
 8002216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800221a:	bf00      	nop
 800221c:	0800222d 	.word	0x0800222d
 8002220:	0800223f 	.word	0x0800223f
 8002224:	0800222d 	.word	0x0800222d
 8002228:	080022c3 	.word	0x080022c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d046      	beq.n	80022c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800223c:	e043      	b.n	80022c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002242:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002246:	d140      	bne.n	80022ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800224c:	e03d      	b.n	80022ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002256:	d121      	bne.n	800229c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2b03      	cmp	r3, #3
 800225c:	d837      	bhi.n	80022ce <DMA_CheckFifoParam+0xda>
 800225e:	a201      	add	r2, pc, #4	; (adr r2, 8002264 <DMA_CheckFifoParam+0x70>)
 8002260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002264:	08002275 	.word	0x08002275
 8002268:	0800227b 	.word	0x0800227b
 800226c:	08002275 	.word	0x08002275
 8002270:	0800228d 	.word	0x0800228d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	73fb      	strb	r3, [r7, #15]
      break;
 8002278:	e030      	b.n	80022dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d025      	beq.n	80022d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800228a:	e022      	b.n	80022d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002290:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002294:	d11f      	bne.n	80022d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800229a:	e01c      	b.n	80022d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d903      	bls.n	80022aa <DMA_CheckFifoParam+0xb6>
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d003      	beq.n	80022b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022a8:	e018      	b.n	80022dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	73fb      	strb	r3, [r7, #15]
      break;
 80022ae:	e015      	b.n	80022dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00e      	beq.n	80022da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
      break;
 80022c0:	e00b      	b.n	80022da <DMA_CheckFifoParam+0xe6>
      break;
 80022c2:	bf00      	nop
 80022c4:	e00a      	b.n	80022dc <DMA_CheckFifoParam+0xe8>
      break;
 80022c6:	bf00      	nop
 80022c8:	e008      	b.n	80022dc <DMA_CheckFifoParam+0xe8>
      break;
 80022ca:	bf00      	nop
 80022cc:	e006      	b.n	80022dc <DMA_CheckFifoParam+0xe8>
      break;
 80022ce:	bf00      	nop
 80022d0:	e004      	b.n	80022dc <DMA_CheckFifoParam+0xe8>
      break;
 80022d2:	bf00      	nop
 80022d4:	e002      	b.n	80022dc <DMA_CheckFifoParam+0xe8>
      break;   
 80022d6:	bf00      	nop
 80022d8:	e000      	b.n	80022dc <DMA_CheckFifoParam+0xe8>
      break;
 80022da:	bf00      	nop
    }
  } 
  
  return status; 
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop

080022ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b089      	sub	sp, #36	; 0x24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022fe:	2300      	movs	r3, #0
 8002300:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
 8002306:	e177      	b.n	80025f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002308:	2201      	movs	r2, #1
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	4013      	ands	r3, r2
 800231a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	429a      	cmp	r2, r3
 8002322:	f040 8166 	bne.w	80025f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	2b01      	cmp	r3, #1
 8002330:	d005      	beq.n	800233e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800233a:	2b02      	cmp	r3, #2
 800233c:	d130      	bne.n	80023a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	2203      	movs	r2, #3
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43db      	mvns	r3, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4013      	ands	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002374:	2201      	movs	r2, #1
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	091b      	lsrs	r3, r3, #4
 800238a:	f003 0201 	and.w	r2, r3, #1
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	d017      	beq.n	80023dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	2203      	movs	r2, #3
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 0303 	and.w	r3, r3, #3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d123      	bne.n	8002430 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	08da      	lsrs	r2, r3, #3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3208      	adds	r2, #8
 80023f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	220f      	movs	r2, #15
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	691a      	ldr	r2, [r3, #16]
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	08da      	lsrs	r2, r3, #3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3208      	adds	r2, #8
 800242a:	69b9      	ldr	r1, [r7, #24]
 800242c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	2203      	movs	r2, #3
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4013      	ands	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 0203 	and.w	r2, r3, #3
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 80c0 	beq.w	80025f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	4b66      	ldr	r3, [pc, #408]	; (8002610 <HAL_GPIO_Init+0x324>)
 8002478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247a:	4a65      	ldr	r2, [pc, #404]	; (8002610 <HAL_GPIO_Init+0x324>)
 800247c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002480:	6453      	str	r3, [r2, #68]	; 0x44
 8002482:	4b63      	ldr	r3, [pc, #396]	; (8002610 <HAL_GPIO_Init+0x324>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800248e:	4a61      	ldr	r2, [pc, #388]	; (8002614 <HAL_GPIO_Init+0x328>)
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	089b      	lsrs	r3, r3, #2
 8002494:	3302      	adds	r3, #2
 8002496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	220f      	movs	r2, #15
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a58      	ldr	r2, [pc, #352]	; (8002618 <HAL_GPIO_Init+0x32c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d037      	beq.n	800252a <HAL_GPIO_Init+0x23e>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a57      	ldr	r2, [pc, #348]	; (800261c <HAL_GPIO_Init+0x330>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d031      	beq.n	8002526 <HAL_GPIO_Init+0x23a>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a56      	ldr	r2, [pc, #344]	; (8002620 <HAL_GPIO_Init+0x334>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d02b      	beq.n	8002522 <HAL_GPIO_Init+0x236>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a55      	ldr	r2, [pc, #340]	; (8002624 <HAL_GPIO_Init+0x338>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d025      	beq.n	800251e <HAL_GPIO_Init+0x232>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a54      	ldr	r2, [pc, #336]	; (8002628 <HAL_GPIO_Init+0x33c>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d01f      	beq.n	800251a <HAL_GPIO_Init+0x22e>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a53      	ldr	r2, [pc, #332]	; (800262c <HAL_GPIO_Init+0x340>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d019      	beq.n	8002516 <HAL_GPIO_Init+0x22a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a52      	ldr	r2, [pc, #328]	; (8002630 <HAL_GPIO_Init+0x344>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d013      	beq.n	8002512 <HAL_GPIO_Init+0x226>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a51      	ldr	r2, [pc, #324]	; (8002634 <HAL_GPIO_Init+0x348>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d00d      	beq.n	800250e <HAL_GPIO_Init+0x222>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a50      	ldr	r2, [pc, #320]	; (8002638 <HAL_GPIO_Init+0x34c>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d007      	beq.n	800250a <HAL_GPIO_Init+0x21e>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a4f      	ldr	r2, [pc, #316]	; (800263c <HAL_GPIO_Init+0x350>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d101      	bne.n	8002506 <HAL_GPIO_Init+0x21a>
 8002502:	2309      	movs	r3, #9
 8002504:	e012      	b.n	800252c <HAL_GPIO_Init+0x240>
 8002506:	230a      	movs	r3, #10
 8002508:	e010      	b.n	800252c <HAL_GPIO_Init+0x240>
 800250a:	2308      	movs	r3, #8
 800250c:	e00e      	b.n	800252c <HAL_GPIO_Init+0x240>
 800250e:	2307      	movs	r3, #7
 8002510:	e00c      	b.n	800252c <HAL_GPIO_Init+0x240>
 8002512:	2306      	movs	r3, #6
 8002514:	e00a      	b.n	800252c <HAL_GPIO_Init+0x240>
 8002516:	2305      	movs	r3, #5
 8002518:	e008      	b.n	800252c <HAL_GPIO_Init+0x240>
 800251a:	2304      	movs	r3, #4
 800251c:	e006      	b.n	800252c <HAL_GPIO_Init+0x240>
 800251e:	2303      	movs	r3, #3
 8002520:	e004      	b.n	800252c <HAL_GPIO_Init+0x240>
 8002522:	2302      	movs	r3, #2
 8002524:	e002      	b.n	800252c <HAL_GPIO_Init+0x240>
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <HAL_GPIO_Init+0x240>
 800252a:	2300      	movs	r3, #0
 800252c:	69fa      	ldr	r2, [r7, #28]
 800252e:	f002 0203 	and.w	r2, r2, #3
 8002532:	0092      	lsls	r2, r2, #2
 8002534:	4093      	lsls	r3, r2
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800253c:	4935      	ldr	r1, [pc, #212]	; (8002614 <HAL_GPIO_Init+0x328>)
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	089b      	lsrs	r3, r3, #2
 8002542:	3302      	adds	r3, #2
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800254a:	4b3d      	ldr	r3, [pc, #244]	; (8002640 <HAL_GPIO_Init+0x354>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	43db      	mvns	r3, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4013      	ands	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800256e:	4a34      	ldr	r2, [pc, #208]	; (8002640 <HAL_GPIO_Init+0x354>)
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002574:	4b32      	ldr	r3, [pc, #200]	; (8002640 <HAL_GPIO_Init+0x354>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	43db      	mvns	r3, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d003      	beq.n	8002598 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	4313      	orrs	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002598:	4a29      	ldr	r2, [pc, #164]	; (8002640 <HAL_GPIO_Init+0x354>)
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800259e:	4b28      	ldr	r3, [pc, #160]	; (8002640 <HAL_GPIO_Init+0x354>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	43db      	mvns	r3, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4013      	ands	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025c2:	4a1f      	ldr	r2, [pc, #124]	; (8002640 <HAL_GPIO_Init+0x354>)
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025c8:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <HAL_GPIO_Init+0x354>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025ec:	4a14      	ldr	r2, [pc, #80]	; (8002640 <HAL_GPIO_Init+0x354>)
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	3301      	adds	r3, #1
 80025f6:	61fb      	str	r3, [r7, #28]
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	2b0f      	cmp	r3, #15
 80025fc:	f67f ae84 	bls.w	8002308 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002600:	bf00      	nop
 8002602:	bf00      	nop
 8002604:	3724      	adds	r7, #36	; 0x24
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40023800 	.word	0x40023800
 8002614:	40013800 	.word	0x40013800
 8002618:	40020000 	.word	0x40020000
 800261c:	40020400 	.word	0x40020400
 8002620:	40020800 	.word	0x40020800
 8002624:	40020c00 	.word	0x40020c00
 8002628:	40021000 	.word	0x40021000
 800262c:	40021400 	.word	0x40021400
 8002630:	40021800 	.word	0x40021800
 8002634:	40021c00 	.word	0x40021c00
 8002638:	40022000 	.word	0x40022000
 800263c:	40022400 	.word	0x40022400
 8002640:	40013c00 	.word	0x40013c00

08002644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	807b      	strh	r3, [r7, #2]
 8002650:	4613      	mov	r3, r2
 8002652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002654:	787b      	ldrb	r3, [r7, #1]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800265a:	887a      	ldrh	r2, [r7, #2]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002660:	e003      	b.n	800266a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002662:	887b      	ldrh	r3, [r7, #2]
 8002664:	041a      	lsls	r2, r3, #16
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	619a      	str	r2, [r3, #24]
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
	...

08002678 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800267e:	2300      	movs	r3, #0
 8002680:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	603b      	str	r3, [r7, #0]
 8002686:	4b20      	ldr	r3, [pc, #128]	; (8002708 <HAL_PWREx_EnableOverDrive+0x90>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	4a1f      	ldr	r2, [pc, #124]	; (8002708 <HAL_PWREx_EnableOverDrive+0x90>)
 800268c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002690:	6413      	str	r3, [r2, #64]	; 0x40
 8002692:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <HAL_PWREx_EnableOverDrive+0x90>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269a:	603b      	str	r3, [r7, #0]
 800269c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800269e:	4b1b      	ldr	r3, [pc, #108]	; (800270c <HAL_PWREx_EnableOverDrive+0x94>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026a4:	f7fe fbde 	bl	8000e64 <HAL_GetTick>
 80026a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026aa:	e009      	b.n	80026c0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026ac:	f7fe fbda 	bl	8000e64 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026ba:	d901      	bls.n	80026c0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e01f      	b.n	8002700 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026c0:	4b13      	ldr	r3, [pc, #76]	; (8002710 <HAL_PWREx_EnableOverDrive+0x98>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026cc:	d1ee      	bne.n	80026ac <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80026ce:	4b11      	ldr	r3, [pc, #68]	; (8002714 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026d4:	f7fe fbc6 	bl	8000e64 <HAL_GetTick>
 80026d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026da:	e009      	b.n	80026f0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026dc:	f7fe fbc2 	bl	8000e64 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026ea:	d901      	bls.n	80026f0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e007      	b.n	8002700 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026f0:	4b07      	ldr	r3, [pc, #28]	; (8002710 <HAL_PWREx_EnableOverDrive+0x98>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026fc:	d1ee      	bne.n	80026dc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40023800 	.word	0x40023800
 800270c:	420e0040 	.word	0x420e0040
 8002710:	40007000 	.word	0x40007000
 8002714:	420e0044 	.word	0x420e0044

08002718 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e267      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d075      	beq.n	8002822 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002736:	4b88      	ldr	r3, [pc, #544]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 030c 	and.w	r3, r3, #12
 800273e:	2b04      	cmp	r3, #4
 8002740:	d00c      	beq.n	800275c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002742:	4b85      	ldr	r3, [pc, #532]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800274a:	2b08      	cmp	r3, #8
 800274c:	d112      	bne.n	8002774 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800274e:	4b82      	ldr	r3, [pc, #520]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002756:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800275a:	d10b      	bne.n	8002774 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800275c:	4b7e      	ldr	r3, [pc, #504]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d05b      	beq.n	8002820 <HAL_RCC_OscConfig+0x108>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d157      	bne.n	8002820 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e242      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800277c:	d106      	bne.n	800278c <HAL_RCC_OscConfig+0x74>
 800277e:	4b76      	ldr	r3, [pc, #472]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a75      	ldr	r2, [pc, #468]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 8002784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	e01d      	b.n	80027c8 <HAL_RCC_OscConfig+0xb0>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002794:	d10c      	bne.n	80027b0 <HAL_RCC_OscConfig+0x98>
 8002796:	4b70      	ldr	r3, [pc, #448]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a6f      	ldr	r2, [pc, #444]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 800279c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	4b6d      	ldr	r3, [pc, #436]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a6c      	ldr	r2, [pc, #432]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 80027a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	e00b      	b.n	80027c8 <HAL_RCC_OscConfig+0xb0>
 80027b0:	4b69      	ldr	r3, [pc, #420]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a68      	ldr	r2, [pc, #416]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 80027b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	4b66      	ldr	r3, [pc, #408]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a65      	ldr	r2, [pc, #404]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 80027c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d013      	beq.n	80027f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f7fe fb48 	bl	8000e64 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d8:	f7fe fb44 	bl	8000e64 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b64      	cmp	r3, #100	; 0x64
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e207      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ea:	4b5b      	ldr	r3, [pc, #364]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0f0      	beq.n	80027d8 <HAL_RCC_OscConfig+0xc0>
 80027f6:	e014      	b.n	8002822 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7fe fb34 	bl	8000e64 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002800:	f7fe fb30 	bl	8000e64 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b64      	cmp	r3, #100	; 0x64
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e1f3      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002812:	4b51      	ldr	r3, [pc, #324]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0xe8>
 800281e:	e000      	b.n	8002822 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d063      	beq.n	80028f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800282e:	4b4a      	ldr	r3, [pc, #296]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 030c 	and.w	r3, r3, #12
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00b      	beq.n	8002852 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800283a:	4b47      	ldr	r3, [pc, #284]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002842:	2b08      	cmp	r3, #8
 8002844:	d11c      	bne.n	8002880 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002846:	4b44      	ldr	r3, [pc, #272]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d116      	bne.n	8002880 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002852:	4b41      	ldr	r3, [pc, #260]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d005      	beq.n	800286a <HAL_RCC_OscConfig+0x152>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d001      	beq.n	800286a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e1c7      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286a:	4b3b      	ldr	r3, [pc, #236]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	4937      	ldr	r1, [pc, #220]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 800287a:	4313      	orrs	r3, r2
 800287c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287e:	e03a      	b.n	80028f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d020      	beq.n	80028ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002888:	4b34      	ldr	r3, [pc, #208]	; (800295c <HAL_RCC_OscConfig+0x244>)
 800288a:	2201      	movs	r2, #1
 800288c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288e:	f7fe fae9 	bl	8000e64 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002896:	f7fe fae5 	bl	8000e64 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e1a8      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a8:	4b2b      	ldr	r3, [pc, #172]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0f0      	beq.n	8002896 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b4:	4b28      	ldr	r3, [pc, #160]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	4925      	ldr	r1, [pc, #148]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	600b      	str	r3, [r1, #0]
 80028c8:	e015      	b.n	80028f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ca:	4b24      	ldr	r3, [pc, #144]	; (800295c <HAL_RCC_OscConfig+0x244>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d0:	f7fe fac8 	bl	8000e64 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028d8:	f7fe fac4 	bl	8000e64 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e187      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ea:	4b1b      	ldr	r3, [pc, #108]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f0      	bne.n	80028d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d036      	beq.n	8002970 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d016      	beq.n	8002938 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800290a:	4b15      	ldr	r3, [pc, #84]	; (8002960 <HAL_RCC_OscConfig+0x248>)
 800290c:	2201      	movs	r2, #1
 800290e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002910:	f7fe faa8 	bl	8000e64 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002918:	f7fe faa4 	bl	8000e64 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e167      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800292a:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <HAL_RCC_OscConfig+0x240>)
 800292c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0f0      	beq.n	8002918 <HAL_RCC_OscConfig+0x200>
 8002936:	e01b      	b.n	8002970 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002938:	4b09      	ldr	r3, [pc, #36]	; (8002960 <HAL_RCC_OscConfig+0x248>)
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800293e:	f7fe fa91 	bl	8000e64 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002944:	e00e      	b.n	8002964 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002946:	f7fe fa8d 	bl	8000e64 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d907      	bls.n	8002964 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e150      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
 8002958:	40023800 	.word	0x40023800
 800295c:	42470000 	.word	0x42470000
 8002960:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002964:	4b88      	ldr	r3, [pc, #544]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1ea      	bne.n	8002946 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 8097 	beq.w	8002aac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800297e:	2300      	movs	r3, #0
 8002980:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002982:	4b81      	ldr	r3, [pc, #516]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10f      	bne.n	80029ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	60bb      	str	r3, [r7, #8]
 8002992:	4b7d      	ldr	r3, [pc, #500]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	4a7c      	ldr	r2, [pc, #496]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800299c:	6413      	str	r3, [r2, #64]	; 0x40
 800299e:	4b7a      	ldr	r3, [pc, #488]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a6:	60bb      	str	r3, [r7, #8]
 80029a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029aa:	2301      	movs	r3, #1
 80029ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ae:	4b77      	ldr	r3, [pc, #476]	; (8002b8c <HAL_RCC_OscConfig+0x474>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d118      	bne.n	80029ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ba:	4b74      	ldr	r3, [pc, #464]	; (8002b8c <HAL_RCC_OscConfig+0x474>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a73      	ldr	r2, [pc, #460]	; (8002b8c <HAL_RCC_OscConfig+0x474>)
 80029c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029c6:	f7fe fa4d 	bl	8000e64 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ce:	f7fe fa49 	bl	8000e64 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e10c      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e0:	4b6a      	ldr	r3, [pc, #424]	; (8002b8c <HAL_RCC_OscConfig+0x474>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0f0      	beq.n	80029ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d106      	bne.n	8002a02 <HAL_RCC_OscConfig+0x2ea>
 80029f4:	4b64      	ldr	r3, [pc, #400]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 80029f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f8:	4a63      	ldr	r2, [pc, #396]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002a00:	e01c      	b.n	8002a3c <HAL_RCC_OscConfig+0x324>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2b05      	cmp	r3, #5
 8002a08:	d10c      	bne.n	8002a24 <HAL_RCC_OscConfig+0x30c>
 8002a0a:	4b5f      	ldr	r3, [pc, #380]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0e:	4a5e      	ldr	r2, [pc, #376]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a10:	f043 0304 	orr.w	r3, r3, #4
 8002a14:	6713      	str	r3, [r2, #112]	; 0x70
 8002a16:	4b5c      	ldr	r3, [pc, #368]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1a:	4a5b      	ldr	r2, [pc, #364]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	6713      	str	r3, [r2, #112]	; 0x70
 8002a22:	e00b      	b.n	8002a3c <HAL_RCC_OscConfig+0x324>
 8002a24:	4b58      	ldr	r3, [pc, #352]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a28:	4a57      	ldr	r2, [pc, #348]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a2a:	f023 0301 	bic.w	r3, r3, #1
 8002a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a30:	4b55      	ldr	r3, [pc, #340]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a34:	4a54      	ldr	r2, [pc, #336]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a36:	f023 0304 	bic.w	r3, r3, #4
 8002a3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d015      	beq.n	8002a70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a44:	f7fe fa0e 	bl	8000e64 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a4a:	e00a      	b.n	8002a62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a4c:	f7fe fa0a 	bl	8000e64 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e0cb      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a62:	4b49      	ldr	r3, [pc, #292]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0ee      	beq.n	8002a4c <HAL_RCC_OscConfig+0x334>
 8002a6e:	e014      	b.n	8002a9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a70:	f7fe f9f8 	bl	8000e64 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a76:	e00a      	b.n	8002a8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a78:	f7fe f9f4 	bl	8000e64 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e0b5      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a8e:	4b3e      	ldr	r3, [pc, #248]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1ee      	bne.n	8002a78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a9a:	7dfb      	ldrb	r3, [r7, #23]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d105      	bne.n	8002aac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aa0:	4b39      	ldr	r3, [pc, #228]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	4a38      	ldr	r2, [pc, #224]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002aa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aaa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 80a1 	beq.w	8002bf8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ab6:	4b34      	ldr	r3, [pc, #208]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 030c 	and.w	r3, r3, #12
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d05c      	beq.n	8002b7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d141      	bne.n	8002b4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aca:	4b31      	ldr	r3, [pc, #196]	; (8002b90 <HAL_RCC_OscConfig+0x478>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad0:	f7fe f9c8 	bl	8000e64 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad8:	f7fe f9c4 	bl	8000e64 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e087      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aea:	4b27      	ldr	r3, [pc, #156]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f0      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69da      	ldr	r2, [r3, #28]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	019b      	lsls	r3, r3, #6
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0c:	085b      	lsrs	r3, r3, #1
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	041b      	lsls	r3, r3, #16
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	061b      	lsls	r3, r3, #24
 8002b1a:	491b      	ldr	r1, [pc, #108]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b20:	4b1b      	ldr	r3, [pc, #108]	; (8002b90 <HAL_RCC_OscConfig+0x478>)
 8002b22:	2201      	movs	r2, #1
 8002b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b26:	f7fe f99d 	bl	8000e64 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b2e:	f7fe f999 	bl	8000e64 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e05c      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b40:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0f0      	beq.n	8002b2e <HAL_RCC_OscConfig+0x416>
 8002b4c:	e054      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4e:	4b10      	ldr	r3, [pc, #64]	; (8002b90 <HAL_RCC_OscConfig+0x478>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b54:	f7fe f986 	bl	8000e64 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b5c:	f7fe f982 	bl	8000e64 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e045      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b6e:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f0      	bne.n	8002b5c <HAL_RCC_OscConfig+0x444>
 8002b7a:	e03d      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d107      	bne.n	8002b94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e038      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40007000 	.word	0x40007000
 8002b90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b94:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <HAL_RCC_OscConfig+0x4ec>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d028      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d121      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d11a      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d111      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bda:	085b      	lsrs	r3, r3, #1
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d107      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40023800 	.word	0x40023800

08002c08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0cc      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c1c:	4b68      	ldr	r3, [pc, #416]	; (8002dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 030f 	and.w	r3, r3, #15
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d90c      	bls.n	8002c44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2a:	4b65      	ldr	r3, [pc, #404]	; (8002dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c32:	4b63      	ldr	r3, [pc, #396]	; (8002dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e0b8      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d020      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c5c:	4b59      	ldr	r3, [pc, #356]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	4a58      	ldr	r2, [pc, #352]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c74:	4b53      	ldr	r3, [pc, #332]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	4a52      	ldr	r2, [pc, #328]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c80:	4b50      	ldr	r3, [pc, #320]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	494d      	ldr	r1, [pc, #308]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d044      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d107      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca6:	4b47      	ldr	r3, [pc, #284]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d119      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e07f      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d003      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d107      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc6:	4b3f      	ldr	r3, [pc, #252]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d109      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e06f      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd6:	4b3b      	ldr	r3, [pc, #236]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e067      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ce6:	4b37      	ldr	r3, [pc, #220]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f023 0203 	bic.w	r2, r3, #3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	4934      	ldr	r1, [pc, #208]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cf8:	f7fe f8b4 	bl	8000e64 <HAL_GetTick>
 8002cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfe:	e00a      	b.n	8002d16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d00:	f7fe f8b0 	bl	8000e64 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e04f      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d16:	4b2b      	ldr	r3, [pc, #172]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 020c 	and.w	r2, r3, #12
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d1eb      	bne.n	8002d00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d28:	4b25      	ldr	r3, [pc, #148]	; (8002dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 030f 	and.w	r3, r3, #15
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d20c      	bcs.n	8002d50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d36:	4b22      	ldr	r3, [pc, #136]	; (8002dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3e:	4b20      	ldr	r3, [pc, #128]	; (8002dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d001      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e032      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d008      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d5c:	4b19      	ldr	r3, [pc, #100]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	4916      	ldr	r1, [pc, #88]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d009      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d7a:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	490e      	ldr	r1, [pc, #56]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d8e:	f000 f821 	bl	8002dd4 <HAL_RCC_GetSysClockFreq>
 8002d92:	4602      	mov	r2, r0
 8002d94:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	091b      	lsrs	r3, r3, #4
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	490a      	ldr	r1, [pc, #40]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002da0:	5ccb      	ldrb	r3, [r1, r3]
 8002da2:	fa22 f303 	lsr.w	r3, r2, r3
 8002da6:	4a09      	ldr	r2, [pc, #36]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002daa:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fe f814 	bl	8000ddc <HAL_InitTick>

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40023c00 	.word	0x40023c00
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	08004850 	.word	0x08004850
 8002dcc:	20000000 	.word	0x20000000
 8002dd0:	20000004 	.word	0x20000004

08002dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dd8:	b094      	sub	sp, #80	; 0x50
 8002dda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	647b      	str	r3, [r7, #68]	; 0x44
 8002de0:	2300      	movs	r3, #0
 8002de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002de4:	2300      	movs	r3, #0
 8002de6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dec:	4b79      	ldr	r3, [pc, #484]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 030c 	and.w	r3, r3, #12
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d00d      	beq.n	8002e14 <HAL_RCC_GetSysClockFreq+0x40>
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	f200 80e1 	bhi.w	8002fc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d002      	beq.n	8002e08 <HAL_RCC_GetSysClockFreq+0x34>
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d003      	beq.n	8002e0e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e06:	e0db      	b.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e08:	4b73      	ldr	r3, [pc, #460]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e0a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e0c:	e0db      	b.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e0e:	4b73      	ldr	r3, [pc, #460]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x208>)
 8002e10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e12:	e0d8      	b.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e14:	4b6f      	ldr	r3, [pc, #444]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e1c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e1e:	4b6d      	ldr	r3, [pc, #436]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d063      	beq.n	8002ef2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e2a:	4b6a      	ldr	r3, [pc, #424]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	099b      	lsrs	r3, r3, #6
 8002e30:	2200      	movs	r2, #0
 8002e32:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e3c:	633b      	str	r3, [r7, #48]	; 0x30
 8002e3e:	2300      	movs	r3, #0
 8002e40:	637b      	str	r3, [r7, #52]	; 0x34
 8002e42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e46:	4622      	mov	r2, r4
 8002e48:	462b      	mov	r3, r5
 8002e4a:	f04f 0000 	mov.w	r0, #0
 8002e4e:	f04f 0100 	mov.w	r1, #0
 8002e52:	0159      	lsls	r1, r3, #5
 8002e54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e58:	0150      	lsls	r0, r2, #5
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4621      	mov	r1, r4
 8002e60:	1a51      	subs	r1, r2, r1
 8002e62:	6139      	str	r1, [r7, #16]
 8002e64:	4629      	mov	r1, r5
 8002e66:	eb63 0301 	sbc.w	r3, r3, r1
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	f04f 0300 	mov.w	r3, #0
 8002e74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e78:	4659      	mov	r1, fp
 8002e7a:	018b      	lsls	r3, r1, #6
 8002e7c:	4651      	mov	r1, sl
 8002e7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e82:	4651      	mov	r1, sl
 8002e84:	018a      	lsls	r2, r1, #6
 8002e86:	4651      	mov	r1, sl
 8002e88:	ebb2 0801 	subs.w	r8, r2, r1
 8002e8c:	4659      	mov	r1, fp
 8002e8e:	eb63 0901 	sbc.w	r9, r3, r1
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	f04f 0300 	mov.w	r3, #0
 8002e9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ea2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ea6:	4690      	mov	r8, r2
 8002ea8:	4699      	mov	r9, r3
 8002eaa:	4623      	mov	r3, r4
 8002eac:	eb18 0303 	adds.w	r3, r8, r3
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	462b      	mov	r3, r5
 8002eb4:	eb49 0303 	adc.w	r3, r9, r3
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	f04f 0300 	mov.w	r3, #0
 8002ec2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ec6:	4629      	mov	r1, r5
 8002ec8:	024b      	lsls	r3, r1, #9
 8002eca:	4621      	mov	r1, r4
 8002ecc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ed0:	4621      	mov	r1, r4
 8002ed2:	024a      	lsls	r2, r1, #9
 8002ed4:	4610      	mov	r0, r2
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eda:	2200      	movs	r2, #0
 8002edc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ede:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ee0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ee4:	f7fd f9e2 	bl	80002ac <__aeabi_uldivmod>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	4613      	mov	r3, r2
 8002eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ef0:	e058      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ef2:	4b38      	ldr	r3, [pc, #224]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	099b      	lsrs	r3, r3, #6
 8002ef8:	2200      	movs	r2, #0
 8002efa:	4618      	mov	r0, r3
 8002efc:	4611      	mov	r1, r2
 8002efe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f02:	623b      	str	r3, [r7, #32]
 8002f04:	2300      	movs	r3, #0
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
 8002f08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f0c:	4642      	mov	r2, r8
 8002f0e:	464b      	mov	r3, r9
 8002f10:	f04f 0000 	mov.w	r0, #0
 8002f14:	f04f 0100 	mov.w	r1, #0
 8002f18:	0159      	lsls	r1, r3, #5
 8002f1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f1e:	0150      	lsls	r0, r2, #5
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4641      	mov	r1, r8
 8002f26:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f2a:	4649      	mov	r1, r9
 8002f2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	f04f 0300 	mov.w	r3, #0
 8002f38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f44:	ebb2 040a 	subs.w	r4, r2, sl
 8002f48:	eb63 050b 	sbc.w	r5, r3, fp
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	00eb      	lsls	r3, r5, #3
 8002f56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f5a:	00e2      	lsls	r2, r4, #3
 8002f5c:	4614      	mov	r4, r2
 8002f5e:	461d      	mov	r5, r3
 8002f60:	4643      	mov	r3, r8
 8002f62:	18e3      	adds	r3, r4, r3
 8002f64:	603b      	str	r3, [r7, #0]
 8002f66:	464b      	mov	r3, r9
 8002f68:	eb45 0303 	adc.w	r3, r5, r3
 8002f6c:	607b      	str	r3, [r7, #4]
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f7a:	4629      	mov	r1, r5
 8002f7c:	028b      	lsls	r3, r1, #10
 8002f7e:	4621      	mov	r1, r4
 8002f80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f84:	4621      	mov	r1, r4
 8002f86:	028a      	lsls	r2, r1, #10
 8002f88:	4610      	mov	r0, r2
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f8e:	2200      	movs	r2, #0
 8002f90:	61bb      	str	r3, [r7, #24]
 8002f92:	61fa      	str	r2, [r7, #28]
 8002f94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f98:	f7fd f988 	bl	80002ac <__aeabi_uldivmod>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	0c1b      	lsrs	r3, r3, #16
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	3301      	adds	r3, #1
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002fb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fbe:	e002      	b.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fc0:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fc2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3750      	adds	r7, #80	; 0x50
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	00f42400 	.word	0x00f42400
 8002fdc:	007a1200 	.word	0x007a1200

08002fe0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e041      	b.n	8003076 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7fd fe20 	bl	8000c4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3304      	adds	r3, #4
 800301c:	4619      	mov	r1, r3
 800301e:	4610      	mov	r0, r2
 8003020:	f000 f8f4 	bl	800320c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b084      	sub	sp, #16
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
 8003086:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003092:	2b01      	cmp	r3, #1
 8003094:	d101      	bne.n	800309a <HAL_TIM_ConfigClockSource+0x1c>
 8003096:	2302      	movs	r3, #2
 8003098:	e0b4      	b.n	8003204 <HAL_TIM_ConfigClockSource+0x186>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2202      	movs	r2, #2
 80030a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030b8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030c0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030d2:	d03e      	beq.n	8003152 <HAL_TIM_ConfigClockSource+0xd4>
 80030d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030d8:	f200 8087 	bhi.w	80031ea <HAL_TIM_ConfigClockSource+0x16c>
 80030dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e0:	f000 8086 	beq.w	80031f0 <HAL_TIM_ConfigClockSource+0x172>
 80030e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e8:	d87f      	bhi.n	80031ea <HAL_TIM_ConfigClockSource+0x16c>
 80030ea:	2b70      	cmp	r3, #112	; 0x70
 80030ec:	d01a      	beq.n	8003124 <HAL_TIM_ConfigClockSource+0xa6>
 80030ee:	2b70      	cmp	r3, #112	; 0x70
 80030f0:	d87b      	bhi.n	80031ea <HAL_TIM_ConfigClockSource+0x16c>
 80030f2:	2b60      	cmp	r3, #96	; 0x60
 80030f4:	d050      	beq.n	8003198 <HAL_TIM_ConfigClockSource+0x11a>
 80030f6:	2b60      	cmp	r3, #96	; 0x60
 80030f8:	d877      	bhi.n	80031ea <HAL_TIM_ConfigClockSource+0x16c>
 80030fa:	2b50      	cmp	r3, #80	; 0x50
 80030fc:	d03c      	beq.n	8003178 <HAL_TIM_ConfigClockSource+0xfa>
 80030fe:	2b50      	cmp	r3, #80	; 0x50
 8003100:	d873      	bhi.n	80031ea <HAL_TIM_ConfigClockSource+0x16c>
 8003102:	2b40      	cmp	r3, #64	; 0x40
 8003104:	d058      	beq.n	80031b8 <HAL_TIM_ConfigClockSource+0x13a>
 8003106:	2b40      	cmp	r3, #64	; 0x40
 8003108:	d86f      	bhi.n	80031ea <HAL_TIM_ConfigClockSource+0x16c>
 800310a:	2b30      	cmp	r3, #48	; 0x30
 800310c:	d064      	beq.n	80031d8 <HAL_TIM_ConfigClockSource+0x15a>
 800310e:	2b30      	cmp	r3, #48	; 0x30
 8003110:	d86b      	bhi.n	80031ea <HAL_TIM_ConfigClockSource+0x16c>
 8003112:	2b20      	cmp	r3, #32
 8003114:	d060      	beq.n	80031d8 <HAL_TIM_ConfigClockSource+0x15a>
 8003116:	2b20      	cmp	r3, #32
 8003118:	d867      	bhi.n	80031ea <HAL_TIM_ConfigClockSource+0x16c>
 800311a:	2b00      	cmp	r3, #0
 800311c:	d05c      	beq.n	80031d8 <HAL_TIM_ConfigClockSource+0x15a>
 800311e:	2b10      	cmp	r3, #16
 8003120:	d05a      	beq.n	80031d8 <HAL_TIM_ConfigClockSource+0x15a>
 8003122:	e062      	b.n	80031ea <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003134:	f000 f990 	bl	8003458 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003146:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	609a      	str	r2, [r3, #8]
      break;
 8003150:	e04f      	b.n	80031f2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003162:	f000 f979 	bl	8003458 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003174:	609a      	str	r2, [r3, #8]
      break;
 8003176:	e03c      	b.n	80031f2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003184:	461a      	mov	r2, r3
 8003186:	f000 f8ed 	bl	8003364 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2150      	movs	r1, #80	; 0x50
 8003190:	4618      	mov	r0, r3
 8003192:	f000 f946 	bl	8003422 <TIM_ITRx_SetConfig>
      break;
 8003196:	e02c      	b.n	80031f2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031a4:	461a      	mov	r2, r3
 80031a6:	f000 f90c 	bl	80033c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2160      	movs	r1, #96	; 0x60
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 f936 	bl	8003422 <TIM_ITRx_SetConfig>
      break;
 80031b6:	e01c      	b.n	80031f2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031c4:	461a      	mov	r2, r3
 80031c6:	f000 f8cd 	bl	8003364 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2140      	movs	r1, #64	; 0x40
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 f926 	bl	8003422 <TIM_ITRx_SetConfig>
      break;
 80031d6:	e00c      	b.n	80031f2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4619      	mov	r1, r3
 80031e2:	4610      	mov	r0, r2
 80031e4:	f000 f91d 	bl	8003422 <TIM_ITRx_SetConfig>
      break;
 80031e8:	e003      	b.n	80031f2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	73fb      	strb	r3, [r7, #15]
      break;
 80031ee:	e000      	b.n	80031f2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003202:	7bfb      	ldrb	r3, [r7, #15]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a46      	ldr	r2, [pc, #280]	; (8003338 <TIM_Base_SetConfig+0x12c>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d013      	beq.n	800324c <TIM_Base_SetConfig+0x40>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800322a:	d00f      	beq.n	800324c <TIM_Base_SetConfig+0x40>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a43      	ldr	r2, [pc, #268]	; (800333c <TIM_Base_SetConfig+0x130>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d00b      	beq.n	800324c <TIM_Base_SetConfig+0x40>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a42      	ldr	r2, [pc, #264]	; (8003340 <TIM_Base_SetConfig+0x134>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d007      	beq.n	800324c <TIM_Base_SetConfig+0x40>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a41      	ldr	r2, [pc, #260]	; (8003344 <TIM_Base_SetConfig+0x138>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d003      	beq.n	800324c <TIM_Base_SetConfig+0x40>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a40      	ldr	r2, [pc, #256]	; (8003348 <TIM_Base_SetConfig+0x13c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d108      	bne.n	800325e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003252:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	4313      	orrs	r3, r2
 800325c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a35      	ldr	r2, [pc, #212]	; (8003338 <TIM_Base_SetConfig+0x12c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d02b      	beq.n	80032be <TIM_Base_SetConfig+0xb2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326c:	d027      	beq.n	80032be <TIM_Base_SetConfig+0xb2>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a32      	ldr	r2, [pc, #200]	; (800333c <TIM_Base_SetConfig+0x130>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d023      	beq.n	80032be <TIM_Base_SetConfig+0xb2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a31      	ldr	r2, [pc, #196]	; (8003340 <TIM_Base_SetConfig+0x134>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d01f      	beq.n	80032be <TIM_Base_SetConfig+0xb2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a30      	ldr	r2, [pc, #192]	; (8003344 <TIM_Base_SetConfig+0x138>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d01b      	beq.n	80032be <TIM_Base_SetConfig+0xb2>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a2f      	ldr	r2, [pc, #188]	; (8003348 <TIM_Base_SetConfig+0x13c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d017      	beq.n	80032be <TIM_Base_SetConfig+0xb2>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a2e      	ldr	r2, [pc, #184]	; (800334c <TIM_Base_SetConfig+0x140>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d013      	beq.n	80032be <TIM_Base_SetConfig+0xb2>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a2d      	ldr	r2, [pc, #180]	; (8003350 <TIM_Base_SetConfig+0x144>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d00f      	beq.n	80032be <TIM_Base_SetConfig+0xb2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a2c      	ldr	r2, [pc, #176]	; (8003354 <TIM_Base_SetConfig+0x148>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d00b      	beq.n	80032be <TIM_Base_SetConfig+0xb2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a2b      	ldr	r2, [pc, #172]	; (8003358 <TIM_Base_SetConfig+0x14c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d007      	beq.n	80032be <TIM_Base_SetConfig+0xb2>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a2a      	ldr	r2, [pc, #168]	; (800335c <TIM_Base_SetConfig+0x150>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d003      	beq.n	80032be <TIM_Base_SetConfig+0xb2>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a29      	ldr	r2, [pc, #164]	; (8003360 <TIM_Base_SetConfig+0x154>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d108      	bne.n	80032d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	4313      	orrs	r3, r2
 80032dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a10      	ldr	r2, [pc, #64]	; (8003338 <TIM_Base_SetConfig+0x12c>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d003      	beq.n	8003304 <TIM_Base_SetConfig+0xf8>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a12      	ldr	r2, [pc, #72]	; (8003348 <TIM_Base_SetConfig+0x13c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d103      	bne.n	800330c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b01      	cmp	r3, #1
 800331c:	d105      	bne.n	800332a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	f023 0201 	bic.w	r2, r3, #1
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	611a      	str	r2, [r3, #16]
  }
}
 800332a:	bf00      	nop
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	40010000 	.word	0x40010000
 800333c:	40000400 	.word	0x40000400
 8003340:	40000800 	.word	0x40000800
 8003344:	40000c00 	.word	0x40000c00
 8003348:	40010400 	.word	0x40010400
 800334c:	40014000 	.word	0x40014000
 8003350:	40014400 	.word	0x40014400
 8003354:	40014800 	.word	0x40014800
 8003358:	40001800 	.word	0x40001800
 800335c:	40001c00 	.word	0x40001c00
 8003360:	40002000 	.word	0x40002000

08003364 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	f023 0201 	bic.w	r2, r3, #1
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800338e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4313      	orrs	r3, r2
 8003398:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f023 030a 	bic.w	r3, r3, #10
 80033a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	621a      	str	r2, [r3, #32]
}
 80033b6:	bf00      	nop
 80033b8:	371c      	adds	r7, #28
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b087      	sub	sp, #28
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	f023 0210 	bic.w	r2, r3, #16
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	031b      	lsls	r3, r3, #12
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	4313      	orrs	r3, r2
 8003408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	621a      	str	r2, [r3, #32]
}
 8003416:	bf00      	nop
 8003418:	371c      	adds	r7, #28
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003422:	b480      	push	{r7}
 8003424:	b085      	sub	sp, #20
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
 800342a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003438:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4313      	orrs	r3, r2
 8003440:	f043 0307 	orr.w	r3, r3, #7
 8003444:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	609a      	str	r2, [r3, #8]
}
 800344c:	bf00      	nop
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003458:	b480      	push	{r7}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003472:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	021a      	lsls	r2, r3, #8
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	431a      	orrs	r2, r3
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	4313      	orrs	r3, r2
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	4313      	orrs	r3, r2
 8003484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	609a      	str	r2, [r3, #8]
}
 800348c:	bf00      	nop
 800348e:	371c      	adds	r7, #28
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e05a      	b.n	8003566 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	4313      	orrs	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a21      	ldr	r2, [pc, #132]	; (8003574 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d022      	beq.n	800353a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034fc:	d01d      	beq.n	800353a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a1d      	ldr	r2, [pc, #116]	; (8003578 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d018      	beq.n	800353a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a1b      	ldr	r2, [pc, #108]	; (800357c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d013      	beq.n	800353a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a1a      	ldr	r2, [pc, #104]	; (8003580 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d00e      	beq.n	800353a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a18      	ldr	r2, [pc, #96]	; (8003584 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d009      	beq.n	800353a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a17      	ldr	r2, [pc, #92]	; (8003588 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d004      	beq.n	800353a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a15      	ldr	r2, [pc, #84]	; (800358c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d10c      	bne.n	8003554 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003540:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	4313      	orrs	r3, r2
 800354a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	40010000 	.word	0x40010000
 8003578:	40000400 	.word	0x40000400
 800357c:	40000800 	.word	0x40000800
 8003580:	40000c00 	.word	0x40000c00
 8003584:	40010400 	.word	0x40010400
 8003588:	40014000 	.word	0x40014000
 800358c:	40001800 	.word	0x40001800

08003590 <arm_rfft_fast_init_f32>:
 8003590:	084b      	lsrs	r3, r1, #1
 8003592:	2b80      	cmp	r3, #128	; 0x80
 8003594:	b410      	push	{r4}
 8003596:	8201      	strh	r1, [r0, #16]
 8003598:	8003      	strh	r3, [r0, #0]
 800359a:	d047      	beq.n	800362c <arm_rfft_fast_init_f32+0x9c>
 800359c:	d917      	bls.n	80035ce <arm_rfft_fast_init_f32+0x3e>
 800359e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035a2:	d03d      	beq.n	8003620 <arm_rfft_fast_init_f32+0x90>
 80035a4:	d929      	bls.n	80035fa <arm_rfft_fast_init_f32+0x6a>
 80035a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035aa:	d020      	beq.n	80035ee <arm_rfft_fast_init_f32+0x5e>
 80035ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035b0:	d113      	bne.n	80035da <arm_rfft_fast_init_f32+0x4a>
 80035b2:	4921      	ldr	r1, [pc, #132]	; (8003638 <arm_rfft_fast_init_f32+0xa8>)
 80035b4:	4a21      	ldr	r2, [pc, #132]	; (800363c <arm_rfft_fast_init_f32+0xac>)
 80035b6:	4b22      	ldr	r3, [pc, #136]	; (8003640 <arm_rfft_fast_init_f32+0xb0>)
 80035b8:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 80035bc:	8184      	strh	r4, [r0, #12]
 80035be:	6081      	str	r1, [r0, #8]
 80035c0:	6042      	str	r2, [r0, #4]
 80035c2:	6143      	str	r3, [r0, #20]
 80035c4:	2000      	movs	r0, #0
 80035c6:	b240      	sxtb	r0, r0
 80035c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	2b20      	cmp	r3, #32
 80035d0:	d01c      	beq.n	800360c <arm_rfft_fast_init_f32+0x7c>
 80035d2:	2b40      	cmp	r3, #64	; 0x40
 80035d4:	d006      	beq.n	80035e4 <arm_rfft_fast_init_f32+0x54>
 80035d6:	2b10      	cmp	r3, #16
 80035d8:	d01d      	beq.n	8003616 <arm_rfft_fast_init_f32+0x86>
 80035da:	20ff      	movs	r0, #255	; 0xff
 80035dc:	b240      	sxtb	r0, r0
 80035de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	2438      	movs	r4, #56	; 0x38
 80035e6:	4917      	ldr	r1, [pc, #92]	; (8003644 <arm_rfft_fast_init_f32+0xb4>)
 80035e8:	4a17      	ldr	r2, [pc, #92]	; (8003648 <arm_rfft_fast_init_f32+0xb8>)
 80035ea:	4b18      	ldr	r3, [pc, #96]	; (800364c <arm_rfft_fast_init_f32+0xbc>)
 80035ec:	e7e6      	b.n	80035bc <arm_rfft_fast_init_f32+0x2c>
 80035ee:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 80035f2:	4917      	ldr	r1, [pc, #92]	; (8003650 <arm_rfft_fast_init_f32+0xc0>)
 80035f4:	4a17      	ldr	r2, [pc, #92]	; (8003654 <arm_rfft_fast_init_f32+0xc4>)
 80035f6:	4b18      	ldr	r3, [pc, #96]	; (8003658 <arm_rfft_fast_init_f32+0xc8>)
 80035f8:	e7e0      	b.n	80035bc <arm_rfft_fast_init_f32+0x2c>
 80035fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035fe:	d1ec      	bne.n	80035da <arm_rfft_fast_init_f32+0x4a>
 8003600:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8003604:	4915      	ldr	r1, [pc, #84]	; (800365c <arm_rfft_fast_init_f32+0xcc>)
 8003606:	4a16      	ldr	r2, [pc, #88]	; (8003660 <arm_rfft_fast_init_f32+0xd0>)
 8003608:	4b16      	ldr	r3, [pc, #88]	; (8003664 <arm_rfft_fast_init_f32+0xd4>)
 800360a:	e7d7      	b.n	80035bc <arm_rfft_fast_init_f32+0x2c>
 800360c:	2430      	movs	r4, #48	; 0x30
 800360e:	4916      	ldr	r1, [pc, #88]	; (8003668 <arm_rfft_fast_init_f32+0xd8>)
 8003610:	4a16      	ldr	r2, [pc, #88]	; (800366c <arm_rfft_fast_init_f32+0xdc>)
 8003612:	4b17      	ldr	r3, [pc, #92]	; (8003670 <arm_rfft_fast_init_f32+0xe0>)
 8003614:	e7d2      	b.n	80035bc <arm_rfft_fast_init_f32+0x2c>
 8003616:	2414      	movs	r4, #20
 8003618:	4916      	ldr	r1, [pc, #88]	; (8003674 <arm_rfft_fast_init_f32+0xe4>)
 800361a:	4a17      	ldr	r2, [pc, #92]	; (8003678 <arm_rfft_fast_init_f32+0xe8>)
 800361c:	4b17      	ldr	r3, [pc, #92]	; (800367c <arm_rfft_fast_init_f32+0xec>)
 800361e:	e7cd      	b.n	80035bc <arm_rfft_fast_init_f32+0x2c>
 8003620:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8003624:	4916      	ldr	r1, [pc, #88]	; (8003680 <arm_rfft_fast_init_f32+0xf0>)
 8003626:	4a17      	ldr	r2, [pc, #92]	; (8003684 <arm_rfft_fast_init_f32+0xf4>)
 8003628:	4b17      	ldr	r3, [pc, #92]	; (8003688 <arm_rfft_fast_init_f32+0xf8>)
 800362a:	e7c7      	b.n	80035bc <arm_rfft_fast_init_f32+0x2c>
 800362c:	24d0      	movs	r4, #208	; 0xd0
 800362e:	4917      	ldr	r1, [pc, #92]	; (800368c <arm_rfft_fast_init_f32+0xfc>)
 8003630:	4a17      	ldr	r2, [pc, #92]	; (8003690 <arm_rfft_fast_init_f32+0x100>)
 8003632:	4b18      	ldr	r3, [pc, #96]	; (8003694 <arm_rfft_fast_init_f32+0x104>)
 8003634:	e7c2      	b.n	80035bc <arm_rfft_fast_init_f32+0x2c>
 8003636:	bf00      	nop
 8003638:	08013e74 	.word	0x08013e74
 800363c:	08004868 	.word	0x08004868
 8003640:	0800a9d8 	.word	0x0800a9d8
 8003644:	08008968 	.word	0x08008968
 8003648:	08015c34 	.word	0x08015c34
 800364c:	08018124 	.word	0x08018124
 8003650:	08011358 	.word	0x08011358
 8003654:	0800f258 	.word	0x0800f258
 8003658:	080089d8 	.word	0x080089d8
 800365c:	08017db4 	.word	0x08017db4
 8003660:	0800e9d8 	.word	0x0800e9d8
 8003664:	08015e34 	.word	0x08015e34
 8003668:	08012210 	.word	0x08012210
 800366c:	08011258 	.word	0x08011258
 8003670:	08008868 	.word	0x08008868
 8003674:	08012168 	.word	0x08012168
 8003678:	0800f1d8 	.word	0x0800f1d8
 800367c:	08012190 	.word	0x08012190
 8003680:	08016634 	.word	0x08016634
 8003684:	08012e74 	.word	0x08012e74
 8003688:	080169b4 	.word	0x080169b4
 800368c:	08018324 	.word	0x08018324
 8003690:	08012a74 	.word	0x08012a74
 8003694:	080179b4 	.word	0x080179b4

08003698 <arm_rfft_fast_f32>:
 8003698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800369c:	8a06      	ldrh	r6, [r0, #16]
 800369e:	0876      	lsrs	r6, r6, #1
 80036a0:	4607      	mov	r7, r0
 80036a2:	4615      	mov	r5, r2
 80036a4:	8006      	strh	r6, [r0, #0]
 80036a6:	460c      	mov	r4, r1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d15c      	bne.n	8003766 <arm_rfft_fast_f32+0xce>
 80036ac:	461a      	mov	r2, r3
 80036ae:	2301      	movs	r3, #1
 80036b0:	f000 fbe6 	bl	8003e80 <arm_cfft_f32>
 80036b4:	edd4 7a00 	vldr	s15, [r4]
 80036b8:	ed94 7a01 	vldr	s14, [r4, #4]
 80036bc:	883e      	ldrh	r6, [r7, #0]
 80036be:	6978      	ldr	r0, [r7, #20]
 80036c0:	ee37 7a07 	vadd.f32	s14, s14, s14
 80036c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80036c8:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 80036cc:	ee77 6a87 	vadd.f32	s13, s15, s14
 80036d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036d4:	3e01      	subs	r6, #1
 80036d6:	ee26 7aa3 	vmul.f32	s14, s13, s7
 80036da:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80036de:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80036e2:	ed85 7a00 	vstr	s14, [r5]
 80036e6:	edc5 7a01 	vstr	s15, [r5, #4]
 80036ea:	3010      	adds	r0, #16
 80036ec:	f105 0210 	add.w	r2, r5, #16
 80036f0:	3b08      	subs	r3, #8
 80036f2:	f104 0110 	add.w	r1, r4, #16
 80036f6:	ed51 4a02 	vldr	s9, [r1, #-8]
 80036fa:	ed93 5a02 	vldr	s10, [r3, #8]
 80036fe:	ed11 7a01 	vldr	s14, [r1, #-4]
 8003702:	ed10 6a02 	vldr	s12, [r0, #-8]
 8003706:	edd3 5a03 	vldr	s11, [r3, #12]
 800370a:	ed50 6a01 	vldr	s13, [r0, #-4]
 800370e:	ee75 7a64 	vsub.f32	s15, s10, s9
 8003712:	ee35 4a87 	vadd.f32	s8, s11, s14
 8003716:	ee35 5a24 	vadd.f32	s10, s10, s9
 800371a:	ee77 5a65 	vsub.f32	s11, s14, s11
 800371e:	ee66 4a27 	vmul.f32	s9, s12, s15
 8003722:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8003726:	ee34 5a85 	vadd.f32	s10, s9, s10
 800372a:	ee26 6a04 	vmul.f32	s12, s12, s8
 800372e:	ee66 6a84 	vmul.f32	s13, s13, s8
 8003732:	ee77 7a25 	vadd.f32	s15, s14, s11
 8003736:	ee76 6a85 	vadd.f32	s13, s13, s10
 800373a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800373e:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8003742:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8003746:	3e01      	subs	r6, #1
 8003748:	ed42 6a02 	vstr	s13, [r2, #-8]
 800374c:	ed42 7a01 	vstr	s15, [r2, #-4]
 8003750:	f1a3 0308 	sub.w	r3, r3, #8
 8003754:	f101 0108 	add.w	r1, r1, #8
 8003758:	f100 0008 	add.w	r0, r0, #8
 800375c:	f102 0208 	add.w	r2, r2, #8
 8003760:	d1c9      	bne.n	80036f6 <arm_rfft_fast_f32+0x5e>
 8003762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003766:	edd1 7a00 	vldr	s15, [r1]
 800376a:	edd1 6a01 	vldr	s13, [r1, #4]
 800376e:	6941      	ldr	r1, [r0, #20]
 8003770:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003774:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003778:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800377c:	ee27 7a23 	vmul.f32	s14, s14, s7
 8003780:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8003784:	3e01      	subs	r6, #1
 8003786:	ed82 7a00 	vstr	s14, [r2]
 800378a:	edc2 7a01 	vstr	s15, [r2, #4]
 800378e:	00f0      	lsls	r0, r6, #3
 8003790:	b3ee      	cbz	r6, 800380e <arm_rfft_fast_f32+0x176>
 8003792:	3808      	subs	r0, #8
 8003794:	f101 0e10 	add.w	lr, r1, #16
 8003798:	4420      	add	r0, r4
 800379a:	f104 0110 	add.w	r1, r4, #16
 800379e:	f102 0c10 	add.w	ip, r2, #16
 80037a2:	ed90 7a02 	vldr	s14, [r0, #8]
 80037a6:	ed51 6a02 	vldr	s13, [r1, #-8]
 80037aa:	ed1e 6a02 	vldr	s12, [lr, #-8]
 80037ae:	ed90 4a03 	vldr	s8, [r0, #12]
 80037b2:	ed11 5a01 	vldr	s10, [r1, #-4]
 80037b6:	ed5e 5a01 	vldr	s11, [lr, #-4]
 80037ba:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80037be:	ee74 4a05 	vadd.f32	s9, s8, s10
 80037c2:	ee26 3a27 	vmul.f32	s6, s12, s15
 80037c6:	ee77 6a26 	vadd.f32	s13, s14, s13
 80037ca:	ee35 5a44 	vsub.f32	s10, s10, s8
 80037ce:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80037d2:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80037d6:	ee77 7a05 	vadd.f32	s15, s14, s10
 80037da:	ee26 6a24 	vmul.f32	s12, s12, s9
 80037de:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80037e2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80037e6:	ee36 7ae5 	vsub.f32	s14, s13, s11
 80037ea:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80037ee:	ee27 7a23 	vmul.f32	s14, s14, s7
 80037f2:	3e01      	subs	r6, #1
 80037f4:	ed0c 7a02 	vstr	s14, [ip, #-8]
 80037f8:	ed4c 7a01 	vstr	s15, [ip, #-4]
 80037fc:	f1a0 0008 	sub.w	r0, r0, #8
 8003800:	f101 0108 	add.w	r1, r1, #8
 8003804:	f10e 0e08 	add.w	lr, lr, #8
 8003808:	f10c 0c08 	add.w	ip, ip, #8
 800380c:	d1c9      	bne.n	80037a2 <arm_rfft_fast_f32+0x10a>
 800380e:	4638      	mov	r0, r7
 8003810:	4629      	mov	r1, r5
 8003812:	461a      	mov	r2, r3
 8003814:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003818:	2301      	movs	r3, #1
 800381a:	f000 bb31 	b.w	8003e80 <arm_cfft_f32>
 800381e:	bf00      	nop

08003820 <arm_cfft_radix8by2_f32>:
 8003820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003824:	ed2d 8b08 	vpush	{d8-d11}
 8003828:	f8b0 e000 	ldrh.w	lr, [r0]
 800382c:	6842      	ldr	r2, [r0, #4]
 800382e:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8003832:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8003836:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800383a:	4607      	mov	r7, r0
 800383c:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8003840:	f000 80af 	beq.w	80039a2 <arm_cfft_radix8by2_f32+0x182>
 8003844:	3310      	adds	r3, #16
 8003846:	18ce      	adds	r6, r1, r3
 8003848:	3210      	adds	r2, #16
 800384a:	4443      	add	r3, r8
 800384c:	f101 0510 	add.w	r5, r1, #16
 8003850:	f108 0410 	add.w	r4, r8, #16
 8003854:	ed54 1a04 	vldr	s3, [r4, #-16]
 8003858:	ed13 4a04 	vldr	s8, [r3, #-16]
 800385c:	ed53 3a03 	vldr	s7, [r3, #-12]
 8003860:	ed53 5a02 	vldr	s11, [r3, #-8]
 8003864:	ed13 5a01 	vldr	s10, [r3, #-4]
 8003868:	ed54 6a03 	vldr	s13, [r4, #-12]
 800386c:	ed14 0a02 	vldr	s0, [r4, #-8]
 8003870:	ed16 2a04 	vldr	s4, [r6, #-16]
 8003874:	ed56 2a03 	vldr	s5, [r6, #-12]
 8003878:	ed15 6a03 	vldr	s12, [r5, #-12]
 800387c:	ed15 7a01 	vldr	s14, [r5, #-4]
 8003880:	ed15 3a04 	vldr	s6, [r5, #-16]
 8003884:	ed54 7a01 	vldr	s15, [r4, #-4]
 8003888:	ed56 0a02 	vldr	s1, [r6, #-8]
 800388c:	ed16 1a01 	vldr	s2, [r6, #-4]
 8003890:	ed55 4a02 	vldr	s9, [r5, #-8]
 8003894:	ee73 ba21 	vadd.f32	s23, s6, s3
 8003898:	ee36 ba26 	vadd.f32	s22, s12, s13
 800389c:	ee37 aa27 	vadd.f32	s20, s14, s15
 80038a0:	ee72 9a04 	vadd.f32	s19, s4, s8
 80038a4:	ee32 9aa3 	vadd.f32	s18, s5, s7
 80038a8:	ee31 8a05 	vadd.f32	s16, s2, s10
 80038ac:	ee74 aa80 	vadd.f32	s21, s9, s0
 80038b0:	ee70 8aa5 	vadd.f32	s17, s1, s11
 80038b4:	ed45 ba04 	vstr	s23, [r5, #-16]
 80038b8:	ed05 ba03 	vstr	s22, [r5, #-12]
 80038bc:	ed45 aa02 	vstr	s21, [r5, #-8]
 80038c0:	ed05 aa01 	vstr	s20, [r5, #-4]
 80038c4:	ed06 8a01 	vstr	s16, [r6, #-4]
 80038c8:	ed46 9a04 	vstr	s19, [r6, #-16]
 80038cc:	ed06 9a03 	vstr	s18, [r6, #-12]
 80038d0:	ed46 8a02 	vstr	s17, [r6, #-8]
 80038d4:	ee76 6a66 	vsub.f32	s13, s12, s13
 80038d8:	ee73 3ae2 	vsub.f32	s7, s7, s5
 80038dc:	ed12 6a03 	vldr	s12, [r2, #-12]
 80038e0:	ed52 2a04 	vldr	s5, [r2, #-16]
 80038e4:	ee33 3a61 	vsub.f32	s6, s6, s3
 80038e8:	ee34 4a42 	vsub.f32	s8, s8, s4
 80038ec:	ee26 8a86 	vmul.f32	s16, s13, s12
 80038f0:	ee24 2a06 	vmul.f32	s4, s8, s12
 80038f4:	ee63 1a22 	vmul.f32	s3, s6, s5
 80038f8:	ee24 4a22 	vmul.f32	s8, s8, s5
 80038fc:	ee23 3a06 	vmul.f32	s6, s6, s12
 8003900:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8003904:	ee23 6a86 	vmul.f32	s12, s7, s12
 8003908:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800390c:	ee36 6a04 	vadd.f32	s12, s12, s8
 8003910:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8003914:	ee72 3a63 	vsub.f32	s7, s4, s7
 8003918:	ee71 2a88 	vadd.f32	s5, s3, s16
 800391c:	ed44 6a03 	vstr	s13, [r4, #-12]
 8003920:	ed44 2a04 	vstr	s5, [r4, #-16]
 8003924:	ed43 3a04 	vstr	s7, [r3, #-16]
 8003928:	ed03 6a03 	vstr	s12, [r3, #-12]
 800392c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003930:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8003934:	ed12 7a01 	vldr	s14, [r2, #-4]
 8003938:	ed52 5a02 	vldr	s11, [r2, #-8]
 800393c:	ee35 6a41 	vsub.f32	s12, s10, s2
 8003940:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8003944:	ee67 3a87 	vmul.f32	s7, s15, s14
 8003948:	ee26 5a87 	vmul.f32	s10, s13, s14
 800394c:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8003950:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003954:	ee64 4a87 	vmul.f32	s9, s9, s14
 8003958:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800395c:	ee26 7a07 	vmul.f32	s14, s12, s14
 8003960:	ee26 6a25 	vmul.f32	s12, s12, s11
 8003964:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8003968:	ee74 5a23 	vadd.f32	s11, s8, s7
 800396c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8003970:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003974:	f1be 0e01 	subs.w	lr, lr, #1
 8003978:	ed44 5a02 	vstr	s11, [r4, #-8]
 800397c:	f105 0510 	add.w	r5, r5, #16
 8003980:	ed44 7a01 	vstr	s15, [r4, #-4]
 8003984:	f106 0610 	add.w	r6, r6, #16
 8003988:	ed03 6a02 	vstr	s12, [r3, #-8]
 800398c:	ed03 7a01 	vstr	s14, [r3, #-4]
 8003990:	f102 0210 	add.w	r2, r2, #16
 8003994:	f104 0410 	add.w	r4, r4, #16
 8003998:	f103 0310 	add.w	r3, r3, #16
 800399c:	f47f af5a 	bne.w	8003854 <arm_cfft_radix8by2_f32+0x34>
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	fa1f f48c 	uxth.w	r4, ip
 80039a6:	4608      	mov	r0, r1
 80039a8:	2302      	movs	r3, #2
 80039aa:	4621      	mov	r1, r4
 80039ac:	f000 fc0e 	bl	80041cc <arm_radix8_butterfly_f32>
 80039b0:	ecbd 8b08 	vpop	{d8-d11}
 80039b4:	4640      	mov	r0, r8
 80039b6:	4621      	mov	r1, r4
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	2302      	movs	r3, #2
 80039bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039c0:	f000 bc04 	b.w	80041cc <arm_radix8_butterfly_f32>

080039c4 <arm_cfft_radix8by4_f32>:
 80039c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039c8:	ed2d 8b0a 	vpush	{d8-d12}
 80039cc:	8802      	ldrh	r2, [r0, #0]
 80039ce:	ed91 6a00 	vldr	s12, [r1]
 80039d2:	b08f      	sub	sp, #60	; 0x3c
 80039d4:	460f      	mov	r7, r1
 80039d6:	0852      	lsrs	r2, r2, #1
 80039d8:	0093      	lsls	r3, r2, #2
 80039da:	900c      	str	r0, [sp, #48]	; 0x30
 80039dc:	9103      	str	r1, [sp, #12]
 80039de:	6841      	ldr	r1, [r0, #4]
 80039e0:	ed97 7a01 	vldr	s14, [r7, #4]
 80039e4:	4638      	mov	r0, r7
 80039e6:	4418      	add	r0, r3
 80039e8:	4606      	mov	r6, r0
 80039ea:	9009      	str	r0, [sp, #36]	; 0x24
 80039ec:	4418      	add	r0, r3
 80039ee:	edd0 6a00 	vldr	s13, [r0]
 80039f2:	edd6 3a00 	vldr	s7, [r6]
 80039f6:	edd6 2a01 	vldr	s5, [r6, #4]
 80039fa:	edd0 7a01 	vldr	s15, [r0, #4]
 80039fe:	900a      	str	r0, [sp, #40]	; 0x28
 8003a00:	ee76 5a26 	vadd.f32	s11, s12, s13
 8003a04:	4604      	mov	r4, r0
 8003a06:	4625      	mov	r5, r4
 8003a08:	441c      	add	r4, r3
 8003a0a:	ed94 4a00 	vldr	s8, [r4]
 8003a0e:	ed94 5a01 	vldr	s10, [r4, #4]
 8003a12:	9401      	str	r4, [sp, #4]
 8003a14:	ee75 4aa3 	vadd.f32	s9, s11, s7
 8003a18:	4630      	mov	r0, r6
 8003a1a:	ee74 4a24 	vadd.f32	s9, s8, s9
 8003a1e:	463e      	mov	r6, r7
 8003a20:	ee14 ea90 	vmov	lr, s9
 8003a24:	ee76 6a66 	vsub.f32	s13, s12, s13
 8003a28:	f846 eb08 	str.w	lr, [r6], #8
 8003a2c:	ee37 6a27 	vadd.f32	s12, s14, s15
 8003a30:	edd0 4a01 	vldr	s9, [r0, #4]
 8003a34:	9604      	str	r6, [sp, #16]
 8003a36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a3a:	9e01      	ldr	r6, [sp, #4]
 8003a3c:	ee32 3aa6 	vadd.f32	s6, s5, s13
 8003a40:	ed96 2a01 	vldr	s4, [r6, #4]
 8003a44:	ee36 7a24 	vadd.f32	s14, s12, s9
 8003a48:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8003a4c:	ee77 4ae3 	vsub.f32	s9, s15, s7
 8003a50:	ee36 6a62 	vsub.f32	s12, s12, s5
 8003a54:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8003a58:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8003a5c:	ee73 3a45 	vsub.f32	s7, s6, s10
 8003a60:	4604      	mov	r4, r0
 8003a62:	ee36 6a45 	vsub.f32	s12, s12, s10
 8003a66:	ee75 6a26 	vadd.f32	s13, s10, s13
 8003a6a:	46a3      	mov	fp, r4
 8003a6c:	ee37 7a02 	vadd.f32	s14, s14, s4
 8003a70:	ee34 5a84 	vadd.f32	s10, s9, s8
 8003a74:	ee13 8a90 	vmov	r8, s7
 8003a78:	46a4      	mov	ip, r4
 8003a7a:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8003a7e:	ed87 7a01 	vstr	s14, [r7, #4]
 8003a82:	f84b 8b08 	str.w	r8, [fp], #8
 8003a86:	f1ac 0704 	sub.w	r7, ip, #4
 8003a8a:	ed8c 5a01 	vstr	s10, [ip, #4]
 8003a8e:	f101 0c08 	add.w	ip, r1, #8
 8003a92:	462c      	mov	r4, r5
 8003a94:	f8cd c014 	str.w	ip, [sp, #20]
 8003a98:	ee15 ca90 	vmov	ip, s11
 8003a9c:	f844 cb08 	str.w	ip, [r4], #8
 8003aa0:	9407      	str	r4, [sp, #28]
 8003aa2:	f101 0410 	add.w	r4, r1, #16
 8003aa6:	ed85 6a01 	vstr	s12, [r5, #4]
 8003aaa:	0852      	lsrs	r2, r2, #1
 8003aac:	9402      	str	r4, [sp, #8]
 8003aae:	462c      	mov	r4, r5
 8003ab0:	f101 0518 	add.w	r5, r1, #24
 8003ab4:	920b      	str	r2, [sp, #44]	; 0x2c
 8003ab6:	46b2      	mov	sl, r6
 8003ab8:	9506      	str	r5, [sp, #24]
 8003aba:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8003abe:	3a02      	subs	r2, #2
 8003ac0:	ee16 5a90 	vmov	r5, s13
 8003ac4:	46b6      	mov	lr, r6
 8003ac6:	4630      	mov	r0, r6
 8003ac8:	0852      	lsrs	r2, r2, #1
 8003aca:	f84a 5b08 	str.w	r5, [sl], #8
 8003ace:	f1a0 0604 	sub.w	r6, r0, #4
 8003ad2:	edce 7a01 	vstr	s15, [lr, #4]
 8003ad6:	9208      	str	r2, [sp, #32]
 8003ad8:	f000 8130 	beq.w	8003d3c <arm_cfft_radix8by4_f32+0x378>
 8003adc:	4691      	mov	r9, r2
 8003ade:	9a03      	ldr	r2, [sp, #12]
 8003ae0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8003ae4:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8003ae8:	3b08      	subs	r3, #8
 8003aea:	f102 0510 	add.w	r5, r2, #16
 8003aee:	f101 0c20 	add.w	ip, r1, #32
 8003af2:	f1a4 020c 	sub.w	r2, r4, #12
 8003af6:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8003afa:	4433      	add	r3, r6
 8003afc:	3410      	adds	r4, #16
 8003afe:	4650      	mov	r0, sl
 8003b00:	4659      	mov	r1, fp
 8003b02:	ed55 3a02 	vldr	s7, [r5, #-8]
 8003b06:	ed14 5a02 	vldr	s10, [r4, #-8]
 8003b0a:	ed91 7a00 	vldr	s14, [r1]
 8003b0e:	edd0 7a00 	vldr	s15, [r0]
 8003b12:	ed15 4a01 	vldr	s8, [r5, #-4]
 8003b16:	ed54 5a01 	vldr	s11, [r4, #-4]
 8003b1a:	edd0 6a01 	vldr	s13, [r0, #4]
 8003b1e:	ed91 6a01 	vldr	s12, [r1, #4]
 8003b22:	ee33 8a85 	vadd.f32	s16, s7, s10
 8003b26:	ee34 0a25 	vadd.f32	s0, s8, s11
 8003b2a:	ee78 4a07 	vadd.f32	s9, s16, s14
 8003b2e:	ee74 5a65 	vsub.f32	s11, s8, s11
 8003b32:	ee77 4aa4 	vadd.f32	s9, s15, s9
 8003b36:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8003b3a:	ed45 4a02 	vstr	s9, [r5, #-8]
 8003b3e:	edd1 4a01 	vldr	s9, [r1, #4]
 8003b42:	ed90 4a01 	vldr	s8, [r0, #4]
 8003b46:	ee70 4a24 	vadd.f32	s9, s0, s9
 8003b4a:	ee76 aa05 	vadd.f32	s21, s12, s10
 8003b4e:	ee74 4a84 	vadd.f32	s9, s9, s8
 8003b52:	ee35 aac7 	vsub.f32	s20, s11, s14
 8003b56:	ed45 4a01 	vstr	s9, [r5, #-4]
 8003b5a:	edd6 1a00 	vldr	s3, [r6]
 8003b5e:	edd7 0a00 	vldr	s1, [r7]
 8003b62:	ed92 4a02 	vldr	s8, [r2, #8]
 8003b66:	edd3 3a02 	vldr	s7, [r3, #8]
 8003b6a:	ed93 2a01 	vldr	s4, [r3, #4]
 8003b6e:	ed16 1a01 	vldr	s2, [r6, #-4]
 8003b72:	edd2 2a01 	vldr	s5, [r2, #4]
 8003b76:	ed57 9a01 	vldr	s19, [r7, #-4]
 8003b7a:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8003b7e:	ee39 3a81 	vadd.f32	s6, s19, s2
 8003b82:	ee74 8a84 	vadd.f32	s17, s9, s8
 8003b86:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8003b8a:	ee73 8aa8 	vadd.f32	s17, s7, s17
 8003b8e:	ee7a aae6 	vsub.f32	s21, s21, s13
 8003b92:	ee18 aa90 	vmov	sl, s17
 8003b96:	f847 a908 	str.w	sl, [r7], #-8
 8003b9a:	edd2 8a01 	vldr	s17, [r2, #4]
 8003b9e:	ed93 9a01 	vldr	s18, [r3, #4]
 8003ba2:	ee73 8a28 	vadd.f32	s17, s6, s17
 8003ba6:	ee3a aa27 	vadd.f32	s20, s20, s15
 8003baa:	ee78 8a89 	vadd.f32	s17, s17, s18
 8003bae:	ee74 0a63 	vsub.f32	s1, s8, s7
 8003bb2:	edc7 8a01 	vstr	s17, [r7, #4]
 8003bb6:	ed18 ba02 	vldr	s22, [r8, #-8]
 8003bba:	ed58 8a01 	vldr	s17, [r8, #-4]
 8003bbe:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8003bc2:	ee6a ba28 	vmul.f32	s23, s20, s17
 8003bc6:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8003bca:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8003bce:	ee30 9a81 	vadd.f32	s18, s1, s2
 8003bd2:	ee79 9a82 	vadd.f32	s19, s19, s4
 8003bd6:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8003bda:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8003bde:	ee69 baa8 	vmul.f32	s23, s19, s17
 8003be2:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8003be6:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8003bea:	ee69 8a28 	vmul.f32	s17, s18, s17
 8003bee:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8003bf2:	ee1c aa10 	vmov	sl, s24
 8003bf6:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8003bfa:	f841 ab08 	str.w	sl, [r1], #8
 8003bfe:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8003c02:	ee3b bacb 	vsub.f32	s22, s23, s22
 8003c06:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8003c0a:	ee33 3a62 	vsub.f32	s6, s6, s5
 8003c0e:	ed01 aa01 	vstr	s20, [r1, #-4]
 8003c12:	edc2 8a01 	vstr	s17, [r2, #4]
 8003c16:	ed82 ba02 	vstr	s22, [r2, #8]
 8003c1a:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8003c1e:	ee74 3a63 	vsub.f32	s7, s8, s7
 8003c22:	ee38 8a47 	vsub.f32	s16, s16, s14
 8003c26:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8003c2a:	ee30 0a46 	vsub.f32	s0, s0, s12
 8003c2e:	ee33 3a42 	vsub.f32	s6, s6, s4
 8003c32:	ee38 8a67 	vsub.f32	s16, s16, s15
 8003c36:	ee30 0a66 	vsub.f32	s0, s0, s13
 8003c3a:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8003c3e:	ee63 8a04 	vmul.f32	s17, s6, s8
 8003c42:	ee28 aa24 	vmul.f32	s20, s16, s9
 8003c46:	ee60 9a04 	vmul.f32	s19, s0, s8
 8003c4a:	ee28 8a04 	vmul.f32	s16, s16, s8
 8003c4e:	ee20 0a24 	vmul.f32	s0, s0, s9
 8003c52:	ee63 3a84 	vmul.f32	s7, s7, s8
 8003c56:	ee39 4a68 	vsub.f32	s8, s18, s17
 8003c5a:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8003c5e:	ee14 aa10 	vmov	sl, s8
 8003c62:	ee30 0a48 	vsub.f32	s0, s0, s16
 8003c66:	ee63 4a24 	vmul.f32	s9, s6, s9
 8003c6a:	ed44 9a02 	vstr	s19, [r4, #-8]
 8003c6e:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8003c72:	ed04 0a01 	vstr	s0, [r4, #-4]
 8003c76:	f846 a908 	str.w	sl, [r6], #-8
 8003c7a:	ee35 6a46 	vsub.f32	s12, s10, s12
 8003c7e:	ee35 7a87 	vadd.f32	s14, s11, s14
 8003c82:	edc6 3a01 	vstr	s7, [r6, #4]
 8003c86:	ee76 6a86 	vadd.f32	s13, s13, s12
 8003c8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c8e:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8003c92:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 8003c96:	ee67 5a86 	vmul.f32	s11, s15, s12
 8003c9a:	ee26 5a87 	vmul.f32	s10, s13, s14
 8003c9e:	ee72 2a62 	vsub.f32	s5, s4, s5
 8003ca2:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8003ca6:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8003caa:	ee75 5a25 	vadd.f32	s11, s10, s11
 8003cae:	ee62 0a86 	vmul.f32	s1, s5, s12
 8003cb2:	ee66 6a86 	vmul.f32	s13, s13, s12
 8003cb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cba:	ee21 6a06 	vmul.f32	s12, s2, s12
 8003cbe:	ee62 2a87 	vmul.f32	s5, s5, s14
 8003cc2:	ee21 1a07 	vmul.f32	s2, s2, s14
 8003cc6:	ee15 aa90 	vmov	sl, s11
 8003cca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003cce:	f840 ab08 	str.w	sl, [r0], #8
 8003cd2:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8003cd6:	ee76 2a22 	vadd.f32	s5, s12, s5
 8003cda:	f1b9 0901 	subs.w	r9, r9, #1
 8003cde:	ed40 7a01 	vstr	s15, [r0, #-4]
 8003ce2:	f105 0508 	add.w	r5, r5, #8
 8003ce6:	ed83 1a02 	vstr	s2, [r3, #8]
 8003cea:	edc3 2a01 	vstr	s5, [r3, #4]
 8003cee:	f108 0808 	add.w	r8, r8, #8
 8003cf2:	f1a2 0208 	sub.w	r2, r2, #8
 8003cf6:	f10c 0c10 	add.w	ip, ip, #16
 8003cfa:	f104 0408 	add.w	r4, r4, #8
 8003cfe:	f10e 0e18 	add.w	lr, lr, #24
 8003d02:	f1a3 0308 	sub.w	r3, r3, #8
 8003d06:	f47f aefc 	bne.w	8003b02 <arm_cfft_radix8by4_f32+0x13e>
 8003d0a:	9908      	ldr	r1, [sp, #32]
 8003d0c:	9802      	ldr	r0, [sp, #8]
 8003d0e:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8003d12:	00cb      	lsls	r3, r1, #3
 8003d14:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8003d18:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8003d1c:	9102      	str	r1, [sp, #8]
 8003d1e:	9904      	ldr	r1, [sp, #16]
 8003d20:	4419      	add	r1, r3
 8003d22:	9104      	str	r1, [sp, #16]
 8003d24:	9905      	ldr	r1, [sp, #20]
 8003d26:	4419      	add	r1, r3
 8003d28:	9105      	str	r1, [sp, #20]
 8003d2a:	9907      	ldr	r1, [sp, #28]
 8003d2c:	449b      	add	fp, r3
 8003d2e:	4419      	add	r1, r3
 8003d30:	449a      	add	sl, r3
 8003d32:	9b06      	ldr	r3, [sp, #24]
 8003d34:	9107      	str	r1, [sp, #28]
 8003d36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003d3a:	9306      	str	r3, [sp, #24]
 8003d3c:	9a04      	ldr	r2, [sp, #16]
 8003d3e:	9807      	ldr	r0, [sp, #28]
 8003d40:	edd2 3a00 	vldr	s7, [r2]
 8003d44:	ed90 4a00 	vldr	s8, [r0]
 8003d48:	eddb 7a00 	vldr	s15, [fp]
 8003d4c:	ed9a 3a00 	vldr	s6, [sl]
 8003d50:	edd2 4a01 	vldr	s9, [r2, #4]
 8003d54:	ed90 7a01 	vldr	s14, [r0, #4]
 8003d58:	ed9b 2a01 	vldr	s4, [fp, #4]
 8003d5c:	edda 5a01 	vldr	s11, [sl, #4]
 8003d60:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8003d64:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8003d66:	ee73 6a84 	vadd.f32	s13, s7, s8
 8003d6a:	ee34 6a87 	vadd.f32	s12, s9, s14
 8003d6e:	ee36 5aa7 	vadd.f32	s10, s13, s15
 8003d72:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8003d76:	ee33 5a05 	vadd.f32	s10, s6, s10
 8003d7a:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8003d7e:	ed82 5a00 	vstr	s10, [r2]
 8003d82:	ed9b 5a01 	vldr	s10, [fp, #4]
 8003d86:	edda 4a01 	vldr	s9, [sl, #4]
 8003d8a:	ee36 5a05 	vadd.f32	s10, s12, s10
 8003d8e:	ee72 3a04 	vadd.f32	s7, s4, s8
 8003d92:	ee35 5a24 	vadd.f32	s10, s10, s9
 8003d96:	ee77 4a67 	vsub.f32	s9, s14, s15
 8003d9a:	ed82 5a01 	vstr	s10, [r2, #4]
 8003d9e:	9a05      	ldr	r2, [sp, #20]
 8003da0:	ee34 5a83 	vadd.f32	s10, s9, s6
 8003da4:	edd2 1a00 	vldr	s3, [r2]
 8003da8:	edd2 2a01 	vldr	s5, [r2, #4]
 8003dac:	9a02      	ldr	r2, [sp, #8]
 8003dae:	ee73 3ae5 	vsub.f32	s7, s7, s11
 8003db2:	ee36 6a42 	vsub.f32	s12, s12, s4
 8003db6:	ee63 4aa1 	vmul.f32	s9, s7, s3
 8003dba:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8003dbe:	ee65 2a22 	vmul.f32	s5, s10, s5
 8003dc2:	ee25 5a21 	vmul.f32	s10, s10, s3
 8003dc6:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8003dca:	ee35 5a63 	vsub.f32	s10, s10, s7
 8003dce:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003dd2:	edcb 2a00 	vstr	s5, [fp]
 8003dd6:	ed8b 5a01 	vstr	s10, [fp, #4]
 8003dda:	edd2 3a01 	vldr	s7, [r2, #4]
 8003dde:	ed92 5a00 	vldr	s10, [r2]
 8003de2:	9a06      	ldr	r2, [sp, #24]
 8003de4:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8003de8:	ee36 6a65 	vsub.f32	s12, s12, s11
 8003dec:	ee66 4a85 	vmul.f32	s9, s13, s10
 8003df0:	ee26 5a05 	vmul.f32	s10, s12, s10
 8003df4:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8003df8:	ee26 6a23 	vmul.f32	s12, s12, s7
 8003dfc:	ee75 6a66 	vsub.f32	s13, s10, s13
 8003e00:	ee34 6a86 	vadd.f32	s12, s9, s12
 8003e04:	ee34 4a42 	vsub.f32	s8, s8, s4
 8003e08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e0c:	edc0 6a01 	vstr	s13, [r0, #4]
 8003e10:	ed80 6a00 	vstr	s12, [r0]
 8003e14:	ed92 6a01 	vldr	s12, [r2, #4]
 8003e18:	9803      	ldr	r0, [sp, #12]
 8003e1a:	ee77 7a43 	vsub.f32	s15, s14, s6
 8003e1e:	ee75 5a84 	vadd.f32	s11, s11, s8
 8003e22:	ed92 7a00 	vldr	s14, [r2]
 8003e26:	ee65 6a87 	vmul.f32	s13, s11, s14
 8003e2a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003e2e:	ee65 5a86 	vmul.f32	s11, s11, s12
 8003e32:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003e36:	ee77 5a65 	vsub.f32	s11, s14, s11
 8003e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e3e:	edca 5a01 	vstr	s11, [sl, #4]
 8003e42:	edca 7a00 	vstr	s15, [sl]
 8003e46:	6872      	ldr	r2, [r6, #4]
 8003e48:	4621      	mov	r1, r4
 8003e4a:	2304      	movs	r3, #4
 8003e4c:	f000 f9be 	bl	80041cc <arm_radix8_butterfly_f32>
 8003e50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e52:	6872      	ldr	r2, [r6, #4]
 8003e54:	4621      	mov	r1, r4
 8003e56:	2304      	movs	r3, #4
 8003e58:	f000 f9b8 	bl	80041cc <arm_radix8_butterfly_f32>
 8003e5c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003e5e:	6872      	ldr	r2, [r6, #4]
 8003e60:	4621      	mov	r1, r4
 8003e62:	2304      	movs	r3, #4
 8003e64:	f000 f9b2 	bl	80041cc <arm_radix8_butterfly_f32>
 8003e68:	9801      	ldr	r0, [sp, #4]
 8003e6a:	6872      	ldr	r2, [r6, #4]
 8003e6c:	4621      	mov	r1, r4
 8003e6e:	2304      	movs	r3, #4
 8003e70:	b00f      	add	sp, #60	; 0x3c
 8003e72:	ecbd 8b0a 	vpop	{d8-d12}
 8003e76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e7a:	f000 b9a7 	b.w	80041cc <arm_radix8_butterfly_f32>
 8003e7e:	bf00      	nop

08003e80 <arm_cfft_f32>:
 8003e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e84:	2a01      	cmp	r2, #1
 8003e86:	4606      	mov	r6, r0
 8003e88:	4617      	mov	r7, r2
 8003e8a:	460c      	mov	r4, r1
 8003e8c:	4698      	mov	r8, r3
 8003e8e:	8805      	ldrh	r5, [r0, #0]
 8003e90:	d054      	beq.n	8003f3c <arm_cfft_f32+0xbc>
 8003e92:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8003e96:	d04c      	beq.n	8003f32 <arm_cfft_f32+0xb2>
 8003e98:	d916      	bls.n	8003ec8 <arm_cfft_f32+0x48>
 8003e9a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8003e9e:	d01a      	beq.n	8003ed6 <arm_cfft_f32+0x56>
 8003ea0:	d95c      	bls.n	8003f5c <arm_cfft_f32+0xdc>
 8003ea2:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8003ea6:	d044      	beq.n	8003f32 <arm_cfft_f32+0xb2>
 8003ea8:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8003eac:	d105      	bne.n	8003eba <arm_cfft_f32+0x3a>
 8003eae:	4620      	mov	r0, r4
 8003eb0:	4629      	mov	r1, r5
 8003eb2:	6872      	ldr	r2, [r6, #4]
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	f000 f989 	bl	80041cc <arm_radix8_butterfly_f32>
 8003eba:	f1b8 0f00 	cmp.w	r8, #0
 8003ebe:	d111      	bne.n	8003ee4 <arm_cfft_f32+0x64>
 8003ec0:	2f01      	cmp	r7, #1
 8003ec2:	d016      	beq.n	8003ef2 <arm_cfft_f32+0x72>
 8003ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ec8:	2d20      	cmp	r5, #32
 8003eca:	d032      	beq.n	8003f32 <arm_cfft_f32+0xb2>
 8003ecc:	d94a      	bls.n	8003f64 <arm_cfft_f32+0xe4>
 8003ece:	2d40      	cmp	r5, #64	; 0x40
 8003ed0:	d0ed      	beq.n	8003eae <arm_cfft_f32+0x2e>
 8003ed2:	2d80      	cmp	r5, #128	; 0x80
 8003ed4:	d1f1      	bne.n	8003eba <arm_cfft_f32+0x3a>
 8003ed6:	4630      	mov	r0, r6
 8003ed8:	4621      	mov	r1, r4
 8003eda:	f7ff fca1 	bl	8003820 <arm_cfft_radix8by2_f32>
 8003ede:	f1b8 0f00 	cmp.w	r8, #0
 8003ee2:	d0ed      	beq.n	8003ec0 <arm_cfft_f32+0x40>
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	89b1      	ldrh	r1, [r6, #12]
 8003ee8:	68b2      	ldr	r2, [r6, #8]
 8003eea:	f7fc f97f 	bl	80001ec <arm_bitreversal_32>
 8003eee:	2f01      	cmp	r7, #1
 8003ef0:	d1e8      	bne.n	8003ec4 <arm_cfft_f32+0x44>
 8003ef2:	ee07 5a90 	vmov	s15, r5
 8003ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003efa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003efe:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8003f02:	2d00      	cmp	r5, #0
 8003f04:	d0de      	beq.n	8003ec4 <arm_cfft_f32+0x44>
 8003f06:	f104 0108 	add.w	r1, r4, #8
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	429d      	cmp	r5, r3
 8003f10:	f101 0108 	add.w	r1, r1, #8
 8003f14:	ed11 7a04 	vldr	s14, [r1, #-16]
 8003f18:	ed51 7a03 	vldr	s15, [r1, #-12]
 8003f1c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003f20:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8003f24:	ed01 7a04 	vstr	s14, [r1, #-16]
 8003f28:	ed41 7a03 	vstr	s15, [r1, #-12]
 8003f2c:	d1ee      	bne.n	8003f0c <arm_cfft_f32+0x8c>
 8003f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f32:	4630      	mov	r0, r6
 8003f34:	4621      	mov	r1, r4
 8003f36:	f7ff fd45 	bl	80039c4 <arm_cfft_radix8by4_f32>
 8003f3a:	e7be      	b.n	8003eba <arm_cfft_f32+0x3a>
 8003f3c:	b1ad      	cbz	r5, 8003f6a <arm_cfft_f32+0xea>
 8003f3e:	f101 030c 	add.w	r3, r1, #12
 8003f42:	2200      	movs	r2, #0
 8003f44:	ed53 7a02 	vldr	s15, [r3, #-8]
 8003f48:	3201      	adds	r2, #1
 8003f4a:	eef1 7a67 	vneg.f32	s15, s15
 8003f4e:	4295      	cmp	r5, r2
 8003f50:	ed43 7a02 	vstr	s15, [r3, #-8]
 8003f54:	f103 0308 	add.w	r3, r3, #8
 8003f58:	d1f4      	bne.n	8003f44 <arm_cfft_f32+0xc4>
 8003f5a:	e79a      	b.n	8003e92 <arm_cfft_f32+0x12>
 8003f5c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8003f60:	d0a5      	beq.n	8003eae <arm_cfft_f32+0x2e>
 8003f62:	e7aa      	b.n	8003eba <arm_cfft_f32+0x3a>
 8003f64:	2d10      	cmp	r5, #16
 8003f66:	d0b6      	beq.n	8003ed6 <arm_cfft_f32+0x56>
 8003f68:	e7a7      	b.n	8003eba <arm_cfft_f32+0x3a>
 8003f6a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8003f6e:	d894      	bhi.n	8003e9a <arm_cfft_f32+0x1a>
 8003f70:	e7aa      	b.n	8003ec8 <arm_cfft_f32+0x48>
 8003f72:	bf00      	nop

08003f74 <arm_cmplx_mag_f32>:
 8003f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f78:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	d07f      	beq.n	8004080 <arm_cmplx_mag_f32+0x10c>
 8003f80:	2700      	movs	r7, #0
 8003f82:	f100 0420 	add.w	r4, r0, #32
 8003f86:	f101 0510 	add.w	r5, r1, #16
 8003f8a:	4646      	mov	r6, r8
 8003f8c:	e05a      	b.n	8004044 <arm_cmplx_mag_f32+0xd0>
 8003f8e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8003f92:	eeb4 0a40 	vcmp.f32	s0, s0
 8003f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f9a:	f040 80a4 	bne.w	80040e6 <arm_cmplx_mag_f32+0x172>
 8003f9e:	ed05 0a04 	vstr	s0, [r5, #-16]
 8003fa2:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8003fa6:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 8003faa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003fae:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003fb2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003fb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fbe:	f2c0 808f 	blt.w	80040e0 <arm_cmplx_mag_f32+0x16c>
 8003fc2:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8003fc6:	eeb4 0a40 	vcmp.f32	s0, s0
 8003fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fce:	f040 80af 	bne.w	8004130 <arm_cmplx_mag_f32+0x1bc>
 8003fd2:	ed05 0a03 	vstr	s0, [r5, #-12]
 8003fd6:	ed54 7a04 	vldr	s15, [r4, #-16]
 8003fda:	ed14 0a03 	vldr	s0, [r4, #-12]
 8003fde:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003fe2:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003fe6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003fea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ff2:	db72      	blt.n	80040da <arm_cmplx_mag_f32+0x166>
 8003ff4:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8003ff8:	eeb4 0a40 	vcmp.f32	s0, s0
 8003ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004000:	f040 808c 	bne.w	800411c <arm_cmplx_mag_f32+0x1a8>
 8004004:	ed05 0a02 	vstr	s0, [r5, #-8]
 8004008:	ed54 7a02 	vldr	s15, [r4, #-8]
 800400c:	ed14 0a01 	vldr	s0, [r4, #-4]
 8004010:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004014:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004018:	ee77 7a80 	vadd.f32	s15, s15, s0
 800401c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004024:	db20      	blt.n	8004068 <arm_cmplx_mag_f32+0xf4>
 8004026:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800402a:	eeb4 0a40 	vcmp.f32	s0, s0
 800402e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004032:	d169      	bne.n	8004108 <arm_cmplx_mag_f32+0x194>
 8004034:	3e01      	subs	r6, #1
 8004036:	ed05 0a01 	vstr	s0, [r5, #-4]
 800403a:	f104 0420 	add.w	r4, r4, #32
 800403e:	f105 0510 	add.w	r5, r5, #16
 8004042:	d019      	beq.n	8004078 <arm_cmplx_mag_f32+0x104>
 8004044:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8004048:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 800404c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004050:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004054:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004058:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800405c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004060:	da95      	bge.n	8003f8e <arm_cmplx_mag_f32+0x1a>
 8004062:	f845 7c10 	str.w	r7, [r5, #-16]
 8004066:	e79c      	b.n	8003fa2 <arm_cmplx_mag_f32+0x2e>
 8004068:	3e01      	subs	r6, #1
 800406a:	f845 7c04 	str.w	r7, [r5, #-4]
 800406e:	f104 0420 	add.w	r4, r4, #32
 8004072:	f105 0510 	add.w	r5, r5, #16
 8004076:	d1e5      	bne.n	8004044 <arm_cmplx_mag_f32+0xd0>
 8004078:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 800407c:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8004080:	f012 0503 	ands.w	r5, r2, #3
 8004084:	d026      	beq.n	80040d4 <arm_cmplx_mag_f32+0x160>
 8004086:	2600      	movs	r6, #0
 8004088:	f100 0408 	add.w	r4, r0, #8
 800408c:	e00c      	b.n	80040a8 <arm_cmplx_mag_f32+0x134>
 800408e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8004092:	eeb4 0a40 	vcmp.f32	s0, s0
 8004096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800409a:	d12e      	bne.n	80040fa <arm_cmplx_mag_f32+0x186>
 800409c:	3d01      	subs	r5, #1
 800409e:	ed01 0a01 	vstr	s0, [r1, #-4]
 80040a2:	f104 0408 	add.w	r4, r4, #8
 80040a6:	d015      	beq.n	80040d4 <arm_cmplx_mag_f32+0x160>
 80040a8:	ed54 7a02 	vldr	s15, [r4, #-8]
 80040ac:	ed14 0a01 	vldr	s0, [r4, #-4]
 80040b0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80040b4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80040b8:	3104      	adds	r1, #4
 80040ba:	ee77 7a80 	vadd.f32	s15, s15, s0
 80040be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040c6:	dae2      	bge.n	800408e <arm_cmplx_mag_f32+0x11a>
 80040c8:	3d01      	subs	r5, #1
 80040ca:	f841 6c04 	str.w	r6, [r1, #-4]
 80040ce:	f104 0408 	add.w	r4, r4, #8
 80040d2:	d1e9      	bne.n	80040a8 <arm_cmplx_mag_f32+0x134>
 80040d4:	b004      	add	sp, #16
 80040d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040da:	f845 7c08 	str.w	r7, [r5, #-8]
 80040de:	e793      	b.n	8004008 <arm_cmplx_mag_f32+0x94>
 80040e0:	f845 7c0c 	str.w	r7, [r5, #-12]
 80040e4:	e777      	b.n	8003fd6 <arm_cmplx_mag_f32+0x62>
 80040e6:	eeb0 0a67 	vmov.f32	s0, s15
 80040ea:	9203      	str	r2, [sp, #12]
 80040ec:	9102      	str	r1, [sp, #8]
 80040ee:	9001      	str	r0, [sp, #4]
 80040f0:	f000 fb80 	bl	80047f4 <sqrtf>
 80040f4:	a801      	add	r0, sp, #4
 80040f6:	c807      	ldmia	r0, {r0, r1, r2}
 80040f8:	e751      	b.n	8003f9e <arm_cmplx_mag_f32+0x2a>
 80040fa:	eeb0 0a67 	vmov.f32	s0, s15
 80040fe:	9101      	str	r1, [sp, #4]
 8004100:	f000 fb78 	bl	80047f4 <sqrtf>
 8004104:	9901      	ldr	r1, [sp, #4]
 8004106:	e7c9      	b.n	800409c <arm_cmplx_mag_f32+0x128>
 8004108:	eeb0 0a67 	vmov.f32	s0, s15
 800410c:	9203      	str	r2, [sp, #12]
 800410e:	9102      	str	r1, [sp, #8]
 8004110:	9001      	str	r0, [sp, #4]
 8004112:	f000 fb6f 	bl	80047f4 <sqrtf>
 8004116:	a801      	add	r0, sp, #4
 8004118:	c807      	ldmia	r0, {r0, r1, r2}
 800411a:	e78b      	b.n	8004034 <arm_cmplx_mag_f32+0xc0>
 800411c:	eeb0 0a67 	vmov.f32	s0, s15
 8004120:	9203      	str	r2, [sp, #12]
 8004122:	9102      	str	r1, [sp, #8]
 8004124:	9001      	str	r0, [sp, #4]
 8004126:	f000 fb65 	bl	80047f4 <sqrtf>
 800412a:	a801      	add	r0, sp, #4
 800412c:	c807      	ldmia	r0, {r0, r1, r2}
 800412e:	e769      	b.n	8004004 <arm_cmplx_mag_f32+0x90>
 8004130:	eeb0 0a67 	vmov.f32	s0, s15
 8004134:	9203      	str	r2, [sp, #12]
 8004136:	9102      	str	r1, [sp, #8]
 8004138:	9001      	str	r0, [sp, #4]
 800413a:	f000 fb5b 	bl	80047f4 <sqrtf>
 800413e:	a801      	add	r0, sp, #4
 8004140:	c807      	ldmia	r0, {r0, r1, r2}
 8004142:	e746      	b.n	8003fd2 <arm_cmplx_mag_f32+0x5e>

08004144 <arm_sin_f32>:
 8004144:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80041c0 <arm_sin_f32+0x7c>
 8004148:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800414c:	ee20 7a07 	vmul.f32	s14, s0, s14
 8004150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004154:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8004158:	d42c      	bmi.n	80041b4 <arm_sin_f32+0x70>
 800415a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800415e:	eddf 6a19 	vldr	s13, [pc, #100]	; 80041c4 <arm_sin_f32+0x80>
 8004162:	4a19      	ldr	r2, [pc, #100]	; (80041c8 <arm_sin_f32+0x84>)
 8004164:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004168:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800416c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004170:	eef4 7ae6 	vcmpe.f32	s15, s13
 8004174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004178:	bfa8      	it	ge
 800417a:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 800417e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8004182:	ee17 3a10 	vmov	r3, s14
 8004186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800418a:	ee07 3a10 	vmov	s14, r3
 800418e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004192:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8004196:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800419a:	edd1 6a01 	vldr	s13, [r1, #4]
 800419e:	ee30 7a67 	vsub.f32	s14, s0, s15
 80041a2:	ed91 0a00 	vldr	s0, [r1]
 80041a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80041aa:	ee27 0a00 	vmul.f32	s0, s14, s0
 80041ae:	ee30 0a27 	vadd.f32	s0, s0, s15
 80041b2:	4770      	bx	lr
 80041b4:	ee17 3a90 	vmov	r3, s15
 80041b8:	3b01      	subs	r3, #1
 80041ba:	ee07 3a90 	vmov	s15, r3
 80041be:	e7cc      	b.n	800415a <arm_sin_f32+0x16>
 80041c0:	3e22f983 	.word	0x3e22f983
 80041c4:	44000000 	.word	0x44000000
 80041c8:	08012270 	.word	0x08012270

080041cc <arm_radix8_butterfly_f32>:
 80041cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041d0:	ed2d 8b10 	vpush	{d8-d15}
 80041d4:	b09d      	sub	sp, #116	; 0x74
 80041d6:	461c      	mov	r4, r3
 80041d8:	ed9f bac8 	vldr	s22, [pc, #800]	; 80044fc <arm_radix8_butterfly_f32+0x330>
 80041dc:	921a      	str	r2, [sp, #104]	; 0x68
 80041de:	1d03      	adds	r3, r0, #4
 80041e0:	4682      	mov	sl, r0
 80041e2:	4689      	mov	r9, r1
 80041e4:	468b      	mov	fp, r1
 80041e6:	931b      	str	r3, [sp, #108]	; 0x6c
 80041e8:	9400      	str	r4, [sp, #0]
 80041ea:	469e      	mov	lr, r3
 80041ec:	ea4f 03db 	mov.w	r3, fp, lsr #3
 80041f0:	005a      	lsls	r2, r3, #1
 80041f2:	18d6      	adds	r6, r2, r3
 80041f4:	18f5      	adds	r5, r6, r3
 80041f6:	9203      	str	r2, [sp, #12]
 80041f8:	195a      	adds	r2, r3, r5
 80041fa:	18d0      	adds	r0, r2, r3
 80041fc:	00df      	lsls	r7, r3, #3
 80041fe:	1819      	adds	r1, r3, r0
 8004200:	463c      	mov	r4, r7
 8004202:	9701      	str	r7, [sp, #4]
 8004204:	4457      	add	r7, sl
 8004206:	930c      	str	r3, [sp, #48]	; 0x30
 8004208:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 8004212:	eb07 0c04 	add.w	ip, r7, r4
 8004216:	9c00      	ldr	r4, [sp, #0]
 8004218:	9302      	str	r3, [sp, #8]
 800421a:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 800421e:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 8004222:	3204      	adds	r2, #4
 8004224:	3104      	adds	r1, #4
 8004226:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 800422a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800422e:	f04f 0800 	mov.w	r8, #0
 8004232:	eddc 7a00 	vldr	s15, [ip]
 8004236:	edd7 6a00 	vldr	s13, [r7]
 800423a:	edd6 3a00 	vldr	s7, [r6]
 800423e:	ed5e aa01 	vldr	s21, [lr, #-4]
 8004242:	edd5 4a00 	vldr	s9, [r5]
 8004246:	ed90 2a00 	vldr	s4, [r0]
 800424a:	ed12 7a01 	vldr	s14, [r2, #-4]
 800424e:	ed51 0a01 	vldr	s1, [r1, #-4]
 8004252:	ee77 8a82 	vadd.f32	s17, s15, s4
 8004256:	ee33 4aa0 	vadd.f32	s8, s7, s1
 800425a:	ee76 1a87 	vadd.f32	s3, s13, s14
 800425e:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 8004262:	ee31 6a84 	vadd.f32	s12, s3, s8
 8004266:	ee33 5a28 	vadd.f32	s10, s6, s17
 800426a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800426e:	ee75 6a06 	vadd.f32	s13, s10, s12
 8004272:	ee35 5a46 	vsub.f32	s10, s10, s12
 8004276:	ed4e 6a01 	vstr	s13, [lr, #-4]
 800427a:	ed85 5a00 	vstr	s10, [r5]
 800427e:	ed96 1a01 	vldr	s2, [r6, #4]
 8004282:	edd7 5a01 	vldr	s11, [r7, #4]
 8004286:	ed92 aa00 	vldr	s20, [r2]
 800428a:	ed91 6a00 	vldr	s12, [r1]
 800428e:	ed9e 9a00 	vldr	s18, [lr]
 8004292:	ed95 5a01 	vldr	s10, [r5, #4]
 8004296:	eddc 6a01 	vldr	s13, [ip, #4]
 800429a:	edd0 9a01 	vldr	s19, [r0, #4]
 800429e:	ee73 0ae0 	vsub.f32	s1, s7, s1
 80042a2:	ee71 2a46 	vsub.f32	s5, s2, s12
 80042a6:	ee75 3aca 	vsub.f32	s7, s11, s20
 80042aa:	ee37 0a60 	vsub.f32	s0, s14, s1
 80042ae:	ee33 8aa2 	vadd.f32	s16, s7, s5
 80042b2:	ee37 7a20 	vadd.f32	s14, s14, s1
 80042b6:	ee73 2ae2 	vsub.f32	s5, s7, s5
 80042ba:	ee37 2ac2 	vsub.f32	s4, s15, s4
 80042be:	ee79 3a05 	vadd.f32	s7, s18, s10
 80042c2:	ee60 0a0b 	vmul.f32	s1, s0, s22
 80042c6:	ee39 5a45 	vsub.f32	s10, s18, s10
 80042ca:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 80042ce:	ee36 9aa9 	vadd.f32	s18, s13, s19
 80042d2:	ee75 5a8a 	vadd.f32	s11, s11, s20
 80042d6:	ee31 6a06 	vadd.f32	s12, s2, s12
 80042da:	ee76 6ae9 	vsub.f32	s13, s13, s19
 80042de:	ee28 8a0b 	vmul.f32	s16, s16, s22
 80042e2:	ee62 2a8b 	vmul.f32	s5, s5, s22
 80042e6:	ee67 7a0b 	vmul.f32	s15, s14, s22
 80042ea:	ee33 3a68 	vsub.f32	s6, s6, s17
 80042ee:	ee36 0a88 	vadd.f32	s0, s13, s16
 80042f2:	ee75 8a86 	vadd.f32	s17, s11, s12
 80042f6:	ee36 7ac8 	vsub.f32	s14, s13, s16
 80042fa:	ee71 1ac4 	vsub.f32	s3, s3, s8
 80042fe:	ee75 6a62 	vsub.f32	s13, s10, s5
 8004302:	ee33 4ac9 	vsub.f32	s8, s7, s18
 8004306:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800430a:	ee33 1a89 	vadd.f32	s2, s7, s18
 800430e:	ee74 5ae0 	vsub.f32	s11, s9, s1
 8004312:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8004316:	ee75 4a22 	vadd.f32	s9, s10, s5
 800431a:	ee32 5a27 	vadd.f32	s10, s4, s15
 800431e:	ee72 7a67 	vsub.f32	s15, s4, s15
 8004322:	ee33 8a06 	vadd.f32	s16, s6, s12
 8004326:	ee75 2a87 	vadd.f32	s5, s11, s14
 800432a:	ee31 9a28 	vadd.f32	s18, s2, s17
 800432e:	ee33 6a46 	vsub.f32	s12, s6, s12
 8004332:	ee74 0a61 	vsub.f32	s1, s8, s3
 8004336:	ee33 2a80 	vadd.f32	s4, s7, s0
 800433a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800433e:	ee34 3ac5 	vsub.f32	s6, s9, s10
 8004342:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8004346:	ee31 1a68 	vsub.f32	s2, s2, s17
 800434a:	ee34 4a21 	vadd.f32	s8, s8, s3
 800434e:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8004352:	ee74 4a85 	vadd.f32	s9, s9, s10
 8004356:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800435a:	44d8      	add	r8, fp
 800435c:	45c1      	cmp	r9, r8
 800435e:	ed8e 9a00 	vstr	s18, [lr]
 8004362:	ed85 1a01 	vstr	s2, [r5, #4]
 8004366:	449e      	add	lr, r3
 8004368:	ed8c 8a00 	vstr	s16, [ip]
 800436c:	441d      	add	r5, r3
 800436e:	ed80 6a00 	vstr	s12, [r0]
 8004372:	edcc 0a01 	vstr	s1, [ip, #4]
 8004376:	ed80 4a01 	vstr	s8, [r0, #4]
 800437a:	449c      	add	ip, r3
 800437c:	ed87 2a00 	vstr	s4, [r7]
 8004380:	4418      	add	r0, r3
 8004382:	ed41 3a01 	vstr	s7, [r1, #-4]
 8004386:	ed42 2a01 	vstr	s5, [r2, #-4]
 800438a:	ed86 7a00 	vstr	s14, [r6]
 800438e:	ed87 3a01 	vstr	s6, [r7, #4]
 8004392:	edc1 4a00 	vstr	s9, [r1]
 8004396:	441f      	add	r7, r3
 8004398:	edc2 5a00 	vstr	s11, [r2]
 800439c:	4419      	add	r1, r3
 800439e:	edc6 6a01 	vstr	s13, [r6, #4]
 80043a2:	441a      	add	r2, r3
 80043a4:	441e      	add	r6, r3
 80043a6:	f63f af44 	bhi.w	8004232 <arm_radix8_butterfly_f32+0x66>
 80043aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80043ac:	2907      	cmp	r1, #7
 80043ae:	4620      	mov	r0, r4
 80043b0:	f240 81e9 	bls.w	8004786 <arm_radix8_butterfly_f32+0x5ba>
 80043b4:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 80043b8:	193e      	adds	r6, r7, r4
 80043ba:	1935      	adds	r5, r6, r4
 80043bc:	9c03      	ldr	r4, [sp, #12]
 80043be:	9000      	str	r0, [sp, #0]
 80043c0:	4622      	mov	r2, r4
 80043c2:	3201      	adds	r2, #1
 80043c4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80043c8:	9900      	ldr	r1, [sp, #0]
 80043ca:	1828      	adds	r0, r5, r0
 80043cc:	eb00 0e01 	add.w	lr, r0, r1
 80043d0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80043d2:	440a      	add	r2, r1
 80043d4:	eb04 0c01 	add.w	ip, r4, r1
 80043d8:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 80043dc:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 80043e0:	9a00      	ldr	r2, [sp, #0]
 80043e2:	940f      	str	r4, [sp, #60]	; 0x3c
 80043e4:	00ed      	lsls	r5, r5, #3
 80043e6:	9511      	str	r5, [sp, #68]	; 0x44
 80043e8:	00d5      	lsls	r5, r2, #3
 80043ea:	950d      	str	r5, [sp, #52]	; 0x34
 80043ec:	9d01      	ldr	r5, [sp, #4]
 80043ee:	3508      	adds	r5, #8
 80043f0:	9516      	str	r5, [sp, #88]	; 0x58
 80043f2:	9d02      	ldr	r5, [sp, #8]
 80043f4:	3508      	adds	r5, #8
 80043f6:	0114      	lsls	r4, r2, #4
 80043f8:	9517      	str	r5, [sp, #92]	; 0x5c
 80043fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80043fc:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80043fe:	940e      	str	r4, [sp, #56]	; 0x38
 8004400:	00c0      	lsls	r0, r0, #3
 8004402:	9010      	str	r0, [sp, #64]	; 0x40
 8004404:	18aa      	adds	r2, r5, r2
 8004406:	9207      	str	r2, [sp, #28]
 8004408:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800440a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800440c:	18aa      	adds	r2, r5, r2
 800440e:	9208      	str	r2, [sp, #32]
 8004410:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004412:	18aa      	adds	r2, r5, r2
 8004414:	9209      	str	r2, [sp, #36]	; 0x24
 8004416:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800441a:	f10e 0204 	add.w	r2, lr, #4
 800441e:	920a      	str	r2, [sp, #40]	; 0x28
 8004420:	00c9      	lsls	r1, r1, #3
 8004422:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004424:	310c      	adds	r1, #12
 8004426:	00f6      	lsls	r6, r6, #3
 8004428:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 800442c:	9114      	str	r1, [sp, #80]	; 0x50
 800442e:	18a9      	adds	r1, r5, r2
 8004430:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004432:	9612      	str	r6, [sp, #72]	; 0x48
 8004434:	00ff      	lsls	r7, r7, #3
 8004436:	19ae      	adds	r6, r5, r6
 8004438:	3008      	adds	r0, #8
 800443a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800443e:	9606      	str	r6, [sp, #24]
 8004440:	9019      	str	r0, [sp, #100]	; 0x64
 8004442:	18aa      	adds	r2, r5, r2
 8004444:	0164      	lsls	r4, r4, #5
 8004446:	19ee      	adds	r6, r5, r7
 8004448:	f10c 000c 	add.w	r0, ip, #12
 800444c:	9713      	str	r7, [sp, #76]	; 0x4c
 800444e:	9604      	str	r6, [sp, #16]
 8004450:	9015      	str	r0, [sp, #84]	; 0x54
 8004452:	9103      	str	r1, [sp, #12]
 8004454:	9205      	str	r2, [sp, #20]
 8004456:	f104 0208 	add.w	r2, r4, #8
 800445a:	9218      	str	r2, [sp, #96]	; 0x60
 800445c:	f04f 0801 	mov.w	r8, #1
 8004460:	2200      	movs	r2, #0
 8004462:	f102 0108 	add.w	r1, r2, #8
 8004466:	460f      	mov	r7, r1
 8004468:	910b      	str	r1, [sp, #44]	; 0x2c
 800446a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800446c:	188e      	adds	r6, r1, r2
 800446e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004470:	188d      	adds	r5, r1, r2
 8004472:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8004474:	188c      	adds	r4, r1, r2
 8004476:	9919      	ldr	r1, [sp, #100]	; 0x64
 8004478:	1888      	adds	r0, r1, r2
 800447a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800447c:	eb01 0c02 	add.w	ip, r1, r2
 8004480:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004482:	440a      	add	r2, r1
 8004484:	9903      	ldr	r1, [sp, #12]
 8004486:	edd1 fa00 	vldr	s31, [r1]
 800448a:	9905      	ldr	r1, [sp, #20]
 800448c:	ed91 fa00 	vldr	s30, [r1]
 8004490:	9904      	ldr	r1, [sp, #16]
 8004492:	edd1 ea00 	vldr	s29, [r1]
 8004496:	9906      	ldr	r1, [sp, #24]
 8004498:	ed91 ea00 	vldr	s28, [r1]
 800449c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800449e:	edd1 da00 	vldr	s27, [r1]
 80044a2:	9908      	ldr	r1, [sp, #32]
 80044a4:	ed91 da00 	vldr	s26, [r1]
 80044a8:	9907      	ldr	r1, [sp, #28]
 80044aa:	edd1 ca00 	vldr	s25, [r1]
 80044ae:	9903      	ldr	r1, [sp, #12]
 80044b0:	ed91 ca01 	vldr	s24, [r1, #4]
 80044b4:	9905      	ldr	r1, [sp, #20]
 80044b6:	edd1 ba01 	vldr	s23, [r1, #4]
 80044ba:	9904      	ldr	r1, [sp, #16]
 80044bc:	edd1 aa01 	vldr	s21, [r1, #4]
 80044c0:	9906      	ldr	r1, [sp, #24]
 80044c2:	ed91 aa01 	vldr	s20, [r1, #4]
 80044c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80044c8:	edd1 7a01 	vldr	s15, [r1, #4]
 80044cc:	9908      	ldr	r1, [sp, #32]
 80044ce:	edcd 7a00 	vstr	s15, [sp]
 80044d2:	edd1 7a01 	vldr	s15, [r1, #4]
 80044d6:	9907      	ldr	r1, [sp, #28]
 80044d8:	edcd 7a01 	vstr	s15, [sp, #4]
 80044dc:	edd1 7a01 	vldr	s15, [r1, #4]
 80044e0:	eb0a 0e07 	add.w	lr, sl, r7
 80044e4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80044e6:	edcd 7a02 	vstr	s15, [sp, #8]
 80044ea:	eb0c 010a 	add.w	r1, ip, sl
 80044ee:	4456      	add	r6, sl
 80044f0:	4455      	add	r5, sl
 80044f2:	4454      	add	r4, sl
 80044f4:	4450      	add	r0, sl
 80044f6:	4452      	add	r2, sl
 80044f8:	46c4      	mov	ip, r8
 80044fa:	e001      	b.n	8004500 <arm_radix8_butterfly_f32+0x334>
 80044fc:	3f3504f3 	.word	0x3f3504f3
 8004500:	ed96 5a00 	vldr	s10, [r6]
 8004504:	ed52 9a01 	vldr	s19, [r2, #-4]
 8004508:	ed11 6a01 	vldr	s12, [r1, #-4]
 800450c:	edd0 7a00 	vldr	s15, [r0]
 8004510:	ed17 7a01 	vldr	s14, [r7, #-4]
 8004514:	edde 3a00 	vldr	s7, [lr]
 8004518:	ed94 3a00 	vldr	s6, [r4]
 800451c:	ed95 2a00 	vldr	s4, [r5]
 8004520:	ed9e 0a01 	vldr	s0, [lr, #4]
 8004524:	ee33 8a85 	vadd.f32	s16, s7, s10
 8004528:	ee32 1a06 	vadd.f32	s2, s4, s12
 800452c:	ee33 4a29 	vadd.f32	s8, s6, s19
 8004530:	ee77 4a87 	vadd.f32	s9, s15, s14
 8004534:	ee78 1a04 	vadd.f32	s3, s16, s8
 8004538:	ee71 6a24 	vadd.f32	s13, s2, s9
 800453c:	ee32 2a46 	vsub.f32	s4, s4, s12
 8004540:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8004544:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004548:	ed8e 6a00 	vstr	s12, [lr]
 800454c:	edd0 8a01 	vldr	s17, [r0, #4]
 8004550:	ed95 9a01 	vldr	s18, [r5, #4]
 8004554:	edd1 2a00 	vldr	s5, [r1]
 8004558:	ed97 7a00 	vldr	s14, [r7]
 800455c:	edd4 0a01 	vldr	s1, [r4, #4]
 8004560:	ed96 6a01 	vldr	s12, [r6, #4]
 8004564:	edd2 5a00 	vldr	s11, [r2]
 8004568:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800456c:	ee33 3a69 	vsub.f32	s6, s6, s19
 8004570:	ee39 5a62 	vsub.f32	s10, s18, s5
 8004574:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8004578:	ee38 4a44 	vsub.f32	s8, s16, s8
 800457c:	ee38 7a87 	vadd.f32	s14, s17, s14
 8004580:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8004584:	ee79 2a22 	vadd.f32	s5, s18, s5
 8004588:	ee75 8a69 	vsub.f32	s17, s10, s19
 800458c:	ee32 9a27 	vadd.f32	s18, s4, s15
 8004590:	ee35 5a29 	vadd.f32	s10, s10, s19
 8004594:	ee72 7a67 	vsub.f32	s15, s4, s15
 8004598:	ee30 2a06 	vadd.f32	s4, s0, s12
 800459c:	ee69 9a0b 	vmul.f32	s19, s18, s22
 80045a0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80045a4:	ee32 9a08 	vadd.f32	s18, s4, s16
 80045a8:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80045ac:	ee32 2a48 	vsub.f32	s4, s4, s16
 80045b0:	ee71 4a64 	vsub.f32	s9, s2, s9
 80045b4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80045b8:	ee32 1a87 	vadd.f32	s2, s5, s14
 80045bc:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80045c0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80045c4:	ee30 6a46 	vsub.f32	s12, s0, s12
 80045c8:	ee73 0a29 	vadd.f32	s1, s6, s19
 80045cc:	ee36 0a28 	vadd.f32	s0, s12, s17
 80045d0:	ee33 3a69 	vsub.f32	s6, s6, s19
 80045d4:	ee32 7a64 	vsub.f32	s14, s4, s9
 80045d8:	ee73 9aa7 	vadd.f32	s19, s7, s15
 80045dc:	ee36 6a68 	vsub.f32	s12, s12, s17
 80045e0:	ee73 7ae7 	vsub.f32	s15, s7, s15
 80045e4:	ee75 8a85 	vadd.f32	s17, s11, s10
 80045e8:	ee74 3a22 	vadd.f32	s7, s8, s5
 80045ec:	ee35 5ac5 	vsub.f32	s10, s11, s10
 80045f0:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80045f4:	ee79 1a41 	vsub.f32	s3, s18, s2
 80045f8:	ee39 8aa8 	vadd.f32	s16, s19, s17
 80045fc:	ee76 5a43 	vsub.f32	s11, s12, s6
 8004600:	ee74 2a62 	vsub.f32	s5, s8, s5
 8004604:	ee72 4a24 	vadd.f32	s9, s4, s9
 8004608:	ee30 4a60 	vsub.f32	s8, s0, s1
 800460c:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8004610:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004614:	ee77 9a85 	vadd.f32	s19, s15, s10
 8004618:	ee36 6a03 	vadd.f32	s12, s12, s6
 800461c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8004620:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8004624:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8004628:	ee6f 0a23 	vmul.f32	s1, s30, s7
 800462c:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8004630:	ee39 1a01 	vadd.f32	s2, s18, s2
 8004634:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8004638:	ee2b 9a87 	vmul.f32	s18, s23, s14
 800463c:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8004640:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8004644:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8004648:	ee35 3a03 	vadd.f32	s6, s10, s6
 800464c:	ee72 6a66 	vsub.f32	s13, s4, s13
 8004650:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8004654:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8004658:	ed9d 4a02 	vldr	s8, [sp, #8]
 800465c:	ed8e 1a01 	vstr	s2, [lr, #4]
 8004660:	ee77 3a63 	vsub.f32	s7, s14, s7
 8004664:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8004668:	ed9d 7a01 	vldr	s14, [sp, #4]
 800466c:	ed86 3a00 	vstr	s6, [r6]
 8004670:	ee30 9a89 	vadd.f32	s18, s1, s18
 8004674:	ee32 2a05 	vadd.f32	s4, s4, s10
 8004678:	ee6d 0a22 	vmul.f32	s1, s26, s5
 800467c:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8004680:	ee67 2a22 	vmul.f32	s5, s14, s5
 8004684:	ee64 1a00 	vmul.f32	s3, s8, s0
 8004688:	ee27 7a24 	vmul.f32	s14, s14, s9
 800468c:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8004690:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8004694:	ee64 8a28 	vmul.f32	s17, s8, s17
 8004698:	ed9d 4a00 	vldr	s8, [sp]
 800469c:	edc6 6a01 	vstr	s13, [r6, #4]
 80046a0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80046a4:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 80046a8:	ee64 9a29 	vmul.f32	s19, s8, s19
 80046ac:	ee24 4a25 	vmul.f32	s8, s8, s11
 80046b0:	ee30 7a87 	vadd.f32	s14, s1, s14
 80046b4:	ee74 4a84 	vadd.f32	s9, s9, s8
 80046b8:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 80046bc:	ee2a 4a86 	vmul.f32	s8, s21, s12
 80046c0:	ee2c 0a80 	vmul.f32	s0, s25, s0
 80046c4:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 80046c8:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 80046cc:	ee2e 6a86 	vmul.f32	s12, s29, s12
 80046d0:	ee75 1a21 	vadd.f32	s3, s10, s3
 80046d4:	ee30 0a68 	vsub.f32	s0, s0, s17
 80046d8:	ee75 9ae9 	vsub.f32	s19, s11, s19
 80046dc:	ee70 0a84 	vadd.f32	s1, s1, s8
 80046e0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80046e4:	44dc      	add	ip, fp
 80046e6:	45e1      	cmp	r9, ip
 80046e8:	ed84 9a00 	vstr	s18, [r4]
 80046ec:	edc4 3a01 	vstr	s7, [r4, #4]
 80046f0:	449e      	add	lr, r3
 80046f2:	ed02 7a01 	vstr	s14, [r2, #-4]
 80046f6:	edc2 2a00 	vstr	s5, [r2]
 80046fa:	441e      	add	r6, r3
 80046fc:	ed85 2a00 	vstr	s4, [r5]
 8004700:	ed85 8a01 	vstr	s16, [r5, #4]
 8004704:	441c      	add	r4, r3
 8004706:	ed47 1a01 	vstr	s3, [r7, #-4]
 800470a:	ed87 0a00 	vstr	s0, [r7]
 800470e:	441a      	add	r2, r3
 8004710:	ed41 4a01 	vstr	s9, [r1, #-4]
 8004714:	edc1 9a00 	vstr	s19, [r1]
 8004718:	441d      	add	r5, r3
 800471a:	edc0 0a00 	vstr	s1, [r0]
 800471e:	441f      	add	r7, r3
 8004720:	ed80 6a01 	vstr	s12, [r0, #4]
 8004724:	4419      	add	r1, r3
 8004726:	4418      	add	r0, r3
 8004728:	f63f aeea 	bhi.w	8004500 <arm_radix8_butterfly_f32+0x334>
 800472c:	9a03      	ldr	r2, [sp, #12]
 800472e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004730:	440a      	add	r2, r1
 8004732:	9203      	str	r2, [sp, #12]
 8004734:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004736:	9a05      	ldr	r2, [sp, #20]
 8004738:	440a      	add	r2, r1
 800473a:	9205      	str	r2, [sp, #20]
 800473c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800473e:	9a04      	ldr	r2, [sp, #16]
 8004740:	440a      	add	r2, r1
 8004742:	9204      	str	r2, [sp, #16]
 8004744:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004746:	9a06      	ldr	r2, [sp, #24]
 8004748:	440a      	add	r2, r1
 800474a:	9206      	str	r2, [sp, #24]
 800474c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800474e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004750:	440a      	add	r2, r1
 8004752:	9209      	str	r2, [sp, #36]	; 0x24
 8004754:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004756:	9a08      	ldr	r2, [sp, #32]
 8004758:	440a      	add	r2, r1
 800475a:	9208      	str	r2, [sp, #32]
 800475c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800475e:	9a07      	ldr	r2, [sp, #28]
 8004760:	440a      	add	r2, r1
 8004762:	9207      	str	r2, [sp, #28]
 8004764:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004766:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004768:	f108 0801 	add.w	r8, r8, #1
 800476c:	3208      	adds	r2, #8
 800476e:	4588      	cmp	r8, r1
 8004770:	920a      	str	r2, [sp, #40]	; 0x28
 8004772:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004774:	f47f ae75 	bne.w	8004462 <arm_radix8_butterfly_f32+0x296>
 8004778:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	46c3      	mov	fp, r8
 8004780:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 8004784:	e532      	b.n	80041ec <arm_radix8_butterfly_f32+0x20>
 8004786:	b01d      	add	sp, #116	; 0x74
 8004788:	ecbd 8b10 	vpop	{d8-d15}
 800478c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004790 <memset>:
 8004790:	4402      	add	r2, r0
 8004792:	4603      	mov	r3, r0
 8004794:	4293      	cmp	r3, r2
 8004796:	d100      	bne.n	800479a <memset+0xa>
 8004798:	4770      	bx	lr
 800479a:	f803 1b01 	strb.w	r1, [r3], #1
 800479e:	e7f9      	b.n	8004794 <memset+0x4>

080047a0 <__errno>:
 80047a0:	4b01      	ldr	r3, [pc, #4]	; (80047a8 <__errno+0x8>)
 80047a2:	6818      	ldr	r0, [r3, #0]
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	20000058 	.word	0x20000058

080047ac <__libc_init_array>:
 80047ac:	b570      	push	{r4, r5, r6, lr}
 80047ae:	4d0d      	ldr	r5, [pc, #52]	; (80047e4 <__libc_init_array+0x38>)
 80047b0:	4c0d      	ldr	r4, [pc, #52]	; (80047e8 <__libc_init_array+0x3c>)
 80047b2:	1b64      	subs	r4, r4, r5
 80047b4:	10a4      	asrs	r4, r4, #2
 80047b6:	2600      	movs	r6, #0
 80047b8:	42a6      	cmp	r6, r4
 80047ba:	d109      	bne.n	80047d0 <__libc_init_array+0x24>
 80047bc:	4d0b      	ldr	r5, [pc, #44]	; (80047ec <__libc_init_array+0x40>)
 80047be:	4c0c      	ldr	r4, [pc, #48]	; (80047f0 <__libc_init_array+0x44>)
 80047c0:	f000 f83a 	bl	8004838 <_init>
 80047c4:	1b64      	subs	r4, r4, r5
 80047c6:	10a4      	asrs	r4, r4, #2
 80047c8:	2600      	movs	r6, #0
 80047ca:	42a6      	cmp	r6, r4
 80047cc:	d105      	bne.n	80047da <__libc_init_array+0x2e>
 80047ce:	bd70      	pop	{r4, r5, r6, pc}
 80047d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80047d4:	4798      	blx	r3
 80047d6:	3601      	adds	r6, #1
 80047d8:	e7ee      	b.n	80047b8 <__libc_init_array+0xc>
 80047da:	f855 3b04 	ldr.w	r3, [r5], #4
 80047de:	4798      	blx	r3
 80047e0:	3601      	adds	r6, #1
 80047e2:	e7f2      	b.n	80047ca <__libc_init_array+0x1e>
 80047e4:	080184cc 	.word	0x080184cc
 80047e8:	080184cc 	.word	0x080184cc
 80047ec:	080184cc 	.word	0x080184cc
 80047f0:	080184d0 	.word	0x080184d0

080047f4 <sqrtf>:
 80047f4:	b508      	push	{r3, lr}
 80047f6:	ed2d 8b02 	vpush	{d8}
 80047fa:	eeb0 8a40 	vmov.f32	s16, s0
 80047fe:	f000 f817 	bl	8004830 <__ieee754_sqrtf>
 8004802:	eeb4 8a48 	vcmp.f32	s16, s16
 8004806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800480a:	d60c      	bvs.n	8004826 <sqrtf+0x32>
 800480c:	eddf 8a07 	vldr	s17, [pc, #28]	; 800482c <sqrtf+0x38>
 8004810:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8004814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004818:	d505      	bpl.n	8004826 <sqrtf+0x32>
 800481a:	f7ff ffc1 	bl	80047a0 <__errno>
 800481e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8004822:	2321      	movs	r3, #33	; 0x21
 8004824:	6003      	str	r3, [r0, #0]
 8004826:	ecbd 8b02 	vpop	{d8}
 800482a:	bd08      	pop	{r3, pc}
 800482c:	00000000 	.word	0x00000000

08004830 <__ieee754_sqrtf>:
 8004830:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004834:	4770      	bx	lr
	...

08004838 <_init>:
 8004838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483a:	bf00      	nop
 800483c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800483e:	bc08      	pop	{r3}
 8004840:	469e      	mov	lr, r3
 8004842:	4770      	bx	lr

08004844 <_fini>:
 8004844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004846:	bf00      	nop
 8004848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800484a:	bc08      	pop	{r3}
 800484c:	469e      	mov	lr, r3
 800484e:	4770      	bx	lr
