
CH8 Communication - Tutorial 8-14 I2C_Blocking_mode_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bec  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08003d9c  08003d9c  00013d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e54  08003e54  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003e54  08003e54  00013e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e5c  08003e5c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e5c  08003e5c  00013e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e60  08003e60  00013e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000118  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000188  20000188  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000adc4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001715  00000000  00000000  0002ae64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000920  00000000  00000000  0002c580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008a0  00000000  00000000  0002cea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023086  00000000  00000000  0002d740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b97b  00000000  00000000  000507c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3be5  00000000  00000000  0005c141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012fd26  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000029a0  00000000  00000000  0012fd78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003d84 	.word	0x08003d84

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08003d84 	.word	0x08003d84

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000596:	b085      	sub	sp, #20
 8000598:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f000 fb85 	bl	8000ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f8a3 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 f9a1 	bl	80008e8 <MX_GPIO_Init>
  MX_I2C2_Init();
 80005a6:	f000 f90b 	bl	80007c0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80005aa:	f000 f949 	bl	8000840 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005ae:	f000 f971 	bl	8000894 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  buf = (char*) malloc(50);
 80005b2:	2032      	movs	r0, #50	; 0x32
 80005b4:	f002 ff68 	bl	8003488 <malloc>
 80005b8:	4603      	mov	r3, r0
 80005ba:	461a      	mov	r2, r3
 80005bc:	4b40      	ldr	r3, [pc, #256]	; (80006c0 <main+0x12c>)
 80005be:	601a      	str	r2, [r3, #0]
  if (buf != NULL){
 80005c0:	4b3f      	ldr	r3, [pc, #252]	; (80006c0 <main+0x12c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d00d      	beq.n	80005e4 <main+0x50>
	  sprintf(buf, "memory allocated successfully!\r\n");
 80005c8:	4b3d      	ldr	r3, [pc, #244]	; (80006c0 <main+0x12c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	493d      	ldr	r1, [pc, #244]	; (80006c4 <main+0x130>)
 80005ce:	4618      	mov	r0, r3
 80005d0:	f003 f85a 	bl	8003688 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)buf, sizeof(buf), HAL_MAX_DELAY);
 80005d4:	4b3a      	ldr	r3, [pc, #232]	; (80006c0 <main+0x12c>)
 80005d6:	6819      	ldr	r1, [r3, #0]
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295
 80005dc:	2204      	movs	r2, #4
 80005de:	483a      	ldr	r0, [pc, #232]	; (80006c8 <main+0x134>)
 80005e0:	f002 fbb3 	bl	8002d4a <HAL_UART_Transmit>

#ifdef MASTER
	  // Buffer to store string
	  HAL_StatusTypeDef ret;

	  ret  = HAL_I2C_Master_Transmit(&hi2c2, DevAddress , &masterTxdata , 1, HAL_MAX_DELAY);
 80005e4:	21a0      	movs	r1, #160	; 0xa0
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	2301      	movs	r3, #1
 80005ee:	4a37      	ldr	r2, [pc, #220]	; (80006cc <main+0x138>)
 80005f0:	4837      	ldr	r0, [pc, #220]	; (80006d0 <main+0x13c>)
 80005f2:	f000 fff9 	bl	80015e8 <HAL_I2C_Master_Transmit>
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	  if (ret != HAL_OK){
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d01f      	beq.n	8000640 <main+0xac>
		  strcpy((char*) buf, "Error in Master Tx communication!\r\n");
 8000600:	4b2f      	ldr	r3, [pc, #188]	; (80006c0 <main+0x12c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a33      	ldr	r2, [pc, #204]	; (80006d4 <main+0x140>)
 8000606:	4614      	mov	r4, r2
 8000608:	469c      	mov	ip, r3
 800060a:	f104 0e20 	add.w	lr, r4, #32
 800060e:	4665      	mov	r5, ip
 8000610:	4626      	mov	r6, r4
 8000612:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000614:	6028      	str	r0, [r5, #0]
 8000616:	6069      	str	r1, [r5, #4]
 8000618:	60aa      	str	r2, [r5, #8]
 800061a:	60eb      	str	r3, [r5, #12]
 800061c:	3410      	adds	r4, #16
 800061e:	f10c 0c10 	add.w	ip, ip, #16
 8000622:	4574      	cmp	r4, lr
 8000624:	d1f3      	bne.n	800060e <main+0x7a>
 8000626:	4663      	mov	r3, ip
 8000628:	4622      	mov	r2, r4
 800062a:	6810      	ldr	r0, [r2, #0]
 800062c:	6018      	str	r0, [r3, #0]
		  HAL_UART_Transmit(&huart1, (uint8_t*) buf, sizeof(buf), HAL_MAX_DELAY);
 800062e:	4b24      	ldr	r3, [pc, #144]	; (80006c0 <main+0x12c>)
 8000630:	6819      	ldr	r1, [r3, #0]
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
 8000636:	2204      	movs	r2, #4
 8000638:	4827      	ldr	r0, [pc, #156]	; (80006d8 <main+0x144>)
 800063a:	f002 fb86 	bl	8002d4a <HAL_UART_Transmit>
 800063e:	e7d1      	b.n	80005e4 <main+0x50>
	  }
	  else {
		  HAL_Delay(1000);
 8000640:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000644:	f000 fba2 	bl	8000d8c <HAL_Delay>
		  ret  = HAL_I2C_Master_Receive(&hi2c2, DevAddress , &masterRxdata , 1, HAL_MAX_DELAY);
 8000648:	21a0      	movs	r1, #160	; 0xa0
 800064a:	f04f 33ff 	mov.w	r3, #4294967295
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2301      	movs	r3, #1
 8000652:	4a22      	ldr	r2, [pc, #136]	; (80006dc <main+0x148>)
 8000654:	481e      	ldr	r0, [pc, #120]	; (80006d0 <main+0x13c>)
 8000656:	f001 f8c5 	bl	80017e4 <HAL_I2C_Master_Receive>
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
		  if (ret != HAL_OK){
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d01f      	beq.n	80006a4 <main+0x110>
				  strcpy((char*) buf, "Error in Master Rx communication!\r\n");
 8000664:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <main+0x12c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a1d      	ldr	r2, [pc, #116]	; (80006e0 <main+0x14c>)
 800066a:	4614      	mov	r4, r2
 800066c:	469c      	mov	ip, r3
 800066e:	f104 0e20 	add.w	lr, r4, #32
 8000672:	4665      	mov	r5, ip
 8000674:	4626      	mov	r6, r4
 8000676:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000678:	6028      	str	r0, [r5, #0]
 800067a:	6069      	str	r1, [r5, #4]
 800067c:	60aa      	str	r2, [r5, #8]
 800067e:	60eb      	str	r3, [r5, #12]
 8000680:	3410      	adds	r4, #16
 8000682:	f10c 0c10 	add.w	ip, ip, #16
 8000686:	4574      	cmp	r4, lr
 8000688:	d1f3      	bne.n	8000672 <main+0xde>
 800068a:	4663      	mov	r3, ip
 800068c:	4622      	mov	r2, r4
 800068e:	6810      	ldr	r0, [r2, #0]
 8000690:	6018      	str	r0, [r3, #0]
				  HAL_UART_Transmit(&huart1, (uint8_t*) buf, sizeof(buf), HAL_MAX_DELAY);
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <main+0x12c>)
 8000694:	6819      	ldr	r1, [r3, #0]
 8000696:	f04f 33ff 	mov.w	r3, #4294967295
 800069a:	2204      	movs	r2, #4
 800069c:	480e      	ldr	r0, [pc, #56]	; (80006d8 <main+0x144>)
 800069e:	f002 fb54 	bl	8002d4a <HAL_UART_Transmit>
 80006a2:	e79f      	b.n	80005e4 <main+0x50>


			  }
		  else {
			  HAL_UART_Transmit(&huart1, &masterRxdata , 1, HAL_MAX_DELAY);
 80006a4:	f04f 33ff 	mov.w	r3, #4294967295
 80006a8:	2201      	movs	r2, #1
 80006aa:	490c      	ldr	r1, [pc, #48]	; (80006dc <main+0x148>)
 80006ac:	480a      	ldr	r0, [pc, #40]	; (80006d8 <main+0x144>)
 80006ae:	f002 fb4c 	bl	8002d4a <HAL_UART_Transmit>
			  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 80006b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b6:	480b      	ldr	r0, [pc, #44]	; (80006e4 <main+0x150>)
 80006b8:	f000 fe37 	bl	800132a <HAL_GPIO_TogglePin>
  {
 80006bc:	e792      	b.n	80005e4 <main+0x50>
 80006be:	bf00      	nop
 80006c0:	2000016c 	.word	0x2000016c
 80006c4:	08003d9c 	.word	0x08003d9c
 80006c8:	20000124 	.word	0x20000124
 80006cc:	20000168 	.word	0x20000168
 80006d0:	2000008c 	.word	0x2000008c
 80006d4:	08003dc0 	.word	0x08003dc0
 80006d8:	200000e0 	.word	0x200000e0
 80006dc:	20000169 	.word	0x20000169
 80006e0:	08003de4 	.word	0x08003de4
 80006e4:	40021800 	.word	0x40021800

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b094      	sub	sp, #80	; 0x50
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 0320 	add.w	r3, r7, #32
 80006f2:	2230      	movs	r2, #48	; 0x30
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f002 fece 	bl	8003498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800070c:	2300      	movs	r3, #0
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	4b29      	ldr	r3, [pc, #164]	; (80007b8 <SystemClock_Config+0xd0>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	4a28      	ldr	r2, [pc, #160]	; (80007b8 <SystemClock_Config+0xd0>)
 8000716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071a:	6413      	str	r3, [r2, #64]	; 0x40
 800071c:	4b26      	ldr	r3, [pc, #152]	; (80007b8 <SystemClock_Config+0xd0>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000728:	2300      	movs	r3, #0
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	4b23      	ldr	r3, [pc, #140]	; (80007bc <SystemClock_Config+0xd4>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000734:	4a21      	ldr	r2, [pc, #132]	; (80007bc <SystemClock_Config+0xd4>)
 8000736:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800073a:	6013      	str	r3, [r2, #0]
 800073c:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <SystemClock_Config+0xd4>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000748:	2302      	movs	r3, #2
 800074a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074c:	2301      	movs	r3, #1
 800074e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000750:	2310      	movs	r3, #16
 8000752:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000754:	2302      	movs	r3, #2
 8000756:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000758:	2300      	movs	r3, #0
 800075a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800075c:	2308      	movs	r3, #8
 800075e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000760:	2332      	movs	r3, #50	; 0x32
 8000762:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000764:	2304      	movs	r3, #4
 8000766:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000768:	2307      	movs	r3, #7
 800076a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076c:	f107 0320 	add.w	r3, r7, #32
 8000770:	4618      	mov	r0, r3
 8000772:	f001 fe05 	bl	8002380 <HAL_RCC_OscConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800077c:	f000 f906 	bl	800098c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000780:	230f      	movs	r3, #15
 8000782:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000784:	2302      	movs	r3, #2
 8000786:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800078c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000790:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000792:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000796:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f002 f866 	bl	8002870 <HAL_RCC_ClockConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007aa:	f000 f8ef 	bl	800098c <Error_Handler>
  }
}
 80007ae:	bf00      	nop
 80007b0:	3750      	adds	r7, #80	; 0x50
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40007000 	.word	0x40007000

080007c0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007c4:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <MX_I2C2_Init+0x74>)
 80007c6:	4a1c      	ldr	r2, [pc, #112]	; (8000838 <MX_I2C2_Init+0x78>)
 80007c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80007ca:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <MX_I2C2_Init+0x74>)
 80007cc:	4a1b      	ldr	r2, [pc, #108]	; (800083c <MX_I2C2_Init+0x7c>)
 80007ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007d0:	4b18      	ldr	r3, [pc, #96]	; (8000834 <MX_I2C2_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80007d6:	4b17      	ldr	r3, [pc, #92]	; (8000834 <MX_I2C2_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007dc:	4b15      	ldr	r3, [pc, #84]	; (8000834 <MX_I2C2_Init+0x74>)
 80007de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007e2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e4:	4b13      	ldr	r3, [pc, #76]	; (8000834 <MX_I2C2_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80007ea:	4b12      	ldr	r3, [pc, #72]	; (8000834 <MX_I2C2_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f0:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_I2C2_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f6:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <MX_I2C2_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007fc:	480d      	ldr	r0, [pc, #52]	; (8000834 <MX_I2C2_Init+0x74>)
 80007fe:	f000 fdaf 	bl	8001360 <HAL_I2C_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000808:	f000 f8c0 	bl	800098c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800080c:	2100      	movs	r1, #0
 800080e:	4809      	ldr	r0, [pc, #36]	; (8000834 <MX_I2C2_Init+0x74>)
 8000810:	f001 fd3b 	bl	800228a <HAL_I2CEx_ConfigAnalogFilter>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800081a:	f000 f8b7 	bl	800098c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800081e:	2100      	movs	r1, #0
 8000820:	4804      	ldr	r0, [pc, #16]	; (8000834 <MX_I2C2_Init+0x74>)
 8000822:	f001 fd6e 	bl	8002302 <HAL_I2CEx_ConfigDigitalFilter>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800082c:	f000 f8ae 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	2000008c 	.word	0x2000008c
 8000838:	40005800 	.word	0x40005800
 800083c:	000186a0 	.word	0x000186a0

08000840 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_USART1_UART_Init+0x4c>)
 8000846:	4a12      	ldr	r2, [pc, #72]	; (8000890 <MX_USART1_UART_Init+0x50>)
 8000848:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <MX_USART1_UART_Init+0x4c>)
 800084c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000850:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_USART1_UART_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_USART1_UART_Init+0x4c>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_USART1_UART_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_USART1_UART_Init+0x4c>)
 8000866:	2208      	movs	r2, #8
 8000868:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <MX_USART1_UART_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_USART1_UART_Init+0x4c>)
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_USART1_UART_Init+0x4c>)
 8000878:	f002 fa1a 	bl	8002cb0 <HAL_UART_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000882:	f000 f883 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200000e0 	.word	0x200000e0
 8000890:	40011000 	.word	0x40011000

08000894 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 800089a:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <MX_USART2_UART_Init+0x50>)
 800089c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008cc:	f002 f9f0 	bl	8002cb0 <HAL_UART_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008d6:	f000 f859 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000124 	.word	0x20000124
 80008e4:	40004400 	.word	0x40004400

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b088      	sub	sp, #32
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	4b20      	ldr	r3, [pc, #128]	; (8000984 <MX_GPIO_Init+0x9c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a1f      	ldr	r2, [pc, #124]	; (8000984 <MX_GPIO_Init+0x9c>)
 8000908:	f043 0320 	orr.w	r3, r3, #32
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <MX_GPIO_Init+0x9c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0320 	and.w	r3, r3, #32
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b19      	ldr	r3, [pc, #100]	; (8000984 <MX_GPIO_Init+0x9c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a18      	ldr	r2, [pc, #96]	; (8000984 <MX_GPIO_Init+0x9c>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b16      	ldr	r3, [pc, #88]	; (8000984 <MX_GPIO_Init+0x9c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	4b12      	ldr	r3, [pc, #72]	; (8000984 <MX_GPIO_Init+0x9c>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a11      	ldr	r2, [pc, #68]	; (8000984 <MX_GPIO_Init+0x9c>)
 8000940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_GPIO_Init+0x9c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000958:	480b      	ldr	r0, [pc, #44]	; (8000988 <MX_GPIO_Init+0xa0>)
 800095a:	f000 fccd 	bl	80012f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800095e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000962:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	4619      	mov	r1, r3
 8000976:	4804      	ldr	r0, [pc, #16]	; (8000988 <MX_GPIO_Init+0xa0>)
 8000978:	f000 fb12 	bl	8000fa0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800097c:	bf00      	nop
 800097e:	3720      	adds	r7, #32
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40023800 	.word	0x40023800
 8000988:	40021800 	.word	0x40021800

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	e7fe      	b.n	8000994 <Error_Handler+0x8>
	...

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <HAL_MspInit+0x4c>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	4a0f      	ldr	r2, [pc, #60]	; (80009e4 <HAL_MspInit+0x4c>)
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ac:	6453      	str	r3, [r2, #68]	; 0x44
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <HAL_MspInit+0x4c>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <HAL_MspInit+0x4c>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	4a08      	ldr	r2, [pc, #32]	; (80009e4 <HAL_MspInit+0x4c>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_MspInit+0x4c>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009d6:	2007      	movs	r0, #7
 80009d8:	f000 faae 	bl	8000f38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40023800 	.word	0x40023800

080009e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	; 0x28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a19      	ldr	r2, [pc, #100]	; (8000a6c <HAL_I2C_MspInit+0x84>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d12b      	bne.n	8000a62 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <HAL_I2C_MspInit+0x88>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a17      	ldr	r2, [pc, #92]	; (8000a70 <HAL_I2C_MspInit+0x88>)
 8000a14:	f043 0320 	orr.w	r3, r3, #32
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <HAL_I2C_MspInit+0x88>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0320 	and.w	r3, r3, #32
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a26:	2303      	movs	r3, #3
 8000a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a2a:	2312      	movs	r3, #18
 8000a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a32:	2303      	movs	r3, #3
 8000a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a36:	2304      	movs	r3, #4
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4619      	mov	r1, r3
 8000a40:	480c      	ldr	r0, [pc, #48]	; (8000a74 <HAL_I2C_MspInit+0x8c>)
 8000a42:	f000 faad 	bl	8000fa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <HAL_I2C_MspInit+0x88>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	4a08      	ldr	r2, [pc, #32]	; (8000a70 <HAL_I2C_MspInit+0x88>)
 8000a50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a54:	6413      	str	r3, [r2, #64]	; 0x40
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_I2C_MspInit+0x88>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000a62:	bf00      	nop
 8000a64:	3728      	adds	r7, #40	; 0x28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40005800 	.word	0x40005800
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40021400 	.word	0x40021400

08000a78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08c      	sub	sp, #48	; 0x30
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a32      	ldr	r2, [pc, #200]	; (8000b60 <HAL_UART_MspInit+0xe8>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d12d      	bne.n	8000af6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61bb      	str	r3, [r7, #24]
 8000a9e:	4b31      	ldr	r3, [pc, #196]	; (8000b64 <HAL_UART_MspInit+0xec>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	4a30      	ldr	r2, [pc, #192]	; (8000b64 <HAL_UART_MspInit+0xec>)
 8000aa4:	f043 0310 	orr.w	r3, r3, #16
 8000aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aaa:	4b2e      	ldr	r3, [pc, #184]	; (8000b64 <HAL_UART_MspInit+0xec>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aae:	f003 0310 	and.w	r3, r3, #16
 8000ab2:	61bb      	str	r3, [r7, #24]
 8000ab4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	4b2a      	ldr	r3, [pc, #168]	; (8000b64 <HAL_UART_MspInit+0xec>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a29      	ldr	r2, [pc, #164]	; (8000b64 <HAL_UART_MspInit+0xec>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b27      	ldr	r3, [pc, #156]	; (8000b64 <HAL_UART_MspInit+0xec>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ad2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ae4:	2307      	movs	r3, #7
 8000ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4619      	mov	r1, r3
 8000aee:	481e      	ldr	r0, [pc, #120]	; (8000b68 <HAL_UART_MspInit+0xf0>)
 8000af0:	f000 fa56 	bl	8000fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000af4:	e030      	b.n	8000b58 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a1c      	ldr	r2, [pc, #112]	; (8000b6c <HAL_UART_MspInit+0xf4>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d12b      	bne.n	8000b58 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <HAL_UART_MspInit+0xec>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	4a16      	ldr	r2, [pc, #88]	; (8000b64 <HAL_UART_MspInit+0xec>)
 8000b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <HAL_UART_MspInit+0xec>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <HAL_UART_MspInit+0xec>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b24:	4a0f      	ldr	r2, [pc, #60]	; (8000b64 <HAL_UART_MspInit+0xec>)
 8000b26:	f043 0301 	orr.w	r3, r3, #1
 8000b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2c:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <HAL_UART_MspInit+0xec>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b38:	230c      	movs	r3, #12
 8000b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b44:	2303      	movs	r3, #3
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b48:	2307      	movs	r3, #7
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4c:	f107 031c 	add.w	r3, r7, #28
 8000b50:	4619      	mov	r1, r3
 8000b52:	4805      	ldr	r0, [pc, #20]	; (8000b68 <HAL_UART_MspInit+0xf0>)
 8000b54:	f000 fa24 	bl	8000fa0 <HAL_GPIO_Init>
}
 8000b58:	bf00      	nop
 8000b5a:	3730      	adds	r7, #48	; 0x30
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40011000 	.word	0x40011000
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020000 	.word	0x40020000
 8000b6c:	40004400 	.word	0x40004400

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <NMI_Handler+0x4>

08000b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <MemManage_Handler+0x4>

08000b82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bbc:	f000 f8c6 	bl	8000d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bcc:	4a14      	ldr	r2, [pc, #80]	; (8000c20 <_sbrk+0x5c>)
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <_sbrk+0x60>)
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd8:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d102      	bne.n	8000be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <_sbrk+0x64>)
 8000be2:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <_sbrk+0x68>)
 8000be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d207      	bcs.n	8000c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf4:	f002 fc1e 	bl	8003434 <__errno>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	e009      	b.n	8000c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0a:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <_sbrk+0x64>)
 8000c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c16:	68fb      	ldr	r3, [r7, #12]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20030000 	.word	0x20030000
 8000c24:	00000400 	.word	0x00000400
 8000c28:	20000170 	.word	0x20000170
 8000c2c:	20000188 	.word	0x20000188

08000c30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <SystemInit+0x20>)
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3a:	4a05      	ldr	r2, [pc, #20]	; (8000c50 <SystemInit+0x20>)
 8000c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c8c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c58:	480d      	ldr	r0, [pc, #52]	; (8000c90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c5a:	490e      	ldr	r1, [pc, #56]	; (8000c94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c5c:	4a0e      	ldr	r2, [pc, #56]	; (8000c98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c60:	e002      	b.n	8000c68 <LoopCopyDataInit>

08000c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c66:	3304      	adds	r3, #4

08000c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c6c:	d3f9      	bcc.n	8000c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6e:	4a0b      	ldr	r2, [pc, #44]	; (8000c9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c70:	4c0b      	ldr	r4, [pc, #44]	; (8000ca0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c74:	e001      	b.n	8000c7a <LoopFillZerobss>

08000c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c78:	3204      	adds	r2, #4

08000c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c7c:	d3fb      	bcc.n	8000c76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c7e:	f7ff ffd7 	bl	8000c30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c82:	f002 fbdd 	bl	8003440 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c86:	f7ff fc85 	bl	8000594 <main>
  bx  lr    
 8000c8a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c8c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c94:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c98:	08003e64 	.word	0x08003e64
  ldr r2, =_sbss
 8000c9c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ca0:	20000188 	.word	0x20000188

08000ca4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC_IRQHandler>
	...

08000ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cac:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <HAL_Init+0x40>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ce8 <HAL_Init+0x40>)
 8000cb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <HAL_Init+0x40>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <HAL_Init+0x40>)
 8000cbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <HAL_Init+0x40>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a07      	ldr	r2, [pc, #28]	; (8000ce8 <HAL_Init+0x40>)
 8000cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd0:	2003      	movs	r0, #3
 8000cd2:	f000 f931 	bl	8000f38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f000 f808 	bl	8000cec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cdc:	f7ff fe5c 	bl	8000998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40023c00 	.word	0x40023c00

08000cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_InitTick+0x54>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <HAL_InitTick+0x58>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 f93b 	bl	8000f86 <HAL_SYSTICK_Config>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e00e      	b.n	8000d38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b0f      	cmp	r3, #15
 8000d1e:	d80a      	bhi.n	8000d36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d20:	2200      	movs	r2, #0
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	f04f 30ff 	mov.w	r0, #4294967295
 8000d28:	f000 f911 	bl	8000f4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d2c:	4a06      	ldr	r2, [pc, #24]	; (8000d48 <HAL_InitTick+0x5c>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d32:	2300      	movs	r3, #0
 8000d34:	e000      	b.n	8000d38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000000 	.word	0x20000000
 8000d44:	20000008 	.word	0x20000008
 8000d48:	20000004 	.word	0x20000004

08000d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_IncTick+0x20>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	461a      	mov	r2, r3
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_IncTick+0x24>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <HAL_IncTick+0x24>)
 8000d5e:	6013      	str	r3, [r2, #0]
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	20000174 	.word	0x20000174

08000d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return uwTick;
 8000d78:	4b03      	ldr	r3, [pc, #12]	; (8000d88 <HAL_GetTick+0x14>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000174 	.word	0x20000174

08000d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d94:	f7ff ffee 	bl	8000d74 <HAL_GetTick>
 8000d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da4:	d005      	beq.n	8000db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000da6:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <HAL_Delay+0x44>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	461a      	mov	r2, r3
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	4413      	add	r3, r2
 8000db0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000db2:	bf00      	nop
 8000db4:	f7ff ffde 	bl	8000d74 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d8f7      	bhi.n	8000db4 <HAL_Delay+0x28>
  {
  }
}
 8000dc4:	bf00      	nop
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000008 	.word	0x20000008

08000dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <__NVIC_SetPriorityGrouping+0x44>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000df0:	4013      	ands	r3, r2
 8000df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e06:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <__NVIC_SetPriorityGrouping+0x44>)
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	60d3      	str	r3, [r2, #12]
}
 8000e0c:	bf00      	nop
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <__NVIC_GetPriorityGrouping+0x18>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	0a1b      	lsrs	r3, r3, #8
 8000e26:	f003 0307 	and.w	r3, r3, #7
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	6039      	str	r1, [r7, #0]
 8000e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	db0a      	blt.n	8000e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	490c      	ldr	r1, [pc, #48]	; (8000e84 <__NVIC_SetPriority+0x4c>)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	0112      	lsls	r2, r2, #4
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	440b      	add	r3, r1
 8000e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e60:	e00a      	b.n	8000e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	4908      	ldr	r1, [pc, #32]	; (8000e88 <__NVIC_SetPriority+0x50>)
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	f003 030f 	and.w	r3, r3, #15
 8000e6e:	3b04      	subs	r3, #4
 8000e70:	0112      	lsls	r2, r2, #4
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	440b      	add	r3, r1
 8000e76:	761a      	strb	r2, [r3, #24]
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000e100 	.word	0xe000e100
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b089      	sub	sp, #36	; 0x24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f1c3 0307 	rsb	r3, r3, #7
 8000ea6:	2b04      	cmp	r3, #4
 8000ea8:	bf28      	it	cs
 8000eaa:	2304      	movcs	r3, #4
 8000eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	2b06      	cmp	r3, #6
 8000eb4:	d902      	bls.n	8000ebc <NVIC_EncodePriority+0x30>
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3b03      	subs	r3, #3
 8000eba:	e000      	b.n	8000ebe <NVIC_EncodePriority+0x32>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43da      	mvns	r2, r3
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	401a      	ands	r2, r3
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	fa01 f303 	lsl.w	r3, r1, r3
 8000ede:	43d9      	mvns	r1, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	4313      	orrs	r3, r2
         );
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3724      	adds	r7, #36	; 0x24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
	...

08000ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f04:	d301      	bcc.n	8000f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00f      	b.n	8000f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <SysTick_Config+0x40>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f12:	210f      	movs	r1, #15
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	f7ff ff8e 	bl	8000e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <SysTick_Config+0x40>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f22:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <SysTick_Config+0x40>)
 8000f24:	2207      	movs	r2, #7
 8000f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	e000e010 	.word	0xe000e010

08000f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff ff47 	bl	8000dd4 <__NVIC_SetPriorityGrouping>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b086      	sub	sp, #24
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	4603      	mov	r3, r0
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
 8000f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f60:	f7ff ff5c 	bl	8000e1c <__NVIC_GetPriorityGrouping>
 8000f64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	68b9      	ldr	r1, [r7, #8]
 8000f6a:	6978      	ldr	r0, [r7, #20]
 8000f6c:	f7ff ff8e 	bl	8000e8c <NVIC_EncodePriority>
 8000f70:	4602      	mov	r2, r0
 8000f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f76:	4611      	mov	r1, r2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff5d 	bl	8000e38 <__NVIC_SetPriority>
}
 8000f7e:	bf00      	nop
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ffb0 	bl	8000ef4 <SysTick_Config>
 8000f94:	4603      	mov	r3, r0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b089      	sub	sp, #36	; 0x24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
 8000fba:	e177      	b.n	80012ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	f040 8166 	bne.w	80012a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d005      	beq.n	8000ff2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d130      	bne.n	8001054 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4013      	ands	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	68da      	ldr	r2, [r3, #12]
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001028:	2201      	movs	r2, #1
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	091b      	lsrs	r3, r3, #4
 800103e:	f003 0201 	and.w	r2, r3, #1
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	2b03      	cmp	r3, #3
 800105e:	d017      	beq.n	8001090 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d123      	bne.n	80010e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	08da      	lsrs	r2, r3, #3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3208      	adds	r2, #8
 80010a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	f003 0307 	and.w	r3, r3, #7
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	220f      	movs	r2, #15
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	691a      	ldr	r2, [r3, #16]
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	08da      	lsrs	r2, r3, #3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	3208      	adds	r2, #8
 80010de:	69b9      	ldr	r1, [r7, #24]
 80010e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	2203      	movs	r2, #3
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0203 	and.w	r2, r3, #3
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001120:	2b00      	cmp	r3, #0
 8001122:	f000 80c0 	beq.w	80012a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	4b66      	ldr	r3, [pc, #408]	; (80012c4 <HAL_GPIO_Init+0x324>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	4a65      	ldr	r2, [pc, #404]	; (80012c4 <HAL_GPIO_Init+0x324>)
 8001130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001134:	6453      	str	r3, [r2, #68]	; 0x44
 8001136:	4b63      	ldr	r3, [pc, #396]	; (80012c4 <HAL_GPIO_Init+0x324>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001142:	4a61      	ldr	r2, [pc, #388]	; (80012c8 <HAL_GPIO_Init+0x328>)
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	089b      	lsrs	r3, r3, #2
 8001148:	3302      	adds	r3, #2
 800114a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f003 0303 	and.w	r3, r3, #3
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	220f      	movs	r2, #15
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a58      	ldr	r2, [pc, #352]	; (80012cc <HAL_GPIO_Init+0x32c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d037      	beq.n	80011de <HAL_GPIO_Init+0x23e>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a57      	ldr	r2, [pc, #348]	; (80012d0 <HAL_GPIO_Init+0x330>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d031      	beq.n	80011da <HAL_GPIO_Init+0x23a>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a56      	ldr	r2, [pc, #344]	; (80012d4 <HAL_GPIO_Init+0x334>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d02b      	beq.n	80011d6 <HAL_GPIO_Init+0x236>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a55      	ldr	r2, [pc, #340]	; (80012d8 <HAL_GPIO_Init+0x338>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d025      	beq.n	80011d2 <HAL_GPIO_Init+0x232>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a54      	ldr	r2, [pc, #336]	; (80012dc <HAL_GPIO_Init+0x33c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d01f      	beq.n	80011ce <HAL_GPIO_Init+0x22e>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a53      	ldr	r2, [pc, #332]	; (80012e0 <HAL_GPIO_Init+0x340>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d019      	beq.n	80011ca <HAL_GPIO_Init+0x22a>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a52      	ldr	r2, [pc, #328]	; (80012e4 <HAL_GPIO_Init+0x344>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d013      	beq.n	80011c6 <HAL_GPIO_Init+0x226>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a51      	ldr	r2, [pc, #324]	; (80012e8 <HAL_GPIO_Init+0x348>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d00d      	beq.n	80011c2 <HAL_GPIO_Init+0x222>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a50      	ldr	r2, [pc, #320]	; (80012ec <HAL_GPIO_Init+0x34c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d007      	beq.n	80011be <HAL_GPIO_Init+0x21e>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4f      	ldr	r2, [pc, #316]	; (80012f0 <HAL_GPIO_Init+0x350>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d101      	bne.n	80011ba <HAL_GPIO_Init+0x21a>
 80011b6:	2309      	movs	r3, #9
 80011b8:	e012      	b.n	80011e0 <HAL_GPIO_Init+0x240>
 80011ba:	230a      	movs	r3, #10
 80011bc:	e010      	b.n	80011e0 <HAL_GPIO_Init+0x240>
 80011be:	2308      	movs	r3, #8
 80011c0:	e00e      	b.n	80011e0 <HAL_GPIO_Init+0x240>
 80011c2:	2307      	movs	r3, #7
 80011c4:	e00c      	b.n	80011e0 <HAL_GPIO_Init+0x240>
 80011c6:	2306      	movs	r3, #6
 80011c8:	e00a      	b.n	80011e0 <HAL_GPIO_Init+0x240>
 80011ca:	2305      	movs	r3, #5
 80011cc:	e008      	b.n	80011e0 <HAL_GPIO_Init+0x240>
 80011ce:	2304      	movs	r3, #4
 80011d0:	e006      	b.n	80011e0 <HAL_GPIO_Init+0x240>
 80011d2:	2303      	movs	r3, #3
 80011d4:	e004      	b.n	80011e0 <HAL_GPIO_Init+0x240>
 80011d6:	2302      	movs	r3, #2
 80011d8:	e002      	b.n	80011e0 <HAL_GPIO_Init+0x240>
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <HAL_GPIO_Init+0x240>
 80011de:	2300      	movs	r3, #0
 80011e0:	69fa      	ldr	r2, [r7, #28]
 80011e2:	f002 0203 	and.w	r2, r2, #3
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	4093      	lsls	r3, r2
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011f0:	4935      	ldr	r1, [pc, #212]	; (80012c8 <HAL_GPIO_Init+0x328>)
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	089b      	lsrs	r3, r3, #2
 80011f6:	3302      	adds	r3, #2
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011fe:	4b3d      	ldr	r3, [pc, #244]	; (80012f4 <HAL_GPIO_Init+0x354>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001222:	4a34      	ldr	r2, [pc, #208]	; (80012f4 <HAL_GPIO_Init+0x354>)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001228:	4b32      	ldr	r3, [pc, #200]	; (80012f4 <HAL_GPIO_Init+0x354>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800124c:	4a29      	ldr	r2, [pc, #164]	; (80012f4 <HAL_GPIO_Init+0x354>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001252:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <HAL_GPIO_Init+0x354>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001276:	4a1f      	ldr	r2, [pc, #124]	; (80012f4 <HAL_GPIO_Init+0x354>)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800127c:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <HAL_GPIO_Init+0x354>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012a0:	4a14      	ldr	r2, [pc, #80]	; (80012f4 <HAL_GPIO_Init+0x354>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3301      	adds	r3, #1
 80012aa:	61fb      	str	r3, [r7, #28]
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	2b0f      	cmp	r3, #15
 80012b0:	f67f ae84 	bls.w	8000fbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	3724      	adds	r7, #36	; 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40013800 	.word	0x40013800
 80012cc:	40020000 	.word	0x40020000
 80012d0:	40020400 	.word	0x40020400
 80012d4:	40020800 	.word	0x40020800
 80012d8:	40020c00 	.word	0x40020c00
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40021400 	.word	0x40021400
 80012e4:	40021800 	.word	0x40021800
 80012e8:	40021c00 	.word	0x40021c00
 80012ec:	40022000 	.word	0x40022000
 80012f0:	40022400 	.word	0x40022400
 80012f4:	40013c00 	.word	0x40013c00

080012f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	807b      	strh	r3, [r7, #2]
 8001304:	4613      	mov	r3, r2
 8001306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001308:	787b      	ldrb	r3, [r7, #1]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800130e:	887a      	ldrh	r2, [r7, #2]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001314:	e003      	b.n	800131e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001316:	887b      	ldrh	r3, [r7, #2]
 8001318:	041a      	lsls	r2, r3, #16
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	619a      	str	r2, [r3, #24]
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800132a:	b480      	push	{r7}
 800132c:	b085      	sub	sp, #20
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	460b      	mov	r3, r1
 8001334:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800133c:	887a      	ldrh	r2, [r7, #2]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	4013      	ands	r3, r2
 8001342:	041a      	lsls	r2, r3, #16
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	43d9      	mvns	r1, r3
 8001348:	887b      	ldrh	r3, [r7, #2]
 800134a:	400b      	ands	r3, r1
 800134c:	431a      	orrs	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	619a      	str	r2, [r3, #24]
}
 8001352:	bf00      	nop
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e12b      	b.n	80015ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d106      	bne.n	800138c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff fb2e 	bl	80009e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2224      	movs	r2, #36	; 0x24
 8001390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0201 	bic.w	r2, r2, #1
 80013a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013c4:	f001 fc4c 	bl	8002c60 <HAL_RCC_GetPCLK1Freq>
 80013c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	4a81      	ldr	r2, [pc, #516]	; (80015d4 <HAL_I2C_Init+0x274>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d807      	bhi.n	80013e4 <HAL_I2C_Init+0x84>
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4a80      	ldr	r2, [pc, #512]	; (80015d8 <HAL_I2C_Init+0x278>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	bf94      	ite	ls
 80013dc:	2301      	movls	r3, #1
 80013de:	2300      	movhi	r3, #0
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	e006      	b.n	80013f2 <HAL_I2C_Init+0x92>
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4a7d      	ldr	r2, [pc, #500]	; (80015dc <HAL_I2C_Init+0x27c>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	bf94      	ite	ls
 80013ec:	2301      	movls	r3, #1
 80013ee:	2300      	movhi	r3, #0
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e0e7      	b.n	80015ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4a78      	ldr	r2, [pc, #480]	; (80015e0 <HAL_I2C_Init+0x280>)
 80013fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001402:	0c9b      	lsrs	r3, r3, #18
 8001404:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	68ba      	ldr	r2, [r7, #8]
 8001416:	430a      	orrs	r2, r1
 8001418:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	4a6a      	ldr	r2, [pc, #424]	; (80015d4 <HAL_I2C_Init+0x274>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d802      	bhi.n	8001434 <HAL_I2C_Init+0xd4>
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	3301      	adds	r3, #1
 8001432:	e009      	b.n	8001448 <HAL_I2C_Init+0xe8>
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800143a:	fb02 f303 	mul.w	r3, r2, r3
 800143e:	4a69      	ldr	r2, [pc, #420]	; (80015e4 <HAL_I2C_Init+0x284>)
 8001440:	fba2 2303 	umull	r2, r3, r2, r3
 8001444:	099b      	lsrs	r3, r3, #6
 8001446:	3301      	adds	r3, #1
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	6812      	ldr	r2, [r2, #0]
 800144c:	430b      	orrs	r3, r1
 800144e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800145a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	495c      	ldr	r1, [pc, #368]	; (80015d4 <HAL_I2C_Init+0x274>)
 8001464:	428b      	cmp	r3, r1
 8001466:	d819      	bhi.n	800149c <HAL_I2C_Init+0x13c>
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	1e59      	subs	r1, r3, #1
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	fbb1 f3f3 	udiv	r3, r1, r3
 8001476:	1c59      	adds	r1, r3, #1
 8001478:	f640 73fc 	movw	r3, #4092	; 0xffc
 800147c:	400b      	ands	r3, r1
 800147e:	2b00      	cmp	r3, #0
 8001480:	d00a      	beq.n	8001498 <HAL_I2C_Init+0x138>
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	1e59      	subs	r1, r3, #1
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001490:	3301      	adds	r3, #1
 8001492:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001496:	e051      	b.n	800153c <HAL_I2C_Init+0x1dc>
 8001498:	2304      	movs	r3, #4
 800149a:	e04f      	b.n	800153c <HAL_I2C_Init+0x1dc>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d111      	bne.n	80014c8 <HAL_I2C_Init+0x168>
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	1e58      	subs	r0, r3, #1
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6859      	ldr	r1, [r3, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	440b      	add	r3, r1
 80014b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014b6:	3301      	adds	r3, #1
 80014b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014bc:	2b00      	cmp	r3, #0
 80014be:	bf0c      	ite	eq
 80014c0:	2301      	moveq	r3, #1
 80014c2:	2300      	movne	r3, #0
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	e012      	b.n	80014ee <HAL_I2C_Init+0x18e>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	1e58      	subs	r0, r3, #1
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6859      	ldr	r1, [r3, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	0099      	lsls	r1, r3, #2
 80014d8:	440b      	add	r3, r1
 80014da:	fbb0 f3f3 	udiv	r3, r0, r3
 80014de:	3301      	adds	r3, #1
 80014e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	bf0c      	ite	eq
 80014e8:	2301      	moveq	r3, #1
 80014ea:	2300      	movne	r3, #0
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_I2C_Init+0x196>
 80014f2:	2301      	movs	r3, #1
 80014f4:	e022      	b.n	800153c <HAL_I2C_Init+0x1dc>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10e      	bne.n	800151c <HAL_I2C_Init+0x1bc>
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	1e58      	subs	r0, r3, #1
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6859      	ldr	r1, [r3, #4]
 8001506:	460b      	mov	r3, r1
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	440b      	add	r3, r1
 800150c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001510:	3301      	adds	r3, #1
 8001512:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800151a:	e00f      	b.n	800153c <HAL_I2C_Init+0x1dc>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	1e58      	subs	r0, r3, #1
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6859      	ldr	r1, [r3, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	440b      	add	r3, r1
 800152a:	0099      	lsls	r1, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001532:	3301      	adds	r3, #1
 8001534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001538:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	6809      	ldr	r1, [r1, #0]
 8001540:	4313      	orrs	r3, r2
 8001542:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69da      	ldr	r2, [r3, #28]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	431a      	orrs	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	430a      	orrs	r2, r1
 800155e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800156a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	6911      	ldr	r1, [r2, #16]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	68d2      	ldr	r2, [r2, #12]
 8001576:	4311      	orrs	r1, r2
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	6812      	ldr	r2, [r2, #0]
 800157c:	430b      	orrs	r3, r1
 800157e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	695a      	ldr	r2, [r3, #20]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	431a      	orrs	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	430a      	orrs	r2, r1
 800159a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 0201 	orr.w	r2, r2, #1
 80015aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2220      	movs	r2, #32
 80015b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	000186a0 	.word	0x000186a0
 80015d8:	001e847f 	.word	0x001e847f
 80015dc:	003d08ff 	.word	0x003d08ff
 80015e0:	431bde83 	.word	0x431bde83
 80015e4:	10624dd3 	.word	0x10624dd3

080015e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af02      	add	r7, sp, #8
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	607a      	str	r2, [r7, #4]
 80015f2:	461a      	mov	r2, r3
 80015f4:	460b      	mov	r3, r1
 80015f6:	817b      	strh	r3, [r7, #10]
 80015f8:	4613      	mov	r3, r2
 80015fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80015fc:	f7ff fbba 	bl	8000d74 <HAL_GetTick>
 8001600:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b20      	cmp	r3, #32
 800160c:	f040 80e0 	bne.w	80017d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	2319      	movs	r3, #25
 8001616:	2201      	movs	r2, #1
 8001618:	4970      	ldr	r1, [pc, #448]	; (80017dc <HAL_I2C_Master_Transmit+0x1f4>)
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 fc58 	bl	8001ed0 <I2C_WaitOnFlagUntilTimeout>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001626:	2302      	movs	r3, #2
 8001628:	e0d3      	b.n	80017d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001630:	2b01      	cmp	r3, #1
 8001632:	d101      	bne.n	8001638 <HAL_I2C_Master_Transmit+0x50>
 8001634:	2302      	movs	r3, #2
 8001636:	e0cc      	b.n	80017d2 <HAL_I2C_Master_Transmit+0x1ea>
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	2b01      	cmp	r3, #1
 800164c:	d007      	beq.n	800165e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f042 0201 	orr.w	r2, r2, #1
 800165c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800166c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2221      	movs	r2, #33	; 0x21
 8001672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2210      	movs	r2, #16
 800167a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2200      	movs	r2, #0
 8001682:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	893a      	ldrh	r2, [r7, #8]
 800168e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001694:	b29a      	uxth	r2, r3
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4a50      	ldr	r2, [pc, #320]	; (80017e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800169e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80016a0:	8979      	ldrh	r1, [r7, #10]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	6a3a      	ldr	r2, [r7, #32]
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f000 fac2 	bl	8001c30 <I2C_MasterRequestWrite>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e08d      	b.n	80017d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80016cc:	e066      	b.n	800179c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016ce:	697a      	ldr	r2, [r7, #20]
 80016d0:	6a39      	ldr	r1, [r7, #32]
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f000 fcd2 	bl	800207c <I2C_WaitOnTXEFlagUntilTimeout>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00d      	beq.n	80016fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	d107      	bne.n	80016f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e06b      	b.n	80017d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fe:	781a      	ldrb	r2, [r3, #0]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001714:	b29b      	uxth	r3, r3
 8001716:	3b01      	subs	r3, #1
 8001718:	b29a      	uxth	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001722:	3b01      	subs	r3, #1
 8001724:	b29a      	uxth	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b04      	cmp	r3, #4
 8001736:	d11b      	bne.n	8001770 <HAL_I2C_Master_Transmit+0x188>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800173c:	2b00      	cmp	r3, #0
 800173e:	d017      	beq.n	8001770 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	781a      	ldrb	r2, [r3, #0]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	1c5a      	adds	r2, r3, #1
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800175a:	b29b      	uxth	r3, r3
 800175c:	3b01      	subs	r3, #1
 800175e:	b29a      	uxth	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001768:	3b01      	subs	r3, #1
 800176a:	b29a      	uxth	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	6a39      	ldr	r1, [r7, #32]
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f000 fcc2 	bl	80020fe <I2C_WaitOnBTFFlagUntilTimeout>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00d      	beq.n	800179c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	2b04      	cmp	r3, #4
 8001786:	d107      	bne.n	8001798 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001796:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e01a      	b.n	80017d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d194      	bne.n	80016ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2220      	movs	r2, #32
 80017b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80017cc:	2300      	movs	r3, #0
 80017ce:	e000      	b.n	80017d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80017d0:	2302      	movs	r3, #2
  }
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	00100002 	.word	0x00100002
 80017e0:	ffff0000 	.word	0xffff0000

080017e4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08c      	sub	sp, #48	; 0x30
 80017e8:	af02      	add	r7, sp, #8
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	607a      	str	r2, [r7, #4]
 80017ee:	461a      	mov	r2, r3
 80017f0:	460b      	mov	r3, r1
 80017f2:	817b      	strh	r3, [r7, #10]
 80017f4:	4613      	mov	r3, r2
 80017f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017f8:	f7ff fabc 	bl	8000d74 <HAL_GetTick>
 80017fc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b20      	cmp	r3, #32
 8001808:	f040 820b 	bne.w	8001c22 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	2319      	movs	r3, #25
 8001812:	2201      	movs	r2, #1
 8001814:	497c      	ldr	r1, [pc, #496]	; (8001a08 <HAL_I2C_Master_Receive+0x224>)
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f000 fb5a 	bl	8001ed0 <I2C_WaitOnFlagUntilTimeout>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001822:	2302      	movs	r3, #2
 8001824:	e1fe      	b.n	8001c24 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800182c:	2b01      	cmp	r3, #1
 800182e:	d101      	bne.n	8001834 <HAL_I2C_Master_Receive+0x50>
 8001830:	2302      	movs	r3, #2
 8001832:	e1f7      	b.n	8001c24 <HAL_I2C_Master_Receive+0x440>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b01      	cmp	r3, #1
 8001848:	d007      	beq.n	800185a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f042 0201 	orr.w	r2, r2, #1
 8001858:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001868:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2222      	movs	r2, #34	; 0x22
 800186e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2210      	movs	r2, #16
 8001876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	893a      	ldrh	r2, [r7, #8]
 800188a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001890:	b29a      	uxth	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4a5c      	ldr	r2, [pc, #368]	; (8001a0c <HAL_I2C_Master_Receive+0x228>)
 800189a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800189c:	8979      	ldrh	r1, [r7, #10]
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f000 fa46 	bl	8001d34 <I2C_MasterRequestRead>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e1b8      	b.n	8001c24 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d113      	bne.n	80018e2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ba:	2300      	movs	r3, #0
 80018bc:	623b      	str	r3, [r7, #32]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	623b      	str	r3, [r7, #32]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	623b      	str	r3, [r7, #32]
 80018ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	e18c      	b.n	8001bfc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d11b      	bne.n	8001922 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	695b      	ldr	r3, [r3, #20]
 8001904:	61fb      	str	r3, [r7, #28]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	61fb      	str	r3, [r7, #28]
 800190e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	e16c      	b.n	8001bfc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001926:	2b02      	cmp	r3, #2
 8001928:	d11b      	bne.n	8001962 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001938:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001948:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800194a:	2300      	movs	r3, #0
 800194c:	61bb      	str	r3, [r7, #24]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	61bb      	str	r3, [r7, #24]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	61bb      	str	r3, [r7, #24]
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	e14c      	b.n	8001bfc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001970:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001988:	e138      	b.n	8001bfc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800198e:	2b03      	cmp	r3, #3
 8001990:	f200 80f1 	bhi.w	8001b76 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001998:	2b01      	cmp	r3, #1
 800199a:	d123      	bne.n	80019e4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800199c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800199e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80019a0:	68f8      	ldr	r0, [r7, #12]
 80019a2:	f000 fbed 	bl	8002180 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e139      	b.n	8001c24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	691a      	ldr	r2, [r3, #16]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	1c5a      	adds	r2, r3, #1
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019cc:	3b01      	subs	r3, #1
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d8:	b29b      	uxth	r3, r3
 80019da:	3b01      	subs	r3, #1
 80019dc:	b29a      	uxth	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80019e2:	e10b      	b.n	8001bfc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d14e      	bne.n	8001a8a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f2:	2200      	movs	r2, #0
 80019f4:	4906      	ldr	r1, [pc, #24]	; (8001a10 <HAL_I2C_Master_Receive+0x22c>)
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 fa6a 	bl	8001ed0 <I2C_WaitOnFlagUntilTimeout>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d008      	beq.n	8001a14 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e10e      	b.n	8001c24 <HAL_I2C_Master_Receive+0x440>
 8001a06:	bf00      	nop
 8001a08:	00100002 	.word	0x00100002
 8001a0c:	ffff0000 	.word	0xffff0000
 8001a10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	691a      	ldr	r2, [r3, #16]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a40:	3b01      	subs	r3, #1
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a68:	1c5a      	adds	r2, r3, #1
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a72:	3b01      	subs	r3, #1
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	3b01      	subs	r3, #1
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a88:	e0b8      	b.n	8001bfc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a90:	2200      	movs	r2, #0
 8001a92:	4966      	ldr	r1, [pc, #408]	; (8001c2c <HAL_I2C_Master_Receive+0x448>)
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f000 fa1b 	bl	8001ed0 <I2C_WaitOnFlagUntilTimeout>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0bf      	b.n	8001c24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ab2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	691a      	ldr	r2, [r3, #16]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aec:	2200      	movs	r2, #0
 8001aee:	494f      	ldr	r1, [pc, #316]	; (8001c2c <HAL_I2C_Master_Receive+0x448>)
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f000 f9ed 	bl	8001ed0 <I2C_WaitOnFlagUntilTimeout>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e091      	b.n	8001c24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	691a      	ldr	r2, [r3, #16]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	691a      	ldr	r2, [r3, #16]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b74:	e042      	b.n	8001bfc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 fb00 	bl	8002180 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e04c      	b.n	8001c24 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	691a      	ldr	r2, [r3, #16]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d118      	bne.n	8001bfc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	691a      	ldr	r2, [r3, #16]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	1c5a      	adds	r2, r3, #1
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be6:	3b01      	subs	r3, #1
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f47f aec2 	bne.w	800198a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2220      	movs	r2, #32
 8001c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	e000      	b.n	8001c24 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001c22:	2302      	movs	r3, #2
  }
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3728      	adds	r7, #40	; 0x28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	00010004 	.word	0x00010004

08001c30 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b088      	sub	sp, #32
 8001c34:	af02      	add	r7, sp, #8
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	607a      	str	r2, [r7, #4]
 8001c3a:	603b      	str	r3, [r7, #0]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c44:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d006      	beq.n	8001c5a <I2C_MasterRequestWrite+0x2a>
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d003      	beq.n	8001c5a <I2C_MasterRequestWrite+0x2a>
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c58:	d108      	bne.n	8001c6c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	e00b      	b.n	8001c84 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c70:	2b12      	cmp	r3, #18
 8001c72:	d107      	bne.n	8001c84 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f000 f91d 	bl	8001ed0 <I2C_WaitOnFlagUntilTimeout>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d00d      	beq.n	8001cb8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001caa:	d103      	bne.n	8001cb4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e035      	b.n	8001d24 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cc0:	d108      	bne.n	8001cd4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cc2:	897b      	ldrh	r3, [r7, #10]
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001cd0:	611a      	str	r2, [r3, #16]
 8001cd2:	e01b      	b.n	8001d0c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001cd4:	897b      	ldrh	r3, [r7, #10]
 8001cd6:	11db      	asrs	r3, r3, #7
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	f003 0306 	and.w	r3, r3, #6
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	f063 030f 	orn	r3, r3, #15
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	490e      	ldr	r1, [pc, #56]	; (8001d2c <I2C_MasterRequestWrite+0xfc>)
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 f943 	bl	8001f7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e010      	b.n	8001d24 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d02:	897b      	ldrh	r3, [r7, #10]
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	4907      	ldr	r1, [pc, #28]	; (8001d30 <I2C_MasterRequestWrite+0x100>)
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f000 f933 	bl	8001f7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e000      	b.n	8001d24 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	00010008 	.word	0x00010008
 8001d30:	00010002 	.word	0x00010002

08001d34 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af02      	add	r7, sp, #8
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	607a      	str	r2, [r7, #4]
 8001d3e:	603b      	str	r3, [r7, #0]
 8001d40:	460b      	mov	r3, r1
 8001d42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d48:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d58:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2b08      	cmp	r3, #8
 8001d5e:	d006      	beq.n	8001d6e <I2C_MasterRequestRead+0x3a>
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d003      	beq.n	8001d6e <I2C_MasterRequestRead+0x3a>
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d6c:	d108      	bne.n	8001d80 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	e00b      	b.n	8001d98 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d84:	2b11      	cmp	r3, #17
 8001d86:	d107      	bne.n	8001d98 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f000 f893 	bl	8001ed0 <I2C_WaitOnFlagUntilTimeout>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00d      	beq.n	8001dcc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dbe:	d103      	bne.n	8001dc8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e079      	b.n	8001ec0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001dd4:	d108      	bne.n	8001de8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001dd6:	897b      	ldrh	r3, [r7, #10]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	611a      	str	r2, [r3, #16]
 8001de6:	e05f      	b.n	8001ea8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001de8:	897b      	ldrh	r3, [r7, #10]
 8001dea:	11db      	asrs	r3, r3, #7
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	f003 0306 	and.w	r3, r3, #6
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	f063 030f 	orn	r3, r3, #15
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	4930      	ldr	r1, [pc, #192]	; (8001ec8 <I2C_MasterRequestRead+0x194>)
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f000 f8b9 	bl	8001f7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e054      	b.n	8001ec0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e16:	897b      	ldrh	r3, [r7, #10]
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	4929      	ldr	r1, [pc, #164]	; (8001ecc <I2C_MasterRequestRead+0x198>)
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 f8a9 	bl	8001f7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e044      	b.n	8001ec0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e36:	2300      	movs	r3, #0
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e5a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f000 f831 	bl	8001ed0 <I2C_WaitOnFlagUntilTimeout>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00d      	beq.n	8001e90 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e82:	d103      	bne.n	8001e8c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e8a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e017      	b.n	8001ec0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001e90:	897b      	ldrh	r3, [r7, #10]
 8001e92:	11db      	asrs	r3, r3, #7
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	f003 0306 	and.w	r3, r3, #6
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	f063 030e 	orn	r3, r3, #14
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	4907      	ldr	r1, [pc, #28]	; (8001ecc <I2C_MasterRequestRead+0x198>)
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 f865 	bl	8001f7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	00010008 	.word	0x00010008
 8001ecc:	00010002 	.word	0x00010002

08001ed0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	4613      	mov	r3, r2
 8001ede:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ee0:	e025      	b.n	8001f2e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee8:	d021      	beq.n	8001f2e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eea:	f7fe ff43 	bl	8000d74 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d302      	bcc.n	8001f00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d116      	bne.n	8001f2e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2220      	movs	r2, #32
 8001f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f043 0220 	orr.w	r2, r3, #32
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e023      	b.n	8001f76 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	0c1b      	lsrs	r3, r3, #16
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d10d      	bne.n	8001f54 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	43da      	mvns	r2, r3
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	4013      	ands	r3, r2
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	bf0c      	ite	eq
 8001f4a:	2301      	moveq	r3, #1
 8001f4c:	2300      	movne	r3, #0
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	461a      	mov	r2, r3
 8001f52:	e00c      	b.n	8001f6e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	bf0c      	ite	eq
 8001f66:	2301      	moveq	r3, #1
 8001f68:	2300      	movne	r3, #0
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d0b6      	beq.n	8001ee2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b084      	sub	sp, #16
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	60f8      	str	r0, [r7, #12]
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	607a      	str	r2, [r7, #4]
 8001f8a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f8c:	e051      	b.n	8002032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f9c:	d123      	bne.n	8001fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fb6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2220      	movs	r2, #32
 8001fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f043 0204 	orr.w	r2, r3, #4
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e046      	b.n	8002074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fec:	d021      	beq.n	8002032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fee:	f7fe fec1 	bl	8000d74 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d302      	bcc.n	8002004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d116      	bne.n	8002032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2220      	movs	r2, #32
 800200e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	f043 0220 	orr.w	r2, r3, #32
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e020      	b.n	8002074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	0c1b      	lsrs	r3, r3, #16
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b01      	cmp	r3, #1
 800203a:	d10c      	bne.n	8002056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	43da      	mvns	r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	4013      	ands	r3, r2
 8002048:	b29b      	uxth	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	bf14      	ite	ne
 800204e:	2301      	movne	r3, #1
 8002050:	2300      	moveq	r3, #0
 8002052:	b2db      	uxtb	r3, r3
 8002054:	e00b      	b.n	800206e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	43da      	mvns	r2, r3
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	4013      	ands	r3, r2
 8002062:	b29b      	uxth	r3, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	bf14      	ite	ne
 8002068:	2301      	movne	r3, #1
 800206a:	2300      	moveq	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d18d      	bne.n	8001f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002088:	e02d      	b.n	80020e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 f8ce 	bl	800222c <I2C_IsAcknowledgeFailed>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e02d      	b.n	80020f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a0:	d021      	beq.n	80020e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020a2:	f7fe fe67 	bl	8000d74 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d302      	bcc.n	80020b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d116      	bne.n	80020e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2220      	movs	r2, #32
 80020c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f043 0220 	orr.w	r2, r3, #32
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e007      	b.n	80020f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f0:	2b80      	cmp	r3, #128	; 0x80
 80020f2:	d1ca      	bne.n	800208a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b084      	sub	sp, #16
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800210a:	e02d      	b.n	8002168 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f000 f88d 	bl	800222c <I2C_IsAcknowledgeFailed>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e02d      	b.n	8002178 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002122:	d021      	beq.n	8002168 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002124:	f7fe fe26 	bl	8000d74 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	429a      	cmp	r2, r3
 8002132:	d302      	bcc.n	800213a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d116      	bne.n	8002168 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2220      	movs	r2, #32
 8002144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	f043 0220 	orr.w	r2, r3, #32
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e007      	b.n	8002178 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	2b04      	cmp	r3, #4
 8002174:	d1ca      	bne.n	800210c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800218c:	e042      	b.n	8002214 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	f003 0310 	and.w	r3, r3, #16
 8002198:	2b10      	cmp	r3, #16
 800219a:	d119      	bne.n	80021d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f06f 0210 	mvn.w	r2, #16
 80021a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2220      	movs	r2, #32
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e029      	b.n	8002224 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021d0:	f7fe fdd0 	bl	8000d74 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d302      	bcc.n	80021e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d116      	bne.n	8002214 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2220      	movs	r2, #32
 80021f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	f043 0220 	orr.w	r2, r3, #32
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e007      	b.n	8002224 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800221e:	2b40      	cmp	r3, #64	; 0x40
 8002220:	d1b5      	bne.n	800218e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800223e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002242:	d11b      	bne.n	800227c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800224c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2220      	movs	r2, #32
 8002258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	f043 0204 	orr.w	r2, r3, #4
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b20      	cmp	r3, #32
 800229e:	d129      	bne.n	80022f4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2224      	movs	r2, #36	; 0x24
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0201 	bic.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 0210 	bic.w	r2, r2, #16
 80022c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0201 	orr.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2220      	movs	r2, #32
 80022ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	e000      	b.n	80022f6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80022f4:	2302      	movs	r3, #2
  }
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002302:	b480      	push	{r7}
 8002304:	b085      	sub	sp, #20
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b20      	cmp	r3, #32
 800231a:	d12a      	bne.n	8002372 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2224      	movs	r2, #36	; 0x24
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0201 	bic.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800233c:	89fb      	ldrh	r3, [r7, #14]
 800233e:	f023 030f 	bic.w	r3, r3, #15
 8002342:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	b29a      	uxth	r2, r3
 8002348:	89fb      	ldrh	r3, [r7, #14]
 800234a:	4313      	orrs	r3, r2
 800234c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	89fa      	ldrh	r2, [r7, #14]
 8002354:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f042 0201 	orr.w	r2, r2, #1
 8002364:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2220      	movs	r2, #32
 800236a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800236e:	2300      	movs	r3, #0
 8002370:	e000      	b.n	8002374 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002372:	2302      	movs	r3, #2
  }
}
 8002374:	4618      	mov	r0, r3
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e267      	b.n	8002862 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d075      	beq.n	800248a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800239e:	4b88      	ldr	r3, [pc, #544]	; (80025c0 <HAL_RCC_OscConfig+0x240>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d00c      	beq.n	80023c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023aa:	4b85      	ldr	r3, [pc, #532]	; (80025c0 <HAL_RCC_OscConfig+0x240>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023b2:	2b08      	cmp	r3, #8
 80023b4:	d112      	bne.n	80023dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023b6:	4b82      	ldr	r3, [pc, #520]	; (80025c0 <HAL_RCC_OscConfig+0x240>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023c2:	d10b      	bne.n	80023dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c4:	4b7e      	ldr	r3, [pc, #504]	; (80025c0 <HAL_RCC_OscConfig+0x240>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d05b      	beq.n	8002488 <HAL_RCC_OscConfig+0x108>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d157      	bne.n	8002488 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e242      	b.n	8002862 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e4:	d106      	bne.n	80023f4 <HAL_RCC_OscConfig+0x74>
 80023e6:	4b76      	ldr	r3, [pc, #472]	; (80025c0 <HAL_RCC_OscConfig+0x240>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a75      	ldr	r2, [pc, #468]	; (80025c0 <HAL_RCC_OscConfig+0x240>)
 80023ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	e01d      	b.n	8002430 <HAL_RCC_OscConfig+0xb0>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023fc:	d10c      	bne.n	8002418 <HAL_RCC_OscConfig+0x98>
 80023fe:	4b70      	ldr	r3, [pc, #448]	; (80025c0 <HAL_RCC_OscConfig+0x240>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a6f      	ldr	r2, [pc, #444]	; (80025c0 <HAL_RCC_OscConfig+0x240>)
 8002404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	4b6d      	ldr	r3, [pc, #436]	; (80025c0 <HAL_RCC_OscConfig+0x240>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a6c      	ldr	r2, [pc, #432]	; (80025c0 <HAL_RCC_OscConfig+0x240>)
 8002410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	e00b      	b.n	8002430 <HAL_RCC_OscConfig+0xb0>
 8002418:	4b69      	ldr	r3, [pc, #420]	; (80025c0 <HAL_RCC_OscConfig+0x240>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a68      	ldr	r2, [pc, #416]	; (80025c0 <HAL_RCC_OscConfig+0x240>)
 800241e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002422:	6013      	str	r3, [r2, #0]
 8002424:	4b66      	ldr	r3, [pc, #408]	; (80025c0 <HAL_RCC_OscConfig+0x240>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a65      	ldr	r2, [pc, #404]	; (80025c0 <HAL_RCC_OscConfig+0x240>)
 800242a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800242e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d013      	beq.n	8002460 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002438:	f7fe fc9c 	bl	8000d74 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002440:	f7fe fc98 	bl	8000d74 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b64      	cmp	r3, #100	; 0x64
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e207      	b.n	8002862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002452:	4b5b      	ldr	r3, [pc, #364]	; (80025c0 <HAL_RCC_OscConfig+0x240>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0f0      	beq.n	8002440 <HAL_RCC_OscConfig+0xc0>
 800245e:	e014      	b.n	800248a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002460:	f7fe fc88 	bl	8000d74 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002468:	f7fe fc84 	bl	8000d74 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b64      	cmp	r3, #100	; 0x64
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e1f3      	b.n	8002862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800247a:	4b51      	ldr	r3, [pc, #324]	; (80025c0 <HAL_RCC_OscConfig+0x240>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0xe8>
 8002486:	e000      	b.n	800248a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d063      	beq.n	800255e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002496:	4b4a      	ldr	r3, [pc, #296]	; (80025c0 <HAL_RCC_OscConfig+0x240>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 030c 	and.w	r3, r3, #12
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00b      	beq.n	80024ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024a2:	4b47      	ldr	r3, [pc, #284]	; (80025c0 <HAL_RCC_OscConfig+0x240>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	d11c      	bne.n	80024e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ae:	4b44      	ldr	r3, [pc, #272]	; (80025c0 <HAL_RCC_OscConfig+0x240>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d116      	bne.n	80024e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ba:	4b41      	ldr	r3, [pc, #260]	; (80025c0 <HAL_RCC_OscConfig+0x240>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d005      	beq.n	80024d2 <HAL_RCC_OscConfig+0x152>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d001      	beq.n	80024d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e1c7      	b.n	8002862 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d2:	4b3b      	ldr	r3, [pc, #236]	; (80025c0 <HAL_RCC_OscConfig+0x240>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	4937      	ldr	r1, [pc, #220]	; (80025c0 <HAL_RCC_OscConfig+0x240>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024e6:	e03a      	b.n	800255e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d020      	beq.n	8002532 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024f0:	4b34      	ldr	r3, [pc, #208]	; (80025c4 <HAL_RCC_OscConfig+0x244>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f6:	f7fe fc3d 	bl	8000d74 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024fe:	f7fe fc39 	bl	8000d74 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e1a8      	b.n	8002862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002510:	4b2b      	ldr	r3, [pc, #172]	; (80025c0 <HAL_RCC_OscConfig+0x240>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0f0      	beq.n	80024fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251c:	4b28      	ldr	r3, [pc, #160]	; (80025c0 <HAL_RCC_OscConfig+0x240>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	4925      	ldr	r1, [pc, #148]	; (80025c0 <HAL_RCC_OscConfig+0x240>)
 800252c:	4313      	orrs	r3, r2
 800252e:	600b      	str	r3, [r1, #0]
 8002530:	e015      	b.n	800255e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002532:	4b24      	ldr	r3, [pc, #144]	; (80025c4 <HAL_RCC_OscConfig+0x244>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7fe fc1c 	bl	8000d74 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002540:	f7fe fc18 	bl	8000d74 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e187      	b.n	8002862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002552:	4b1b      	ldr	r3, [pc, #108]	; (80025c0 <HAL_RCC_OscConfig+0x240>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d036      	beq.n	80025d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d016      	beq.n	80025a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002572:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <HAL_RCC_OscConfig+0x248>)
 8002574:	2201      	movs	r2, #1
 8002576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002578:	f7fe fbfc 	bl	8000d74 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002580:	f7fe fbf8 	bl	8000d74 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e167      	b.n	8002862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002592:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_RCC_OscConfig+0x240>)
 8002594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0x200>
 800259e:	e01b      	b.n	80025d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025a0:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <HAL_RCC_OscConfig+0x248>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a6:	f7fe fbe5 	bl	8000d74 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ac:	e00e      	b.n	80025cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ae:	f7fe fbe1 	bl	8000d74 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d907      	bls.n	80025cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e150      	b.n	8002862 <HAL_RCC_OscConfig+0x4e2>
 80025c0:	40023800 	.word	0x40023800
 80025c4:	42470000 	.word	0x42470000
 80025c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025cc:	4b88      	ldr	r3, [pc, #544]	; (80027f0 <HAL_RCC_OscConfig+0x470>)
 80025ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1ea      	bne.n	80025ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 8097 	beq.w	8002714 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025e6:	2300      	movs	r3, #0
 80025e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ea:	4b81      	ldr	r3, [pc, #516]	; (80027f0 <HAL_RCC_OscConfig+0x470>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10f      	bne.n	8002616 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	4b7d      	ldr	r3, [pc, #500]	; (80027f0 <HAL_RCC_OscConfig+0x470>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	4a7c      	ldr	r2, [pc, #496]	; (80027f0 <HAL_RCC_OscConfig+0x470>)
 8002600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002604:	6413      	str	r3, [r2, #64]	; 0x40
 8002606:	4b7a      	ldr	r3, [pc, #488]	; (80027f0 <HAL_RCC_OscConfig+0x470>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002612:	2301      	movs	r3, #1
 8002614:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002616:	4b77      	ldr	r3, [pc, #476]	; (80027f4 <HAL_RCC_OscConfig+0x474>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d118      	bne.n	8002654 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002622:	4b74      	ldr	r3, [pc, #464]	; (80027f4 <HAL_RCC_OscConfig+0x474>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a73      	ldr	r2, [pc, #460]	; (80027f4 <HAL_RCC_OscConfig+0x474>)
 8002628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800262c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800262e:	f7fe fba1 	bl	8000d74 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002636:	f7fe fb9d 	bl	8000d74 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e10c      	b.n	8002862 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002648:	4b6a      	ldr	r3, [pc, #424]	; (80027f4 <HAL_RCC_OscConfig+0x474>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0f0      	beq.n	8002636 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d106      	bne.n	800266a <HAL_RCC_OscConfig+0x2ea>
 800265c:	4b64      	ldr	r3, [pc, #400]	; (80027f0 <HAL_RCC_OscConfig+0x470>)
 800265e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002660:	4a63      	ldr	r2, [pc, #396]	; (80027f0 <HAL_RCC_OscConfig+0x470>)
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	6713      	str	r3, [r2, #112]	; 0x70
 8002668:	e01c      	b.n	80026a4 <HAL_RCC_OscConfig+0x324>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2b05      	cmp	r3, #5
 8002670:	d10c      	bne.n	800268c <HAL_RCC_OscConfig+0x30c>
 8002672:	4b5f      	ldr	r3, [pc, #380]	; (80027f0 <HAL_RCC_OscConfig+0x470>)
 8002674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002676:	4a5e      	ldr	r2, [pc, #376]	; (80027f0 <HAL_RCC_OscConfig+0x470>)
 8002678:	f043 0304 	orr.w	r3, r3, #4
 800267c:	6713      	str	r3, [r2, #112]	; 0x70
 800267e:	4b5c      	ldr	r3, [pc, #368]	; (80027f0 <HAL_RCC_OscConfig+0x470>)
 8002680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002682:	4a5b      	ldr	r2, [pc, #364]	; (80027f0 <HAL_RCC_OscConfig+0x470>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	6713      	str	r3, [r2, #112]	; 0x70
 800268a:	e00b      	b.n	80026a4 <HAL_RCC_OscConfig+0x324>
 800268c:	4b58      	ldr	r3, [pc, #352]	; (80027f0 <HAL_RCC_OscConfig+0x470>)
 800268e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002690:	4a57      	ldr	r2, [pc, #348]	; (80027f0 <HAL_RCC_OscConfig+0x470>)
 8002692:	f023 0301 	bic.w	r3, r3, #1
 8002696:	6713      	str	r3, [r2, #112]	; 0x70
 8002698:	4b55      	ldr	r3, [pc, #340]	; (80027f0 <HAL_RCC_OscConfig+0x470>)
 800269a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269c:	4a54      	ldr	r2, [pc, #336]	; (80027f0 <HAL_RCC_OscConfig+0x470>)
 800269e:	f023 0304 	bic.w	r3, r3, #4
 80026a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d015      	beq.n	80026d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ac:	f7fe fb62 	bl	8000d74 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b2:	e00a      	b.n	80026ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026b4:	f7fe fb5e 	bl	8000d74 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e0cb      	b.n	8002862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ca:	4b49      	ldr	r3, [pc, #292]	; (80027f0 <HAL_RCC_OscConfig+0x470>)
 80026cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0ee      	beq.n	80026b4 <HAL_RCC_OscConfig+0x334>
 80026d6:	e014      	b.n	8002702 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d8:	f7fe fb4c 	bl	8000d74 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026de:	e00a      	b.n	80026f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026e0:	f7fe fb48 	bl	8000d74 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e0b5      	b.n	8002862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f6:	4b3e      	ldr	r3, [pc, #248]	; (80027f0 <HAL_RCC_OscConfig+0x470>)
 80026f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1ee      	bne.n	80026e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002702:	7dfb      	ldrb	r3, [r7, #23]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d105      	bne.n	8002714 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002708:	4b39      	ldr	r3, [pc, #228]	; (80027f0 <HAL_RCC_OscConfig+0x470>)
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	4a38      	ldr	r2, [pc, #224]	; (80027f0 <HAL_RCC_OscConfig+0x470>)
 800270e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002712:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 80a1 	beq.w	8002860 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800271e:	4b34      	ldr	r3, [pc, #208]	; (80027f0 <HAL_RCC_OscConfig+0x470>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 030c 	and.w	r3, r3, #12
 8002726:	2b08      	cmp	r3, #8
 8002728:	d05c      	beq.n	80027e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d141      	bne.n	80027b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002732:	4b31      	ldr	r3, [pc, #196]	; (80027f8 <HAL_RCC_OscConfig+0x478>)
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7fe fb1c 	bl	8000d74 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002740:	f7fe fb18 	bl	8000d74 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e087      	b.n	8002862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002752:	4b27      	ldr	r3, [pc, #156]	; (80027f0 <HAL_RCC_OscConfig+0x470>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69da      	ldr	r2, [r3, #28]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	019b      	lsls	r3, r3, #6
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002774:	085b      	lsrs	r3, r3, #1
 8002776:	3b01      	subs	r3, #1
 8002778:	041b      	lsls	r3, r3, #16
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002780:	061b      	lsls	r3, r3, #24
 8002782:	491b      	ldr	r1, [pc, #108]	; (80027f0 <HAL_RCC_OscConfig+0x470>)
 8002784:	4313      	orrs	r3, r2
 8002786:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002788:	4b1b      	ldr	r3, [pc, #108]	; (80027f8 <HAL_RCC_OscConfig+0x478>)
 800278a:	2201      	movs	r2, #1
 800278c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278e:	f7fe faf1 	bl	8000d74 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002796:	f7fe faed 	bl	8000d74 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e05c      	b.n	8002862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a8:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <HAL_RCC_OscConfig+0x470>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f0      	beq.n	8002796 <HAL_RCC_OscConfig+0x416>
 80027b4:	e054      	b.n	8002860 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b6:	4b10      	ldr	r3, [pc, #64]	; (80027f8 <HAL_RCC_OscConfig+0x478>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027bc:	f7fe fada 	bl	8000d74 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c4:	f7fe fad6 	bl	8000d74 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e045      	b.n	8002862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d6:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <HAL_RCC_OscConfig+0x470>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0x444>
 80027e2:	e03d      	b.n	8002860 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d107      	bne.n	80027fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e038      	b.n	8002862 <HAL_RCC_OscConfig+0x4e2>
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40007000 	.word	0x40007000
 80027f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027fc:	4b1b      	ldr	r3, [pc, #108]	; (800286c <HAL_RCC_OscConfig+0x4ec>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d028      	beq.n	800285c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002814:	429a      	cmp	r2, r3
 8002816:	d121      	bne.n	800285c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002822:	429a      	cmp	r2, r3
 8002824:	d11a      	bne.n	800285c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800282c:	4013      	ands	r3, r2
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002832:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002834:	4293      	cmp	r3, r2
 8002836:	d111      	bne.n	800285c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002842:	085b      	lsrs	r3, r3, #1
 8002844:	3b01      	subs	r3, #1
 8002846:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002848:	429a      	cmp	r2, r3
 800284a:	d107      	bne.n	800285c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002856:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002858:	429a      	cmp	r2, r3
 800285a:	d001      	beq.n	8002860 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e000      	b.n	8002862 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40023800 	.word	0x40023800

08002870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0cc      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002884:	4b68      	ldr	r3, [pc, #416]	; (8002a28 <HAL_RCC_ClockConfig+0x1b8>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 030f 	and.w	r3, r3, #15
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d90c      	bls.n	80028ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002892:	4b65      	ldr	r3, [pc, #404]	; (8002a28 <HAL_RCC_ClockConfig+0x1b8>)
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800289a:	4b63      	ldr	r3, [pc, #396]	; (8002a28 <HAL_RCC_ClockConfig+0x1b8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d001      	beq.n	80028ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e0b8      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d020      	beq.n	80028fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028c4:	4b59      	ldr	r3, [pc, #356]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	4a58      	ldr	r2, [pc, #352]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0308 	and.w	r3, r3, #8
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d005      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028dc:	4b53      	ldr	r3, [pc, #332]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	4a52      	ldr	r2, [pc, #328]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e8:	4b50      	ldr	r3, [pc, #320]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	494d      	ldr	r1, [pc, #308]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d044      	beq.n	8002990 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d107      	bne.n	800291e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290e:	4b47      	ldr	r3, [pc, #284]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d119      	bne.n	800294e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e07f      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b02      	cmp	r3, #2
 8002924:	d003      	beq.n	800292e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800292a:	2b03      	cmp	r3, #3
 800292c:	d107      	bne.n	800293e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800292e:	4b3f      	ldr	r3, [pc, #252]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d109      	bne.n	800294e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e06f      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800293e:	4b3b      	ldr	r3, [pc, #236]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e067      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800294e:	4b37      	ldr	r3, [pc, #220]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f023 0203 	bic.w	r2, r3, #3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	4934      	ldr	r1, [pc, #208]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 800295c:	4313      	orrs	r3, r2
 800295e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002960:	f7fe fa08 	bl	8000d74 <HAL_GetTick>
 8002964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002966:	e00a      	b.n	800297e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002968:	f7fe fa04 	bl	8000d74 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	f241 3288 	movw	r2, #5000	; 0x1388
 8002976:	4293      	cmp	r3, r2
 8002978:	d901      	bls.n	800297e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e04f      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297e:	4b2b      	ldr	r3, [pc, #172]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 020c 	and.w	r2, r3, #12
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	429a      	cmp	r2, r3
 800298e:	d1eb      	bne.n	8002968 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002990:	4b25      	ldr	r3, [pc, #148]	; (8002a28 <HAL_RCC_ClockConfig+0x1b8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 030f 	and.w	r3, r3, #15
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d20c      	bcs.n	80029b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299e:	4b22      	ldr	r3, [pc, #136]	; (8002a28 <HAL_RCC_ClockConfig+0x1b8>)
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a6:	4b20      	ldr	r3, [pc, #128]	; (8002a28 <HAL_RCC_ClockConfig+0x1b8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d001      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e032      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d008      	beq.n	80029d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029c4:	4b19      	ldr	r3, [pc, #100]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	4916      	ldr	r1, [pc, #88]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d009      	beq.n	80029f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029e2:	4b12      	ldr	r3, [pc, #72]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	490e      	ldr	r1, [pc, #56]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029f6:	f000 f821 	bl	8002a3c <HAL_RCC_GetSysClockFreq>
 80029fa:	4602      	mov	r2, r0
 80029fc:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	091b      	lsrs	r3, r3, #4
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	490a      	ldr	r1, [pc, #40]	; (8002a30 <HAL_RCC_ClockConfig+0x1c0>)
 8002a08:	5ccb      	ldrb	r3, [r1, r3]
 8002a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a0e:	4a09      	ldr	r2, [pc, #36]	; (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 8002a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a12:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <HAL_RCC_ClockConfig+0x1c8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe f968 	bl	8000cec <HAL_InitTick>

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40023c00 	.word	0x40023c00
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	08003e08 	.word	0x08003e08
 8002a34:	20000000 	.word	0x20000000
 8002a38:	20000004 	.word	0x20000004

08002a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a40:	b094      	sub	sp, #80	; 0x50
 8002a42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	647b      	str	r3, [r7, #68]	; 0x44
 8002a48:	2300      	movs	r3, #0
 8002a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a54:	4b79      	ldr	r3, [pc, #484]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 030c 	and.w	r3, r3, #12
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	d00d      	beq.n	8002a7c <HAL_RCC_GetSysClockFreq+0x40>
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	f200 80e1 	bhi.w	8002c28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d002      	beq.n	8002a70 <HAL_RCC_GetSysClockFreq+0x34>
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d003      	beq.n	8002a76 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a6e:	e0db      	b.n	8002c28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a70:	4b73      	ldr	r3, [pc, #460]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a72:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a74:	e0db      	b.n	8002c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a76:	4b73      	ldr	r3, [pc, #460]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a7a:	e0d8      	b.n	8002c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a7c:	4b6f      	ldr	r3, [pc, #444]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a84:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a86:	4b6d      	ldr	r3, [pc, #436]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d063      	beq.n	8002b5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a92:	4b6a      	ldr	r3, [pc, #424]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	099b      	lsrs	r3, r3, #6
 8002a98:	2200      	movs	r2, #0
 8002a9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aa4:	633b      	str	r3, [r7, #48]	; 0x30
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8002aaa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002aae:	4622      	mov	r2, r4
 8002ab0:	462b      	mov	r3, r5
 8002ab2:	f04f 0000 	mov.w	r0, #0
 8002ab6:	f04f 0100 	mov.w	r1, #0
 8002aba:	0159      	lsls	r1, r3, #5
 8002abc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ac0:	0150      	lsls	r0, r2, #5
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4621      	mov	r1, r4
 8002ac8:	1a51      	subs	r1, r2, r1
 8002aca:	6139      	str	r1, [r7, #16]
 8002acc:	4629      	mov	r1, r5
 8002ace:	eb63 0301 	sbc.w	r3, r3, r1
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ae0:	4659      	mov	r1, fp
 8002ae2:	018b      	lsls	r3, r1, #6
 8002ae4:	4651      	mov	r1, sl
 8002ae6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002aea:	4651      	mov	r1, sl
 8002aec:	018a      	lsls	r2, r1, #6
 8002aee:	4651      	mov	r1, sl
 8002af0:	ebb2 0801 	subs.w	r8, r2, r1
 8002af4:	4659      	mov	r1, fp
 8002af6:	eb63 0901 	sbc.w	r9, r3, r1
 8002afa:	f04f 0200 	mov.w	r2, #0
 8002afe:	f04f 0300 	mov.w	r3, #0
 8002b02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b0e:	4690      	mov	r8, r2
 8002b10:	4699      	mov	r9, r3
 8002b12:	4623      	mov	r3, r4
 8002b14:	eb18 0303 	adds.w	r3, r8, r3
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	462b      	mov	r3, r5
 8002b1c:	eb49 0303 	adc.w	r3, r9, r3
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b2e:	4629      	mov	r1, r5
 8002b30:	024b      	lsls	r3, r1, #9
 8002b32:	4621      	mov	r1, r4
 8002b34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b38:	4621      	mov	r1, r4
 8002b3a:	024a      	lsls	r2, r1, #9
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	4619      	mov	r1, r3
 8002b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b42:	2200      	movs	r2, #0
 8002b44:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b4c:	f7fd fba0 	bl	8000290 <__aeabi_uldivmod>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4613      	mov	r3, r2
 8002b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b58:	e058      	b.n	8002c0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b5a:	4b38      	ldr	r3, [pc, #224]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	099b      	lsrs	r3, r3, #6
 8002b60:	2200      	movs	r2, #0
 8002b62:	4618      	mov	r0, r3
 8002b64:	4611      	mov	r1, r2
 8002b66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b6a:	623b      	str	r3, [r7, #32]
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b74:	4642      	mov	r2, r8
 8002b76:	464b      	mov	r3, r9
 8002b78:	f04f 0000 	mov.w	r0, #0
 8002b7c:	f04f 0100 	mov.w	r1, #0
 8002b80:	0159      	lsls	r1, r3, #5
 8002b82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b86:	0150      	lsls	r0, r2, #5
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4641      	mov	r1, r8
 8002b8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b92:	4649      	mov	r1, r9
 8002b94:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	f04f 0300 	mov.w	r3, #0
 8002ba0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ba4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ba8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002bac:	ebb2 040a 	subs.w	r4, r2, sl
 8002bb0:	eb63 050b 	sbc.w	r5, r3, fp
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	00eb      	lsls	r3, r5, #3
 8002bbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bc2:	00e2      	lsls	r2, r4, #3
 8002bc4:	4614      	mov	r4, r2
 8002bc6:	461d      	mov	r5, r3
 8002bc8:	4643      	mov	r3, r8
 8002bca:	18e3      	adds	r3, r4, r3
 8002bcc:	603b      	str	r3, [r7, #0]
 8002bce:	464b      	mov	r3, r9
 8002bd0:	eb45 0303 	adc.w	r3, r5, r3
 8002bd4:	607b      	str	r3, [r7, #4]
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002be2:	4629      	mov	r1, r5
 8002be4:	028b      	lsls	r3, r1, #10
 8002be6:	4621      	mov	r1, r4
 8002be8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bec:	4621      	mov	r1, r4
 8002bee:	028a      	lsls	r2, r1, #10
 8002bf0:	4610      	mov	r0, r2
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	61bb      	str	r3, [r7, #24]
 8002bfa:	61fa      	str	r2, [r7, #28]
 8002bfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c00:	f7fd fb46 	bl	8000290 <__aeabi_uldivmod>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4613      	mov	r3, r2
 8002c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	0c1b      	lsrs	r3, r3, #16
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	3301      	adds	r3, #1
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c26:	e002      	b.n	8002c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3750      	adds	r7, #80	; 0x50
 8002c34:	46bd      	mov	sp, r7
 8002c36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	00f42400 	.word	0x00f42400
 8002c44:	007a1200 	.word	0x007a1200

08002c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c4c:	4b03      	ldr	r3, [pc, #12]	; (8002c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	20000000 	.word	0x20000000

08002c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c64:	f7ff fff0 	bl	8002c48 <HAL_RCC_GetHCLKFreq>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	0a9b      	lsrs	r3, r3, #10
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	4903      	ldr	r1, [pc, #12]	; (8002c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c76:	5ccb      	ldrb	r3, [r1, r3]
 8002c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40023800 	.word	0x40023800
 8002c84:	08003e18 	.word	0x08003e18

08002c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c8c:	f7ff ffdc 	bl	8002c48 <HAL_RCC_GetHCLKFreq>
 8002c90:	4602      	mov	r2, r0
 8002c92:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	0b5b      	lsrs	r3, r3, #13
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	4903      	ldr	r1, [pc, #12]	; (8002cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	08003e18 	.word	0x08003e18

08002cb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e03f      	b.n	8002d42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d106      	bne.n	8002cdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7fd fece 	bl	8000a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2224      	movs	r2, #36	; 0x24
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f929 	bl	8002f4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	691a      	ldr	r2, [r3, #16]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695a      	ldr	r2, [r3, #20]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2220      	movs	r2, #32
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b08a      	sub	sp, #40	; 0x28
 8002d4e:	af02      	add	r7, sp, #8
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	603b      	str	r3, [r7, #0]
 8002d56:	4613      	mov	r3, r2
 8002d58:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	d17c      	bne.n	8002e64 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d002      	beq.n	8002d76 <HAL_UART_Transmit+0x2c>
 8002d70:	88fb      	ldrh	r3, [r7, #6]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e075      	b.n	8002e66 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d101      	bne.n	8002d88 <HAL_UART_Transmit+0x3e>
 8002d84:	2302      	movs	r3, #2
 8002d86:	e06e      	b.n	8002e66 <HAL_UART_Transmit+0x11c>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2221      	movs	r2, #33	; 0x21
 8002d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d9e:	f7fd ffe9 	bl	8000d74 <HAL_GetTick>
 8002da2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	88fa      	ldrh	r2, [r7, #6]
 8002da8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	88fa      	ldrh	r2, [r7, #6]
 8002dae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002db8:	d108      	bne.n	8002dcc <HAL_UART_Transmit+0x82>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d104      	bne.n	8002dcc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	61bb      	str	r3, [r7, #24]
 8002dca:	e003      	b.n	8002dd4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ddc:	e02a      	b.n	8002e34 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2200      	movs	r2, #0
 8002de6:	2180      	movs	r1, #128	; 0x80
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 f840 	bl	8002e6e <UART_WaitOnFlagUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e036      	b.n	8002e66 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10b      	bne.n	8002e16 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	461a      	mov	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	3302      	adds	r3, #2
 8002e12:	61bb      	str	r3, [r7, #24]
 8002e14:	e007      	b.n	8002e26 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	781a      	ldrb	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	3301      	adds	r3, #1
 8002e24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1cf      	bne.n	8002dde <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2200      	movs	r2, #0
 8002e46:	2140      	movs	r1, #64	; 0x40
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 f810 	bl	8002e6e <UART_WaitOnFlagUntilTimeout>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e006      	b.n	8002e66 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	e000      	b.n	8002e66 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e64:	2302      	movs	r3, #2
  }
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3720      	adds	r7, #32
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b090      	sub	sp, #64	; 0x40
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	603b      	str	r3, [r7, #0]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e7e:	e050      	b.n	8002f22 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e86:	d04c      	beq.n	8002f22 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d007      	beq.n	8002e9e <UART_WaitOnFlagUntilTimeout+0x30>
 8002e8e:	f7fd ff71 	bl	8000d74 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d241      	bcs.n	8002f22 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	330c      	adds	r3, #12
 8002ea4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea8:	e853 3f00 	ldrex	r3, [r3]
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	330c      	adds	r3, #12
 8002ebc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ebe:	637a      	str	r2, [r7, #52]	; 0x34
 8002ec0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ec4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ec6:	e841 2300 	strex	r3, r2, [r1]
 8002eca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1e5      	bne.n	8002e9e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	3314      	adds	r3, #20
 8002ed8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	e853 3f00 	ldrex	r3, [r3]
 8002ee0:	613b      	str	r3, [r7, #16]
   return(result);
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f023 0301 	bic.w	r3, r3, #1
 8002ee8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	3314      	adds	r3, #20
 8002ef0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ef2:	623a      	str	r2, [r7, #32]
 8002ef4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef6:	69f9      	ldr	r1, [r7, #28]
 8002ef8:	6a3a      	ldr	r2, [r7, #32]
 8002efa:	e841 2300 	strex	r3, r2, [r1]
 8002efe:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1e5      	bne.n	8002ed2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2220      	movs	r2, #32
 8002f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e00f      	b.n	8002f42 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	bf0c      	ite	eq
 8002f32:	2301      	moveq	r3, #1
 8002f34:	2300      	movne	r3, #0
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	461a      	mov	r2, r3
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d09f      	beq.n	8002e80 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3740      	adds	r7, #64	; 0x40
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f50:	b0c0      	sub	sp, #256	; 0x100
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f68:	68d9      	ldr	r1, [r3, #12]
 8002f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	ea40 0301 	orr.w	r3, r0, r1
 8002f74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	431a      	orrs	r2, r3
 8002f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002fa4:	f021 010c 	bic.w	r1, r1, #12
 8002fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002fb2:	430b      	orrs	r3, r1
 8002fb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc6:	6999      	ldr	r1, [r3, #24]
 8002fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	ea40 0301 	orr.w	r3, r0, r1
 8002fd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	4b8f      	ldr	r3, [pc, #572]	; (8003218 <UART_SetConfig+0x2cc>)
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d005      	beq.n	8002fec <UART_SetConfig+0xa0>
 8002fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	4b8d      	ldr	r3, [pc, #564]	; (800321c <UART_SetConfig+0x2d0>)
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d104      	bne.n	8002ff6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fec:	f7ff fe4c 	bl	8002c88 <HAL_RCC_GetPCLK2Freq>
 8002ff0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ff4:	e003      	b.n	8002ffe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ff6:	f7ff fe33 	bl	8002c60 <HAL_RCC_GetPCLK1Freq>
 8002ffa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003008:	f040 810c 	bne.w	8003224 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800300c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003010:	2200      	movs	r2, #0
 8003012:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003016:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800301a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800301e:	4622      	mov	r2, r4
 8003020:	462b      	mov	r3, r5
 8003022:	1891      	adds	r1, r2, r2
 8003024:	65b9      	str	r1, [r7, #88]	; 0x58
 8003026:	415b      	adcs	r3, r3
 8003028:	65fb      	str	r3, [r7, #92]	; 0x5c
 800302a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800302e:	4621      	mov	r1, r4
 8003030:	eb12 0801 	adds.w	r8, r2, r1
 8003034:	4629      	mov	r1, r5
 8003036:	eb43 0901 	adc.w	r9, r3, r1
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003046:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800304a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800304e:	4690      	mov	r8, r2
 8003050:	4699      	mov	r9, r3
 8003052:	4623      	mov	r3, r4
 8003054:	eb18 0303 	adds.w	r3, r8, r3
 8003058:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800305c:	462b      	mov	r3, r5
 800305e:	eb49 0303 	adc.w	r3, r9, r3
 8003062:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003072:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003076:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800307a:	460b      	mov	r3, r1
 800307c:	18db      	adds	r3, r3, r3
 800307e:	653b      	str	r3, [r7, #80]	; 0x50
 8003080:	4613      	mov	r3, r2
 8003082:	eb42 0303 	adc.w	r3, r2, r3
 8003086:	657b      	str	r3, [r7, #84]	; 0x54
 8003088:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800308c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003090:	f7fd f8fe 	bl	8000290 <__aeabi_uldivmod>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	4b61      	ldr	r3, [pc, #388]	; (8003220 <UART_SetConfig+0x2d4>)
 800309a:	fba3 2302 	umull	r2, r3, r3, r2
 800309e:	095b      	lsrs	r3, r3, #5
 80030a0:	011c      	lsls	r4, r3, #4
 80030a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030a6:	2200      	movs	r2, #0
 80030a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80030b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80030b4:	4642      	mov	r2, r8
 80030b6:	464b      	mov	r3, r9
 80030b8:	1891      	adds	r1, r2, r2
 80030ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80030bc:	415b      	adcs	r3, r3
 80030be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80030c4:	4641      	mov	r1, r8
 80030c6:	eb12 0a01 	adds.w	sl, r2, r1
 80030ca:	4649      	mov	r1, r9
 80030cc:	eb43 0b01 	adc.w	fp, r3, r1
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030e4:	4692      	mov	sl, r2
 80030e6:	469b      	mov	fp, r3
 80030e8:	4643      	mov	r3, r8
 80030ea:	eb1a 0303 	adds.w	r3, sl, r3
 80030ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030f2:	464b      	mov	r3, r9
 80030f4:	eb4b 0303 	adc.w	r3, fp, r3
 80030f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80030fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003108:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800310c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003110:	460b      	mov	r3, r1
 8003112:	18db      	adds	r3, r3, r3
 8003114:	643b      	str	r3, [r7, #64]	; 0x40
 8003116:	4613      	mov	r3, r2
 8003118:	eb42 0303 	adc.w	r3, r2, r3
 800311c:	647b      	str	r3, [r7, #68]	; 0x44
 800311e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003122:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003126:	f7fd f8b3 	bl	8000290 <__aeabi_uldivmod>
 800312a:	4602      	mov	r2, r0
 800312c:	460b      	mov	r3, r1
 800312e:	4611      	mov	r1, r2
 8003130:	4b3b      	ldr	r3, [pc, #236]	; (8003220 <UART_SetConfig+0x2d4>)
 8003132:	fba3 2301 	umull	r2, r3, r3, r1
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	2264      	movs	r2, #100	; 0x64
 800313a:	fb02 f303 	mul.w	r3, r2, r3
 800313e:	1acb      	subs	r3, r1, r3
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003146:	4b36      	ldr	r3, [pc, #216]	; (8003220 <UART_SetConfig+0x2d4>)
 8003148:	fba3 2302 	umull	r2, r3, r3, r2
 800314c:	095b      	lsrs	r3, r3, #5
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003154:	441c      	add	r4, r3
 8003156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800315a:	2200      	movs	r2, #0
 800315c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003160:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003164:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003168:	4642      	mov	r2, r8
 800316a:	464b      	mov	r3, r9
 800316c:	1891      	adds	r1, r2, r2
 800316e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003170:	415b      	adcs	r3, r3
 8003172:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003174:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003178:	4641      	mov	r1, r8
 800317a:	1851      	adds	r1, r2, r1
 800317c:	6339      	str	r1, [r7, #48]	; 0x30
 800317e:	4649      	mov	r1, r9
 8003180:	414b      	adcs	r3, r1
 8003182:	637b      	str	r3, [r7, #52]	; 0x34
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	f04f 0300 	mov.w	r3, #0
 800318c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003190:	4659      	mov	r1, fp
 8003192:	00cb      	lsls	r3, r1, #3
 8003194:	4651      	mov	r1, sl
 8003196:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800319a:	4651      	mov	r1, sl
 800319c:	00ca      	lsls	r2, r1, #3
 800319e:	4610      	mov	r0, r2
 80031a0:	4619      	mov	r1, r3
 80031a2:	4603      	mov	r3, r0
 80031a4:	4642      	mov	r2, r8
 80031a6:	189b      	adds	r3, r3, r2
 80031a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031ac:	464b      	mov	r3, r9
 80031ae:	460a      	mov	r2, r1
 80031b0:	eb42 0303 	adc.w	r3, r2, r3
 80031b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80031c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80031c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80031cc:	460b      	mov	r3, r1
 80031ce:	18db      	adds	r3, r3, r3
 80031d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80031d2:	4613      	mov	r3, r2
 80031d4:	eb42 0303 	adc.w	r3, r2, r3
 80031d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80031e2:	f7fd f855 	bl	8000290 <__aeabi_uldivmod>
 80031e6:	4602      	mov	r2, r0
 80031e8:	460b      	mov	r3, r1
 80031ea:	4b0d      	ldr	r3, [pc, #52]	; (8003220 <UART_SetConfig+0x2d4>)
 80031ec:	fba3 1302 	umull	r1, r3, r3, r2
 80031f0:	095b      	lsrs	r3, r3, #5
 80031f2:	2164      	movs	r1, #100	; 0x64
 80031f4:	fb01 f303 	mul.w	r3, r1, r3
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	3332      	adds	r3, #50	; 0x32
 80031fe:	4a08      	ldr	r2, [pc, #32]	; (8003220 <UART_SetConfig+0x2d4>)
 8003200:	fba2 2303 	umull	r2, r3, r2, r3
 8003204:	095b      	lsrs	r3, r3, #5
 8003206:	f003 0207 	and.w	r2, r3, #7
 800320a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4422      	add	r2, r4
 8003212:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003214:	e105      	b.n	8003422 <UART_SetConfig+0x4d6>
 8003216:	bf00      	nop
 8003218:	40011000 	.word	0x40011000
 800321c:	40011400 	.word	0x40011400
 8003220:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003224:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003228:	2200      	movs	r2, #0
 800322a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800322e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003232:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003236:	4642      	mov	r2, r8
 8003238:	464b      	mov	r3, r9
 800323a:	1891      	adds	r1, r2, r2
 800323c:	6239      	str	r1, [r7, #32]
 800323e:	415b      	adcs	r3, r3
 8003240:	627b      	str	r3, [r7, #36]	; 0x24
 8003242:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003246:	4641      	mov	r1, r8
 8003248:	1854      	adds	r4, r2, r1
 800324a:	4649      	mov	r1, r9
 800324c:	eb43 0501 	adc.w	r5, r3, r1
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	00eb      	lsls	r3, r5, #3
 800325a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800325e:	00e2      	lsls	r2, r4, #3
 8003260:	4614      	mov	r4, r2
 8003262:	461d      	mov	r5, r3
 8003264:	4643      	mov	r3, r8
 8003266:	18e3      	adds	r3, r4, r3
 8003268:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800326c:	464b      	mov	r3, r9
 800326e:	eb45 0303 	adc.w	r3, r5, r3
 8003272:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003282:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003286:	f04f 0200 	mov.w	r2, #0
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003292:	4629      	mov	r1, r5
 8003294:	008b      	lsls	r3, r1, #2
 8003296:	4621      	mov	r1, r4
 8003298:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800329c:	4621      	mov	r1, r4
 800329e:	008a      	lsls	r2, r1, #2
 80032a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80032a4:	f7fc fff4 	bl	8000290 <__aeabi_uldivmod>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	4b60      	ldr	r3, [pc, #384]	; (8003430 <UART_SetConfig+0x4e4>)
 80032ae:	fba3 2302 	umull	r2, r3, r3, r2
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	011c      	lsls	r4, r3, #4
 80032b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032ba:	2200      	movs	r2, #0
 80032bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80032c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80032c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80032c8:	4642      	mov	r2, r8
 80032ca:	464b      	mov	r3, r9
 80032cc:	1891      	adds	r1, r2, r2
 80032ce:	61b9      	str	r1, [r7, #24]
 80032d0:	415b      	adcs	r3, r3
 80032d2:	61fb      	str	r3, [r7, #28]
 80032d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032d8:	4641      	mov	r1, r8
 80032da:	1851      	adds	r1, r2, r1
 80032dc:	6139      	str	r1, [r7, #16]
 80032de:	4649      	mov	r1, r9
 80032e0:	414b      	adcs	r3, r1
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	f04f 0200 	mov.w	r2, #0
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032f0:	4659      	mov	r1, fp
 80032f2:	00cb      	lsls	r3, r1, #3
 80032f4:	4651      	mov	r1, sl
 80032f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032fa:	4651      	mov	r1, sl
 80032fc:	00ca      	lsls	r2, r1, #3
 80032fe:	4610      	mov	r0, r2
 8003300:	4619      	mov	r1, r3
 8003302:	4603      	mov	r3, r0
 8003304:	4642      	mov	r2, r8
 8003306:	189b      	adds	r3, r3, r2
 8003308:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800330c:	464b      	mov	r3, r9
 800330e:	460a      	mov	r2, r1
 8003310:	eb42 0303 	adc.w	r3, r2, r3
 8003314:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	67bb      	str	r3, [r7, #120]	; 0x78
 8003322:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003324:	f04f 0200 	mov.w	r2, #0
 8003328:	f04f 0300 	mov.w	r3, #0
 800332c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003330:	4649      	mov	r1, r9
 8003332:	008b      	lsls	r3, r1, #2
 8003334:	4641      	mov	r1, r8
 8003336:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800333a:	4641      	mov	r1, r8
 800333c:	008a      	lsls	r2, r1, #2
 800333e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003342:	f7fc ffa5 	bl	8000290 <__aeabi_uldivmod>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	4b39      	ldr	r3, [pc, #228]	; (8003430 <UART_SetConfig+0x4e4>)
 800334c:	fba3 1302 	umull	r1, r3, r3, r2
 8003350:	095b      	lsrs	r3, r3, #5
 8003352:	2164      	movs	r1, #100	; 0x64
 8003354:	fb01 f303 	mul.w	r3, r1, r3
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	3332      	adds	r3, #50	; 0x32
 800335e:	4a34      	ldr	r2, [pc, #208]	; (8003430 <UART_SetConfig+0x4e4>)
 8003360:	fba2 2303 	umull	r2, r3, r2, r3
 8003364:	095b      	lsrs	r3, r3, #5
 8003366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800336a:	441c      	add	r4, r3
 800336c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003370:	2200      	movs	r2, #0
 8003372:	673b      	str	r3, [r7, #112]	; 0x70
 8003374:	677a      	str	r2, [r7, #116]	; 0x74
 8003376:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800337a:	4642      	mov	r2, r8
 800337c:	464b      	mov	r3, r9
 800337e:	1891      	adds	r1, r2, r2
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	415b      	adcs	r3, r3
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800338a:	4641      	mov	r1, r8
 800338c:	1851      	adds	r1, r2, r1
 800338e:	6039      	str	r1, [r7, #0]
 8003390:	4649      	mov	r1, r9
 8003392:	414b      	adcs	r3, r1
 8003394:	607b      	str	r3, [r7, #4]
 8003396:	f04f 0200 	mov.w	r2, #0
 800339a:	f04f 0300 	mov.w	r3, #0
 800339e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033a2:	4659      	mov	r1, fp
 80033a4:	00cb      	lsls	r3, r1, #3
 80033a6:	4651      	mov	r1, sl
 80033a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033ac:	4651      	mov	r1, sl
 80033ae:	00ca      	lsls	r2, r1, #3
 80033b0:	4610      	mov	r0, r2
 80033b2:	4619      	mov	r1, r3
 80033b4:	4603      	mov	r3, r0
 80033b6:	4642      	mov	r2, r8
 80033b8:	189b      	adds	r3, r3, r2
 80033ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80033bc:	464b      	mov	r3, r9
 80033be:	460a      	mov	r2, r1
 80033c0:	eb42 0303 	adc.w	r3, r2, r3
 80033c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	663b      	str	r3, [r7, #96]	; 0x60
 80033d0:	667a      	str	r2, [r7, #100]	; 0x64
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	f04f 0300 	mov.w	r3, #0
 80033da:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80033de:	4649      	mov	r1, r9
 80033e0:	008b      	lsls	r3, r1, #2
 80033e2:	4641      	mov	r1, r8
 80033e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033e8:	4641      	mov	r1, r8
 80033ea:	008a      	lsls	r2, r1, #2
 80033ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80033f0:	f7fc ff4e 	bl	8000290 <__aeabi_uldivmod>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	4b0d      	ldr	r3, [pc, #52]	; (8003430 <UART_SetConfig+0x4e4>)
 80033fa:	fba3 1302 	umull	r1, r3, r3, r2
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	2164      	movs	r1, #100	; 0x64
 8003402:	fb01 f303 	mul.w	r3, r1, r3
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	3332      	adds	r3, #50	; 0x32
 800340c:	4a08      	ldr	r2, [pc, #32]	; (8003430 <UART_SetConfig+0x4e4>)
 800340e:	fba2 2303 	umull	r2, r3, r2, r3
 8003412:	095b      	lsrs	r3, r3, #5
 8003414:	f003 020f 	and.w	r2, r3, #15
 8003418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4422      	add	r2, r4
 8003420:	609a      	str	r2, [r3, #8]
}
 8003422:	bf00      	nop
 8003424:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003428:	46bd      	mov	sp, r7
 800342a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800342e:	bf00      	nop
 8003430:	51eb851f 	.word	0x51eb851f

08003434 <__errno>:
 8003434:	4b01      	ldr	r3, [pc, #4]	; (800343c <__errno+0x8>)
 8003436:	6818      	ldr	r0, [r3, #0]
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	2000000c 	.word	0x2000000c

08003440 <__libc_init_array>:
 8003440:	b570      	push	{r4, r5, r6, lr}
 8003442:	4d0d      	ldr	r5, [pc, #52]	; (8003478 <__libc_init_array+0x38>)
 8003444:	4c0d      	ldr	r4, [pc, #52]	; (800347c <__libc_init_array+0x3c>)
 8003446:	1b64      	subs	r4, r4, r5
 8003448:	10a4      	asrs	r4, r4, #2
 800344a:	2600      	movs	r6, #0
 800344c:	42a6      	cmp	r6, r4
 800344e:	d109      	bne.n	8003464 <__libc_init_array+0x24>
 8003450:	4d0b      	ldr	r5, [pc, #44]	; (8003480 <__libc_init_array+0x40>)
 8003452:	4c0c      	ldr	r4, [pc, #48]	; (8003484 <__libc_init_array+0x44>)
 8003454:	f000 fc96 	bl	8003d84 <_init>
 8003458:	1b64      	subs	r4, r4, r5
 800345a:	10a4      	asrs	r4, r4, #2
 800345c:	2600      	movs	r6, #0
 800345e:	42a6      	cmp	r6, r4
 8003460:	d105      	bne.n	800346e <__libc_init_array+0x2e>
 8003462:	bd70      	pop	{r4, r5, r6, pc}
 8003464:	f855 3b04 	ldr.w	r3, [r5], #4
 8003468:	4798      	blx	r3
 800346a:	3601      	adds	r6, #1
 800346c:	e7ee      	b.n	800344c <__libc_init_array+0xc>
 800346e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003472:	4798      	blx	r3
 8003474:	3601      	adds	r6, #1
 8003476:	e7f2      	b.n	800345e <__libc_init_array+0x1e>
 8003478:	08003e5c 	.word	0x08003e5c
 800347c:	08003e5c 	.word	0x08003e5c
 8003480:	08003e5c 	.word	0x08003e5c
 8003484:	08003e60 	.word	0x08003e60

08003488 <malloc>:
 8003488:	4b02      	ldr	r3, [pc, #8]	; (8003494 <malloc+0xc>)
 800348a:	4601      	mov	r1, r0
 800348c:	6818      	ldr	r0, [r3, #0]
 800348e:	f000 b877 	b.w	8003580 <_malloc_r>
 8003492:	bf00      	nop
 8003494:	2000000c 	.word	0x2000000c

08003498 <memset>:
 8003498:	4402      	add	r2, r0
 800349a:	4603      	mov	r3, r0
 800349c:	4293      	cmp	r3, r2
 800349e:	d100      	bne.n	80034a2 <memset+0xa>
 80034a0:	4770      	bx	lr
 80034a2:	f803 1b01 	strb.w	r1, [r3], #1
 80034a6:	e7f9      	b.n	800349c <memset+0x4>

080034a8 <_free_r>:
 80034a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80034aa:	2900      	cmp	r1, #0
 80034ac:	d044      	beq.n	8003538 <_free_r+0x90>
 80034ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034b2:	9001      	str	r0, [sp, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f1a1 0404 	sub.w	r4, r1, #4
 80034ba:	bfb8      	it	lt
 80034bc:	18e4      	addlt	r4, r4, r3
 80034be:	f000 f903 	bl	80036c8 <__malloc_lock>
 80034c2:	4a1e      	ldr	r2, [pc, #120]	; (800353c <_free_r+0x94>)
 80034c4:	9801      	ldr	r0, [sp, #4]
 80034c6:	6813      	ldr	r3, [r2, #0]
 80034c8:	b933      	cbnz	r3, 80034d8 <_free_r+0x30>
 80034ca:	6063      	str	r3, [r4, #4]
 80034cc:	6014      	str	r4, [r2, #0]
 80034ce:	b003      	add	sp, #12
 80034d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80034d4:	f000 b8fe 	b.w	80036d4 <__malloc_unlock>
 80034d8:	42a3      	cmp	r3, r4
 80034da:	d908      	bls.n	80034ee <_free_r+0x46>
 80034dc:	6825      	ldr	r5, [r4, #0]
 80034de:	1961      	adds	r1, r4, r5
 80034e0:	428b      	cmp	r3, r1
 80034e2:	bf01      	itttt	eq
 80034e4:	6819      	ldreq	r1, [r3, #0]
 80034e6:	685b      	ldreq	r3, [r3, #4]
 80034e8:	1949      	addeq	r1, r1, r5
 80034ea:	6021      	streq	r1, [r4, #0]
 80034ec:	e7ed      	b.n	80034ca <_free_r+0x22>
 80034ee:	461a      	mov	r2, r3
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	b10b      	cbz	r3, 80034f8 <_free_r+0x50>
 80034f4:	42a3      	cmp	r3, r4
 80034f6:	d9fa      	bls.n	80034ee <_free_r+0x46>
 80034f8:	6811      	ldr	r1, [r2, #0]
 80034fa:	1855      	adds	r5, r2, r1
 80034fc:	42a5      	cmp	r5, r4
 80034fe:	d10b      	bne.n	8003518 <_free_r+0x70>
 8003500:	6824      	ldr	r4, [r4, #0]
 8003502:	4421      	add	r1, r4
 8003504:	1854      	adds	r4, r2, r1
 8003506:	42a3      	cmp	r3, r4
 8003508:	6011      	str	r1, [r2, #0]
 800350a:	d1e0      	bne.n	80034ce <_free_r+0x26>
 800350c:	681c      	ldr	r4, [r3, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	6053      	str	r3, [r2, #4]
 8003512:	4421      	add	r1, r4
 8003514:	6011      	str	r1, [r2, #0]
 8003516:	e7da      	b.n	80034ce <_free_r+0x26>
 8003518:	d902      	bls.n	8003520 <_free_r+0x78>
 800351a:	230c      	movs	r3, #12
 800351c:	6003      	str	r3, [r0, #0]
 800351e:	e7d6      	b.n	80034ce <_free_r+0x26>
 8003520:	6825      	ldr	r5, [r4, #0]
 8003522:	1961      	adds	r1, r4, r5
 8003524:	428b      	cmp	r3, r1
 8003526:	bf04      	itt	eq
 8003528:	6819      	ldreq	r1, [r3, #0]
 800352a:	685b      	ldreq	r3, [r3, #4]
 800352c:	6063      	str	r3, [r4, #4]
 800352e:	bf04      	itt	eq
 8003530:	1949      	addeq	r1, r1, r5
 8003532:	6021      	streq	r1, [r4, #0]
 8003534:	6054      	str	r4, [r2, #4]
 8003536:	e7ca      	b.n	80034ce <_free_r+0x26>
 8003538:	b003      	add	sp, #12
 800353a:	bd30      	pop	{r4, r5, pc}
 800353c:	20000178 	.word	0x20000178

08003540 <sbrk_aligned>:
 8003540:	b570      	push	{r4, r5, r6, lr}
 8003542:	4e0e      	ldr	r6, [pc, #56]	; (800357c <sbrk_aligned+0x3c>)
 8003544:	460c      	mov	r4, r1
 8003546:	6831      	ldr	r1, [r6, #0]
 8003548:	4605      	mov	r5, r0
 800354a:	b911      	cbnz	r1, 8003552 <sbrk_aligned+0x12>
 800354c:	f000 f88c 	bl	8003668 <_sbrk_r>
 8003550:	6030      	str	r0, [r6, #0]
 8003552:	4621      	mov	r1, r4
 8003554:	4628      	mov	r0, r5
 8003556:	f000 f887 	bl	8003668 <_sbrk_r>
 800355a:	1c43      	adds	r3, r0, #1
 800355c:	d00a      	beq.n	8003574 <sbrk_aligned+0x34>
 800355e:	1cc4      	adds	r4, r0, #3
 8003560:	f024 0403 	bic.w	r4, r4, #3
 8003564:	42a0      	cmp	r0, r4
 8003566:	d007      	beq.n	8003578 <sbrk_aligned+0x38>
 8003568:	1a21      	subs	r1, r4, r0
 800356a:	4628      	mov	r0, r5
 800356c:	f000 f87c 	bl	8003668 <_sbrk_r>
 8003570:	3001      	adds	r0, #1
 8003572:	d101      	bne.n	8003578 <sbrk_aligned+0x38>
 8003574:	f04f 34ff 	mov.w	r4, #4294967295
 8003578:	4620      	mov	r0, r4
 800357a:	bd70      	pop	{r4, r5, r6, pc}
 800357c:	2000017c 	.word	0x2000017c

08003580 <_malloc_r>:
 8003580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003584:	1ccd      	adds	r5, r1, #3
 8003586:	f025 0503 	bic.w	r5, r5, #3
 800358a:	3508      	adds	r5, #8
 800358c:	2d0c      	cmp	r5, #12
 800358e:	bf38      	it	cc
 8003590:	250c      	movcc	r5, #12
 8003592:	2d00      	cmp	r5, #0
 8003594:	4607      	mov	r7, r0
 8003596:	db01      	blt.n	800359c <_malloc_r+0x1c>
 8003598:	42a9      	cmp	r1, r5
 800359a:	d905      	bls.n	80035a8 <_malloc_r+0x28>
 800359c:	230c      	movs	r3, #12
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	2600      	movs	r6, #0
 80035a2:	4630      	mov	r0, r6
 80035a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035a8:	4e2e      	ldr	r6, [pc, #184]	; (8003664 <_malloc_r+0xe4>)
 80035aa:	f000 f88d 	bl	80036c8 <__malloc_lock>
 80035ae:	6833      	ldr	r3, [r6, #0]
 80035b0:	461c      	mov	r4, r3
 80035b2:	bb34      	cbnz	r4, 8003602 <_malloc_r+0x82>
 80035b4:	4629      	mov	r1, r5
 80035b6:	4638      	mov	r0, r7
 80035b8:	f7ff ffc2 	bl	8003540 <sbrk_aligned>
 80035bc:	1c43      	adds	r3, r0, #1
 80035be:	4604      	mov	r4, r0
 80035c0:	d14d      	bne.n	800365e <_malloc_r+0xde>
 80035c2:	6834      	ldr	r4, [r6, #0]
 80035c4:	4626      	mov	r6, r4
 80035c6:	2e00      	cmp	r6, #0
 80035c8:	d140      	bne.n	800364c <_malloc_r+0xcc>
 80035ca:	6823      	ldr	r3, [r4, #0]
 80035cc:	4631      	mov	r1, r6
 80035ce:	4638      	mov	r0, r7
 80035d0:	eb04 0803 	add.w	r8, r4, r3
 80035d4:	f000 f848 	bl	8003668 <_sbrk_r>
 80035d8:	4580      	cmp	r8, r0
 80035da:	d13a      	bne.n	8003652 <_malloc_r+0xd2>
 80035dc:	6821      	ldr	r1, [r4, #0]
 80035de:	3503      	adds	r5, #3
 80035e0:	1a6d      	subs	r5, r5, r1
 80035e2:	f025 0503 	bic.w	r5, r5, #3
 80035e6:	3508      	adds	r5, #8
 80035e8:	2d0c      	cmp	r5, #12
 80035ea:	bf38      	it	cc
 80035ec:	250c      	movcc	r5, #12
 80035ee:	4629      	mov	r1, r5
 80035f0:	4638      	mov	r0, r7
 80035f2:	f7ff ffa5 	bl	8003540 <sbrk_aligned>
 80035f6:	3001      	adds	r0, #1
 80035f8:	d02b      	beq.n	8003652 <_malloc_r+0xd2>
 80035fa:	6823      	ldr	r3, [r4, #0]
 80035fc:	442b      	add	r3, r5
 80035fe:	6023      	str	r3, [r4, #0]
 8003600:	e00e      	b.n	8003620 <_malloc_r+0xa0>
 8003602:	6822      	ldr	r2, [r4, #0]
 8003604:	1b52      	subs	r2, r2, r5
 8003606:	d41e      	bmi.n	8003646 <_malloc_r+0xc6>
 8003608:	2a0b      	cmp	r2, #11
 800360a:	d916      	bls.n	800363a <_malloc_r+0xba>
 800360c:	1961      	adds	r1, r4, r5
 800360e:	42a3      	cmp	r3, r4
 8003610:	6025      	str	r5, [r4, #0]
 8003612:	bf18      	it	ne
 8003614:	6059      	strne	r1, [r3, #4]
 8003616:	6863      	ldr	r3, [r4, #4]
 8003618:	bf08      	it	eq
 800361a:	6031      	streq	r1, [r6, #0]
 800361c:	5162      	str	r2, [r4, r5]
 800361e:	604b      	str	r3, [r1, #4]
 8003620:	4638      	mov	r0, r7
 8003622:	f104 060b 	add.w	r6, r4, #11
 8003626:	f000 f855 	bl	80036d4 <__malloc_unlock>
 800362a:	f026 0607 	bic.w	r6, r6, #7
 800362e:	1d23      	adds	r3, r4, #4
 8003630:	1af2      	subs	r2, r6, r3
 8003632:	d0b6      	beq.n	80035a2 <_malloc_r+0x22>
 8003634:	1b9b      	subs	r3, r3, r6
 8003636:	50a3      	str	r3, [r4, r2]
 8003638:	e7b3      	b.n	80035a2 <_malloc_r+0x22>
 800363a:	6862      	ldr	r2, [r4, #4]
 800363c:	42a3      	cmp	r3, r4
 800363e:	bf0c      	ite	eq
 8003640:	6032      	streq	r2, [r6, #0]
 8003642:	605a      	strne	r2, [r3, #4]
 8003644:	e7ec      	b.n	8003620 <_malloc_r+0xa0>
 8003646:	4623      	mov	r3, r4
 8003648:	6864      	ldr	r4, [r4, #4]
 800364a:	e7b2      	b.n	80035b2 <_malloc_r+0x32>
 800364c:	4634      	mov	r4, r6
 800364e:	6876      	ldr	r6, [r6, #4]
 8003650:	e7b9      	b.n	80035c6 <_malloc_r+0x46>
 8003652:	230c      	movs	r3, #12
 8003654:	603b      	str	r3, [r7, #0]
 8003656:	4638      	mov	r0, r7
 8003658:	f000 f83c 	bl	80036d4 <__malloc_unlock>
 800365c:	e7a1      	b.n	80035a2 <_malloc_r+0x22>
 800365e:	6025      	str	r5, [r4, #0]
 8003660:	e7de      	b.n	8003620 <_malloc_r+0xa0>
 8003662:	bf00      	nop
 8003664:	20000178 	.word	0x20000178

08003668 <_sbrk_r>:
 8003668:	b538      	push	{r3, r4, r5, lr}
 800366a:	4d06      	ldr	r5, [pc, #24]	; (8003684 <_sbrk_r+0x1c>)
 800366c:	2300      	movs	r3, #0
 800366e:	4604      	mov	r4, r0
 8003670:	4608      	mov	r0, r1
 8003672:	602b      	str	r3, [r5, #0]
 8003674:	f7fd faa6 	bl	8000bc4 <_sbrk>
 8003678:	1c43      	adds	r3, r0, #1
 800367a:	d102      	bne.n	8003682 <_sbrk_r+0x1a>
 800367c:	682b      	ldr	r3, [r5, #0]
 800367e:	b103      	cbz	r3, 8003682 <_sbrk_r+0x1a>
 8003680:	6023      	str	r3, [r4, #0]
 8003682:	bd38      	pop	{r3, r4, r5, pc}
 8003684:	20000180 	.word	0x20000180

08003688 <siprintf>:
 8003688:	b40e      	push	{r1, r2, r3}
 800368a:	b500      	push	{lr}
 800368c:	b09c      	sub	sp, #112	; 0x70
 800368e:	ab1d      	add	r3, sp, #116	; 0x74
 8003690:	9002      	str	r0, [sp, #8]
 8003692:	9006      	str	r0, [sp, #24]
 8003694:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003698:	4809      	ldr	r0, [pc, #36]	; (80036c0 <siprintf+0x38>)
 800369a:	9107      	str	r1, [sp, #28]
 800369c:	9104      	str	r1, [sp, #16]
 800369e:	4909      	ldr	r1, [pc, #36]	; (80036c4 <siprintf+0x3c>)
 80036a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80036a4:	9105      	str	r1, [sp, #20]
 80036a6:	6800      	ldr	r0, [r0, #0]
 80036a8:	9301      	str	r3, [sp, #4]
 80036aa:	a902      	add	r1, sp, #8
 80036ac:	f000 f874 	bl	8003798 <_svfiprintf_r>
 80036b0:	9b02      	ldr	r3, [sp, #8]
 80036b2:	2200      	movs	r2, #0
 80036b4:	701a      	strb	r2, [r3, #0]
 80036b6:	b01c      	add	sp, #112	; 0x70
 80036b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80036bc:	b003      	add	sp, #12
 80036be:	4770      	bx	lr
 80036c0:	2000000c 	.word	0x2000000c
 80036c4:	ffff0208 	.word	0xffff0208

080036c8 <__malloc_lock>:
 80036c8:	4801      	ldr	r0, [pc, #4]	; (80036d0 <__malloc_lock+0x8>)
 80036ca:	f000 baf9 	b.w	8003cc0 <__retarget_lock_acquire_recursive>
 80036ce:	bf00      	nop
 80036d0:	20000184 	.word	0x20000184

080036d4 <__malloc_unlock>:
 80036d4:	4801      	ldr	r0, [pc, #4]	; (80036dc <__malloc_unlock+0x8>)
 80036d6:	f000 baf4 	b.w	8003cc2 <__retarget_lock_release_recursive>
 80036da:	bf00      	nop
 80036dc:	20000184 	.word	0x20000184

080036e0 <__ssputs_r>:
 80036e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036e4:	688e      	ldr	r6, [r1, #8]
 80036e6:	429e      	cmp	r6, r3
 80036e8:	4682      	mov	sl, r0
 80036ea:	460c      	mov	r4, r1
 80036ec:	4690      	mov	r8, r2
 80036ee:	461f      	mov	r7, r3
 80036f0:	d838      	bhi.n	8003764 <__ssputs_r+0x84>
 80036f2:	898a      	ldrh	r2, [r1, #12]
 80036f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80036f8:	d032      	beq.n	8003760 <__ssputs_r+0x80>
 80036fa:	6825      	ldr	r5, [r4, #0]
 80036fc:	6909      	ldr	r1, [r1, #16]
 80036fe:	eba5 0901 	sub.w	r9, r5, r1
 8003702:	6965      	ldr	r5, [r4, #20]
 8003704:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003708:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800370c:	3301      	adds	r3, #1
 800370e:	444b      	add	r3, r9
 8003710:	106d      	asrs	r5, r5, #1
 8003712:	429d      	cmp	r5, r3
 8003714:	bf38      	it	cc
 8003716:	461d      	movcc	r5, r3
 8003718:	0553      	lsls	r3, r2, #21
 800371a:	d531      	bpl.n	8003780 <__ssputs_r+0xa0>
 800371c:	4629      	mov	r1, r5
 800371e:	f7ff ff2f 	bl	8003580 <_malloc_r>
 8003722:	4606      	mov	r6, r0
 8003724:	b950      	cbnz	r0, 800373c <__ssputs_r+0x5c>
 8003726:	230c      	movs	r3, #12
 8003728:	f8ca 3000 	str.w	r3, [sl]
 800372c:	89a3      	ldrh	r3, [r4, #12]
 800372e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003732:	81a3      	strh	r3, [r4, #12]
 8003734:	f04f 30ff 	mov.w	r0, #4294967295
 8003738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800373c:	6921      	ldr	r1, [r4, #16]
 800373e:	464a      	mov	r2, r9
 8003740:	f000 fac0 	bl	8003cc4 <memcpy>
 8003744:	89a3      	ldrh	r3, [r4, #12]
 8003746:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800374a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800374e:	81a3      	strh	r3, [r4, #12]
 8003750:	6126      	str	r6, [r4, #16]
 8003752:	6165      	str	r5, [r4, #20]
 8003754:	444e      	add	r6, r9
 8003756:	eba5 0509 	sub.w	r5, r5, r9
 800375a:	6026      	str	r6, [r4, #0]
 800375c:	60a5      	str	r5, [r4, #8]
 800375e:	463e      	mov	r6, r7
 8003760:	42be      	cmp	r6, r7
 8003762:	d900      	bls.n	8003766 <__ssputs_r+0x86>
 8003764:	463e      	mov	r6, r7
 8003766:	6820      	ldr	r0, [r4, #0]
 8003768:	4632      	mov	r2, r6
 800376a:	4641      	mov	r1, r8
 800376c:	f000 fab8 	bl	8003ce0 <memmove>
 8003770:	68a3      	ldr	r3, [r4, #8]
 8003772:	1b9b      	subs	r3, r3, r6
 8003774:	60a3      	str	r3, [r4, #8]
 8003776:	6823      	ldr	r3, [r4, #0]
 8003778:	4433      	add	r3, r6
 800377a:	6023      	str	r3, [r4, #0]
 800377c:	2000      	movs	r0, #0
 800377e:	e7db      	b.n	8003738 <__ssputs_r+0x58>
 8003780:	462a      	mov	r2, r5
 8003782:	f000 fac7 	bl	8003d14 <_realloc_r>
 8003786:	4606      	mov	r6, r0
 8003788:	2800      	cmp	r0, #0
 800378a:	d1e1      	bne.n	8003750 <__ssputs_r+0x70>
 800378c:	6921      	ldr	r1, [r4, #16]
 800378e:	4650      	mov	r0, sl
 8003790:	f7ff fe8a 	bl	80034a8 <_free_r>
 8003794:	e7c7      	b.n	8003726 <__ssputs_r+0x46>
	...

08003798 <_svfiprintf_r>:
 8003798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800379c:	4698      	mov	r8, r3
 800379e:	898b      	ldrh	r3, [r1, #12]
 80037a0:	061b      	lsls	r3, r3, #24
 80037a2:	b09d      	sub	sp, #116	; 0x74
 80037a4:	4607      	mov	r7, r0
 80037a6:	460d      	mov	r5, r1
 80037a8:	4614      	mov	r4, r2
 80037aa:	d50e      	bpl.n	80037ca <_svfiprintf_r+0x32>
 80037ac:	690b      	ldr	r3, [r1, #16]
 80037ae:	b963      	cbnz	r3, 80037ca <_svfiprintf_r+0x32>
 80037b0:	2140      	movs	r1, #64	; 0x40
 80037b2:	f7ff fee5 	bl	8003580 <_malloc_r>
 80037b6:	6028      	str	r0, [r5, #0]
 80037b8:	6128      	str	r0, [r5, #16]
 80037ba:	b920      	cbnz	r0, 80037c6 <_svfiprintf_r+0x2e>
 80037bc:	230c      	movs	r3, #12
 80037be:	603b      	str	r3, [r7, #0]
 80037c0:	f04f 30ff 	mov.w	r0, #4294967295
 80037c4:	e0d1      	b.n	800396a <_svfiprintf_r+0x1d2>
 80037c6:	2340      	movs	r3, #64	; 0x40
 80037c8:	616b      	str	r3, [r5, #20]
 80037ca:	2300      	movs	r3, #0
 80037cc:	9309      	str	r3, [sp, #36]	; 0x24
 80037ce:	2320      	movs	r3, #32
 80037d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80037d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80037d8:	2330      	movs	r3, #48	; 0x30
 80037da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003984 <_svfiprintf_r+0x1ec>
 80037de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80037e2:	f04f 0901 	mov.w	r9, #1
 80037e6:	4623      	mov	r3, r4
 80037e8:	469a      	mov	sl, r3
 80037ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037ee:	b10a      	cbz	r2, 80037f4 <_svfiprintf_r+0x5c>
 80037f0:	2a25      	cmp	r2, #37	; 0x25
 80037f2:	d1f9      	bne.n	80037e8 <_svfiprintf_r+0x50>
 80037f4:	ebba 0b04 	subs.w	fp, sl, r4
 80037f8:	d00b      	beq.n	8003812 <_svfiprintf_r+0x7a>
 80037fa:	465b      	mov	r3, fp
 80037fc:	4622      	mov	r2, r4
 80037fe:	4629      	mov	r1, r5
 8003800:	4638      	mov	r0, r7
 8003802:	f7ff ff6d 	bl	80036e0 <__ssputs_r>
 8003806:	3001      	adds	r0, #1
 8003808:	f000 80aa 	beq.w	8003960 <_svfiprintf_r+0x1c8>
 800380c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800380e:	445a      	add	r2, fp
 8003810:	9209      	str	r2, [sp, #36]	; 0x24
 8003812:	f89a 3000 	ldrb.w	r3, [sl]
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 80a2 	beq.w	8003960 <_svfiprintf_r+0x1c8>
 800381c:	2300      	movs	r3, #0
 800381e:	f04f 32ff 	mov.w	r2, #4294967295
 8003822:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003826:	f10a 0a01 	add.w	sl, sl, #1
 800382a:	9304      	str	r3, [sp, #16]
 800382c:	9307      	str	r3, [sp, #28]
 800382e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003832:	931a      	str	r3, [sp, #104]	; 0x68
 8003834:	4654      	mov	r4, sl
 8003836:	2205      	movs	r2, #5
 8003838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800383c:	4851      	ldr	r0, [pc, #324]	; (8003984 <_svfiprintf_r+0x1ec>)
 800383e:	f7fc fcd7 	bl	80001f0 <memchr>
 8003842:	9a04      	ldr	r2, [sp, #16]
 8003844:	b9d8      	cbnz	r0, 800387e <_svfiprintf_r+0xe6>
 8003846:	06d0      	lsls	r0, r2, #27
 8003848:	bf44      	itt	mi
 800384a:	2320      	movmi	r3, #32
 800384c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003850:	0711      	lsls	r1, r2, #28
 8003852:	bf44      	itt	mi
 8003854:	232b      	movmi	r3, #43	; 0x2b
 8003856:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800385a:	f89a 3000 	ldrb.w	r3, [sl]
 800385e:	2b2a      	cmp	r3, #42	; 0x2a
 8003860:	d015      	beq.n	800388e <_svfiprintf_r+0xf6>
 8003862:	9a07      	ldr	r2, [sp, #28]
 8003864:	4654      	mov	r4, sl
 8003866:	2000      	movs	r0, #0
 8003868:	f04f 0c0a 	mov.w	ip, #10
 800386c:	4621      	mov	r1, r4
 800386e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003872:	3b30      	subs	r3, #48	; 0x30
 8003874:	2b09      	cmp	r3, #9
 8003876:	d94e      	bls.n	8003916 <_svfiprintf_r+0x17e>
 8003878:	b1b0      	cbz	r0, 80038a8 <_svfiprintf_r+0x110>
 800387a:	9207      	str	r2, [sp, #28]
 800387c:	e014      	b.n	80038a8 <_svfiprintf_r+0x110>
 800387e:	eba0 0308 	sub.w	r3, r0, r8
 8003882:	fa09 f303 	lsl.w	r3, r9, r3
 8003886:	4313      	orrs	r3, r2
 8003888:	9304      	str	r3, [sp, #16]
 800388a:	46a2      	mov	sl, r4
 800388c:	e7d2      	b.n	8003834 <_svfiprintf_r+0x9c>
 800388e:	9b03      	ldr	r3, [sp, #12]
 8003890:	1d19      	adds	r1, r3, #4
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	9103      	str	r1, [sp, #12]
 8003896:	2b00      	cmp	r3, #0
 8003898:	bfbb      	ittet	lt
 800389a:	425b      	neglt	r3, r3
 800389c:	f042 0202 	orrlt.w	r2, r2, #2
 80038a0:	9307      	strge	r3, [sp, #28]
 80038a2:	9307      	strlt	r3, [sp, #28]
 80038a4:	bfb8      	it	lt
 80038a6:	9204      	strlt	r2, [sp, #16]
 80038a8:	7823      	ldrb	r3, [r4, #0]
 80038aa:	2b2e      	cmp	r3, #46	; 0x2e
 80038ac:	d10c      	bne.n	80038c8 <_svfiprintf_r+0x130>
 80038ae:	7863      	ldrb	r3, [r4, #1]
 80038b0:	2b2a      	cmp	r3, #42	; 0x2a
 80038b2:	d135      	bne.n	8003920 <_svfiprintf_r+0x188>
 80038b4:	9b03      	ldr	r3, [sp, #12]
 80038b6:	1d1a      	adds	r2, r3, #4
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	9203      	str	r2, [sp, #12]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	bfb8      	it	lt
 80038c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80038c4:	3402      	adds	r4, #2
 80038c6:	9305      	str	r3, [sp, #20]
 80038c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003994 <_svfiprintf_r+0x1fc>
 80038cc:	7821      	ldrb	r1, [r4, #0]
 80038ce:	2203      	movs	r2, #3
 80038d0:	4650      	mov	r0, sl
 80038d2:	f7fc fc8d 	bl	80001f0 <memchr>
 80038d6:	b140      	cbz	r0, 80038ea <_svfiprintf_r+0x152>
 80038d8:	2340      	movs	r3, #64	; 0x40
 80038da:	eba0 000a 	sub.w	r0, r0, sl
 80038de:	fa03 f000 	lsl.w	r0, r3, r0
 80038e2:	9b04      	ldr	r3, [sp, #16]
 80038e4:	4303      	orrs	r3, r0
 80038e6:	3401      	adds	r4, #1
 80038e8:	9304      	str	r3, [sp, #16]
 80038ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038ee:	4826      	ldr	r0, [pc, #152]	; (8003988 <_svfiprintf_r+0x1f0>)
 80038f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038f4:	2206      	movs	r2, #6
 80038f6:	f7fc fc7b 	bl	80001f0 <memchr>
 80038fa:	2800      	cmp	r0, #0
 80038fc:	d038      	beq.n	8003970 <_svfiprintf_r+0x1d8>
 80038fe:	4b23      	ldr	r3, [pc, #140]	; (800398c <_svfiprintf_r+0x1f4>)
 8003900:	bb1b      	cbnz	r3, 800394a <_svfiprintf_r+0x1b2>
 8003902:	9b03      	ldr	r3, [sp, #12]
 8003904:	3307      	adds	r3, #7
 8003906:	f023 0307 	bic.w	r3, r3, #7
 800390a:	3308      	adds	r3, #8
 800390c:	9303      	str	r3, [sp, #12]
 800390e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003910:	4433      	add	r3, r6
 8003912:	9309      	str	r3, [sp, #36]	; 0x24
 8003914:	e767      	b.n	80037e6 <_svfiprintf_r+0x4e>
 8003916:	fb0c 3202 	mla	r2, ip, r2, r3
 800391a:	460c      	mov	r4, r1
 800391c:	2001      	movs	r0, #1
 800391e:	e7a5      	b.n	800386c <_svfiprintf_r+0xd4>
 8003920:	2300      	movs	r3, #0
 8003922:	3401      	adds	r4, #1
 8003924:	9305      	str	r3, [sp, #20]
 8003926:	4619      	mov	r1, r3
 8003928:	f04f 0c0a 	mov.w	ip, #10
 800392c:	4620      	mov	r0, r4
 800392e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003932:	3a30      	subs	r2, #48	; 0x30
 8003934:	2a09      	cmp	r2, #9
 8003936:	d903      	bls.n	8003940 <_svfiprintf_r+0x1a8>
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0c5      	beq.n	80038c8 <_svfiprintf_r+0x130>
 800393c:	9105      	str	r1, [sp, #20]
 800393e:	e7c3      	b.n	80038c8 <_svfiprintf_r+0x130>
 8003940:	fb0c 2101 	mla	r1, ip, r1, r2
 8003944:	4604      	mov	r4, r0
 8003946:	2301      	movs	r3, #1
 8003948:	e7f0      	b.n	800392c <_svfiprintf_r+0x194>
 800394a:	ab03      	add	r3, sp, #12
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	462a      	mov	r2, r5
 8003950:	4b0f      	ldr	r3, [pc, #60]	; (8003990 <_svfiprintf_r+0x1f8>)
 8003952:	a904      	add	r1, sp, #16
 8003954:	4638      	mov	r0, r7
 8003956:	f3af 8000 	nop.w
 800395a:	1c42      	adds	r2, r0, #1
 800395c:	4606      	mov	r6, r0
 800395e:	d1d6      	bne.n	800390e <_svfiprintf_r+0x176>
 8003960:	89ab      	ldrh	r3, [r5, #12]
 8003962:	065b      	lsls	r3, r3, #25
 8003964:	f53f af2c 	bmi.w	80037c0 <_svfiprintf_r+0x28>
 8003968:	9809      	ldr	r0, [sp, #36]	; 0x24
 800396a:	b01d      	add	sp, #116	; 0x74
 800396c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003970:	ab03      	add	r3, sp, #12
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	462a      	mov	r2, r5
 8003976:	4b06      	ldr	r3, [pc, #24]	; (8003990 <_svfiprintf_r+0x1f8>)
 8003978:	a904      	add	r1, sp, #16
 800397a:	4638      	mov	r0, r7
 800397c:	f000 f87a 	bl	8003a74 <_printf_i>
 8003980:	e7eb      	b.n	800395a <_svfiprintf_r+0x1c2>
 8003982:	bf00      	nop
 8003984:	08003e20 	.word	0x08003e20
 8003988:	08003e2a 	.word	0x08003e2a
 800398c:	00000000 	.word	0x00000000
 8003990:	080036e1 	.word	0x080036e1
 8003994:	08003e26 	.word	0x08003e26

08003998 <_printf_common>:
 8003998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800399c:	4616      	mov	r6, r2
 800399e:	4699      	mov	r9, r3
 80039a0:	688a      	ldr	r2, [r1, #8]
 80039a2:	690b      	ldr	r3, [r1, #16]
 80039a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039a8:	4293      	cmp	r3, r2
 80039aa:	bfb8      	it	lt
 80039ac:	4613      	movlt	r3, r2
 80039ae:	6033      	str	r3, [r6, #0]
 80039b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039b4:	4607      	mov	r7, r0
 80039b6:	460c      	mov	r4, r1
 80039b8:	b10a      	cbz	r2, 80039be <_printf_common+0x26>
 80039ba:	3301      	adds	r3, #1
 80039bc:	6033      	str	r3, [r6, #0]
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	0699      	lsls	r1, r3, #26
 80039c2:	bf42      	ittt	mi
 80039c4:	6833      	ldrmi	r3, [r6, #0]
 80039c6:	3302      	addmi	r3, #2
 80039c8:	6033      	strmi	r3, [r6, #0]
 80039ca:	6825      	ldr	r5, [r4, #0]
 80039cc:	f015 0506 	ands.w	r5, r5, #6
 80039d0:	d106      	bne.n	80039e0 <_printf_common+0x48>
 80039d2:	f104 0a19 	add.w	sl, r4, #25
 80039d6:	68e3      	ldr	r3, [r4, #12]
 80039d8:	6832      	ldr	r2, [r6, #0]
 80039da:	1a9b      	subs	r3, r3, r2
 80039dc:	42ab      	cmp	r3, r5
 80039de:	dc26      	bgt.n	8003a2e <_printf_common+0x96>
 80039e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80039e4:	1e13      	subs	r3, r2, #0
 80039e6:	6822      	ldr	r2, [r4, #0]
 80039e8:	bf18      	it	ne
 80039ea:	2301      	movne	r3, #1
 80039ec:	0692      	lsls	r2, r2, #26
 80039ee:	d42b      	bmi.n	8003a48 <_printf_common+0xb0>
 80039f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039f4:	4649      	mov	r1, r9
 80039f6:	4638      	mov	r0, r7
 80039f8:	47c0      	blx	r8
 80039fa:	3001      	adds	r0, #1
 80039fc:	d01e      	beq.n	8003a3c <_printf_common+0xa4>
 80039fe:	6823      	ldr	r3, [r4, #0]
 8003a00:	68e5      	ldr	r5, [r4, #12]
 8003a02:	6832      	ldr	r2, [r6, #0]
 8003a04:	f003 0306 	and.w	r3, r3, #6
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	bf08      	it	eq
 8003a0c:	1aad      	subeq	r5, r5, r2
 8003a0e:	68a3      	ldr	r3, [r4, #8]
 8003a10:	6922      	ldr	r2, [r4, #16]
 8003a12:	bf0c      	ite	eq
 8003a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a18:	2500      	movne	r5, #0
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	bfc4      	itt	gt
 8003a1e:	1a9b      	subgt	r3, r3, r2
 8003a20:	18ed      	addgt	r5, r5, r3
 8003a22:	2600      	movs	r6, #0
 8003a24:	341a      	adds	r4, #26
 8003a26:	42b5      	cmp	r5, r6
 8003a28:	d11a      	bne.n	8003a60 <_printf_common+0xc8>
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	e008      	b.n	8003a40 <_printf_common+0xa8>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	4652      	mov	r2, sl
 8003a32:	4649      	mov	r1, r9
 8003a34:	4638      	mov	r0, r7
 8003a36:	47c0      	blx	r8
 8003a38:	3001      	adds	r0, #1
 8003a3a:	d103      	bne.n	8003a44 <_printf_common+0xac>
 8003a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a44:	3501      	adds	r5, #1
 8003a46:	e7c6      	b.n	80039d6 <_printf_common+0x3e>
 8003a48:	18e1      	adds	r1, r4, r3
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	2030      	movs	r0, #48	; 0x30
 8003a4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a52:	4422      	add	r2, r4
 8003a54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a5c:	3302      	adds	r3, #2
 8003a5e:	e7c7      	b.n	80039f0 <_printf_common+0x58>
 8003a60:	2301      	movs	r3, #1
 8003a62:	4622      	mov	r2, r4
 8003a64:	4649      	mov	r1, r9
 8003a66:	4638      	mov	r0, r7
 8003a68:	47c0      	blx	r8
 8003a6a:	3001      	adds	r0, #1
 8003a6c:	d0e6      	beq.n	8003a3c <_printf_common+0xa4>
 8003a6e:	3601      	adds	r6, #1
 8003a70:	e7d9      	b.n	8003a26 <_printf_common+0x8e>
	...

08003a74 <_printf_i>:
 8003a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a78:	7e0f      	ldrb	r7, [r1, #24]
 8003a7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a7c:	2f78      	cmp	r7, #120	; 0x78
 8003a7e:	4691      	mov	r9, r2
 8003a80:	4680      	mov	r8, r0
 8003a82:	460c      	mov	r4, r1
 8003a84:	469a      	mov	sl, r3
 8003a86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a8a:	d807      	bhi.n	8003a9c <_printf_i+0x28>
 8003a8c:	2f62      	cmp	r7, #98	; 0x62
 8003a8e:	d80a      	bhi.n	8003aa6 <_printf_i+0x32>
 8003a90:	2f00      	cmp	r7, #0
 8003a92:	f000 80d8 	beq.w	8003c46 <_printf_i+0x1d2>
 8003a96:	2f58      	cmp	r7, #88	; 0x58
 8003a98:	f000 80a3 	beq.w	8003be2 <_printf_i+0x16e>
 8003a9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003aa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003aa4:	e03a      	b.n	8003b1c <_printf_i+0xa8>
 8003aa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003aaa:	2b15      	cmp	r3, #21
 8003aac:	d8f6      	bhi.n	8003a9c <_printf_i+0x28>
 8003aae:	a101      	add	r1, pc, #4	; (adr r1, 8003ab4 <_printf_i+0x40>)
 8003ab0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ab4:	08003b0d 	.word	0x08003b0d
 8003ab8:	08003b21 	.word	0x08003b21
 8003abc:	08003a9d 	.word	0x08003a9d
 8003ac0:	08003a9d 	.word	0x08003a9d
 8003ac4:	08003a9d 	.word	0x08003a9d
 8003ac8:	08003a9d 	.word	0x08003a9d
 8003acc:	08003b21 	.word	0x08003b21
 8003ad0:	08003a9d 	.word	0x08003a9d
 8003ad4:	08003a9d 	.word	0x08003a9d
 8003ad8:	08003a9d 	.word	0x08003a9d
 8003adc:	08003a9d 	.word	0x08003a9d
 8003ae0:	08003c2d 	.word	0x08003c2d
 8003ae4:	08003b51 	.word	0x08003b51
 8003ae8:	08003c0f 	.word	0x08003c0f
 8003aec:	08003a9d 	.word	0x08003a9d
 8003af0:	08003a9d 	.word	0x08003a9d
 8003af4:	08003c4f 	.word	0x08003c4f
 8003af8:	08003a9d 	.word	0x08003a9d
 8003afc:	08003b51 	.word	0x08003b51
 8003b00:	08003a9d 	.word	0x08003a9d
 8003b04:	08003a9d 	.word	0x08003a9d
 8003b08:	08003c17 	.word	0x08003c17
 8003b0c:	682b      	ldr	r3, [r5, #0]
 8003b0e:	1d1a      	adds	r2, r3, #4
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	602a      	str	r2, [r5, #0]
 8003b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e0a3      	b.n	8003c68 <_printf_i+0x1f4>
 8003b20:	6820      	ldr	r0, [r4, #0]
 8003b22:	6829      	ldr	r1, [r5, #0]
 8003b24:	0606      	lsls	r6, r0, #24
 8003b26:	f101 0304 	add.w	r3, r1, #4
 8003b2a:	d50a      	bpl.n	8003b42 <_printf_i+0xce>
 8003b2c:	680e      	ldr	r6, [r1, #0]
 8003b2e:	602b      	str	r3, [r5, #0]
 8003b30:	2e00      	cmp	r6, #0
 8003b32:	da03      	bge.n	8003b3c <_printf_i+0xc8>
 8003b34:	232d      	movs	r3, #45	; 0x2d
 8003b36:	4276      	negs	r6, r6
 8003b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b3c:	485e      	ldr	r0, [pc, #376]	; (8003cb8 <_printf_i+0x244>)
 8003b3e:	230a      	movs	r3, #10
 8003b40:	e019      	b.n	8003b76 <_printf_i+0x102>
 8003b42:	680e      	ldr	r6, [r1, #0]
 8003b44:	602b      	str	r3, [r5, #0]
 8003b46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b4a:	bf18      	it	ne
 8003b4c:	b236      	sxthne	r6, r6
 8003b4e:	e7ef      	b.n	8003b30 <_printf_i+0xbc>
 8003b50:	682b      	ldr	r3, [r5, #0]
 8003b52:	6820      	ldr	r0, [r4, #0]
 8003b54:	1d19      	adds	r1, r3, #4
 8003b56:	6029      	str	r1, [r5, #0]
 8003b58:	0601      	lsls	r1, r0, #24
 8003b5a:	d501      	bpl.n	8003b60 <_printf_i+0xec>
 8003b5c:	681e      	ldr	r6, [r3, #0]
 8003b5e:	e002      	b.n	8003b66 <_printf_i+0xf2>
 8003b60:	0646      	lsls	r6, r0, #25
 8003b62:	d5fb      	bpl.n	8003b5c <_printf_i+0xe8>
 8003b64:	881e      	ldrh	r6, [r3, #0]
 8003b66:	4854      	ldr	r0, [pc, #336]	; (8003cb8 <_printf_i+0x244>)
 8003b68:	2f6f      	cmp	r7, #111	; 0x6f
 8003b6a:	bf0c      	ite	eq
 8003b6c:	2308      	moveq	r3, #8
 8003b6e:	230a      	movne	r3, #10
 8003b70:	2100      	movs	r1, #0
 8003b72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b76:	6865      	ldr	r5, [r4, #4]
 8003b78:	60a5      	str	r5, [r4, #8]
 8003b7a:	2d00      	cmp	r5, #0
 8003b7c:	bfa2      	ittt	ge
 8003b7e:	6821      	ldrge	r1, [r4, #0]
 8003b80:	f021 0104 	bicge.w	r1, r1, #4
 8003b84:	6021      	strge	r1, [r4, #0]
 8003b86:	b90e      	cbnz	r6, 8003b8c <_printf_i+0x118>
 8003b88:	2d00      	cmp	r5, #0
 8003b8a:	d04d      	beq.n	8003c28 <_printf_i+0x1b4>
 8003b8c:	4615      	mov	r5, r2
 8003b8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b92:	fb03 6711 	mls	r7, r3, r1, r6
 8003b96:	5dc7      	ldrb	r7, [r0, r7]
 8003b98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b9c:	4637      	mov	r7, r6
 8003b9e:	42bb      	cmp	r3, r7
 8003ba0:	460e      	mov	r6, r1
 8003ba2:	d9f4      	bls.n	8003b8e <_printf_i+0x11a>
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d10b      	bne.n	8003bc0 <_printf_i+0x14c>
 8003ba8:	6823      	ldr	r3, [r4, #0]
 8003baa:	07de      	lsls	r6, r3, #31
 8003bac:	d508      	bpl.n	8003bc0 <_printf_i+0x14c>
 8003bae:	6923      	ldr	r3, [r4, #16]
 8003bb0:	6861      	ldr	r1, [r4, #4]
 8003bb2:	4299      	cmp	r1, r3
 8003bb4:	bfde      	ittt	le
 8003bb6:	2330      	movle	r3, #48	; 0x30
 8003bb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003bbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003bc0:	1b52      	subs	r2, r2, r5
 8003bc2:	6122      	str	r2, [r4, #16]
 8003bc4:	f8cd a000 	str.w	sl, [sp]
 8003bc8:	464b      	mov	r3, r9
 8003bca:	aa03      	add	r2, sp, #12
 8003bcc:	4621      	mov	r1, r4
 8003bce:	4640      	mov	r0, r8
 8003bd0:	f7ff fee2 	bl	8003998 <_printf_common>
 8003bd4:	3001      	adds	r0, #1
 8003bd6:	d14c      	bne.n	8003c72 <_printf_i+0x1fe>
 8003bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bdc:	b004      	add	sp, #16
 8003bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003be2:	4835      	ldr	r0, [pc, #212]	; (8003cb8 <_printf_i+0x244>)
 8003be4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003be8:	6829      	ldr	r1, [r5, #0]
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	f851 6b04 	ldr.w	r6, [r1], #4
 8003bf0:	6029      	str	r1, [r5, #0]
 8003bf2:	061d      	lsls	r5, r3, #24
 8003bf4:	d514      	bpl.n	8003c20 <_printf_i+0x1ac>
 8003bf6:	07df      	lsls	r7, r3, #31
 8003bf8:	bf44      	itt	mi
 8003bfa:	f043 0320 	orrmi.w	r3, r3, #32
 8003bfe:	6023      	strmi	r3, [r4, #0]
 8003c00:	b91e      	cbnz	r6, 8003c0a <_printf_i+0x196>
 8003c02:	6823      	ldr	r3, [r4, #0]
 8003c04:	f023 0320 	bic.w	r3, r3, #32
 8003c08:	6023      	str	r3, [r4, #0]
 8003c0a:	2310      	movs	r3, #16
 8003c0c:	e7b0      	b.n	8003b70 <_printf_i+0xfc>
 8003c0e:	6823      	ldr	r3, [r4, #0]
 8003c10:	f043 0320 	orr.w	r3, r3, #32
 8003c14:	6023      	str	r3, [r4, #0]
 8003c16:	2378      	movs	r3, #120	; 0x78
 8003c18:	4828      	ldr	r0, [pc, #160]	; (8003cbc <_printf_i+0x248>)
 8003c1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c1e:	e7e3      	b.n	8003be8 <_printf_i+0x174>
 8003c20:	0659      	lsls	r1, r3, #25
 8003c22:	bf48      	it	mi
 8003c24:	b2b6      	uxthmi	r6, r6
 8003c26:	e7e6      	b.n	8003bf6 <_printf_i+0x182>
 8003c28:	4615      	mov	r5, r2
 8003c2a:	e7bb      	b.n	8003ba4 <_printf_i+0x130>
 8003c2c:	682b      	ldr	r3, [r5, #0]
 8003c2e:	6826      	ldr	r6, [r4, #0]
 8003c30:	6961      	ldr	r1, [r4, #20]
 8003c32:	1d18      	adds	r0, r3, #4
 8003c34:	6028      	str	r0, [r5, #0]
 8003c36:	0635      	lsls	r5, r6, #24
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	d501      	bpl.n	8003c40 <_printf_i+0x1cc>
 8003c3c:	6019      	str	r1, [r3, #0]
 8003c3e:	e002      	b.n	8003c46 <_printf_i+0x1d2>
 8003c40:	0670      	lsls	r0, r6, #25
 8003c42:	d5fb      	bpl.n	8003c3c <_printf_i+0x1c8>
 8003c44:	8019      	strh	r1, [r3, #0]
 8003c46:	2300      	movs	r3, #0
 8003c48:	6123      	str	r3, [r4, #16]
 8003c4a:	4615      	mov	r5, r2
 8003c4c:	e7ba      	b.n	8003bc4 <_printf_i+0x150>
 8003c4e:	682b      	ldr	r3, [r5, #0]
 8003c50:	1d1a      	adds	r2, r3, #4
 8003c52:	602a      	str	r2, [r5, #0]
 8003c54:	681d      	ldr	r5, [r3, #0]
 8003c56:	6862      	ldr	r2, [r4, #4]
 8003c58:	2100      	movs	r1, #0
 8003c5a:	4628      	mov	r0, r5
 8003c5c:	f7fc fac8 	bl	80001f0 <memchr>
 8003c60:	b108      	cbz	r0, 8003c66 <_printf_i+0x1f2>
 8003c62:	1b40      	subs	r0, r0, r5
 8003c64:	6060      	str	r0, [r4, #4]
 8003c66:	6863      	ldr	r3, [r4, #4]
 8003c68:	6123      	str	r3, [r4, #16]
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c70:	e7a8      	b.n	8003bc4 <_printf_i+0x150>
 8003c72:	6923      	ldr	r3, [r4, #16]
 8003c74:	462a      	mov	r2, r5
 8003c76:	4649      	mov	r1, r9
 8003c78:	4640      	mov	r0, r8
 8003c7a:	47d0      	blx	sl
 8003c7c:	3001      	adds	r0, #1
 8003c7e:	d0ab      	beq.n	8003bd8 <_printf_i+0x164>
 8003c80:	6823      	ldr	r3, [r4, #0]
 8003c82:	079b      	lsls	r3, r3, #30
 8003c84:	d413      	bmi.n	8003cae <_printf_i+0x23a>
 8003c86:	68e0      	ldr	r0, [r4, #12]
 8003c88:	9b03      	ldr	r3, [sp, #12]
 8003c8a:	4298      	cmp	r0, r3
 8003c8c:	bfb8      	it	lt
 8003c8e:	4618      	movlt	r0, r3
 8003c90:	e7a4      	b.n	8003bdc <_printf_i+0x168>
 8003c92:	2301      	movs	r3, #1
 8003c94:	4632      	mov	r2, r6
 8003c96:	4649      	mov	r1, r9
 8003c98:	4640      	mov	r0, r8
 8003c9a:	47d0      	blx	sl
 8003c9c:	3001      	adds	r0, #1
 8003c9e:	d09b      	beq.n	8003bd8 <_printf_i+0x164>
 8003ca0:	3501      	adds	r5, #1
 8003ca2:	68e3      	ldr	r3, [r4, #12]
 8003ca4:	9903      	ldr	r1, [sp, #12]
 8003ca6:	1a5b      	subs	r3, r3, r1
 8003ca8:	42ab      	cmp	r3, r5
 8003caa:	dcf2      	bgt.n	8003c92 <_printf_i+0x21e>
 8003cac:	e7eb      	b.n	8003c86 <_printf_i+0x212>
 8003cae:	2500      	movs	r5, #0
 8003cb0:	f104 0619 	add.w	r6, r4, #25
 8003cb4:	e7f5      	b.n	8003ca2 <_printf_i+0x22e>
 8003cb6:	bf00      	nop
 8003cb8:	08003e31 	.word	0x08003e31
 8003cbc:	08003e42 	.word	0x08003e42

08003cc0 <__retarget_lock_acquire_recursive>:
 8003cc0:	4770      	bx	lr

08003cc2 <__retarget_lock_release_recursive>:
 8003cc2:	4770      	bx	lr

08003cc4 <memcpy>:
 8003cc4:	440a      	add	r2, r1
 8003cc6:	4291      	cmp	r1, r2
 8003cc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ccc:	d100      	bne.n	8003cd0 <memcpy+0xc>
 8003cce:	4770      	bx	lr
 8003cd0:	b510      	push	{r4, lr}
 8003cd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cda:	4291      	cmp	r1, r2
 8003cdc:	d1f9      	bne.n	8003cd2 <memcpy+0xe>
 8003cde:	bd10      	pop	{r4, pc}

08003ce0 <memmove>:
 8003ce0:	4288      	cmp	r0, r1
 8003ce2:	b510      	push	{r4, lr}
 8003ce4:	eb01 0402 	add.w	r4, r1, r2
 8003ce8:	d902      	bls.n	8003cf0 <memmove+0x10>
 8003cea:	4284      	cmp	r4, r0
 8003cec:	4623      	mov	r3, r4
 8003cee:	d807      	bhi.n	8003d00 <memmove+0x20>
 8003cf0:	1e43      	subs	r3, r0, #1
 8003cf2:	42a1      	cmp	r1, r4
 8003cf4:	d008      	beq.n	8003d08 <memmove+0x28>
 8003cf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003cfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003cfe:	e7f8      	b.n	8003cf2 <memmove+0x12>
 8003d00:	4402      	add	r2, r0
 8003d02:	4601      	mov	r1, r0
 8003d04:	428a      	cmp	r2, r1
 8003d06:	d100      	bne.n	8003d0a <memmove+0x2a>
 8003d08:	bd10      	pop	{r4, pc}
 8003d0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d12:	e7f7      	b.n	8003d04 <memmove+0x24>

08003d14 <_realloc_r>:
 8003d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d18:	4680      	mov	r8, r0
 8003d1a:	4614      	mov	r4, r2
 8003d1c:	460e      	mov	r6, r1
 8003d1e:	b921      	cbnz	r1, 8003d2a <_realloc_r+0x16>
 8003d20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d24:	4611      	mov	r1, r2
 8003d26:	f7ff bc2b 	b.w	8003580 <_malloc_r>
 8003d2a:	b92a      	cbnz	r2, 8003d38 <_realloc_r+0x24>
 8003d2c:	f7ff fbbc 	bl	80034a8 <_free_r>
 8003d30:	4625      	mov	r5, r4
 8003d32:	4628      	mov	r0, r5
 8003d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d38:	f000 f81b 	bl	8003d72 <_malloc_usable_size_r>
 8003d3c:	4284      	cmp	r4, r0
 8003d3e:	4607      	mov	r7, r0
 8003d40:	d802      	bhi.n	8003d48 <_realloc_r+0x34>
 8003d42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003d46:	d812      	bhi.n	8003d6e <_realloc_r+0x5a>
 8003d48:	4621      	mov	r1, r4
 8003d4a:	4640      	mov	r0, r8
 8003d4c:	f7ff fc18 	bl	8003580 <_malloc_r>
 8003d50:	4605      	mov	r5, r0
 8003d52:	2800      	cmp	r0, #0
 8003d54:	d0ed      	beq.n	8003d32 <_realloc_r+0x1e>
 8003d56:	42bc      	cmp	r4, r7
 8003d58:	4622      	mov	r2, r4
 8003d5a:	4631      	mov	r1, r6
 8003d5c:	bf28      	it	cs
 8003d5e:	463a      	movcs	r2, r7
 8003d60:	f7ff ffb0 	bl	8003cc4 <memcpy>
 8003d64:	4631      	mov	r1, r6
 8003d66:	4640      	mov	r0, r8
 8003d68:	f7ff fb9e 	bl	80034a8 <_free_r>
 8003d6c:	e7e1      	b.n	8003d32 <_realloc_r+0x1e>
 8003d6e:	4635      	mov	r5, r6
 8003d70:	e7df      	b.n	8003d32 <_realloc_r+0x1e>

08003d72 <_malloc_usable_size_r>:
 8003d72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d76:	1f18      	subs	r0, r3, #4
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	bfbc      	itt	lt
 8003d7c:	580b      	ldrlt	r3, [r1, r0]
 8003d7e:	18c0      	addlt	r0, r0, r3
 8003d80:	4770      	bx	lr
	...

08003d84 <_init>:
 8003d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d86:	bf00      	nop
 8003d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d8a:	bc08      	pop	{r3}
 8003d8c:	469e      	mov	lr, r3
 8003d8e:	4770      	bx	lr

08003d90 <_fini>:
 8003d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d92:	bf00      	nop
 8003d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d96:	bc08      	pop	{r3}
 8003d98:	469e      	mov	lr, r3
 8003d9a:	4770      	bx	lr
