
CH6 Timers - Tutorial 6-5 RTC Alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e50  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004000  08004000  00014000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004084  08004084  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004084  08004084  00014084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800408c  0800408c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800408c  0800408c  0001408c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004090  08004090  00014090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000001f0  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000258  20000258  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000aca3  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001c58  00000000  00000000  0002ad7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000980  00000000  00000000  0002c9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000073e  00000000  00000000  0002d358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024242  00000000  00000000  0002da96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000be8e  00000000  00000000  00051cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d9581  00000000  00000000  0005db66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002dd0  00000000  00000000  001370e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000096  00000000  00000000  00139eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003fe8 	.word	0x08003fe8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08003fe8 	.word	0x08003fe8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	b29a      	uxth	r2, r3
 800059c:	f04f 33ff 	mov.w	r3, #4294967295
 80005a0:	68b9      	ldr	r1, [r7, #8]
 80005a2:	4804      	ldr	r0, [pc, #16]	; (80005b4 <_write+0x28>)
 80005a4:	f002 fa1a 	bl	80029dc <HAL_UART_Transmit>
	return len;
 80005a8:	687b      	ldr	r3, [r7, #4]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	200000a4 	.word	0x200000a4

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f000 fb74 	bl	8000ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f842 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 f968 	bl	8000898 <MX_GPIO_Init>
  MX_RTC_Init();
 80005c8:	f000 f8ac 	bl	8000724 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80005cc:	f000 f93a 	bl	8000844 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(Flag ==1){
 80005d0:	4b16      	ldr	r3, [pc, #88]	; (800062c <main+0x74>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d1fb      	bne.n	80005d0 <main+0x18>
		  printf("DATE AND TIME IS:\r\n");
 80005d8:	4815      	ldr	r0, [pc, #84]	; (8000630 <main+0x78>)
 80005da:	f002 fe9b 	bl	8003314 <puts>
		  // Get date time when the alarm goes off
		  /* Get the RTC current Time */
		  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80005de:	2200      	movs	r2, #0
 80005e0:	4914      	ldr	r1, [pc, #80]	; (8000634 <main+0x7c>)
 80005e2:	4815      	ldr	r0, [pc, #84]	; (8000638 <main+0x80>)
 80005e4:	f001 fe2c 	bl	8002240 <HAL_RTC_GetTime>
		  /* Get the RTC current Date */
		  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80005e8:	2200      	movs	r2, #0
 80005ea:	4914      	ldr	r1, [pc, #80]	; (800063c <main+0x84>)
 80005ec:	4812      	ldr	r0, [pc, #72]	; (8000638 <main+0x80>)
 80005ee:	f001 ff09 	bl	8002404 <HAL_RTC_GetDate>
		  /* Display time Format: hh:mm:ss */
		  printf("%02d:%02d:%02d\r\n",gTime.Hours, gTime.Minutes, gTime.Seconds);
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <main+0x7c>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	4619      	mov	r1, r3
 80005f8:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <main+0x7c>)
 80005fa:	785b      	ldrb	r3, [r3, #1]
 80005fc:	461a      	mov	r2, r3
 80005fe:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <main+0x7c>)
 8000600:	789b      	ldrb	r3, [r3, #2]
 8000602:	480f      	ldr	r0, [pc, #60]	; (8000640 <main+0x88>)
 8000604:	f002 fe20 	bl	8003248 <iprintf>
		  /* Display date Format: dd-mm-yy */
		  printf("%02d-%02d-%2d\r\n",gDate.Date, gDate.Month, 2000 + gDate.Year);
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <main+0x84>)
 800060a:	789b      	ldrb	r3, [r3, #2]
 800060c:	4619      	mov	r1, r3
 800060e:	4b0b      	ldr	r3, [pc, #44]	; (800063c <main+0x84>)
 8000610:	785b      	ldrb	r3, [r3, #1]
 8000612:	461a      	mov	r2, r3
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <main+0x84>)
 8000616:	78db      	ldrb	r3, [r3, #3]
 8000618:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800061c:	4809      	ldr	r0, [pc, #36]	; (8000644 <main+0x8c>)
 800061e:	f002 fe13 	bl	8003248 <iprintf>
		  Flag = 0;
 8000622:	4b02      	ldr	r3, [pc, #8]	; (800062c <main+0x74>)
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
	  if(Flag ==1){
 8000628:	e7d2      	b.n	80005d0 <main+0x18>
 800062a:	bf00      	nop
 800062c:	20000100 	.word	0x20000100
 8000630:	08004000 	.word	0x08004000
 8000634:	200000ec 	.word	0x200000ec
 8000638:	20000084 	.word	0x20000084
 800063c:	200000e8 	.word	0x200000e8
 8000640:	08004014 	.word	0x08004014
 8000644:	08004028 	.word	0x08004028

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	; 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	; 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f002 ff3c 	bl	80034d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	4b2a      	ldr	r3, [pc, #168]	; (800071c <SystemClock_Config+0xd4>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	4a29      	ldr	r2, [pc, #164]	; (800071c <SystemClock_Config+0xd4>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	; 0x40
 800067c:	4b27      	ldr	r3, [pc, #156]	; (800071c <SystemClock_Config+0xd4>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	4b24      	ldr	r3, [pc, #144]	; (8000720 <SystemClock_Config+0xd8>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000694:	4a22      	ldr	r2, [pc, #136]	; (8000720 <SystemClock_Config+0xd8>)
 8000696:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b20      	ldr	r3, [pc, #128]	; (8000720 <SystemClock_Config+0xd8>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006a8:	2303      	movs	r3, #3
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b2:	2301      	movs	r3, #1
 80006b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b6:	2310      	movs	r3, #16
 80006b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ba:	2302      	movs	r3, #2
 80006bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006be:	2300      	movs	r3, #0
 80006c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c2:	2308      	movs	r3, #8
 80006c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006c6:	2332      	movs	r3, #50	; 0x32
 80006c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ca:	2304      	movs	r3, #4
 80006cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ce:	2307      	movs	r3, #7
 80006d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fe4a 	bl	8001370 <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006e2:	f000 f93f 	bl	8000964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	230f      	movs	r3, #15
 80006e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2302      	movs	r3, #2
 80006ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80006f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80006f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	2100      	movs	r1, #0
 8000704:	4618      	mov	r0, r3
 8000706:	f001 f8ab 	bl	8001860 <HAL_RCC_ClockConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000710:	f000 f928 	bl	8000964 <Error_Handler>
  }
}
 8000714:	bf00      	nop
 8000716:	3750      	adds	r7, #80	; 0x50
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b090      	sub	sp, #64	; 0x40
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800072a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800073a:	2300      	movs	r3, #0
 800073c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800073e:	463b      	mov	r3, r7
 8000740:	2228      	movs	r2, #40	; 0x28
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f002 fec5 	bl	80034d4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800074a:	4b3c      	ldr	r3, [pc, #240]	; (800083c <MX_RTC_Init+0x118>)
 800074c:	4a3c      	ldr	r2, [pc, #240]	; (8000840 <MX_RTC_Init+0x11c>)
 800074e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000750:	4b3a      	ldr	r3, [pc, #232]	; (800083c <MX_RTC_Init+0x118>)
 8000752:	2200      	movs	r2, #0
 8000754:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 125-1;
 8000756:	4b39      	ldr	r3, [pc, #228]	; (800083c <MX_RTC_Init+0x118>)
 8000758:	227c      	movs	r2, #124	; 0x7c
 800075a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 2560-1;
 800075c:	4b37      	ldr	r3, [pc, #220]	; (800083c <MX_RTC_Init+0x118>)
 800075e:	f640 12ff 	movw	r2, #2559	; 0x9ff
 8000762:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000764:	4b35      	ldr	r3, [pc, #212]	; (800083c <MX_RTC_Init+0x118>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800076a:	4b34      	ldr	r3, [pc, #208]	; (800083c <MX_RTC_Init+0x118>)
 800076c:	2200      	movs	r2, #0
 800076e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000770:	4b32      	ldr	r3, [pc, #200]	; (800083c <MX_RTC_Init+0x118>)
 8000772:	2200      	movs	r2, #0
 8000774:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000776:	4831      	ldr	r0, [pc, #196]	; (800083c <MX_RTC_Init+0x118>)
 8000778:	f001 fc52 	bl	8002020 <HAL_RTC_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000782:	f000 f8ef 	bl	8000964 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 8000786:	2312      	movs	r3, #18
 8000788:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 800078c:	2300      	movs	r3, #0
 800078e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000792:	2300      	movs	r3, #0
 8000794:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
 8000798:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800079c:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800079e:	2300      	movs	r3, #0
 80007a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80007a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007a6:	2201      	movs	r2, #1
 80007a8:	4619      	mov	r1, r3
 80007aa:	4824      	ldr	r0, [pc, #144]	; (800083c <MX_RTC_Init+0x118>)
 80007ac:	f001 fcae 	bl	800210c <HAL_RTC_SetTime>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_RTC_Init+0x96>
  {
    Error_Handler();
 80007b6:	f000 f8d5 	bl	8000964 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 80007ba:	2307      	movs	r3, #7
 80007bc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80007c0:	2301      	movs	r3, #1
 80007c2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80007c6:	2301      	movs	r3, #1
 80007c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x23;
 80007cc:	2323      	movs	r3, #35	; 0x23
 80007ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80007d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007d6:	2201      	movs	r2, #1
 80007d8:	4619      	mov	r1, r3
 80007da:	4818      	ldr	r0, [pc, #96]	; (800083c <MX_RTC_Init+0x118>)
 80007dc:	f001 fd8e 	bl	80022fc <HAL_RTC_SetDate>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 80007e6:	f000 f8bd 	bl	8000964 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x12;
 80007ea:	2312      	movs	r3, #18
 80007ec:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x30;
 80007f2:	2330      	movs	r3, #48	; 0x30
 80007f4:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
 80007fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007fe:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000800:	2300      	movs	r3, #0
 8000802:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000808:	2300      	movs	r3, #0
 800080a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 800080c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000810:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = RTC_WEEKDAY_SUNDAY;
 8000812:	2307      	movs	r3, #7
 8000814:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000818:	f44f 7380 	mov.w	r3, #256	; 0x100
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800081e:	463b      	mov	r3, r7
 8000820:	2201      	movs	r2, #1
 8000822:	4619      	mov	r1, r3
 8000824:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_RTC_Init+0x118>)
 8000826:	f001 fe3d 	bl	80024a4 <HAL_RTC_SetAlarm_IT>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_RTC_Init+0x110>
  {
    Error_Handler();
 8000830:	f000 f898 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	3740      	adds	r7, #64	; 0x40
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000084 	.word	0x20000084
 8000840:	40002800 	.word	0x40002800

08000844 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_USART1_UART_Init+0x4c>)
 800084a:	4a12      	ldr	r2, [pc, #72]	; (8000894 <MX_USART1_UART_Init+0x50>)
 800084c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800084e:	4b10      	ldr	r3, [pc, #64]	; (8000890 <MX_USART1_UART_Init+0x4c>)
 8000850:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000854:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_USART1_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_USART1_UART_Init+0x4c>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <MX_USART1_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_USART1_UART_Init+0x4c>)
 800086a:	220c      	movs	r2, #12
 800086c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <MX_USART1_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_USART1_UART_Init+0x4c>)
 8000876:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800087a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800087c:	4804      	ldr	r0, [pc, #16]	; (8000890 <MX_USART1_UART_Init+0x4c>)
 800087e:	f002 f860 	bl	8002942 <HAL_UART_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8000888:	f000 f86c 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	200000a4 	.word	0x200000a4
 8000894:	40011000 	.word	0x40011000

08000898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b088      	sub	sp, #32
 800089c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089e:	f107 030c 	add.w	r3, r7, #12
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	4b20      	ldr	r3, [pc, #128]	; (8000934 <MX_GPIO_Init+0x9c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a1f      	ldr	r2, [pc, #124]	; (8000934 <MX_GPIO_Init+0x9c>)
 80008b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <MX_GPIO_Init+0x9c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b19      	ldr	r3, [pc, #100]	; (8000934 <MX_GPIO_Init+0x9c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a18      	ldr	r2, [pc, #96]	; (8000934 <MX_GPIO_Init+0x9c>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b16      	ldr	r3, [pc, #88]	; (8000934 <MX_GPIO_Init+0x9c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	4b12      	ldr	r3, [pc, #72]	; (8000934 <MX_GPIO_Init+0x9c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a11      	ldr	r2, [pc, #68]	; (8000934 <MX_GPIO_Init+0x9c>)
 80008f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_GPIO_Init+0x9c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000908:	480b      	ldr	r0, [pc, #44]	; (8000938 <MX_GPIO_Init+0xa0>)
 800090a:	f000 fcfd 	bl	8001308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800090e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000912:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000920:	f107 030c 	add.w	r3, r7, #12
 8000924:	4619      	mov	r1, r3
 8000926:	4804      	ldr	r0, [pc, #16]	; (8000938 <MX_GPIO_Init+0xa0>)
 8000928:	f000 fb42 	bl	8000fb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800092c:	bf00      	nop
 800092e:	3720      	adds	r7, #32
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40023800 	.word	0x40023800
 8000938:	40021800 	.word	0x40021800

0800093c <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	// Toggle GP13 led when the alarm goes off
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8000944:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <HAL_RTC_AlarmAEventCallback+0x20>)
 800094a:	f000 fcf6 	bl	800133a <HAL_GPIO_TogglePin>
	// Set a flag to 1 for uusing printf () in CPU loop
	Flag = 1;
 800094e:	4b04      	ldr	r3, [pc, #16]	; (8000960 <HAL_RTC_AlarmAEventCallback+0x24>)
 8000950:	2201      	movs	r2, #1
 8000952:	601a      	str	r2, [r3, #0]
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40021800 	.word	0x40021800
 8000960:	20000100 	.word	0x20000100

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
}
 800096a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096c:	e7fe      	b.n	800096c <Error_Handler+0x8>
	...

08000970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <HAL_MspInit+0x4c>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	4a0f      	ldr	r2, [pc, #60]	; (80009bc <HAL_MspInit+0x4c>)
 8000980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000984:	6453      	str	r3, [r2, #68]	; 0x44
 8000986:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <HAL_MspInit+0x4c>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <HAL_MspInit+0x4c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	4a08      	ldr	r2, [pc, #32]	; (80009bc <HAL_MspInit+0x4c>)
 800099c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a0:	6413      	str	r3, [r2, #64]	; 0x40
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <HAL_MspInit+0x4c>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009ae:	2007      	movs	r0, #7
 80009b0:	f000 fabc 	bl	8000f2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40023800 	.word	0x40023800

080009c0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08e      	sub	sp, #56	; 0x38
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009c8:	f107 0308 	add.w	r3, r7, #8
 80009cc:	2230      	movs	r2, #48	; 0x30
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f002 fd7f 	bl	80034d4 <memset>
  if(hrtc->Instance==RTC)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <HAL_RTC_MspInit+0x5c>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d118      	bne.n	8000a12 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80009e0:	2320      	movs	r3, #32
 80009e2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 80009e4:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <HAL_RTC_MspInit+0x60>)
 80009e6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009e8:	f107 0308 	add.w	r3, r7, #8
 80009ec:	4618      	mov	r0, r3
 80009ee:	f001 f957 	bl	8001ca0 <HAL_RCCEx_PeriphCLKConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 80009f8:	f7ff ffb4 	bl	8000964 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <HAL_RTC_MspInit+0x64>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2100      	movs	r1, #0
 8000a06:	2029      	movs	r0, #41	; 0x29
 8000a08:	f000 fa9b 	bl	8000f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000a0c:	2029      	movs	r0, #41	; 0x29
 8000a0e:	f000 fab4 	bl	8000f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a12:	bf00      	nop
 8000a14:	3738      	adds	r7, #56	; 0x38
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40002800 	.word	0x40002800
 8000a20:	00190300 	.word	0x00190300
 8000a24:	42470e3c 	.word	0x42470e3c

08000a28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	; 0x28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a19      	ldr	r2, [pc, #100]	; (8000aac <HAL_UART_MspInit+0x84>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d12c      	bne.n	8000aa4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <HAL_UART_MspInit+0x88>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	4a17      	ldr	r2, [pc, #92]	; (8000ab0 <HAL_UART_MspInit+0x88>)
 8000a54:	f043 0310 	orr.w	r3, r3, #16
 8000a58:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <HAL_UART_MspInit+0x88>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	f003 0310 	and.w	r3, r3, #16
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <HAL_UART_MspInit+0x88>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a10      	ldr	r2, [pc, #64]	; (8000ab0 <HAL_UART_MspInit+0x88>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <HAL_UART_MspInit+0x88>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a90:	2303      	movs	r3, #3
 8000a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a94:	2307      	movs	r3, #7
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <HAL_UART_MspInit+0x8c>)
 8000aa0:	f000 fa86 	bl	8000fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000aa4:	bf00      	nop
 8000aa6:	3728      	adds	r7, #40	; 0x28
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40011000 	.word	0x40011000
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40020000 	.word	0x40020000

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <NMI_Handler+0x4>

08000abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <HardFault_Handler+0x4>

08000ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <MemManage_Handler+0x4>

08000aca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <BusFault_Handler+0x4>

08000ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <UsageFault_Handler+0x4>

08000ad6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b04:	f000 f922 	bl	8000d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000b10:	4802      	ldr	r0, [pc, #8]	; (8000b1c <RTC_Alarm_IRQHandler+0x10>)
 8000b12:	f001 fe09 	bl	8002728 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000084 	.word	0x20000084

08000b20 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	e00a      	b.n	8000b48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b32:	f3af 8000 	nop.w
 8000b36:	4601      	mov	r1, r0
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	1c5a      	adds	r2, r3, #1
 8000b3c:	60ba      	str	r2, [r7, #8]
 8000b3e:	b2ca      	uxtb	r2, r1
 8000b40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	3301      	adds	r3, #1
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	dbf0      	blt.n	8000b32 <_read+0x12>
  }

  return len;
 8000b50:	687b      	ldr	r3, [r7, #4]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
 8000b7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b82:	605a      	str	r2, [r3, #4]
  return 0;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <_isatty>:

int _isatty(int file)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b9a:	2301      	movs	r3, #1
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
	...

08000bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bcc:	4a14      	ldr	r2, [pc, #80]	; (8000c20 <_sbrk+0x5c>)
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <_sbrk+0x60>)
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd8:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d102      	bne.n	8000be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <_sbrk+0x64>)
 8000be2:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <_sbrk+0x68>)
 8000be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d207      	bcs.n	8000c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf4:	f002 fcbc 	bl	8003570 <__errno>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	e009      	b.n	8000c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0a:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <_sbrk+0x64>)
 8000c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c16:	68fb      	ldr	r3, [r7, #12]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20030000 	.word	0x20030000
 8000c24:	00000400 	.word	0x00000400
 8000c28:	20000104 	.word	0x20000104
 8000c2c:	20000258 	.word	0x20000258

08000c30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <SystemInit+0x20>)
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3a:	4a05      	ldr	r2, [pc, #20]	; (8000c50 <SystemInit+0x20>)
 8000c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c8c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c58:	480d      	ldr	r0, [pc, #52]	; (8000c90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c5a:	490e      	ldr	r1, [pc, #56]	; (8000c94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c5c:	4a0e      	ldr	r2, [pc, #56]	; (8000c98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c60:	e002      	b.n	8000c68 <LoopCopyDataInit>

08000c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c66:	3304      	adds	r3, #4

08000c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c6c:	d3f9      	bcc.n	8000c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6e:	4a0b      	ldr	r2, [pc, #44]	; (8000c9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c70:	4c0b      	ldr	r4, [pc, #44]	; (8000ca0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c74:	e001      	b.n	8000c7a <LoopFillZerobss>

08000c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c78:	3204      	adds	r2, #4

08000c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c7c:	d3fb      	bcc.n	8000c76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c7e:	f7ff ffd7 	bl	8000c30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c82:	f002 fc7b 	bl	800357c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c86:	f7ff fc97 	bl	80005b8 <main>
  bx  lr    
 8000c8a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c8c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c94:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c98:	08004094 	.word	0x08004094
  ldr r2, =_sbss
 8000c9c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ca0:	20000258 	.word	0x20000258

08000ca4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC_IRQHandler>
	...

08000ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cac:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <HAL_Init+0x40>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ce8 <HAL_Init+0x40>)
 8000cb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <HAL_Init+0x40>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <HAL_Init+0x40>)
 8000cbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <HAL_Init+0x40>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a07      	ldr	r2, [pc, #28]	; (8000ce8 <HAL_Init+0x40>)
 8000cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd0:	2003      	movs	r0, #3
 8000cd2:	f000 f92b 	bl	8000f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f000 f808 	bl	8000cec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cdc:	f7ff fe48 	bl	8000970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40023c00 	.word	0x40023c00

08000cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_InitTick+0x54>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <HAL_InitTick+0x58>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 f943 	bl	8000f96 <HAL_SYSTICK_Config>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e00e      	b.n	8000d38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b0f      	cmp	r3, #15
 8000d1e:	d80a      	bhi.n	8000d36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d20:	2200      	movs	r2, #0
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	f04f 30ff 	mov.w	r0, #4294967295
 8000d28:	f000 f90b 	bl	8000f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d2c:	4a06      	ldr	r2, [pc, #24]	; (8000d48 <HAL_InitTick+0x5c>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d32:	2300      	movs	r3, #0
 8000d34:	e000      	b.n	8000d38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000000 	.word	0x20000000
 8000d44:	20000008 	.word	0x20000008
 8000d48:	20000004 	.word	0x20000004

08000d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_IncTick+0x20>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	461a      	mov	r2, r3
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_IncTick+0x24>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <HAL_IncTick+0x24>)
 8000d5e:	6013      	str	r3, [r2, #0]
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	20000108 	.word	0x20000108

08000d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return uwTick;
 8000d78:	4b03      	ldr	r3, [pc, #12]	; (8000d88 <HAL_GetTick+0x14>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000108 	.word	0x20000108

08000d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da8:	4013      	ands	r3, r2
 8000daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dbe:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	60d3      	str	r3, [r2, #12]
}
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd8:	4b04      	ldr	r3, [pc, #16]	; (8000dec <__NVIC_GetPriorityGrouping+0x18>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	0a1b      	lsrs	r3, r3, #8
 8000dde:	f003 0307 	and.w	r3, r3, #7
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	db0b      	blt.n	8000e1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	f003 021f 	and.w	r2, r3, #31
 8000e08:	4907      	ldr	r1, [pc, #28]	; (8000e28 <__NVIC_EnableIRQ+0x38>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	095b      	lsrs	r3, r3, #5
 8000e10:	2001      	movs	r0, #1
 8000e12:	fa00 f202 	lsl.w	r2, r0, r2
 8000e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000e100 	.word	0xe000e100

08000e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	6039      	str	r1, [r7, #0]
 8000e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	db0a      	blt.n	8000e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	490c      	ldr	r1, [pc, #48]	; (8000e78 <__NVIC_SetPriority+0x4c>)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	0112      	lsls	r2, r2, #4
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	440b      	add	r3, r1
 8000e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e54:	e00a      	b.n	8000e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	4908      	ldr	r1, [pc, #32]	; (8000e7c <__NVIC_SetPriority+0x50>)
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	f003 030f 	and.w	r3, r3, #15
 8000e62:	3b04      	subs	r3, #4
 8000e64:	0112      	lsls	r2, r2, #4
 8000e66:	b2d2      	uxtb	r2, r2
 8000e68:	440b      	add	r3, r1
 8000e6a:	761a      	strb	r2, [r3, #24]
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000e100 	.word	0xe000e100
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b089      	sub	sp, #36	; 0x24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	f1c3 0307 	rsb	r3, r3, #7
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	bf28      	it	cs
 8000e9e:	2304      	movcs	r3, #4
 8000ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	2b06      	cmp	r3, #6
 8000ea8:	d902      	bls.n	8000eb0 <NVIC_EncodePriority+0x30>
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3b03      	subs	r3, #3
 8000eae:	e000      	b.n	8000eb2 <NVIC_EncodePriority+0x32>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43da      	mvns	r2, r3
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed2:	43d9      	mvns	r1, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	4313      	orrs	r3, r2
         );
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3724      	adds	r7, #36	; 0x24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
	...

08000ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef8:	d301      	bcc.n	8000efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00f      	b.n	8000f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <SysTick_Config+0x40>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f06:	210f      	movs	r1, #15
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f7ff ff8e 	bl	8000e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <SysTick_Config+0x40>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f16:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <SysTick_Config+0x40>)
 8000f18:	2207      	movs	r2, #7
 8000f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	e000e010 	.word	0xe000e010

08000f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ff29 	bl	8000d8c <__NVIC_SetPriorityGrouping>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f54:	f7ff ff3e 	bl	8000dd4 <__NVIC_GetPriorityGrouping>
 8000f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	6978      	ldr	r0, [r7, #20]
 8000f60:	f7ff ff8e 	bl	8000e80 <NVIC_EncodePriority>
 8000f64:	4602      	mov	r2, r0
 8000f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff5d 	bl	8000e2c <__NVIC_SetPriority>
}
 8000f72:	bf00      	nop
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff31 	bl	8000df0 <__NVIC_EnableIRQ>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ffa2 	bl	8000ee8 <SysTick_Config>
 8000fa4:	4603      	mov	r3, r0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	; 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
 8000fca:	e177      	b.n	80012bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fcc:	2201      	movs	r2, #1
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	f040 8166 	bne.w	80012b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d005      	beq.n	8001002 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d130      	bne.n	8001064 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	2203      	movs	r2, #3
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	68da      	ldr	r2, [r3, #12]
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4313      	orrs	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001038:	2201      	movs	r2, #1
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	091b      	lsrs	r3, r3, #4
 800104e:	f003 0201 	and.w	r2, r3, #1
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	2b03      	cmp	r3, #3
 800106e:	d017      	beq.n	80010a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	2203      	movs	r2, #3
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d123      	bne.n	80010f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	08da      	lsrs	r2, r3, #3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3208      	adds	r2, #8
 80010b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	f003 0307 	and.w	r3, r3, #7
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	220f      	movs	r2, #15
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	691a      	ldr	r2, [r3, #16]
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	08da      	lsrs	r2, r3, #3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3208      	adds	r2, #8
 80010ee:	69b9      	ldr	r1, [r7, #24]
 80010f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	2203      	movs	r2, #3
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 0203 	and.w	r2, r3, #3
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001130:	2b00      	cmp	r3, #0
 8001132:	f000 80c0 	beq.w	80012b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b66      	ldr	r3, [pc, #408]	; (80012d4 <HAL_GPIO_Init+0x324>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	4a65      	ldr	r2, [pc, #404]	; (80012d4 <HAL_GPIO_Init+0x324>)
 8001140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001144:	6453      	str	r3, [r2, #68]	; 0x44
 8001146:	4b63      	ldr	r3, [pc, #396]	; (80012d4 <HAL_GPIO_Init+0x324>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001152:	4a61      	ldr	r2, [pc, #388]	; (80012d8 <HAL_GPIO_Init+0x328>)
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	089b      	lsrs	r3, r3, #2
 8001158:	3302      	adds	r3, #2
 800115a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	220f      	movs	r2, #15
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a58      	ldr	r2, [pc, #352]	; (80012dc <HAL_GPIO_Init+0x32c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d037      	beq.n	80011ee <HAL_GPIO_Init+0x23e>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a57      	ldr	r2, [pc, #348]	; (80012e0 <HAL_GPIO_Init+0x330>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d031      	beq.n	80011ea <HAL_GPIO_Init+0x23a>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a56      	ldr	r2, [pc, #344]	; (80012e4 <HAL_GPIO_Init+0x334>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d02b      	beq.n	80011e6 <HAL_GPIO_Init+0x236>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a55      	ldr	r2, [pc, #340]	; (80012e8 <HAL_GPIO_Init+0x338>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d025      	beq.n	80011e2 <HAL_GPIO_Init+0x232>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a54      	ldr	r2, [pc, #336]	; (80012ec <HAL_GPIO_Init+0x33c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d01f      	beq.n	80011de <HAL_GPIO_Init+0x22e>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a53      	ldr	r2, [pc, #332]	; (80012f0 <HAL_GPIO_Init+0x340>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d019      	beq.n	80011da <HAL_GPIO_Init+0x22a>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a52      	ldr	r2, [pc, #328]	; (80012f4 <HAL_GPIO_Init+0x344>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d013      	beq.n	80011d6 <HAL_GPIO_Init+0x226>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a51      	ldr	r2, [pc, #324]	; (80012f8 <HAL_GPIO_Init+0x348>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d00d      	beq.n	80011d2 <HAL_GPIO_Init+0x222>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a50      	ldr	r2, [pc, #320]	; (80012fc <HAL_GPIO_Init+0x34c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d007      	beq.n	80011ce <HAL_GPIO_Init+0x21e>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4f      	ldr	r2, [pc, #316]	; (8001300 <HAL_GPIO_Init+0x350>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d101      	bne.n	80011ca <HAL_GPIO_Init+0x21a>
 80011c6:	2309      	movs	r3, #9
 80011c8:	e012      	b.n	80011f0 <HAL_GPIO_Init+0x240>
 80011ca:	230a      	movs	r3, #10
 80011cc:	e010      	b.n	80011f0 <HAL_GPIO_Init+0x240>
 80011ce:	2308      	movs	r3, #8
 80011d0:	e00e      	b.n	80011f0 <HAL_GPIO_Init+0x240>
 80011d2:	2307      	movs	r3, #7
 80011d4:	e00c      	b.n	80011f0 <HAL_GPIO_Init+0x240>
 80011d6:	2306      	movs	r3, #6
 80011d8:	e00a      	b.n	80011f0 <HAL_GPIO_Init+0x240>
 80011da:	2305      	movs	r3, #5
 80011dc:	e008      	b.n	80011f0 <HAL_GPIO_Init+0x240>
 80011de:	2304      	movs	r3, #4
 80011e0:	e006      	b.n	80011f0 <HAL_GPIO_Init+0x240>
 80011e2:	2303      	movs	r3, #3
 80011e4:	e004      	b.n	80011f0 <HAL_GPIO_Init+0x240>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e002      	b.n	80011f0 <HAL_GPIO_Init+0x240>
 80011ea:	2301      	movs	r3, #1
 80011ec:	e000      	b.n	80011f0 <HAL_GPIO_Init+0x240>
 80011ee:	2300      	movs	r3, #0
 80011f0:	69fa      	ldr	r2, [r7, #28]
 80011f2:	f002 0203 	and.w	r2, r2, #3
 80011f6:	0092      	lsls	r2, r2, #2
 80011f8:	4093      	lsls	r3, r2
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001200:	4935      	ldr	r1, [pc, #212]	; (80012d8 <HAL_GPIO_Init+0x328>)
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	089b      	lsrs	r3, r3, #2
 8001206:	3302      	adds	r3, #2
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800120e:	4b3d      	ldr	r3, [pc, #244]	; (8001304 <HAL_GPIO_Init+0x354>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001232:	4a34      	ldr	r2, [pc, #208]	; (8001304 <HAL_GPIO_Init+0x354>)
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001238:	4b32      	ldr	r3, [pc, #200]	; (8001304 <HAL_GPIO_Init+0x354>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800125c:	4a29      	ldr	r2, [pc, #164]	; (8001304 <HAL_GPIO_Init+0x354>)
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001262:	4b28      	ldr	r3, [pc, #160]	; (8001304 <HAL_GPIO_Init+0x354>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	43db      	mvns	r3, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001286:	4a1f      	ldr	r2, [pc, #124]	; (8001304 <HAL_GPIO_Init+0x354>)
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800128c:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <HAL_GPIO_Init+0x354>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012b0:	4a14      	ldr	r2, [pc, #80]	; (8001304 <HAL_GPIO_Init+0x354>)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3301      	adds	r3, #1
 80012ba:	61fb      	str	r3, [r7, #28]
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	2b0f      	cmp	r3, #15
 80012c0:	f67f ae84 	bls.w	8000fcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3724      	adds	r7, #36	; 0x24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40013800 	.word	0x40013800
 80012dc:	40020000 	.word	0x40020000
 80012e0:	40020400 	.word	0x40020400
 80012e4:	40020800 	.word	0x40020800
 80012e8:	40020c00 	.word	0x40020c00
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40021400 	.word	0x40021400
 80012f4:	40021800 	.word	0x40021800
 80012f8:	40021c00 	.word	0x40021c00
 80012fc:	40022000 	.word	0x40022000
 8001300:	40022400 	.word	0x40022400
 8001304:	40013c00 	.word	0x40013c00

08001308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	807b      	strh	r3, [r7, #2]
 8001314:	4613      	mov	r3, r2
 8001316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001318:	787b      	ldrb	r3, [r7, #1]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800131e:	887a      	ldrh	r2, [r7, #2]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001324:	e003      	b.n	800132e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001326:	887b      	ldrh	r3, [r7, #2]
 8001328:	041a      	lsls	r2, r3, #16
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	619a      	str	r2, [r3, #24]
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800133a:	b480      	push	{r7}
 800133c:	b085      	sub	sp, #20
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	460b      	mov	r3, r1
 8001344:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800134c:	887a      	ldrh	r2, [r7, #2]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	4013      	ands	r3, r2
 8001352:	041a      	lsls	r2, r3, #16
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	43d9      	mvns	r1, r3
 8001358:	887b      	ldrh	r3, [r7, #2]
 800135a:	400b      	ands	r3, r1
 800135c:	431a      	orrs	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	619a      	str	r2, [r3, #24]
}
 8001362:	bf00      	nop
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e267      	b.n	8001852 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	2b00      	cmp	r3, #0
 800138c:	d075      	beq.n	800147a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800138e:	4b88      	ldr	r3, [pc, #544]	; (80015b0 <HAL_RCC_OscConfig+0x240>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f003 030c 	and.w	r3, r3, #12
 8001396:	2b04      	cmp	r3, #4
 8001398:	d00c      	beq.n	80013b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800139a:	4b85      	ldr	r3, [pc, #532]	; (80015b0 <HAL_RCC_OscConfig+0x240>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013a2:	2b08      	cmp	r3, #8
 80013a4:	d112      	bne.n	80013cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013a6:	4b82      	ldr	r3, [pc, #520]	; (80015b0 <HAL_RCC_OscConfig+0x240>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013b2:	d10b      	bne.n	80013cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b4:	4b7e      	ldr	r3, [pc, #504]	; (80015b0 <HAL_RCC_OscConfig+0x240>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d05b      	beq.n	8001478 <HAL_RCC_OscConfig+0x108>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d157      	bne.n	8001478 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e242      	b.n	8001852 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d4:	d106      	bne.n	80013e4 <HAL_RCC_OscConfig+0x74>
 80013d6:	4b76      	ldr	r3, [pc, #472]	; (80015b0 <HAL_RCC_OscConfig+0x240>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a75      	ldr	r2, [pc, #468]	; (80015b0 <HAL_RCC_OscConfig+0x240>)
 80013dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	e01d      	b.n	8001420 <HAL_RCC_OscConfig+0xb0>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013ec:	d10c      	bne.n	8001408 <HAL_RCC_OscConfig+0x98>
 80013ee:	4b70      	ldr	r3, [pc, #448]	; (80015b0 <HAL_RCC_OscConfig+0x240>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a6f      	ldr	r2, [pc, #444]	; (80015b0 <HAL_RCC_OscConfig+0x240>)
 80013f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	4b6d      	ldr	r3, [pc, #436]	; (80015b0 <HAL_RCC_OscConfig+0x240>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a6c      	ldr	r2, [pc, #432]	; (80015b0 <HAL_RCC_OscConfig+0x240>)
 8001400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	e00b      	b.n	8001420 <HAL_RCC_OscConfig+0xb0>
 8001408:	4b69      	ldr	r3, [pc, #420]	; (80015b0 <HAL_RCC_OscConfig+0x240>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a68      	ldr	r2, [pc, #416]	; (80015b0 <HAL_RCC_OscConfig+0x240>)
 800140e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001412:	6013      	str	r3, [r2, #0]
 8001414:	4b66      	ldr	r3, [pc, #408]	; (80015b0 <HAL_RCC_OscConfig+0x240>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a65      	ldr	r2, [pc, #404]	; (80015b0 <HAL_RCC_OscConfig+0x240>)
 800141a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800141e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d013      	beq.n	8001450 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001428:	f7ff fca4 	bl	8000d74 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001430:	f7ff fca0 	bl	8000d74 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b64      	cmp	r3, #100	; 0x64
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e207      	b.n	8001852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001442:	4b5b      	ldr	r3, [pc, #364]	; (80015b0 <HAL_RCC_OscConfig+0x240>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0f0      	beq.n	8001430 <HAL_RCC_OscConfig+0xc0>
 800144e:	e014      	b.n	800147a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001450:	f7ff fc90 	bl	8000d74 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001458:	f7ff fc8c 	bl	8000d74 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b64      	cmp	r3, #100	; 0x64
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e1f3      	b.n	8001852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800146a:	4b51      	ldr	r3, [pc, #324]	; (80015b0 <HAL_RCC_OscConfig+0x240>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f0      	bne.n	8001458 <HAL_RCC_OscConfig+0xe8>
 8001476:	e000      	b.n	800147a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d063      	beq.n	800154e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001486:	4b4a      	ldr	r3, [pc, #296]	; (80015b0 <HAL_RCC_OscConfig+0x240>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 030c 	and.w	r3, r3, #12
 800148e:	2b00      	cmp	r3, #0
 8001490:	d00b      	beq.n	80014aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001492:	4b47      	ldr	r3, [pc, #284]	; (80015b0 <HAL_RCC_OscConfig+0x240>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800149a:	2b08      	cmp	r3, #8
 800149c:	d11c      	bne.n	80014d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800149e:	4b44      	ldr	r3, [pc, #272]	; (80015b0 <HAL_RCC_OscConfig+0x240>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d116      	bne.n	80014d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014aa:	4b41      	ldr	r3, [pc, #260]	; (80015b0 <HAL_RCC_OscConfig+0x240>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d005      	beq.n	80014c2 <HAL_RCC_OscConfig+0x152>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d001      	beq.n	80014c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e1c7      	b.n	8001852 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c2:	4b3b      	ldr	r3, [pc, #236]	; (80015b0 <HAL_RCC_OscConfig+0x240>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	4937      	ldr	r1, [pc, #220]	; (80015b0 <HAL_RCC_OscConfig+0x240>)
 80014d2:	4313      	orrs	r3, r2
 80014d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d6:	e03a      	b.n	800154e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d020      	beq.n	8001522 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014e0:	4b34      	ldr	r3, [pc, #208]	; (80015b4 <HAL_RCC_OscConfig+0x244>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e6:	f7ff fc45 	bl	8000d74 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ee:	f7ff fc41 	bl	8000d74 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e1a8      	b.n	8001852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001500:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <HAL_RCC_OscConfig+0x240>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0f0      	beq.n	80014ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150c:	4b28      	ldr	r3, [pc, #160]	; (80015b0 <HAL_RCC_OscConfig+0x240>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	4925      	ldr	r1, [pc, #148]	; (80015b0 <HAL_RCC_OscConfig+0x240>)
 800151c:	4313      	orrs	r3, r2
 800151e:	600b      	str	r3, [r1, #0]
 8001520:	e015      	b.n	800154e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001522:	4b24      	ldr	r3, [pc, #144]	; (80015b4 <HAL_RCC_OscConfig+0x244>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001528:	f7ff fc24 	bl	8000d74 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001530:	f7ff fc20 	bl	8000d74 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e187      	b.n	8001852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001542:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <HAL_RCC_OscConfig+0x240>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	2b00      	cmp	r3, #0
 8001558:	d036      	beq.n	80015c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d016      	beq.n	8001590 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <HAL_RCC_OscConfig+0x248>)
 8001564:	2201      	movs	r2, #1
 8001566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001568:	f7ff fc04 	bl	8000d74 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001570:	f7ff fc00 	bl	8000d74 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e167      	b.n	8001852 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_RCC_OscConfig+0x240>)
 8001584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0f0      	beq.n	8001570 <HAL_RCC_OscConfig+0x200>
 800158e:	e01b      	b.n	80015c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <HAL_RCC_OscConfig+0x248>)
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001596:	f7ff fbed 	bl	8000d74 <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800159c:	e00e      	b.n	80015bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800159e:	f7ff fbe9 	bl	8000d74 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d907      	bls.n	80015bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e150      	b.n	8001852 <HAL_RCC_OscConfig+0x4e2>
 80015b0:	40023800 	.word	0x40023800
 80015b4:	42470000 	.word	0x42470000
 80015b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015bc:	4b88      	ldr	r3, [pc, #544]	; (80017e0 <HAL_RCC_OscConfig+0x470>)
 80015be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1ea      	bne.n	800159e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 8097 	beq.w	8001704 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015da:	4b81      	ldr	r3, [pc, #516]	; (80017e0 <HAL_RCC_OscConfig+0x470>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10f      	bne.n	8001606 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	4b7d      	ldr	r3, [pc, #500]	; (80017e0 <HAL_RCC_OscConfig+0x470>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	4a7c      	ldr	r2, [pc, #496]	; (80017e0 <HAL_RCC_OscConfig+0x470>)
 80015f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f4:	6413      	str	r3, [r2, #64]	; 0x40
 80015f6:	4b7a      	ldr	r3, [pc, #488]	; (80017e0 <HAL_RCC_OscConfig+0x470>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001602:	2301      	movs	r3, #1
 8001604:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001606:	4b77      	ldr	r3, [pc, #476]	; (80017e4 <HAL_RCC_OscConfig+0x474>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160e:	2b00      	cmp	r3, #0
 8001610:	d118      	bne.n	8001644 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001612:	4b74      	ldr	r3, [pc, #464]	; (80017e4 <HAL_RCC_OscConfig+0x474>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a73      	ldr	r2, [pc, #460]	; (80017e4 <HAL_RCC_OscConfig+0x474>)
 8001618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800161c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800161e:	f7ff fba9 	bl	8000d74 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001626:	f7ff fba5 	bl	8000d74 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e10c      	b.n	8001852 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001638:	4b6a      	ldr	r3, [pc, #424]	; (80017e4 <HAL_RCC_OscConfig+0x474>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0f0      	beq.n	8001626 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d106      	bne.n	800165a <HAL_RCC_OscConfig+0x2ea>
 800164c:	4b64      	ldr	r3, [pc, #400]	; (80017e0 <HAL_RCC_OscConfig+0x470>)
 800164e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001650:	4a63      	ldr	r2, [pc, #396]	; (80017e0 <HAL_RCC_OscConfig+0x470>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6713      	str	r3, [r2, #112]	; 0x70
 8001658:	e01c      	b.n	8001694 <HAL_RCC_OscConfig+0x324>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2b05      	cmp	r3, #5
 8001660:	d10c      	bne.n	800167c <HAL_RCC_OscConfig+0x30c>
 8001662:	4b5f      	ldr	r3, [pc, #380]	; (80017e0 <HAL_RCC_OscConfig+0x470>)
 8001664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001666:	4a5e      	ldr	r2, [pc, #376]	; (80017e0 <HAL_RCC_OscConfig+0x470>)
 8001668:	f043 0304 	orr.w	r3, r3, #4
 800166c:	6713      	str	r3, [r2, #112]	; 0x70
 800166e:	4b5c      	ldr	r3, [pc, #368]	; (80017e0 <HAL_RCC_OscConfig+0x470>)
 8001670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001672:	4a5b      	ldr	r2, [pc, #364]	; (80017e0 <HAL_RCC_OscConfig+0x470>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6713      	str	r3, [r2, #112]	; 0x70
 800167a:	e00b      	b.n	8001694 <HAL_RCC_OscConfig+0x324>
 800167c:	4b58      	ldr	r3, [pc, #352]	; (80017e0 <HAL_RCC_OscConfig+0x470>)
 800167e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001680:	4a57      	ldr	r2, [pc, #348]	; (80017e0 <HAL_RCC_OscConfig+0x470>)
 8001682:	f023 0301 	bic.w	r3, r3, #1
 8001686:	6713      	str	r3, [r2, #112]	; 0x70
 8001688:	4b55      	ldr	r3, [pc, #340]	; (80017e0 <HAL_RCC_OscConfig+0x470>)
 800168a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168c:	4a54      	ldr	r2, [pc, #336]	; (80017e0 <HAL_RCC_OscConfig+0x470>)
 800168e:	f023 0304 	bic.w	r3, r3, #4
 8001692:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d015      	beq.n	80016c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169c:	f7ff fb6a 	bl	8000d74 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a2:	e00a      	b.n	80016ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016a4:	f7ff fb66 	bl	8000d74 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e0cb      	b.n	8001852 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ba:	4b49      	ldr	r3, [pc, #292]	; (80017e0 <HAL_RCC_OscConfig+0x470>)
 80016bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0ee      	beq.n	80016a4 <HAL_RCC_OscConfig+0x334>
 80016c6:	e014      	b.n	80016f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c8:	f7ff fb54 	bl	8000d74 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ce:	e00a      	b.n	80016e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d0:	f7ff fb50 	bl	8000d74 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f241 3288 	movw	r2, #5000	; 0x1388
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e0b5      	b.n	8001852 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e6:	4b3e      	ldr	r3, [pc, #248]	; (80017e0 <HAL_RCC_OscConfig+0x470>)
 80016e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1ee      	bne.n	80016d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016f2:	7dfb      	ldrb	r3, [r7, #23]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d105      	bne.n	8001704 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016f8:	4b39      	ldr	r3, [pc, #228]	; (80017e0 <HAL_RCC_OscConfig+0x470>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	4a38      	ldr	r2, [pc, #224]	; (80017e0 <HAL_RCC_OscConfig+0x470>)
 80016fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001702:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	2b00      	cmp	r3, #0
 800170a:	f000 80a1 	beq.w	8001850 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800170e:	4b34      	ldr	r3, [pc, #208]	; (80017e0 <HAL_RCC_OscConfig+0x470>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 030c 	and.w	r3, r3, #12
 8001716:	2b08      	cmp	r3, #8
 8001718:	d05c      	beq.n	80017d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d141      	bne.n	80017a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001722:	4b31      	ldr	r3, [pc, #196]	; (80017e8 <HAL_RCC_OscConfig+0x478>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001728:	f7ff fb24 	bl	8000d74 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001730:	f7ff fb20 	bl	8000d74 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e087      	b.n	8001852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001742:	4b27      	ldr	r3, [pc, #156]	; (80017e0 <HAL_RCC_OscConfig+0x470>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f0      	bne.n	8001730 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69da      	ldr	r2, [r3, #28]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	019b      	lsls	r3, r3, #6
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001764:	085b      	lsrs	r3, r3, #1
 8001766:	3b01      	subs	r3, #1
 8001768:	041b      	lsls	r3, r3, #16
 800176a:	431a      	orrs	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	061b      	lsls	r3, r3, #24
 8001772:	491b      	ldr	r1, [pc, #108]	; (80017e0 <HAL_RCC_OscConfig+0x470>)
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001778:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <HAL_RCC_OscConfig+0x478>)
 800177a:	2201      	movs	r2, #1
 800177c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177e:	f7ff faf9 	bl	8000d74 <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001786:	f7ff faf5 	bl	8000d74 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e05c      	b.n	8001852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001798:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <HAL_RCC_OscConfig+0x470>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0f0      	beq.n	8001786 <HAL_RCC_OscConfig+0x416>
 80017a4:	e054      	b.n	8001850 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a6:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <HAL_RCC_OscConfig+0x478>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ac:	f7ff fae2 	bl	8000d74 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b4:	f7ff fade 	bl	8000d74 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e045      	b.n	8001852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_RCC_OscConfig+0x470>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f0      	bne.n	80017b4 <HAL_RCC_OscConfig+0x444>
 80017d2:	e03d      	b.n	8001850 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d107      	bne.n	80017ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e038      	b.n	8001852 <HAL_RCC_OscConfig+0x4e2>
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40007000 	.word	0x40007000
 80017e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017ec:	4b1b      	ldr	r3, [pc, #108]	; (800185c <HAL_RCC_OscConfig+0x4ec>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d028      	beq.n	800184c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001804:	429a      	cmp	r2, r3
 8001806:	d121      	bne.n	800184c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001812:	429a      	cmp	r2, r3
 8001814:	d11a      	bne.n	800184c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800181c:	4013      	ands	r3, r2
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001822:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001824:	4293      	cmp	r3, r2
 8001826:	d111      	bne.n	800184c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001832:	085b      	lsrs	r3, r3, #1
 8001834:	3b01      	subs	r3, #1
 8001836:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001838:	429a      	cmp	r2, r3
 800183a:	d107      	bne.n	800184c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001846:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001848:	429a      	cmp	r2, r3
 800184a:	d001      	beq.n	8001850 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e000      	b.n	8001852 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800

08001860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e0cc      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001874:	4b68      	ldr	r3, [pc, #416]	; (8001a18 <HAL_RCC_ClockConfig+0x1b8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 030f 	and.w	r3, r3, #15
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d90c      	bls.n	800189c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001882:	4b65      	ldr	r3, [pc, #404]	; (8001a18 <HAL_RCC_ClockConfig+0x1b8>)
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800188a:	4b63      	ldr	r3, [pc, #396]	; (8001a18 <HAL_RCC_ClockConfig+0x1b8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	429a      	cmp	r2, r3
 8001896:	d001      	beq.n	800189c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e0b8      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d020      	beq.n	80018ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d005      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018b4:	4b59      	ldr	r3, [pc, #356]	; (8001a1c <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	4a58      	ldr	r2, [pc, #352]	; (8001a1c <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0308 	and.w	r3, r3, #8
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d005      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018cc:	4b53      	ldr	r3, [pc, #332]	; (8001a1c <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	4a52      	ldr	r2, [pc, #328]	; (8001a1c <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d8:	4b50      	ldr	r3, [pc, #320]	; (8001a1c <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	494d      	ldr	r1, [pc, #308]	; (8001a1c <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d044      	beq.n	8001980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d107      	bne.n	800190e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fe:	4b47      	ldr	r3, [pc, #284]	; (8001a1c <HAL_RCC_ClockConfig+0x1bc>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d119      	bne.n	800193e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e07f      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b02      	cmp	r3, #2
 8001914:	d003      	beq.n	800191e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800191a:	2b03      	cmp	r3, #3
 800191c:	d107      	bne.n	800192e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800191e:	4b3f      	ldr	r3, [pc, #252]	; (8001a1c <HAL_RCC_ClockConfig+0x1bc>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d109      	bne.n	800193e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e06f      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192e:	4b3b      	ldr	r3, [pc, #236]	; (8001a1c <HAL_RCC_ClockConfig+0x1bc>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e067      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800193e:	4b37      	ldr	r3, [pc, #220]	; (8001a1c <HAL_RCC_ClockConfig+0x1bc>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f023 0203 	bic.w	r2, r3, #3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	4934      	ldr	r1, [pc, #208]	; (8001a1c <HAL_RCC_ClockConfig+0x1bc>)
 800194c:	4313      	orrs	r3, r2
 800194e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001950:	f7ff fa10 	bl	8000d74 <HAL_GetTick>
 8001954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001956:	e00a      	b.n	800196e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001958:	f7ff fa0c 	bl	8000d74 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	f241 3288 	movw	r2, #5000	; 0x1388
 8001966:	4293      	cmp	r3, r2
 8001968:	d901      	bls.n	800196e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e04f      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196e:	4b2b      	ldr	r3, [pc, #172]	; (8001a1c <HAL_RCC_ClockConfig+0x1bc>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 020c 	and.w	r2, r3, #12
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	429a      	cmp	r2, r3
 800197e:	d1eb      	bne.n	8001958 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001980:	4b25      	ldr	r3, [pc, #148]	; (8001a18 <HAL_RCC_ClockConfig+0x1b8>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 030f 	and.w	r3, r3, #15
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d20c      	bcs.n	80019a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198e:	4b22      	ldr	r3, [pc, #136]	; (8001a18 <HAL_RCC_ClockConfig+0x1b8>)
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001996:	4b20      	ldr	r3, [pc, #128]	; (8001a18 <HAL_RCC_ClockConfig+0x1b8>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d001      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e032      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d008      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b4:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	4916      	ldr	r1, [pc, #88]	; (8001a1c <HAL_RCC_ClockConfig+0x1bc>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d009      	beq.n	80019e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019d2:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_RCC_ClockConfig+0x1bc>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	490e      	ldr	r1, [pc, #56]	; (8001a1c <HAL_RCC_ClockConfig+0x1bc>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019e6:	f000 f821 	bl	8001a2c <HAL_RCC_GetSysClockFreq>
 80019ea:	4602      	mov	r2, r0
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	091b      	lsrs	r3, r3, #4
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	490a      	ldr	r1, [pc, #40]	; (8001a20 <HAL_RCC_ClockConfig+0x1c0>)
 80019f8:	5ccb      	ldrb	r3, [r1, r3]
 80019fa:	fa22 f303 	lsr.w	r3, r2, r3
 80019fe:	4a09      	ldr	r2, [pc, #36]	; (8001a24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_RCC_ClockConfig+0x1c8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff f970 	bl	8000cec <HAL_InitTick>

  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40023c00 	.word	0x40023c00
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	08004038 	.word	0x08004038
 8001a24:	20000000 	.word	0x20000000
 8001a28:	20000004 	.word	0x20000004

08001a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a30:	b094      	sub	sp, #80	; 0x50
 8001a32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	647b      	str	r3, [r7, #68]	; 0x44
 8001a38:	2300      	movs	r3, #0
 8001a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a44:	4b79      	ldr	r3, [pc, #484]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 030c 	and.w	r3, r3, #12
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d00d      	beq.n	8001a6c <HAL_RCC_GetSysClockFreq+0x40>
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	f200 80e1 	bhi.w	8001c18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d002      	beq.n	8001a60 <HAL_RCC_GetSysClockFreq+0x34>
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d003      	beq.n	8001a66 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a5e:	e0db      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a60:	4b73      	ldr	r3, [pc, #460]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a62:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a64:	e0db      	b.n	8001c1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a66:	4b73      	ldr	r3, [pc, #460]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a6a:	e0d8      	b.n	8001c1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a6c:	4b6f      	ldr	r3, [pc, #444]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a74:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a76:	4b6d      	ldr	r3, [pc, #436]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d063      	beq.n	8001b4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a82:	4b6a      	ldr	r3, [pc, #424]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	099b      	lsrs	r3, r3, #6
 8001a88:	2200      	movs	r2, #0
 8001a8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a94:	633b      	str	r3, [r7, #48]	; 0x30
 8001a96:	2300      	movs	r3, #0
 8001a98:	637b      	str	r3, [r7, #52]	; 0x34
 8001a9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a9e:	4622      	mov	r2, r4
 8001aa0:	462b      	mov	r3, r5
 8001aa2:	f04f 0000 	mov.w	r0, #0
 8001aa6:	f04f 0100 	mov.w	r1, #0
 8001aaa:	0159      	lsls	r1, r3, #5
 8001aac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ab0:	0150      	lsls	r0, r2, #5
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4621      	mov	r1, r4
 8001ab8:	1a51      	subs	r1, r2, r1
 8001aba:	6139      	str	r1, [r7, #16]
 8001abc:	4629      	mov	r1, r5
 8001abe:	eb63 0301 	sbc.w	r3, r3, r1
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ad0:	4659      	mov	r1, fp
 8001ad2:	018b      	lsls	r3, r1, #6
 8001ad4:	4651      	mov	r1, sl
 8001ad6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ada:	4651      	mov	r1, sl
 8001adc:	018a      	lsls	r2, r1, #6
 8001ade:	4651      	mov	r1, sl
 8001ae0:	ebb2 0801 	subs.w	r8, r2, r1
 8001ae4:	4659      	mov	r1, fp
 8001ae6:	eb63 0901 	sbc.w	r9, r3, r1
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	f04f 0300 	mov.w	r3, #0
 8001af2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001af6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001afa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001afe:	4690      	mov	r8, r2
 8001b00:	4699      	mov	r9, r3
 8001b02:	4623      	mov	r3, r4
 8001b04:	eb18 0303 	adds.w	r3, r8, r3
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	462b      	mov	r3, r5
 8001b0c:	eb49 0303 	adc.w	r3, r9, r3
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b1e:	4629      	mov	r1, r5
 8001b20:	024b      	lsls	r3, r1, #9
 8001b22:	4621      	mov	r1, r4
 8001b24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b28:	4621      	mov	r1, r4
 8001b2a:	024a      	lsls	r2, r1, #9
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b32:	2200      	movs	r2, #0
 8001b34:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b3c:	f7fe fba8 	bl	8000290 <__aeabi_uldivmod>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4613      	mov	r3, r2
 8001b46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b48:	e058      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b4a:	4b38      	ldr	r3, [pc, #224]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	099b      	lsrs	r3, r3, #6
 8001b50:	2200      	movs	r2, #0
 8001b52:	4618      	mov	r0, r3
 8001b54:	4611      	mov	r1, r2
 8001b56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b5a:	623b      	str	r3, [r7, #32]
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b64:	4642      	mov	r2, r8
 8001b66:	464b      	mov	r3, r9
 8001b68:	f04f 0000 	mov.w	r0, #0
 8001b6c:	f04f 0100 	mov.w	r1, #0
 8001b70:	0159      	lsls	r1, r3, #5
 8001b72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b76:	0150      	lsls	r0, r2, #5
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4641      	mov	r1, r8
 8001b7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b82:	4649      	mov	r1, r9
 8001b84:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b9c:	ebb2 040a 	subs.w	r4, r2, sl
 8001ba0:	eb63 050b 	sbc.w	r5, r3, fp
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	f04f 0300 	mov.w	r3, #0
 8001bac:	00eb      	lsls	r3, r5, #3
 8001bae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bb2:	00e2      	lsls	r2, r4, #3
 8001bb4:	4614      	mov	r4, r2
 8001bb6:	461d      	mov	r5, r3
 8001bb8:	4643      	mov	r3, r8
 8001bba:	18e3      	adds	r3, r4, r3
 8001bbc:	603b      	str	r3, [r7, #0]
 8001bbe:	464b      	mov	r3, r9
 8001bc0:	eb45 0303 	adc.w	r3, r5, r3
 8001bc4:	607b      	str	r3, [r7, #4]
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bd2:	4629      	mov	r1, r5
 8001bd4:	028b      	lsls	r3, r1, #10
 8001bd6:	4621      	mov	r1, r4
 8001bd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bdc:	4621      	mov	r1, r4
 8001bde:	028a      	lsls	r2, r1, #10
 8001be0:	4610      	mov	r0, r2
 8001be2:	4619      	mov	r1, r3
 8001be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001be6:	2200      	movs	r2, #0
 8001be8:	61bb      	str	r3, [r7, #24]
 8001bea:	61fa      	str	r2, [r7, #28]
 8001bec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bf0:	f7fe fb4e 	bl	8000290 <__aeabi_uldivmod>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	0c1b      	lsrs	r3, r3, #16
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	3301      	adds	r3, #1
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c16:	e002      	b.n	8001c1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c18:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3750      	adds	r7, #80	; 0x50
 8001c24:	46bd      	mov	sp, r7
 8001c26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	00f42400 	.word	0x00f42400
 8001c34:	007a1200 	.word	0x007a1200

08001c38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20000000 	.word	0x20000000

08001c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c54:	f7ff fff0 	bl	8001c38 <HAL_RCC_GetHCLKFreq>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	0a9b      	lsrs	r3, r3, #10
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	4903      	ldr	r1, [pc, #12]	; (8001c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c66:	5ccb      	ldrb	r3, [r1, r3]
 8001c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40023800 	.word	0x40023800
 8001c74:	08004048 	.word	0x08004048

08001c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c7c:	f7ff ffdc 	bl	8001c38 <HAL_RCC_GetHCLKFreq>
 8001c80:	4602      	mov	r2, r0
 8001c82:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	0b5b      	lsrs	r3, r3, #13
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	4903      	ldr	r1, [pc, #12]	; (8001c9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c8e:	5ccb      	ldrb	r3, [r1, r3]
 8001c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	08004048 	.word	0x08004048

08001ca0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10b      	bne.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d105      	bne.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d075      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001cd4:	4b91      	ldr	r3, [pc, #580]	; (8001f1c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001cda:	f7ff f84b 	bl	8000d74 <HAL_GetTick>
 8001cde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001ce2:	f7ff f847 	bl	8000d74 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e189      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001cf4:	4b8a      	ldr	r3, [pc, #552]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1f0      	bne.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d009      	beq.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	019a      	lsls	r2, r3, #6
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	071b      	lsls	r3, r3, #28
 8001d18:	4981      	ldr	r1, [pc, #516]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d01f      	beq.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001d2c:	4b7c      	ldr	r3, [pc, #496]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d32:	0f1b      	lsrs	r3, r3, #28
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	019a      	lsls	r2, r3, #6
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	061b      	lsls	r3, r3, #24
 8001d46:	431a      	orrs	r2, r3
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	071b      	lsls	r3, r3, #28
 8001d4c:	4974      	ldr	r1, [pc, #464]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001d54:	4b72      	ldr	r3, [pc, #456]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d5a:	f023 021f 	bic.w	r2, r3, #31
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	496e      	ldr	r1, [pc, #440]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00d      	beq.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	019a      	lsls	r2, r3, #6
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	061b      	lsls	r3, r3, #24
 8001d84:	431a      	orrs	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	071b      	lsls	r3, r3, #28
 8001d8c:	4964      	ldr	r1, [pc, #400]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001d94:	4b61      	ldr	r3, [pc, #388]	; (8001f1c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d9a:	f7fe ffeb 	bl	8000d74 <HAL_GetTick>
 8001d9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001da0:	e008      	b.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001da2:	f7fe ffe7 	bl	8000d74 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e129      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001db4:	4b5a      	ldr	r3, [pc, #360]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f0      	beq.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d105      	bne.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d079      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001dd8:	4b52      	ldr	r3, [pc, #328]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001dde:	f7fe ffc9 	bl	8000d74 <HAL_GetTick>
 8001de2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001de4:	e008      	b.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001de6:	f7fe ffc5 	bl	8000d74 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e107      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001df8:	4b49      	ldr	r3, [pc, #292]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e04:	d0ef      	beq.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d020      	beq.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001e12:	4b43      	ldr	r3, [pc, #268]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e18:	0f1b      	lsrs	r3, r3, #28
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	019a      	lsls	r2, r3, #6
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	061b      	lsls	r3, r3, #24
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	071b      	lsls	r3, r3, #28
 8001e32:	493b      	ldr	r1, [pc, #236]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001e3a:	4b39      	ldr	r3, [pc, #228]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e40:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	021b      	lsls	r3, r3, #8
 8001e4c:	4934      	ldr	r1, [pc, #208]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0308 	and.w	r3, r3, #8
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d01e      	beq.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001e60:	4b2f      	ldr	r3, [pc, #188]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e66:	0e1b      	lsrs	r3, r3, #24
 8001e68:	f003 030f 	and.w	r3, r3, #15
 8001e6c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	019a      	lsls	r2, r3, #6
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	061b      	lsls	r3, r3, #24
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	071b      	lsls	r3, r3, #28
 8001e80:	4927      	ldr	r1, [pc, #156]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001e88:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e96:	4922      	ldr	r1, [pc, #136]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001e9e:	4b21      	ldr	r3, [pc, #132]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ea4:	f7fe ff66 	bl	8000d74 <HAL_GetTick>
 8001ea8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001eac:	f7fe ff62 	bl	8000d74 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e0a4      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001ebe:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ec6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001eca:	d1ef      	bne.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0320 	and.w	r3, r3, #32
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 808b 	beq.w	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	4a0f      	ldr	r2, [pc, #60]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eea:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a0b      	ldr	r2, [pc, #44]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8001efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f00:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f02:	f7fe ff37 	bl	8000d74 <HAL_GetTick>
 8001f06:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001f08:	e010      	b.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001f0a:	f7fe ff33 	bl	8000d74 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d909      	bls.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e075      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8001f1c:	42470068 	.word	0x42470068
 8001f20:	40023800 	.word	0x40023800
 8001f24:	42470070 	.word	0x42470070
 8001f28:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001f2c:	4b38      	ldr	r3, [pc, #224]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0e8      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f38:	4b36      	ldr	r3, [pc, #216]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f40:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d02f      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d028      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f56:	4b2f      	ldr	r3, [pc, #188]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f5e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f60:	4b2d      	ldr	r3, [pc, #180]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f66:	4b2c      	ldr	r3, [pc, #176]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001f6c:	4a29      	ldr	r2, [pc, #164]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f72:	4b28      	ldr	r3, [pc, #160]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d114      	bne.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001f7e:	f7fe fef9 	bl	8000d74 <HAL_GetTick>
 8001f82:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f84:	e00a      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f86:	f7fe fef5 	bl	8000d74 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e035      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9c:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0ee      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001fb4:	d10d      	bne.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8001fb6:	4b17      	ldr	r3, [pc, #92]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fca:	4912      	ldr	r1, [pc, #72]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	608b      	str	r3, [r1, #8]
 8001fd0:	e005      	b.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8001fd2:	4b10      	ldr	r3, [pc, #64]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	4a0f      	ldr	r2, [pc, #60]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001fd8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001fdc:	6093      	str	r3, [r2, #8]
 8001fde:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001fe0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fea:	490a      	ldr	r1, [pc, #40]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0310 	and.w	r3, r3, #16
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d004      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8002002:	4b06      	ldr	r3, [pc, #24]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8002004:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40007000 	.word	0x40007000
 8002014:	40023800 	.word	0x40023800
 8002018:	42470e40 	.word	0x42470e40
 800201c:	424711e0 	.word	0x424711e0

08002020 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e066      	b.n	8002104 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	7f5b      	ldrb	r3, [r3, #29]
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b00      	cmp	r3, #0
 800203e:	d105      	bne.n	800204c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7fe fcba 	bl	80009c0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2202      	movs	r2, #2
 8002050:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	22ca      	movs	r2, #202	; 0xca
 8002058:	625a      	str	r2, [r3, #36]	; 0x24
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2253      	movs	r2, #83	; 0x53
 8002060:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 fbce 	bl	8002804 <RTC_EnterInitMode>
 8002068:	4603      	mov	r3, r0
 800206a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800206c:	7bfb      	ldrb	r3, [r7, #15]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d12c      	bne.n	80020cc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6812      	ldr	r2, [r2, #0]
 800207c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002084:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6899      	ldr	r1, [r3, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	431a      	orrs	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	68d2      	ldr	r2, [r2, #12]
 80020ac:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6919      	ldr	r1, [r3, #16]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	041a      	lsls	r2, r3, #16
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 fbd5 	bl	8002872 <RTC_ExitInitMode>
 80020c8:	4603      	mov	r3, r0
 80020ca:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d113      	bne.n	80020fa <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020e0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	699a      	ldr	r2, [r3, #24]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	22ff      	movs	r2, #255	; 0xff
 8002100:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002102:	7bfb      	ldrb	r3, [r7, #15]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800210c:	b590      	push	{r4, r7, lr}
 800210e:	b087      	sub	sp, #28
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	7f1b      	ldrb	r3, [r3, #28]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d101      	bne.n	8002128 <HAL_RTC_SetTime+0x1c>
 8002124:	2302      	movs	r3, #2
 8002126:	e087      	b.n	8002238 <HAL_RTC_SetTime+0x12c>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2201      	movs	r2, #1
 800212c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2202      	movs	r2, #2
 8002132:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d126      	bne.n	8002188 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002144:	2b00      	cmp	r3, #0
 8002146:	d102      	bne.n	800214e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2200      	movs	r2, #0
 800214c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f000 fbb2 	bl	80028bc <RTC_ByteToBcd2>
 8002158:	4603      	mov	r3, r0
 800215a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	785b      	ldrb	r3, [r3, #1]
 8002160:	4618      	mov	r0, r3
 8002162:	f000 fbab 	bl	80028bc <RTC_ByteToBcd2>
 8002166:	4603      	mov	r3, r0
 8002168:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800216a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	789b      	ldrb	r3, [r3, #2]
 8002170:	4618      	mov	r0, r3
 8002172:	f000 fba3 	bl	80028bc <RTC_ByteToBcd2>
 8002176:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002178:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	78db      	ldrb	r3, [r3, #3]
 8002180:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002182:	4313      	orrs	r3, r2
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	e018      	b.n	80021ba <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002192:	2b00      	cmp	r3, #0
 8002194:	d102      	bne.n	800219c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	2200      	movs	r2, #0
 800219a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	785b      	ldrb	r3, [r3, #1]
 80021a6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80021a8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80021ae:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	78db      	ldrb	r3, [r3, #3]
 80021b4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80021b6:	4313      	orrs	r3, r2
 80021b8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	22ca      	movs	r2, #202	; 0xca
 80021c0:	625a      	str	r2, [r3, #36]	; 0x24
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2253      	movs	r2, #83	; 0x53
 80021c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 fb1a 	bl	8002804 <RTC_EnterInitMode>
 80021d0:	4603      	mov	r3, r0
 80021d2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80021d4:	7cfb      	ldrb	r3, [r7, #19]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d120      	bne.n	800221c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80021e4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80021e8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021f8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6899      	ldr	r1, [r3, #8]
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	431a      	orrs	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 fb2d 	bl	8002872 <RTC_ExitInitMode>
 8002218:	4603      	mov	r3, r0
 800221a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800221c:	7cfb      	ldrb	r3, [r7, #19]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d102      	bne.n	8002228 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2201      	movs	r2, #1
 8002226:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	22ff      	movs	r2, #255	; 0xff
 800222e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	771a      	strb	r2, [r3, #28]

  return status;
 8002236:	7cfb      	ldrb	r3, [r7, #19]
}
 8002238:	4618      	mov	r0, r3
 800223a:	371c      	adds	r7, #28
 800223c:	46bd      	mov	sp, r7
 800223e:	bd90      	pop	{r4, r7, pc}

08002240 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002272:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002276:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	0c1b      	lsrs	r3, r3, #16
 800227c:	b2db      	uxtb	r3, r3
 800227e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002282:	b2da      	uxtb	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	0a1b      	lsrs	r3, r3, #8
 800228c:	b2db      	uxtb	r3, r3
 800228e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002292:	b2da      	uxtb	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	b2db      	uxtb	r3, r3
 800229c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	0d9b      	lsrs	r3, r3, #22
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d11a      	bne.n	80022f2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 fb18 	bl	80028f6 <RTC_Bcd2ToByte>
 80022c6:	4603      	mov	r3, r0
 80022c8:	461a      	mov	r2, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	785b      	ldrb	r3, [r3, #1]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 fb0f 	bl	80028f6 <RTC_Bcd2ToByte>
 80022d8:	4603      	mov	r3, r0
 80022da:	461a      	mov	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	789b      	ldrb	r3, [r3, #2]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 fb06 	bl	80028f6 <RTC_Bcd2ToByte>
 80022ea:	4603      	mov	r3, r0
 80022ec:	461a      	mov	r2, r3
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80022fc:	b590      	push	{r4, r7, lr}
 80022fe:	b087      	sub	sp, #28
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	7f1b      	ldrb	r3, [r3, #28]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d101      	bne.n	8002318 <HAL_RTC_SetDate+0x1c>
 8002314:	2302      	movs	r3, #2
 8002316:	e071      	b.n	80023fc <HAL_RTC_SetDate+0x100>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2201      	movs	r2, #1
 800231c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2202      	movs	r2, #2
 8002322:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10e      	bne.n	8002348 <HAL_RTC_SetDate+0x4c>
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	785b      	ldrb	r3, [r3, #1]
 800232e:	f003 0310 	and.w	r3, r3, #16
 8002332:	2b00      	cmp	r3, #0
 8002334:	d008      	beq.n	8002348 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	785b      	ldrb	r3, [r3, #1]
 800233a:	f023 0310 	bic.w	r3, r3, #16
 800233e:	b2db      	uxtb	r3, r3
 8002340:	330a      	adds	r3, #10
 8002342:	b2da      	uxtb	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d11c      	bne.n	8002388 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	78db      	ldrb	r3, [r3, #3]
 8002352:	4618      	mov	r0, r3
 8002354:	f000 fab2 	bl	80028bc <RTC_ByteToBcd2>
 8002358:	4603      	mov	r3, r0
 800235a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	785b      	ldrb	r3, [r3, #1]
 8002360:	4618      	mov	r0, r3
 8002362:	f000 faab 	bl	80028bc <RTC_ByteToBcd2>
 8002366:	4603      	mov	r3, r0
 8002368:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800236a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	789b      	ldrb	r3, [r3, #2]
 8002370:	4618      	mov	r0, r3
 8002372:	f000 faa3 	bl	80028bc <RTC_ByteToBcd2>
 8002376:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002378:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002382:	4313      	orrs	r3, r2
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	e00e      	b.n	80023a6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	78db      	ldrb	r3, [r3, #3]
 800238c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	785b      	ldrb	r3, [r3, #1]
 8002392:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002394:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800239a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80023a2:	4313      	orrs	r3, r2
 80023a4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	22ca      	movs	r2, #202	; 0xca
 80023ac:	625a      	str	r2, [r3, #36]	; 0x24
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2253      	movs	r2, #83	; 0x53
 80023b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 fa24 	bl	8002804 <RTC_EnterInitMode>
 80023bc:	4603      	mov	r3, r0
 80023be:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80023c0:	7cfb      	ldrb	r3, [r7, #19]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10c      	bne.n	80023e0 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80023d0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80023d4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 fa4b 	bl	8002872 <RTC_ExitInitMode>
 80023dc:	4603      	mov	r3, r0
 80023de:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80023e0:	7cfb      	ldrb	r3, [r7, #19]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d102      	bne.n	80023ec <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2201      	movs	r2, #1
 80023ea:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	22ff      	movs	r2, #255	; 0xff
 80023f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	771a      	strb	r2, [r3, #28]

  return status;
 80023fa:	7cfb      	ldrb	r3, [r7, #19]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	371c      	adds	r7, #28
 8002400:	46bd      	mov	sp, r7
 8002402:	bd90      	pop	{r4, r7, pc}

08002404 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800241e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002422:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	0c1b      	lsrs	r3, r3, #16
 8002428:	b2da      	uxtb	r2, r3
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	0a1b      	lsrs	r3, r3, #8
 8002432:	b2db      	uxtb	r3, r3
 8002434:	f003 031f 	and.w	r3, r3, #31
 8002438:	b2da      	uxtb	r2, r3
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	b2db      	uxtb	r3, r3
 8002442:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002446:	b2da      	uxtb	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	0b5b      	lsrs	r3, r3, #13
 8002450:	b2db      	uxtb	r3, r3
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	b2da      	uxtb	r2, r3
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d11a      	bne.n	8002498 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	78db      	ldrb	r3, [r3, #3]
 8002466:	4618      	mov	r0, r3
 8002468:	f000 fa45 	bl	80028f6 <RTC_Bcd2ToByte>
 800246c:	4603      	mov	r3, r0
 800246e:	461a      	mov	r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	785b      	ldrb	r3, [r3, #1]
 8002478:	4618      	mov	r0, r3
 800247a:	f000 fa3c 	bl	80028f6 <RTC_Bcd2ToByte>
 800247e:	4603      	mov	r3, r0
 8002480:	461a      	mov	r2, r3
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	789b      	ldrb	r3, [r3, #2]
 800248a:	4618      	mov	r0, r3
 800248c:	f000 fa33 	bl	80028f6 <RTC_Bcd2ToByte>
 8002490:	4603      	mov	r3, r0
 8002492:	461a      	mov	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80024a4:	b590      	push	{r4, r7, lr}
 80024a6:	b089      	sub	sp, #36	; 0x24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80024b0:	4b9a      	ldr	r3, [pc, #616]	; (800271c <HAL_RTC_SetAlarm_IT+0x278>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a9a      	ldr	r2, [pc, #616]	; (8002720 <HAL_RTC_SetAlarm_IT+0x27c>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	0adb      	lsrs	r3, r3, #11
 80024bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024c0:	fb02 f303 	mul.w	r3, r2, r3
 80024c4:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	7f1b      	ldrb	r3, [r3, #28]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <HAL_RTC_SetAlarm_IT+0x36>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e11c      	b.n	8002714 <HAL_RTC_SetAlarm_IT+0x270>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2201      	movs	r2, #1
 80024de:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2202      	movs	r2, #2
 80024e4:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d137      	bne.n	800255c <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d102      	bne.n	8002500 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2200      	movs	r2, #0
 80024fe:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f000 f9d9 	bl	80028bc <RTC_ByteToBcd2>
 800250a:	4603      	mov	r3, r0
 800250c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	785b      	ldrb	r3, [r3, #1]
 8002512:	4618      	mov	r0, r3
 8002514:	f000 f9d2 	bl	80028bc <RTC_ByteToBcd2>
 8002518:	4603      	mov	r3, r0
 800251a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800251c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	789b      	ldrb	r3, [r3, #2]
 8002522:	4618      	mov	r0, r3
 8002524:	f000 f9ca 	bl	80028bc <RTC_ByteToBcd2>
 8002528:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800252a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	78db      	ldrb	r3, [r3, #3]
 8002532:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002534:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800253e:	4618      	mov	r0, r3
 8002540:	f000 f9bc 	bl	80028bc <RTC_ByteToBcd2>
 8002544:	4603      	mov	r3, r0
 8002546:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8002548:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002550:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002556:	4313      	orrs	r3, r2
 8002558:	61fb      	str	r3, [r7, #28]
 800255a:	e023      	b.n	80025a4 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002566:	2b00      	cmp	r3, #0
 8002568:	d102      	bne.n	8002570 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	2200      	movs	r2, #0
 800256e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	785b      	ldrb	r3, [r3, #1]
 800257a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800257c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002582:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	78db      	ldrb	r3, [r3, #3]
 8002588:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800258a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002592:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002594:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800259a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	22ca      	movs	r2, #202	; 0xca
 80025b6:	625a      	str	r2, [r3, #36]	; 0x24
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2253      	movs	r2, #83	; 0x53
 80025be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025c8:	d141      	bne.n	800264e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025d8:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80025ea:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	1e5a      	subs	r2, r3, #1
 80025f0:	617a      	str	r2, [r7, #20]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10b      	bne.n	800260e <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	22ff      	movs	r2, #255	; 0xff
 80025fc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2203      	movs	r2, #3
 8002602:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e082      	b.n	8002714 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0e7      	beq.n	80025ec <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	69fa      	ldr	r2, [r7, #28]
 8002622:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800263a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	e04b      	b.n	80026e6 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800265c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	b2da      	uxtb	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800266e:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002670:	4b2a      	ldr	r3, [pc, #168]	; (800271c <HAL_RTC_SetAlarm_IT+0x278>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a2a      	ldr	r2, [pc, #168]	; (8002720 <HAL_RTC_SetAlarm_IT+0x27c>)
 8002676:	fba2 2303 	umull	r2, r3, r2, r3
 800267a:	0adb      	lsrs	r3, r3, #11
 800267c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002680:	fb02 f303 	mul.w	r3, r2, r3
 8002684:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	1e5a      	subs	r2, r3, #1
 800268a:	617a      	str	r2, [r7, #20]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10b      	bne.n	80026a8 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	22ff      	movs	r2, #255	; 0xff
 8002696:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2203      	movs	r2, #3
 800269c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e035      	b.n	8002714 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0e7      	beq.n	8002686 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	69fa      	ldr	r2, [r7, #28]
 80026bc:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026d4:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026e4:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80026e6:	4b0f      	ldr	r3, [pc, #60]	; (8002724 <HAL_RTC_SetAlarm_IT+0x280>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a0e      	ldr	r2, [pc, #56]	; (8002724 <HAL_RTC_SetAlarm_IT+0x280>)
 80026ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f0:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80026f2:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <HAL_RTC_SetAlarm_IT+0x280>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	4a0b      	ldr	r2, [pc, #44]	; (8002724 <HAL_RTC_SetAlarm_IT+0x280>)
 80026f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026fc:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	22ff      	movs	r2, #255	; 0xff
 8002704:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2201      	movs	r2, #1
 800270a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3724      	adds	r7, #36	; 0x24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd90      	pop	{r4, r7, pc}
 800271c:	20000000 	.word	0x20000000
 8002720:	10624dd3 	.word	0x10624dd3
 8002724:	40013c00 	.word	0x40013c00

08002728 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d012      	beq.n	8002764 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00b      	beq.n	8002764 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7fe f8f5 	bl	800093c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	b2da      	uxtb	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002762:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d012      	beq.n	8002798 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00b      	beq.n	8002798 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f8d4 	bl	800292e <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	b2da      	uxtb	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002796:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002798:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <HAL_RTC_AlarmIRQHandler+0x88>)
 800279a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800279e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	775a      	strb	r2, [r3, #29]
}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40013c00 	.word	0x40013c00

080027b4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027ce:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027d0:	f7fe fad0 	bl	8000d74 <HAL_GetTick>
 80027d4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80027d6:	e009      	b.n	80027ec <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80027d8:	f7fe facc 	bl	8000d74 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027e6:	d901      	bls.n	80027ec <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e007      	b.n	80027fc <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f003 0320 	and.w	r3, r3, #32
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0ee      	beq.n	80027d8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281e:	2b00      	cmp	r3, #0
 8002820:	d122      	bne.n	8002868 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002830:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002832:	f7fe fa9f 	bl	8000d74 <HAL_GetTick>
 8002836:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002838:	e00c      	b.n	8002854 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800283a:	f7fe fa9b 	bl	8000d74 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002848:	d904      	bls.n	8002854 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2204      	movs	r2, #4
 800284e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285e:	2b00      	cmp	r3, #0
 8002860:	d102      	bne.n	8002868 <RTC_EnterInitMode+0x64>
 8002862:	7bfb      	ldrb	r3, [r7, #15]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d1e8      	bne.n	800283a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002868:	7bfb      	ldrb	r3, [r7, #15]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b084      	sub	sp, #16
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800288c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 0320 	and.w	r3, r3, #32
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10a      	bne.n	80028b2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f7ff ff89 	bl	80027b4 <HAL_RTC_WaitForSynchro>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d004      	beq.n	80028b2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2204      	movs	r2, #4
 80028ac:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80028ca:	e005      	b.n	80028d8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
 80028ce:	3301      	adds	r3, #1
 80028d0:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	3b0a      	subs	r3, #10
 80028d6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	2b09      	cmp	r3, #9
 80028dc:	d8f6      	bhi.n	80028cc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80028de:	7bfb      	ldrb	r3, [r7, #15]
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	b2db      	uxtb	r3, r3
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b085      	sub	sp, #20
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	4603      	mov	r3, r0
 80028fe:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8002900:	2300      	movs	r3, #0
 8002902:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	091b      	lsrs	r3, r3, #4
 8002908:	b2db      	uxtb	r3, r3
 800290a:	461a      	mov	r2, r3
 800290c:	0092      	lsls	r2, r2, #2
 800290e:	4413      	add	r3, r2
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	b2da      	uxtb	r2, r3
 800291c:	7bfb      	ldrb	r3, [r7, #15]
 800291e:	4413      	add	r3, r2
 8002920:	b2db      	uxtb	r3, r3
}
 8002922:	4618      	mov	r0, r3
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b082      	sub	sp, #8
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e03f      	b.n	80029d4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d106      	bne.n	800296e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7fe f85d 	bl	8000a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2224      	movs	r2, #36	; 0x24
 8002972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002984:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f928 	bl	8002bdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691a      	ldr	r2, [r3, #16]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800299a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695a      	ldr	r2, [r3, #20]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029aa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029ba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2220      	movs	r2, #32
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2220      	movs	r2, #32
 80029ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08a      	sub	sp, #40	; 0x28
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	603b      	str	r3, [r7, #0]
 80029e8:	4613      	mov	r3, r2
 80029ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b20      	cmp	r3, #32
 80029fa:	d17c      	bne.n	8002af6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d002      	beq.n	8002a08 <HAL_UART_Transmit+0x2c>
 8002a02:	88fb      	ldrh	r3, [r7, #6]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e075      	b.n	8002af8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_UART_Transmit+0x3e>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e06e      	b.n	8002af8 <HAL_UART_Transmit+0x11c>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2221      	movs	r2, #33	; 0x21
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a30:	f7fe f9a0 	bl	8000d74 <HAL_GetTick>
 8002a34:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	88fa      	ldrh	r2, [r7, #6]
 8002a3a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	88fa      	ldrh	r2, [r7, #6]
 8002a40:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a4a:	d108      	bne.n	8002a5e <HAL_UART_Transmit+0x82>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d104      	bne.n	8002a5e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a54:	2300      	movs	r3, #0
 8002a56:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	61bb      	str	r3, [r7, #24]
 8002a5c:	e003      	b.n	8002a66 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002a6e:	e02a      	b.n	8002ac6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	2200      	movs	r2, #0
 8002a78:	2180      	movs	r1, #128	; 0x80
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 f840 	bl	8002b00 <UART_WaitOnFlagUntilTimeout>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e036      	b.n	8002af8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10b      	bne.n	8002aa8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	881b      	ldrh	r3, [r3, #0]
 8002a94:	461a      	mov	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a9e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	3302      	adds	r3, #2
 8002aa4:	61bb      	str	r3, [r7, #24]
 8002aa6:	e007      	b.n	8002ab8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	781a      	ldrb	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1cf      	bne.n	8002a70 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2140      	movs	r1, #64	; 0x40
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 f810 	bl	8002b00 <UART_WaitOnFlagUntilTimeout>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e006      	b.n	8002af8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2220      	movs	r2, #32
 8002aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002af2:	2300      	movs	r3, #0
 8002af4:	e000      	b.n	8002af8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002af6:	2302      	movs	r3, #2
  }
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3720      	adds	r7, #32
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b090      	sub	sp, #64	; 0x40
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b10:	e050      	b.n	8002bb4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b18:	d04c      	beq.n	8002bb4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d007      	beq.n	8002b30 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b20:	f7fe f928 	bl	8000d74 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d241      	bcs.n	8002bb4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	330c      	adds	r3, #12
 8002b36:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3a:	e853 3f00 	ldrex	r3, [r3]
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	330c      	adds	r3, #12
 8002b4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b50:	637a      	str	r2, [r7, #52]	; 0x34
 8002b52:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b58:	e841 2300 	strex	r3, r2, [r1]
 8002b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1e5      	bne.n	8002b30 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	3314      	adds	r3, #20
 8002b6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	e853 3f00 	ldrex	r3, [r3]
 8002b72:	613b      	str	r3, [r7, #16]
   return(result);
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	f023 0301 	bic.w	r3, r3, #1
 8002b7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	3314      	adds	r3, #20
 8002b82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b84:	623a      	str	r2, [r7, #32]
 8002b86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b88:	69f9      	ldr	r1, [r7, #28]
 8002b8a:	6a3a      	ldr	r2, [r7, #32]
 8002b8c:	e841 2300 	strex	r3, r2, [r1]
 8002b90:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1e5      	bne.n	8002b64 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e00f      	b.n	8002bd4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	bf0c      	ite	eq
 8002bc4:	2301      	moveq	r3, #1
 8002bc6:	2300      	movne	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	461a      	mov	r2, r3
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d09f      	beq.n	8002b12 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3740      	adds	r7, #64	; 0x40
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002be0:	b0c0      	sub	sp, #256	; 0x100
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf8:	68d9      	ldr	r1, [r3, #12]
 8002bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	ea40 0301 	orr.w	r3, r0, r1
 8002c04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	431a      	orrs	r2, r3
 8002c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c34:	f021 010c 	bic.w	r1, r1, #12
 8002c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c42:	430b      	orrs	r3, r1
 8002c44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c56:	6999      	ldr	r1, [r3, #24]
 8002c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	ea40 0301 	orr.w	r3, r0, r1
 8002c62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	4b8f      	ldr	r3, [pc, #572]	; (8002ea8 <UART_SetConfig+0x2cc>)
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d005      	beq.n	8002c7c <UART_SetConfig+0xa0>
 8002c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	4b8d      	ldr	r3, [pc, #564]	; (8002eac <UART_SetConfig+0x2d0>)
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d104      	bne.n	8002c86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c7c:	f7fe fffc 	bl	8001c78 <HAL_RCC_GetPCLK2Freq>
 8002c80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002c84:	e003      	b.n	8002c8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c86:	f7fe ffe3 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
 8002c8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c98:	f040 810c 	bne.w	8002eb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002ca6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002caa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002cae:	4622      	mov	r2, r4
 8002cb0:	462b      	mov	r3, r5
 8002cb2:	1891      	adds	r1, r2, r2
 8002cb4:	65b9      	str	r1, [r7, #88]	; 0x58
 8002cb6:	415b      	adcs	r3, r3
 8002cb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	eb12 0801 	adds.w	r8, r2, r1
 8002cc4:	4629      	mov	r1, r5
 8002cc6:	eb43 0901 	adc.w	r9, r3, r1
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	f04f 0300 	mov.w	r3, #0
 8002cd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cde:	4690      	mov	r8, r2
 8002ce0:	4699      	mov	r9, r3
 8002ce2:	4623      	mov	r3, r4
 8002ce4:	eb18 0303 	adds.w	r3, r8, r3
 8002ce8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002cec:	462b      	mov	r3, r5
 8002cee:	eb49 0303 	adc.w	r3, r9, r3
 8002cf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	18db      	adds	r3, r3, r3
 8002d0e:	653b      	str	r3, [r7, #80]	; 0x50
 8002d10:	4613      	mov	r3, r2
 8002d12:	eb42 0303 	adc.w	r3, r2, r3
 8002d16:	657b      	str	r3, [r7, #84]	; 0x54
 8002d18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d20:	f7fd fab6 	bl	8000290 <__aeabi_uldivmod>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4b61      	ldr	r3, [pc, #388]	; (8002eb0 <UART_SetConfig+0x2d4>)
 8002d2a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	011c      	lsls	r4, r3, #4
 8002d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d36:	2200      	movs	r2, #0
 8002d38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002d44:	4642      	mov	r2, r8
 8002d46:	464b      	mov	r3, r9
 8002d48:	1891      	adds	r1, r2, r2
 8002d4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002d4c:	415b      	adcs	r3, r3
 8002d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d54:	4641      	mov	r1, r8
 8002d56:	eb12 0a01 	adds.w	sl, r2, r1
 8002d5a:	4649      	mov	r1, r9
 8002d5c:	eb43 0b01 	adc.w	fp, r3, r1
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d74:	4692      	mov	sl, r2
 8002d76:	469b      	mov	fp, r3
 8002d78:	4643      	mov	r3, r8
 8002d7a:	eb1a 0303 	adds.w	r3, sl, r3
 8002d7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d82:	464b      	mov	r3, r9
 8002d84:	eb4b 0303 	adc.w	r3, fp, r3
 8002d88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002da0:	460b      	mov	r3, r1
 8002da2:	18db      	adds	r3, r3, r3
 8002da4:	643b      	str	r3, [r7, #64]	; 0x40
 8002da6:	4613      	mov	r3, r2
 8002da8:	eb42 0303 	adc.w	r3, r2, r3
 8002dac:	647b      	str	r3, [r7, #68]	; 0x44
 8002dae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002db2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002db6:	f7fd fa6b 	bl	8000290 <__aeabi_uldivmod>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	4b3b      	ldr	r3, [pc, #236]	; (8002eb0 <UART_SetConfig+0x2d4>)
 8002dc2:	fba3 2301 	umull	r2, r3, r3, r1
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	2264      	movs	r2, #100	; 0x64
 8002dca:	fb02 f303 	mul.w	r3, r2, r3
 8002dce:	1acb      	subs	r3, r1, r3
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002dd6:	4b36      	ldr	r3, [pc, #216]	; (8002eb0 <UART_SetConfig+0x2d4>)
 8002dd8:	fba3 2302 	umull	r2, r3, r3, r2
 8002ddc:	095b      	lsrs	r3, r3, #5
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002de4:	441c      	add	r4, r3
 8002de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dea:	2200      	movs	r2, #0
 8002dec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002df0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002df4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002df8:	4642      	mov	r2, r8
 8002dfa:	464b      	mov	r3, r9
 8002dfc:	1891      	adds	r1, r2, r2
 8002dfe:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e00:	415b      	adcs	r3, r3
 8002e02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e08:	4641      	mov	r1, r8
 8002e0a:	1851      	adds	r1, r2, r1
 8002e0c:	6339      	str	r1, [r7, #48]	; 0x30
 8002e0e:	4649      	mov	r1, r9
 8002e10:	414b      	adcs	r3, r1
 8002e12:	637b      	str	r3, [r7, #52]	; 0x34
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e20:	4659      	mov	r1, fp
 8002e22:	00cb      	lsls	r3, r1, #3
 8002e24:	4651      	mov	r1, sl
 8002e26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e2a:	4651      	mov	r1, sl
 8002e2c:	00ca      	lsls	r2, r1, #3
 8002e2e:	4610      	mov	r0, r2
 8002e30:	4619      	mov	r1, r3
 8002e32:	4603      	mov	r3, r0
 8002e34:	4642      	mov	r2, r8
 8002e36:	189b      	adds	r3, r3, r2
 8002e38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e3c:	464b      	mov	r3, r9
 8002e3e:	460a      	mov	r2, r1
 8002e40:	eb42 0303 	adc.w	r3, r2, r3
 8002e44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002e58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	18db      	adds	r3, r3, r3
 8002e60:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e62:	4613      	mov	r3, r2
 8002e64:	eb42 0303 	adc.w	r3, r2, r3
 8002e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002e72:	f7fd fa0d 	bl	8000290 <__aeabi_uldivmod>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4b0d      	ldr	r3, [pc, #52]	; (8002eb0 <UART_SetConfig+0x2d4>)
 8002e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e80:	095b      	lsrs	r3, r3, #5
 8002e82:	2164      	movs	r1, #100	; 0x64
 8002e84:	fb01 f303 	mul.w	r3, r1, r3
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	3332      	adds	r3, #50	; 0x32
 8002e8e:	4a08      	ldr	r2, [pc, #32]	; (8002eb0 <UART_SetConfig+0x2d4>)
 8002e90:	fba2 2303 	umull	r2, r3, r2, r3
 8002e94:	095b      	lsrs	r3, r3, #5
 8002e96:	f003 0207 	and.w	r2, r3, #7
 8002e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4422      	add	r2, r4
 8002ea2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ea4:	e106      	b.n	80030b4 <UART_SetConfig+0x4d8>
 8002ea6:	bf00      	nop
 8002ea8:	40011000 	.word	0x40011000
 8002eac:	40011400 	.word	0x40011400
 8002eb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002eb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002ebe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002ec2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002ec6:	4642      	mov	r2, r8
 8002ec8:	464b      	mov	r3, r9
 8002eca:	1891      	adds	r1, r2, r2
 8002ecc:	6239      	str	r1, [r7, #32]
 8002ece:	415b      	adcs	r3, r3
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ed6:	4641      	mov	r1, r8
 8002ed8:	1854      	adds	r4, r2, r1
 8002eda:	4649      	mov	r1, r9
 8002edc:	eb43 0501 	adc.w	r5, r3, r1
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	00eb      	lsls	r3, r5, #3
 8002eea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002eee:	00e2      	lsls	r2, r4, #3
 8002ef0:	4614      	mov	r4, r2
 8002ef2:	461d      	mov	r5, r3
 8002ef4:	4643      	mov	r3, r8
 8002ef6:	18e3      	adds	r3, r4, r3
 8002ef8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002efc:	464b      	mov	r3, r9
 8002efe:	eb45 0303 	adc.w	r3, r5, r3
 8002f02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f22:	4629      	mov	r1, r5
 8002f24:	008b      	lsls	r3, r1, #2
 8002f26:	4621      	mov	r1, r4
 8002f28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f2c:	4621      	mov	r1, r4
 8002f2e:	008a      	lsls	r2, r1, #2
 8002f30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f34:	f7fd f9ac 	bl	8000290 <__aeabi_uldivmod>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4b60      	ldr	r3, [pc, #384]	; (80030c0 <UART_SetConfig+0x4e4>)
 8002f3e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	011c      	lsls	r4, r3, #4
 8002f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002f58:	4642      	mov	r2, r8
 8002f5a:	464b      	mov	r3, r9
 8002f5c:	1891      	adds	r1, r2, r2
 8002f5e:	61b9      	str	r1, [r7, #24]
 8002f60:	415b      	adcs	r3, r3
 8002f62:	61fb      	str	r3, [r7, #28]
 8002f64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f68:	4641      	mov	r1, r8
 8002f6a:	1851      	adds	r1, r2, r1
 8002f6c:	6139      	str	r1, [r7, #16]
 8002f6e:	4649      	mov	r1, r9
 8002f70:	414b      	adcs	r3, r1
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	f04f 0300 	mov.w	r3, #0
 8002f7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f80:	4659      	mov	r1, fp
 8002f82:	00cb      	lsls	r3, r1, #3
 8002f84:	4651      	mov	r1, sl
 8002f86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f8a:	4651      	mov	r1, sl
 8002f8c:	00ca      	lsls	r2, r1, #3
 8002f8e:	4610      	mov	r0, r2
 8002f90:	4619      	mov	r1, r3
 8002f92:	4603      	mov	r3, r0
 8002f94:	4642      	mov	r2, r8
 8002f96:	189b      	adds	r3, r3, r2
 8002f98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f9c:	464b      	mov	r3, r9
 8002f9e:	460a      	mov	r2, r1
 8002fa0:	eb42 0303 	adc.w	r3, r2, r3
 8002fa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fb2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	f04f 0300 	mov.w	r3, #0
 8002fbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002fc0:	4649      	mov	r1, r9
 8002fc2:	008b      	lsls	r3, r1, #2
 8002fc4:	4641      	mov	r1, r8
 8002fc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fca:	4641      	mov	r1, r8
 8002fcc:	008a      	lsls	r2, r1, #2
 8002fce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002fd2:	f7fd f95d 	bl	8000290 <__aeabi_uldivmod>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4611      	mov	r1, r2
 8002fdc:	4b38      	ldr	r3, [pc, #224]	; (80030c0 <UART_SetConfig+0x4e4>)
 8002fde:	fba3 2301 	umull	r2, r3, r3, r1
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	2264      	movs	r2, #100	; 0x64
 8002fe6:	fb02 f303 	mul.w	r3, r2, r3
 8002fea:	1acb      	subs	r3, r1, r3
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	3332      	adds	r3, #50	; 0x32
 8002ff0:	4a33      	ldr	r2, [pc, #204]	; (80030c0 <UART_SetConfig+0x4e4>)
 8002ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ffc:	441c      	add	r4, r3
 8002ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003002:	2200      	movs	r2, #0
 8003004:	673b      	str	r3, [r7, #112]	; 0x70
 8003006:	677a      	str	r2, [r7, #116]	; 0x74
 8003008:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800300c:	4642      	mov	r2, r8
 800300e:	464b      	mov	r3, r9
 8003010:	1891      	adds	r1, r2, r2
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	415b      	adcs	r3, r3
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800301c:	4641      	mov	r1, r8
 800301e:	1851      	adds	r1, r2, r1
 8003020:	6039      	str	r1, [r7, #0]
 8003022:	4649      	mov	r1, r9
 8003024:	414b      	adcs	r3, r1
 8003026:	607b      	str	r3, [r7, #4]
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003034:	4659      	mov	r1, fp
 8003036:	00cb      	lsls	r3, r1, #3
 8003038:	4651      	mov	r1, sl
 800303a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800303e:	4651      	mov	r1, sl
 8003040:	00ca      	lsls	r2, r1, #3
 8003042:	4610      	mov	r0, r2
 8003044:	4619      	mov	r1, r3
 8003046:	4603      	mov	r3, r0
 8003048:	4642      	mov	r2, r8
 800304a:	189b      	adds	r3, r3, r2
 800304c:	66bb      	str	r3, [r7, #104]	; 0x68
 800304e:	464b      	mov	r3, r9
 8003050:	460a      	mov	r2, r1
 8003052:	eb42 0303 	adc.w	r3, r2, r3
 8003056:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	663b      	str	r3, [r7, #96]	; 0x60
 8003062:	667a      	str	r2, [r7, #100]	; 0x64
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003070:	4649      	mov	r1, r9
 8003072:	008b      	lsls	r3, r1, #2
 8003074:	4641      	mov	r1, r8
 8003076:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800307a:	4641      	mov	r1, r8
 800307c:	008a      	lsls	r2, r1, #2
 800307e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003082:	f7fd f905 	bl	8000290 <__aeabi_uldivmod>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	4b0d      	ldr	r3, [pc, #52]	; (80030c0 <UART_SetConfig+0x4e4>)
 800308c:	fba3 1302 	umull	r1, r3, r3, r2
 8003090:	095b      	lsrs	r3, r3, #5
 8003092:	2164      	movs	r1, #100	; 0x64
 8003094:	fb01 f303 	mul.w	r3, r1, r3
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	3332      	adds	r3, #50	; 0x32
 800309e:	4a08      	ldr	r2, [pc, #32]	; (80030c0 <UART_SetConfig+0x4e4>)
 80030a0:	fba2 2303 	umull	r2, r3, r2, r3
 80030a4:	095b      	lsrs	r3, r3, #5
 80030a6:	f003 020f 	and.w	r2, r3, #15
 80030aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4422      	add	r2, r4
 80030b2:	609a      	str	r2, [r3, #8]
}
 80030b4:	bf00      	nop
 80030b6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80030ba:	46bd      	mov	sp, r7
 80030bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030c0:	51eb851f 	.word	0x51eb851f

080030c4 <std>:
 80030c4:	2300      	movs	r3, #0
 80030c6:	b510      	push	{r4, lr}
 80030c8:	4604      	mov	r4, r0
 80030ca:	e9c0 3300 	strd	r3, r3, [r0]
 80030ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030d2:	6083      	str	r3, [r0, #8]
 80030d4:	8181      	strh	r1, [r0, #12]
 80030d6:	6643      	str	r3, [r0, #100]	; 0x64
 80030d8:	81c2      	strh	r2, [r0, #14]
 80030da:	6183      	str	r3, [r0, #24]
 80030dc:	4619      	mov	r1, r3
 80030de:	2208      	movs	r2, #8
 80030e0:	305c      	adds	r0, #92	; 0x5c
 80030e2:	f000 f9f7 	bl	80034d4 <memset>
 80030e6:	4b0d      	ldr	r3, [pc, #52]	; (800311c <std+0x58>)
 80030e8:	6263      	str	r3, [r4, #36]	; 0x24
 80030ea:	4b0d      	ldr	r3, [pc, #52]	; (8003120 <std+0x5c>)
 80030ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80030ee:	4b0d      	ldr	r3, [pc, #52]	; (8003124 <std+0x60>)
 80030f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80030f2:	4b0d      	ldr	r3, [pc, #52]	; (8003128 <std+0x64>)
 80030f4:	6323      	str	r3, [r4, #48]	; 0x30
 80030f6:	4b0d      	ldr	r3, [pc, #52]	; (800312c <std+0x68>)
 80030f8:	6224      	str	r4, [r4, #32]
 80030fa:	429c      	cmp	r4, r3
 80030fc:	d006      	beq.n	800310c <std+0x48>
 80030fe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003102:	4294      	cmp	r4, r2
 8003104:	d002      	beq.n	800310c <std+0x48>
 8003106:	33d0      	adds	r3, #208	; 0xd0
 8003108:	429c      	cmp	r4, r3
 800310a:	d105      	bne.n	8003118 <std+0x54>
 800310c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003114:	f000 ba56 	b.w	80035c4 <__retarget_lock_init_recursive>
 8003118:	bd10      	pop	{r4, pc}
 800311a:	bf00      	nop
 800311c:	08003325 	.word	0x08003325
 8003120:	08003347 	.word	0x08003347
 8003124:	0800337f 	.word	0x0800337f
 8003128:	080033a3 	.word	0x080033a3
 800312c:	2000010c 	.word	0x2000010c

08003130 <stdio_exit_handler>:
 8003130:	4a02      	ldr	r2, [pc, #8]	; (800313c <stdio_exit_handler+0xc>)
 8003132:	4903      	ldr	r1, [pc, #12]	; (8003140 <stdio_exit_handler+0x10>)
 8003134:	4803      	ldr	r0, [pc, #12]	; (8003144 <stdio_exit_handler+0x14>)
 8003136:	f000 b869 	b.w	800320c <_fwalk_sglue>
 800313a:	bf00      	nop
 800313c:	2000000c 	.word	0x2000000c
 8003140:	08003e71 	.word	0x08003e71
 8003144:	20000018 	.word	0x20000018

08003148 <cleanup_stdio>:
 8003148:	6841      	ldr	r1, [r0, #4]
 800314a:	4b0c      	ldr	r3, [pc, #48]	; (800317c <cleanup_stdio+0x34>)
 800314c:	4299      	cmp	r1, r3
 800314e:	b510      	push	{r4, lr}
 8003150:	4604      	mov	r4, r0
 8003152:	d001      	beq.n	8003158 <cleanup_stdio+0x10>
 8003154:	f000 fe8c 	bl	8003e70 <_fflush_r>
 8003158:	68a1      	ldr	r1, [r4, #8]
 800315a:	4b09      	ldr	r3, [pc, #36]	; (8003180 <cleanup_stdio+0x38>)
 800315c:	4299      	cmp	r1, r3
 800315e:	d002      	beq.n	8003166 <cleanup_stdio+0x1e>
 8003160:	4620      	mov	r0, r4
 8003162:	f000 fe85 	bl	8003e70 <_fflush_r>
 8003166:	68e1      	ldr	r1, [r4, #12]
 8003168:	4b06      	ldr	r3, [pc, #24]	; (8003184 <cleanup_stdio+0x3c>)
 800316a:	4299      	cmp	r1, r3
 800316c:	d004      	beq.n	8003178 <cleanup_stdio+0x30>
 800316e:	4620      	mov	r0, r4
 8003170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003174:	f000 be7c 	b.w	8003e70 <_fflush_r>
 8003178:	bd10      	pop	{r4, pc}
 800317a:	bf00      	nop
 800317c:	2000010c 	.word	0x2000010c
 8003180:	20000174 	.word	0x20000174
 8003184:	200001dc 	.word	0x200001dc

08003188 <global_stdio_init.part.0>:
 8003188:	b510      	push	{r4, lr}
 800318a:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <global_stdio_init.part.0+0x30>)
 800318c:	4c0b      	ldr	r4, [pc, #44]	; (80031bc <global_stdio_init.part.0+0x34>)
 800318e:	4a0c      	ldr	r2, [pc, #48]	; (80031c0 <global_stdio_init.part.0+0x38>)
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	4620      	mov	r0, r4
 8003194:	2200      	movs	r2, #0
 8003196:	2104      	movs	r1, #4
 8003198:	f7ff ff94 	bl	80030c4 <std>
 800319c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80031a0:	2201      	movs	r2, #1
 80031a2:	2109      	movs	r1, #9
 80031a4:	f7ff ff8e 	bl	80030c4 <std>
 80031a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80031ac:	2202      	movs	r2, #2
 80031ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031b2:	2112      	movs	r1, #18
 80031b4:	f7ff bf86 	b.w	80030c4 <std>
 80031b8:	20000244 	.word	0x20000244
 80031bc:	2000010c 	.word	0x2000010c
 80031c0:	08003131 	.word	0x08003131

080031c4 <__sfp_lock_acquire>:
 80031c4:	4801      	ldr	r0, [pc, #4]	; (80031cc <__sfp_lock_acquire+0x8>)
 80031c6:	f000 b9fe 	b.w	80035c6 <__retarget_lock_acquire_recursive>
 80031ca:	bf00      	nop
 80031cc:	2000024d 	.word	0x2000024d

080031d0 <__sfp_lock_release>:
 80031d0:	4801      	ldr	r0, [pc, #4]	; (80031d8 <__sfp_lock_release+0x8>)
 80031d2:	f000 b9f9 	b.w	80035c8 <__retarget_lock_release_recursive>
 80031d6:	bf00      	nop
 80031d8:	2000024d 	.word	0x2000024d

080031dc <__sinit>:
 80031dc:	b510      	push	{r4, lr}
 80031de:	4604      	mov	r4, r0
 80031e0:	f7ff fff0 	bl	80031c4 <__sfp_lock_acquire>
 80031e4:	6a23      	ldr	r3, [r4, #32]
 80031e6:	b11b      	cbz	r3, 80031f0 <__sinit+0x14>
 80031e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031ec:	f7ff bff0 	b.w	80031d0 <__sfp_lock_release>
 80031f0:	4b04      	ldr	r3, [pc, #16]	; (8003204 <__sinit+0x28>)
 80031f2:	6223      	str	r3, [r4, #32]
 80031f4:	4b04      	ldr	r3, [pc, #16]	; (8003208 <__sinit+0x2c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1f5      	bne.n	80031e8 <__sinit+0xc>
 80031fc:	f7ff ffc4 	bl	8003188 <global_stdio_init.part.0>
 8003200:	e7f2      	b.n	80031e8 <__sinit+0xc>
 8003202:	bf00      	nop
 8003204:	08003149 	.word	0x08003149
 8003208:	20000244 	.word	0x20000244

0800320c <_fwalk_sglue>:
 800320c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003210:	4607      	mov	r7, r0
 8003212:	4688      	mov	r8, r1
 8003214:	4614      	mov	r4, r2
 8003216:	2600      	movs	r6, #0
 8003218:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800321c:	f1b9 0901 	subs.w	r9, r9, #1
 8003220:	d505      	bpl.n	800322e <_fwalk_sglue+0x22>
 8003222:	6824      	ldr	r4, [r4, #0]
 8003224:	2c00      	cmp	r4, #0
 8003226:	d1f7      	bne.n	8003218 <_fwalk_sglue+0xc>
 8003228:	4630      	mov	r0, r6
 800322a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800322e:	89ab      	ldrh	r3, [r5, #12]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d907      	bls.n	8003244 <_fwalk_sglue+0x38>
 8003234:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003238:	3301      	adds	r3, #1
 800323a:	d003      	beq.n	8003244 <_fwalk_sglue+0x38>
 800323c:	4629      	mov	r1, r5
 800323e:	4638      	mov	r0, r7
 8003240:	47c0      	blx	r8
 8003242:	4306      	orrs	r6, r0
 8003244:	3568      	adds	r5, #104	; 0x68
 8003246:	e7e9      	b.n	800321c <_fwalk_sglue+0x10>

08003248 <iprintf>:
 8003248:	b40f      	push	{r0, r1, r2, r3}
 800324a:	b507      	push	{r0, r1, r2, lr}
 800324c:	4906      	ldr	r1, [pc, #24]	; (8003268 <iprintf+0x20>)
 800324e:	ab04      	add	r3, sp, #16
 8003250:	6808      	ldr	r0, [r1, #0]
 8003252:	f853 2b04 	ldr.w	r2, [r3], #4
 8003256:	6881      	ldr	r1, [r0, #8]
 8003258:	9301      	str	r3, [sp, #4]
 800325a:	f000 fad9 	bl	8003810 <_vfiprintf_r>
 800325e:	b003      	add	sp, #12
 8003260:	f85d eb04 	ldr.w	lr, [sp], #4
 8003264:	b004      	add	sp, #16
 8003266:	4770      	bx	lr
 8003268:	20000064 	.word	0x20000064

0800326c <_puts_r>:
 800326c:	6a03      	ldr	r3, [r0, #32]
 800326e:	b570      	push	{r4, r5, r6, lr}
 8003270:	6884      	ldr	r4, [r0, #8]
 8003272:	4605      	mov	r5, r0
 8003274:	460e      	mov	r6, r1
 8003276:	b90b      	cbnz	r3, 800327c <_puts_r+0x10>
 8003278:	f7ff ffb0 	bl	80031dc <__sinit>
 800327c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800327e:	07db      	lsls	r3, r3, #31
 8003280:	d405      	bmi.n	800328e <_puts_r+0x22>
 8003282:	89a3      	ldrh	r3, [r4, #12]
 8003284:	0598      	lsls	r0, r3, #22
 8003286:	d402      	bmi.n	800328e <_puts_r+0x22>
 8003288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800328a:	f000 f99c 	bl	80035c6 <__retarget_lock_acquire_recursive>
 800328e:	89a3      	ldrh	r3, [r4, #12]
 8003290:	0719      	lsls	r1, r3, #28
 8003292:	d513      	bpl.n	80032bc <_puts_r+0x50>
 8003294:	6923      	ldr	r3, [r4, #16]
 8003296:	b18b      	cbz	r3, 80032bc <_puts_r+0x50>
 8003298:	3e01      	subs	r6, #1
 800329a:	68a3      	ldr	r3, [r4, #8]
 800329c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80032a0:	3b01      	subs	r3, #1
 80032a2:	60a3      	str	r3, [r4, #8]
 80032a4:	b9e9      	cbnz	r1, 80032e2 <_puts_r+0x76>
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	da2e      	bge.n	8003308 <_puts_r+0x9c>
 80032aa:	4622      	mov	r2, r4
 80032ac:	210a      	movs	r1, #10
 80032ae:	4628      	mov	r0, r5
 80032b0:	f000 f87b 	bl	80033aa <__swbuf_r>
 80032b4:	3001      	adds	r0, #1
 80032b6:	d007      	beq.n	80032c8 <_puts_r+0x5c>
 80032b8:	250a      	movs	r5, #10
 80032ba:	e007      	b.n	80032cc <_puts_r+0x60>
 80032bc:	4621      	mov	r1, r4
 80032be:	4628      	mov	r0, r5
 80032c0:	f000 f8b0 	bl	8003424 <__swsetup_r>
 80032c4:	2800      	cmp	r0, #0
 80032c6:	d0e7      	beq.n	8003298 <_puts_r+0x2c>
 80032c8:	f04f 35ff 	mov.w	r5, #4294967295
 80032cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032ce:	07da      	lsls	r2, r3, #31
 80032d0:	d405      	bmi.n	80032de <_puts_r+0x72>
 80032d2:	89a3      	ldrh	r3, [r4, #12]
 80032d4:	059b      	lsls	r3, r3, #22
 80032d6:	d402      	bmi.n	80032de <_puts_r+0x72>
 80032d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032da:	f000 f975 	bl	80035c8 <__retarget_lock_release_recursive>
 80032de:	4628      	mov	r0, r5
 80032e0:	bd70      	pop	{r4, r5, r6, pc}
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	da04      	bge.n	80032f0 <_puts_r+0x84>
 80032e6:	69a2      	ldr	r2, [r4, #24]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	dc06      	bgt.n	80032fa <_puts_r+0x8e>
 80032ec:	290a      	cmp	r1, #10
 80032ee:	d004      	beq.n	80032fa <_puts_r+0x8e>
 80032f0:	6823      	ldr	r3, [r4, #0]
 80032f2:	1c5a      	adds	r2, r3, #1
 80032f4:	6022      	str	r2, [r4, #0]
 80032f6:	7019      	strb	r1, [r3, #0]
 80032f8:	e7cf      	b.n	800329a <_puts_r+0x2e>
 80032fa:	4622      	mov	r2, r4
 80032fc:	4628      	mov	r0, r5
 80032fe:	f000 f854 	bl	80033aa <__swbuf_r>
 8003302:	3001      	adds	r0, #1
 8003304:	d1c9      	bne.n	800329a <_puts_r+0x2e>
 8003306:	e7df      	b.n	80032c8 <_puts_r+0x5c>
 8003308:	6823      	ldr	r3, [r4, #0]
 800330a:	250a      	movs	r5, #10
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	6022      	str	r2, [r4, #0]
 8003310:	701d      	strb	r5, [r3, #0]
 8003312:	e7db      	b.n	80032cc <_puts_r+0x60>

08003314 <puts>:
 8003314:	4b02      	ldr	r3, [pc, #8]	; (8003320 <puts+0xc>)
 8003316:	4601      	mov	r1, r0
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	f7ff bfa7 	b.w	800326c <_puts_r>
 800331e:	bf00      	nop
 8003320:	20000064 	.word	0x20000064

08003324 <__sread>:
 8003324:	b510      	push	{r4, lr}
 8003326:	460c      	mov	r4, r1
 8003328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800332c:	f000 f8fc 	bl	8003528 <_read_r>
 8003330:	2800      	cmp	r0, #0
 8003332:	bfab      	itete	ge
 8003334:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003336:	89a3      	ldrhlt	r3, [r4, #12]
 8003338:	181b      	addge	r3, r3, r0
 800333a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800333e:	bfac      	ite	ge
 8003340:	6563      	strge	r3, [r4, #84]	; 0x54
 8003342:	81a3      	strhlt	r3, [r4, #12]
 8003344:	bd10      	pop	{r4, pc}

08003346 <__swrite>:
 8003346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800334a:	461f      	mov	r7, r3
 800334c:	898b      	ldrh	r3, [r1, #12]
 800334e:	05db      	lsls	r3, r3, #23
 8003350:	4605      	mov	r5, r0
 8003352:	460c      	mov	r4, r1
 8003354:	4616      	mov	r6, r2
 8003356:	d505      	bpl.n	8003364 <__swrite+0x1e>
 8003358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800335c:	2302      	movs	r3, #2
 800335e:	2200      	movs	r2, #0
 8003360:	f000 f8d0 	bl	8003504 <_lseek_r>
 8003364:	89a3      	ldrh	r3, [r4, #12]
 8003366:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800336a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800336e:	81a3      	strh	r3, [r4, #12]
 8003370:	4632      	mov	r2, r6
 8003372:	463b      	mov	r3, r7
 8003374:	4628      	mov	r0, r5
 8003376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800337a:	f000 b8e7 	b.w	800354c <_write_r>

0800337e <__sseek>:
 800337e:	b510      	push	{r4, lr}
 8003380:	460c      	mov	r4, r1
 8003382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003386:	f000 f8bd 	bl	8003504 <_lseek_r>
 800338a:	1c43      	adds	r3, r0, #1
 800338c:	89a3      	ldrh	r3, [r4, #12]
 800338e:	bf15      	itete	ne
 8003390:	6560      	strne	r0, [r4, #84]	; 0x54
 8003392:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003396:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800339a:	81a3      	strheq	r3, [r4, #12]
 800339c:	bf18      	it	ne
 800339e:	81a3      	strhne	r3, [r4, #12]
 80033a0:	bd10      	pop	{r4, pc}

080033a2 <__sclose>:
 80033a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033a6:	f000 b89d 	b.w	80034e4 <_close_r>

080033aa <__swbuf_r>:
 80033aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ac:	460e      	mov	r6, r1
 80033ae:	4614      	mov	r4, r2
 80033b0:	4605      	mov	r5, r0
 80033b2:	b118      	cbz	r0, 80033bc <__swbuf_r+0x12>
 80033b4:	6a03      	ldr	r3, [r0, #32]
 80033b6:	b90b      	cbnz	r3, 80033bc <__swbuf_r+0x12>
 80033b8:	f7ff ff10 	bl	80031dc <__sinit>
 80033bc:	69a3      	ldr	r3, [r4, #24]
 80033be:	60a3      	str	r3, [r4, #8]
 80033c0:	89a3      	ldrh	r3, [r4, #12]
 80033c2:	071a      	lsls	r2, r3, #28
 80033c4:	d525      	bpl.n	8003412 <__swbuf_r+0x68>
 80033c6:	6923      	ldr	r3, [r4, #16]
 80033c8:	b31b      	cbz	r3, 8003412 <__swbuf_r+0x68>
 80033ca:	6823      	ldr	r3, [r4, #0]
 80033cc:	6922      	ldr	r2, [r4, #16]
 80033ce:	1a98      	subs	r0, r3, r2
 80033d0:	6963      	ldr	r3, [r4, #20]
 80033d2:	b2f6      	uxtb	r6, r6
 80033d4:	4283      	cmp	r3, r0
 80033d6:	4637      	mov	r7, r6
 80033d8:	dc04      	bgt.n	80033e4 <__swbuf_r+0x3a>
 80033da:	4621      	mov	r1, r4
 80033dc:	4628      	mov	r0, r5
 80033de:	f000 fd47 	bl	8003e70 <_fflush_r>
 80033e2:	b9e0      	cbnz	r0, 800341e <__swbuf_r+0x74>
 80033e4:	68a3      	ldr	r3, [r4, #8]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	60a3      	str	r3, [r4, #8]
 80033ea:	6823      	ldr	r3, [r4, #0]
 80033ec:	1c5a      	adds	r2, r3, #1
 80033ee:	6022      	str	r2, [r4, #0]
 80033f0:	701e      	strb	r6, [r3, #0]
 80033f2:	6962      	ldr	r2, [r4, #20]
 80033f4:	1c43      	adds	r3, r0, #1
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d004      	beq.n	8003404 <__swbuf_r+0x5a>
 80033fa:	89a3      	ldrh	r3, [r4, #12]
 80033fc:	07db      	lsls	r3, r3, #31
 80033fe:	d506      	bpl.n	800340e <__swbuf_r+0x64>
 8003400:	2e0a      	cmp	r6, #10
 8003402:	d104      	bne.n	800340e <__swbuf_r+0x64>
 8003404:	4621      	mov	r1, r4
 8003406:	4628      	mov	r0, r5
 8003408:	f000 fd32 	bl	8003e70 <_fflush_r>
 800340c:	b938      	cbnz	r0, 800341e <__swbuf_r+0x74>
 800340e:	4638      	mov	r0, r7
 8003410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003412:	4621      	mov	r1, r4
 8003414:	4628      	mov	r0, r5
 8003416:	f000 f805 	bl	8003424 <__swsetup_r>
 800341a:	2800      	cmp	r0, #0
 800341c:	d0d5      	beq.n	80033ca <__swbuf_r+0x20>
 800341e:	f04f 37ff 	mov.w	r7, #4294967295
 8003422:	e7f4      	b.n	800340e <__swbuf_r+0x64>

08003424 <__swsetup_r>:
 8003424:	b538      	push	{r3, r4, r5, lr}
 8003426:	4b2a      	ldr	r3, [pc, #168]	; (80034d0 <__swsetup_r+0xac>)
 8003428:	4605      	mov	r5, r0
 800342a:	6818      	ldr	r0, [r3, #0]
 800342c:	460c      	mov	r4, r1
 800342e:	b118      	cbz	r0, 8003438 <__swsetup_r+0x14>
 8003430:	6a03      	ldr	r3, [r0, #32]
 8003432:	b90b      	cbnz	r3, 8003438 <__swsetup_r+0x14>
 8003434:	f7ff fed2 	bl	80031dc <__sinit>
 8003438:	89a3      	ldrh	r3, [r4, #12]
 800343a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800343e:	0718      	lsls	r0, r3, #28
 8003440:	d422      	bmi.n	8003488 <__swsetup_r+0x64>
 8003442:	06d9      	lsls	r1, r3, #27
 8003444:	d407      	bmi.n	8003456 <__swsetup_r+0x32>
 8003446:	2309      	movs	r3, #9
 8003448:	602b      	str	r3, [r5, #0]
 800344a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800344e:	81a3      	strh	r3, [r4, #12]
 8003450:	f04f 30ff 	mov.w	r0, #4294967295
 8003454:	e034      	b.n	80034c0 <__swsetup_r+0x9c>
 8003456:	0758      	lsls	r0, r3, #29
 8003458:	d512      	bpl.n	8003480 <__swsetup_r+0x5c>
 800345a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800345c:	b141      	cbz	r1, 8003470 <__swsetup_r+0x4c>
 800345e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003462:	4299      	cmp	r1, r3
 8003464:	d002      	beq.n	800346c <__swsetup_r+0x48>
 8003466:	4628      	mov	r0, r5
 8003468:	f000 f8b0 	bl	80035cc <_free_r>
 800346c:	2300      	movs	r3, #0
 800346e:	6363      	str	r3, [r4, #52]	; 0x34
 8003470:	89a3      	ldrh	r3, [r4, #12]
 8003472:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003476:	81a3      	strh	r3, [r4, #12]
 8003478:	2300      	movs	r3, #0
 800347a:	6063      	str	r3, [r4, #4]
 800347c:	6923      	ldr	r3, [r4, #16]
 800347e:	6023      	str	r3, [r4, #0]
 8003480:	89a3      	ldrh	r3, [r4, #12]
 8003482:	f043 0308 	orr.w	r3, r3, #8
 8003486:	81a3      	strh	r3, [r4, #12]
 8003488:	6923      	ldr	r3, [r4, #16]
 800348a:	b94b      	cbnz	r3, 80034a0 <__swsetup_r+0x7c>
 800348c:	89a3      	ldrh	r3, [r4, #12]
 800348e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003492:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003496:	d003      	beq.n	80034a0 <__swsetup_r+0x7c>
 8003498:	4621      	mov	r1, r4
 800349a:	4628      	mov	r0, r5
 800349c:	f000 fd36 	bl	8003f0c <__smakebuf_r>
 80034a0:	89a0      	ldrh	r0, [r4, #12]
 80034a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80034a6:	f010 0301 	ands.w	r3, r0, #1
 80034aa:	d00a      	beq.n	80034c2 <__swsetup_r+0x9e>
 80034ac:	2300      	movs	r3, #0
 80034ae:	60a3      	str	r3, [r4, #8]
 80034b0:	6963      	ldr	r3, [r4, #20]
 80034b2:	425b      	negs	r3, r3
 80034b4:	61a3      	str	r3, [r4, #24]
 80034b6:	6923      	ldr	r3, [r4, #16]
 80034b8:	b943      	cbnz	r3, 80034cc <__swsetup_r+0xa8>
 80034ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80034be:	d1c4      	bne.n	800344a <__swsetup_r+0x26>
 80034c0:	bd38      	pop	{r3, r4, r5, pc}
 80034c2:	0781      	lsls	r1, r0, #30
 80034c4:	bf58      	it	pl
 80034c6:	6963      	ldrpl	r3, [r4, #20]
 80034c8:	60a3      	str	r3, [r4, #8]
 80034ca:	e7f4      	b.n	80034b6 <__swsetup_r+0x92>
 80034cc:	2000      	movs	r0, #0
 80034ce:	e7f7      	b.n	80034c0 <__swsetup_r+0x9c>
 80034d0:	20000064 	.word	0x20000064

080034d4 <memset>:
 80034d4:	4402      	add	r2, r0
 80034d6:	4603      	mov	r3, r0
 80034d8:	4293      	cmp	r3, r2
 80034da:	d100      	bne.n	80034de <memset+0xa>
 80034dc:	4770      	bx	lr
 80034de:	f803 1b01 	strb.w	r1, [r3], #1
 80034e2:	e7f9      	b.n	80034d8 <memset+0x4>

080034e4 <_close_r>:
 80034e4:	b538      	push	{r3, r4, r5, lr}
 80034e6:	4d06      	ldr	r5, [pc, #24]	; (8003500 <_close_r+0x1c>)
 80034e8:	2300      	movs	r3, #0
 80034ea:	4604      	mov	r4, r0
 80034ec:	4608      	mov	r0, r1
 80034ee:	602b      	str	r3, [r5, #0]
 80034f0:	f7fd fb33 	bl	8000b5a <_close>
 80034f4:	1c43      	adds	r3, r0, #1
 80034f6:	d102      	bne.n	80034fe <_close_r+0x1a>
 80034f8:	682b      	ldr	r3, [r5, #0]
 80034fa:	b103      	cbz	r3, 80034fe <_close_r+0x1a>
 80034fc:	6023      	str	r3, [r4, #0]
 80034fe:	bd38      	pop	{r3, r4, r5, pc}
 8003500:	20000248 	.word	0x20000248

08003504 <_lseek_r>:
 8003504:	b538      	push	{r3, r4, r5, lr}
 8003506:	4d07      	ldr	r5, [pc, #28]	; (8003524 <_lseek_r+0x20>)
 8003508:	4604      	mov	r4, r0
 800350a:	4608      	mov	r0, r1
 800350c:	4611      	mov	r1, r2
 800350e:	2200      	movs	r2, #0
 8003510:	602a      	str	r2, [r5, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	f7fd fb48 	bl	8000ba8 <_lseek>
 8003518:	1c43      	adds	r3, r0, #1
 800351a:	d102      	bne.n	8003522 <_lseek_r+0x1e>
 800351c:	682b      	ldr	r3, [r5, #0]
 800351e:	b103      	cbz	r3, 8003522 <_lseek_r+0x1e>
 8003520:	6023      	str	r3, [r4, #0]
 8003522:	bd38      	pop	{r3, r4, r5, pc}
 8003524:	20000248 	.word	0x20000248

08003528 <_read_r>:
 8003528:	b538      	push	{r3, r4, r5, lr}
 800352a:	4d07      	ldr	r5, [pc, #28]	; (8003548 <_read_r+0x20>)
 800352c:	4604      	mov	r4, r0
 800352e:	4608      	mov	r0, r1
 8003530:	4611      	mov	r1, r2
 8003532:	2200      	movs	r2, #0
 8003534:	602a      	str	r2, [r5, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	f7fd faf2 	bl	8000b20 <_read>
 800353c:	1c43      	adds	r3, r0, #1
 800353e:	d102      	bne.n	8003546 <_read_r+0x1e>
 8003540:	682b      	ldr	r3, [r5, #0]
 8003542:	b103      	cbz	r3, 8003546 <_read_r+0x1e>
 8003544:	6023      	str	r3, [r4, #0]
 8003546:	bd38      	pop	{r3, r4, r5, pc}
 8003548:	20000248 	.word	0x20000248

0800354c <_write_r>:
 800354c:	b538      	push	{r3, r4, r5, lr}
 800354e:	4d07      	ldr	r5, [pc, #28]	; (800356c <_write_r+0x20>)
 8003550:	4604      	mov	r4, r0
 8003552:	4608      	mov	r0, r1
 8003554:	4611      	mov	r1, r2
 8003556:	2200      	movs	r2, #0
 8003558:	602a      	str	r2, [r5, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	f7fd f816 	bl	800058c <_write>
 8003560:	1c43      	adds	r3, r0, #1
 8003562:	d102      	bne.n	800356a <_write_r+0x1e>
 8003564:	682b      	ldr	r3, [r5, #0]
 8003566:	b103      	cbz	r3, 800356a <_write_r+0x1e>
 8003568:	6023      	str	r3, [r4, #0]
 800356a:	bd38      	pop	{r3, r4, r5, pc}
 800356c:	20000248 	.word	0x20000248

08003570 <__errno>:
 8003570:	4b01      	ldr	r3, [pc, #4]	; (8003578 <__errno+0x8>)
 8003572:	6818      	ldr	r0, [r3, #0]
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	20000064 	.word	0x20000064

0800357c <__libc_init_array>:
 800357c:	b570      	push	{r4, r5, r6, lr}
 800357e:	4d0d      	ldr	r5, [pc, #52]	; (80035b4 <__libc_init_array+0x38>)
 8003580:	4c0d      	ldr	r4, [pc, #52]	; (80035b8 <__libc_init_array+0x3c>)
 8003582:	1b64      	subs	r4, r4, r5
 8003584:	10a4      	asrs	r4, r4, #2
 8003586:	2600      	movs	r6, #0
 8003588:	42a6      	cmp	r6, r4
 800358a:	d109      	bne.n	80035a0 <__libc_init_array+0x24>
 800358c:	4d0b      	ldr	r5, [pc, #44]	; (80035bc <__libc_init_array+0x40>)
 800358e:	4c0c      	ldr	r4, [pc, #48]	; (80035c0 <__libc_init_array+0x44>)
 8003590:	f000 fd2a 	bl	8003fe8 <_init>
 8003594:	1b64      	subs	r4, r4, r5
 8003596:	10a4      	asrs	r4, r4, #2
 8003598:	2600      	movs	r6, #0
 800359a:	42a6      	cmp	r6, r4
 800359c:	d105      	bne.n	80035aa <__libc_init_array+0x2e>
 800359e:	bd70      	pop	{r4, r5, r6, pc}
 80035a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80035a4:	4798      	blx	r3
 80035a6:	3601      	adds	r6, #1
 80035a8:	e7ee      	b.n	8003588 <__libc_init_array+0xc>
 80035aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80035ae:	4798      	blx	r3
 80035b0:	3601      	adds	r6, #1
 80035b2:	e7f2      	b.n	800359a <__libc_init_array+0x1e>
 80035b4:	0800408c 	.word	0x0800408c
 80035b8:	0800408c 	.word	0x0800408c
 80035bc:	0800408c 	.word	0x0800408c
 80035c0:	08004090 	.word	0x08004090

080035c4 <__retarget_lock_init_recursive>:
 80035c4:	4770      	bx	lr

080035c6 <__retarget_lock_acquire_recursive>:
 80035c6:	4770      	bx	lr

080035c8 <__retarget_lock_release_recursive>:
 80035c8:	4770      	bx	lr
	...

080035cc <_free_r>:
 80035cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80035ce:	2900      	cmp	r1, #0
 80035d0:	d044      	beq.n	800365c <_free_r+0x90>
 80035d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035d6:	9001      	str	r0, [sp, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f1a1 0404 	sub.w	r4, r1, #4
 80035de:	bfb8      	it	lt
 80035e0:	18e4      	addlt	r4, r4, r3
 80035e2:	f000 f8df 	bl	80037a4 <__malloc_lock>
 80035e6:	4a1e      	ldr	r2, [pc, #120]	; (8003660 <_free_r+0x94>)
 80035e8:	9801      	ldr	r0, [sp, #4]
 80035ea:	6813      	ldr	r3, [r2, #0]
 80035ec:	b933      	cbnz	r3, 80035fc <_free_r+0x30>
 80035ee:	6063      	str	r3, [r4, #4]
 80035f0:	6014      	str	r4, [r2, #0]
 80035f2:	b003      	add	sp, #12
 80035f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80035f8:	f000 b8da 	b.w	80037b0 <__malloc_unlock>
 80035fc:	42a3      	cmp	r3, r4
 80035fe:	d908      	bls.n	8003612 <_free_r+0x46>
 8003600:	6825      	ldr	r5, [r4, #0]
 8003602:	1961      	adds	r1, r4, r5
 8003604:	428b      	cmp	r3, r1
 8003606:	bf01      	itttt	eq
 8003608:	6819      	ldreq	r1, [r3, #0]
 800360a:	685b      	ldreq	r3, [r3, #4]
 800360c:	1949      	addeq	r1, r1, r5
 800360e:	6021      	streq	r1, [r4, #0]
 8003610:	e7ed      	b.n	80035ee <_free_r+0x22>
 8003612:	461a      	mov	r2, r3
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	b10b      	cbz	r3, 800361c <_free_r+0x50>
 8003618:	42a3      	cmp	r3, r4
 800361a:	d9fa      	bls.n	8003612 <_free_r+0x46>
 800361c:	6811      	ldr	r1, [r2, #0]
 800361e:	1855      	adds	r5, r2, r1
 8003620:	42a5      	cmp	r5, r4
 8003622:	d10b      	bne.n	800363c <_free_r+0x70>
 8003624:	6824      	ldr	r4, [r4, #0]
 8003626:	4421      	add	r1, r4
 8003628:	1854      	adds	r4, r2, r1
 800362a:	42a3      	cmp	r3, r4
 800362c:	6011      	str	r1, [r2, #0]
 800362e:	d1e0      	bne.n	80035f2 <_free_r+0x26>
 8003630:	681c      	ldr	r4, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	6053      	str	r3, [r2, #4]
 8003636:	440c      	add	r4, r1
 8003638:	6014      	str	r4, [r2, #0]
 800363a:	e7da      	b.n	80035f2 <_free_r+0x26>
 800363c:	d902      	bls.n	8003644 <_free_r+0x78>
 800363e:	230c      	movs	r3, #12
 8003640:	6003      	str	r3, [r0, #0]
 8003642:	e7d6      	b.n	80035f2 <_free_r+0x26>
 8003644:	6825      	ldr	r5, [r4, #0]
 8003646:	1961      	adds	r1, r4, r5
 8003648:	428b      	cmp	r3, r1
 800364a:	bf04      	itt	eq
 800364c:	6819      	ldreq	r1, [r3, #0]
 800364e:	685b      	ldreq	r3, [r3, #4]
 8003650:	6063      	str	r3, [r4, #4]
 8003652:	bf04      	itt	eq
 8003654:	1949      	addeq	r1, r1, r5
 8003656:	6021      	streq	r1, [r4, #0]
 8003658:	6054      	str	r4, [r2, #4]
 800365a:	e7ca      	b.n	80035f2 <_free_r+0x26>
 800365c:	b003      	add	sp, #12
 800365e:	bd30      	pop	{r4, r5, pc}
 8003660:	20000250 	.word	0x20000250

08003664 <sbrk_aligned>:
 8003664:	b570      	push	{r4, r5, r6, lr}
 8003666:	4e0e      	ldr	r6, [pc, #56]	; (80036a0 <sbrk_aligned+0x3c>)
 8003668:	460c      	mov	r4, r1
 800366a:	6831      	ldr	r1, [r6, #0]
 800366c:	4605      	mov	r5, r0
 800366e:	b911      	cbnz	r1, 8003676 <sbrk_aligned+0x12>
 8003670:	f000 fcaa 	bl	8003fc8 <_sbrk_r>
 8003674:	6030      	str	r0, [r6, #0]
 8003676:	4621      	mov	r1, r4
 8003678:	4628      	mov	r0, r5
 800367a:	f000 fca5 	bl	8003fc8 <_sbrk_r>
 800367e:	1c43      	adds	r3, r0, #1
 8003680:	d00a      	beq.n	8003698 <sbrk_aligned+0x34>
 8003682:	1cc4      	adds	r4, r0, #3
 8003684:	f024 0403 	bic.w	r4, r4, #3
 8003688:	42a0      	cmp	r0, r4
 800368a:	d007      	beq.n	800369c <sbrk_aligned+0x38>
 800368c:	1a21      	subs	r1, r4, r0
 800368e:	4628      	mov	r0, r5
 8003690:	f000 fc9a 	bl	8003fc8 <_sbrk_r>
 8003694:	3001      	adds	r0, #1
 8003696:	d101      	bne.n	800369c <sbrk_aligned+0x38>
 8003698:	f04f 34ff 	mov.w	r4, #4294967295
 800369c:	4620      	mov	r0, r4
 800369e:	bd70      	pop	{r4, r5, r6, pc}
 80036a0:	20000254 	.word	0x20000254

080036a4 <_malloc_r>:
 80036a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036a8:	1ccd      	adds	r5, r1, #3
 80036aa:	f025 0503 	bic.w	r5, r5, #3
 80036ae:	3508      	adds	r5, #8
 80036b0:	2d0c      	cmp	r5, #12
 80036b2:	bf38      	it	cc
 80036b4:	250c      	movcc	r5, #12
 80036b6:	2d00      	cmp	r5, #0
 80036b8:	4607      	mov	r7, r0
 80036ba:	db01      	blt.n	80036c0 <_malloc_r+0x1c>
 80036bc:	42a9      	cmp	r1, r5
 80036be:	d905      	bls.n	80036cc <_malloc_r+0x28>
 80036c0:	230c      	movs	r3, #12
 80036c2:	603b      	str	r3, [r7, #0]
 80036c4:	2600      	movs	r6, #0
 80036c6:	4630      	mov	r0, r6
 80036c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80037a0 <_malloc_r+0xfc>
 80036d0:	f000 f868 	bl	80037a4 <__malloc_lock>
 80036d4:	f8d8 3000 	ldr.w	r3, [r8]
 80036d8:	461c      	mov	r4, r3
 80036da:	bb5c      	cbnz	r4, 8003734 <_malloc_r+0x90>
 80036dc:	4629      	mov	r1, r5
 80036de:	4638      	mov	r0, r7
 80036e0:	f7ff ffc0 	bl	8003664 <sbrk_aligned>
 80036e4:	1c43      	adds	r3, r0, #1
 80036e6:	4604      	mov	r4, r0
 80036e8:	d155      	bne.n	8003796 <_malloc_r+0xf2>
 80036ea:	f8d8 4000 	ldr.w	r4, [r8]
 80036ee:	4626      	mov	r6, r4
 80036f0:	2e00      	cmp	r6, #0
 80036f2:	d145      	bne.n	8003780 <_malloc_r+0xdc>
 80036f4:	2c00      	cmp	r4, #0
 80036f6:	d048      	beq.n	800378a <_malloc_r+0xe6>
 80036f8:	6823      	ldr	r3, [r4, #0]
 80036fa:	4631      	mov	r1, r6
 80036fc:	4638      	mov	r0, r7
 80036fe:	eb04 0903 	add.w	r9, r4, r3
 8003702:	f000 fc61 	bl	8003fc8 <_sbrk_r>
 8003706:	4581      	cmp	r9, r0
 8003708:	d13f      	bne.n	800378a <_malloc_r+0xe6>
 800370a:	6821      	ldr	r1, [r4, #0]
 800370c:	1a6d      	subs	r5, r5, r1
 800370e:	4629      	mov	r1, r5
 8003710:	4638      	mov	r0, r7
 8003712:	f7ff ffa7 	bl	8003664 <sbrk_aligned>
 8003716:	3001      	adds	r0, #1
 8003718:	d037      	beq.n	800378a <_malloc_r+0xe6>
 800371a:	6823      	ldr	r3, [r4, #0]
 800371c:	442b      	add	r3, r5
 800371e:	6023      	str	r3, [r4, #0]
 8003720:	f8d8 3000 	ldr.w	r3, [r8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d038      	beq.n	800379a <_malloc_r+0xf6>
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	42a2      	cmp	r2, r4
 800372c:	d12b      	bne.n	8003786 <_malloc_r+0xe2>
 800372e:	2200      	movs	r2, #0
 8003730:	605a      	str	r2, [r3, #4]
 8003732:	e00f      	b.n	8003754 <_malloc_r+0xb0>
 8003734:	6822      	ldr	r2, [r4, #0]
 8003736:	1b52      	subs	r2, r2, r5
 8003738:	d41f      	bmi.n	800377a <_malloc_r+0xd6>
 800373a:	2a0b      	cmp	r2, #11
 800373c:	d917      	bls.n	800376e <_malloc_r+0xca>
 800373e:	1961      	adds	r1, r4, r5
 8003740:	42a3      	cmp	r3, r4
 8003742:	6025      	str	r5, [r4, #0]
 8003744:	bf18      	it	ne
 8003746:	6059      	strne	r1, [r3, #4]
 8003748:	6863      	ldr	r3, [r4, #4]
 800374a:	bf08      	it	eq
 800374c:	f8c8 1000 	streq.w	r1, [r8]
 8003750:	5162      	str	r2, [r4, r5]
 8003752:	604b      	str	r3, [r1, #4]
 8003754:	4638      	mov	r0, r7
 8003756:	f104 060b 	add.w	r6, r4, #11
 800375a:	f000 f829 	bl	80037b0 <__malloc_unlock>
 800375e:	f026 0607 	bic.w	r6, r6, #7
 8003762:	1d23      	adds	r3, r4, #4
 8003764:	1af2      	subs	r2, r6, r3
 8003766:	d0ae      	beq.n	80036c6 <_malloc_r+0x22>
 8003768:	1b9b      	subs	r3, r3, r6
 800376a:	50a3      	str	r3, [r4, r2]
 800376c:	e7ab      	b.n	80036c6 <_malloc_r+0x22>
 800376e:	42a3      	cmp	r3, r4
 8003770:	6862      	ldr	r2, [r4, #4]
 8003772:	d1dd      	bne.n	8003730 <_malloc_r+0x8c>
 8003774:	f8c8 2000 	str.w	r2, [r8]
 8003778:	e7ec      	b.n	8003754 <_malloc_r+0xb0>
 800377a:	4623      	mov	r3, r4
 800377c:	6864      	ldr	r4, [r4, #4]
 800377e:	e7ac      	b.n	80036da <_malloc_r+0x36>
 8003780:	4634      	mov	r4, r6
 8003782:	6876      	ldr	r6, [r6, #4]
 8003784:	e7b4      	b.n	80036f0 <_malloc_r+0x4c>
 8003786:	4613      	mov	r3, r2
 8003788:	e7cc      	b.n	8003724 <_malloc_r+0x80>
 800378a:	230c      	movs	r3, #12
 800378c:	603b      	str	r3, [r7, #0]
 800378e:	4638      	mov	r0, r7
 8003790:	f000 f80e 	bl	80037b0 <__malloc_unlock>
 8003794:	e797      	b.n	80036c6 <_malloc_r+0x22>
 8003796:	6025      	str	r5, [r4, #0]
 8003798:	e7dc      	b.n	8003754 <_malloc_r+0xb0>
 800379a:	605b      	str	r3, [r3, #4]
 800379c:	deff      	udf	#255	; 0xff
 800379e:	bf00      	nop
 80037a0:	20000250 	.word	0x20000250

080037a4 <__malloc_lock>:
 80037a4:	4801      	ldr	r0, [pc, #4]	; (80037ac <__malloc_lock+0x8>)
 80037a6:	f7ff bf0e 	b.w	80035c6 <__retarget_lock_acquire_recursive>
 80037aa:	bf00      	nop
 80037ac:	2000024c 	.word	0x2000024c

080037b0 <__malloc_unlock>:
 80037b0:	4801      	ldr	r0, [pc, #4]	; (80037b8 <__malloc_unlock+0x8>)
 80037b2:	f7ff bf09 	b.w	80035c8 <__retarget_lock_release_recursive>
 80037b6:	bf00      	nop
 80037b8:	2000024c 	.word	0x2000024c

080037bc <__sfputc_r>:
 80037bc:	6893      	ldr	r3, [r2, #8]
 80037be:	3b01      	subs	r3, #1
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	b410      	push	{r4}
 80037c4:	6093      	str	r3, [r2, #8]
 80037c6:	da08      	bge.n	80037da <__sfputc_r+0x1e>
 80037c8:	6994      	ldr	r4, [r2, #24]
 80037ca:	42a3      	cmp	r3, r4
 80037cc:	db01      	blt.n	80037d2 <__sfputc_r+0x16>
 80037ce:	290a      	cmp	r1, #10
 80037d0:	d103      	bne.n	80037da <__sfputc_r+0x1e>
 80037d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037d6:	f7ff bde8 	b.w	80033aa <__swbuf_r>
 80037da:	6813      	ldr	r3, [r2, #0]
 80037dc:	1c58      	adds	r0, r3, #1
 80037de:	6010      	str	r0, [r2, #0]
 80037e0:	7019      	strb	r1, [r3, #0]
 80037e2:	4608      	mov	r0, r1
 80037e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <__sfputs_r>:
 80037ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ec:	4606      	mov	r6, r0
 80037ee:	460f      	mov	r7, r1
 80037f0:	4614      	mov	r4, r2
 80037f2:	18d5      	adds	r5, r2, r3
 80037f4:	42ac      	cmp	r4, r5
 80037f6:	d101      	bne.n	80037fc <__sfputs_r+0x12>
 80037f8:	2000      	movs	r0, #0
 80037fa:	e007      	b.n	800380c <__sfputs_r+0x22>
 80037fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003800:	463a      	mov	r2, r7
 8003802:	4630      	mov	r0, r6
 8003804:	f7ff ffda 	bl	80037bc <__sfputc_r>
 8003808:	1c43      	adds	r3, r0, #1
 800380a:	d1f3      	bne.n	80037f4 <__sfputs_r+0xa>
 800380c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003810 <_vfiprintf_r>:
 8003810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003814:	460d      	mov	r5, r1
 8003816:	b09d      	sub	sp, #116	; 0x74
 8003818:	4614      	mov	r4, r2
 800381a:	4698      	mov	r8, r3
 800381c:	4606      	mov	r6, r0
 800381e:	b118      	cbz	r0, 8003828 <_vfiprintf_r+0x18>
 8003820:	6a03      	ldr	r3, [r0, #32]
 8003822:	b90b      	cbnz	r3, 8003828 <_vfiprintf_r+0x18>
 8003824:	f7ff fcda 	bl	80031dc <__sinit>
 8003828:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800382a:	07d9      	lsls	r1, r3, #31
 800382c:	d405      	bmi.n	800383a <_vfiprintf_r+0x2a>
 800382e:	89ab      	ldrh	r3, [r5, #12]
 8003830:	059a      	lsls	r2, r3, #22
 8003832:	d402      	bmi.n	800383a <_vfiprintf_r+0x2a>
 8003834:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003836:	f7ff fec6 	bl	80035c6 <__retarget_lock_acquire_recursive>
 800383a:	89ab      	ldrh	r3, [r5, #12]
 800383c:	071b      	lsls	r3, r3, #28
 800383e:	d501      	bpl.n	8003844 <_vfiprintf_r+0x34>
 8003840:	692b      	ldr	r3, [r5, #16]
 8003842:	b99b      	cbnz	r3, 800386c <_vfiprintf_r+0x5c>
 8003844:	4629      	mov	r1, r5
 8003846:	4630      	mov	r0, r6
 8003848:	f7ff fdec 	bl	8003424 <__swsetup_r>
 800384c:	b170      	cbz	r0, 800386c <_vfiprintf_r+0x5c>
 800384e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003850:	07dc      	lsls	r4, r3, #31
 8003852:	d504      	bpl.n	800385e <_vfiprintf_r+0x4e>
 8003854:	f04f 30ff 	mov.w	r0, #4294967295
 8003858:	b01d      	add	sp, #116	; 0x74
 800385a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800385e:	89ab      	ldrh	r3, [r5, #12]
 8003860:	0598      	lsls	r0, r3, #22
 8003862:	d4f7      	bmi.n	8003854 <_vfiprintf_r+0x44>
 8003864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003866:	f7ff feaf 	bl	80035c8 <__retarget_lock_release_recursive>
 800386a:	e7f3      	b.n	8003854 <_vfiprintf_r+0x44>
 800386c:	2300      	movs	r3, #0
 800386e:	9309      	str	r3, [sp, #36]	; 0x24
 8003870:	2320      	movs	r3, #32
 8003872:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003876:	f8cd 800c 	str.w	r8, [sp, #12]
 800387a:	2330      	movs	r3, #48	; 0x30
 800387c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003a30 <_vfiprintf_r+0x220>
 8003880:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003884:	f04f 0901 	mov.w	r9, #1
 8003888:	4623      	mov	r3, r4
 800388a:	469a      	mov	sl, r3
 800388c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003890:	b10a      	cbz	r2, 8003896 <_vfiprintf_r+0x86>
 8003892:	2a25      	cmp	r2, #37	; 0x25
 8003894:	d1f9      	bne.n	800388a <_vfiprintf_r+0x7a>
 8003896:	ebba 0b04 	subs.w	fp, sl, r4
 800389a:	d00b      	beq.n	80038b4 <_vfiprintf_r+0xa4>
 800389c:	465b      	mov	r3, fp
 800389e:	4622      	mov	r2, r4
 80038a0:	4629      	mov	r1, r5
 80038a2:	4630      	mov	r0, r6
 80038a4:	f7ff ffa1 	bl	80037ea <__sfputs_r>
 80038a8:	3001      	adds	r0, #1
 80038aa:	f000 80a9 	beq.w	8003a00 <_vfiprintf_r+0x1f0>
 80038ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038b0:	445a      	add	r2, fp
 80038b2:	9209      	str	r2, [sp, #36]	; 0x24
 80038b4:	f89a 3000 	ldrb.w	r3, [sl]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 80a1 	beq.w	8003a00 <_vfiprintf_r+0x1f0>
 80038be:	2300      	movs	r3, #0
 80038c0:	f04f 32ff 	mov.w	r2, #4294967295
 80038c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80038c8:	f10a 0a01 	add.w	sl, sl, #1
 80038cc:	9304      	str	r3, [sp, #16]
 80038ce:	9307      	str	r3, [sp, #28]
 80038d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038d4:	931a      	str	r3, [sp, #104]	; 0x68
 80038d6:	4654      	mov	r4, sl
 80038d8:	2205      	movs	r2, #5
 80038da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038de:	4854      	ldr	r0, [pc, #336]	; (8003a30 <_vfiprintf_r+0x220>)
 80038e0:	f7fc fc86 	bl	80001f0 <memchr>
 80038e4:	9a04      	ldr	r2, [sp, #16]
 80038e6:	b9d8      	cbnz	r0, 8003920 <_vfiprintf_r+0x110>
 80038e8:	06d1      	lsls	r1, r2, #27
 80038ea:	bf44      	itt	mi
 80038ec:	2320      	movmi	r3, #32
 80038ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038f2:	0713      	lsls	r3, r2, #28
 80038f4:	bf44      	itt	mi
 80038f6:	232b      	movmi	r3, #43	; 0x2b
 80038f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038fc:	f89a 3000 	ldrb.w	r3, [sl]
 8003900:	2b2a      	cmp	r3, #42	; 0x2a
 8003902:	d015      	beq.n	8003930 <_vfiprintf_r+0x120>
 8003904:	9a07      	ldr	r2, [sp, #28]
 8003906:	4654      	mov	r4, sl
 8003908:	2000      	movs	r0, #0
 800390a:	f04f 0c0a 	mov.w	ip, #10
 800390e:	4621      	mov	r1, r4
 8003910:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003914:	3b30      	subs	r3, #48	; 0x30
 8003916:	2b09      	cmp	r3, #9
 8003918:	d94d      	bls.n	80039b6 <_vfiprintf_r+0x1a6>
 800391a:	b1b0      	cbz	r0, 800394a <_vfiprintf_r+0x13a>
 800391c:	9207      	str	r2, [sp, #28]
 800391e:	e014      	b.n	800394a <_vfiprintf_r+0x13a>
 8003920:	eba0 0308 	sub.w	r3, r0, r8
 8003924:	fa09 f303 	lsl.w	r3, r9, r3
 8003928:	4313      	orrs	r3, r2
 800392a:	9304      	str	r3, [sp, #16]
 800392c:	46a2      	mov	sl, r4
 800392e:	e7d2      	b.n	80038d6 <_vfiprintf_r+0xc6>
 8003930:	9b03      	ldr	r3, [sp, #12]
 8003932:	1d19      	adds	r1, r3, #4
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	9103      	str	r1, [sp, #12]
 8003938:	2b00      	cmp	r3, #0
 800393a:	bfbb      	ittet	lt
 800393c:	425b      	neglt	r3, r3
 800393e:	f042 0202 	orrlt.w	r2, r2, #2
 8003942:	9307      	strge	r3, [sp, #28]
 8003944:	9307      	strlt	r3, [sp, #28]
 8003946:	bfb8      	it	lt
 8003948:	9204      	strlt	r2, [sp, #16]
 800394a:	7823      	ldrb	r3, [r4, #0]
 800394c:	2b2e      	cmp	r3, #46	; 0x2e
 800394e:	d10c      	bne.n	800396a <_vfiprintf_r+0x15a>
 8003950:	7863      	ldrb	r3, [r4, #1]
 8003952:	2b2a      	cmp	r3, #42	; 0x2a
 8003954:	d134      	bne.n	80039c0 <_vfiprintf_r+0x1b0>
 8003956:	9b03      	ldr	r3, [sp, #12]
 8003958:	1d1a      	adds	r2, r3, #4
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	9203      	str	r2, [sp, #12]
 800395e:	2b00      	cmp	r3, #0
 8003960:	bfb8      	it	lt
 8003962:	f04f 33ff 	movlt.w	r3, #4294967295
 8003966:	3402      	adds	r4, #2
 8003968:	9305      	str	r3, [sp, #20]
 800396a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003a40 <_vfiprintf_r+0x230>
 800396e:	7821      	ldrb	r1, [r4, #0]
 8003970:	2203      	movs	r2, #3
 8003972:	4650      	mov	r0, sl
 8003974:	f7fc fc3c 	bl	80001f0 <memchr>
 8003978:	b138      	cbz	r0, 800398a <_vfiprintf_r+0x17a>
 800397a:	9b04      	ldr	r3, [sp, #16]
 800397c:	eba0 000a 	sub.w	r0, r0, sl
 8003980:	2240      	movs	r2, #64	; 0x40
 8003982:	4082      	lsls	r2, r0
 8003984:	4313      	orrs	r3, r2
 8003986:	3401      	adds	r4, #1
 8003988:	9304      	str	r3, [sp, #16]
 800398a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800398e:	4829      	ldr	r0, [pc, #164]	; (8003a34 <_vfiprintf_r+0x224>)
 8003990:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003994:	2206      	movs	r2, #6
 8003996:	f7fc fc2b 	bl	80001f0 <memchr>
 800399a:	2800      	cmp	r0, #0
 800399c:	d03f      	beq.n	8003a1e <_vfiprintf_r+0x20e>
 800399e:	4b26      	ldr	r3, [pc, #152]	; (8003a38 <_vfiprintf_r+0x228>)
 80039a0:	bb1b      	cbnz	r3, 80039ea <_vfiprintf_r+0x1da>
 80039a2:	9b03      	ldr	r3, [sp, #12]
 80039a4:	3307      	adds	r3, #7
 80039a6:	f023 0307 	bic.w	r3, r3, #7
 80039aa:	3308      	adds	r3, #8
 80039ac:	9303      	str	r3, [sp, #12]
 80039ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039b0:	443b      	add	r3, r7
 80039b2:	9309      	str	r3, [sp, #36]	; 0x24
 80039b4:	e768      	b.n	8003888 <_vfiprintf_r+0x78>
 80039b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80039ba:	460c      	mov	r4, r1
 80039bc:	2001      	movs	r0, #1
 80039be:	e7a6      	b.n	800390e <_vfiprintf_r+0xfe>
 80039c0:	2300      	movs	r3, #0
 80039c2:	3401      	adds	r4, #1
 80039c4:	9305      	str	r3, [sp, #20]
 80039c6:	4619      	mov	r1, r3
 80039c8:	f04f 0c0a 	mov.w	ip, #10
 80039cc:	4620      	mov	r0, r4
 80039ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039d2:	3a30      	subs	r2, #48	; 0x30
 80039d4:	2a09      	cmp	r2, #9
 80039d6:	d903      	bls.n	80039e0 <_vfiprintf_r+0x1d0>
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0c6      	beq.n	800396a <_vfiprintf_r+0x15a>
 80039dc:	9105      	str	r1, [sp, #20]
 80039de:	e7c4      	b.n	800396a <_vfiprintf_r+0x15a>
 80039e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80039e4:	4604      	mov	r4, r0
 80039e6:	2301      	movs	r3, #1
 80039e8:	e7f0      	b.n	80039cc <_vfiprintf_r+0x1bc>
 80039ea:	ab03      	add	r3, sp, #12
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	462a      	mov	r2, r5
 80039f0:	4b12      	ldr	r3, [pc, #72]	; (8003a3c <_vfiprintf_r+0x22c>)
 80039f2:	a904      	add	r1, sp, #16
 80039f4:	4630      	mov	r0, r6
 80039f6:	f3af 8000 	nop.w
 80039fa:	4607      	mov	r7, r0
 80039fc:	1c78      	adds	r0, r7, #1
 80039fe:	d1d6      	bne.n	80039ae <_vfiprintf_r+0x19e>
 8003a00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a02:	07d9      	lsls	r1, r3, #31
 8003a04:	d405      	bmi.n	8003a12 <_vfiprintf_r+0x202>
 8003a06:	89ab      	ldrh	r3, [r5, #12]
 8003a08:	059a      	lsls	r2, r3, #22
 8003a0a:	d402      	bmi.n	8003a12 <_vfiprintf_r+0x202>
 8003a0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a0e:	f7ff fddb 	bl	80035c8 <__retarget_lock_release_recursive>
 8003a12:	89ab      	ldrh	r3, [r5, #12]
 8003a14:	065b      	lsls	r3, r3, #25
 8003a16:	f53f af1d 	bmi.w	8003854 <_vfiprintf_r+0x44>
 8003a1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a1c:	e71c      	b.n	8003858 <_vfiprintf_r+0x48>
 8003a1e:	ab03      	add	r3, sp, #12
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	462a      	mov	r2, r5
 8003a24:	4b05      	ldr	r3, [pc, #20]	; (8003a3c <_vfiprintf_r+0x22c>)
 8003a26:	a904      	add	r1, sp, #16
 8003a28:	4630      	mov	r0, r6
 8003a2a:	f000 f879 	bl	8003b20 <_printf_i>
 8003a2e:	e7e4      	b.n	80039fa <_vfiprintf_r+0x1ea>
 8003a30:	08004050 	.word	0x08004050
 8003a34:	0800405a 	.word	0x0800405a
 8003a38:	00000000 	.word	0x00000000
 8003a3c:	080037eb 	.word	0x080037eb
 8003a40:	08004056 	.word	0x08004056

08003a44 <_printf_common>:
 8003a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a48:	4616      	mov	r6, r2
 8003a4a:	4699      	mov	r9, r3
 8003a4c:	688a      	ldr	r2, [r1, #8]
 8003a4e:	690b      	ldr	r3, [r1, #16]
 8003a50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a54:	4293      	cmp	r3, r2
 8003a56:	bfb8      	it	lt
 8003a58:	4613      	movlt	r3, r2
 8003a5a:	6033      	str	r3, [r6, #0]
 8003a5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a60:	4607      	mov	r7, r0
 8003a62:	460c      	mov	r4, r1
 8003a64:	b10a      	cbz	r2, 8003a6a <_printf_common+0x26>
 8003a66:	3301      	adds	r3, #1
 8003a68:	6033      	str	r3, [r6, #0]
 8003a6a:	6823      	ldr	r3, [r4, #0]
 8003a6c:	0699      	lsls	r1, r3, #26
 8003a6e:	bf42      	ittt	mi
 8003a70:	6833      	ldrmi	r3, [r6, #0]
 8003a72:	3302      	addmi	r3, #2
 8003a74:	6033      	strmi	r3, [r6, #0]
 8003a76:	6825      	ldr	r5, [r4, #0]
 8003a78:	f015 0506 	ands.w	r5, r5, #6
 8003a7c:	d106      	bne.n	8003a8c <_printf_common+0x48>
 8003a7e:	f104 0a19 	add.w	sl, r4, #25
 8003a82:	68e3      	ldr	r3, [r4, #12]
 8003a84:	6832      	ldr	r2, [r6, #0]
 8003a86:	1a9b      	subs	r3, r3, r2
 8003a88:	42ab      	cmp	r3, r5
 8003a8a:	dc26      	bgt.n	8003ada <_printf_common+0x96>
 8003a8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a90:	1e13      	subs	r3, r2, #0
 8003a92:	6822      	ldr	r2, [r4, #0]
 8003a94:	bf18      	it	ne
 8003a96:	2301      	movne	r3, #1
 8003a98:	0692      	lsls	r2, r2, #26
 8003a9a:	d42b      	bmi.n	8003af4 <_printf_common+0xb0>
 8003a9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003aa0:	4649      	mov	r1, r9
 8003aa2:	4638      	mov	r0, r7
 8003aa4:	47c0      	blx	r8
 8003aa6:	3001      	adds	r0, #1
 8003aa8:	d01e      	beq.n	8003ae8 <_printf_common+0xa4>
 8003aaa:	6823      	ldr	r3, [r4, #0]
 8003aac:	6922      	ldr	r2, [r4, #16]
 8003aae:	f003 0306 	and.w	r3, r3, #6
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	bf02      	ittt	eq
 8003ab6:	68e5      	ldreq	r5, [r4, #12]
 8003ab8:	6833      	ldreq	r3, [r6, #0]
 8003aba:	1aed      	subeq	r5, r5, r3
 8003abc:	68a3      	ldr	r3, [r4, #8]
 8003abe:	bf0c      	ite	eq
 8003ac0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ac4:	2500      	movne	r5, #0
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	bfc4      	itt	gt
 8003aca:	1a9b      	subgt	r3, r3, r2
 8003acc:	18ed      	addgt	r5, r5, r3
 8003ace:	2600      	movs	r6, #0
 8003ad0:	341a      	adds	r4, #26
 8003ad2:	42b5      	cmp	r5, r6
 8003ad4:	d11a      	bne.n	8003b0c <_printf_common+0xc8>
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	e008      	b.n	8003aec <_printf_common+0xa8>
 8003ada:	2301      	movs	r3, #1
 8003adc:	4652      	mov	r2, sl
 8003ade:	4649      	mov	r1, r9
 8003ae0:	4638      	mov	r0, r7
 8003ae2:	47c0      	blx	r8
 8003ae4:	3001      	adds	r0, #1
 8003ae6:	d103      	bne.n	8003af0 <_printf_common+0xac>
 8003ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8003aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003af0:	3501      	adds	r5, #1
 8003af2:	e7c6      	b.n	8003a82 <_printf_common+0x3e>
 8003af4:	18e1      	adds	r1, r4, r3
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	2030      	movs	r0, #48	; 0x30
 8003afa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003afe:	4422      	add	r2, r4
 8003b00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b08:	3302      	adds	r3, #2
 8003b0a:	e7c7      	b.n	8003a9c <_printf_common+0x58>
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	4622      	mov	r2, r4
 8003b10:	4649      	mov	r1, r9
 8003b12:	4638      	mov	r0, r7
 8003b14:	47c0      	blx	r8
 8003b16:	3001      	adds	r0, #1
 8003b18:	d0e6      	beq.n	8003ae8 <_printf_common+0xa4>
 8003b1a:	3601      	adds	r6, #1
 8003b1c:	e7d9      	b.n	8003ad2 <_printf_common+0x8e>
	...

08003b20 <_printf_i>:
 8003b20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b24:	7e0f      	ldrb	r7, [r1, #24]
 8003b26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b28:	2f78      	cmp	r7, #120	; 0x78
 8003b2a:	4691      	mov	r9, r2
 8003b2c:	4680      	mov	r8, r0
 8003b2e:	460c      	mov	r4, r1
 8003b30:	469a      	mov	sl, r3
 8003b32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b36:	d807      	bhi.n	8003b48 <_printf_i+0x28>
 8003b38:	2f62      	cmp	r7, #98	; 0x62
 8003b3a:	d80a      	bhi.n	8003b52 <_printf_i+0x32>
 8003b3c:	2f00      	cmp	r7, #0
 8003b3e:	f000 80d4 	beq.w	8003cea <_printf_i+0x1ca>
 8003b42:	2f58      	cmp	r7, #88	; 0x58
 8003b44:	f000 80c0 	beq.w	8003cc8 <_printf_i+0x1a8>
 8003b48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b50:	e03a      	b.n	8003bc8 <_printf_i+0xa8>
 8003b52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b56:	2b15      	cmp	r3, #21
 8003b58:	d8f6      	bhi.n	8003b48 <_printf_i+0x28>
 8003b5a:	a101      	add	r1, pc, #4	; (adr r1, 8003b60 <_printf_i+0x40>)
 8003b5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b60:	08003bb9 	.word	0x08003bb9
 8003b64:	08003bcd 	.word	0x08003bcd
 8003b68:	08003b49 	.word	0x08003b49
 8003b6c:	08003b49 	.word	0x08003b49
 8003b70:	08003b49 	.word	0x08003b49
 8003b74:	08003b49 	.word	0x08003b49
 8003b78:	08003bcd 	.word	0x08003bcd
 8003b7c:	08003b49 	.word	0x08003b49
 8003b80:	08003b49 	.word	0x08003b49
 8003b84:	08003b49 	.word	0x08003b49
 8003b88:	08003b49 	.word	0x08003b49
 8003b8c:	08003cd1 	.word	0x08003cd1
 8003b90:	08003bf9 	.word	0x08003bf9
 8003b94:	08003c8b 	.word	0x08003c8b
 8003b98:	08003b49 	.word	0x08003b49
 8003b9c:	08003b49 	.word	0x08003b49
 8003ba0:	08003cf3 	.word	0x08003cf3
 8003ba4:	08003b49 	.word	0x08003b49
 8003ba8:	08003bf9 	.word	0x08003bf9
 8003bac:	08003b49 	.word	0x08003b49
 8003bb0:	08003b49 	.word	0x08003b49
 8003bb4:	08003c93 	.word	0x08003c93
 8003bb8:	682b      	ldr	r3, [r5, #0]
 8003bba:	1d1a      	adds	r2, r3, #4
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	602a      	str	r2, [r5, #0]
 8003bc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e09f      	b.n	8003d0c <_printf_i+0x1ec>
 8003bcc:	6820      	ldr	r0, [r4, #0]
 8003bce:	682b      	ldr	r3, [r5, #0]
 8003bd0:	0607      	lsls	r7, r0, #24
 8003bd2:	f103 0104 	add.w	r1, r3, #4
 8003bd6:	6029      	str	r1, [r5, #0]
 8003bd8:	d501      	bpl.n	8003bde <_printf_i+0xbe>
 8003bda:	681e      	ldr	r6, [r3, #0]
 8003bdc:	e003      	b.n	8003be6 <_printf_i+0xc6>
 8003bde:	0646      	lsls	r6, r0, #25
 8003be0:	d5fb      	bpl.n	8003bda <_printf_i+0xba>
 8003be2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003be6:	2e00      	cmp	r6, #0
 8003be8:	da03      	bge.n	8003bf2 <_printf_i+0xd2>
 8003bea:	232d      	movs	r3, #45	; 0x2d
 8003bec:	4276      	negs	r6, r6
 8003bee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bf2:	485a      	ldr	r0, [pc, #360]	; (8003d5c <_printf_i+0x23c>)
 8003bf4:	230a      	movs	r3, #10
 8003bf6:	e012      	b.n	8003c1e <_printf_i+0xfe>
 8003bf8:	682b      	ldr	r3, [r5, #0]
 8003bfa:	6820      	ldr	r0, [r4, #0]
 8003bfc:	1d19      	adds	r1, r3, #4
 8003bfe:	6029      	str	r1, [r5, #0]
 8003c00:	0605      	lsls	r5, r0, #24
 8003c02:	d501      	bpl.n	8003c08 <_printf_i+0xe8>
 8003c04:	681e      	ldr	r6, [r3, #0]
 8003c06:	e002      	b.n	8003c0e <_printf_i+0xee>
 8003c08:	0641      	lsls	r1, r0, #25
 8003c0a:	d5fb      	bpl.n	8003c04 <_printf_i+0xe4>
 8003c0c:	881e      	ldrh	r6, [r3, #0]
 8003c0e:	4853      	ldr	r0, [pc, #332]	; (8003d5c <_printf_i+0x23c>)
 8003c10:	2f6f      	cmp	r7, #111	; 0x6f
 8003c12:	bf0c      	ite	eq
 8003c14:	2308      	moveq	r3, #8
 8003c16:	230a      	movne	r3, #10
 8003c18:	2100      	movs	r1, #0
 8003c1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c1e:	6865      	ldr	r5, [r4, #4]
 8003c20:	60a5      	str	r5, [r4, #8]
 8003c22:	2d00      	cmp	r5, #0
 8003c24:	bfa2      	ittt	ge
 8003c26:	6821      	ldrge	r1, [r4, #0]
 8003c28:	f021 0104 	bicge.w	r1, r1, #4
 8003c2c:	6021      	strge	r1, [r4, #0]
 8003c2e:	b90e      	cbnz	r6, 8003c34 <_printf_i+0x114>
 8003c30:	2d00      	cmp	r5, #0
 8003c32:	d04b      	beq.n	8003ccc <_printf_i+0x1ac>
 8003c34:	4615      	mov	r5, r2
 8003c36:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c3a:	fb03 6711 	mls	r7, r3, r1, r6
 8003c3e:	5dc7      	ldrb	r7, [r0, r7]
 8003c40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c44:	4637      	mov	r7, r6
 8003c46:	42bb      	cmp	r3, r7
 8003c48:	460e      	mov	r6, r1
 8003c4a:	d9f4      	bls.n	8003c36 <_printf_i+0x116>
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d10b      	bne.n	8003c68 <_printf_i+0x148>
 8003c50:	6823      	ldr	r3, [r4, #0]
 8003c52:	07de      	lsls	r6, r3, #31
 8003c54:	d508      	bpl.n	8003c68 <_printf_i+0x148>
 8003c56:	6923      	ldr	r3, [r4, #16]
 8003c58:	6861      	ldr	r1, [r4, #4]
 8003c5a:	4299      	cmp	r1, r3
 8003c5c:	bfde      	ittt	le
 8003c5e:	2330      	movle	r3, #48	; 0x30
 8003c60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c68:	1b52      	subs	r2, r2, r5
 8003c6a:	6122      	str	r2, [r4, #16]
 8003c6c:	f8cd a000 	str.w	sl, [sp]
 8003c70:	464b      	mov	r3, r9
 8003c72:	aa03      	add	r2, sp, #12
 8003c74:	4621      	mov	r1, r4
 8003c76:	4640      	mov	r0, r8
 8003c78:	f7ff fee4 	bl	8003a44 <_printf_common>
 8003c7c:	3001      	adds	r0, #1
 8003c7e:	d14a      	bne.n	8003d16 <_printf_i+0x1f6>
 8003c80:	f04f 30ff 	mov.w	r0, #4294967295
 8003c84:	b004      	add	sp, #16
 8003c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c8a:	6823      	ldr	r3, [r4, #0]
 8003c8c:	f043 0320 	orr.w	r3, r3, #32
 8003c90:	6023      	str	r3, [r4, #0]
 8003c92:	4833      	ldr	r0, [pc, #204]	; (8003d60 <_printf_i+0x240>)
 8003c94:	2778      	movs	r7, #120	; 0x78
 8003c96:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003c9a:	6823      	ldr	r3, [r4, #0]
 8003c9c:	6829      	ldr	r1, [r5, #0]
 8003c9e:	061f      	lsls	r7, r3, #24
 8003ca0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ca4:	d402      	bmi.n	8003cac <_printf_i+0x18c>
 8003ca6:	065f      	lsls	r7, r3, #25
 8003ca8:	bf48      	it	mi
 8003caa:	b2b6      	uxthmi	r6, r6
 8003cac:	07df      	lsls	r7, r3, #31
 8003cae:	bf48      	it	mi
 8003cb0:	f043 0320 	orrmi.w	r3, r3, #32
 8003cb4:	6029      	str	r1, [r5, #0]
 8003cb6:	bf48      	it	mi
 8003cb8:	6023      	strmi	r3, [r4, #0]
 8003cba:	b91e      	cbnz	r6, 8003cc4 <_printf_i+0x1a4>
 8003cbc:	6823      	ldr	r3, [r4, #0]
 8003cbe:	f023 0320 	bic.w	r3, r3, #32
 8003cc2:	6023      	str	r3, [r4, #0]
 8003cc4:	2310      	movs	r3, #16
 8003cc6:	e7a7      	b.n	8003c18 <_printf_i+0xf8>
 8003cc8:	4824      	ldr	r0, [pc, #144]	; (8003d5c <_printf_i+0x23c>)
 8003cca:	e7e4      	b.n	8003c96 <_printf_i+0x176>
 8003ccc:	4615      	mov	r5, r2
 8003cce:	e7bd      	b.n	8003c4c <_printf_i+0x12c>
 8003cd0:	682b      	ldr	r3, [r5, #0]
 8003cd2:	6826      	ldr	r6, [r4, #0]
 8003cd4:	6961      	ldr	r1, [r4, #20]
 8003cd6:	1d18      	adds	r0, r3, #4
 8003cd8:	6028      	str	r0, [r5, #0]
 8003cda:	0635      	lsls	r5, r6, #24
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	d501      	bpl.n	8003ce4 <_printf_i+0x1c4>
 8003ce0:	6019      	str	r1, [r3, #0]
 8003ce2:	e002      	b.n	8003cea <_printf_i+0x1ca>
 8003ce4:	0670      	lsls	r0, r6, #25
 8003ce6:	d5fb      	bpl.n	8003ce0 <_printf_i+0x1c0>
 8003ce8:	8019      	strh	r1, [r3, #0]
 8003cea:	2300      	movs	r3, #0
 8003cec:	6123      	str	r3, [r4, #16]
 8003cee:	4615      	mov	r5, r2
 8003cf0:	e7bc      	b.n	8003c6c <_printf_i+0x14c>
 8003cf2:	682b      	ldr	r3, [r5, #0]
 8003cf4:	1d1a      	adds	r2, r3, #4
 8003cf6:	602a      	str	r2, [r5, #0]
 8003cf8:	681d      	ldr	r5, [r3, #0]
 8003cfa:	6862      	ldr	r2, [r4, #4]
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	4628      	mov	r0, r5
 8003d00:	f7fc fa76 	bl	80001f0 <memchr>
 8003d04:	b108      	cbz	r0, 8003d0a <_printf_i+0x1ea>
 8003d06:	1b40      	subs	r0, r0, r5
 8003d08:	6060      	str	r0, [r4, #4]
 8003d0a:	6863      	ldr	r3, [r4, #4]
 8003d0c:	6123      	str	r3, [r4, #16]
 8003d0e:	2300      	movs	r3, #0
 8003d10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d14:	e7aa      	b.n	8003c6c <_printf_i+0x14c>
 8003d16:	6923      	ldr	r3, [r4, #16]
 8003d18:	462a      	mov	r2, r5
 8003d1a:	4649      	mov	r1, r9
 8003d1c:	4640      	mov	r0, r8
 8003d1e:	47d0      	blx	sl
 8003d20:	3001      	adds	r0, #1
 8003d22:	d0ad      	beq.n	8003c80 <_printf_i+0x160>
 8003d24:	6823      	ldr	r3, [r4, #0]
 8003d26:	079b      	lsls	r3, r3, #30
 8003d28:	d413      	bmi.n	8003d52 <_printf_i+0x232>
 8003d2a:	68e0      	ldr	r0, [r4, #12]
 8003d2c:	9b03      	ldr	r3, [sp, #12]
 8003d2e:	4298      	cmp	r0, r3
 8003d30:	bfb8      	it	lt
 8003d32:	4618      	movlt	r0, r3
 8003d34:	e7a6      	b.n	8003c84 <_printf_i+0x164>
 8003d36:	2301      	movs	r3, #1
 8003d38:	4632      	mov	r2, r6
 8003d3a:	4649      	mov	r1, r9
 8003d3c:	4640      	mov	r0, r8
 8003d3e:	47d0      	blx	sl
 8003d40:	3001      	adds	r0, #1
 8003d42:	d09d      	beq.n	8003c80 <_printf_i+0x160>
 8003d44:	3501      	adds	r5, #1
 8003d46:	68e3      	ldr	r3, [r4, #12]
 8003d48:	9903      	ldr	r1, [sp, #12]
 8003d4a:	1a5b      	subs	r3, r3, r1
 8003d4c:	42ab      	cmp	r3, r5
 8003d4e:	dcf2      	bgt.n	8003d36 <_printf_i+0x216>
 8003d50:	e7eb      	b.n	8003d2a <_printf_i+0x20a>
 8003d52:	2500      	movs	r5, #0
 8003d54:	f104 0619 	add.w	r6, r4, #25
 8003d58:	e7f5      	b.n	8003d46 <_printf_i+0x226>
 8003d5a:	bf00      	nop
 8003d5c:	08004061 	.word	0x08004061
 8003d60:	08004072 	.word	0x08004072

08003d64 <__sflush_r>:
 8003d64:	898a      	ldrh	r2, [r1, #12]
 8003d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d6a:	4605      	mov	r5, r0
 8003d6c:	0710      	lsls	r0, r2, #28
 8003d6e:	460c      	mov	r4, r1
 8003d70:	d458      	bmi.n	8003e24 <__sflush_r+0xc0>
 8003d72:	684b      	ldr	r3, [r1, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	dc05      	bgt.n	8003d84 <__sflush_r+0x20>
 8003d78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	dc02      	bgt.n	8003d84 <__sflush_r+0x20>
 8003d7e:	2000      	movs	r0, #0
 8003d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d86:	2e00      	cmp	r6, #0
 8003d88:	d0f9      	beq.n	8003d7e <__sflush_r+0x1a>
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003d90:	682f      	ldr	r7, [r5, #0]
 8003d92:	6a21      	ldr	r1, [r4, #32]
 8003d94:	602b      	str	r3, [r5, #0]
 8003d96:	d032      	beq.n	8003dfe <__sflush_r+0x9a>
 8003d98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003d9a:	89a3      	ldrh	r3, [r4, #12]
 8003d9c:	075a      	lsls	r2, r3, #29
 8003d9e:	d505      	bpl.n	8003dac <__sflush_r+0x48>
 8003da0:	6863      	ldr	r3, [r4, #4]
 8003da2:	1ac0      	subs	r0, r0, r3
 8003da4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003da6:	b10b      	cbz	r3, 8003dac <__sflush_r+0x48>
 8003da8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003daa:	1ac0      	subs	r0, r0, r3
 8003dac:	2300      	movs	r3, #0
 8003dae:	4602      	mov	r2, r0
 8003db0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003db2:	6a21      	ldr	r1, [r4, #32]
 8003db4:	4628      	mov	r0, r5
 8003db6:	47b0      	blx	r6
 8003db8:	1c43      	adds	r3, r0, #1
 8003dba:	89a3      	ldrh	r3, [r4, #12]
 8003dbc:	d106      	bne.n	8003dcc <__sflush_r+0x68>
 8003dbe:	6829      	ldr	r1, [r5, #0]
 8003dc0:	291d      	cmp	r1, #29
 8003dc2:	d82b      	bhi.n	8003e1c <__sflush_r+0xb8>
 8003dc4:	4a29      	ldr	r2, [pc, #164]	; (8003e6c <__sflush_r+0x108>)
 8003dc6:	410a      	asrs	r2, r1
 8003dc8:	07d6      	lsls	r6, r2, #31
 8003dca:	d427      	bmi.n	8003e1c <__sflush_r+0xb8>
 8003dcc:	2200      	movs	r2, #0
 8003dce:	6062      	str	r2, [r4, #4]
 8003dd0:	04d9      	lsls	r1, r3, #19
 8003dd2:	6922      	ldr	r2, [r4, #16]
 8003dd4:	6022      	str	r2, [r4, #0]
 8003dd6:	d504      	bpl.n	8003de2 <__sflush_r+0x7e>
 8003dd8:	1c42      	adds	r2, r0, #1
 8003dda:	d101      	bne.n	8003de0 <__sflush_r+0x7c>
 8003ddc:	682b      	ldr	r3, [r5, #0]
 8003dde:	b903      	cbnz	r3, 8003de2 <__sflush_r+0x7e>
 8003de0:	6560      	str	r0, [r4, #84]	; 0x54
 8003de2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003de4:	602f      	str	r7, [r5, #0]
 8003de6:	2900      	cmp	r1, #0
 8003de8:	d0c9      	beq.n	8003d7e <__sflush_r+0x1a>
 8003dea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003dee:	4299      	cmp	r1, r3
 8003df0:	d002      	beq.n	8003df8 <__sflush_r+0x94>
 8003df2:	4628      	mov	r0, r5
 8003df4:	f7ff fbea 	bl	80035cc <_free_r>
 8003df8:	2000      	movs	r0, #0
 8003dfa:	6360      	str	r0, [r4, #52]	; 0x34
 8003dfc:	e7c0      	b.n	8003d80 <__sflush_r+0x1c>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	4628      	mov	r0, r5
 8003e02:	47b0      	blx	r6
 8003e04:	1c41      	adds	r1, r0, #1
 8003e06:	d1c8      	bne.n	8003d9a <__sflush_r+0x36>
 8003e08:	682b      	ldr	r3, [r5, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0c5      	beq.n	8003d9a <__sflush_r+0x36>
 8003e0e:	2b1d      	cmp	r3, #29
 8003e10:	d001      	beq.n	8003e16 <__sflush_r+0xb2>
 8003e12:	2b16      	cmp	r3, #22
 8003e14:	d101      	bne.n	8003e1a <__sflush_r+0xb6>
 8003e16:	602f      	str	r7, [r5, #0]
 8003e18:	e7b1      	b.n	8003d7e <__sflush_r+0x1a>
 8003e1a:	89a3      	ldrh	r3, [r4, #12]
 8003e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e20:	81a3      	strh	r3, [r4, #12]
 8003e22:	e7ad      	b.n	8003d80 <__sflush_r+0x1c>
 8003e24:	690f      	ldr	r7, [r1, #16]
 8003e26:	2f00      	cmp	r7, #0
 8003e28:	d0a9      	beq.n	8003d7e <__sflush_r+0x1a>
 8003e2a:	0793      	lsls	r3, r2, #30
 8003e2c:	680e      	ldr	r6, [r1, #0]
 8003e2e:	bf08      	it	eq
 8003e30:	694b      	ldreq	r3, [r1, #20]
 8003e32:	600f      	str	r7, [r1, #0]
 8003e34:	bf18      	it	ne
 8003e36:	2300      	movne	r3, #0
 8003e38:	eba6 0807 	sub.w	r8, r6, r7
 8003e3c:	608b      	str	r3, [r1, #8]
 8003e3e:	f1b8 0f00 	cmp.w	r8, #0
 8003e42:	dd9c      	ble.n	8003d7e <__sflush_r+0x1a>
 8003e44:	6a21      	ldr	r1, [r4, #32]
 8003e46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003e48:	4643      	mov	r3, r8
 8003e4a:	463a      	mov	r2, r7
 8003e4c:	4628      	mov	r0, r5
 8003e4e:	47b0      	blx	r6
 8003e50:	2800      	cmp	r0, #0
 8003e52:	dc06      	bgt.n	8003e62 <__sflush_r+0xfe>
 8003e54:	89a3      	ldrh	r3, [r4, #12]
 8003e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e5a:	81a3      	strh	r3, [r4, #12]
 8003e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e60:	e78e      	b.n	8003d80 <__sflush_r+0x1c>
 8003e62:	4407      	add	r7, r0
 8003e64:	eba8 0800 	sub.w	r8, r8, r0
 8003e68:	e7e9      	b.n	8003e3e <__sflush_r+0xda>
 8003e6a:	bf00      	nop
 8003e6c:	dfbffffe 	.word	0xdfbffffe

08003e70 <_fflush_r>:
 8003e70:	b538      	push	{r3, r4, r5, lr}
 8003e72:	690b      	ldr	r3, [r1, #16]
 8003e74:	4605      	mov	r5, r0
 8003e76:	460c      	mov	r4, r1
 8003e78:	b913      	cbnz	r3, 8003e80 <_fflush_r+0x10>
 8003e7a:	2500      	movs	r5, #0
 8003e7c:	4628      	mov	r0, r5
 8003e7e:	bd38      	pop	{r3, r4, r5, pc}
 8003e80:	b118      	cbz	r0, 8003e8a <_fflush_r+0x1a>
 8003e82:	6a03      	ldr	r3, [r0, #32]
 8003e84:	b90b      	cbnz	r3, 8003e8a <_fflush_r+0x1a>
 8003e86:	f7ff f9a9 	bl	80031dc <__sinit>
 8003e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0f3      	beq.n	8003e7a <_fflush_r+0xa>
 8003e92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003e94:	07d0      	lsls	r0, r2, #31
 8003e96:	d404      	bmi.n	8003ea2 <_fflush_r+0x32>
 8003e98:	0599      	lsls	r1, r3, #22
 8003e9a:	d402      	bmi.n	8003ea2 <_fflush_r+0x32>
 8003e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e9e:	f7ff fb92 	bl	80035c6 <__retarget_lock_acquire_recursive>
 8003ea2:	4628      	mov	r0, r5
 8003ea4:	4621      	mov	r1, r4
 8003ea6:	f7ff ff5d 	bl	8003d64 <__sflush_r>
 8003eaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003eac:	07da      	lsls	r2, r3, #31
 8003eae:	4605      	mov	r5, r0
 8003eb0:	d4e4      	bmi.n	8003e7c <_fflush_r+0xc>
 8003eb2:	89a3      	ldrh	r3, [r4, #12]
 8003eb4:	059b      	lsls	r3, r3, #22
 8003eb6:	d4e1      	bmi.n	8003e7c <_fflush_r+0xc>
 8003eb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003eba:	f7ff fb85 	bl	80035c8 <__retarget_lock_release_recursive>
 8003ebe:	e7dd      	b.n	8003e7c <_fflush_r+0xc>

08003ec0 <__swhatbuf_r>:
 8003ec0:	b570      	push	{r4, r5, r6, lr}
 8003ec2:	460c      	mov	r4, r1
 8003ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ec8:	2900      	cmp	r1, #0
 8003eca:	b096      	sub	sp, #88	; 0x58
 8003ecc:	4615      	mov	r5, r2
 8003ece:	461e      	mov	r6, r3
 8003ed0:	da0d      	bge.n	8003eee <__swhatbuf_r+0x2e>
 8003ed2:	89a3      	ldrh	r3, [r4, #12]
 8003ed4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003ed8:	f04f 0100 	mov.w	r1, #0
 8003edc:	bf0c      	ite	eq
 8003ede:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003ee2:	2340      	movne	r3, #64	; 0x40
 8003ee4:	2000      	movs	r0, #0
 8003ee6:	6031      	str	r1, [r6, #0]
 8003ee8:	602b      	str	r3, [r5, #0]
 8003eea:	b016      	add	sp, #88	; 0x58
 8003eec:	bd70      	pop	{r4, r5, r6, pc}
 8003eee:	466a      	mov	r2, sp
 8003ef0:	f000 f848 	bl	8003f84 <_fstat_r>
 8003ef4:	2800      	cmp	r0, #0
 8003ef6:	dbec      	blt.n	8003ed2 <__swhatbuf_r+0x12>
 8003ef8:	9901      	ldr	r1, [sp, #4]
 8003efa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003efe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003f02:	4259      	negs	r1, r3
 8003f04:	4159      	adcs	r1, r3
 8003f06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f0a:	e7eb      	b.n	8003ee4 <__swhatbuf_r+0x24>

08003f0c <__smakebuf_r>:
 8003f0c:	898b      	ldrh	r3, [r1, #12]
 8003f0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f10:	079d      	lsls	r5, r3, #30
 8003f12:	4606      	mov	r6, r0
 8003f14:	460c      	mov	r4, r1
 8003f16:	d507      	bpl.n	8003f28 <__smakebuf_r+0x1c>
 8003f18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f1c:	6023      	str	r3, [r4, #0]
 8003f1e:	6123      	str	r3, [r4, #16]
 8003f20:	2301      	movs	r3, #1
 8003f22:	6163      	str	r3, [r4, #20]
 8003f24:	b002      	add	sp, #8
 8003f26:	bd70      	pop	{r4, r5, r6, pc}
 8003f28:	ab01      	add	r3, sp, #4
 8003f2a:	466a      	mov	r2, sp
 8003f2c:	f7ff ffc8 	bl	8003ec0 <__swhatbuf_r>
 8003f30:	9900      	ldr	r1, [sp, #0]
 8003f32:	4605      	mov	r5, r0
 8003f34:	4630      	mov	r0, r6
 8003f36:	f7ff fbb5 	bl	80036a4 <_malloc_r>
 8003f3a:	b948      	cbnz	r0, 8003f50 <__smakebuf_r+0x44>
 8003f3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f40:	059a      	lsls	r2, r3, #22
 8003f42:	d4ef      	bmi.n	8003f24 <__smakebuf_r+0x18>
 8003f44:	f023 0303 	bic.w	r3, r3, #3
 8003f48:	f043 0302 	orr.w	r3, r3, #2
 8003f4c:	81a3      	strh	r3, [r4, #12]
 8003f4e:	e7e3      	b.n	8003f18 <__smakebuf_r+0xc>
 8003f50:	89a3      	ldrh	r3, [r4, #12]
 8003f52:	6020      	str	r0, [r4, #0]
 8003f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f58:	81a3      	strh	r3, [r4, #12]
 8003f5a:	9b00      	ldr	r3, [sp, #0]
 8003f5c:	6163      	str	r3, [r4, #20]
 8003f5e:	9b01      	ldr	r3, [sp, #4]
 8003f60:	6120      	str	r0, [r4, #16]
 8003f62:	b15b      	cbz	r3, 8003f7c <__smakebuf_r+0x70>
 8003f64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f68:	4630      	mov	r0, r6
 8003f6a:	f000 f81d 	bl	8003fa8 <_isatty_r>
 8003f6e:	b128      	cbz	r0, 8003f7c <__smakebuf_r+0x70>
 8003f70:	89a3      	ldrh	r3, [r4, #12]
 8003f72:	f023 0303 	bic.w	r3, r3, #3
 8003f76:	f043 0301 	orr.w	r3, r3, #1
 8003f7a:	81a3      	strh	r3, [r4, #12]
 8003f7c:	89a3      	ldrh	r3, [r4, #12]
 8003f7e:	431d      	orrs	r5, r3
 8003f80:	81a5      	strh	r5, [r4, #12]
 8003f82:	e7cf      	b.n	8003f24 <__smakebuf_r+0x18>

08003f84 <_fstat_r>:
 8003f84:	b538      	push	{r3, r4, r5, lr}
 8003f86:	4d07      	ldr	r5, [pc, #28]	; (8003fa4 <_fstat_r+0x20>)
 8003f88:	2300      	movs	r3, #0
 8003f8a:	4604      	mov	r4, r0
 8003f8c:	4608      	mov	r0, r1
 8003f8e:	4611      	mov	r1, r2
 8003f90:	602b      	str	r3, [r5, #0]
 8003f92:	f7fc fdee 	bl	8000b72 <_fstat>
 8003f96:	1c43      	adds	r3, r0, #1
 8003f98:	d102      	bne.n	8003fa0 <_fstat_r+0x1c>
 8003f9a:	682b      	ldr	r3, [r5, #0]
 8003f9c:	b103      	cbz	r3, 8003fa0 <_fstat_r+0x1c>
 8003f9e:	6023      	str	r3, [r4, #0]
 8003fa0:	bd38      	pop	{r3, r4, r5, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20000248 	.word	0x20000248

08003fa8 <_isatty_r>:
 8003fa8:	b538      	push	{r3, r4, r5, lr}
 8003faa:	4d06      	ldr	r5, [pc, #24]	; (8003fc4 <_isatty_r+0x1c>)
 8003fac:	2300      	movs	r3, #0
 8003fae:	4604      	mov	r4, r0
 8003fb0:	4608      	mov	r0, r1
 8003fb2:	602b      	str	r3, [r5, #0]
 8003fb4:	f7fc fded 	bl	8000b92 <_isatty>
 8003fb8:	1c43      	adds	r3, r0, #1
 8003fba:	d102      	bne.n	8003fc2 <_isatty_r+0x1a>
 8003fbc:	682b      	ldr	r3, [r5, #0]
 8003fbe:	b103      	cbz	r3, 8003fc2 <_isatty_r+0x1a>
 8003fc0:	6023      	str	r3, [r4, #0]
 8003fc2:	bd38      	pop	{r3, r4, r5, pc}
 8003fc4:	20000248 	.word	0x20000248

08003fc8 <_sbrk_r>:
 8003fc8:	b538      	push	{r3, r4, r5, lr}
 8003fca:	4d06      	ldr	r5, [pc, #24]	; (8003fe4 <_sbrk_r+0x1c>)
 8003fcc:	2300      	movs	r3, #0
 8003fce:	4604      	mov	r4, r0
 8003fd0:	4608      	mov	r0, r1
 8003fd2:	602b      	str	r3, [r5, #0]
 8003fd4:	f7fc fdf6 	bl	8000bc4 <_sbrk>
 8003fd8:	1c43      	adds	r3, r0, #1
 8003fda:	d102      	bne.n	8003fe2 <_sbrk_r+0x1a>
 8003fdc:	682b      	ldr	r3, [r5, #0]
 8003fde:	b103      	cbz	r3, 8003fe2 <_sbrk_r+0x1a>
 8003fe0:	6023      	str	r3, [r4, #0]
 8003fe2:	bd38      	pop	{r3, r4, r5, pc}
 8003fe4:	20000248 	.word	0x20000248

08003fe8 <_init>:
 8003fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fea:	bf00      	nop
 8003fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fee:	bc08      	pop	{r3}
 8003ff0:	469e      	mov	lr, r3
 8003ff2:	4770      	bx	lr

08003ff4 <_fini>:
 8003ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff6:	bf00      	nop
 8003ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ffa:	bc08      	pop	{r3}
 8003ffc:	469e      	mov	lr, r3
 8003ffe:	4770      	bx	lr
