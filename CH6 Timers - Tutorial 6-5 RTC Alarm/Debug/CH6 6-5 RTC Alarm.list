
CH6 6-5 RTC Alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f74  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08004124  08004124  00014124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800420c  0800420c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800420c  0800420c  0001420c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004214  08004214  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004214  08004214  00014214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004218  08004218  00014218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800421c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000098  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000108  20000108  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b4f2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bb7  00000000  00000000  0002b592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000980  00000000  00000000  0002d150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008c8  00000000  00000000  0002dad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024199  00000000  00000000  0002e398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b759  00000000  00000000  00052531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9127  00000000  00000000  0005dc8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00136db1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e24  00000000  00000000  00136e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800410c 	.word	0x0800410c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	0800410c 	.word	0x0800410c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]

	  HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	f04f 33ff 	mov.w	r3, #4294967295
 80005a8:	68b9      	ldr	r1, [r7, #8]
 80005aa:	4804      	ldr	r0, [pc, #16]	; (80005bc <_write+0x28>)
 80005ac:	f002 fa04 	bl	80029b8 <HAL_UART_Transmit>
	  return len;
 80005b0:	687b      	ldr	r3, [r7, #4]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	200000ac 	.word	0x200000ac

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fb5e 	bl	8000c84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f808 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f92e 	bl	800082c <MX_GPIO_Init>
  MX_RTC_Init();
 80005d0:	f000 f872 	bl	80006b8 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80005d4:	f000 f900 	bl	80007d8 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <main+0x18>
	...

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	; 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	2230      	movs	r2, #48	; 0x30
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 fd82 	bl	80030f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	2300      	movs	r3, #0
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	4b2a      	ldr	r3, [pc, #168]	; (80006b0 <SystemClock_Config+0xd4>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	4a29      	ldr	r2, [pc, #164]	; (80006b0 <SystemClock_Config+0xd4>)
 800060a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060e:	6413      	str	r3, [r2, #64]	; 0x40
 8000610:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <SystemClock_Config+0xd4>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	4b24      	ldr	r3, [pc, #144]	; (80006b4 <SystemClock_Config+0xd8>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000628:	4a22      	ldr	r2, [pc, #136]	; (80006b4 <SystemClock_Config+0xd8>)
 800062a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <SystemClock_Config+0xd8>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800063c:	2303      	movs	r3, #3
 800063e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000640:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000646:	2301      	movs	r3, #1
 8000648:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064a:	2310      	movs	r3, #16
 800064c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000652:	2300      	movs	r3, #0
 8000654:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000656:	2308      	movs	r3, #8
 8000658:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800065a:	2332      	movs	r3, #50	; 0x32
 800065c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800065e:	2304      	movs	r3, #4
 8000660:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000662:	2307      	movs	r3, #7
 8000664:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	4618      	mov	r0, r3
 800066c:	f000 fe6e 	bl	800134c <HAL_RCC_OscConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000676:	f000 f963 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067a:	230f      	movs	r3, #15
 800067c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067e:	2302      	movs	r3, #2
 8000680:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000686:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800068a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800068c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000690:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f001 f8cf 	bl	800183c <HAL_RCC_ClockConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80006a4:	f000 f94c 	bl	8000940 <Error_Handler>
  }
}
 80006a8:	bf00      	nop
 80006aa:	3750      	adds	r7, #80	; 0x50
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b090      	sub	sp, #64	; 0x40
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80006be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80006ce:	2300      	movs	r3, #0
 80006d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80006d2:	463b      	mov	r3, r7
 80006d4:	2228      	movs	r2, #40	; 0x28
 80006d6:	2100      	movs	r1, #0
 80006d8:	4618      	mov	r0, r3
 80006da:	f002 fd0b 	bl	80030f4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006de:	4b3c      	ldr	r3, [pc, #240]	; (80007d0 <MX_RTC_Init+0x118>)
 80006e0:	4a3c      	ldr	r2, [pc, #240]	; (80007d4 <MX_RTC_Init+0x11c>)
 80006e2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006e4:	4b3a      	ldr	r3, [pc, #232]	; (80007d0 <MX_RTC_Init+0x118>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 124;
 80006ea:	4b39      	ldr	r3, [pc, #228]	; (80007d0 <MX_RTC_Init+0x118>)
 80006ec:	227c      	movs	r2, #124	; 0x7c
 80006ee:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 2559;
 80006f0:	4b37      	ldr	r3, [pc, #220]	; (80007d0 <MX_RTC_Init+0x118>)
 80006f2:	f640 12ff 	movw	r2, #2559	; 0x9ff
 80006f6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006f8:	4b35      	ldr	r3, [pc, #212]	; (80007d0 <MX_RTC_Init+0x118>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006fe:	4b34      	ldr	r3, [pc, #208]	; (80007d0 <MX_RTC_Init+0x118>)
 8000700:	2200      	movs	r2, #0
 8000702:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000704:	4b32      	ldr	r3, [pc, #200]	; (80007d0 <MX_RTC_Init+0x118>)
 8000706:	2200      	movs	r2, #0
 8000708:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800070a:	4831      	ldr	r0, [pc, #196]	; (80007d0 <MX_RTC_Init+0x118>)
 800070c:	f001 fc76 	bl	8001ffc <HAL_RTC_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000716:	f000 f913 	bl	8000940 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x14;
 800071a:	2314      	movs	r3, #20
 800071c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8000720:	2300      	movs	r3, #0
 8000722:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000726:	2300      	movs	r3, #0
 8000728:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
 800072c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000730:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000732:	2300      	movs	r3, #0
 8000734:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000736:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800073a:	2201      	movs	r2, #1
 800073c:	4619      	mov	r1, r3
 800073e:	4824      	ldr	r0, [pc, #144]	; (80007d0 <MX_RTC_Init+0x118>)
 8000740:	f001 fcd2 	bl	80020e8 <HAL_RTC_SetTime>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_RTC_Init+0x96>
  {
    Error_Handler();
 800074a:	f000 f8f9 	bl	8000940 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 800074e:	2304      	movs	r3, #4
 8000750:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_NOVEMBER;
 8000754:	2311      	movs	r3, #17
 8000756:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x2;
 800075a:	2302      	movs	r3, #2
 800075c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x23;
 8000760:	2323      	movs	r3, #35	; 0x23
 8000762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000766:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800076a:	2201      	movs	r2, #1
 800076c:	4619      	mov	r1, r3
 800076e:	4818      	ldr	r0, [pc, #96]	; (80007d0 <MX_RTC_Init+0x118>)
 8000770:	f001 fdb2 	bl	80022d8 <HAL_RTC_SetDate>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 800077a:	f000 f8e1 	bl	8000940 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x14;
 800077e:	2314      	movs	r3, #20
 8000780:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000782:	2300      	movs	r3, #0
 8000784:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x30;
 8000786:	2330      	movs	r3, #48	; 0x30
 8000788:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
 800078e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000792:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000794:	2300      	movs	r3, #0
 8000796:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 80007a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007a4:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = RTC_WEEKDAY_THURSDAY;
 80007a6:	2304      	movs	r3, #4
 80007a8:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80007ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80007b2:	463b      	mov	r3, r7
 80007b4:	2201      	movs	r2, #1
 80007b6:	4619      	mov	r1, r3
 80007b8:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_RTC_Init+0x118>)
 80007ba:	f001 fe61 	bl	8002480 <HAL_RTC_SetAlarm_IT>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_RTC_Init+0x110>
  {
    Error_Handler();
 80007c4:	f000 f8bc 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	3740      	adds	r7, #64	; 0x40
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	2000008c 	.word	0x2000008c
 80007d4:	40002800 	.word	0x40002800

080007d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_USART1_UART_Init+0x4c>)
 80007de:	4a12      	ldr	r2, [pc, #72]	; (8000828 <MX_USART1_UART_Init+0x50>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <MX_USART1_UART_Init+0x4c>)
 80007e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_USART1_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_USART1_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_USART1_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_USART1_UART_Init+0x4c>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_USART1_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_USART1_UART_Init+0x4c>)
 800080a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800080e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000810:	4804      	ldr	r0, [pc, #16]	; (8000824 <MX_USART1_UART_Init+0x4c>)
 8000812:	f002 f884 	bl	800291e <HAL_UART_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 800081c:	f000 f890 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	200000ac 	.word	0x200000ac
 8000828:	40011000 	.word	0x40011000

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b088      	sub	sp, #32
 8000830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <MX_GPIO_Init+0x9c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a1f      	ldr	r2, [pc, #124]	; (80008c8 <MX_GPIO_Init+0x9c>)
 800084c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <MX_GPIO_Init+0x9c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <MX_GPIO_Init+0x9c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a18      	ldr	r2, [pc, #96]	; (80008c8 <MX_GPIO_Init+0x9c>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MX_GPIO_Init+0x9c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	603b      	str	r3, [r7, #0]
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_GPIO_Init+0x9c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a11      	ldr	r2, [pc, #68]	; (80008c8 <MX_GPIO_Init+0x9c>)
 8000884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_GPIO_Init+0x9c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800089c:	480b      	ldr	r0, [pc, #44]	; (80008cc <MX_GPIO_Init+0xa0>)
 800089e:	f000 fd21 	bl	80012e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	4619      	mov	r1, r3
 80008ba:	4804      	ldr	r0, [pc, #16]	; (80008cc <MX_GPIO_Init+0xa0>)
 80008bc:	f000 fb66 	bl	8000f8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c0:	bf00      	nop
 80008c2:	3720      	adds	r7, #32
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40021800 	.word	0x40021800

080008d0 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b088      	sub	sp, #32
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	// Toggle GP13 led when the alarm goes off
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 80008d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008dc:	4814      	ldr	r0, [pc, #80]	; (8000930 <HAL_RTC_AlarmAEventCallback+0x60>)
 80008de:	f000 fd1a 	bl	8001316 <HAL_GPIO_TogglePin>
	printf("DATE AND TIME IS:\r\n");
 80008e2:	4814      	ldr	r0, [pc, #80]	; (8000934 <HAL_RTC_AlarmAEventCallback+0x64>)
 80008e4:	f002 fc94 	bl	8003210 <puts>
	// Get date time when the alarm goes off
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;
	/* Get the RTC current Time */
	HAL_RTC_GetTime(hrtc, &gTime, RTC_FORMAT_BIN);
 80008e8:	f107 0308 	add.w	r3, r7, #8
 80008ec:	2200      	movs	r2, #0
 80008ee:	4619      	mov	r1, r3
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f001 fc93 	bl	800221c <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(hrtc, &gDate, RTC_FORMAT_BIN);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	2200      	movs	r2, #0
 80008fc:	4619      	mov	r1, r3
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f001 fd6e 	bl	80023e0 <HAL_RTC_GetDate>
	/* Display time Format: hh:mm:ss */
	printf("%02d:%02d:%02d\r\n",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8000904:	7a3b      	ldrb	r3, [r7, #8]
 8000906:	4619      	mov	r1, r3
 8000908:	7a7b      	ldrb	r3, [r7, #9]
 800090a:	461a      	mov	r2, r3
 800090c:	7abb      	ldrb	r3, [r7, #10]
 800090e:	480a      	ldr	r0, [pc, #40]	; (8000938 <HAL_RTC_AlarmAEventCallback+0x68>)
 8000910:	f002 fbf8 	bl	8003104 <iprintf>
	/* Display date Format: dd-mm-yy */
	printf("%02d-%02d-%2d\r\n",gDate.Date, gDate.Month, 2000 + gDate.Year);
 8000914:	7fbb      	ldrb	r3, [r7, #30]
 8000916:	4619      	mov	r1, r3
 8000918:	7f7b      	ldrb	r3, [r7, #29]
 800091a:	461a      	mov	r2, r3
 800091c:	7ffb      	ldrb	r3, [r7, #31]
 800091e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000922:	4806      	ldr	r0, [pc, #24]	; (800093c <HAL_RTC_AlarmAEventCallback+0x6c>)
 8000924:	f002 fbee 	bl	8003104 <iprintf>

	/* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
	 */
}
 8000928:	bf00      	nop
 800092a:	3720      	adds	r7, #32
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40021800 	.word	0x40021800
 8000934:	08004124 	.word	0x08004124
 8000938:	08004138 	.word	0x08004138
 800093c:	0800414c 	.word	0x0800414c

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	e7fe      	b.n	8000948 <Error_Handler+0x8>
	...

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <HAL_MspInit+0x4c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	4a0f      	ldr	r2, [pc, #60]	; (8000998 <HAL_MspInit+0x4c>)
 800095c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000960:	6453      	str	r3, [r2, #68]	; 0x44
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <HAL_MspInit+0x4c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a08      	ldr	r2, [pc, #32]	; (8000998 <HAL_MspInit+0x4c>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800098a:	2007      	movs	r0, #7
 800098c:	f000 fabc 	bl	8000f08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40023800 	.word	0x40023800

0800099c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08e      	sub	sp, #56	; 0x38
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009a4:	f107 0308 	add.w	r3, r7, #8
 80009a8:	2230      	movs	r2, #48	; 0x30
 80009aa:	2100      	movs	r1, #0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f002 fba1 	bl	80030f4 <memset>
  if(hrtc->Instance==RTC)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a10      	ldr	r2, [pc, #64]	; (80009f8 <HAL_RTC_MspInit+0x5c>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d118      	bne.n	80009ee <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80009bc:	2320      	movs	r3, #32
 80009be:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 80009c0:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <HAL_RTC_MspInit+0x60>)
 80009c2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009c4:	f107 0308 	add.w	r3, r7, #8
 80009c8:	4618      	mov	r0, r3
 80009ca:	f001 f957 	bl	8001c7c <HAL_RCCEx_PeriphCLKConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 80009d4:	f7ff ffb4 	bl	8000940 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <HAL_RTC_MspInit+0x64>)
 80009da:	2201      	movs	r2, #1
 80009dc:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2100      	movs	r1, #0
 80009e2:	2029      	movs	r0, #41	; 0x29
 80009e4:	f000 fa9b 	bl	8000f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80009e8:	2029      	movs	r0, #41	; 0x29
 80009ea:	f000 fab4 	bl	8000f56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80009ee:	bf00      	nop
 80009f0:	3738      	adds	r7, #56	; 0x38
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40002800 	.word	0x40002800
 80009fc:	00190300 	.word	0x00190300
 8000a00:	42470e3c 	.word	0x42470e3c

08000a04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	; 0x28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a19      	ldr	r2, [pc, #100]	; (8000a88 <HAL_UART_MspInit+0x84>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d12c      	bne.n	8000a80 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <HAL_UART_MspInit+0x88>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	4a17      	ldr	r2, [pc, #92]	; (8000a8c <HAL_UART_MspInit+0x88>)
 8000a30:	f043 0310 	orr.w	r3, r3, #16
 8000a34:	6453      	str	r3, [r2, #68]	; 0x44
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <HAL_UART_MspInit+0x88>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	f003 0310 	and.w	r3, r3, #16
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <HAL_UART_MspInit+0x88>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a10      	ldr	r2, [pc, #64]	; (8000a8c <HAL_UART_MspInit+0x88>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <HAL_UART_MspInit+0x88>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a5e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a70:	2307      	movs	r3, #7
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <HAL_UART_MspInit+0x8c>)
 8000a7c:	f000 fa86 	bl	8000f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a80:	bf00      	nop
 8000a82:	3728      	adds	r7, #40	; 0x28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40011000 	.word	0x40011000
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020000 	.word	0x40020000

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <NMI_Handler+0x4>

08000a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <BusFault_Handler+0x4>

08000aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <UsageFault_Handler+0x4>

08000ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae0:	f000 f922 	bl	8000d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <RTC_Alarm_IRQHandler+0x10>)
 8000aee:	f001 fe09 	bl	8002704 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	2000008c 	.word	0x2000008c

08000afc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	e00a      	b.n	8000b24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b0e:	f3af 8000 	nop.w
 8000b12:	4601      	mov	r1, r0
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	1c5a      	adds	r2, r3, #1
 8000b18:	60ba      	str	r2, [r7, #8]
 8000b1a:	b2ca      	uxtb	r2, r1
 8000b1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3301      	adds	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697a      	ldr	r2, [r7, #20]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	dbf0      	blt.n	8000b0e <_read+0x12>
  }

  return len;
 8000b2c:	687b      	ldr	r3, [r7, #4]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b36:	b480      	push	{r7}
 8000b38:	b083      	sub	sp, #12
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b5e:	605a      	str	r2, [r3, #4]
  return 0;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <_isatty>:

int _isatty(int file)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
	...

08000ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba8:	4a14      	ldr	r2, [pc, #80]	; (8000bfc <_sbrk+0x5c>)
 8000baa:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <_sbrk+0x60>)
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <_sbrk+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d102      	bne.n	8000bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <_sbrk+0x64>)
 8000bbe:	4a12      	ldr	r2, [pc, #72]	; (8000c08 <_sbrk+0x68>)
 8000bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <_sbrk+0x64>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d207      	bcs.n	8000be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd0:	f002 fa66 	bl	80030a0 <__errno>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
 8000bde:	e009      	b.n	8000bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000be6:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <_sbrk+0x64>)
 8000bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20030000 	.word	0x20030000
 8000c00:	00000400 	.word	0x00000400
 8000c04:	200000f0 	.word	0x200000f0
 8000c08:	20000108 	.word	0x20000108

08000c0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <SystemInit+0x20>)
 8000c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c16:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <SystemInit+0x20>)
 8000c18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c68 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c34:	480d      	ldr	r0, [pc, #52]	; (8000c6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c36:	490e      	ldr	r1, [pc, #56]	; (8000c70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c38:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c3c:	e002      	b.n	8000c44 <LoopCopyDataInit>

08000c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c42:	3304      	adds	r3, #4

08000c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c48:	d3f9      	bcc.n	8000c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4a:	4a0b      	ldr	r2, [pc, #44]	; (8000c78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c4c:	4c0b      	ldr	r4, [pc, #44]	; (8000c7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c50:	e001      	b.n	8000c56 <LoopFillZerobss>

08000c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c54:	3204      	adds	r2, #4

08000c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c58:	d3fb      	bcc.n	8000c52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c5a:	f7ff ffd7 	bl	8000c0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c5e:	f002 fa25 	bl	80030ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c62:	f7ff fcad 	bl	80005c0 <main>
  bx  lr    
 8000c66:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c68:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c70:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c74:	0800421c 	.word	0x0800421c
  ldr r2, =_sbss
 8000c78:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c7c:	20000108 	.word	0x20000108

08000c80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c80:	e7fe      	b.n	8000c80 <ADC_IRQHandler>
	...

08000c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0d      	ldr	r2, [pc, #52]	; (8000cc4 <HAL_Init+0x40>)
 8000c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <HAL_Init+0x40>)
 8000c9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <HAL_Init+0x40>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a07      	ldr	r2, [pc, #28]	; (8000cc4 <HAL_Init+0x40>)
 8000ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000caa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cac:	2003      	movs	r0, #3
 8000cae:	f000 f92b 	bl	8000f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f000 f808 	bl	8000cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb8:	f7ff fe48 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40023c00 	.word	0x40023c00

08000cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <HAL_InitTick+0x54>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <HAL_InitTick+0x58>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 f943 	bl	8000f72 <HAL_SYSTICK_Config>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e00e      	b.n	8000d14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d80a      	bhi.n	8000d12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295
 8000d04:	f000 f90b 	bl	8000f1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d08:	4a06      	ldr	r2, [pc, #24]	; (8000d24 <HAL_InitTick+0x5c>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	e000      	b.n	8000d14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	20000008 	.word	0x20000008
 8000d24:	20000004 	.word	0x20000004

08000d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_IncTick+0x20>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_IncTick+0x24>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4413      	add	r3, r2
 8000d38:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <HAL_IncTick+0x24>)
 8000d3a:	6013      	str	r3, [r2, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	200000f4 	.word	0x200000f4

08000d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return uwTick;
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <HAL_GetTick+0x14>)
 8000d56:	681b      	ldr	r3, [r3, #0]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	200000f4 	.word	0x200000f4

08000d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <__NVIC_SetPriorityGrouping+0x44>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d84:	4013      	ands	r3, r2
 8000d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9a:	4a04      	ldr	r2, [pc, #16]	; (8000dac <__NVIC_SetPriorityGrouping+0x44>)
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	60d3      	str	r3, [r2, #12]
}
 8000da0:	bf00      	nop
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	0a1b      	lsrs	r3, r3, #8
 8000dba:	f003 0307 	and.w	r3, r3, #7
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	db0b      	blt.n	8000df6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	f003 021f 	and.w	r2, r3, #31
 8000de4:	4907      	ldr	r1, [pc, #28]	; (8000e04 <__NVIC_EnableIRQ+0x38>)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	095b      	lsrs	r3, r3, #5
 8000dec:	2001      	movs	r0, #1
 8000dee:	fa00 f202 	lsl.w	r2, r0, r2
 8000df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000e100 	.word	0xe000e100

08000e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	6039      	str	r1, [r7, #0]
 8000e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	db0a      	blt.n	8000e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	490c      	ldr	r1, [pc, #48]	; (8000e54 <__NVIC_SetPriority+0x4c>)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	0112      	lsls	r2, r2, #4
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	440b      	add	r3, r1
 8000e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e30:	e00a      	b.n	8000e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4908      	ldr	r1, [pc, #32]	; (8000e58 <__NVIC_SetPriority+0x50>)
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	f003 030f 	and.w	r3, r3, #15
 8000e3e:	3b04      	subs	r3, #4
 8000e40:	0112      	lsls	r2, r2, #4
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	440b      	add	r3, r1
 8000e46:	761a      	strb	r2, [r3, #24]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000e100 	.word	0xe000e100
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b089      	sub	sp, #36	; 0x24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f1c3 0307 	rsb	r3, r3, #7
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	bf28      	it	cs
 8000e7a:	2304      	movcs	r3, #4
 8000e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3304      	adds	r3, #4
 8000e82:	2b06      	cmp	r3, #6
 8000e84:	d902      	bls.n	8000e8c <NVIC_EncodePriority+0x30>
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3b03      	subs	r3, #3
 8000e8a:	e000      	b.n	8000e8e <NVIC_EncodePriority+0x32>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	f04f 32ff 	mov.w	r2, #4294967295
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43da      	mvns	r2, r3
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000eae:	43d9      	mvns	r1, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	4313      	orrs	r3, r2
         );
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3724      	adds	r7, #36	; 0x24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ed4:	d301      	bcc.n	8000eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00f      	b.n	8000efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eda:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <SysTick_Config+0x40>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee2:	210f      	movs	r1, #15
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	f7ff ff8e 	bl	8000e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <SysTick_Config+0x40>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef2:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <SysTick_Config+0x40>)
 8000ef4:	2207      	movs	r2, #7
 8000ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	e000e010 	.word	0xe000e010

08000f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ff29 	bl	8000d68 <__NVIC_SetPriorityGrouping>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b086      	sub	sp, #24
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	607a      	str	r2, [r7, #4]
 8000f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f30:	f7ff ff3e 	bl	8000db0 <__NVIC_GetPriorityGrouping>
 8000f34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	68b9      	ldr	r1, [r7, #8]
 8000f3a:	6978      	ldr	r0, [r7, #20]
 8000f3c:	f7ff ff8e 	bl	8000e5c <NVIC_EncodePriority>
 8000f40:	4602      	mov	r2, r0
 8000f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f46:	4611      	mov	r1, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff5d 	bl	8000e08 <__NVIC_SetPriority>
}
 8000f4e:	bf00      	nop
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff31 	bl	8000dcc <__NVIC_EnableIRQ>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff ffa2 	bl	8000ec4 <SysTick_Config>
 8000f80:	4603      	mov	r3, r0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b089      	sub	sp, #36	; 0x24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
 8000fa6:	e177      	b.n	8001298 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fa8:	2201      	movs	r2, #1
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	f040 8166 	bne.w	8001292 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d005      	beq.n	8000fde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d130      	bne.n	8001040 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	2203      	movs	r2, #3
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	68da      	ldr	r2, [r3, #12]
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001014:	2201      	movs	r2, #1
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	091b      	lsrs	r3, r3, #4
 800102a:	f003 0201 	and.w	r2, r3, #1
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	2b03      	cmp	r3, #3
 800104a:	d017      	beq.n	800107c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	2203      	movs	r2, #3
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	689a      	ldr	r2, [r3, #8]
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 0303 	and.w	r3, r3, #3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d123      	bne.n	80010d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	08da      	lsrs	r2, r3, #3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3208      	adds	r2, #8
 8001090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001094:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	f003 0307 	and.w	r3, r3, #7
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	220f      	movs	r2, #15
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	691a      	ldr	r2, [r3, #16]
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	08da      	lsrs	r2, r3, #3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3208      	adds	r2, #8
 80010ca:	69b9      	ldr	r1, [r7, #24]
 80010cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	2203      	movs	r2, #3
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0203 	and.w	r2, r3, #3
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800110c:	2b00      	cmp	r3, #0
 800110e:	f000 80c0 	beq.w	8001292 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b66      	ldr	r3, [pc, #408]	; (80012b0 <HAL_GPIO_Init+0x324>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	4a65      	ldr	r2, [pc, #404]	; (80012b0 <HAL_GPIO_Init+0x324>)
 800111c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001120:	6453      	str	r3, [r2, #68]	; 0x44
 8001122:	4b63      	ldr	r3, [pc, #396]	; (80012b0 <HAL_GPIO_Init+0x324>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800112e:	4a61      	ldr	r2, [pc, #388]	; (80012b4 <HAL_GPIO_Init+0x328>)
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	089b      	lsrs	r3, r3, #2
 8001134:	3302      	adds	r3, #2
 8001136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	220f      	movs	r2, #15
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a58      	ldr	r2, [pc, #352]	; (80012b8 <HAL_GPIO_Init+0x32c>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d037      	beq.n	80011ca <HAL_GPIO_Init+0x23e>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a57      	ldr	r2, [pc, #348]	; (80012bc <HAL_GPIO_Init+0x330>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d031      	beq.n	80011c6 <HAL_GPIO_Init+0x23a>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a56      	ldr	r2, [pc, #344]	; (80012c0 <HAL_GPIO_Init+0x334>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d02b      	beq.n	80011c2 <HAL_GPIO_Init+0x236>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a55      	ldr	r2, [pc, #340]	; (80012c4 <HAL_GPIO_Init+0x338>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d025      	beq.n	80011be <HAL_GPIO_Init+0x232>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a54      	ldr	r2, [pc, #336]	; (80012c8 <HAL_GPIO_Init+0x33c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d01f      	beq.n	80011ba <HAL_GPIO_Init+0x22e>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a53      	ldr	r2, [pc, #332]	; (80012cc <HAL_GPIO_Init+0x340>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d019      	beq.n	80011b6 <HAL_GPIO_Init+0x22a>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a52      	ldr	r2, [pc, #328]	; (80012d0 <HAL_GPIO_Init+0x344>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d013      	beq.n	80011b2 <HAL_GPIO_Init+0x226>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a51      	ldr	r2, [pc, #324]	; (80012d4 <HAL_GPIO_Init+0x348>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d00d      	beq.n	80011ae <HAL_GPIO_Init+0x222>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a50      	ldr	r2, [pc, #320]	; (80012d8 <HAL_GPIO_Init+0x34c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d007      	beq.n	80011aa <HAL_GPIO_Init+0x21e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4f      	ldr	r2, [pc, #316]	; (80012dc <HAL_GPIO_Init+0x350>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d101      	bne.n	80011a6 <HAL_GPIO_Init+0x21a>
 80011a2:	2309      	movs	r3, #9
 80011a4:	e012      	b.n	80011cc <HAL_GPIO_Init+0x240>
 80011a6:	230a      	movs	r3, #10
 80011a8:	e010      	b.n	80011cc <HAL_GPIO_Init+0x240>
 80011aa:	2308      	movs	r3, #8
 80011ac:	e00e      	b.n	80011cc <HAL_GPIO_Init+0x240>
 80011ae:	2307      	movs	r3, #7
 80011b0:	e00c      	b.n	80011cc <HAL_GPIO_Init+0x240>
 80011b2:	2306      	movs	r3, #6
 80011b4:	e00a      	b.n	80011cc <HAL_GPIO_Init+0x240>
 80011b6:	2305      	movs	r3, #5
 80011b8:	e008      	b.n	80011cc <HAL_GPIO_Init+0x240>
 80011ba:	2304      	movs	r3, #4
 80011bc:	e006      	b.n	80011cc <HAL_GPIO_Init+0x240>
 80011be:	2303      	movs	r3, #3
 80011c0:	e004      	b.n	80011cc <HAL_GPIO_Init+0x240>
 80011c2:	2302      	movs	r3, #2
 80011c4:	e002      	b.n	80011cc <HAL_GPIO_Init+0x240>
 80011c6:	2301      	movs	r3, #1
 80011c8:	e000      	b.n	80011cc <HAL_GPIO_Init+0x240>
 80011ca:	2300      	movs	r3, #0
 80011cc:	69fa      	ldr	r2, [r7, #28]
 80011ce:	f002 0203 	and.w	r2, r2, #3
 80011d2:	0092      	lsls	r2, r2, #2
 80011d4:	4093      	lsls	r3, r2
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011dc:	4935      	ldr	r1, [pc, #212]	; (80012b4 <HAL_GPIO_Init+0x328>)
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	089b      	lsrs	r3, r3, #2
 80011e2:	3302      	adds	r3, #2
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ea:	4b3d      	ldr	r3, [pc, #244]	; (80012e0 <HAL_GPIO_Init+0x354>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800120e:	4a34      	ldr	r2, [pc, #208]	; (80012e0 <HAL_GPIO_Init+0x354>)
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001214:	4b32      	ldr	r3, [pc, #200]	; (80012e0 <HAL_GPIO_Init+0x354>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001238:	4a29      	ldr	r2, [pc, #164]	; (80012e0 <HAL_GPIO_Init+0x354>)
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800123e:	4b28      	ldr	r3, [pc, #160]	; (80012e0 <HAL_GPIO_Init+0x354>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001262:	4a1f      	ldr	r2, [pc, #124]	; (80012e0 <HAL_GPIO_Init+0x354>)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001268:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <HAL_GPIO_Init+0x354>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800128c:	4a14      	ldr	r2, [pc, #80]	; (80012e0 <HAL_GPIO_Init+0x354>)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3301      	adds	r3, #1
 8001296:	61fb      	str	r3, [r7, #28]
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	2b0f      	cmp	r3, #15
 800129c:	f67f ae84 	bls.w	8000fa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
 80012a4:	3724      	adds	r7, #36	; 0x24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40013800 	.word	0x40013800
 80012b8:	40020000 	.word	0x40020000
 80012bc:	40020400 	.word	0x40020400
 80012c0:	40020800 	.word	0x40020800
 80012c4:	40020c00 	.word	0x40020c00
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40021400 	.word	0x40021400
 80012d0:	40021800 	.word	0x40021800
 80012d4:	40021c00 	.word	0x40021c00
 80012d8:	40022000 	.word	0x40022000
 80012dc:	40022400 	.word	0x40022400
 80012e0:	40013c00 	.word	0x40013c00

080012e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	807b      	strh	r3, [r7, #2]
 80012f0:	4613      	mov	r3, r2
 80012f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012f4:	787b      	ldrb	r3, [r7, #1]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012fa:	887a      	ldrh	r2, [r7, #2]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001300:	e003      	b.n	800130a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001302:	887b      	ldrh	r3, [r7, #2]
 8001304:	041a      	lsls	r2, r3, #16
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	619a      	str	r2, [r3, #24]
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001316:	b480      	push	{r7}
 8001318:	b085      	sub	sp, #20
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
 800131e:	460b      	mov	r3, r1
 8001320:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001328:	887a      	ldrh	r2, [r7, #2]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	4013      	ands	r3, r2
 800132e:	041a      	lsls	r2, r3, #16
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	43d9      	mvns	r1, r3
 8001334:	887b      	ldrh	r3, [r7, #2]
 8001336:	400b      	ands	r3, r1
 8001338:	431a      	orrs	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	619a      	str	r2, [r3, #24]
}
 800133e:	bf00      	nop
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e267      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b00      	cmp	r3, #0
 8001368:	d075      	beq.n	8001456 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800136a:	4b88      	ldr	r3, [pc, #544]	; (800158c <HAL_RCC_OscConfig+0x240>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 030c 	and.w	r3, r3, #12
 8001372:	2b04      	cmp	r3, #4
 8001374:	d00c      	beq.n	8001390 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001376:	4b85      	ldr	r3, [pc, #532]	; (800158c <HAL_RCC_OscConfig+0x240>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800137e:	2b08      	cmp	r3, #8
 8001380:	d112      	bne.n	80013a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001382:	4b82      	ldr	r3, [pc, #520]	; (800158c <HAL_RCC_OscConfig+0x240>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800138a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800138e:	d10b      	bne.n	80013a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001390:	4b7e      	ldr	r3, [pc, #504]	; (800158c <HAL_RCC_OscConfig+0x240>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d05b      	beq.n	8001454 <HAL_RCC_OscConfig+0x108>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d157      	bne.n	8001454 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e242      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b0:	d106      	bne.n	80013c0 <HAL_RCC_OscConfig+0x74>
 80013b2:	4b76      	ldr	r3, [pc, #472]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a75      	ldr	r2, [pc, #468]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80013b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	e01d      	b.n	80013fc <HAL_RCC_OscConfig+0xb0>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013c8:	d10c      	bne.n	80013e4 <HAL_RCC_OscConfig+0x98>
 80013ca:	4b70      	ldr	r3, [pc, #448]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a6f      	ldr	r2, [pc, #444]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80013d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	4b6d      	ldr	r3, [pc, #436]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a6c      	ldr	r2, [pc, #432]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80013dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	e00b      	b.n	80013fc <HAL_RCC_OscConfig+0xb0>
 80013e4:	4b69      	ldr	r3, [pc, #420]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a68      	ldr	r2, [pc, #416]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80013ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	4b66      	ldr	r3, [pc, #408]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a65      	ldr	r2, [pc, #404]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80013f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d013      	beq.n	800142c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001404:	f7ff fca4 	bl	8000d50 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800140c:	f7ff fca0 	bl	8000d50 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b64      	cmp	r3, #100	; 0x64
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e207      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141e:	4b5b      	ldr	r3, [pc, #364]	; (800158c <HAL_RCC_OscConfig+0x240>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f0      	beq.n	800140c <HAL_RCC_OscConfig+0xc0>
 800142a:	e014      	b.n	8001456 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142c:	f7ff fc90 	bl	8000d50 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001434:	f7ff fc8c 	bl	8000d50 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b64      	cmp	r3, #100	; 0x64
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e1f3      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001446:	4b51      	ldr	r3, [pc, #324]	; (800158c <HAL_RCC_OscConfig+0x240>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f0      	bne.n	8001434 <HAL_RCC_OscConfig+0xe8>
 8001452:	e000      	b.n	8001456 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d063      	beq.n	800152a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001462:	4b4a      	ldr	r3, [pc, #296]	; (800158c <HAL_RCC_OscConfig+0x240>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 030c 	and.w	r3, r3, #12
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00b      	beq.n	8001486 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800146e:	4b47      	ldr	r3, [pc, #284]	; (800158c <HAL_RCC_OscConfig+0x240>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001476:	2b08      	cmp	r3, #8
 8001478:	d11c      	bne.n	80014b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800147a:	4b44      	ldr	r3, [pc, #272]	; (800158c <HAL_RCC_OscConfig+0x240>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d116      	bne.n	80014b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001486:	4b41      	ldr	r3, [pc, #260]	; (800158c <HAL_RCC_OscConfig+0x240>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d005      	beq.n	800149e <HAL_RCC_OscConfig+0x152>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d001      	beq.n	800149e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e1c7      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149e:	4b3b      	ldr	r3, [pc, #236]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	4937      	ldr	r1, [pc, #220]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b2:	e03a      	b.n	800152a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d020      	beq.n	80014fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014bc:	4b34      	ldr	r3, [pc, #208]	; (8001590 <HAL_RCC_OscConfig+0x244>)
 80014be:	2201      	movs	r2, #1
 80014c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c2:	f7ff fc45 	bl	8000d50 <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ca:	f7ff fc41 	bl	8000d50 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e1a8      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014dc:	4b2b      	ldr	r3, [pc, #172]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0f0      	beq.n	80014ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e8:	4b28      	ldr	r3, [pc, #160]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	4925      	ldr	r1, [pc, #148]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	600b      	str	r3, [r1, #0]
 80014fc:	e015      	b.n	800152a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014fe:	4b24      	ldr	r3, [pc, #144]	; (8001590 <HAL_RCC_OscConfig+0x244>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001504:	f7ff fc24 	bl	8000d50 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800150c:	f7ff fc20 	bl	8000d50 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e187      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800151e:	4b1b      	ldr	r3, [pc, #108]	; (800158c <HAL_RCC_OscConfig+0x240>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	2b00      	cmp	r3, #0
 8001534:	d036      	beq.n	80015a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d016      	beq.n	800156c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <HAL_RCC_OscConfig+0x248>)
 8001540:	2201      	movs	r2, #1
 8001542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001544:	f7ff fc04 	bl	8000d50 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800154c:	f7ff fc00 	bl	8000d50 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e167      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <HAL_RCC_OscConfig+0x240>)
 8001560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0f0      	beq.n	800154c <HAL_RCC_OscConfig+0x200>
 800156a:	e01b      	b.n	80015a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800156c:	4b09      	ldr	r3, [pc, #36]	; (8001594 <HAL_RCC_OscConfig+0x248>)
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001572:	f7ff fbed 	bl	8000d50 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001578:	e00e      	b.n	8001598 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800157a:	f7ff fbe9 	bl	8000d50 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d907      	bls.n	8001598 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e150      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
 800158c:	40023800 	.word	0x40023800
 8001590:	42470000 	.word	0x42470000
 8001594:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001598:	4b88      	ldr	r3, [pc, #544]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 800159a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1ea      	bne.n	800157a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 8097 	beq.w	80016e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015b2:	2300      	movs	r3, #0
 80015b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015b6:	4b81      	ldr	r3, [pc, #516]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d10f      	bne.n	80015e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	4b7d      	ldr	r3, [pc, #500]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	4a7c      	ldr	r2, [pc, #496]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 80015cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d0:	6413      	str	r3, [r2, #64]	; 0x40
 80015d2:	4b7a      	ldr	r3, [pc, #488]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015de:	2301      	movs	r3, #1
 80015e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e2:	4b77      	ldr	r3, [pc, #476]	; (80017c0 <HAL_RCC_OscConfig+0x474>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d118      	bne.n	8001620 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ee:	4b74      	ldr	r3, [pc, #464]	; (80017c0 <HAL_RCC_OscConfig+0x474>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a73      	ldr	r2, [pc, #460]	; (80017c0 <HAL_RCC_OscConfig+0x474>)
 80015f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015fa:	f7ff fba9 	bl	8000d50 <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001602:	f7ff fba5 	bl	8000d50 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e10c      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001614:	4b6a      	ldr	r3, [pc, #424]	; (80017c0 <HAL_RCC_OscConfig+0x474>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0f0      	beq.n	8001602 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d106      	bne.n	8001636 <HAL_RCC_OscConfig+0x2ea>
 8001628:	4b64      	ldr	r3, [pc, #400]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 800162a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162c:	4a63      	ldr	r2, [pc, #396]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6713      	str	r3, [r2, #112]	; 0x70
 8001634:	e01c      	b.n	8001670 <HAL_RCC_OscConfig+0x324>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b05      	cmp	r3, #5
 800163c:	d10c      	bne.n	8001658 <HAL_RCC_OscConfig+0x30c>
 800163e:	4b5f      	ldr	r3, [pc, #380]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 8001640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001642:	4a5e      	ldr	r2, [pc, #376]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 8001644:	f043 0304 	orr.w	r3, r3, #4
 8001648:	6713      	str	r3, [r2, #112]	; 0x70
 800164a:	4b5c      	ldr	r3, [pc, #368]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 800164c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164e:	4a5b      	ldr	r2, [pc, #364]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6713      	str	r3, [r2, #112]	; 0x70
 8001656:	e00b      	b.n	8001670 <HAL_RCC_OscConfig+0x324>
 8001658:	4b58      	ldr	r3, [pc, #352]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 800165a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165c:	4a57      	ldr	r2, [pc, #348]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 800165e:	f023 0301 	bic.w	r3, r3, #1
 8001662:	6713      	str	r3, [r2, #112]	; 0x70
 8001664:	4b55      	ldr	r3, [pc, #340]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 8001666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001668:	4a54      	ldr	r2, [pc, #336]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 800166a:	f023 0304 	bic.w	r3, r3, #4
 800166e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d015      	beq.n	80016a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001678:	f7ff fb6a 	bl	8000d50 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800167e:	e00a      	b.n	8001696 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001680:	f7ff fb66 	bl	8000d50 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	f241 3288 	movw	r2, #5000	; 0x1388
 800168e:	4293      	cmp	r3, r2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e0cb      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001696:	4b49      	ldr	r3, [pc, #292]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 8001698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0ee      	beq.n	8001680 <HAL_RCC_OscConfig+0x334>
 80016a2:	e014      	b.n	80016ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a4:	f7ff fb54 	bl	8000d50 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016aa:	e00a      	b.n	80016c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ac:	f7ff fb50 	bl	8000d50 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e0b5      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c2:	4b3e      	ldr	r3, [pc, #248]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 80016c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1ee      	bne.n	80016ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016ce:	7dfb      	ldrb	r3, [r7, #23]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d105      	bne.n	80016e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016d4:	4b39      	ldr	r3, [pc, #228]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	4a38      	ldr	r2, [pc, #224]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 80016da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 80a1 	beq.w	800182c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016ea:	4b34      	ldr	r3, [pc, #208]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 030c 	and.w	r3, r3, #12
 80016f2:	2b08      	cmp	r3, #8
 80016f4:	d05c      	beq.n	80017b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d141      	bne.n	8001782 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fe:	4b31      	ldr	r3, [pc, #196]	; (80017c4 <HAL_RCC_OscConfig+0x478>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff fb24 	bl	8000d50 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800170c:	f7ff fb20 	bl	8000d50 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e087      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171e:	4b27      	ldr	r3, [pc, #156]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69da      	ldr	r2, [r3, #28]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001738:	019b      	lsls	r3, r3, #6
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001740:	085b      	lsrs	r3, r3, #1
 8001742:	3b01      	subs	r3, #1
 8001744:	041b      	lsls	r3, r3, #16
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174c:	061b      	lsls	r3, r3, #24
 800174e:	491b      	ldr	r1, [pc, #108]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001754:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <HAL_RCC_OscConfig+0x478>)
 8001756:	2201      	movs	r2, #1
 8001758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175a:	f7ff faf9 	bl	8000d50 <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001762:	f7ff faf5 	bl	8000d50 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e05c      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0f0      	beq.n	8001762 <HAL_RCC_OscConfig+0x416>
 8001780:	e054      	b.n	800182c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HAL_RCC_OscConfig+0x478>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001788:	f7ff fae2 	bl	8000d50 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001790:	f7ff fade 	bl	8000d50 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e045      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x444>
 80017ae:	e03d      	b.n	800182c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d107      	bne.n	80017c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e038      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40007000 	.word	0x40007000
 80017c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017c8:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <HAL_RCC_OscConfig+0x4ec>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d028      	beq.n	8001828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d121      	bne.n	8001828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d11a      	bne.n	8001828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017f8:	4013      	ands	r3, r2
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001800:	4293      	cmp	r3, r2
 8001802:	d111      	bne.n	8001828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180e:	085b      	lsrs	r3, r3, #1
 8001810:	3b01      	subs	r3, #1
 8001812:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001814:	429a      	cmp	r2, r3
 8001816:	d107      	bne.n	8001828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001822:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001824:	429a      	cmp	r2, r3
 8001826:	d001      	beq.n	800182c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e000      	b.n	800182e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800

0800183c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e0cc      	b.n	80019ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001850:	4b68      	ldr	r3, [pc, #416]	; (80019f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 030f 	and.w	r3, r3, #15
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	d90c      	bls.n	8001878 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185e:	4b65      	ldr	r3, [pc, #404]	; (80019f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001866:	4b63      	ldr	r3, [pc, #396]	; (80019f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	429a      	cmp	r2, r3
 8001872:	d001      	beq.n	8001878 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e0b8      	b.n	80019ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d020      	beq.n	80018c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	d005      	beq.n	800189c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001890:	4b59      	ldr	r3, [pc, #356]	; (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	4a58      	ldr	r2, [pc, #352]	; (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800189a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0308 	and.w	r3, r3, #8
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d005      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018a8:	4b53      	ldr	r3, [pc, #332]	; (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	4a52      	ldr	r2, [pc, #328]	; (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b4:	4b50      	ldr	r3, [pc, #320]	; (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	494d      	ldr	r1, [pc, #308]	; (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d044      	beq.n	800195c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d107      	bne.n	80018ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018da:	4b47      	ldr	r3, [pc, #284]	; (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d119      	bne.n	800191a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e07f      	b.n	80019ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d003      	beq.n	80018fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018f6:	2b03      	cmp	r3, #3
 80018f8:	d107      	bne.n	800190a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018fa:	4b3f      	ldr	r3, [pc, #252]	; (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d109      	bne.n	800191a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e06f      	b.n	80019ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800190a:	4b3b      	ldr	r3, [pc, #236]	; (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e067      	b.n	80019ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800191a:	4b37      	ldr	r3, [pc, #220]	; (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f023 0203 	bic.w	r2, r3, #3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	4934      	ldr	r1, [pc, #208]	; (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	4313      	orrs	r3, r2
 800192a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800192c:	f7ff fa10 	bl	8000d50 <HAL_GetTick>
 8001930:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001932:	e00a      	b.n	800194a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001934:	f7ff fa0c 	bl	8000d50 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001942:	4293      	cmp	r3, r2
 8001944:	d901      	bls.n	800194a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e04f      	b.n	80019ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194a:	4b2b      	ldr	r3, [pc, #172]	; (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 020c 	and.w	r2, r3, #12
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	429a      	cmp	r2, r3
 800195a:	d1eb      	bne.n	8001934 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800195c:	4b25      	ldr	r3, [pc, #148]	; (80019f4 <HAL_RCC_ClockConfig+0x1b8>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 030f 	and.w	r3, r3, #15
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	429a      	cmp	r2, r3
 8001968:	d20c      	bcs.n	8001984 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196a:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <HAL_RCC_ClockConfig+0x1b8>)
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001972:	4b20      	ldr	r3, [pc, #128]	; (80019f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	429a      	cmp	r2, r3
 800197e:	d001      	beq.n	8001984 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e032      	b.n	80019ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	d008      	beq.n	80019a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001990:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	4916      	ldr	r1, [pc, #88]	; (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d009      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019ae:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	490e      	ldr	r1, [pc, #56]	; (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019c2:	f000 f821 	bl	8001a08 <HAL_RCC_GetSysClockFreq>
 80019c6:	4602      	mov	r2, r0
 80019c8:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	091b      	lsrs	r3, r3, #4
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	490a      	ldr	r1, [pc, #40]	; (80019fc <HAL_RCC_ClockConfig+0x1c0>)
 80019d4:	5ccb      	ldrb	r3, [r1, r3]
 80019d6:	fa22 f303 	lsr.w	r3, r2, r3
 80019da:	4a09      	ldr	r2, [pc, #36]	; (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 80019dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <HAL_RCC_ClockConfig+0x1c8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff f970 	bl	8000cc8 <HAL_InitTick>

  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40023c00 	.word	0x40023c00
 80019f8:	40023800 	.word	0x40023800
 80019fc:	0800415c 	.word	0x0800415c
 8001a00:	20000000 	.word	0x20000000
 8001a04:	20000004 	.word	0x20000004

08001a08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a0c:	b094      	sub	sp, #80	; 0x50
 8001a0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a10:	2300      	movs	r3, #0
 8001a12:	647b      	str	r3, [r7, #68]	; 0x44
 8001a14:	2300      	movs	r3, #0
 8001a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a18:	2300      	movs	r3, #0
 8001a1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a20:	4b79      	ldr	r3, [pc, #484]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 030c 	and.w	r3, r3, #12
 8001a28:	2b08      	cmp	r3, #8
 8001a2a:	d00d      	beq.n	8001a48 <HAL_RCC_GetSysClockFreq+0x40>
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	f200 80e1 	bhi.w	8001bf4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d002      	beq.n	8001a3c <HAL_RCC_GetSysClockFreq+0x34>
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	d003      	beq.n	8001a42 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a3a:	e0db      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a3c:	4b73      	ldr	r3, [pc, #460]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x204>)
 8001a3e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a40:	e0db      	b.n	8001bfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a42:	4b73      	ldr	r3, [pc, #460]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a46:	e0d8      	b.n	8001bfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a48:	4b6f      	ldr	r3, [pc, #444]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a50:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a52:	4b6d      	ldr	r3, [pc, #436]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d063      	beq.n	8001b26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a5e:	4b6a      	ldr	r3, [pc, #424]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	099b      	lsrs	r3, r3, #6
 8001a64:	2200      	movs	r2, #0
 8001a66:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a70:	633b      	str	r3, [r7, #48]	; 0x30
 8001a72:	2300      	movs	r3, #0
 8001a74:	637b      	str	r3, [r7, #52]	; 0x34
 8001a76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a7a:	4622      	mov	r2, r4
 8001a7c:	462b      	mov	r3, r5
 8001a7e:	f04f 0000 	mov.w	r0, #0
 8001a82:	f04f 0100 	mov.w	r1, #0
 8001a86:	0159      	lsls	r1, r3, #5
 8001a88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a8c:	0150      	lsls	r0, r2, #5
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4621      	mov	r1, r4
 8001a94:	1a51      	subs	r1, r2, r1
 8001a96:	6139      	str	r1, [r7, #16]
 8001a98:	4629      	mov	r1, r5
 8001a9a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001aac:	4659      	mov	r1, fp
 8001aae:	018b      	lsls	r3, r1, #6
 8001ab0:	4651      	mov	r1, sl
 8001ab2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ab6:	4651      	mov	r1, sl
 8001ab8:	018a      	lsls	r2, r1, #6
 8001aba:	4651      	mov	r1, sl
 8001abc:	ebb2 0801 	subs.w	r8, r2, r1
 8001ac0:	4659      	mov	r1, fp
 8001ac2:	eb63 0901 	sbc.w	r9, r3, r1
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	f04f 0300 	mov.w	r3, #0
 8001ace:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ad2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ad6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ada:	4690      	mov	r8, r2
 8001adc:	4699      	mov	r9, r3
 8001ade:	4623      	mov	r3, r4
 8001ae0:	eb18 0303 	adds.w	r3, r8, r3
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	462b      	mov	r3, r5
 8001ae8:	eb49 0303 	adc.w	r3, r9, r3
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001afa:	4629      	mov	r1, r5
 8001afc:	024b      	lsls	r3, r1, #9
 8001afe:	4621      	mov	r1, r4
 8001b00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b04:	4621      	mov	r1, r4
 8001b06:	024a      	lsls	r2, r1, #9
 8001b08:	4610      	mov	r0, r2
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b0e:	2200      	movs	r2, #0
 8001b10:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b18:	f7fe fbba 	bl	8000290 <__aeabi_uldivmod>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4613      	mov	r3, r2
 8001b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b24:	e058      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b26:	4b38      	ldr	r3, [pc, #224]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	099b      	lsrs	r3, r3, #6
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	4611      	mov	r1, r2
 8001b32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b36:	623b      	str	r3, [r7, #32]
 8001b38:	2300      	movs	r3, #0
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b40:	4642      	mov	r2, r8
 8001b42:	464b      	mov	r3, r9
 8001b44:	f04f 0000 	mov.w	r0, #0
 8001b48:	f04f 0100 	mov.w	r1, #0
 8001b4c:	0159      	lsls	r1, r3, #5
 8001b4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b52:	0150      	lsls	r0, r2, #5
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4641      	mov	r1, r8
 8001b5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b5e:	4649      	mov	r1, r9
 8001b60:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	f04f 0300 	mov.w	r3, #0
 8001b6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b78:	ebb2 040a 	subs.w	r4, r2, sl
 8001b7c:	eb63 050b 	sbc.w	r5, r3, fp
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	00eb      	lsls	r3, r5, #3
 8001b8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b8e:	00e2      	lsls	r2, r4, #3
 8001b90:	4614      	mov	r4, r2
 8001b92:	461d      	mov	r5, r3
 8001b94:	4643      	mov	r3, r8
 8001b96:	18e3      	adds	r3, r4, r3
 8001b98:	603b      	str	r3, [r7, #0]
 8001b9a:	464b      	mov	r3, r9
 8001b9c:	eb45 0303 	adc.w	r3, r5, r3
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	f04f 0300 	mov.w	r3, #0
 8001baa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bae:	4629      	mov	r1, r5
 8001bb0:	028b      	lsls	r3, r1, #10
 8001bb2:	4621      	mov	r1, r4
 8001bb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bb8:	4621      	mov	r1, r4
 8001bba:	028a      	lsls	r2, r1, #10
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	61bb      	str	r3, [r7, #24]
 8001bc6:	61fa      	str	r2, [r7, #28]
 8001bc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bcc:	f7fe fb60 	bl	8000290 <__aeabi_uldivmod>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	0c1b      	lsrs	r3, r3, #16
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	3301      	adds	r3, #1
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001be8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bf2:	e002      	b.n	8001bfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bf4:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x204>)
 8001bf6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3750      	adds	r7, #80	; 0x50
 8001c00:	46bd      	mov	sp, r7
 8001c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	00f42400 	.word	0x00f42400
 8001c10:	007a1200 	.word	0x007a1200

08001c14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c18:	4b03      	ldr	r3, [pc, #12]	; (8001c28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000000 	.word	0x20000000

08001c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c30:	f7ff fff0 	bl	8001c14 <HAL_RCC_GetHCLKFreq>
 8001c34:	4602      	mov	r2, r0
 8001c36:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	0a9b      	lsrs	r3, r3, #10
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	4903      	ldr	r1, [pc, #12]	; (8001c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c42:	5ccb      	ldrb	r3, [r1, r3]
 8001c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	0800416c 	.word	0x0800416c

08001c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c58:	f7ff ffdc 	bl	8001c14 <HAL_RCC_GetHCLKFreq>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	0b5b      	lsrs	r3, r3, #13
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	4903      	ldr	r1, [pc, #12]	; (8001c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c6a:	5ccb      	ldrb	r3, [r1, r3]
 8001c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40023800 	.word	0x40023800
 8001c78:	0800416c 	.word	0x0800416c

08001c7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10b      	bne.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d105      	bne.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d075      	beq.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001cb0:	4b91      	ldr	r3, [pc, #580]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001cb6:	f7ff f84b 	bl	8000d50 <HAL_GetTick>
 8001cba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001cbe:	f7ff f847 	bl	8000d50 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e189      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001cd0:	4b8a      	ldr	r3, [pc, #552]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1f0      	bne.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d009      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	019a      	lsls	r2, r3, #6
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	071b      	lsls	r3, r3, #28
 8001cf4:	4981      	ldr	r1, [pc, #516]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d01f      	beq.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001d08:	4b7c      	ldr	r3, [pc, #496]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d0e:	0f1b      	lsrs	r3, r3, #28
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	019a      	lsls	r2, r3, #6
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	061b      	lsls	r3, r3, #24
 8001d22:	431a      	orrs	r2, r3
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	071b      	lsls	r3, r3, #28
 8001d28:	4974      	ldr	r1, [pc, #464]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001d30:	4b72      	ldr	r3, [pc, #456]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d36:	f023 021f 	bic.w	r2, r3, #31
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	496e      	ldr	r1, [pc, #440]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00d      	beq.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	019a      	lsls	r2, r3, #6
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	061b      	lsls	r3, r3, #24
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	071b      	lsls	r3, r3, #28
 8001d68:	4964      	ldr	r1, [pc, #400]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001d70:	4b61      	ldr	r3, [pc, #388]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d76:	f7fe ffeb 	bl	8000d50 <HAL_GetTick>
 8001d7a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001d7e:	f7fe ffe7 	bl	8000d50 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e129      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d90:	4b5a      	ldr	r3, [pc, #360]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f0      	beq.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d105      	bne.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d079      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001db4:	4b52      	ldr	r3, [pc, #328]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001dba:	f7fe ffc9 	bl	8000d50 <HAL_GetTick>
 8001dbe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001dc2:	f7fe ffc5 	bl	8000d50 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e107      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001dd4:	4b49      	ldr	r3, [pc, #292]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ddc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001de0:	d0ef      	beq.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0304 	and.w	r3, r3, #4
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d020      	beq.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001dee:	4b43      	ldr	r3, [pc, #268]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001df4:	0f1b      	lsrs	r3, r3, #28
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	019a      	lsls	r2, r3, #6
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	061b      	lsls	r3, r3, #24
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	071b      	lsls	r3, r3, #28
 8001e0e:	493b      	ldr	r1, [pc, #236]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001e16:	4b39      	ldr	r3, [pc, #228]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	3b01      	subs	r3, #1
 8001e26:	021b      	lsls	r3, r3, #8
 8001e28:	4934      	ldr	r1, [pc, #208]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d01e      	beq.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001e3c:	4b2f      	ldr	r3, [pc, #188]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e42:	0e1b      	lsrs	r3, r3, #24
 8001e44:	f003 030f 	and.w	r3, r3, #15
 8001e48:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	019a      	lsls	r2, r3, #6
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	061b      	lsls	r3, r3, #24
 8001e54:	431a      	orrs	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	071b      	lsls	r3, r3, #28
 8001e5c:	4927      	ldr	r1, [pc, #156]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001e64:	4b25      	ldr	r3, [pc, #148]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e6a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	4922      	ldr	r1, [pc, #136]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001e7a:	4b21      	ldr	r3, [pc, #132]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e80:	f7fe ff66 	bl	8000d50 <HAL_GetTick>
 8001e84:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001e88:	f7fe ff62 	bl	8000d50 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e0a4      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001e9a:	4b18      	ldr	r3, [pc, #96]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ea2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ea6:	d1ef      	bne.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0320 	and.w	r3, r3, #32
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f000 808b 	beq.w	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	4b10      	ldr	r3, [pc, #64]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	4a0f      	ldr	r2, [pc, #60]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec6:	4b0d      	ldr	r3, [pc, #52]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001ed2:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a0b      	ldr	r2, [pc, #44]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8001ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001edc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ede:	f7fe ff37 	bl	8000d50 <HAL_GetTick>
 8001ee2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001ee4:	e010      	b.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001ee6:	f7fe ff33 	bl	8000d50 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d909      	bls.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e075      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8001ef8:	42470068 	.word	0x42470068
 8001efc:	40023800 	.word	0x40023800
 8001f00:	42470070 	.word	0x42470070
 8001f04:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001f08:	4b38      	ldr	r3, [pc, #224]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0e8      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f14:	4b36      	ldr	r3, [pc, #216]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f1c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d02f      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d028      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f32:	4b2f      	ldr	r3, [pc, #188]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f3a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f3c:	4b2d      	ldr	r3, [pc, #180]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f42:	4b2c      	ldr	r3, [pc, #176]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001f48:	4a29      	ldr	r2, [pc, #164]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f4e:	4b28      	ldr	r3, [pc, #160]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d114      	bne.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001f5a:	f7fe fef9 	bl	8000d50 <HAL_GetTick>
 8001f5e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f60:	e00a      	b.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f62:	f7fe fef5 	bl	8000d50 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e035      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f78:	4b1d      	ldr	r3, [pc, #116]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0ee      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f90:	d10d      	bne.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x332>
 8001f92:	4b17      	ldr	r3, [pc, #92]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fa6:	4912      	ldr	r1, [pc, #72]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	608b      	str	r3, [r1, #8]
 8001fac:	e005      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8001fae:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	4a0f      	ldr	r2, [pc, #60]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001fb4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001fb8:	6093      	str	r3, [r2, #8]
 8001fba:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001fbc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc6:	490a      	ldr	r1, [pc, #40]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0310 	and.w	r3, r3, #16
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d004      	beq.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8001fde:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8001fe0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40007000 	.word	0x40007000
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	42470e40 	.word	0x42470e40
 8001ff8:	424711e0 	.word	0x424711e0

08001ffc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e066      	b.n	80020e0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	7f5b      	ldrb	r3, [r3, #29]
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	d105      	bne.n	8002028 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7fe fcba 	bl	800099c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2202      	movs	r2, #2
 800202c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	22ca      	movs	r2, #202	; 0xca
 8002034:	625a      	str	r2, [r3, #36]	; 0x24
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2253      	movs	r2, #83	; 0x53
 800203c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 fbce 	bl	80027e0 <RTC_EnterInitMode>
 8002044:	4603      	mov	r3, r0
 8002046:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d12c      	bne.n	80020a8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800205c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002060:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6899      	ldr	r1, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	431a      	orrs	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	68d2      	ldr	r2, [r2, #12]
 8002088:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6919      	ldr	r1, [r3, #16]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	041a      	lsls	r2, r3, #16
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 fbd5 	bl	800284e <RTC_ExitInitMode>
 80020a4:	4603      	mov	r3, r0
 80020a6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d113      	bne.n	80020d6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020bc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	699a      	ldr	r2, [r3, #24]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	22ff      	movs	r2, #255	; 0xff
 80020dc:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80020de:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80020e8:	b590      	push	{r4, r7, lr}
 80020ea:	b087      	sub	sp, #28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	7f1b      	ldrb	r3, [r3, #28]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <HAL_RTC_SetTime+0x1c>
 8002100:	2302      	movs	r3, #2
 8002102:	e087      	b.n	8002214 <HAL_RTC_SetTime+0x12c>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2201      	movs	r2, #1
 8002108:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2202      	movs	r2, #2
 800210e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d126      	bne.n	8002164 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002120:	2b00      	cmp	r3, #0
 8002122:	d102      	bne.n	800212a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2200      	movs	r2, #0
 8002128:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f000 fbb2 	bl	8002898 <RTC_ByteToBcd2>
 8002134:	4603      	mov	r3, r0
 8002136:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	785b      	ldrb	r3, [r3, #1]
 800213c:	4618      	mov	r0, r3
 800213e:	f000 fbab 	bl	8002898 <RTC_ByteToBcd2>
 8002142:	4603      	mov	r3, r0
 8002144:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002146:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	789b      	ldrb	r3, [r3, #2]
 800214c:	4618      	mov	r0, r3
 800214e:	f000 fba3 	bl	8002898 <RTC_ByteToBcd2>
 8002152:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002154:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	78db      	ldrb	r3, [r3, #3]
 800215c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800215e:	4313      	orrs	r3, r2
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	e018      	b.n	8002196 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216e:	2b00      	cmp	r3, #0
 8002170:	d102      	bne.n	8002178 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2200      	movs	r2, #0
 8002176:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	785b      	ldrb	r3, [r3, #1]
 8002182:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002184:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800218a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	78db      	ldrb	r3, [r3, #3]
 8002190:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002192:	4313      	orrs	r3, r2
 8002194:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	22ca      	movs	r2, #202	; 0xca
 800219c:	625a      	str	r2, [r3, #36]	; 0x24
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2253      	movs	r2, #83	; 0x53
 80021a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 fb1a 	bl	80027e0 <RTC_EnterInitMode>
 80021ac:	4603      	mov	r3, r0
 80021ae:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80021b0:	7cfb      	ldrb	r3, [r7, #19]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d120      	bne.n	80021f8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80021c0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80021c4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021d4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6899      	ldr	r1, [r3, #8]
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	431a      	orrs	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 fb2d 	bl	800284e <RTC_ExitInitMode>
 80021f4:	4603      	mov	r3, r0
 80021f6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80021f8:	7cfb      	ldrb	r3, [r7, #19]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d102      	bne.n	8002204 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2201      	movs	r2, #1
 8002202:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	22ff      	movs	r2, #255	; 0xff
 800220a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	771a      	strb	r2, [r3, #28]

  return status;
 8002212:	7cfb      	ldrb	r3, [r7, #19]
}
 8002214:	4618      	mov	r0, r3
 8002216:	371c      	adds	r7, #28
 8002218:	46bd      	mov	sp, r7
 800221a:	bd90      	pop	{r4, r7, pc}

0800221c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800224e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002252:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	0c1b      	lsrs	r3, r3, #16
 8002258:	b2db      	uxtb	r3, r3
 800225a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800225e:	b2da      	uxtb	r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	0a1b      	lsrs	r3, r3, #8
 8002268:	b2db      	uxtb	r3, r3
 800226a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800226e:	b2da      	uxtb	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	b2db      	uxtb	r3, r3
 8002278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800227c:	b2da      	uxtb	r2, r3
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	0d9b      	lsrs	r3, r3, #22
 8002286:	b2db      	uxtb	r3, r3
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	b2da      	uxtb	r2, r3
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d11a      	bne.n	80022ce <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f000 fb18 	bl	80028d2 <RTC_Bcd2ToByte>
 80022a2:	4603      	mov	r3, r0
 80022a4:	461a      	mov	r2, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	785b      	ldrb	r3, [r3, #1]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 fb0f 	bl	80028d2 <RTC_Bcd2ToByte>
 80022b4:	4603      	mov	r3, r0
 80022b6:	461a      	mov	r2, r3
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	789b      	ldrb	r3, [r3, #2]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 fb06 	bl	80028d2 <RTC_Bcd2ToByte>
 80022c6:	4603      	mov	r3, r0
 80022c8:	461a      	mov	r2, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80022d8:	b590      	push	{r4, r7, lr}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	7f1b      	ldrb	r3, [r3, #28]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <HAL_RTC_SetDate+0x1c>
 80022f0:	2302      	movs	r3, #2
 80022f2:	e071      	b.n	80023d8 <HAL_RTC_SetDate+0x100>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2201      	movs	r2, #1
 80022f8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2202      	movs	r2, #2
 80022fe:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10e      	bne.n	8002324 <HAL_RTC_SetDate+0x4c>
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	785b      	ldrb	r3, [r3, #1]
 800230a:	f003 0310 	and.w	r3, r3, #16
 800230e:	2b00      	cmp	r3, #0
 8002310:	d008      	beq.n	8002324 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	785b      	ldrb	r3, [r3, #1]
 8002316:	f023 0310 	bic.w	r3, r3, #16
 800231a:	b2db      	uxtb	r3, r3
 800231c:	330a      	adds	r3, #10
 800231e:	b2da      	uxtb	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d11c      	bne.n	8002364 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	78db      	ldrb	r3, [r3, #3]
 800232e:	4618      	mov	r0, r3
 8002330:	f000 fab2 	bl	8002898 <RTC_ByteToBcd2>
 8002334:	4603      	mov	r3, r0
 8002336:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	785b      	ldrb	r3, [r3, #1]
 800233c:	4618      	mov	r0, r3
 800233e:	f000 faab 	bl	8002898 <RTC_ByteToBcd2>
 8002342:	4603      	mov	r3, r0
 8002344:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002346:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	789b      	ldrb	r3, [r3, #2]
 800234c:	4618      	mov	r0, r3
 800234e:	f000 faa3 	bl	8002898 <RTC_ByteToBcd2>
 8002352:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002354:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800235e:	4313      	orrs	r3, r2
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	e00e      	b.n	8002382 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	78db      	ldrb	r3, [r3, #3]
 8002368:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	785b      	ldrb	r3, [r3, #1]
 800236e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002370:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002376:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800237e:	4313      	orrs	r3, r2
 8002380:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	22ca      	movs	r2, #202	; 0xca
 8002388:	625a      	str	r2, [r3, #36]	; 0x24
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2253      	movs	r2, #83	; 0x53
 8002390:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f000 fa24 	bl	80027e0 <RTC_EnterInitMode>
 8002398:	4603      	mov	r3, r0
 800239a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800239c:	7cfb      	ldrb	r3, [r7, #19]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10c      	bne.n	80023bc <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80023ac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80023b0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 fa4b 	bl	800284e <RTC_ExitInitMode>
 80023b8:	4603      	mov	r3, r0
 80023ba:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80023bc:	7cfb      	ldrb	r3, [r7, #19]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d102      	bne.n	80023c8 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2201      	movs	r2, #1
 80023c6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	22ff      	movs	r2, #255	; 0xff
 80023ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	771a      	strb	r2, [r3, #28]

  return status;
 80023d6:	7cfb      	ldrb	r3, [r7, #19]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	371c      	adds	r7, #28
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd90      	pop	{r4, r7, pc}

080023e0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80023fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80023fe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	0c1b      	lsrs	r3, r3, #16
 8002404:	b2da      	uxtb	r2, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	0a1b      	lsrs	r3, r3, #8
 800240e:	b2db      	uxtb	r3, r3
 8002410:	f003 031f 	and.w	r3, r3, #31
 8002414:	b2da      	uxtb	r2, r3
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002422:	b2da      	uxtb	r2, r3
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	0b5b      	lsrs	r3, r3, #13
 800242c:	b2db      	uxtb	r3, r3
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	b2da      	uxtb	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d11a      	bne.n	8002474 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	78db      	ldrb	r3, [r3, #3]
 8002442:	4618      	mov	r0, r3
 8002444:	f000 fa45 	bl	80028d2 <RTC_Bcd2ToByte>
 8002448:	4603      	mov	r3, r0
 800244a:	461a      	mov	r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	785b      	ldrb	r3, [r3, #1]
 8002454:	4618      	mov	r0, r3
 8002456:	f000 fa3c 	bl	80028d2 <RTC_Bcd2ToByte>
 800245a:	4603      	mov	r3, r0
 800245c:	461a      	mov	r2, r3
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	789b      	ldrb	r3, [r3, #2]
 8002466:	4618      	mov	r0, r3
 8002468:	f000 fa33 	bl	80028d2 <RTC_Bcd2ToByte>
 800246c:	4603      	mov	r3, r0
 800246e:	461a      	mov	r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002480:	b590      	push	{r4, r7, lr}
 8002482:	b089      	sub	sp, #36	; 0x24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800248c:	4b9a      	ldr	r3, [pc, #616]	; (80026f8 <HAL_RTC_SetAlarm_IT+0x278>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a9a      	ldr	r2, [pc, #616]	; (80026fc <HAL_RTC_SetAlarm_IT+0x27c>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	0adb      	lsrs	r3, r3, #11
 8002498:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800249c:	fb02 f303 	mul.w	r3, r2, r3
 80024a0:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	7f1b      	ldrb	r3, [r3, #28]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d101      	bne.n	80024b6 <HAL_RTC_SetAlarm_IT+0x36>
 80024b2:	2302      	movs	r3, #2
 80024b4:	e11c      	b.n	80026f0 <HAL_RTC_SetAlarm_IT+0x270>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2201      	movs	r2, #1
 80024ba:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2202      	movs	r2, #2
 80024c0:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d137      	bne.n	8002538 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d102      	bne.n	80024dc <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2200      	movs	r2, #0
 80024da:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 f9d9 	bl	8002898 <RTC_ByteToBcd2>
 80024e6:	4603      	mov	r3, r0
 80024e8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	785b      	ldrb	r3, [r3, #1]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 f9d2 	bl	8002898 <RTC_ByteToBcd2>
 80024f4:	4603      	mov	r3, r0
 80024f6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80024f8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	789b      	ldrb	r3, [r3, #2]
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 f9ca 	bl	8002898 <RTC_ByteToBcd2>
 8002504:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002506:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	78db      	ldrb	r3, [r3, #3]
 800250e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002510:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f893 3020 	ldrb.w	r3, [r3, #32]
 800251a:	4618      	mov	r0, r3
 800251c:	f000 f9bc 	bl	8002898 <RTC_ByteToBcd2>
 8002520:	4603      	mov	r3, r0
 8002522:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8002524:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800252c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002532:	4313      	orrs	r3, r2
 8002534:	61fb      	str	r3, [r7, #28]
 8002536:	e023      	b.n	8002580 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002542:	2b00      	cmp	r3, #0
 8002544:	d102      	bne.n	800254c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2200      	movs	r2, #0
 800254a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	785b      	ldrb	r3, [r3, #1]
 8002556:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002558:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800255e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	78db      	ldrb	r3, [r3, #3]
 8002564:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002566:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800256e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002570:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002576:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800257c:	4313      	orrs	r3, r2
 800257e:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	22ca      	movs	r2, #202	; 0xca
 8002592:	625a      	str	r2, [r3, #36]	; 0x24
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2253      	movs	r2, #83	; 0x53
 800259a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025a4:	d141      	bne.n	800262a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025b4:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80025c6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	1e5a      	subs	r2, r3, #1
 80025cc:	617a      	str	r2, [r7, #20]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10b      	bne.n	80025ea <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	22ff      	movs	r2, #255	; 0xff
 80025d8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2203      	movs	r2, #3
 80025de:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e082      	b.n	80026f0 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0e7      	beq.n	80025c8 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	69fa      	ldr	r2, [r7, #28]
 80025fe:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002616:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	e04b      	b.n	80026c2 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002638:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	b2da      	uxtb	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f462 7220 	orn	r2, r2, #640	; 0x280
 800264a:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800264c:	4b2a      	ldr	r3, [pc, #168]	; (80026f8 <HAL_RTC_SetAlarm_IT+0x278>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a2a      	ldr	r2, [pc, #168]	; (80026fc <HAL_RTC_SetAlarm_IT+0x27c>)
 8002652:	fba2 2303 	umull	r2, r3, r2, r3
 8002656:	0adb      	lsrs	r3, r3, #11
 8002658:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800265c:	fb02 f303 	mul.w	r3, r2, r3
 8002660:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	1e5a      	subs	r2, r3, #1
 8002666:	617a      	str	r2, [r7, #20]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10b      	bne.n	8002684 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	22ff      	movs	r2, #255	; 0xff
 8002672:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2203      	movs	r2, #3
 8002678:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e035      	b.n	80026f0 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0e7      	beq.n	8002662 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	69fa      	ldr	r2, [r7, #28]
 8002698:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026b0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026c0:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80026c2:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <HAL_RTC_SetAlarm_IT+0x280>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a0e      	ldr	r2, [pc, #56]	; (8002700 <HAL_RTC_SetAlarm_IT+0x280>)
 80026c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026cc:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80026ce:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <HAL_RTC_SetAlarm_IT+0x280>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	4a0b      	ldr	r2, [pc, #44]	; (8002700 <HAL_RTC_SetAlarm_IT+0x280>)
 80026d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d8:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	22ff      	movs	r2, #255	; 0xff
 80026e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2201      	movs	r2, #1
 80026e6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3724      	adds	r7, #36	; 0x24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd90      	pop	{r4, r7, pc}
 80026f8:	20000000 	.word	0x20000000
 80026fc:	10624dd3 	.word	0x10624dd3
 8002700:	40013c00 	.word	0x40013c00

08002704 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d012      	beq.n	8002740 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00b      	beq.n	8002740 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7fe f8d1 	bl	80008d0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	b2da      	uxtb	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800273e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d012      	beq.n	8002774 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00b      	beq.n	8002774 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 f8d4 	bl	800290a <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	b2da      	uxtb	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002772:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <HAL_RTC_AlarmIRQHandler+0x88>)
 8002776:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800277a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	775a      	strb	r2, [r3, #29]
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40013c00 	.word	0x40013c00

08002790 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027aa:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027ac:	f7fe fad0 	bl	8000d50 <HAL_GetTick>
 80027b0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80027b2:	e009      	b.n	80027c8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80027b4:	f7fe facc 	bl	8000d50 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027c2:	d901      	bls.n	80027c8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e007      	b.n	80027d8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f003 0320 	and.w	r3, r3, #32
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0ee      	beq.n	80027b4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80027ec:	2300      	movs	r3, #0
 80027ee:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d122      	bne.n	8002844 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800280c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800280e:	f7fe fa9f 	bl	8000d50 <HAL_GetTick>
 8002812:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002814:	e00c      	b.n	8002830 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002816:	f7fe fa9b 	bl	8000d50 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002824:	d904      	bls.n	8002830 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2204      	movs	r2, #4
 800282a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283a:	2b00      	cmp	r3, #0
 800283c:	d102      	bne.n	8002844 <RTC_EnterInitMode+0x64>
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d1e8      	bne.n	8002816 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002844:	7bfb      	ldrb	r3, [r7, #15]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b084      	sub	sp, #16
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68da      	ldr	r2, [r3, #12]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002868:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 0320 	and.w	r3, r3, #32
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10a      	bne.n	800288e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff ff89 	bl	8002790 <HAL_RTC_WaitForSynchro>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d004      	beq.n	800288e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2204      	movs	r2, #4
 8002888:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800288e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80028a6:	e005      	b.n	80028b4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	3301      	adds	r3, #1
 80028ac:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	3b0a      	subs	r3, #10
 80028b2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80028b4:	79fb      	ldrb	r3, [r7, #7]
 80028b6:	2b09      	cmp	r3, #9
 80028b8:	d8f6      	bhi.n	80028a8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	011b      	lsls	r3, r3, #4
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	79fb      	ldrb	r3, [r7, #7]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	b2db      	uxtb	r3, r3
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b085      	sub	sp, #20
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	4603      	mov	r3, r0
 80028da:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	091b      	lsrs	r3, r3, #4
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	461a      	mov	r2, r3
 80028e8:	0092      	lsls	r2, r2, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	4413      	add	r3, r2
 80028fc:	b2db      	uxtb	r3, r3
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b082      	sub	sp, #8
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e03f      	b.n	80029b0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d106      	bne.n	800294a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7fe f85d 	bl	8000a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2224      	movs	r2, #36	; 0x24
 800294e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002960:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f928 	bl	8002bb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	691a      	ldr	r2, [r3, #16]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002976:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695a      	ldr	r2, [r3, #20]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002986:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002996:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2220      	movs	r2, #32
 80029a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2220      	movs	r2, #32
 80029aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08a      	sub	sp, #40	; 0x28
 80029bc:	af02      	add	r7, sp, #8
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	603b      	str	r3, [r7, #0]
 80029c4:	4613      	mov	r3, r2
 80029c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b20      	cmp	r3, #32
 80029d6:	d17c      	bne.n	8002ad2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <HAL_UART_Transmit+0x2c>
 80029de:	88fb      	ldrh	r3, [r7, #6]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e075      	b.n	8002ad4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d101      	bne.n	80029f6 <HAL_UART_Transmit+0x3e>
 80029f2:	2302      	movs	r3, #2
 80029f4:	e06e      	b.n	8002ad4 <HAL_UART_Transmit+0x11c>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2221      	movs	r2, #33	; 0x21
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a0c:	f7fe f9a0 	bl	8000d50 <HAL_GetTick>
 8002a10:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	88fa      	ldrh	r2, [r7, #6]
 8002a16:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	88fa      	ldrh	r2, [r7, #6]
 8002a1c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a26:	d108      	bne.n	8002a3a <HAL_UART_Transmit+0x82>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d104      	bne.n	8002a3a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	61bb      	str	r3, [r7, #24]
 8002a38:	e003      	b.n	8002a42 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002a4a:	e02a      	b.n	8002aa2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	2200      	movs	r2, #0
 8002a54:	2180      	movs	r1, #128	; 0x80
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 f840 	bl	8002adc <UART_WaitOnFlagUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e036      	b.n	8002ad4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10b      	bne.n	8002a84 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	461a      	mov	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a7a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	3302      	adds	r3, #2
 8002a80:	61bb      	str	r3, [r7, #24]
 8002a82:	e007      	b.n	8002a94 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	781a      	ldrb	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	3301      	adds	r3, #1
 8002a92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1cf      	bne.n	8002a4c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2140      	movs	r1, #64	; 0x40
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 f810 	bl	8002adc <UART_WaitOnFlagUntilTimeout>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e006      	b.n	8002ad4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2220      	movs	r2, #32
 8002aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e000      	b.n	8002ad4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002ad2:	2302      	movs	r3, #2
  }
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3720      	adds	r7, #32
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b090      	sub	sp, #64	; 0x40
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	603b      	str	r3, [r7, #0]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aec:	e050      	b.n	8002b90 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af4:	d04c      	beq.n	8002b90 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d007      	beq.n	8002b0c <UART_WaitOnFlagUntilTimeout+0x30>
 8002afc:	f7fe f928 	bl	8000d50 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d241      	bcs.n	8002b90 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	330c      	adds	r3, #12
 8002b12:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b16:	e853 3f00 	ldrex	r3, [r3]
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	330c      	adds	r3, #12
 8002b2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b2c:	637a      	str	r2, [r7, #52]	; 0x34
 8002b2e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b34:	e841 2300 	strex	r3, r2, [r1]
 8002b38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1e5      	bne.n	8002b0c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	3314      	adds	r3, #20
 8002b46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	e853 3f00 	ldrex	r3, [r3]
 8002b4e:	613b      	str	r3, [r7, #16]
   return(result);
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	f023 0301 	bic.w	r3, r3, #1
 8002b56:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	3314      	adds	r3, #20
 8002b5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b60:	623a      	str	r2, [r7, #32]
 8002b62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b64:	69f9      	ldr	r1, [r7, #28]
 8002b66:	6a3a      	ldr	r2, [r7, #32]
 8002b68:	e841 2300 	strex	r3, r2, [r1]
 8002b6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1e5      	bne.n	8002b40 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e00f      	b.n	8002bb0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	bf0c      	ite	eq
 8002ba0:	2301      	moveq	r3, #1
 8002ba2:	2300      	movne	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d09f      	beq.n	8002aee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3740      	adds	r7, #64	; 0x40
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bbc:	b0c0      	sub	sp, #256	; 0x100
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd4:	68d9      	ldr	r1, [r3, #12]
 8002bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	ea40 0301 	orr.w	r3, r0, r1
 8002be0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c10:	f021 010c 	bic.w	r1, r1, #12
 8002c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c1e:	430b      	orrs	r3, r1
 8002c20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c32:	6999      	ldr	r1, [r3, #24]
 8002c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	ea40 0301 	orr.w	r3, r0, r1
 8002c3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	4b8f      	ldr	r3, [pc, #572]	; (8002e84 <UART_SetConfig+0x2cc>)
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d005      	beq.n	8002c58 <UART_SetConfig+0xa0>
 8002c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	4b8d      	ldr	r3, [pc, #564]	; (8002e88 <UART_SetConfig+0x2d0>)
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d104      	bne.n	8002c62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c58:	f7fe fffc 	bl	8001c54 <HAL_RCC_GetPCLK2Freq>
 8002c5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002c60:	e003      	b.n	8002c6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c62:	f7fe ffe3 	bl	8001c2c <HAL_RCC_GetPCLK1Freq>
 8002c66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c74:	f040 810c 	bne.w	8002e90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c8a:	4622      	mov	r2, r4
 8002c8c:	462b      	mov	r3, r5
 8002c8e:	1891      	adds	r1, r2, r2
 8002c90:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c92:	415b      	adcs	r3, r3
 8002c94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c9a:	4621      	mov	r1, r4
 8002c9c:	eb12 0801 	adds.w	r8, r2, r1
 8002ca0:	4629      	mov	r1, r5
 8002ca2:	eb43 0901 	adc.w	r9, r3, r1
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cba:	4690      	mov	r8, r2
 8002cbc:	4699      	mov	r9, r3
 8002cbe:	4623      	mov	r3, r4
 8002cc0:	eb18 0303 	adds.w	r3, r8, r3
 8002cc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002cc8:	462b      	mov	r3, r5
 8002cca:	eb49 0303 	adc.w	r3, r9, r3
 8002cce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002cde:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ce2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	18db      	adds	r3, r3, r3
 8002cea:	653b      	str	r3, [r7, #80]	; 0x50
 8002cec:	4613      	mov	r3, r2
 8002cee:	eb42 0303 	adc.w	r3, r2, r3
 8002cf2:	657b      	str	r3, [r7, #84]	; 0x54
 8002cf4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002cf8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002cfc:	f7fd fac8 	bl	8000290 <__aeabi_uldivmod>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	4b61      	ldr	r3, [pc, #388]	; (8002e8c <UART_SetConfig+0x2d4>)
 8002d06:	fba3 2302 	umull	r2, r3, r3, r2
 8002d0a:	095b      	lsrs	r3, r3, #5
 8002d0c:	011c      	lsls	r4, r3, #4
 8002d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d12:	2200      	movs	r2, #0
 8002d14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002d20:	4642      	mov	r2, r8
 8002d22:	464b      	mov	r3, r9
 8002d24:	1891      	adds	r1, r2, r2
 8002d26:	64b9      	str	r1, [r7, #72]	; 0x48
 8002d28:	415b      	adcs	r3, r3
 8002d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d30:	4641      	mov	r1, r8
 8002d32:	eb12 0a01 	adds.w	sl, r2, r1
 8002d36:	4649      	mov	r1, r9
 8002d38:	eb43 0b01 	adc.w	fp, r3, r1
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	f04f 0300 	mov.w	r3, #0
 8002d44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d50:	4692      	mov	sl, r2
 8002d52:	469b      	mov	fp, r3
 8002d54:	4643      	mov	r3, r8
 8002d56:	eb1a 0303 	adds.w	r3, sl, r3
 8002d5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d5e:	464b      	mov	r3, r9
 8002d60:	eb4b 0303 	adc.w	r3, fp, r3
 8002d64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	18db      	adds	r3, r3, r3
 8002d80:	643b      	str	r3, [r7, #64]	; 0x40
 8002d82:	4613      	mov	r3, r2
 8002d84:	eb42 0303 	adc.w	r3, r2, r3
 8002d88:	647b      	str	r3, [r7, #68]	; 0x44
 8002d8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d92:	f7fd fa7d 	bl	8000290 <__aeabi_uldivmod>
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	4b3b      	ldr	r3, [pc, #236]	; (8002e8c <UART_SetConfig+0x2d4>)
 8002d9e:	fba3 2301 	umull	r2, r3, r3, r1
 8002da2:	095b      	lsrs	r3, r3, #5
 8002da4:	2264      	movs	r2, #100	; 0x64
 8002da6:	fb02 f303 	mul.w	r3, r2, r3
 8002daa:	1acb      	subs	r3, r1, r3
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002db2:	4b36      	ldr	r3, [pc, #216]	; (8002e8c <UART_SetConfig+0x2d4>)
 8002db4:	fba3 2302 	umull	r2, r3, r3, r2
 8002db8:	095b      	lsrs	r3, r3, #5
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002dc0:	441c      	add	r4, r3
 8002dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002dcc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002dd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002dd4:	4642      	mov	r2, r8
 8002dd6:	464b      	mov	r3, r9
 8002dd8:	1891      	adds	r1, r2, r2
 8002dda:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ddc:	415b      	adcs	r3, r3
 8002dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002de0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002de4:	4641      	mov	r1, r8
 8002de6:	1851      	adds	r1, r2, r1
 8002de8:	6339      	str	r1, [r7, #48]	; 0x30
 8002dea:	4649      	mov	r1, r9
 8002dec:	414b      	adcs	r3, r1
 8002dee:	637b      	str	r3, [r7, #52]	; 0x34
 8002df0:	f04f 0200 	mov.w	r2, #0
 8002df4:	f04f 0300 	mov.w	r3, #0
 8002df8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002dfc:	4659      	mov	r1, fp
 8002dfe:	00cb      	lsls	r3, r1, #3
 8002e00:	4651      	mov	r1, sl
 8002e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e06:	4651      	mov	r1, sl
 8002e08:	00ca      	lsls	r2, r1, #3
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4603      	mov	r3, r0
 8002e10:	4642      	mov	r2, r8
 8002e12:	189b      	adds	r3, r3, r2
 8002e14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e18:	464b      	mov	r3, r9
 8002e1a:	460a      	mov	r2, r1
 8002e1c:	eb42 0303 	adc.w	r3, r2, r3
 8002e20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002e34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e38:	460b      	mov	r3, r1
 8002e3a:	18db      	adds	r3, r3, r3
 8002e3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e3e:	4613      	mov	r3, r2
 8002e40:	eb42 0303 	adc.w	r3, r2, r3
 8002e44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002e4e:	f7fd fa1f 	bl	8000290 <__aeabi_uldivmod>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4b0d      	ldr	r3, [pc, #52]	; (8002e8c <UART_SetConfig+0x2d4>)
 8002e58:	fba3 1302 	umull	r1, r3, r3, r2
 8002e5c:	095b      	lsrs	r3, r3, #5
 8002e5e:	2164      	movs	r1, #100	; 0x64
 8002e60:	fb01 f303 	mul.w	r3, r1, r3
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	3332      	adds	r3, #50	; 0x32
 8002e6a:	4a08      	ldr	r2, [pc, #32]	; (8002e8c <UART_SetConfig+0x2d4>)
 8002e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e70:	095b      	lsrs	r3, r3, #5
 8002e72:	f003 0207 	and.w	r2, r3, #7
 8002e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4422      	add	r2, r4
 8002e7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e80:	e105      	b.n	800308e <UART_SetConfig+0x4d6>
 8002e82:	bf00      	nop
 8002e84:	40011000 	.word	0x40011000
 8002e88:	40011400 	.word	0x40011400
 8002e8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e94:	2200      	movs	r2, #0
 8002e96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002ea2:	4642      	mov	r2, r8
 8002ea4:	464b      	mov	r3, r9
 8002ea6:	1891      	adds	r1, r2, r2
 8002ea8:	6239      	str	r1, [r7, #32]
 8002eaa:	415b      	adcs	r3, r3
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
 8002eae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002eb2:	4641      	mov	r1, r8
 8002eb4:	1854      	adds	r4, r2, r1
 8002eb6:	4649      	mov	r1, r9
 8002eb8:	eb43 0501 	adc.w	r5, r3, r1
 8002ebc:	f04f 0200 	mov.w	r2, #0
 8002ec0:	f04f 0300 	mov.w	r3, #0
 8002ec4:	00eb      	lsls	r3, r5, #3
 8002ec6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002eca:	00e2      	lsls	r2, r4, #3
 8002ecc:	4614      	mov	r4, r2
 8002ece:	461d      	mov	r5, r3
 8002ed0:	4643      	mov	r3, r8
 8002ed2:	18e3      	adds	r3, r4, r3
 8002ed4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ed8:	464b      	mov	r3, r9
 8002eda:	eb45 0303 	adc.w	r3, r5, r3
 8002ede:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002eee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	f04f 0300 	mov.w	r3, #0
 8002efa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002efe:	4629      	mov	r1, r5
 8002f00:	008b      	lsls	r3, r1, #2
 8002f02:	4621      	mov	r1, r4
 8002f04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f08:	4621      	mov	r1, r4
 8002f0a:	008a      	lsls	r2, r1, #2
 8002f0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f10:	f7fd f9be 	bl	8000290 <__aeabi_uldivmod>
 8002f14:	4602      	mov	r2, r0
 8002f16:	460b      	mov	r3, r1
 8002f18:	4b60      	ldr	r3, [pc, #384]	; (800309c <UART_SetConfig+0x4e4>)
 8002f1a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f1e:	095b      	lsrs	r3, r3, #5
 8002f20:	011c      	lsls	r4, r3, #4
 8002f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f26:	2200      	movs	r2, #0
 8002f28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002f34:	4642      	mov	r2, r8
 8002f36:	464b      	mov	r3, r9
 8002f38:	1891      	adds	r1, r2, r2
 8002f3a:	61b9      	str	r1, [r7, #24]
 8002f3c:	415b      	adcs	r3, r3
 8002f3e:	61fb      	str	r3, [r7, #28]
 8002f40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f44:	4641      	mov	r1, r8
 8002f46:	1851      	adds	r1, r2, r1
 8002f48:	6139      	str	r1, [r7, #16]
 8002f4a:	4649      	mov	r1, r9
 8002f4c:	414b      	adcs	r3, r1
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f5c:	4659      	mov	r1, fp
 8002f5e:	00cb      	lsls	r3, r1, #3
 8002f60:	4651      	mov	r1, sl
 8002f62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f66:	4651      	mov	r1, sl
 8002f68:	00ca      	lsls	r2, r1, #3
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4603      	mov	r3, r0
 8002f70:	4642      	mov	r2, r8
 8002f72:	189b      	adds	r3, r3, r2
 8002f74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f78:	464b      	mov	r3, r9
 8002f7a:	460a      	mov	r2, r1
 8002f7c:	eb42 0303 	adc.w	r3, r2, r3
 8002f80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f9c:	4649      	mov	r1, r9
 8002f9e:	008b      	lsls	r3, r1, #2
 8002fa0:	4641      	mov	r1, r8
 8002fa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fa6:	4641      	mov	r1, r8
 8002fa8:	008a      	lsls	r2, r1, #2
 8002faa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002fae:	f7fd f96f 	bl	8000290 <__aeabi_uldivmod>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	4b39      	ldr	r3, [pc, #228]	; (800309c <UART_SetConfig+0x4e4>)
 8002fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8002fbc:	095b      	lsrs	r3, r3, #5
 8002fbe:	2164      	movs	r1, #100	; 0x64
 8002fc0:	fb01 f303 	mul.w	r3, r1, r3
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	3332      	adds	r3, #50	; 0x32
 8002fca:	4a34      	ldr	r2, [pc, #208]	; (800309c <UART_SetConfig+0x4e4>)
 8002fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd0:	095b      	lsrs	r3, r3, #5
 8002fd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fd6:	441c      	add	r4, r3
 8002fd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fdc:	2200      	movs	r2, #0
 8002fde:	673b      	str	r3, [r7, #112]	; 0x70
 8002fe0:	677a      	str	r2, [r7, #116]	; 0x74
 8002fe2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002fe6:	4642      	mov	r2, r8
 8002fe8:	464b      	mov	r3, r9
 8002fea:	1891      	adds	r1, r2, r2
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	415b      	adcs	r3, r3
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ff6:	4641      	mov	r1, r8
 8002ff8:	1851      	adds	r1, r2, r1
 8002ffa:	6039      	str	r1, [r7, #0]
 8002ffc:	4649      	mov	r1, r9
 8002ffe:	414b      	adcs	r3, r1
 8003000:	607b      	str	r3, [r7, #4]
 8003002:	f04f 0200 	mov.w	r2, #0
 8003006:	f04f 0300 	mov.w	r3, #0
 800300a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800300e:	4659      	mov	r1, fp
 8003010:	00cb      	lsls	r3, r1, #3
 8003012:	4651      	mov	r1, sl
 8003014:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003018:	4651      	mov	r1, sl
 800301a:	00ca      	lsls	r2, r1, #3
 800301c:	4610      	mov	r0, r2
 800301e:	4619      	mov	r1, r3
 8003020:	4603      	mov	r3, r0
 8003022:	4642      	mov	r2, r8
 8003024:	189b      	adds	r3, r3, r2
 8003026:	66bb      	str	r3, [r7, #104]	; 0x68
 8003028:	464b      	mov	r3, r9
 800302a:	460a      	mov	r2, r1
 800302c:	eb42 0303 	adc.w	r3, r2, r3
 8003030:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	663b      	str	r3, [r7, #96]	; 0x60
 800303c:	667a      	str	r2, [r7, #100]	; 0x64
 800303e:	f04f 0200 	mov.w	r2, #0
 8003042:	f04f 0300 	mov.w	r3, #0
 8003046:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800304a:	4649      	mov	r1, r9
 800304c:	008b      	lsls	r3, r1, #2
 800304e:	4641      	mov	r1, r8
 8003050:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003054:	4641      	mov	r1, r8
 8003056:	008a      	lsls	r2, r1, #2
 8003058:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800305c:	f7fd f918 	bl	8000290 <__aeabi_uldivmod>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	4b0d      	ldr	r3, [pc, #52]	; (800309c <UART_SetConfig+0x4e4>)
 8003066:	fba3 1302 	umull	r1, r3, r3, r2
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	2164      	movs	r1, #100	; 0x64
 800306e:	fb01 f303 	mul.w	r3, r1, r3
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	3332      	adds	r3, #50	; 0x32
 8003078:	4a08      	ldr	r2, [pc, #32]	; (800309c <UART_SetConfig+0x4e4>)
 800307a:	fba2 2303 	umull	r2, r3, r2, r3
 800307e:	095b      	lsrs	r3, r3, #5
 8003080:	f003 020f 	and.w	r2, r3, #15
 8003084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4422      	add	r2, r4
 800308c:	609a      	str	r2, [r3, #8]
}
 800308e:	bf00      	nop
 8003090:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003094:	46bd      	mov	sp, r7
 8003096:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800309a:	bf00      	nop
 800309c:	51eb851f 	.word	0x51eb851f

080030a0 <__errno>:
 80030a0:	4b01      	ldr	r3, [pc, #4]	; (80030a8 <__errno+0x8>)
 80030a2:	6818      	ldr	r0, [r3, #0]
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	2000000c 	.word	0x2000000c

080030ac <__libc_init_array>:
 80030ac:	b570      	push	{r4, r5, r6, lr}
 80030ae:	4d0d      	ldr	r5, [pc, #52]	; (80030e4 <__libc_init_array+0x38>)
 80030b0:	4c0d      	ldr	r4, [pc, #52]	; (80030e8 <__libc_init_array+0x3c>)
 80030b2:	1b64      	subs	r4, r4, r5
 80030b4:	10a4      	asrs	r4, r4, #2
 80030b6:	2600      	movs	r6, #0
 80030b8:	42a6      	cmp	r6, r4
 80030ba:	d109      	bne.n	80030d0 <__libc_init_array+0x24>
 80030bc:	4d0b      	ldr	r5, [pc, #44]	; (80030ec <__libc_init_array+0x40>)
 80030be:	4c0c      	ldr	r4, [pc, #48]	; (80030f0 <__libc_init_array+0x44>)
 80030c0:	f001 f824 	bl	800410c <_init>
 80030c4:	1b64      	subs	r4, r4, r5
 80030c6:	10a4      	asrs	r4, r4, #2
 80030c8:	2600      	movs	r6, #0
 80030ca:	42a6      	cmp	r6, r4
 80030cc:	d105      	bne.n	80030da <__libc_init_array+0x2e>
 80030ce:	bd70      	pop	{r4, r5, r6, pc}
 80030d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030d4:	4798      	blx	r3
 80030d6:	3601      	adds	r6, #1
 80030d8:	e7ee      	b.n	80030b8 <__libc_init_array+0xc>
 80030da:	f855 3b04 	ldr.w	r3, [r5], #4
 80030de:	4798      	blx	r3
 80030e0:	3601      	adds	r6, #1
 80030e2:	e7f2      	b.n	80030ca <__libc_init_array+0x1e>
 80030e4:	08004214 	.word	0x08004214
 80030e8:	08004214 	.word	0x08004214
 80030ec:	08004214 	.word	0x08004214
 80030f0:	08004218 	.word	0x08004218

080030f4 <memset>:
 80030f4:	4402      	add	r2, r0
 80030f6:	4603      	mov	r3, r0
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d100      	bne.n	80030fe <memset+0xa>
 80030fc:	4770      	bx	lr
 80030fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003102:	e7f9      	b.n	80030f8 <memset+0x4>

08003104 <iprintf>:
 8003104:	b40f      	push	{r0, r1, r2, r3}
 8003106:	4b0a      	ldr	r3, [pc, #40]	; (8003130 <iprintf+0x2c>)
 8003108:	b513      	push	{r0, r1, r4, lr}
 800310a:	681c      	ldr	r4, [r3, #0]
 800310c:	b124      	cbz	r4, 8003118 <iprintf+0x14>
 800310e:	69a3      	ldr	r3, [r4, #24]
 8003110:	b913      	cbnz	r3, 8003118 <iprintf+0x14>
 8003112:	4620      	mov	r0, r4
 8003114:	f000 fa5e 	bl	80035d4 <__sinit>
 8003118:	ab05      	add	r3, sp, #20
 800311a:	9a04      	ldr	r2, [sp, #16]
 800311c:	68a1      	ldr	r1, [r4, #8]
 800311e:	9301      	str	r3, [sp, #4]
 8003120:	4620      	mov	r0, r4
 8003122:	f000 fc67 	bl	80039f4 <_vfiprintf_r>
 8003126:	b002      	add	sp, #8
 8003128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800312c:	b004      	add	sp, #16
 800312e:	4770      	bx	lr
 8003130:	2000000c 	.word	0x2000000c

08003134 <_puts_r>:
 8003134:	b570      	push	{r4, r5, r6, lr}
 8003136:	460e      	mov	r6, r1
 8003138:	4605      	mov	r5, r0
 800313a:	b118      	cbz	r0, 8003144 <_puts_r+0x10>
 800313c:	6983      	ldr	r3, [r0, #24]
 800313e:	b90b      	cbnz	r3, 8003144 <_puts_r+0x10>
 8003140:	f000 fa48 	bl	80035d4 <__sinit>
 8003144:	69ab      	ldr	r3, [r5, #24]
 8003146:	68ac      	ldr	r4, [r5, #8]
 8003148:	b913      	cbnz	r3, 8003150 <_puts_r+0x1c>
 800314a:	4628      	mov	r0, r5
 800314c:	f000 fa42 	bl	80035d4 <__sinit>
 8003150:	4b2c      	ldr	r3, [pc, #176]	; (8003204 <_puts_r+0xd0>)
 8003152:	429c      	cmp	r4, r3
 8003154:	d120      	bne.n	8003198 <_puts_r+0x64>
 8003156:	686c      	ldr	r4, [r5, #4]
 8003158:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800315a:	07db      	lsls	r3, r3, #31
 800315c:	d405      	bmi.n	800316a <_puts_r+0x36>
 800315e:	89a3      	ldrh	r3, [r4, #12]
 8003160:	0598      	lsls	r0, r3, #22
 8003162:	d402      	bmi.n	800316a <_puts_r+0x36>
 8003164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003166:	f000 fad3 	bl	8003710 <__retarget_lock_acquire_recursive>
 800316a:	89a3      	ldrh	r3, [r4, #12]
 800316c:	0719      	lsls	r1, r3, #28
 800316e:	d51d      	bpl.n	80031ac <_puts_r+0x78>
 8003170:	6923      	ldr	r3, [r4, #16]
 8003172:	b1db      	cbz	r3, 80031ac <_puts_r+0x78>
 8003174:	3e01      	subs	r6, #1
 8003176:	68a3      	ldr	r3, [r4, #8]
 8003178:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800317c:	3b01      	subs	r3, #1
 800317e:	60a3      	str	r3, [r4, #8]
 8003180:	bb39      	cbnz	r1, 80031d2 <_puts_r+0x9e>
 8003182:	2b00      	cmp	r3, #0
 8003184:	da38      	bge.n	80031f8 <_puts_r+0xc4>
 8003186:	4622      	mov	r2, r4
 8003188:	210a      	movs	r1, #10
 800318a:	4628      	mov	r0, r5
 800318c:	f000 f848 	bl	8003220 <__swbuf_r>
 8003190:	3001      	adds	r0, #1
 8003192:	d011      	beq.n	80031b8 <_puts_r+0x84>
 8003194:	250a      	movs	r5, #10
 8003196:	e011      	b.n	80031bc <_puts_r+0x88>
 8003198:	4b1b      	ldr	r3, [pc, #108]	; (8003208 <_puts_r+0xd4>)
 800319a:	429c      	cmp	r4, r3
 800319c:	d101      	bne.n	80031a2 <_puts_r+0x6e>
 800319e:	68ac      	ldr	r4, [r5, #8]
 80031a0:	e7da      	b.n	8003158 <_puts_r+0x24>
 80031a2:	4b1a      	ldr	r3, [pc, #104]	; (800320c <_puts_r+0xd8>)
 80031a4:	429c      	cmp	r4, r3
 80031a6:	bf08      	it	eq
 80031a8:	68ec      	ldreq	r4, [r5, #12]
 80031aa:	e7d5      	b.n	8003158 <_puts_r+0x24>
 80031ac:	4621      	mov	r1, r4
 80031ae:	4628      	mov	r0, r5
 80031b0:	f000 f888 	bl	80032c4 <__swsetup_r>
 80031b4:	2800      	cmp	r0, #0
 80031b6:	d0dd      	beq.n	8003174 <_puts_r+0x40>
 80031b8:	f04f 35ff 	mov.w	r5, #4294967295
 80031bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80031be:	07da      	lsls	r2, r3, #31
 80031c0:	d405      	bmi.n	80031ce <_puts_r+0x9a>
 80031c2:	89a3      	ldrh	r3, [r4, #12]
 80031c4:	059b      	lsls	r3, r3, #22
 80031c6:	d402      	bmi.n	80031ce <_puts_r+0x9a>
 80031c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031ca:	f000 faa2 	bl	8003712 <__retarget_lock_release_recursive>
 80031ce:	4628      	mov	r0, r5
 80031d0:	bd70      	pop	{r4, r5, r6, pc}
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	da04      	bge.n	80031e0 <_puts_r+0xac>
 80031d6:	69a2      	ldr	r2, [r4, #24]
 80031d8:	429a      	cmp	r2, r3
 80031da:	dc06      	bgt.n	80031ea <_puts_r+0xb6>
 80031dc:	290a      	cmp	r1, #10
 80031de:	d004      	beq.n	80031ea <_puts_r+0xb6>
 80031e0:	6823      	ldr	r3, [r4, #0]
 80031e2:	1c5a      	adds	r2, r3, #1
 80031e4:	6022      	str	r2, [r4, #0]
 80031e6:	7019      	strb	r1, [r3, #0]
 80031e8:	e7c5      	b.n	8003176 <_puts_r+0x42>
 80031ea:	4622      	mov	r2, r4
 80031ec:	4628      	mov	r0, r5
 80031ee:	f000 f817 	bl	8003220 <__swbuf_r>
 80031f2:	3001      	adds	r0, #1
 80031f4:	d1bf      	bne.n	8003176 <_puts_r+0x42>
 80031f6:	e7df      	b.n	80031b8 <_puts_r+0x84>
 80031f8:	6823      	ldr	r3, [r4, #0]
 80031fa:	250a      	movs	r5, #10
 80031fc:	1c5a      	adds	r2, r3, #1
 80031fe:	6022      	str	r2, [r4, #0]
 8003200:	701d      	strb	r5, [r3, #0]
 8003202:	e7db      	b.n	80031bc <_puts_r+0x88>
 8003204:	08004198 	.word	0x08004198
 8003208:	080041b8 	.word	0x080041b8
 800320c:	08004178 	.word	0x08004178

08003210 <puts>:
 8003210:	4b02      	ldr	r3, [pc, #8]	; (800321c <puts+0xc>)
 8003212:	4601      	mov	r1, r0
 8003214:	6818      	ldr	r0, [r3, #0]
 8003216:	f7ff bf8d 	b.w	8003134 <_puts_r>
 800321a:	bf00      	nop
 800321c:	2000000c 	.word	0x2000000c

08003220 <__swbuf_r>:
 8003220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003222:	460e      	mov	r6, r1
 8003224:	4614      	mov	r4, r2
 8003226:	4605      	mov	r5, r0
 8003228:	b118      	cbz	r0, 8003232 <__swbuf_r+0x12>
 800322a:	6983      	ldr	r3, [r0, #24]
 800322c:	b90b      	cbnz	r3, 8003232 <__swbuf_r+0x12>
 800322e:	f000 f9d1 	bl	80035d4 <__sinit>
 8003232:	4b21      	ldr	r3, [pc, #132]	; (80032b8 <__swbuf_r+0x98>)
 8003234:	429c      	cmp	r4, r3
 8003236:	d12b      	bne.n	8003290 <__swbuf_r+0x70>
 8003238:	686c      	ldr	r4, [r5, #4]
 800323a:	69a3      	ldr	r3, [r4, #24]
 800323c:	60a3      	str	r3, [r4, #8]
 800323e:	89a3      	ldrh	r3, [r4, #12]
 8003240:	071a      	lsls	r2, r3, #28
 8003242:	d52f      	bpl.n	80032a4 <__swbuf_r+0x84>
 8003244:	6923      	ldr	r3, [r4, #16]
 8003246:	b36b      	cbz	r3, 80032a4 <__swbuf_r+0x84>
 8003248:	6923      	ldr	r3, [r4, #16]
 800324a:	6820      	ldr	r0, [r4, #0]
 800324c:	1ac0      	subs	r0, r0, r3
 800324e:	6963      	ldr	r3, [r4, #20]
 8003250:	b2f6      	uxtb	r6, r6
 8003252:	4283      	cmp	r3, r0
 8003254:	4637      	mov	r7, r6
 8003256:	dc04      	bgt.n	8003262 <__swbuf_r+0x42>
 8003258:	4621      	mov	r1, r4
 800325a:	4628      	mov	r0, r5
 800325c:	f000 f926 	bl	80034ac <_fflush_r>
 8003260:	bb30      	cbnz	r0, 80032b0 <__swbuf_r+0x90>
 8003262:	68a3      	ldr	r3, [r4, #8]
 8003264:	3b01      	subs	r3, #1
 8003266:	60a3      	str	r3, [r4, #8]
 8003268:	6823      	ldr	r3, [r4, #0]
 800326a:	1c5a      	adds	r2, r3, #1
 800326c:	6022      	str	r2, [r4, #0]
 800326e:	701e      	strb	r6, [r3, #0]
 8003270:	6963      	ldr	r3, [r4, #20]
 8003272:	3001      	adds	r0, #1
 8003274:	4283      	cmp	r3, r0
 8003276:	d004      	beq.n	8003282 <__swbuf_r+0x62>
 8003278:	89a3      	ldrh	r3, [r4, #12]
 800327a:	07db      	lsls	r3, r3, #31
 800327c:	d506      	bpl.n	800328c <__swbuf_r+0x6c>
 800327e:	2e0a      	cmp	r6, #10
 8003280:	d104      	bne.n	800328c <__swbuf_r+0x6c>
 8003282:	4621      	mov	r1, r4
 8003284:	4628      	mov	r0, r5
 8003286:	f000 f911 	bl	80034ac <_fflush_r>
 800328a:	b988      	cbnz	r0, 80032b0 <__swbuf_r+0x90>
 800328c:	4638      	mov	r0, r7
 800328e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003290:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <__swbuf_r+0x9c>)
 8003292:	429c      	cmp	r4, r3
 8003294:	d101      	bne.n	800329a <__swbuf_r+0x7a>
 8003296:	68ac      	ldr	r4, [r5, #8]
 8003298:	e7cf      	b.n	800323a <__swbuf_r+0x1a>
 800329a:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <__swbuf_r+0xa0>)
 800329c:	429c      	cmp	r4, r3
 800329e:	bf08      	it	eq
 80032a0:	68ec      	ldreq	r4, [r5, #12]
 80032a2:	e7ca      	b.n	800323a <__swbuf_r+0x1a>
 80032a4:	4621      	mov	r1, r4
 80032a6:	4628      	mov	r0, r5
 80032a8:	f000 f80c 	bl	80032c4 <__swsetup_r>
 80032ac:	2800      	cmp	r0, #0
 80032ae:	d0cb      	beq.n	8003248 <__swbuf_r+0x28>
 80032b0:	f04f 37ff 	mov.w	r7, #4294967295
 80032b4:	e7ea      	b.n	800328c <__swbuf_r+0x6c>
 80032b6:	bf00      	nop
 80032b8:	08004198 	.word	0x08004198
 80032bc:	080041b8 	.word	0x080041b8
 80032c0:	08004178 	.word	0x08004178

080032c4 <__swsetup_r>:
 80032c4:	4b32      	ldr	r3, [pc, #200]	; (8003390 <__swsetup_r+0xcc>)
 80032c6:	b570      	push	{r4, r5, r6, lr}
 80032c8:	681d      	ldr	r5, [r3, #0]
 80032ca:	4606      	mov	r6, r0
 80032cc:	460c      	mov	r4, r1
 80032ce:	b125      	cbz	r5, 80032da <__swsetup_r+0x16>
 80032d0:	69ab      	ldr	r3, [r5, #24]
 80032d2:	b913      	cbnz	r3, 80032da <__swsetup_r+0x16>
 80032d4:	4628      	mov	r0, r5
 80032d6:	f000 f97d 	bl	80035d4 <__sinit>
 80032da:	4b2e      	ldr	r3, [pc, #184]	; (8003394 <__swsetup_r+0xd0>)
 80032dc:	429c      	cmp	r4, r3
 80032de:	d10f      	bne.n	8003300 <__swsetup_r+0x3c>
 80032e0:	686c      	ldr	r4, [r5, #4]
 80032e2:	89a3      	ldrh	r3, [r4, #12]
 80032e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032e8:	0719      	lsls	r1, r3, #28
 80032ea:	d42c      	bmi.n	8003346 <__swsetup_r+0x82>
 80032ec:	06dd      	lsls	r5, r3, #27
 80032ee:	d411      	bmi.n	8003314 <__swsetup_r+0x50>
 80032f0:	2309      	movs	r3, #9
 80032f2:	6033      	str	r3, [r6, #0]
 80032f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80032f8:	81a3      	strh	r3, [r4, #12]
 80032fa:	f04f 30ff 	mov.w	r0, #4294967295
 80032fe:	e03e      	b.n	800337e <__swsetup_r+0xba>
 8003300:	4b25      	ldr	r3, [pc, #148]	; (8003398 <__swsetup_r+0xd4>)
 8003302:	429c      	cmp	r4, r3
 8003304:	d101      	bne.n	800330a <__swsetup_r+0x46>
 8003306:	68ac      	ldr	r4, [r5, #8]
 8003308:	e7eb      	b.n	80032e2 <__swsetup_r+0x1e>
 800330a:	4b24      	ldr	r3, [pc, #144]	; (800339c <__swsetup_r+0xd8>)
 800330c:	429c      	cmp	r4, r3
 800330e:	bf08      	it	eq
 8003310:	68ec      	ldreq	r4, [r5, #12]
 8003312:	e7e6      	b.n	80032e2 <__swsetup_r+0x1e>
 8003314:	0758      	lsls	r0, r3, #29
 8003316:	d512      	bpl.n	800333e <__swsetup_r+0x7a>
 8003318:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800331a:	b141      	cbz	r1, 800332e <__swsetup_r+0x6a>
 800331c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003320:	4299      	cmp	r1, r3
 8003322:	d002      	beq.n	800332a <__swsetup_r+0x66>
 8003324:	4630      	mov	r0, r6
 8003326:	f000 fa5b 	bl	80037e0 <_free_r>
 800332a:	2300      	movs	r3, #0
 800332c:	6363      	str	r3, [r4, #52]	; 0x34
 800332e:	89a3      	ldrh	r3, [r4, #12]
 8003330:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003334:	81a3      	strh	r3, [r4, #12]
 8003336:	2300      	movs	r3, #0
 8003338:	6063      	str	r3, [r4, #4]
 800333a:	6923      	ldr	r3, [r4, #16]
 800333c:	6023      	str	r3, [r4, #0]
 800333e:	89a3      	ldrh	r3, [r4, #12]
 8003340:	f043 0308 	orr.w	r3, r3, #8
 8003344:	81a3      	strh	r3, [r4, #12]
 8003346:	6923      	ldr	r3, [r4, #16]
 8003348:	b94b      	cbnz	r3, 800335e <__swsetup_r+0x9a>
 800334a:	89a3      	ldrh	r3, [r4, #12]
 800334c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003354:	d003      	beq.n	800335e <__swsetup_r+0x9a>
 8003356:	4621      	mov	r1, r4
 8003358:	4630      	mov	r0, r6
 800335a:	f000 fa01 	bl	8003760 <__smakebuf_r>
 800335e:	89a0      	ldrh	r0, [r4, #12]
 8003360:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003364:	f010 0301 	ands.w	r3, r0, #1
 8003368:	d00a      	beq.n	8003380 <__swsetup_r+0xbc>
 800336a:	2300      	movs	r3, #0
 800336c:	60a3      	str	r3, [r4, #8]
 800336e:	6963      	ldr	r3, [r4, #20]
 8003370:	425b      	negs	r3, r3
 8003372:	61a3      	str	r3, [r4, #24]
 8003374:	6923      	ldr	r3, [r4, #16]
 8003376:	b943      	cbnz	r3, 800338a <__swsetup_r+0xc6>
 8003378:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800337c:	d1ba      	bne.n	80032f4 <__swsetup_r+0x30>
 800337e:	bd70      	pop	{r4, r5, r6, pc}
 8003380:	0781      	lsls	r1, r0, #30
 8003382:	bf58      	it	pl
 8003384:	6963      	ldrpl	r3, [r4, #20]
 8003386:	60a3      	str	r3, [r4, #8]
 8003388:	e7f4      	b.n	8003374 <__swsetup_r+0xb0>
 800338a:	2000      	movs	r0, #0
 800338c:	e7f7      	b.n	800337e <__swsetup_r+0xba>
 800338e:	bf00      	nop
 8003390:	2000000c 	.word	0x2000000c
 8003394:	08004198 	.word	0x08004198
 8003398:	080041b8 	.word	0x080041b8
 800339c:	08004178 	.word	0x08004178

080033a0 <__sflush_r>:
 80033a0:	898a      	ldrh	r2, [r1, #12]
 80033a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033a6:	4605      	mov	r5, r0
 80033a8:	0710      	lsls	r0, r2, #28
 80033aa:	460c      	mov	r4, r1
 80033ac:	d458      	bmi.n	8003460 <__sflush_r+0xc0>
 80033ae:	684b      	ldr	r3, [r1, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	dc05      	bgt.n	80033c0 <__sflush_r+0x20>
 80033b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	dc02      	bgt.n	80033c0 <__sflush_r+0x20>
 80033ba:	2000      	movs	r0, #0
 80033bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033c2:	2e00      	cmp	r6, #0
 80033c4:	d0f9      	beq.n	80033ba <__sflush_r+0x1a>
 80033c6:	2300      	movs	r3, #0
 80033c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80033cc:	682f      	ldr	r7, [r5, #0]
 80033ce:	602b      	str	r3, [r5, #0]
 80033d0:	d032      	beq.n	8003438 <__sflush_r+0x98>
 80033d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80033d4:	89a3      	ldrh	r3, [r4, #12]
 80033d6:	075a      	lsls	r2, r3, #29
 80033d8:	d505      	bpl.n	80033e6 <__sflush_r+0x46>
 80033da:	6863      	ldr	r3, [r4, #4]
 80033dc:	1ac0      	subs	r0, r0, r3
 80033de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033e0:	b10b      	cbz	r3, 80033e6 <__sflush_r+0x46>
 80033e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033e4:	1ac0      	subs	r0, r0, r3
 80033e6:	2300      	movs	r3, #0
 80033e8:	4602      	mov	r2, r0
 80033ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033ec:	6a21      	ldr	r1, [r4, #32]
 80033ee:	4628      	mov	r0, r5
 80033f0:	47b0      	blx	r6
 80033f2:	1c43      	adds	r3, r0, #1
 80033f4:	89a3      	ldrh	r3, [r4, #12]
 80033f6:	d106      	bne.n	8003406 <__sflush_r+0x66>
 80033f8:	6829      	ldr	r1, [r5, #0]
 80033fa:	291d      	cmp	r1, #29
 80033fc:	d82c      	bhi.n	8003458 <__sflush_r+0xb8>
 80033fe:	4a2a      	ldr	r2, [pc, #168]	; (80034a8 <__sflush_r+0x108>)
 8003400:	40ca      	lsrs	r2, r1
 8003402:	07d6      	lsls	r6, r2, #31
 8003404:	d528      	bpl.n	8003458 <__sflush_r+0xb8>
 8003406:	2200      	movs	r2, #0
 8003408:	6062      	str	r2, [r4, #4]
 800340a:	04d9      	lsls	r1, r3, #19
 800340c:	6922      	ldr	r2, [r4, #16]
 800340e:	6022      	str	r2, [r4, #0]
 8003410:	d504      	bpl.n	800341c <__sflush_r+0x7c>
 8003412:	1c42      	adds	r2, r0, #1
 8003414:	d101      	bne.n	800341a <__sflush_r+0x7a>
 8003416:	682b      	ldr	r3, [r5, #0]
 8003418:	b903      	cbnz	r3, 800341c <__sflush_r+0x7c>
 800341a:	6560      	str	r0, [r4, #84]	; 0x54
 800341c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800341e:	602f      	str	r7, [r5, #0]
 8003420:	2900      	cmp	r1, #0
 8003422:	d0ca      	beq.n	80033ba <__sflush_r+0x1a>
 8003424:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003428:	4299      	cmp	r1, r3
 800342a:	d002      	beq.n	8003432 <__sflush_r+0x92>
 800342c:	4628      	mov	r0, r5
 800342e:	f000 f9d7 	bl	80037e0 <_free_r>
 8003432:	2000      	movs	r0, #0
 8003434:	6360      	str	r0, [r4, #52]	; 0x34
 8003436:	e7c1      	b.n	80033bc <__sflush_r+0x1c>
 8003438:	6a21      	ldr	r1, [r4, #32]
 800343a:	2301      	movs	r3, #1
 800343c:	4628      	mov	r0, r5
 800343e:	47b0      	blx	r6
 8003440:	1c41      	adds	r1, r0, #1
 8003442:	d1c7      	bne.n	80033d4 <__sflush_r+0x34>
 8003444:	682b      	ldr	r3, [r5, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0c4      	beq.n	80033d4 <__sflush_r+0x34>
 800344a:	2b1d      	cmp	r3, #29
 800344c:	d001      	beq.n	8003452 <__sflush_r+0xb2>
 800344e:	2b16      	cmp	r3, #22
 8003450:	d101      	bne.n	8003456 <__sflush_r+0xb6>
 8003452:	602f      	str	r7, [r5, #0]
 8003454:	e7b1      	b.n	80033ba <__sflush_r+0x1a>
 8003456:	89a3      	ldrh	r3, [r4, #12]
 8003458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800345c:	81a3      	strh	r3, [r4, #12]
 800345e:	e7ad      	b.n	80033bc <__sflush_r+0x1c>
 8003460:	690f      	ldr	r7, [r1, #16]
 8003462:	2f00      	cmp	r7, #0
 8003464:	d0a9      	beq.n	80033ba <__sflush_r+0x1a>
 8003466:	0793      	lsls	r3, r2, #30
 8003468:	680e      	ldr	r6, [r1, #0]
 800346a:	bf08      	it	eq
 800346c:	694b      	ldreq	r3, [r1, #20]
 800346e:	600f      	str	r7, [r1, #0]
 8003470:	bf18      	it	ne
 8003472:	2300      	movne	r3, #0
 8003474:	eba6 0807 	sub.w	r8, r6, r7
 8003478:	608b      	str	r3, [r1, #8]
 800347a:	f1b8 0f00 	cmp.w	r8, #0
 800347e:	dd9c      	ble.n	80033ba <__sflush_r+0x1a>
 8003480:	6a21      	ldr	r1, [r4, #32]
 8003482:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003484:	4643      	mov	r3, r8
 8003486:	463a      	mov	r2, r7
 8003488:	4628      	mov	r0, r5
 800348a:	47b0      	blx	r6
 800348c:	2800      	cmp	r0, #0
 800348e:	dc06      	bgt.n	800349e <__sflush_r+0xfe>
 8003490:	89a3      	ldrh	r3, [r4, #12]
 8003492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003496:	81a3      	strh	r3, [r4, #12]
 8003498:	f04f 30ff 	mov.w	r0, #4294967295
 800349c:	e78e      	b.n	80033bc <__sflush_r+0x1c>
 800349e:	4407      	add	r7, r0
 80034a0:	eba8 0800 	sub.w	r8, r8, r0
 80034a4:	e7e9      	b.n	800347a <__sflush_r+0xda>
 80034a6:	bf00      	nop
 80034a8:	20400001 	.word	0x20400001

080034ac <_fflush_r>:
 80034ac:	b538      	push	{r3, r4, r5, lr}
 80034ae:	690b      	ldr	r3, [r1, #16]
 80034b0:	4605      	mov	r5, r0
 80034b2:	460c      	mov	r4, r1
 80034b4:	b913      	cbnz	r3, 80034bc <_fflush_r+0x10>
 80034b6:	2500      	movs	r5, #0
 80034b8:	4628      	mov	r0, r5
 80034ba:	bd38      	pop	{r3, r4, r5, pc}
 80034bc:	b118      	cbz	r0, 80034c6 <_fflush_r+0x1a>
 80034be:	6983      	ldr	r3, [r0, #24]
 80034c0:	b90b      	cbnz	r3, 80034c6 <_fflush_r+0x1a>
 80034c2:	f000 f887 	bl	80035d4 <__sinit>
 80034c6:	4b14      	ldr	r3, [pc, #80]	; (8003518 <_fflush_r+0x6c>)
 80034c8:	429c      	cmp	r4, r3
 80034ca:	d11b      	bne.n	8003504 <_fflush_r+0x58>
 80034cc:	686c      	ldr	r4, [r5, #4]
 80034ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0ef      	beq.n	80034b6 <_fflush_r+0xa>
 80034d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80034d8:	07d0      	lsls	r0, r2, #31
 80034da:	d404      	bmi.n	80034e6 <_fflush_r+0x3a>
 80034dc:	0599      	lsls	r1, r3, #22
 80034de:	d402      	bmi.n	80034e6 <_fflush_r+0x3a>
 80034e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034e2:	f000 f915 	bl	8003710 <__retarget_lock_acquire_recursive>
 80034e6:	4628      	mov	r0, r5
 80034e8:	4621      	mov	r1, r4
 80034ea:	f7ff ff59 	bl	80033a0 <__sflush_r>
 80034ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034f0:	07da      	lsls	r2, r3, #31
 80034f2:	4605      	mov	r5, r0
 80034f4:	d4e0      	bmi.n	80034b8 <_fflush_r+0xc>
 80034f6:	89a3      	ldrh	r3, [r4, #12]
 80034f8:	059b      	lsls	r3, r3, #22
 80034fa:	d4dd      	bmi.n	80034b8 <_fflush_r+0xc>
 80034fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034fe:	f000 f908 	bl	8003712 <__retarget_lock_release_recursive>
 8003502:	e7d9      	b.n	80034b8 <_fflush_r+0xc>
 8003504:	4b05      	ldr	r3, [pc, #20]	; (800351c <_fflush_r+0x70>)
 8003506:	429c      	cmp	r4, r3
 8003508:	d101      	bne.n	800350e <_fflush_r+0x62>
 800350a:	68ac      	ldr	r4, [r5, #8]
 800350c:	e7df      	b.n	80034ce <_fflush_r+0x22>
 800350e:	4b04      	ldr	r3, [pc, #16]	; (8003520 <_fflush_r+0x74>)
 8003510:	429c      	cmp	r4, r3
 8003512:	bf08      	it	eq
 8003514:	68ec      	ldreq	r4, [r5, #12]
 8003516:	e7da      	b.n	80034ce <_fflush_r+0x22>
 8003518:	08004198 	.word	0x08004198
 800351c:	080041b8 	.word	0x080041b8
 8003520:	08004178 	.word	0x08004178

08003524 <std>:
 8003524:	2300      	movs	r3, #0
 8003526:	b510      	push	{r4, lr}
 8003528:	4604      	mov	r4, r0
 800352a:	e9c0 3300 	strd	r3, r3, [r0]
 800352e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003532:	6083      	str	r3, [r0, #8]
 8003534:	8181      	strh	r1, [r0, #12]
 8003536:	6643      	str	r3, [r0, #100]	; 0x64
 8003538:	81c2      	strh	r2, [r0, #14]
 800353a:	6183      	str	r3, [r0, #24]
 800353c:	4619      	mov	r1, r3
 800353e:	2208      	movs	r2, #8
 8003540:	305c      	adds	r0, #92	; 0x5c
 8003542:	f7ff fdd7 	bl	80030f4 <memset>
 8003546:	4b05      	ldr	r3, [pc, #20]	; (800355c <std+0x38>)
 8003548:	6263      	str	r3, [r4, #36]	; 0x24
 800354a:	4b05      	ldr	r3, [pc, #20]	; (8003560 <std+0x3c>)
 800354c:	62a3      	str	r3, [r4, #40]	; 0x28
 800354e:	4b05      	ldr	r3, [pc, #20]	; (8003564 <std+0x40>)
 8003550:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003552:	4b05      	ldr	r3, [pc, #20]	; (8003568 <std+0x44>)
 8003554:	6224      	str	r4, [r4, #32]
 8003556:	6323      	str	r3, [r4, #48]	; 0x30
 8003558:	bd10      	pop	{r4, pc}
 800355a:	bf00      	nop
 800355c:	08003f9d 	.word	0x08003f9d
 8003560:	08003fbf 	.word	0x08003fbf
 8003564:	08003ff7 	.word	0x08003ff7
 8003568:	0800401b 	.word	0x0800401b

0800356c <_cleanup_r>:
 800356c:	4901      	ldr	r1, [pc, #4]	; (8003574 <_cleanup_r+0x8>)
 800356e:	f000 b8af 	b.w	80036d0 <_fwalk_reent>
 8003572:	bf00      	nop
 8003574:	080034ad 	.word	0x080034ad

08003578 <__sfmoreglue>:
 8003578:	b570      	push	{r4, r5, r6, lr}
 800357a:	2268      	movs	r2, #104	; 0x68
 800357c:	1e4d      	subs	r5, r1, #1
 800357e:	4355      	muls	r5, r2
 8003580:	460e      	mov	r6, r1
 8003582:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003586:	f000 f997 	bl	80038b8 <_malloc_r>
 800358a:	4604      	mov	r4, r0
 800358c:	b140      	cbz	r0, 80035a0 <__sfmoreglue+0x28>
 800358e:	2100      	movs	r1, #0
 8003590:	e9c0 1600 	strd	r1, r6, [r0]
 8003594:	300c      	adds	r0, #12
 8003596:	60a0      	str	r0, [r4, #8]
 8003598:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800359c:	f7ff fdaa 	bl	80030f4 <memset>
 80035a0:	4620      	mov	r0, r4
 80035a2:	bd70      	pop	{r4, r5, r6, pc}

080035a4 <__sfp_lock_acquire>:
 80035a4:	4801      	ldr	r0, [pc, #4]	; (80035ac <__sfp_lock_acquire+0x8>)
 80035a6:	f000 b8b3 	b.w	8003710 <__retarget_lock_acquire_recursive>
 80035aa:	bf00      	nop
 80035ac:	200000f9 	.word	0x200000f9

080035b0 <__sfp_lock_release>:
 80035b0:	4801      	ldr	r0, [pc, #4]	; (80035b8 <__sfp_lock_release+0x8>)
 80035b2:	f000 b8ae 	b.w	8003712 <__retarget_lock_release_recursive>
 80035b6:	bf00      	nop
 80035b8:	200000f9 	.word	0x200000f9

080035bc <__sinit_lock_acquire>:
 80035bc:	4801      	ldr	r0, [pc, #4]	; (80035c4 <__sinit_lock_acquire+0x8>)
 80035be:	f000 b8a7 	b.w	8003710 <__retarget_lock_acquire_recursive>
 80035c2:	bf00      	nop
 80035c4:	200000fa 	.word	0x200000fa

080035c8 <__sinit_lock_release>:
 80035c8:	4801      	ldr	r0, [pc, #4]	; (80035d0 <__sinit_lock_release+0x8>)
 80035ca:	f000 b8a2 	b.w	8003712 <__retarget_lock_release_recursive>
 80035ce:	bf00      	nop
 80035d0:	200000fa 	.word	0x200000fa

080035d4 <__sinit>:
 80035d4:	b510      	push	{r4, lr}
 80035d6:	4604      	mov	r4, r0
 80035d8:	f7ff fff0 	bl	80035bc <__sinit_lock_acquire>
 80035dc:	69a3      	ldr	r3, [r4, #24]
 80035de:	b11b      	cbz	r3, 80035e8 <__sinit+0x14>
 80035e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035e4:	f7ff bff0 	b.w	80035c8 <__sinit_lock_release>
 80035e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80035ec:	6523      	str	r3, [r4, #80]	; 0x50
 80035ee:	4b13      	ldr	r3, [pc, #76]	; (800363c <__sinit+0x68>)
 80035f0:	4a13      	ldr	r2, [pc, #76]	; (8003640 <__sinit+0x6c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80035f6:	42a3      	cmp	r3, r4
 80035f8:	bf04      	itt	eq
 80035fa:	2301      	moveq	r3, #1
 80035fc:	61a3      	streq	r3, [r4, #24]
 80035fe:	4620      	mov	r0, r4
 8003600:	f000 f820 	bl	8003644 <__sfp>
 8003604:	6060      	str	r0, [r4, #4]
 8003606:	4620      	mov	r0, r4
 8003608:	f000 f81c 	bl	8003644 <__sfp>
 800360c:	60a0      	str	r0, [r4, #8]
 800360e:	4620      	mov	r0, r4
 8003610:	f000 f818 	bl	8003644 <__sfp>
 8003614:	2200      	movs	r2, #0
 8003616:	60e0      	str	r0, [r4, #12]
 8003618:	2104      	movs	r1, #4
 800361a:	6860      	ldr	r0, [r4, #4]
 800361c:	f7ff ff82 	bl	8003524 <std>
 8003620:	68a0      	ldr	r0, [r4, #8]
 8003622:	2201      	movs	r2, #1
 8003624:	2109      	movs	r1, #9
 8003626:	f7ff ff7d 	bl	8003524 <std>
 800362a:	68e0      	ldr	r0, [r4, #12]
 800362c:	2202      	movs	r2, #2
 800362e:	2112      	movs	r1, #18
 8003630:	f7ff ff78 	bl	8003524 <std>
 8003634:	2301      	movs	r3, #1
 8003636:	61a3      	str	r3, [r4, #24]
 8003638:	e7d2      	b.n	80035e0 <__sinit+0xc>
 800363a:	bf00      	nop
 800363c:	08004174 	.word	0x08004174
 8003640:	0800356d 	.word	0x0800356d

08003644 <__sfp>:
 8003644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003646:	4607      	mov	r7, r0
 8003648:	f7ff ffac 	bl	80035a4 <__sfp_lock_acquire>
 800364c:	4b1e      	ldr	r3, [pc, #120]	; (80036c8 <__sfp+0x84>)
 800364e:	681e      	ldr	r6, [r3, #0]
 8003650:	69b3      	ldr	r3, [r6, #24]
 8003652:	b913      	cbnz	r3, 800365a <__sfp+0x16>
 8003654:	4630      	mov	r0, r6
 8003656:	f7ff ffbd 	bl	80035d4 <__sinit>
 800365a:	3648      	adds	r6, #72	; 0x48
 800365c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003660:	3b01      	subs	r3, #1
 8003662:	d503      	bpl.n	800366c <__sfp+0x28>
 8003664:	6833      	ldr	r3, [r6, #0]
 8003666:	b30b      	cbz	r3, 80036ac <__sfp+0x68>
 8003668:	6836      	ldr	r6, [r6, #0]
 800366a:	e7f7      	b.n	800365c <__sfp+0x18>
 800366c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003670:	b9d5      	cbnz	r5, 80036a8 <__sfp+0x64>
 8003672:	4b16      	ldr	r3, [pc, #88]	; (80036cc <__sfp+0x88>)
 8003674:	60e3      	str	r3, [r4, #12]
 8003676:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800367a:	6665      	str	r5, [r4, #100]	; 0x64
 800367c:	f000 f847 	bl	800370e <__retarget_lock_init_recursive>
 8003680:	f7ff ff96 	bl	80035b0 <__sfp_lock_release>
 8003684:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003688:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800368c:	6025      	str	r5, [r4, #0]
 800368e:	61a5      	str	r5, [r4, #24]
 8003690:	2208      	movs	r2, #8
 8003692:	4629      	mov	r1, r5
 8003694:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003698:	f7ff fd2c 	bl	80030f4 <memset>
 800369c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80036a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80036a4:	4620      	mov	r0, r4
 80036a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036a8:	3468      	adds	r4, #104	; 0x68
 80036aa:	e7d9      	b.n	8003660 <__sfp+0x1c>
 80036ac:	2104      	movs	r1, #4
 80036ae:	4638      	mov	r0, r7
 80036b0:	f7ff ff62 	bl	8003578 <__sfmoreglue>
 80036b4:	4604      	mov	r4, r0
 80036b6:	6030      	str	r0, [r6, #0]
 80036b8:	2800      	cmp	r0, #0
 80036ba:	d1d5      	bne.n	8003668 <__sfp+0x24>
 80036bc:	f7ff ff78 	bl	80035b0 <__sfp_lock_release>
 80036c0:	230c      	movs	r3, #12
 80036c2:	603b      	str	r3, [r7, #0]
 80036c4:	e7ee      	b.n	80036a4 <__sfp+0x60>
 80036c6:	bf00      	nop
 80036c8:	08004174 	.word	0x08004174
 80036cc:	ffff0001 	.word	0xffff0001

080036d0 <_fwalk_reent>:
 80036d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036d4:	4606      	mov	r6, r0
 80036d6:	4688      	mov	r8, r1
 80036d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80036dc:	2700      	movs	r7, #0
 80036de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80036e2:	f1b9 0901 	subs.w	r9, r9, #1
 80036e6:	d505      	bpl.n	80036f4 <_fwalk_reent+0x24>
 80036e8:	6824      	ldr	r4, [r4, #0]
 80036ea:	2c00      	cmp	r4, #0
 80036ec:	d1f7      	bne.n	80036de <_fwalk_reent+0xe>
 80036ee:	4638      	mov	r0, r7
 80036f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036f4:	89ab      	ldrh	r3, [r5, #12]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d907      	bls.n	800370a <_fwalk_reent+0x3a>
 80036fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036fe:	3301      	adds	r3, #1
 8003700:	d003      	beq.n	800370a <_fwalk_reent+0x3a>
 8003702:	4629      	mov	r1, r5
 8003704:	4630      	mov	r0, r6
 8003706:	47c0      	blx	r8
 8003708:	4307      	orrs	r7, r0
 800370a:	3568      	adds	r5, #104	; 0x68
 800370c:	e7e9      	b.n	80036e2 <_fwalk_reent+0x12>

0800370e <__retarget_lock_init_recursive>:
 800370e:	4770      	bx	lr

08003710 <__retarget_lock_acquire_recursive>:
 8003710:	4770      	bx	lr

08003712 <__retarget_lock_release_recursive>:
 8003712:	4770      	bx	lr

08003714 <__swhatbuf_r>:
 8003714:	b570      	push	{r4, r5, r6, lr}
 8003716:	460e      	mov	r6, r1
 8003718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800371c:	2900      	cmp	r1, #0
 800371e:	b096      	sub	sp, #88	; 0x58
 8003720:	4614      	mov	r4, r2
 8003722:	461d      	mov	r5, r3
 8003724:	da08      	bge.n	8003738 <__swhatbuf_r+0x24>
 8003726:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	602a      	str	r2, [r5, #0]
 800372e:	061a      	lsls	r2, r3, #24
 8003730:	d410      	bmi.n	8003754 <__swhatbuf_r+0x40>
 8003732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003736:	e00e      	b.n	8003756 <__swhatbuf_r+0x42>
 8003738:	466a      	mov	r2, sp
 800373a:	f000 fc95 	bl	8004068 <_fstat_r>
 800373e:	2800      	cmp	r0, #0
 8003740:	dbf1      	blt.n	8003726 <__swhatbuf_r+0x12>
 8003742:	9a01      	ldr	r2, [sp, #4]
 8003744:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003748:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800374c:	425a      	negs	r2, r3
 800374e:	415a      	adcs	r2, r3
 8003750:	602a      	str	r2, [r5, #0]
 8003752:	e7ee      	b.n	8003732 <__swhatbuf_r+0x1e>
 8003754:	2340      	movs	r3, #64	; 0x40
 8003756:	2000      	movs	r0, #0
 8003758:	6023      	str	r3, [r4, #0]
 800375a:	b016      	add	sp, #88	; 0x58
 800375c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003760 <__smakebuf_r>:
 8003760:	898b      	ldrh	r3, [r1, #12]
 8003762:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003764:	079d      	lsls	r5, r3, #30
 8003766:	4606      	mov	r6, r0
 8003768:	460c      	mov	r4, r1
 800376a:	d507      	bpl.n	800377c <__smakebuf_r+0x1c>
 800376c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003770:	6023      	str	r3, [r4, #0]
 8003772:	6123      	str	r3, [r4, #16]
 8003774:	2301      	movs	r3, #1
 8003776:	6163      	str	r3, [r4, #20]
 8003778:	b002      	add	sp, #8
 800377a:	bd70      	pop	{r4, r5, r6, pc}
 800377c:	ab01      	add	r3, sp, #4
 800377e:	466a      	mov	r2, sp
 8003780:	f7ff ffc8 	bl	8003714 <__swhatbuf_r>
 8003784:	9900      	ldr	r1, [sp, #0]
 8003786:	4605      	mov	r5, r0
 8003788:	4630      	mov	r0, r6
 800378a:	f000 f895 	bl	80038b8 <_malloc_r>
 800378e:	b948      	cbnz	r0, 80037a4 <__smakebuf_r+0x44>
 8003790:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003794:	059a      	lsls	r2, r3, #22
 8003796:	d4ef      	bmi.n	8003778 <__smakebuf_r+0x18>
 8003798:	f023 0303 	bic.w	r3, r3, #3
 800379c:	f043 0302 	orr.w	r3, r3, #2
 80037a0:	81a3      	strh	r3, [r4, #12]
 80037a2:	e7e3      	b.n	800376c <__smakebuf_r+0xc>
 80037a4:	4b0d      	ldr	r3, [pc, #52]	; (80037dc <__smakebuf_r+0x7c>)
 80037a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80037a8:	89a3      	ldrh	r3, [r4, #12]
 80037aa:	6020      	str	r0, [r4, #0]
 80037ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037b0:	81a3      	strh	r3, [r4, #12]
 80037b2:	9b00      	ldr	r3, [sp, #0]
 80037b4:	6163      	str	r3, [r4, #20]
 80037b6:	9b01      	ldr	r3, [sp, #4]
 80037b8:	6120      	str	r0, [r4, #16]
 80037ba:	b15b      	cbz	r3, 80037d4 <__smakebuf_r+0x74>
 80037bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037c0:	4630      	mov	r0, r6
 80037c2:	f000 fc63 	bl	800408c <_isatty_r>
 80037c6:	b128      	cbz	r0, 80037d4 <__smakebuf_r+0x74>
 80037c8:	89a3      	ldrh	r3, [r4, #12]
 80037ca:	f023 0303 	bic.w	r3, r3, #3
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	81a3      	strh	r3, [r4, #12]
 80037d4:	89a0      	ldrh	r0, [r4, #12]
 80037d6:	4305      	orrs	r5, r0
 80037d8:	81a5      	strh	r5, [r4, #12]
 80037da:	e7cd      	b.n	8003778 <__smakebuf_r+0x18>
 80037dc:	0800356d 	.word	0x0800356d

080037e0 <_free_r>:
 80037e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80037e2:	2900      	cmp	r1, #0
 80037e4:	d044      	beq.n	8003870 <_free_r+0x90>
 80037e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037ea:	9001      	str	r0, [sp, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f1a1 0404 	sub.w	r4, r1, #4
 80037f2:	bfb8      	it	lt
 80037f4:	18e4      	addlt	r4, r4, r3
 80037f6:	f000 fc6b 	bl	80040d0 <__malloc_lock>
 80037fa:	4a1e      	ldr	r2, [pc, #120]	; (8003874 <_free_r+0x94>)
 80037fc:	9801      	ldr	r0, [sp, #4]
 80037fe:	6813      	ldr	r3, [r2, #0]
 8003800:	b933      	cbnz	r3, 8003810 <_free_r+0x30>
 8003802:	6063      	str	r3, [r4, #4]
 8003804:	6014      	str	r4, [r2, #0]
 8003806:	b003      	add	sp, #12
 8003808:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800380c:	f000 bc66 	b.w	80040dc <__malloc_unlock>
 8003810:	42a3      	cmp	r3, r4
 8003812:	d908      	bls.n	8003826 <_free_r+0x46>
 8003814:	6825      	ldr	r5, [r4, #0]
 8003816:	1961      	adds	r1, r4, r5
 8003818:	428b      	cmp	r3, r1
 800381a:	bf01      	itttt	eq
 800381c:	6819      	ldreq	r1, [r3, #0]
 800381e:	685b      	ldreq	r3, [r3, #4]
 8003820:	1949      	addeq	r1, r1, r5
 8003822:	6021      	streq	r1, [r4, #0]
 8003824:	e7ed      	b.n	8003802 <_free_r+0x22>
 8003826:	461a      	mov	r2, r3
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	b10b      	cbz	r3, 8003830 <_free_r+0x50>
 800382c:	42a3      	cmp	r3, r4
 800382e:	d9fa      	bls.n	8003826 <_free_r+0x46>
 8003830:	6811      	ldr	r1, [r2, #0]
 8003832:	1855      	adds	r5, r2, r1
 8003834:	42a5      	cmp	r5, r4
 8003836:	d10b      	bne.n	8003850 <_free_r+0x70>
 8003838:	6824      	ldr	r4, [r4, #0]
 800383a:	4421      	add	r1, r4
 800383c:	1854      	adds	r4, r2, r1
 800383e:	42a3      	cmp	r3, r4
 8003840:	6011      	str	r1, [r2, #0]
 8003842:	d1e0      	bne.n	8003806 <_free_r+0x26>
 8003844:	681c      	ldr	r4, [r3, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	6053      	str	r3, [r2, #4]
 800384a:	4421      	add	r1, r4
 800384c:	6011      	str	r1, [r2, #0]
 800384e:	e7da      	b.n	8003806 <_free_r+0x26>
 8003850:	d902      	bls.n	8003858 <_free_r+0x78>
 8003852:	230c      	movs	r3, #12
 8003854:	6003      	str	r3, [r0, #0]
 8003856:	e7d6      	b.n	8003806 <_free_r+0x26>
 8003858:	6825      	ldr	r5, [r4, #0]
 800385a:	1961      	adds	r1, r4, r5
 800385c:	428b      	cmp	r3, r1
 800385e:	bf04      	itt	eq
 8003860:	6819      	ldreq	r1, [r3, #0]
 8003862:	685b      	ldreq	r3, [r3, #4]
 8003864:	6063      	str	r3, [r4, #4]
 8003866:	bf04      	itt	eq
 8003868:	1949      	addeq	r1, r1, r5
 800386a:	6021      	streq	r1, [r4, #0]
 800386c:	6054      	str	r4, [r2, #4]
 800386e:	e7ca      	b.n	8003806 <_free_r+0x26>
 8003870:	b003      	add	sp, #12
 8003872:	bd30      	pop	{r4, r5, pc}
 8003874:	200000fc 	.word	0x200000fc

08003878 <sbrk_aligned>:
 8003878:	b570      	push	{r4, r5, r6, lr}
 800387a:	4e0e      	ldr	r6, [pc, #56]	; (80038b4 <sbrk_aligned+0x3c>)
 800387c:	460c      	mov	r4, r1
 800387e:	6831      	ldr	r1, [r6, #0]
 8003880:	4605      	mov	r5, r0
 8003882:	b911      	cbnz	r1, 800388a <sbrk_aligned+0x12>
 8003884:	f000 fb7a 	bl	8003f7c <_sbrk_r>
 8003888:	6030      	str	r0, [r6, #0]
 800388a:	4621      	mov	r1, r4
 800388c:	4628      	mov	r0, r5
 800388e:	f000 fb75 	bl	8003f7c <_sbrk_r>
 8003892:	1c43      	adds	r3, r0, #1
 8003894:	d00a      	beq.n	80038ac <sbrk_aligned+0x34>
 8003896:	1cc4      	adds	r4, r0, #3
 8003898:	f024 0403 	bic.w	r4, r4, #3
 800389c:	42a0      	cmp	r0, r4
 800389e:	d007      	beq.n	80038b0 <sbrk_aligned+0x38>
 80038a0:	1a21      	subs	r1, r4, r0
 80038a2:	4628      	mov	r0, r5
 80038a4:	f000 fb6a 	bl	8003f7c <_sbrk_r>
 80038a8:	3001      	adds	r0, #1
 80038aa:	d101      	bne.n	80038b0 <sbrk_aligned+0x38>
 80038ac:	f04f 34ff 	mov.w	r4, #4294967295
 80038b0:	4620      	mov	r0, r4
 80038b2:	bd70      	pop	{r4, r5, r6, pc}
 80038b4:	20000100 	.word	0x20000100

080038b8 <_malloc_r>:
 80038b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038bc:	1ccd      	adds	r5, r1, #3
 80038be:	f025 0503 	bic.w	r5, r5, #3
 80038c2:	3508      	adds	r5, #8
 80038c4:	2d0c      	cmp	r5, #12
 80038c6:	bf38      	it	cc
 80038c8:	250c      	movcc	r5, #12
 80038ca:	2d00      	cmp	r5, #0
 80038cc:	4607      	mov	r7, r0
 80038ce:	db01      	blt.n	80038d4 <_malloc_r+0x1c>
 80038d0:	42a9      	cmp	r1, r5
 80038d2:	d905      	bls.n	80038e0 <_malloc_r+0x28>
 80038d4:	230c      	movs	r3, #12
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	2600      	movs	r6, #0
 80038da:	4630      	mov	r0, r6
 80038dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038e0:	4e2e      	ldr	r6, [pc, #184]	; (800399c <_malloc_r+0xe4>)
 80038e2:	f000 fbf5 	bl	80040d0 <__malloc_lock>
 80038e6:	6833      	ldr	r3, [r6, #0]
 80038e8:	461c      	mov	r4, r3
 80038ea:	bb34      	cbnz	r4, 800393a <_malloc_r+0x82>
 80038ec:	4629      	mov	r1, r5
 80038ee:	4638      	mov	r0, r7
 80038f0:	f7ff ffc2 	bl	8003878 <sbrk_aligned>
 80038f4:	1c43      	adds	r3, r0, #1
 80038f6:	4604      	mov	r4, r0
 80038f8:	d14d      	bne.n	8003996 <_malloc_r+0xde>
 80038fa:	6834      	ldr	r4, [r6, #0]
 80038fc:	4626      	mov	r6, r4
 80038fe:	2e00      	cmp	r6, #0
 8003900:	d140      	bne.n	8003984 <_malloc_r+0xcc>
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	4631      	mov	r1, r6
 8003906:	4638      	mov	r0, r7
 8003908:	eb04 0803 	add.w	r8, r4, r3
 800390c:	f000 fb36 	bl	8003f7c <_sbrk_r>
 8003910:	4580      	cmp	r8, r0
 8003912:	d13a      	bne.n	800398a <_malloc_r+0xd2>
 8003914:	6821      	ldr	r1, [r4, #0]
 8003916:	3503      	adds	r5, #3
 8003918:	1a6d      	subs	r5, r5, r1
 800391a:	f025 0503 	bic.w	r5, r5, #3
 800391e:	3508      	adds	r5, #8
 8003920:	2d0c      	cmp	r5, #12
 8003922:	bf38      	it	cc
 8003924:	250c      	movcc	r5, #12
 8003926:	4629      	mov	r1, r5
 8003928:	4638      	mov	r0, r7
 800392a:	f7ff ffa5 	bl	8003878 <sbrk_aligned>
 800392e:	3001      	adds	r0, #1
 8003930:	d02b      	beq.n	800398a <_malloc_r+0xd2>
 8003932:	6823      	ldr	r3, [r4, #0]
 8003934:	442b      	add	r3, r5
 8003936:	6023      	str	r3, [r4, #0]
 8003938:	e00e      	b.n	8003958 <_malloc_r+0xa0>
 800393a:	6822      	ldr	r2, [r4, #0]
 800393c:	1b52      	subs	r2, r2, r5
 800393e:	d41e      	bmi.n	800397e <_malloc_r+0xc6>
 8003940:	2a0b      	cmp	r2, #11
 8003942:	d916      	bls.n	8003972 <_malloc_r+0xba>
 8003944:	1961      	adds	r1, r4, r5
 8003946:	42a3      	cmp	r3, r4
 8003948:	6025      	str	r5, [r4, #0]
 800394a:	bf18      	it	ne
 800394c:	6059      	strne	r1, [r3, #4]
 800394e:	6863      	ldr	r3, [r4, #4]
 8003950:	bf08      	it	eq
 8003952:	6031      	streq	r1, [r6, #0]
 8003954:	5162      	str	r2, [r4, r5]
 8003956:	604b      	str	r3, [r1, #4]
 8003958:	4638      	mov	r0, r7
 800395a:	f104 060b 	add.w	r6, r4, #11
 800395e:	f000 fbbd 	bl	80040dc <__malloc_unlock>
 8003962:	f026 0607 	bic.w	r6, r6, #7
 8003966:	1d23      	adds	r3, r4, #4
 8003968:	1af2      	subs	r2, r6, r3
 800396a:	d0b6      	beq.n	80038da <_malloc_r+0x22>
 800396c:	1b9b      	subs	r3, r3, r6
 800396e:	50a3      	str	r3, [r4, r2]
 8003970:	e7b3      	b.n	80038da <_malloc_r+0x22>
 8003972:	6862      	ldr	r2, [r4, #4]
 8003974:	42a3      	cmp	r3, r4
 8003976:	bf0c      	ite	eq
 8003978:	6032      	streq	r2, [r6, #0]
 800397a:	605a      	strne	r2, [r3, #4]
 800397c:	e7ec      	b.n	8003958 <_malloc_r+0xa0>
 800397e:	4623      	mov	r3, r4
 8003980:	6864      	ldr	r4, [r4, #4]
 8003982:	e7b2      	b.n	80038ea <_malloc_r+0x32>
 8003984:	4634      	mov	r4, r6
 8003986:	6876      	ldr	r6, [r6, #4]
 8003988:	e7b9      	b.n	80038fe <_malloc_r+0x46>
 800398a:	230c      	movs	r3, #12
 800398c:	603b      	str	r3, [r7, #0]
 800398e:	4638      	mov	r0, r7
 8003990:	f000 fba4 	bl	80040dc <__malloc_unlock>
 8003994:	e7a1      	b.n	80038da <_malloc_r+0x22>
 8003996:	6025      	str	r5, [r4, #0]
 8003998:	e7de      	b.n	8003958 <_malloc_r+0xa0>
 800399a:	bf00      	nop
 800399c:	200000fc 	.word	0x200000fc

080039a0 <__sfputc_r>:
 80039a0:	6893      	ldr	r3, [r2, #8]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	b410      	push	{r4}
 80039a8:	6093      	str	r3, [r2, #8]
 80039aa:	da08      	bge.n	80039be <__sfputc_r+0x1e>
 80039ac:	6994      	ldr	r4, [r2, #24]
 80039ae:	42a3      	cmp	r3, r4
 80039b0:	db01      	blt.n	80039b6 <__sfputc_r+0x16>
 80039b2:	290a      	cmp	r1, #10
 80039b4:	d103      	bne.n	80039be <__sfputc_r+0x1e>
 80039b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039ba:	f7ff bc31 	b.w	8003220 <__swbuf_r>
 80039be:	6813      	ldr	r3, [r2, #0]
 80039c0:	1c58      	adds	r0, r3, #1
 80039c2:	6010      	str	r0, [r2, #0]
 80039c4:	7019      	strb	r1, [r3, #0]
 80039c6:	4608      	mov	r0, r1
 80039c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <__sfputs_r>:
 80039ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039d0:	4606      	mov	r6, r0
 80039d2:	460f      	mov	r7, r1
 80039d4:	4614      	mov	r4, r2
 80039d6:	18d5      	adds	r5, r2, r3
 80039d8:	42ac      	cmp	r4, r5
 80039da:	d101      	bne.n	80039e0 <__sfputs_r+0x12>
 80039dc:	2000      	movs	r0, #0
 80039de:	e007      	b.n	80039f0 <__sfputs_r+0x22>
 80039e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039e4:	463a      	mov	r2, r7
 80039e6:	4630      	mov	r0, r6
 80039e8:	f7ff ffda 	bl	80039a0 <__sfputc_r>
 80039ec:	1c43      	adds	r3, r0, #1
 80039ee:	d1f3      	bne.n	80039d8 <__sfputs_r+0xa>
 80039f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080039f4 <_vfiprintf_r>:
 80039f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039f8:	460d      	mov	r5, r1
 80039fa:	b09d      	sub	sp, #116	; 0x74
 80039fc:	4614      	mov	r4, r2
 80039fe:	4698      	mov	r8, r3
 8003a00:	4606      	mov	r6, r0
 8003a02:	b118      	cbz	r0, 8003a0c <_vfiprintf_r+0x18>
 8003a04:	6983      	ldr	r3, [r0, #24]
 8003a06:	b90b      	cbnz	r3, 8003a0c <_vfiprintf_r+0x18>
 8003a08:	f7ff fde4 	bl	80035d4 <__sinit>
 8003a0c:	4b89      	ldr	r3, [pc, #548]	; (8003c34 <_vfiprintf_r+0x240>)
 8003a0e:	429d      	cmp	r5, r3
 8003a10:	d11b      	bne.n	8003a4a <_vfiprintf_r+0x56>
 8003a12:	6875      	ldr	r5, [r6, #4]
 8003a14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a16:	07d9      	lsls	r1, r3, #31
 8003a18:	d405      	bmi.n	8003a26 <_vfiprintf_r+0x32>
 8003a1a:	89ab      	ldrh	r3, [r5, #12]
 8003a1c:	059a      	lsls	r2, r3, #22
 8003a1e:	d402      	bmi.n	8003a26 <_vfiprintf_r+0x32>
 8003a20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a22:	f7ff fe75 	bl	8003710 <__retarget_lock_acquire_recursive>
 8003a26:	89ab      	ldrh	r3, [r5, #12]
 8003a28:	071b      	lsls	r3, r3, #28
 8003a2a:	d501      	bpl.n	8003a30 <_vfiprintf_r+0x3c>
 8003a2c:	692b      	ldr	r3, [r5, #16]
 8003a2e:	b9eb      	cbnz	r3, 8003a6c <_vfiprintf_r+0x78>
 8003a30:	4629      	mov	r1, r5
 8003a32:	4630      	mov	r0, r6
 8003a34:	f7ff fc46 	bl	80032c4 <__swsetup_r>
 8003a38:	b1c0      	cbz	r0, 8003a6c <_vfiprintf_r+0x78>
 8003a3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a3c:	07dc      	lsls	r4, r3, #31
 8003a3e:	d50e      	bpl.n	8003a5e <_vfiprintf_r+0x6a>
 8003a40:	f04f 30ff 	mov.w	r0, #4294967295
 8003a44:	b01d      	add	sp, #116	; 0x74
 8003a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a4a:	4b7b      	ldr	r3, [pc, #492]	; (8003c38 <_vfiprintf_r+0x244>)
 8003a4c:	429d      	cmp	r5, r3
 8003a4e:	d101      	bne.n	8003a54 <_vfiprintf_r+0x60>
 8003a50:	68b5      	ldr	r5, [r6, #8]
 8003a52:	e7df      	b.n	8003a14 <_vfiprintf_r+0x20>
 8003a54:	4b79      	ldr	r3, [pc, #484]	; (8003c3c <_vfiprintf_r+0x248>)
 8003a56:	429d      	cmp	r5, r3
 8003a58:	bf08      	it	eq
 8003a5a:	68f5      	ldreq	r5, [r6, #12]
 8003a5c:	e7da      	b.n	8003a14 <_vfiprintf_r+0x20>
 8003a5e:	89ab      	ldrh	r3, [r5, #12]
 8003a60:	0598      	lsls	r0, r3, #22
 8003a62:	d4ed      	bmi.n	8003a40 <_vfiprintf_r+0x4c>
 8003a64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a66:	f7ff fe54 	bl	8003712 <__retarget_lock_release_recursive>
 8003a6a:	e7e9      	b.n	8003a40 <_vfiprintf_r+0x4c>
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8003a70:	2320      	movs	r3, #32
 8003a72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a76:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a7a:	2330      	movs	r3, #48	; 0x30
 8003a7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003c40 <_vfiprintf_r+0x24c>
 8003a80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a84:	f04f 0901 	mov.w	r9, #1
 8003a88:	4623      	mov	r3, r4
 8003a8a:	469a      	mov	sl, r3
 8003a8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a90:	b10a      	cbz	r2, 8003a96 <_vfiprintf_r+0xa2>
 8003a92:	2a25      	cmp	r2, #37	; 0x25
 8003a94:	d1f9      	bne.n	8003a8a <_vfiprintf_r+0x96>
 8003a96:	ebba 0b04 	subs.w	fp, sl, r4
 8003a9a:	d00b      	beq.n	8003ab4 <_vfiprintf_r+0xc0>
 8003a9c:	465b      	mov	r3, fp
 8003a9e:	4622      	mov	r2, r4
 8003aa0:	4629      	mov	r1, r5
 8003aa2:	4630      	mov	r0, r6
 8003aa4:	f7ff ff93 	bl	80039ce <__sfputs_r>
 8003aa8:	3001      	adds	r0, #1
 8003aaa:	f000 80aa 	beq.w	8003c02 <_vfiprintf_r+0x20e>
 8003aae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ab0:	445a      	add	r2, fp
 8003ab2:	9209      	str	r2, [sp, #36]	; 0x24
 8003ab4:	f89a 3000 	ldrb.w	r3, [sl]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 80a2 	beq.w	8003c02 <_vfiprintf_r+0x20e>
 8003abe:	2300      	movs	r3, #0
 8003ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ac8:	f10a 0a01 	add.w	sl, sl, #1
 8003acc:	9304      	str	r3, [sp, #16]
 8003ace:	9307      	str	r3, [sp, #28]
 8003ad0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ad4:	931a      	str	r3, [sp, #104]	; 0x68
 8003ad6:	4654      	mov	r4, sl
 8003ad8:	2205      	movs	r2, #5
 8003ada:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ade:	4858      	ldr	r0, [pc, #352]	; (8003c40 <_vfiprintf_r+0x24c>)
 8003ae0:	f7fc fb86 	bl	80001f0 <memchr>
 8003ae4:	9a04      	ldr	r2, [sp, #16]
 8003ae6:	b9d8      	cbnz	r0, 8003b20 <_vfiprintf_r+0x12c>
 8003ae8:	06d1      	lsls	r1, r2, #27
 8003aea:	bf44      	itt	mi
 8003aec:	2320      	movmi	r3, #32
 8003aee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003af2:	0713      	lsls	r3, r2, #28
 8003af4:	bf44      	itt	mi
 8003af6:	232b      	movmi	r3, #43	; 0x2b
 8003af8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003afc:	f89a 3000 	ldrb.w	r3, [sl]
 8003b00:	2b2a      	cmp	r3, #42	; 0x2a
 8003b02:	d015      	beq.n	8003b30 <_vfiprintf_r+0x13c>
 8003b04:	9a07      	ldr	r2, [sp, #28]
 8003b06:	4654      	mov	r4, sl
 8003b08:	2000      	movs	r0, #0
 8003b0a:	f04f 0c0a 	mov.w	ip, #10
 8003b0e:	4621      	mov	r1, r4
 8003b10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b14:	3b30      	subs	r3, #48	; 0x30
 8003b16:	2b09      	cmp	r3, #9
 8003b18:	d94e      	bls.n	8003bb8 <_vfiprintf_r+0x1c4>
 8003b1a:	b1b0      	cbz	r0, 8003b4a <_vfiprintf_r+0x156>
 8003b1c:	9207      	str	r2, [sp, #28]
 8003b1e:	e014      	b.n	8003b4a <_vfiprintf_r+0x156>
 8003b20:	eba0 0308 	sub.w	r3, r0, r8
 8003b24:	fa09 f303 	lsl.w	r3, r9, r3
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	9304      	str	r3, [sp, #16]
 8003b2c:	46a2      	mov	sl, r4
 8003b2e:	e7d2      	b.n	8003ad6 <_vfiprintf_r+0xe2>
 8003b30:	9b03      	ldr	r3, [sp, #12]
 8003b32:	1d19      	adds	r1, r3, #4
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	9103      	str	r1, [sp, #12]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	bfbb      	ittet	lt
 8003b3c:	425b      	neglt	r3, r3
 8003b3e:	f042 0202 	orrlt.w	r2, r2, #2
 8003b42:	9307      	strge	r3, [sp, #28]
 8003b44:	9307      	strlt	r3, [sp, #28]
 8003b46:	bfb8      	it	lt
 8003b48:	9204      	strlt	r2, [sp, #16]
 8003b4a:	7823      	ldrb	r3, [r4, #0]
 8003b4c:	2b2e      	cmp	r3, #46	; 0x2e
 8003b4e:	d10c      	bne.n	8003b6a <_vfiprintf_r+0x176>
 8003b50:	7863      	ldrb	r3, [r4, #1]
 8003b52:	2b2a      	cmp	r3, #42	; 0x2a
 8003b54:	d135      	bne.n	8003bc2 <_vfiprintf_r+0x1ce>
 8003b56:	9b03      	ldr	r3, [sp, #12]
 8003b58:	1d1a      	adds	r2, r3, #4
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	9203      	str	r2, [sp, #12]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	bfb8      	it	lt
 8003b62:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b66:	3402      	adds	r4, #2
 8003b68:	9305      	str	r3, [sp, #20]
 8003b6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003c50 <_vfiprintf_r+0x25c>
 8003b6e:	7821      	ldrb	r1, [r4, #0]
 8003b70:	2203      	movs	r2, #3
 8003b72:	4650      	mov	r0, sl
 8003b74:	f7fc fb3c 	bl	80001f0 <memchr>
 8003b78:	b140      	cbz	r0, 8003b8c <_vfiprintf_r+0x198>
 8003b7a:	2340      	movs	r3, #64	; 0x40
 8003b7c:	eba0 000a 	sub.w	r0, r0, sl
 8003b80:	fa03 f000 	lsl.w	r0, r3, r0
 8003b84:	9b04      	ldr	r3, [sp, #16]
 8003b86:	4303      	orrs	r3, r0
 8003b88:	3401      	adds	r4, #1
 8003b8a:	9304      	str	r3, [sp, #16]
 8003b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b90:	482c      	ldr	r0, [pc, #176]	; (8003c44 <_vfiprintf_r+0x250>)
 8003b92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b96:	2206      	movs	r2, #6
 8003b98:	f7fc fb2a 	bl	80001f0 <memchr>
 8003b9c:	2800      	cmp	r0, #0
 8003b9e:	d03f      	beq.n	8003c20 <_vfiprintf_r+0x22c>
 8003ba0:	4b29      	ldr	r3, [pc, #164]	; (8003c48 <_vfiprintf_r+0x254>)
 8003ba2:	bb1b      	cbnz	r3, 8003bec <_vfiprintf_r+0x1f8>
 8003ba4:	9b03      	ldr	r3, [sp, #12]
 8003ba6:	3307      	adds	r3, #7
 8003ba8:	f023 0307 	bic.w	r3, r3, #7
 8003bac:	3308      	adds	r3, #8
 8003bae:	9303      	str	r3, [sp, #12]
 8003bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bb2:	443b      	add	r3, r7
 8003bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8003bb6:	e767      	b.n	8003a88 <_vfiprintf_r+0x94>
 8003bb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bbc:	460c      	mov	r4, r1
 8003bbe:	2001      	movs	r0, #1
 8003bc0:	e7a5      	b.n	8003b0e <_vfiprintf_r+0x11a>
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	3401      	adds	r4, #1
 8003bc6:	9305      	str	r3, [sp, #20]
 8003bc8:	4619      	mov	r1, r3
 8003bca:	f04f 0c0a 	mov.w	ip, #10
 8003bce:	4620      	mov	r0, r4
 8003bd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bd4:	3a30      	subs	r2, #48	; 0x30
 8003bd6:	2a09      	cmp	r2, #9
 8003bd8:	d903      	bls.n	8003be2 <_vfiprintf_r+0x1ee>
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0c5      	beq.n	8003b6a <_vfiprintf_r+0x176>
 8003bde:	9105      	str	r1, [sp, #20]
 8003be0:	e7c3      	b.n	8003b6a <_vfiprintf_r+0x176>
 8003be2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003be6:	4604      	mov	r4, r0
 8003be8:	2301      	movs	r3, #1
 8003bea:	e7f0      	b.n	8003bce <_vfiprintf_r+0x1da>
 8003bec:	ab03      	add	r3, sp, #12
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	462a      	mov	r2, r5
 8003bf2:	4b16      	ldr	r3, [pc, #88]	; (8003c4c <_vfiprintf_r+0x258>)
 8003bf4:	a904      	add	r1, sp, #16
 8003bf6:	4630      	mov	r0, r6
 8003bf8:	f3af 8000 	nop.w
 8003bfc:	4607      	mov	r7, r0
 8003bfe:	1c78      	adds	r0, r7, #1
 8003c00:	d1d6      	bne.n	8003bb0 <_vfiprintf_r+0x1bc>
 8003c02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c04:	07d9      	lsls	r1, r3, #31
 8003c06:	d405      	bmi.n	8003c14 <_vfiprintf_r+0x220>
 8003c08:	89ab      	ldrh	r3, [r5, #12]
 8003c0a:	059a      	lsls	r2, r3, #22
 8003c0c:	d402      	bmi.n	8003c14 <_vfiprintf_r+0x220>
 8003c0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c10:	f7ff fd7f 	bl	8003712 <__retarget_lock_release_recursive>
 8003c14:	89ab      	ldrh	r3, [r5, #12]
 8003c16:	065b      	lsls	r3, r3, #25
 8003c18:	f53f af12 	bmi.w	8003a40 <_vfiprintf_r+0x4c>
 8003c1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c1e:	e711      	b.n	8003a44 <_vfiprintf_r+0x50>
 8003c20:	ab03      	add	r3, sp, #12
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	462a      	mov	r2, r5
 8003c26:	4b09      	ldr	r3, [pc, #36]	; (8003c4c <_vfiprintf_r+0x258>)
 8003c28:	a904      	add	r1, sp, #16
 8003c2a:	4630      	mov	r0, r6
 8003c2c:	f000 f880 	bl	8003d30 <_printf_i>
 8003c30:	e7e4      	b.n	8003bfc <_vfiprintf_r+0x208>
 8003c32:	bf00      	nop
 8003c34:	08004198 	.word	0x08004198
 8003c38:	080041b8 	.word	0x080041b8
 8003c3c:	08004178 	.word	0x08004178
 8003c40:	080041d8 	.word	0x080041d8
 8003c44:	080041e2 	.word	0x080041e2
 8003c48:	00000000 	.word	0x00000000
 8003c4c:	080039cf 	.word	0x080039cf
 8003c50:	080041de 	.word	0x080041de

08003c54 <_printf_common>:
 8003c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c58:	4616      	mov	r6, r2
 8003c5a:	4699      	mov	r9, r3
 8003c5c:	688a      	ldr	r2, [r1, #8]
 8003c5e:	690b      	ldr	r3, [r1, #16]
 8003c60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c64:	4293      	cmp	r3, r2
 8003c66:	bfb8      	it	lt
 8003c68:	4613      	movlt	r3, r2
 8003c6a:	6033      	str	r3, [r6, #0]
 8003c6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c70:	4607      	mov	r7, r0
 8003c72:	460c      	mov	r4, r1
 8003c74:	b10a      	cbz	r2, 8003c7a <_printf_common+0x26>
 8003c76:	3301      	adds	r3, #1
 8003c78:	6033      	str	r3, [r6, #0]
 8003c7a:	6823      	ldr	r3, [r4, #0]
 8003c7c:	0699      	lsls	r1, r3, #26
 8003c7e:	bf42      	ittt	mi
 8003c80:	6833      	ldrmi	r3, [r6, #0]
 8003c82:	3302      	addmi	r3, #2
 8003c84:	6033      	strmi	r3, [r6, #0]
 8003c86:	6825      	ldr	r5, [r4, #0]
 8003c88:	f015 0506 	ands.w	r5, r5, #6
 8003c8c:	d106      	bne.n	8003c9c <_printf_common+0x48>
 8003c8e:	f104 0a19 	add.w	sl, r4, #25
 8003c92:	68e3      	ldr	r3, [r4, #12]
 8003c94:	6832      	ldr	r2, [r6, #0]
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	42ab      	cmp	r3, r5
 8003c9a:	dc26      	bgt.n	8003cea <_printf_common+0x96>
 8003c9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ca0:	1e13      	subs	r3, r2, #0
 8003ca2:	6822      	ldr	r2, [r4, #0]
 8003ca4:	bf18      	it	ne
 8003ca6:	2301      	movne	r3, #1
 8003ca8:	0692      	lsls	r2, r2, #26
 8003caa:	d42b      	bmi.n	8003d04 <_printf_common+0xb0>
 8003cac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cb0:	4649      	mov	r1, r9
 8003cb2:	4638      	mov	r0, r7
 8003cb4:	47c0      	blx	r8
 8003cb6:	3001      	adds	r0, #1
 8003cb8:	d01e      	beq.n	8003cf8 <_printf_common+0xa4>
 8003cba:	6823      	ldr	r3, [r4, #0]
 8003cbc:	68e5      	ldr	r5, [r4, #12]
 8003cbe:	6832      	ldr	r2, [r6, #0]
 8003cc0:	f003 0306 	and.w	r3, r3, #6
 8003cc4:	2b04      	cmp	r3, #4
 8003cc6:	bf08      	it	eq
 8003cc8:	1aad      	subeq	r5, r5, r2
 8003cca:	68a3      	ldr	r3, [r4, #8]
 8003ccc:	6922      	ldr	r2, [r4, #16]
 8003cce:	bf0c      	ite	eq
 8003cd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cd4:	2500      	movne	r5, #0
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	bfc4      	itt	gt
 8003cda:	1a9b      	subgt	r3, r3, r2
 8003cdc:	18ed      	addgt	r5, r5, r3
 8003cde:	2600      	movs	r6, #0
 8003ce0:	341a      	adds	r4, #26
 8003ce2:	42b5      	cmp	r5, r6
 8003ce4:	d11a      	bne.n	8003d1c <_printf_common+0xc8>
 8003ce6:	2000      	movs	r0, #0
 8003ce8:	e008      	b.n	8003cfc <_printf_common+0xa8>
 8003cea:	2301      	movs	r3, #1
 8003cec:	4652      	mov	r2, sl
 8003cee:	4649      	mov	r1, r9
 8003cf0:	4638      	mov	r0, r7
 8003cf2:	47c0      	blx	r8
 8003cf4:	3001      	adds	r0, #1
 8003cf6:	d103      	bne.n	8003d00 <_printf_common+0xac>
 8003cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d00:	3501      	adds	r5, #1
 8003d02:	e7c6      	b.n	8003c92 <_printf_common+0x3e>
 8003d04:	18e1      	adds	r1, r4, r3
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	2030      	movs	r0, #48	; 0x30
 8003d0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d0e:	4422      	add	r2, r4
 8003d10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d18:	3302      	adds	r3, #2
 8003d1a:	e7c7      	b.n	8003cac <_printf_common+0x58>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	4622      	mov	r2, r4
 8003d20:	4649      	mov	r1, r9
 8003d22:	4638      	mov	r0, r7
 8003d24:	47c0      	blx	r8
 8003d26:	3001      	adds	r0, #1
 8003d28:	d0e6      	beq.n	8003cf8 <_printf_common+0xa4>
 8003d2a:	3601      	adds	r6, #1
 8003d2c:	e7d9      	b.n	8003ce2 <_printf_common+0x8e>
	...

08003d30 <_printf_i>:
 8003d30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d34:	7e0f      	ldrb	r7, [r1, #24]
 8003d36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d38:	2f78      	cmp	r7, #120	; 0x78
 8003d3a:	4691      	mov	r9, r2
 8003d3c:	4680      	mov	r8, r0
 8003d3e:	460c      	mov	r4, r1
 8003d40:	469a      	mov	sl, r3
 8003d42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d46:	d807      	bhi.n	8003d58 <_printf_i+0x28>
 8003d48:	2f62      	cmp	r7, #98	; 0x62
 8003d4a:	d80a      	bhi.n	8003d62 <_printf_i+0x32>
 8003d4c:	2f00      	cmp	r7, #0
 8003d4e:	f000 80d8 	beq.w	8003f02 <_printf_i+0x1d2>
 8003d52:	2f58      	cmp	r7, #88	; 0x58
 8003d54:	f000 80a3 	beq.w	8003e9e <_printf_i+0x16e>
 8003d58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d60:	e03a      	b.n	8003dd8 <_printf_i+0xa8>
 8003d62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d66:	2b15      	cmp	r3, #21
 8003d68:	d8f6      	bhi.n	8003d58 <_printf_i+0x28>
 8003d6a:	a101      	add	r1, pc, #4	; (adr r1, 8003d70 <_printf_i+0x40>)
 8003d6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d70:	08003dc9 	.word	0x08003dc9
 8003d74:	08003ddd 	.word	0x08003ddd
 8003d78:	08003d59 	.word	0x08003d59
 8003d7c:	08003d59 	.word	0x08003d59
 8003d80:	08003d59 	.word	0x08003d59
 8003d84:	08003d59 	.word	0x08003d59
 8003d88:	08003ddd 	.word	0x08003ddd
 8003d8c:	08003d59 	.word	0x08003d59
 8003d90:	08003d59 	.word	0x08003d59
 8003d94:	08003d59 	.word	0x08003d59
 8003d98:	08003d59 	.word	0x08003d59
 8003d9c:	08003ee9 	.word	0x08003ee9
 8003da0:	08003e0d 	.word	0x08003e0d
 8003da4:	08003ecb 	.word	0x08003ecb
 8003da8:	08003d59 	.word	0x08003d59
 8003dac:	08003d59 	.word	0x08003d59
 8003db0:	08003f0b 	.word	0x08003f0b
 8003db4:	08003d59 	.word	0x08003d59
 8003db8:	08003e0d 	.word	0x08003e0d
 8003dbc:	08003d59 	.word	0x08003d59
 8003dc0:	08003d59 	.word	0x08003d59
 8003dc4:	08003ed3 	.word	0x08003ed3
 8003dc8:	682b      	ldr	r3, [r5, #0]
 8003dca:	1d1a      	adds	r2, r3, #4
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	602a      	str	r2, [r5, #0]
 8003dd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e0a3      	b.n	8003f24 <_printf_i+0x1f4>
 8003ddc:	6820      	ldr	r0, [r4, #0]
 8003dde:	6829      	ldr	r1, [r5, #0]
 8003de0:	0606      	lsls	r6, r0, #24
 8003de2:	f101 0304 	add.w	r3, r1, #4
 8003de6:	d50a      	bpl.n	8003dfe <_printf_i+0xce>
 8003de8:	680e      	ldr	r6, [r1, #0]
 8003dea:	602b      	str	r3, [r5, #0]
 8003dec:	2e00      	cmp	r6, #0
 8003dee:	da03      	bge.n	8003df8 <_printf_i+0xc8>
 8003df0:	232d      	movs	r3, #45	; 0x2d
 8003df2:	4276      	negs	r6, r6
 8003df4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003df8:	485e      	ldr	r0, [pc, #376]	; (8003f74 <_printf_i+0x244>)
 8003dfa:	230a      	movs	r3, #10
 8003dfc:	e019      	b.n	8003e32 <_printf_i+0x102>
 8003dfe:	680e      	ldr	r6, [r1, #0]
 8003e00:	602b      	str	r3, [r5, #0]
 8003e02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e06:	bf18      	it	ne
 8003e08:	b236      	sxthne	r6, r6
 8003e0a:	e7ef      	b.n	8003dec <_printf_i+0xbc>
 8003e0c:	682b      	ldr	r3, [r5, #0]
 8003e0e:	6820      	ldr	r0, [r4, #0]
 8003e10:	1d19      	adds	r1, r3, #4
 8003e12:	6029      	str	r1, [r5, #0]
 8003e14:	0601      	lsls	r1, r0, #24
 8003e16:	d501      	bpl.n	8003e1c <_printf_i+0xec>
 8003e18:	681e      	ldr	r6, [r3, #0]
 8003e1a:	e002      	b.n	8003e22 <_printf_i+0xf2>
 8003e1c:	0646      	lsls	r6, r0, #25
 8003e1e:	d5fb      	bpl.n	8003e18 <_printf_i+0xe8>
 8003e20:	881e      	ldrh	r6, [r3, #0]
 8003e22:	4854      	ldr	r0, [pc, #336]	; (8003f74 <_printf_i+0x244>)
 8003e24:	2f6f      	cmp	r7, #111	; 0x6f
 8003e26:	bf0c      	ite	eq
 8003e28:	2308      	moveq	r3, #8
 8003e2a:	230a      	movne	r3, #10
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e32:	6865      	ldr	r5, [r4, #4]
 8003e34:	60a5      	str	r5, [r4, #8]
 8003e36:	2d00      	cmp	r5, #0
 8003e38:	bfa2      	ittt	ge
 8003e3a:	6821      	ldrge	r1, [r4, #0]
 8003e3c:	f021 0104 	bicge.w	r1, r1, #4
 8003e40:	6021      	strge	r1, [r4, #0]
 8003e42:	b90e      	cbnz	r6, 8003e48 <_printf_i+0x118>
 8003e44:	2d00      	cmp	r5, #0
 8003e46:	d04d      	beq.n	8003ee4 <_printf_i+0x1b4>
 8003e48:	4615      	mov	r5, r2
 8003e4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e4e:	fb03 6711 	mls	r7, r3, r1, r6
 8003e52:	5dc7      	ldrb	r7, [r0, r7]
 8003e54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e58:	4637      	mov	r7, r6
 8003e5a:	42bb      	cmp	r3, r7
 8003e5c:	460e      	mov	r6, r1
 8003e5e:	d9f4      	bls.n	8003e4a <_printf_i+0x11a>
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	d10b      	bne.n	8003e7c <_printf_i+0x14c>
 8003e64:	6823      	ldr	r3, [r4, #0]
 8003e66:	07de      	lsls	r6, r3, #31
 8003e68:	d508      	bpl.n	8003e7c <_printf_i+0x14c>
 8003e6a:	6923      	ldr	r3, [r4, #16]
 8003e6c:	6861      	ldr	r1, [r4, #4]
 8003e6e:	4299      	cmp	r1, r3
 8003e70:	bfde      	ittt	le
 8003e72:	2330      	movle	r3, #48	; 0x30
 8003e74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e7c:	1b52      	subs	r2, r2, r5
 8003e7e:	6122      	str	r2, [r4, #16]
 8003e80:	f8cd a000 	str.w	sl, [sp]
 8003e84:	464b      	mov	r3, r9
 8003e86:	aa03      	add	r2, sp, #12
 8003e88:	4621      	mov	r1, r4
 8003e8a:	4640      	mov	r0, r8
 8003e8c:	f7ff fee2 	bl	8003c54 <_printf_common>
 8003e90:	3001      	adds	r0, #1
 8003e92:	d14c      	bne.n	8003f2e <_printf_i+0x1fe>
 8003e94:	f04f 30ff 	mov.w	r0, #4294967295
 8003e98:	b004      	add	sp, #16
 8003e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e9e:	4835      	ldr	r0, [pc, #212]	; (8003f74 <_printf_i+0x244>)
 8003ea0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003ea4:	6829      	ldr	r1, [r5, #0]
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	f851 6b04 	ldr.w	r6, [r1], #4
 8003eac:	6029      	str	r1, [r5, #0]
 8003eae:	061d      	lsls	r5, r3, #24
 8003eb0:	d514      	bpl.n	8003edc <_printf_i+0x1ac>
 8003eb2:	07df      	lsls	r7, r3, #31
 8003eb4:	bf44      	itt	mi
 8003eb6:	f043 0320 	orrmi.w	r3, r3, #32
 8003eba:	6023      	strmi	r3, [r4, #0]
 8003ebc:	b91e      	cbnz	r6, 8003ec6 <_printf_i+0x196>
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	f023 0320 	bic.w	r3, r3, #32
 8003ec4:	6023      	str	r3, [r4, #0]
 8003ec6:	2310      	movs	r3, #16
 8003ec8:	e7b0      	b.n	8003e2c <_printf_i+0xfc>
 8003eca:	6823      	ldr	r3, [r4, #0]
 8003ecc:	f043 0320 	orr.w	r3, r3, #32
 8003ed0:	6023      	str	r3, [r4, #0]
 8003ed2:	2378      	movs	r3, #120	; 0x78
 8003ed4:	4828      	ldr	r0, [pc, #160]	; (8003f78 <_printf_i+0x248>)
 8003ed6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003eda:	e7e3      	b.n	8003ea4 <_printf_i+0x174>
 8003edc:	0659      	lsls	r1, r3, #25
 8003ede:	bf48      	it	mi
 8003ee0:	b2b6      	uxthmi	r6, r6
 8003ee2:	e7e6      	b.n	8003eb2 <_printf_i+0x182>
 8003ee4:	4615      	mov	r5, r2
 8003ee6:	e7bb      	b.n	8003e60 <_printf_i+0x130>
 8003ee8:	682b      	ldr	r3, [r5, #0]
 8003eea:	6826      	ldr	r6, [r4, #0]
 8003eec:	6961      	ldr	r1, [r4, #20]
 8003eee:	1d18      	adds	r0, r3, #4
 8003ef0:	6028      	str	r0, [r5, #0]
 8003ef2:	0635      	lsls	r5, r6, #24
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	d501      	bpl.n	8003efc <_printf_i+0x1cc>
 8003ef8:	6019      	str	r1, [r3, #0]
 8003efa:	e002      	b.n	8003f02 <_printf_i+0x1d2>
 8003efc:	0670      	lsls	r0, r6, #25
 8003efe:	d5fb      	bpl.n	8003ef8 <_printf_i+0x1c8>
 8003f00:	8019      	strh	r1, [r3, #0]
 8003f02:	2300      	movs	r3, #0
 8003f04:	6123      	str	r3, [r4, #16]
 8003f06:	4615      	mov	r5, r2
 8003f08:	e7ba      	b.n	8003e80 <_printf_i+0x150>
 8003f0a:	682b      	ldr	r3, [r5, #0]
 8003f0c:	1d1a      	adds	r2, r3, #4
 8003f0e:	602a      	str	r2, [r5, #0]
 8003f10:	681d      	ldr	r5, [r3, #0]
 8003f12:	6862      	ldr	r2, [r4, #4]
 8003f14:	2100      	movs	r1, #0
 8003f16:	4628      	mov	r0, r5
 8003f18:	f7fc f96a 	bl	80001f0 <memchr>
 8003f1c:	b108      	cbz	r0, 8003f22 <_printf_i+0x1f2>
 8003f1e:	1b40      	subs	r0, r0, r5
 8003f20:	6060      	str	r0, [r4, #4]
 8003f22:	6863      	ldr	r3, [r4, #4]
 8003f24:	6123      	str	r3, [r4, #16]
 8003f26:	2300      	movs	r3, #0
 8003f28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f2c:	e7a8      	b.n	8003e80 <_printf_i+0x150>
 8003f2e:	6923      	ldr	r3, [r4, #16]
 8003f30:	462a      	mov	r2, r5
 8003f32:	4649      	mov	r1, r9
 8003f34:	4640      	mov	r0, r8
 8003f36:	47d0      	blx	sl
 8003f38:	3001      	adds	r0, #1
 8003f3a:	d0ab      	beq.n	8003e94 <_printf_i+0x164>
 8003f3c:	6823      	ldr	r3, [r4, #0]
 8003f3e:	079b      	lsls	r3, r3, #30
 8003f40:	d413      	bmi.n	8003f6a <_printf_i+0x23a>
 8003f42:	68e0      	ldr	r0, [r4, #12]
 8003f44:	9b03      	ldr	r3, [sp, #12]
 8003f46:	4298      	cmp	r0, r3
 8003f48:	bfb8      	it	lt
 8003f4a:	4618      	movlt	r0, r3
 8003f4c:	e7a4      	b.n	8003e98 <_printf_i+0x168>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	4632      	mov	r2, r6
 8003f52:	4649      	mov	r1, r9
 8003f54:	4640      	mov	r0, r8
 8003f56:	47d0      	blx	sl
 8003f58:	3001      	adds	r0, #1
 8003f5a:	d09b      	beq.n	8003e94 <_printf_i+0x164>
 8003f5c:	3501      	adds	r5, #1
 8003f5e:	68e3      	ldr	r3, [r4, #12]
 8003f60:	9903      	ldr	r1, [sp, #12]
 8003f62:	1a5b      	subs	r3, r3, r1
 8003f64:	42ab      	cmp	r3, r5
 8003f66:	dcf2      	bgt.n	8003f4e <_printf_i+0x21e>
 8003f68:	e7eb      	b.n	8003f42 <_printf_i+0x212>
 8003f6a:	2500      	movs	r5, #0
 8003f6c:	f104 0619 	add.w	r6, r4, #25
 8003f70:	e7f5      	b.n	8003f5e <_printf_i+0x22e>
 8003f72:	bf00      	nop
 8003f74:	080041e9 	.word	0x080041e9
 8003f78:	080041fa 	.word	0x080041fa

08003f7c <_sbrk_r>:
 8003f7c:	b538      	push	{r3, r4, r5, lr}
 8003f7e:	4d06      	ldr	r5, [pc, #24]	; (8003f98 <_sbrk_r+0x1c>)
 8003f80:	2300      	movs	r3, #0
 8003f82:	4604      	mov	r4, r0
 8003f84:	4608      	mov	r0, r1
 8003f86:	602b      	str	r3, [r5, #0]
 8003f88:	f7fc fe0a 	bl	8000ba0 <_sbrk>
 8003f8c:	1c43      	adds	r3, r0, #1
 8003f8e:	d102      	bne.n	8003f96 <_sbrk_r+0x1a>
 8003f90:	682b      	ldr	r3, [r5, #0]
 8003f92:	b103      	cbz	r3, 8003f96 <_sbrk_r+0x1a>
 8003f94:	6023      	str	r3, [r4, #0]
 8003f96:	bd38      	pop	{r3, r4, r5, pc}
 8003f98:	20000104 	.word	0x20000104

08003f9c <__sread>:
 8003f9c:	b510      	push	{r4, lr}
 8003f9e:	460c      	mov	r4, r1
 8003fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fa4:	f000 f8a0 	bl	80040e8 <_read_r>
 8003fa8:	2800      	cmp	r0, #0
 8003faa:	bfab      	itete	ge
 8003fac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003fae:	89a3      	ldrhlt	r3, [r4, #12]
 8003fb0:	181b      	addge	r3, r3, r0
 8003fb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003fb6:	bfac      	ite	ge
 8003fb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003fba:	81a3      	strhlt	r3, [r4, #12]
 8003fbc:	bd10      	pop	{r4, pc}

08003fbe <__swrite>:
 8003fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fc2:	461f      	mov	r7, r3
 8003fc4:	898b      	ldrh	r3, [r1, #12]
 8003fc6:	05db      	lsls	r3, r3, #23
 8003fc8:	4605      	mov	r5, r0
 8003fca:	460c      	mov	r4, r1
 8003fcc:	4616      	mov	r6, r2
 8003fce:	d505      	bpl.n	8003fdc <__swrite+0x1e>
 8003fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f000 f868 	bl	80040ac <_lseek_r>
 8003fdc:	89a3      	ldrh	r3, [r4, #12]
 8003fde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fe2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fe6:	81a3      	strh	r3, [r4, #12]
 8003fe8:	4632      	mov	r2, r6
 8003fea:	463b      	mov	r3, r7
 8003fec:	4628      	mov	r0, r5
 8003fee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ff2:	f000 b817 	b.w	8004024 <_write_r>

08003ff6 <__sseek>:
 8003ff6:	b510      	push	{r4, lr}
 8003ff8:	460c      	mov	r4, r1
 8003ffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ffe:	f000 f855 	bl	80040ac <_lseek_r>
 8004002:	1c43      	adds	r3, r0, #1
 8004004:	89a3      	ldrh	r3, [r4, #12]
 8004006:	bf15      	itete	ne
 8004008:	6560      	strne	r0, [r4, #84]	; 0x54
 800400a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800400e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004012:	81a3      	strheq	r3, [r4, #12]
 8004014:	bf18      	it	ne
 8004016:	81a3      	strhne	r3, [r4, #12]
 8004018:	bd10      	pop	{r4, pc}

0800401a <__sclose>:
 800401a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800401e:	f000 b813 	b.w	8004048 <_close_r>
	...

08004024 <_write_r>:
 8004024:	b538      	push	{r3, r4, r5, lr}
 8004026:	4d07      	ldr	r5, [pc, #28]	; (8004044 <_write_r+0x20>)
 8004028:	4604      	mov	r4, r0
 800402a:	4608      	mov	r0, r1
 800402c:	4611      	mov	r1, r2
 800402e:	2200      	movs	r2, #0
 8004030:	602a      	str	r2, [r5, #0]
 8004032:	461a      	mov	r2, r3
 8004034:	f7fc faae 	bl	8000594 <_write>
 8004038:	1c43      	adds	r3, r0, #1
 800403a:	d102      	bne.n	8004042 <_write_r+0x1e>
 800403c:	682b      	ldr	r3, [r5, #0]
 800403e:	b103      	cbz	r3, 8004042 <_write_r+0x1e>
 8004040:	6023      	str	r3, [r4, #0]
 8004042:	bd38      	pop	{r3, r4, r5, pc}
 8004044:	20000104 	.word	0x20000104

08004048 <_close_r>:
 8004048:	b538      	push	{r3, r4, r5, lr}
 800404a:	4d06      	ldr	r5, [pc, #24]	; (8004064 <_close_r+0x1c>)
 800404c:	2300      	movs	r3, #0
 800404e:	4604      	mov	r4, r0
 8004050:	4608      	mov	r0, r1
 8004052:	602b      	str	r3, [r5, #0]
 8004054:	f7fc fd6f 	bl	8000b36 <_close>
 8004058:	1c43      	adds	r3, r0, #1
 800405a:	d102      	bne.n	8004062 <_close_r+0x1a>
 800405c:	682b      	ldr	r3, [r5, #0]
 800405e:	b103      	cbz	r3, 8004062 <_close_r+0x1a>
 8004060:	6023      	str	r3, [r4, #0]
 8004062:	bd38      	pop	{r3, r4, r5, pc}
 8004064:	20000104 	.word	0x20000104

08004068 <_fstat_r>:
 8004068:	b538      	push	{r3, r4, r5, lr}
 800406a:	4d07      	ldr	r5, [pc, #28]	; (8004088 <_fstat_r+0x20>)
 800406c:	2300      	movs	r3, #0
 800406e:	4604      	mov	r4, r0
 8004070:	4608      	mov	r0, r1
 8004072:	4611      	mov	r1, r2
 8004074:	602b      	str	r3, [r5, #0]
 8004076:	f7fc fd6a 	bl	8000b4e <_fstat>
 800407a:	1c43      	adds	r3, r0, #1
 800407c:	d102      	bne.n	8004084 <_fstat_r+0x1c>
 800407e:	682b      	ldr	r3, [r5, #0]
 8004080:	b103      	cbz	r3, 8004084 <_fstat_r+0x1c>
 8004082:	6023      	str	r3, [r4, #0]
 8004084:	bd38      	pop	{r3, r4, r5, pc}
 8004086:	bf00      	nop
 8004088:	20000104 	.word	0x20000104

0800408c <_isatty_r>:
 800408c:	b538      	push	{r3, r4, r5, lr}
 800408e:	4d06      	ldr	r5, [pc, #24]	; (80040a8 <_isatty_r+0x1c>)
 8004090:	2300      	movs	r3, #0
 8004092:	4604      	mov	r4, r0
 8004094:	4608      	mov	r0, r1
 8004096:	602b      	str	r3, [r5, #0]
 8004098:	f7fc fd69 	bl	8000b6e <_isatty>
 800409c:	1c43      	adds	r3, r0, #1
 800409e:	d102      	bne.n	80040a6 <_isatty_r+0x1a>
 80040a0:	682b      	ldr	r3, [r5, #0]
 80040a2:	b103      	cbz	r3, 80040a6 <_isatty_r+0x1a>
 80040a4:	6023      	str	r3, [r4, #0]
 80040a6:	bd38      	pop	{r3, r4, r5, pc}
 80040a8:	20000104 	.word	0x20000104

080040ac <_lseek_r>:
 80040ac:	b538      	push	{r3, r4, r5, lr}
 80040ae:	4d07      	ldr	r5, [pc, #28]	; (80040cc <_lseek_r+0x20>)
 80040b0:	4604      	mov	r4, r0
 80040b2:	4608      	mov	r0, r1
 80040b4:	4611      	mov	r1, r2
 80040b6:	2200      	movs	r2, #0
 80040b8:	602a      	str	r2, [r5, #0]
 80040ba:	461a      	mov	r2, r3
 80040bc:	f7fc fd62 	bl	8000b84 <_lseek>
 80040c0:	1c43      	adds	r3, r0, #1
 80040c2:	d102      	bne.n	80040ca <_lseek_r+0x1e>
 80040c4:	682b      	ldr	r3, [r5, #0]
 80040c6:	b103      	cbz	r3, 80040ca <_lseek_r+0x1e>
 80040c8:	6023      	str	r3, [r4, #0]
 80040ca:	bd38      	pop	{r3, r4, r5, pc}
 80040cc:	20000104 	.word	0x20000104

080040d0 <__malloc_lock>:
 80040d0:	4801      	ldr	r0, [pc, #4]	; (80040d8 <__malloc_lock+0x8>)
 80040d2:	f7ff bb1d 	b.w	8003710 <__retarget_lock_acquire_recursive>
 80040d6:	bf00      	nop
 80040d8:	200000f8 	.word	0x200000f8

080040dc <__malloc_unlock>:
 80040dc:	4801      	ldr	r0, [pc, #4]	; (80040e4 <__malloc_unlock+0x8>)
 80040de:	f7ff bb18 	b.w	8003712 <__retarget_lock_release_recursive>
 80040e2:	bf00      	nop
 80040e4:	200000f8 	.word	0x200000f8

080040e8 <_read_r>:
 80040e8:	b538      	push	{r3, r4, r5, lr}
 80040ea:	4d07      	ldr	r5, [pc, #28]	; (8004108 <_read_r+0x20>)
 80040ec:	4604      	mov	r4, r0
 80040ee:	4608      	mov	r0, r1
 80040f0:	4611      	mov	r1, r2
 80040f2:	2200      	movs	r2, #0
 80040f4:	602a      	str	r2, [r5, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	f7fc fd00 	bl	8000afc <_read>
 80040fc:	1c43      	adds	r3, r0, #1
 80040fe:	d102      	bne.n	8004106 <_read_r+0x1e>
 8004100:	682b      	ldr	r3, [r5, #0]
 8004102:	b103      	cbz	r3, 8004106 <_read_r+0x1e>
 8004104:	6023      	str	r3, [r4, #0]
 8004106:	bd38      	pop	{r3, r4, r5, pc}
 8004108:	20000104 	.word	0x20000104

0800410c <_init>:
 800410c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800410e:	bf00      	nop
 8004110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004112:	bc08      	pop	{r3}
 8004114:	469e      	mov	lr, r3
 8004116:	4770      	bx	lr

08004118 <_fini>:
 8004118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800411a:	bf00      	nop
 800411c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800411e:	bc08      	pop	{r3}
 8004120:	469e      	mov	lr, r3
 8004122:	4770      	bx	lr
