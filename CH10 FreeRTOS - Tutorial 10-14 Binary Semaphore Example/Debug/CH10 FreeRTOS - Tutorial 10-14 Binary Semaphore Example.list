
CH10 FreeRTOS - Tutorial 10-14 Binary Semaphore Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065c0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08006770  08006770  00016770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006884  08006884  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08006884  08006884  00016884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800688c  0800688c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800688c  0800688c  0001688c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006890  08006890  00016890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00004bac  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004c18  20004c18  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001524e  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003241  00000000  00000000  0003532d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012d0  00000000  00000000  00038570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e6a  00000000  00000000  00039840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00004437  00000000  00000000  0003a6aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014766  00000000  00000000  0003eae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e421b  00000000  00000000  00053247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000055f8  00000000  00000000  00137464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a0  00000000  00000000  0013ca5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006758 	.word	0x08006758

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08006758 	.word	0x08006758

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d013      	beq.n	80005cc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005ac:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d00b      	beq.n	80005cc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005b4:	e000      	b.n	80005b8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005b6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d0f9      	beq.n	80005b6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005c2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	b2d2      	uxtb	r2, r2
 80005ca:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005cc:	687b      	ldr	r3, [r7, #4]
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr

080005da <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*Function needed to use printf on CONSOLE*/
int _write(int file, char *ptr, int len){
 80005da:	b580      	push	{r7, lr}
 80005dc:	b086      	sub	sp, #24
 80005de:	af00      	add	r7, sp, #0
 80005e0:	60f8      	str	r0, [r7, #12]
 80005e2:	60b9      	str	r1, [r7, #8]
 80005e4:	607a      	str	r2, [r7, #4]
	  int i = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
	  for (i=0; i<len; i++)
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	e009      	b.n	8000604 <_write+0x2a>
		  ITM_SendChar((*ptr++));
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	1c5a      	adds	r2, r3, #1
 80005f4:	60ba      	str	r2, [r7, #8]
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff ffc7 	bl	800058c <ITM_SendChar>
	  for (i=0; i<len; i++)
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	3301      	adds	r3, #1
 8000602:	617b      	str	r3, [r7, #20]
 8000604:	697a      	ldr	r2, [r7, #20]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	429a      	cmp	r2, r3
 800060a:	dbf1      	blt.n	80005f0 <_write+0x16>
	  return len;
 800060c:	687b      	ldr	r3, [r7, #4]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3718      	adds	r7, #24
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
	...

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061c:	f000 fad4 	bl	8000bc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000620:	f000 f834 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000624:	f000 f8a2 	bl	800076c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  printf("PROGRAM START \n\r");
 8000628:	480f      	ldr	r0, [pc, #60]	; (8000668 <main+0x50>)
 800062a:	f005 f961 	bl	80058f0 <iprintf>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800062e:	f001 fdc5 	bl	80021bc <osKernelInitialize>
  /* USER CODE BEGIN RTOS_MUTEX */

  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 8000632:	4a0e      	ldr	r2, [pc, #56]	; (800066c <main+0x54>)
 8000634:	2101      	movs	r1, #1
 8000636:	2001      	movs	r0, #1
 8000638:	f001 fed7 	bl	80023ea <osSemaphoreNew>
 800063c:	4603      	mov	r3, r0
 800063e:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <main+0x58>)
 8000640:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000642:	4a0c      	ldr	r2, [pc, #48]	; (8000674 <main+0x5c>)
 8000644:	2100      	movs	r1, #0
 8000646:	480c      	ldr	r0, [pc, #48]	; (8000678 <main+0x60>)
 8000648:	f001 fe02 	bl	8002250 <osThreadNew>
 800064c:	4603      	mov	r3, r0
 800064e:	4a0b      	ldr	r2, [pc, #44]	; (800067c <main+0x64>)
 8000650:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  myTask02Handle = osThreadNew(StartmyTask02, NULL, &myTask02_attributes);
 8000652:	4a0b      	ldr	r2, [pc, #44]	; (8000680 <main+0x68>)
 8000654:	2100      	movs	r1, #0
 8000656:	480b      	ldr	r0, [pc, #44]	; (8000684 <main+0x6c>)
 8000658:	f001 fdfa 	bl	8002250 <osThreadNew>
 800065c:	4603      	mov	r3, r0
 800065e:	4a0a      	ldr	r2, [pc, #40]	; (8000688 <main+0x70>)
 8000660:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000662:	f001 fdcf 	bl	8002204 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000666:	e7fe      	b.n	8000666 <main+0x4e>
 8000668:	08006798 	.word	0x08006798
 800066c:	08006828 	.word	0x08006828
 8000670:	20000090 	.word	0x20000090
 8000674:	080067e0 	.word	0x080067e0
 8000678:	080007f5 	.word	0x080007f5
 800067c:	20000088 	.word	0x20000088
 8000680:	08006804 	.word	0x08006804
 8000684:	08000815 	.word	0x08000815
 8000688:	2000008c 	.word	0x2000008c

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b094      	sub	sp, #80	; 0x50
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	2230      	movs	r2, #48	; 0x30
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f005 fa6e 	bl	8005b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	4b2b      	ldr	r3, [pc, #172]	; (8000764 <SystemClock_Config+0xd8>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	4a2a      	ldr	r2, [pc, #168]	; (8000764 <SystemClock_Config+0xd8>)
 80006ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006be:	6413      	str	r3, [r2, #64]	; 0x40
 80006c0:	4b28      	ldr	r3, [pc, #160]	; (8000764 <SystemClock_Config+0xd8>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006cc:	2300      	movs	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	4b25      	ldr	r3, [pc, #148]	; (8000768 <SystemClock_Config+0xdc>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a24      	ldr	r2, [pc, #144]	; (8000768 <SystemClock_Config+0xdc>)
 80006d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	4b22      	ldr	r3, [pc, #136]	; (8000768 <SystemClock_Config+0xdc>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e8:	2301      	movs	r3, #1
 80006ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f2:	2302      	movs	r3, #2
 80006f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006fc:	2304      	movs	r3, #4
 80006fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000700:	23b4      	movs	r3, #180	; 0xb4
 8000702:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000704:	2302      	movs	r3, #2
 8000706:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000708:	2307      	movs	r3, #7
 800070a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 0320 	add.w	r3, r7, #32
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fdb7 	bl	8001284 <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800071c:	f000 f8c2 	bl	80008a4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000720:	f000 fd60 	bl	80011e4 <HAL_PWREx_EnableOverDrive>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800072a:	f000 f8bb 	bl	80008a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	230f      	movs	r3, #15
 8000730:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000732:	2302      	movs	r3, #2
 8000734:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800073a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800073e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000744:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	2105      	movs	r1, #5
 800074c:	4618      	mov	r0, r3
 800074e:	f001 f811 	bl	8001774 <HAL_RCC_ClockConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000758:	f000 f8a4 	bl	80008a4 <Error_Handler>
  }
}
 800075c:	bf00      	nop
 800075e:	3750      	adds	r7, #80	; 0x50
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	4b19      	ldr	r3, [pc, #100]	; (80007ec <MX_GPIO_Init+0x80>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a18      	ldr	r2, [pc, #96]	; (80007ec <MX_GPIO_Init+0x80>)
 800078c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b16      	ldr	r3, [pc, #88]	; (80007ec <MX_GPIO_Init+0x80>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b12      	ldr	r3, [pc, #72]	; (80007ec <MX_GPIO_Init+0x80>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a11      	ldr	r2, [pc, #68]	; (80007ec <MX_GPIO_Init+0x80>)
 80007a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_GPIO_Init+0x80>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80007c0:	480b      	ldr	r0, [pc, #44]	; (80007f0 <MX_GPIO_Init+0x84>)
 80007c2:	f000 fcf5 	bl	80011b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80007c6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80007ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	4619      	mov	r1, r3
 80007de:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_GPIO_Init+0x84>)
 80007e0:	f000 fb3a 	bl	8000e58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e4:	bf00      	nop
 80007e6:	3720      	adds	r7, #32
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40021800 	.word	0x40021800

080007f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	  printf("DefaultTask \n\r");
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <StartDefaultTask+0x1c>)
 80007fe:	f005 f877 	bl	80058f0 <iprintf>
	  ledChange(0);
 8000802:	2000      	movs	r0, #0
 8000804:	f000 f818 	bl	8000838 <ledChange>
	  osThreadYield();
 8000808:	f001 fdb4 	bl	8002374 <osThreadYield>
	  printf("DefaultTask \n\r");
 800080c:	e7f6      	b.n	80007fc <StartDefaultTask+0x8>
 800080e:	bf00      	nop
 8000810:	080067ac 	.word	0x080067ac

08000814 <StartmyTask02>:
  }
  /* USER CODE END 5 */
}

void StartmyTask02(void *argument)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	  printf("myTask02 \n");
 800081c:	4805      	ldr	r0, [pc, #20]	; (8000834 <StartmyTask02+0x20>)
 800081e:	f005 f8cd 	bl	80059bc <puts>
	  ledChange(1);
 8000822:	2001      	movs	r0, #1
 8000824:	f000 f808 	bl	8000838 <ledChange>
	  osDelay(500);
 8000828:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800082c:	f001 fdc2 	bl	80023b4 <osDelay>
	  printf("myTask02 \n");
 8000830:	e7f4      	b.n	800081c <StartmyTask02+0x8>
 8000832:	bf00      	nop
 8000834:	080067bc 	.word	0x080067bc

08000838 <ledChange>:
  }
  /* USER CODE END 5 */
}


void ledChange(int condition){
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
 8000840:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <ledChange+0x40>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f04f 31ff 	mov.w	r1, #4294967295
 8000848:	4618      	mov	r0, r3
 800084a:	f001 fe57 	bl	80024fc <osSemaphoreAcquire>

	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, condition);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	b2db      	uxtb	r3, r3
 8000852:	461a      	mov	r2, r3
 8000854:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000858:	4808      	ldr	r0, [pc, #32]	; (800087c <ledChange+0x44>)
 800085a:	f000 fca9 	bl	80011b0 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800085e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000862:	f000 f9f3 	bl	8000c4c <HAL_Delay>

	osSemaphoreRelease(myBinarySem01Handle);
 8000866:	4b04      	ldr	r3, [pc, #16]	; (8000878 <ledChange+0x40>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4618      	mov	r0, r3
 800086c:	f001 fe98 	bl	80025a0 <osSemaphoreRelease>
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000090 	.word	0x20000090
 800087c:	40021800 	.word	0x40021800

08000880 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a04      	ldr	r2, [pc, #16]	; (80008a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d101      	bne.n	8000896 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000892:	f000 f9bb 	bl	8000c0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40001000 	.word	0x40001000

080008a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
}
 80008aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ac:	e7fe      	b.n	80008ac <Error_Handler+0x8>
	...

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b12      	ldr	r3, [pc, #72]	; (8000904 <HAL_MspInit+0x54>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	4a11      	ldr	r2, [pc, #68]	; (8000904 <HAL_MspInit+0x54>)
 80008c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <HAL_MspInit+0x54>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <HAL_MspInit+0x54>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <HAL_MspInit+0x54>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e0:	6413      	str	r3, [r2, #64]	; 0x40
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <HAL_MspInit+0x54>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	210f      	movs	r1, #15
 80008f2:	f06f 0001 	mvn.w	r0, #1
 80008f6:	f000 fa85 	bl	8000e04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800

08000908 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08e      	sub	sp, #56	; 0x38
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000910:	2300      	movs	r3, #0
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	4b33      	ldr	r3, [pc, #204]	; (80009ec <HAL_InitTick+0xe4>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	4a32      	ldr	r2, [pc, #200]	; (80009ec <HAL_InitTick+0xe4>)
 8000922:	f043 0310 	orr.w	r3, r3, #16
 8000926:	6413      	str	r3, [r2, #64]	; 0x40
 8000928:	4b30      	ldr	r3, [pc, #192]	; (80009ec <HAL_InitTick+0xe4>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	f003 0310 	and.w	r3, r3, #16
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000934:	f107 0210 	add.w	r2, r7, #16
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4611      	mov	r1, r2
 800093e:	4618      	mov	r0, r3
 8000940:	f001 f924 	bl	8001b8c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000944:	6a3b      	ldr	r3, [r7, #32]
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800094a:	2b00      	cmp	r3, #0
 800094c:	d103      	bne.n	8000956 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800094e:	f001 f909 	bl	8001b64 <HAL_RCC_GetPCLK1Freq>
 8000952:	6378      	str	r0, [r7, #52]	; 0x34
 8000954:	e004      	b.n	8000960 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000956:	f001 f905 	bl	8001b64 <HAL_RCC_GetPCLK1Freq>
 800095a:	4603      	mov	r3, r0
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000962:	4a23      	ldr	r2, [pc, #140]	; (80009f0 <HAL_InitTick+0xe8>)
 8000964:	fba2 2303 	umull	r2, r3, r2, r3
 8000968:	0c9b      	lsrs	r3, r3, #18
 800096a:	3b01      	subs	r3, #1
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800096e:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <HAL_InitTick+0xec>)
 8000970:	4a21      	ldr	r2, [pc, #132]	; (80009f8 <HAL_InitTick+0xf0>)
 8000972:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000974:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <HAL_InitTick+0xec>)
 8000976:	f240 32e7 	movw	r2, #999	; 0x3e7
 800097a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800097c:	4a1d      	ldr	r2, [pc, #116]	; (80009f4 <HAL_InitTick+0xec>)
 800097e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000980:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000982:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <HAL_InitTick+0xec>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000988:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <HAL_InitTick+0xec>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098e:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <HAL_InitTick+0xec>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000994:	4817      	ldr	r0, [pc, #92]	; (80009f4 <HAL_InitTick+0xec>)
 8000996:	f001 f92b 	bl	8001bf0 <HAL_TIM_Base_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d11b      	bne.n	80009e0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80009a8:	4812      	ldr	r0, [pc, #72]	; (80009f4 <HAL_InitTick+0xec>)
 80009aa:	f001 f97b 	bl	8001ca4 <HAL_TIM_Base_Start_IT>
 80009ae:	4603      	mov	r3, r0
 80009b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80009b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d111      	bne.n	80009e0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009bc:	2036      	movs	r0, #54	; 0x36
 80009be:	f000 fa3d 	bl	8000e3c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b0f      	cmp	r3, #15
 80009c6:	d808      	bhi.n	80009da <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80009c8:	2200      	movs	r2, #0
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	2036      	movs	r0, #54	; 0x36
 80009ce:	f000 fa19 	bl	8000e04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009d2:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <HAL_InitTick+0xf4>)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6013      	str	r3, [r2, #0]
 80009d8:	e002      	b.n	80009e0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3738      	adds	r7, #56	; 0x38
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40023800 	.word	0x40023800
 80009f0:	431bde83 	.word	0x431bde83
 80009f4:	20000094 	.word	0x20000094
 80009f8:	40001000 	.word	0x40001000
 80009fc:	20000004 	.word	0x20000004

08000a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a04:	e7fe      	b.n	8000a04 <NMI_Handler+0x4>

08000a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <HardFault_Handler+0x4>

08000a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <MemManage_Handler+0x4>

08000a12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <BusFault_Handler+0x4>

08000a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <UsageFault_Handler+0x4>

08000a1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a30:	4802      	ldr	r0, [pc, #8]	; (8000a3c <TIM6_DAC_IRQHandler+0x10>)
 8000a32:	f001 f9a7 	bl	8001d84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000094 	.word	0x20000094

08000a40 <_read>:
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	e00a      	b.n	8000a68 <_read+0x28>
 8000a52:	f3af 8000 	nop.w
 8000a56:	4601      	mov	r1, r0
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	1c5a      	adds	r2, r3, #1
 8000a5c:	60ba      	str	r2, [r7, #8]
 8000a5e:	b2ca      	uxtb	r2, r1
 8000a60:	701a      	strb	r2, [r3, #0]
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	3301      	adds	r3, #1
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697a      	ldr	r2, [r7, #20]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	dbf0      	blt.n	8000a52 <_read+0x12>
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4618      	mov	r0, r3
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <_close>:
 8000a7a:	b480      	push	{r7}
 8000a7c:	b083      	sub	sp, #12
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <_fstat>:
 8000a92:	b480      	push	{r7}
 8000a94:	b083      	sub	sp, #12
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
 8000a9a:	6039      	str	r1, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <_isatty>:
 8000ab2:	b480      	push	{r7}
 8000ab4:	b083      	sub	sp, #12
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
 8000aba:	2301      	movs	r3, #1
 8000abc:	4618      	mov	r0, r3
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <_lseek>:
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3714      	adds	r7, #20
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
	...

08000ae4 <_sbrk>:
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	4a14      	ldr	r2, [pc, #80]	; (8000b40 <_sbrk+0x5c>)
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <_sbrk+0x60>)
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <_sbrk+0x64>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d102      	bne.n	8000b06 <_sbrk+0x22>
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <_sbrk+0x64>)
 8000b02:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <_sbrk+0x68>)
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <_sbrk+0x64>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d207      	bcs.n	8000b24 <_sbrk+0x40>
 8000b14:	f005 f8d6 	bl	8005cc4 <__errno>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b22:	e009      	b.n	8000b38 <_sbrk+0x54>
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <_sbrk+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <_sbrk+0x64>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	4a05      	ldr	r2, [pc, #20]	; (8000b48 <_sbrk+0x64>)
 8000b34:	6013      	str	r3, [r2, #0]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20030000 	.word	0x20030000
 8000b44:	00000400 	.word	0x00000400
 8000b48:	200000dc 	.word	0x200000dc
 8000b4c:	20004c18 	.word	0x20004c18

08000b50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <SystemInit+0x20>)
 8000b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5a:	4a05      	ldr	r2, [pc, #20]	; (8000b70 <SystemInit+0x20>)
 8000b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <Reset_Handler>:
 8000b74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bac <LoopFillZerobss+0xe>
 8000b78:	f7ff ffea 	bl	8000b50 <SystemInit>
 8000b7c:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <LoopFillZerobss+0x12>)
 8000b7e:	490d      	ldr	r1, [pc, #52]	; (8000bb4 <LoopFillZerobss+0x16>)
 8000b80:	4a0d      	ldr	r2, [pc, #52]	; (8000bb8 <LoopFillZerobss+0x1a>)
 8000b82:	2300      	movs	r3, #0
 8000b84:	e002      	b.n	8000b8c <LoopCopyDataInit>

08000b86 <CopyDataInit>:
 8000b86:	58d4      	ldr	r4, [r2, r3]
 8000b88:	50c4      	str	r4, [r0, r3]
 8000b8a:	3304      	adds	r3, #4

08000b8c <LoopCopyDataInit>:
 8000b8c:	18c4      	adds	r4, r0, r3
 8000b8e:	428c      	cmp	r4, r1
 8000b90:	d3f9      	bcc.n	8000b86 <CopyDataInit>
 8000b92:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <LoopFillZerobss+0x1e>)
 8000b94:	4c0a      	ldr	r4, [pc, #40]	; (8000bc0 <LoopFillZerobss+0x22>)
 8000b96:	2300      	movs	r3, #0
 8000b98:	e001      	b.n	8000b9e <LoopFillZerobss>

08000b9a <FillZerobss>:
 8000b9a:	6013      	str	r3, [r2, #0]
 8000b9c:	3204      	adds	r2, #4

08000b9e <LoopFillZerobss>:
 8000b9e:	42a2      	cmp	r2, r4
 8000ba0:	d3fb      	bcc.n	8000b9a <FillZerobss>
 8000ba2:	f005 f895 	bl	8005cd0 <__libc_init_array>
 8000ba6:	f7ff fd37 	bl	8000618 <main>
 8000baa:	4770      	bx	lr
 8000bac:	20030000 	.word	0x20030000
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	2000006c 	.word	0x2000006c
 8000bb8:	08006894 	.word	0x08006894
 8000bbc:	2000006c 	.word	0x2000006c
 8000bc0:	20004c18 	.word	0x20004c18

08000bc4 <ADC_IRQHandler>:
 8000bc4:	e7fe      	b.n	8000bc4 <ADC_IRQHandler>
	...

08000bc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_Init+0x40>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a0d      	ldr	r2, [pc, #52]	; (8000c08 <HAL_Init+0x40>)
 8000bd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <HAL_Init+0x40>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <HAL_Init+0x40>)
 8000bde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000be2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <HAL_Init+0x40>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <HAL_Init+0x40>)
 8000bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf0:	2003      	movs	r0, #3
 8000bf2:	f000 f8fc 	bl	8000dee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f7ff fe86 	bl	8000908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bfc:	f7ff fe58 	bl	80008b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40023c00 	.word	0x40023c00

08000c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_IncTick+0x20>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_IncTick+0x24>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <HAL_IncTick+0x24>)
 8000c1e:	6013      	str	r3, [r2, #0]
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	200000e0 	.word	0x200000e0

08000c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return uwTick;
 8000c38:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <HAL_GetTick+0x14>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	200000e0 	.word	0x200000e0

08000c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c54:	f7ff ffee 	bl	8000c34 <HAL_GetTick>
 8000c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c64:	d005      	beq.n	8000c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <HAL_Delay+0x44>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4413      	add	r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c72:	bf00      	nop
 8000c74:	f7ff ffde 	bl	8000c34 <HAL_GetTick>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d8f7      	bhi.n	8000c74 <HAL_Delay+0x28>
  {
  }
}
 8000c84:	bf00      	nop
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000008 	.word	0x20000008

08000c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc6:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	60d3      	str	r3, [r2, #12]
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce0:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	0a1b      	lsrs	r3, r3, #8
 8000ce6:	f003 0307 	and.w	r3, r3, #7
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db0b      	blt.n	8000d22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	f003 021f 	and.w	r2, r3, #31
 8000d10:	4907      	ldr	r1, [pc, #28]	; (8000d30 <__NVIC_EnableIRQ+0x38>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	095b      	lsrs	r3, r3, #5
 8000d18:	2001      	movs	r0, #1
 8000d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000e100 	.word	0xe000e100

08000d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	db0a      	blt.n	8000d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	490c      	ldr	r1, [pc, #48]	; (8000d80 <__NVIC_SetPriority+0x4c>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	0112      	lsls	r2, r2, #4
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	440b      	add	r3, r1
 8000d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d5c:	e00a      	b.n	8000d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4908      	ldr	r1, [pc, #32]	; (8000d84 <__NVIC_SetPriority+0x50>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	3b04      	subs	r3, #4
 8000d6c:	0112      	lsls	r2, r2, #4
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	440b      	add	r3, r1
 8000d72:	761a      	strb	r2, [r3, #24]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000e100 	.word	0xe000e100
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	; 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f1c3 0307 	rsb	r3, r3, #7
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	bf28      	it	cs
 8000da6:	2304      	movcs	r3, #4
 8000da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3304      	adds	r3, #4
 8000dae:	2b06      	cmp	r3, #6
 8000db0:	d902      	bls.n	8000db8 <NVIC_EncodePriority+0x30>
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3b03      	subs	r3, #3
 8000db6:	e000      	b.n	8000dba <NVIC_EncodePriority+0x32>
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	401a      	ands	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	43d9      	mvns	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	4313      	orrs	r3, r2
         );
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3724      	adds	r7, #36	; 0x24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff ff4c 	bl	8000c94 <__NVIC_SetPriorityGrouping>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
 8000e10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e16:	f7ff ff61 	bl	8000cdc <__NVIC_GetPriorityGrouping>
 8000e1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	68b9      	ldr	r1, [r7, #8]
 8000e20:	6978      	ldr	r0, [r7, #20]
 8000e22:	f7ff ffb1 	bl	8000d88 <NVIC_EncodePriority>
 8000e26:	4602      	mov	r2, r0
 8000e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2c:	4611      	mov	r1, r2
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff ff80 	bl	8000d34 <__NVIC_SetPriority>
}
 8000e34:	bf00      	nop
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ff54 	bl	8000cf8 <__NVIC_EnableIRQ>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b089      	sub	sp, #36	; 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
 8000e72:	e177      	b.n	8001164 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e74:	2201      	movs	r2, #1
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	697a      	ldr	r2, [r7, #20]
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	f040 8166 	bne.w	800115e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f003 0303 	and.w	r3, r3, #3
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d005      	beq.n	8000eaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d130      	bne.n	8000f0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	68da      	ldr	r2, [r3, #12]
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	091b      	lsrs	r3, r3, #4
 8000ef6:	f003 0201 	and.w	r2, r3, #1
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d017      	beq.n	8000f48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	2203      	movs	r2, #3
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	689a      	ldr	r2, [r3, #8]
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0303 	and.w	r3, r3, #3
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d123      	bne.n	8000f9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	08da      	lsrs	r2, r3, #3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3208      	adds	r2, #8
 8000f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	f003 0307 	and.w	r3, r3, #7
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	220f      	movs	r2, #15
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	691a      	ldr	r2, [r3, #16]
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	08da      	lsrs	r2, r3, #3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3208      	adds	r2, #8
 8000f96:	69b9      	ldr	r1, [r7, #24]
 8000f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0203 	and.w	r2, r3, #3
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	f000 80c0 	beq.w	800115e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	4b66      	ldr	r3, [pc, #408]	; (800117c <HAL_GPIO_Init+0x324>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	4a65      	ldr	r2, [pc, #404]	; (800117c <HAL_GPIO_Init+0x324>)
 8000fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fec:	6453      	str	r3, [r2, #68]	; 0x44
 8000fee:	4b63      	ldr	r3, [pc, #396]	; (800117c <HAL_GPIO_Init+0x324>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ffa:	4a61      	ldr	r2, [pc, #388]	; (8001180 <HAL_GPIO_Init+0x328>)
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	089b      	lsrs	r3, r3, #2
 8001000:	3302      	adds	r3, #2
 8001002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	220f      	movs	r2, #15
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a58      	ldr	r2, [pc, #352]	; (8001184 <HAL_GPIO_Init+0x32c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d037      	beq.n	8001096 <HAL_GPIO_Init+0x23e>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a57      	ldr	r2, [pc, #348]	; (8001188 <HAL_GPIO_Init+0x330>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d031      	beq.n	8001092 <HAL_GPIO_Init+0x23a>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a56      	ldr	r2, [pc, #344]	; (800118c <HAL_GPIO_Init+0x334>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d02b      	beq.n	800108e <HAL_GPIO_Init+0x236>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a55      	ldr	r2, [pc, #340]	; (8001190 <HAL_GPIO_Init+0x338>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d025      	beq.n	800108a <HAL_GPIO_Init+0x232>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a54      	ldr	r2, [pc, #336]	; (8001194 <HAL_GPIO_Init+0x33c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d01f      	beq.n	8001086 <HAL_GPIO_Init+0x22e>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a53      	ldr	r2, [pc, #332]	; (8001198 <HAL_GPIO_Init+0x340>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d019      	beq.n	8001082 <HAL_GPIO_Init+0x22a>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a52      	ldr	r2, [pc, #328]	; (800119c <HAL_GPIO_Init+0x344>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d013      	beq.n	800107e <HAL_GPIO_Init+0x226>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a51      	ldr	r2, [pc, #324]	; (80011a0 <HAL_GPIO_Init+0x348>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d00d      	beq.n	800107a <HAL_GPIO_Init+0x222>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a50      	ldr	r2, [pc, #320]	; (80011a4 <HAL_GPIO_Init+0x34c>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d007      	beq.n	8001076 <HAL_GPIO_Init+0x21e>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a4f      	ldr	r2, [pc, #316]	; (80011a8 <HAL_GPIO_Init+0x350>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d101      	bne.n	8001072 <HAL_GPIO_Init+0x21a>
 800106e:	2309      	movs	r3, #9
 8001070:	e012      	b.n	8001098 <HAL_GPIO_Init+0x240>
 8001072:	230a      	movs	r3, #10
 8001074:	e010      	b.n	8001098 <HAL_GPIO_Init+0x240>
 8001076:	2308      	movs	r3, #8
 8001078:	e00e      	b.n	8001098 <HAL_GPIO_Init+0x240>
 800107a:	2307      	movs	r3, #7
 800107c:	e00c      	b.n	8001098 <HAL_GPIO_Init+0x240>
 800107e:	2306      	movs	r3, #6
 8001080:	e00a      	b.n	8001098 <HAL_GPIO_Init+0x240>
 8001082:	2305      	movs	r3, #5
 8001084:	e008      	b.n	8001098 <HAL_GPIO_Init+0x240>
 8001086:	2304      	movs	r3, #4
 8001088:	e006      	b.n	8001098 <HAL_GPIO_Init+0x240>
 800108a:	2303      	movs	r3, #3
 800108c:	e004      	b.n	8001098 <HAL_GPIO_Init+0x240>
 800108e:	2302      	movs	r3, #2
 8001090:	e002      	b.n	8001098 <HAL_GPIO_Init+0x240>
 8001092:	2301      	movs	r3, #1
 8001094:	e000      	b.n	8001098 <HAL_GPIO_Init+0x240>
 8001096:	2300      	movs	r3, #0
 8001098:	69fa      	ldr	r2, [r7, #28]
 800109a:	f002 0203 	and.w	r2, r2, #3
 800109e:	0092      	lsls	r2, r2, #2
 80010a0:	4093      	lsls	r3, r2
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010a8:	4935      	ldr	r1, [pc, #212]	; (8001180 <HAL_GPIO_Init+0x328>)
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	089b      	lsrs	r3, r3, #2
 80010ae:	3302      	adds	r3, #2
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010b6:	4b3d      	ldr	r3, [pc, #244]	; (80011ac <HAL_GPIO_Init+0x354>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010da:	4a34      	ldr	r2, [pc, #208]	; (80011ac <HAL_GPIO_Init+0x354>)
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010e0:	4b32      	ldr	r3, [pc, #200]	; (80011ac <HAL_GPIO_Init+0x354>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001104:	4a29      	ldr	r2, [pc, #164]	; (80011ac <HAL_GPIO_Init+0x354>)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800110a:	4b28      	ldr	r3, [pc, #160]	; (80011ac <HAL_GPIO_Init+0x354>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800112e:	4a1f      	ldr	r2, [pc, #124]	; (80011ac <HAL_GPIO_Init+0x354>)
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001134:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <HAL_GPIO_Init+0x354>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001158:	4a14      	ldr	r2, [pc, #80]	; (80011ac <HAL_GPIO_Init+0x354>)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3301      	adds	r3, #1
 8001162:	61fb      	str	r3, [r7, #28]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	2b0f      	cmp	r3, #15
 8001168:	f67f ae84 	bls.w	8000e74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3724      	adds	r7, #36	; 0x24
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800
 8001180:	40013800 	.word	0x40013800
 8001184:	40020000 	.word	0x40020000
 8001188:	40020400 	.word	0x40020400
 800118c:	40020800 	.word	0x40020800
 8001190:	40020c00 	.word	0x40020c00
 8001194:	40021000 	.word	0x40021000
 8001198:	40021400 	.word	0x40021400
 800119c:	40021800 	.word	0x40021800
 80011a0:	40021c00 	.word	0x40021c00
 80011a4:	40022000 	.word	0x40022000
 80011a8:	40022400 	.word	0x40022400
 80011ac:	40013c00 	.word	0x40013c00

080011b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	807b      	strh	r3, [r7, #2]
 80011bc:	4613      	mov	r3, r2
 80011be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011c0:	787b      	ldrb	r3, [r7, #1]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011c6:	887a      	ldrh	r2, [r7, #2]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011cc:	e003      	b.n	80011d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ce:	887b      	ldrh	r3, [r7, #2]
 80011d0:	041a      	lsls	r2, r3, #16
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	619a      	str	r2, [r3, #24]
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
 80011f2:	4b20      	ldr	r3, [pc, #128]	; (8001274 <HAL_PWREx_EnableOverDrive+0x90>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	4a1f      	ldr	r2, [pc, #124]	; (8001274 <HAL_PWREx_EnableOverDrive+0x90>)
 80011f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011fc:	6413      	str	r3, [r2, #64]	; 0x40
 80011fe:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <HAL_PWREx_EnableOverDrive+0x90>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800120a:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <HAL_PWREx_EnableOverDrive+0x94>)
 800120c:	2201      	movs	r2, #1
 800120e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001210:	f7ff fd10 	bl	8000c34 <HAL_GetTick>
 8001214:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001216:	e009      	b.n	800122c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001218:	f7ff fd0c 	bl	8000c34 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001226:	d901      	bls.n	800122c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e01f      	b.n	800126c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800122c:	4b13      	ldr	r3, [pc, #76]	; (800127c <HAL_PWREx_EnableOverDrive+0x98>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001238:	d1ee      	bne.n	8001218 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <HAL_PWREx_EnableOverDrive+0x9c>)
 800123c:	2201      	movs	r2, #1
 800123e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001240:	f7ff fcf8 	bl	8000c34 <HAL_GetTick>
 8001244:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001246:	e009      	b.n	800125c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001248:	f7ff fcf4 	bl	8000c34 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001256:	d901      	bls.n	800125c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e007      	b.n	800126c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800125c:	4b07      	ldr	r3, [pc, #28]	; (800127c <HAL_PWREx_EnableOverDrive+0x98>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001264:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001268:	d1ee      	bne.n	8001248 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40023800 	.word	0x40023800
 8001278:	420e0040 	.word	0x420e0040
 800127c:	40007000 	.word	0x40007000
 8001280:	420e0044 	.word	0x420e0044

08001284 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e267      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d075      	beq.n	800138e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012a2:	4b88      	ldr	r3, [pc, #544]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 030c 	and.w	r3, r3, #12
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	d00c      	beq.n	80012c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ae:	4b85      	ldr	r3, [pc, #532]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012b6:	2b08      	cmp	r3, #8
 80012b8:	d112      	bne.n	80012e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ba:	4b82      	ldr	r3, [pc, #520]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012c6:	d10b      	bne.n	80012e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c8:	4b7e      	ldr	r3, [pc, #504]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d05b      	beq.n	800138c <HAL_RCC_OscConfig+0x108>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d157      	bne.n	800138c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e242      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012e8:	d106      	bne.n	80012f8 <HAL_RCC_OscConfig+0x74>
 80012ea:	4b76      	ldr	r3, [pc, #472]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a75      	ldr	r2, [pc, #468]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 80012f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	e01d      	b.n	8001334 <HAL_RCC_OscConfig+0xb0>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001300:	d10c      	bne.n	800131c <HAL_RCC_OscConfig+0x98>
 8001302:	4b70      	ldr	r3, [pc, #448]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a6f      	ldr	r2, [pc, #444]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	4b6d      	ldr	r3, [pc, #436]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a6c      	ldr	r2, [pc, #432]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	e00b      	b.n	8001334 <HAL_RCC_OscConfig+0xb0>
 800131c:	4b69      	ldr	r3, [pc, #420]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a68      	ldr	r2, [pc, #416]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	4b66      	ldr	r3, [pc, #408]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a65      	ldr	r2, [pc, #404]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 800132e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001332:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d013      	beq.n	8001364 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133c:	f7ff fc7a 	bl	8000c34 <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001344:	f7ff fc76 	bl	8000c34 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b64      	cmp	r3, #100	; 0x64
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e207      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001356:	4b5b      	ldr	r3, [pc, #364]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0f0      	beq.n	8001344 <HAL_RCC_OscConfig+0xc0>
 8001362:	e014      	b.n	800138e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001364:	f7ff fc66 	bl	8000c34 <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800136c:	f7ff fc62 	bl	8000c34 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b64      	cmp	r3, #100	; 0x64
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e1f3      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137e:	4b51      	ldr	r3, [pc, #324]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1f0      	bne.n	800136c <HAL_RCC_OscConfig+0xe8>
 800138a:	e000      	b.n	800138e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800138c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d063      	beq.n	8001462 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800139a:	4b4a      	ldr	r3, [pc, #296]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f003 030c 	and.w	r3, r3, #12
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00b      	beq.n	80013be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013a6:	4b47      	ldr	r3, [pc, #284]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ae:	2b08      	cmp	r3, #8
 80013b0:	d11c      	bne.n	80013ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013b2:	4b44      	ldr	r3, [pc, #272]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d116      	bne.n	80013ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013be:	4b41      	ldr	r3, [pc, #260]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d005      	beq.n	80013d6 <HAL_RCC_OscConfig+0x152>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d001      	beq.n	80013d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e1c7      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d6:	4b3b      	ldr	r3, [pc, #236]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	4937      	ldr	r1, [pc, #220]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ea:	e03a      	b.n	8001462 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d020      	beq.n	8001436 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f4:	4b34      	ldr	r3, [pc, #208]	; (80014c8 <HAL_RCC_OscConfig+0x244>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fa:	f7ff fc1b 	bl	8000c34 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001402:	f7ff fc17 	bl	8000c34 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e1a8      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001414:	4b2b      	ldr	r3, [pc, #172]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0f0      	beq.n	8001402 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001420:	4b28      	ldr	r3, [pc, #160]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	4925      	ldr	r1, [pc, #148]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001430:	4313      	orrs	r3, r2
 8001432:	600b      	str	r3, [r1, #0]
 8001434:	e015      	b.n	8001462 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001436:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <HAL_RCC_OscConfig+0x244>)
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143c:	f7ff fbfa 	bl	8000c34 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001444:	f7ff fbf6 	bl	8000c34 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e187      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001456:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f0      	bne.n	8001444 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0308 	and.w	r3, r3, #8
 800146a:	2b00      	cmp	r3, #0
 800146c:	d036      	beq.n	80014dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d016      	beq.n	80014a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <HAL_RCC_OscConfig+0x248>)
 8001478:	2201      	movs	r2, #1
 800147a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800147c:	f7ff fbda 	bl	8000c34 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001484:	f7ff fbd6 	bl	8000c34 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e167      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0f0      	beq.n	8001484 <HAL_RCC_OscConfig+0x200>
 80014a2:	e01b      	b.n	80014dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a4:	4b09      	ldr	r3, [pc, #36]	; (80014cc <HAL_RCC_OscConfig+0x248>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014aa:	f7ff fbc3 	bl	8000c34 <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b0:	e00e      	b.n	80014d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b2:	f7ff fbbf 	bl	8000c34 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d907      	bls.n	80014d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e150      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
 80014c4:	40023800 	.word	0x40023800
 80014c8:	42470000 	.word	0x42470000
 80014cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d0:	4b88      	ldr	r3, [pc, #544]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 80014d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1ea      	bne.n	80014b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 8097 	beq.w	8001618 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ea:	2300      	movs	r3, #0
 80014ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ee:	4b81      	ldr	r3, [pc, #516]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10f      	bne.n	800151a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	4b7d      	ldr	r3, [pc, #500]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	4a7c      	ldr	r2, [pc, #496]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001508:	6413      	str	r3, [r2, #64]	; 0x40
 800150a:	4b7a      	ldr	r3, [pc, #488]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001516:	2301      	movs	r3, #1
 8001518:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151a:	4b77      	ldr	r3, [pc, #476]	; (80016f8 <HAL_RCC_OscConfig+0x474>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001522:	2b00      	cmp	r3, #0
 8001524:	d118      	bne.n	8001558 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001526:	4b74      	ldr	r3, [pc, #464]	; (80016f8 <HAL_RCC_OscConfig+0x474>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a73      	ldr	r2, [pc, #460]	; (80016f8 <HAL_RCC_OscConfig+0x474>)
 800152c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001530:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001532:	f7ff fb7f 	bl	8000c34 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800153a:	f7ff fb7b 	bl	8000c34 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e10c      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154c:	4b6a      	ldr	r3, [pc, #424]	; (80016f8 <HAL_RCC_OscConfig+0x474>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0f0      	beq.n	800153a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d106      	bne.n	800156e <HAL_RCC_OscConfig+0x2ea>
 8001560:	4b64      	ldr	r3, [pc, #400]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001564:	4a63      	ldr	r2, [pc, #396]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6713      	str	r3, [r2, #112]	; 0x70
 800156c:	e01c      	b.n	80015a8 <HAL_RCC_OscConfig+0x324>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	2b05      	cmp	r3, #5
 8001574:	d10c      	bne.n	8001590 <HAL_RCC_OscConfig+0x30c>
 8001576:	4b5f      	ldr	r3, [pc, #380]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157a:	4a5e      	ldr	r2, [pc, #376]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 800157c:	f043 0304 	orr.w	r3, r3, #4
 8001580:	6713      	str	r3, [r2, #112]	; 0x70
 8001582:	4b5c      	ldr	r3, [pc, #368]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001586:	4a5b      	ldr	r2, [pc, #364]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6713      	str	r3, [r2, #112]	; 0x70
 800158e:	e00b      	b.n	80015a8 <HAL_RCC_OscConfig+0x324>
 8001590:	4b58      	ldr	r3, [pc, #352]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001594:	4a57      	ldr	r2, [pc, #348]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001596:	f023 0301 	bic.w	r3, r3, #1
 800159a:	6713      	str	r3, [r2, #112]	; 0x70
 800159c:	4b55      	ldr	r3, [pc, #340]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 800159e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a0:	4a54      	ldr	r2, [pc, #336]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 80015a2:	f023 0304 	bic.w	r3, r3, #4
 80015a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d015      	beq.n	80015dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b0:	f7ff fb40 	bl	8000c34 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b6:	e00a      	b.n	80015ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b8:	f7ff fb3c 	bl	8000c34 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e0cb      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ce:	4b49      	ldr	r3, [pc, #292]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 80015d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d0ee      	beq.n	80015b8 <HAL_RCC_OscConfig+0x334>
 80015da:	e014      	b.n	8001606 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015dc:	f7ff fb2a 	bl	8000c34 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e2:	e00a      	b.n	80015fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e4:	f7ff fb26 	bl	8000c34 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e0b5      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015fa:	4b3e      	ldr	r3, [pc, #248]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 80015fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1ee      	bne.n	80015e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001606:	7dfb      	ldrb	r3, [r7, #23]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d105      	bne.n	8001618 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800160c:	4b39      	ldr	r3, [pc, #228]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	4a38      	ldr	r2, [pc, #224]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001612:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001616:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	2b00      	cmp	r3, #0
 800161e:	f000 80a1 	beq.w	8001764 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001622:	4b34      	ldr	r3, [pc, #208]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 030c 	and.w	r3, r3, #12
 800162a:	2b08      	cmp	r3, #8
 800162c:	d05c      	beq.n	80016e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	2b02      	cmp	r3, #2
 8001634:	d141      	bne.n	80016ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001636:	4b31      	ldr	r3, [pc, #196]	; (80016fc <HAL_RCC_OscConfig+0x478>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff fafa 	bl	8000c34 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001644:	f7ff faf6 	bl	8000c34 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e087      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001656:	4b27      	ldr	r3, [pc, #156]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69da      	ldr	r2, [r3, #28]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001670:	019b      	lsls	r3, r3, #6
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001678:	085b      	lsrs	r3, r3, #1
 800167a:	3b01      	subs	r3, #1
 800167c:	041b      	lsls	r3, r3, #16
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001684:	061b      	lsls	r3, r3, #24
 8001686:	491b      	ldr	r1, [pc, #108]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001688:	4313      	orrs	r3, r2
 800168a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800168c:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <HAL_RCC_OscConfig+0x478>)
 800168e:	2201      	movs	r2, #1
 8001690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001692:	f7ff facf 	bl	8000c34 <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800169a:	f7ff facb 	bl	8000c34 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e05c      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ac:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0f0      	beq.n	800169a <HAL_RCC_OscConfig+0x416>
 80016b8:	e054      	b.n	8001764 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <HAL_RCC_OscConfig+0x478>)
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c0:	f7ff fab8 	bl	8000c34 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c8:	f7ff fab4 	bl	8000c34 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e045      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f0      	bne.n	80016c8 <HAL_RCC_OscConfig+0x444>
 80016e6:	e03d      	b.n	8001764 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d107      	bne.n	8001700 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e038      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40007000 	.word	0x40007000
 80016fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <HAL_RCC_OscConfig+0x4ec>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d028      	beq.n	8001760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001718:	429a      	cmp	r2, r3
 800171a:	d121      	bne.n	8001760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001726:	429a      	cmp	r2, r3
 8001728:	d11a      	bne.n	8001760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001730:	4013      	ands	r3, r2
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001736:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001738:	4293      	cmp	r3, r2
 800173a:	d111      	bne.n	8001760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001746:	085b      	lsrs	r3, r3, #1
 8001748:	3b01      	subs	r3, #1
 800174a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800174c:	429a      	cmp	r2, r3
 800174e:	d107      	bne.n	8001760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800175c:	429a      	cmp	r2, r3
 800175e:	d001      	beq.n	8001764 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e000      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800

08001774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e0cc      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001788:	4b68      	ldr	r3, [pc, #416]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 030f 	and.w	r3, r3, #15
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d90c      	bls.n	80017b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001796:	4b65      	ldr	r3, [pc, #404]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800179e:	4b63      	ldr	r3, [pc, #396]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d001      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0b8      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d020      	beq.n	80017fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017c8:	4b59      	ldr	r3, [pc, #356]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	4a58      	ldr	r2, [pc, #352]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0308 	and.w	r3, r3, #8
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017e0:	4b53      	ldr	r3, [pc, #332]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	4a52      	ldr	r2, [pc, #328]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ec:	4b50      	ldr	r3, [pc, #320]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	494d      	ldr	r1, [pc, #308]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d044      	beq.n	8001894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d107      	bne.n	8001822 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001812:	4b47      	ldr	r3, [pc, #284]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d119      	bne.n	8001852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e07f      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b02      	cmp	r3, #2
 8001828:	d003      	beq.n	8001832 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800182e:	2b03      	cmp	r3, #3
 8001830:	d107      	bne.n	8001842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001832:	4b3f      	ldr	r3, [pc, #252]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d109      	bne.n	8001852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e06f      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001842:	4b3b      	ldr	r3, [pc, #236]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e067      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001852:	4b37      	ldr	r3, [pc, #220]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f023 0203 	bic.w	r2, r3, #3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	4934      	ldr	r1, [pc, #208]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	4313      	orrs	r3, r2
 8001862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001864:	f7ff f9e6 	bl	8000c34 <HAL_GetTick>
 8001868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186a:	e00a      	b.n	8001882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800186c:	f7ff f9e2 	bl	8000c34 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	f241 3288 	movw	r2, #5000	; 0x1388
 800187a:	4293      	cmp	r3, r2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e04f      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001882:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f003 020c 	and.w	r2, r3, #12
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	429a      	cmp	r2, r3
 8001892:	d1eb      	bne.n	800186c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001894:	4b25      	ldr	r3, [pc, #148]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 030f 	and.w	r3, r3, #15
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d20c      	bcs.n	80018bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a2:	4b22      	ldr	r3, [pc, #136]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018aa:	4b20      	ldr	r3, [pc, #128]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d001      	beq.n	80018bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e032      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d008      	beq.n	80018da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c8:	4b19      	ldr	r3, [pc, #100]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	4916      	ldr	r1, [pc, #88]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d009      	beq.n	80018fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018e6:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	490e      	ldr	r1, [pc, #56]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018fa:	f000 f821 	bl	8001940 <HAL_RCC_GetSysClockFreq>
 80018fe:	4602      	mov	r2, r0
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	091b      	lsrs	r3, r3, #4
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	490a      	ldr	r1, [pc, #40]	; (8001934 <HAL_RCC_ClockConfig+0x1c0>)
 800190c:	5ccb      	ldrb	r3, [r1, r3]
 800190e:	fa22 f303 	lsr.w	r3, r2, r3
 8001912:	4a09      	ldr	r2, [pc, #36]	; (8001938 <HAL_RCC_ClockConfig+0x1c4>)
 8001914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <HAL_RCC_ClockConfig+0x1c8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fff4 	bl	8000908 <HAL_InitTick>

  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40023c00 	.word	0x40023c00
 8001930:	40023800 	.word	0x40023800
 8001934:	08006838 	.word	0x08006838
 8001938:	20000000 	.word	0x20000000
 800193c:	20000004 	.word	0x20000004

08001940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001944:	b094      	sub	sp, #80	; 0x50
 8001946:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	647b      	str	r3, [r7, #68]	; 0x44
 800194c:	2300      	movs	r3, #0
 800194e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001950:	2300      	movs	r3, #0
 8001952:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001958:	4b79      	ldr	r3, [pc, #484]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x200>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 030c 	and.w	r3, r3, #12
 8001960:	2b08      	cmp	r3, #8
 8001962:	d00d      	beq.n	8001980 <HAL_RCC_GetSysClockFreq+0x40>
 8001964:	2b08      	cmp	r3, #8
 8001966:	f200 80e1 	bhi.w	8001b2c <HAL_RCC_GetSysClockFreq+0x1ec>
 800196a:	2b00      	cmp	r3, #0
 800196c:	d002      	beq.n	8001974 <HAL_RCC_GetSysClockFreq+0x34>
 800196e:	2b04      	cmp	r3, #4
 8001970:	d003      	beq.n	800197a <HAL_RCC_GetSysClockFreq+0x3a>
 8001972:	e0db      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001974:	4b73      	ldr	r3, [pc, #460]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x204>)
 8001976:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001978:	e0db      	b.n	8001b32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800197a:	4b73      	ldr	r3, [pc, #460]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x208>)
 800197c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800197e:	e0d8      	b.n	8001b32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001980:	4b6f      	ldr	r3, [pc, #444]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001988:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800198a:	4b6d      	ldr	r3, [pc, #436]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x200>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d063      	beq.n	8001a5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001996:	4b6a      	ldr	r3, [pc, #424]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	099b      	lsrs	r3, r3, #6
 800199c:	2200      	movs	r2, #0
 800199e:	63bb      	str	r3, [r7, #56]	; 0x38
 80019a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019a8:	633b      	str	r3, [r7, #48]	; 0x30
 80019aa:	2300      	movs	r3, #0
 80019ac:	637b      	str	r3, [r7, #52]	; 0x34
 80019ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019b2:	4622      	mov	r2, r4
 80019b4:	462b      	mov	r3, r5
 80019b6:	f04f 0000 	mov.w	r0, #0
 80019ba:	f04f 0100 	mov.w	r1, #0
 80019be:	0159      	lsls	r1, r3, #5
 80019c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019c4:	0150      	lsls	r0, r2, #5
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4621      	mov	r1, r4
 80019cc:	1a51      	subs	r1, r2, r1
 80019ce:	6139      	str	r1, [r7, #16]
 80019d0:	4629      	mov	r1, r5
 80019d2:	eb63 0301 	sbc.w	r3, r3, r1
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	f04f 0200 	mov.w	r2, #0
 80019dc:	f04f 0300 	mov.w	r3, #0
 80019e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019e4:	4659      	mov	r1, fp
 80019e6:	018b      	lsls	r3, r1, #6
 80019e8:	4651      	mov	r1, sl
 80019ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019ee:	4651      	mov	r1, sl
 80019f0:	018a      	lsls	r2, r1, #6
 80019f2:	4651      	mov	r1, sl
 80019f4:	ebb2 0801 	subs.w	r8, r2, r1
 80019f8:	4659      	mov	r1, fp
 80019fa:	eb63 0901 	sbc.w	r9, r3, r1
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a12:	4690      	mov	r8, r2
 8001a14:	4699      	mov	r9, r3
 8001a16:	4623      	mov	r3, r4
 8001a18:	eb18 0303 	adds.w	r3, r8, r3
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	462b      	mov	r3, r5
 8001a20:	eb49 0303 	adc.w	r3, r9, r3
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a32:	4629      	mov	r1, r5
 8001a34:	024b      	lsls	r3, r1, #9
 8001a36:	4621      	mov	r1, r4
 8001a38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a3c:	4621      	mov	r1, r4
 8001a3e:	024a      	lsls	r2, r1, #9
 8001a40:	4610      	mov	r0, r2
 8001a42:	4619      	mov	r1, r3
 8001a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a46:	2200      	movs	r2, #0
 8001a48:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a50:	f7fe fc1e 	bl	8000290 <__aeabi_uldivmod>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4613      	mov	r3, r2
 8001a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a5c:	e058      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a5e:	4b38      	ldr	r3, [pc, #224]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	099b      	lsrs	r3, r3, #6
 8001a64:	2200      	movs	r2, #0
 8001a66:	4618      	mov	r0, r3
 8001a68:	4611      	mov	r1, r2
 8001a6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a6e:	623b      	str	r3, [r7, #32]
 8001a70:	2300      	movs	r3, #0
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
 8001a74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a78:	4642      	mov	r2, r8
 8001a7a:	464b      	mov	r3, r9
 8001a7c:	f04f 0000 	mov.w	r0, #0
 8001a80:	f04f 0100 	mov.w	r1, #0
 8001a84:	0159      	lsls	r1, r3, #5
 8001a86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a8a:	0150      	lsls	r0, r2, #5
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4641      	mov	r1, r8
 8001a92:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a96:	4649      	mov	r1, r9
 8001a98:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001aa8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001aac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ab0:	ebb2 040a 	subs.w	r4, r2, sl
 8001ab4:	eb63 050b 	sbc.w	r5, r3, fp
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	f04f 0300 	mov.w	r3, #0
 8001ac0:	00eb      	lsls	r3, r5, #3
 8001ac2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ac6:	00e2      	lsls	r2, r4, #3
 8001ac8:	4614      	mov	r4, r2
 8001aca:	461d      	mov	r5, r3
 8001acc:	4643      	mov	r3, r8
 8001ace:	18e3      	adds	r3, r4, r3
 8001ad0:	603b      	str	r3, [r7, #0]
 8001ad2:	464b      	mov	r3, r9
 8001ad4:	eb45 0303 	adc.w	r3, r5, r3
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ae6:	4629      	mov	r1, r5
 8001ae8:	028b      	lsls	r3, r1, #10
 8001aea:	4621      	mov	r1, r4
 8001aec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001af0:	4621      	mov	r1, r4
 8001af2:	028a      	lsls	r2, r1, #10
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001afa:	2200      	movs	r2, #0
 8001afc:	61bb      	str	r3, [r7, #24]
 8001afe:	61fa      	str	r2, [r7, #28]
 8001b00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b04:	f7fe fbc4 	bl	8000290 <__aeabi_uldivmod>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	0c1b      	lsrs	r3, r3, #16
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b2a:	e002      	b.n	8001b32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b2c:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3750      	adds	r7, #80	; 0x50
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800
 8001b44:	00f42400 	.word	0x00f42400
 8001b48:	007a1200 	.word	0x007a1200

08001b4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b50:	4b03      	ldr	r3, [pc, #12]	; (8001b60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b52:	681b      	ldr	r3, [r3, #0]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	20000000 	.word	0x20000000

08001b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b68:	f7ff fff0 	bl	8001b4c <HAL_RCC_GetHCLKFreq>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	0a9b      	lsrs	r3, r3, #10
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	4903      	ldr	r1, [pc, #12]	; (8001b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b7a:	5ccb      	ldrb	r3, [r1, r3]
 8001b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40023800 	.word	0x40023800
 8001b88:	08006848 	.word	0x08006848

08001b8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	220f      	movs	r2, #15
 8001b9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b9c:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 0203 	and.w	r2, r3, #3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <HAL_RCC_GetClockConfig+0x5c>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <HAL_RCC_GetClockConfig+0x5c>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bc0:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <HAL_RCC_GetClockConfig+0x5c>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	08db      	lsrs	r3, r3, #3
 8001bc6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bce:	4b07      	ldr	r3, [pc, #28]	; (8001bec <HAL_RCC_GetClockConfig+0x60>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 020f 	and.w	r2, r3, #15
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	601a      	str	r2, [r3, #0]
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40023c00 	.word	0x40023c00

08001bf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e041      	b.n	8001c86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d106      	bne.n	8001c1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f839 	bl	8001c8e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3304      	adds	r3, #4
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4610      	mov	r0, r2
 8001c30:	f000 f9c0 	bl	8001fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
	...

08001ca4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d001      	beq.n	8001cbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e04e      	b.n	8001d5a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 0201 	orr.w	r2, r2, #1
 8001cd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a23      	ldr	r2, [pc, #140]	; (8001d68 <HAL_TIM_Base_Start_IT+0xc4>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d022      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0x80>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce6:	d01d      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0x80>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a1f      	ldr	r2, [pc, #124]	; (8001d6c <HAL_TIM_Base_Start_IT+0xc8>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d018      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0x80>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a1e      	ldr	r2, [pc, #120]	; (8001d70 <HAL_TIM_Base_Start_IT+0xcc>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d013      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0x80>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a1c      	ldr	r2, [pc, #112]	; (8001d74 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d00e      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0x80>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a1b      	ldr	r2, [pc, #108]	; (8001d78 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d009      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0x80>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a19      	ldr	r2, [pc, #100]	; (8001d7c <HAL_TIM_Base_Start_IT+0xd8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d004      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0x80>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a18      	ldr	r2, [pc, #96]	; (8001d80 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d111      	bne.n	8001d48 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2b06      	cmp	r3, #6
 8001d34:	d010      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f042 0201 	orr.w	r2, r2, #1
 8001d44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d46:	e007      	b.n	8001d58 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0201 	orr.w	r2, r2, #1
 8001d56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40010000 	.word	0x40010000
 8001d6c:	40000400 	.word	0x40000400
 8001d70:	40000800 	.word	0x40000800
 8001d74:	40000c00 	.word	0x40000c00
 8001d78:	40010400 	.word	0x40010400
 8001d7c:	40014000 	.word	0x40014000
 8001d80:	40001800 	.word	0x40001800

08001d84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d020      	beq.n	8001de8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d01b      	beq.n	8001de8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f06f 0202 	mvn.w	r2, #2
 8001db8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f8d2 	bl	8001f78 <HAL_TIM_IC_CaptureCallback>
 8001dd4:	e005      	b.n	8001de2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f8c4 	bl	8001f64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f8d5 	bl	8001f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f003 0304 	and.w	r3, r3, #4
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d020      	beq.n	8001e34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d01b      	beq.n	8001e34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0204 	mvn.w	r2, #4
 8001e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2202      	movs	r2, #2
 8001e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f8ac 	bl	8001f78 <HAL_TIM_IC_CaptureCallback>
 8001e20:	e005      	b.n	8001e2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f89e 	bl	8001f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f8af 	bl	8001f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d020      	beq.n	8001e80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d01b      	beq.n	8001e80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f06f 0208 	mvn.w	r2, #8
 8001e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2204      	movs	r2, #4
 8001e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f886 	bl	8001f78 <HAL_TIM_IC_CaptureCallback>
 8001e6c:	e005      	b.n	8001e7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f878 	bl	8001f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f889 	bl	8001f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	f003 0310 	and.w	r3, r3, #16
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d020      	beq.n	8001ecc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f003 0310 	and.w	r3, r3, #16
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d01b      	beq.n	8001ecc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f06f 0210 	mvn.w	r2, #16
 8001e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2208      	movs	r2, #8
 8001ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f860 	bl	8001f78 <HAL_TIM_IC_CaptureCallback>
 8001eb8:	e005      	b.n	8001ec6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f852 	bl	8001f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f863 	bl	8001f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00c      	beq.n	8001ef0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d007      	beq.n	8001ef0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f06f 0201 	mvn.w	r2, #1
 8001ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7fe fcc8 	bl	8000880 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00c      	beq.n	8001f14 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d007      	beq.n	8001f14 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f906 	bl	8002120 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00c      	beq.n	8001f38 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d007      	beq.n	8001f38 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f834 	bl	8001fa0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	f003 0320 	and.w	r3, r3, #32
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00c      	beq.n	8001f5c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f003 0320 	and.w	r3, r3, #32
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d007      	beq.n	8001f5c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f06f 0220 	mvn.w	r2, #32
 8001f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f8d8 	bl	800210c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a46      	ldr	r2, [pc, #280]	; (80020e0 <TIM_Base_SetConfig+0x12c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d013      	beq.n	8001ff4 <TIM_Base_SetConfig+0x40>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd2:	d00f      	beq.n	8001ff4 <TIM_Base_SetConfig+0x40>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a43      	ldr	r2, [pc, #268]	; (80020e4 <TIM_Base_SetConfig+0x130>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d00b      	beq.n	8001ff4 <TIM_Base_SetConfig+0x40>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a42      	ldr	r2, [pc, #264]	; (80020e8 <TIM_Base_SetConfig+0x134>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d007      	beq.n	8001ff4 <TIM_Base_SetConfig+0x40>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a41      	ldr	r2, [pc, #260]	; (80020ec <TIM_Base_SetConfig+0x138>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d003      	beq.n	8001ff4 <TIM_Base_SetConfig+0x40>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a40      	ldr	r2, [pc, #256]	; (80020f0 <TIM_Base_SetConfig+0x13c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d108      	bne.n	8002006 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ffa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	4313      	orrs	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a35      	ldr	r2, [pc, #212]	; (80020e0 <TIM_Base_SetConfig+0x12c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d02b      	beq.n	8002066 <TIM_Base_SetConfig+0xb2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002014:	d027      	beq.n	8002066 <TIM_Base_SetConfig+0xb2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a32      	ldr	r2, [pc, #200]	; (80020e4 <TIM_Base_SetConfig+0x130>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d023      	beq.n	8002066 <TIM_Base_SetConfig+0xb2>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a31      	ldr	r2, [pc, #196]	; (80020e8 <TIM_Base_SetConfig+0x134>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d01f      	beq.n	8002066 <TIM_Base_SetConfig+0xb2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a30      	ldr	r2, [pc, #192]	; (80020ec <TIM_Base_SetConfig+0x138>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d01b      	beq.n	8002066 <TIM_Base_SetConfig+0xb2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a2f      	ldr	r2, [pc, #188]	; (80020f0 <TIM_Base_SetConfig+0x13c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d017      	beq.n	8002066 <TIM_Base_SetConfig+0xb2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a2e      	ldr	r2, [pc, #184]	; (80020f4 <TIM_Base_SetConfig+0x140>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d013      	beq.n	8002066 <TIM_Base_SetConfig+0xb2>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a2d      	ldr	r2, [pc, #180]	; (80020f8 <TIM_Base_SetConfig+0x144>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d00f      	beq.n	8002066 <TIM_Base_SetConfig+0xb2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a2c      	ldr	r2, [pc, #176]	; (80020fc <TIM_Base_SetConfig+0x148>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d00b      	beq.n	8002066 <TIM_Base_SetConfig+0xb2>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a2b      	ldr	r2, [pc, #172]	; (8002100 <TIM_Base_SetConfig+0x14c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d007      	beq.n	8002066 <TIM_Base_SetConfig+0xb2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a2a      	ldr	r2, [pc, #168]	; (8002104 <TIM_Base_SetConfig+0x150>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d003      	beq.n	8002066 <TIM_Base_SetConfig+0xb2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a29      	ldr	r2, [pc, #164]	; (8002108 <TIM_Base_SetConfig+0x154>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d108      	bne.n	8002078 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800206c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	4313      	orrs	r3, r2
 8002076:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	4313      	orrs	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a10      	ldr	r2, [pc, #64]	; (80020e0 <TIM_Base_SetConfig+0x12c>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d003      	beq.n	80020ac <TIM_Base_SetConfig+0xf8>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a12      	ldr	r2, [pc, #72]	; (80020f0 <TIM_Base_SetConfig+0x13c>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d103      	bne.n	80020b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	691a      	ldr	r2, [r3, #16]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d105      	bne.n	80020d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	f023 0201 	bic.w	r2, r3, #1
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	611a      	str	r2, [r3, #16]
  }
}
 80020d2:	bf00      	nop
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	40010000 	.word	0x40010000
 80020e4:	40000400 	.word	0x40000400
 80020e8:	40000800 	.word	0x40000800
 80020ec:	40000c00 	.word	0x40000c00
 80020f0:	40010400 	.word	0x40010400
 80020f4:	40014000 	.word	0x40014000
 80020f8:	40014400 	.word	0x40014400
 80020fc:	40014800 	.word	0x40014800
 8002100:	40001800 	.word	0x40001800
 8002104:	40001c00 	.word	0x40001c00
 8002108:	40002000 	.word	0x40002000

0800210c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <__NVIC_SetPriority>:
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	6039      	str	r1, [r7, #0]
 800213e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002144:	2b00      	cmp	r3, #0
 8002146:	db0a      	blt.n	800215e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	b2da      	uxtb	r2, r3
 800214c:	490c      	ldr	r1, [pc, #48]	; (8002180 <__NVIC_SetPriority+0x4c>)
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	0112      	lsls	r2, r2, #4
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	440b      	add	r3, r1
 8002158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800215c:	e00a      	b.n	8002174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	b2da      	uxtb	r2, r3
 8002162:	4908      	ldr	r1, [pc, #32]	; (8002184 <__NVIC_SetPriority+0x50>)
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	3b04      	subs	r3, #4
 800216c:	0112      	lsls	r2, r2, #4
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	440b      	add	r3, r1
 8002172:	761a      	strb	r2, [r3, #24]
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	e000e100 	.word	0xe000e100
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800218c:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <SysTick_Handler+0x1c>)
 800218e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002190:	f002 f988 	bl	80044a4 <xTaskGetSchedulerState>
 8002194:	4603      	mov	r3, r0
 8002196:	2b01      	cmp	r3, #1
 8002198:	d001      	beq.n	800219e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800219a:	f003 f86d 	bl	8005278 <xPortSysTickHandler>
  }
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	e000e010 	.word	0xe000e010

080021a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80021ac:	2100      	movs	r1, #0
 80021ae:	f06f 0004 	mvn.w	r0, #4
 80021b2:	f7ff ffbf 	bl	8002134 <__NVIC_SetPriority>
#endif
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021c2:	f3ef 8305 	mrs	r3, IPSR
 80021c6:	603b      	str	r3, [r7, #0]
  return(result);
 80021c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80021ce:	f06f 0305 	mvn.w	r3, #5
 80021d2:	607b      	str	r3, [r7, #4]
 80021d4:	e00c      	b.n	80021f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80021d6:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <osKernelInitialize+0x44>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d105      	bne.n	80021ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80021de:	4b08      	ldr	r3, [pc, #32]	; (8002200 <osKernelInitialize+0x44>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	607b      	str	r3, [r7, #4]
 80021e8:	e002      	b.n	80021f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80021ea:	f04f 33ff 	mov.w	r3, #4294967295
 80021ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80021f0:	687b      	ldr	r3, [r7, #4]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	200000e4 	.word	0x200000e4

08002204 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800220a:	f3ef 8305 	mrs	r3, IPSR
 800220e:	603b      	str	r3, [r7, #0]
  return(result);
 8002210:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002216:	f06f 0305 	mvn.w	r3, #5
 800221a:	607b      	str	r3, [r7, #4]
 800221c:	e010      	b.n	8002240 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <osKernelStart+0x48>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d109      	bne.n	800223a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002226:	f7ff ffbf 	bl	80021a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800222a:	4b08      	ldr	r3, [pc, #32]	; (800224c <osKernelStart+0x48>)
 800222c:	2202      	movs	r2, #2
 800222e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002230:	f001 fcdc 	bl	8003bec <vTaskStartScheduler>
      stat = osOK;
 8002234:	2300      	movs	r3, #0
 8002236:	607b      	str	r3, [r7, #4]
 8002238:	e002      	b.n	8002240 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800223a:	f04f 33ff 	mov.w	r3, #4294967295
 800223e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002240:	687b      	ldr	r3, [r7, #4]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	200000e4 	.word	0x200000e4

08002250 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002250:	b580      	push	{r7, lr}
 8002252:	b08e      	sub	sp, #56	; 0x38
 8002254:	af04      	add	r7, sp, #16
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800225c:	2300      	movs	r3, #0
 800225e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002260:	f3ef 8305 	mrs	r3, IPSR
 8002264:	617b      	str	r3, [r7, #20]
  return(result);
 8002266:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002268:	2b00      	cmp	r3, #0
 800226a:	d17e      	bne.n	800236a <osThreadNew+0x11a>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d07b      	beq.n	800236a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002272:	2380      	movs	r3, #128	; 0x80
 8002274:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002276:	2318      	movs	r3, #24
 8002278:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800227a:	2300      	movs	r3, #0
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800227e:	f04f 33ff 	mov.w	r3, #4294967295
 8002282:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d045      	beq.n	8002316 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d002      	beq.n	8002298 <osThreadNew+0x48>
        name = attr->name;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d002      	beq.n	80022a6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d008      	beq.n	80022be <osThreadNew+0x6e>
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	2b38      	cmp	r3, #56	; 0x38
 80022b0:	d805      	bhi.n	80022be <osThreadNew+0x6e>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <osThreadNew+0x72>
        return (NULL);
 80022be:	2300      	movs	r3, #0
 80022c0:	e054      	b.n	800236c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	089b      	lsrs	r3, r3, #2
 80022d0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00e      	beq.n	80022f8 <osThreadNew+0xa8>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2ba7      	cmp	r3, #167	; 0xa7
 80022e0:	d90a      	bls.n	80022f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d006      	beq.n	80022f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d002      	beq.n	80022f8 <osThreadNew+0xa8>
        mem = 1;
 80022f2:	2301      	movs	r3, #1
 80022f4:	61bb      	str	r3, [r7, #24]
 80022f6:	e010      	b.n	800231a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10c      	bne.n	800231a <osThreadNew+0xca>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d108      	bne.n	800231a <osThreadNew+0xca>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d104      	bne.n	800231a <osThreadNew+0xca>
          mem = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	61bb      	str	r3, [r7, #24]
 8002314:	e001      	b.n	800231a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d110      	bne.n	8002342 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002328:	9202      	str	r2, [sp, #8]
 800232a:	9301      	str	r3, [sp, #4]
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	6a3a      	ldr	r2, [r7, #32]
 8002334:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f001 fa6c 	bl	8003814 <xTaskCreateStatic>
 800233c:	4603      	mov	r3, r0
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	e013      	b.n	800236a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d110      	bne.n	800236a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	b29a      	uxth	r2, r3
 800234c:	f107 0310 	add.w	r3, r7, #16
 8002350:	9301      	str	r3, [sp, #4]
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f001 fab7 	bl	80038ce <xTaskCreate>
 8002360:	4603      	mov	r3, r0
 8002362:	2b01      	cmp	r3, #1
 8002364:	d001      	beq.n	800236a <osThreadNew+0x11a>
            hTask = NULL;
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800236a:	693b      	ldr	r3, [r7, #16]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3728      	adds	r7, #40	; 0x28
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800237a:	f3ef 8305 	mrs	r3, IPSR
 800237e:	603b      	str	r3, [r7, #0]
  return(result);
 8002380:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <osThreadYield+0x1a>
    stat = osErrorISR;
 8002386:	f06f 0305 	mvn.w	r3, #5
 800238a:	607b      	str	r3, [r7, #4]
 800238c:	e009      	b.n	80023a2 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 800238e:	2300      	movs	r3, #0
 8002390:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8002392:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <osThreadYield+0x3c>)
 8002394:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	f3bf 8f4f 	dsb	sy
 800239e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80023a2:	687b      	ldr	r3, [r7, #4]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	e000ed04 	.word	0xe000ed04

080023b4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023bc:	f3ef 8305 	mrs	r3, IPSR
 80023c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80023c2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <osDelay+0x1c>
    stat = osErrorISR;
 80023c8:	f06f 0305 	mvn.w	r3, #5
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	e007      	b.n	80023e0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d002      	beq.n	80023e0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f001 fbd2 	bl	8003b84 <vTaskDelay>
    }
  }

  return (stat);
 80023e0:	68fb      	ldr	r3, [r7, #12]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b08a      	sub	sp, #40	; 0x28
 80023ee:	af02      	add	r7, sp, #8
 80023f0:	60f8      	str	r0, [r7, #12]
 80023f2:	60b9      	str	r1, [r7, #8]
 80023f4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023fa:	f3ef 8305 	mrs	r3, IPSR
 80023fe:	613b      	str	r3, [r7, #16]
  return(result);
 8002400:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002402:	2b00      	cmp	r3, #0
 8002404:	d175      	bne.n	80024f2 <osSemaphoreNew+0x108>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d072      	beq.n	80024f2 <osSemaphoreNew+0x108>
 800240c:	68ba      	ldr	r2, [r7, #8]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	429a      	cmp	r2, r3
 8002412:	d86e      	bhi.n	80024f2 <osSemaphoreNew+0x108>
    mem = -1;
 8002414:	f04f 33ff 	mov.w	r3, #4294967295
 8002418:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d015      	beq.n	800244c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d006      	beq.n	8002436 <osSemaphoreNew+0x4c>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	2b4f      	cmp	r3, #79	; 0x4f
 800242e:	d902      	bls.n	8002436 <osSemaphoreNew+0x4c>
        mem = 1;
 8002430:	2301      	movs	r3, #1
 8002432:	61bb      	str	r3, [r7, #24]
 8002434:	e00c      	b.n	8002450 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d108      	bne.n	8002450 <osSemaphoreNew+0x66>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d104      	bne.n	8002450 <osSemaphoreNew+0x66>
          mem = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	61bb      	str	r3, [r7, #24]
 800244a:	e001      	b.n	8002450 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800244c:	2300      	movs	r3, #0
 800244e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002456:	d04c      	beq.n	80024f2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d128      	bne.n	80024b0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d10a      	bne.n	800247a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2203      	movs	r2, #3
 800246a:	9200      	str	r2, [sp, #0]
 800246c:	2200      	movs	r2, #0
 800246e:	2100      	movs	r1, #0
 8002470:	2001      	movs	r0, #1
 8002472:	f000 fa29 	bl	80028c8 <xQueueGenericCreateStatic>
 8002476:	61f8      	str	r0, [r7, #28]
 8002478:	e005      	b.n	8002486 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800247a:	2203      	movs	r2, #3
 800247c:	2100      	movs	r1, #0
 800247e:	2001      	movs	r0, #1
 8002480:	f000 fa9a 	bl	80029b8 <xQueueGenericCreate>
 8002484:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d022      	beq.n	80024d2 <osSemaphoreNew+0xe8>
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d01f      	beq.n	80024d2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002492:	2300      	movs	r3, #0
 8002494:	2200      	movs	r2, #0
 8002496:	2100      	movs	r1, #0
 8002498:	69f8      	ldr	r0, [r7, #28]
 800249a:	f000 fb55 	bl	8002b48 <xQueueGenericSend>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d016      	beq.n	80024d2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80024a4:	69f8      	ldr	r0, [r7, #28]
 80024a6:	f000 ffe1 	bl	800346c <vQueueDelete>
            hSemaphore = NULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
 80024ae:	e010      	b.n	80024d2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d108      	bne.n	80024c8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	461a      	mov	r2, r3
 80024bc:	68b9      	ldr	r1, [r7, #8]
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 fad7 	bl	8002a72 <xQueueCreateCountingSemaphoreStatic>
 80024c4:	61f8      	str	r0, [r7, #28]
 80024c6:	e004      	b.n	80024d2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80024c8:	68b9      	ldr	r1, [r7, #8]
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 fb08 	bl	8002ae0 <xQueueCreateCountingSemaphore>
 80024d0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00c      	beq.n	80024f2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <osSemaphoreNew+0xfc>
          name = attr->name;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	e001      	b.n	80024ea <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80024ea:	6979      	ldr	r1, [r7, #20]
 80024ec:	69f8      	ldr	r0, [r7, #28]
 80024ee:	f001 f909 	bl	8003704 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80024f2:	69fb      	ldr	r3, [r7, #28]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3720      	adds	r7, #32
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d103      	bne.n	800251c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8002514:	f06f 0303 	mvn.w	r3, #3
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	e039      	b.n	8002590 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800251c:	f3ef 8305 	mrs	r3, IPSR
 8002520:	60fb      	str	r3, [r7, #12]
  return(result);
 8002522:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002524:	2b00      	cmp	r3, #0
 8002526:	d022      	beq.n	800256e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800252e:	f06f 0303 	mvn.w	r3, #3
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	e02c      	b.n	8002590 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8002536:	2300      	movs	r3, #0
 8002538:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800253a:	f107 0308 	add.w	r3, r7, #8
 800253e:	461a      	mov	r2, r3
 8002540:	2100      	movs	r1, #0
 8002542:	6938      	ldr	r0, [r7, #16]
 8002544:	f000 ff12 	bl	800336c <xQueueReceiveFromISR>
 8002548:	4603      	mov	r3, r0
 800254a:	2b01      	cmp	r3, #1
 800254c:	d003      	beq.n	8002556 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800254e:	f06f 0302 	mvn.w	r3, #2
 8002552:	617b      	str	r3, [r7, #20]
 8002554:	e01c      	b.n	8002590 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d019      	beq.n	8002590 <osSemaphoreAcquire+0x94>
 800255c:	4b0f      	ldr	r3, [pc, #60]	; (800259c <osSemaphoreAcquire+0xa0>)
 800255e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	f3bf 8f4f 	dsb	sy
 8002568:	f3bf 8f6f 	isb	sy
 800256c:	e010      	b.n	8002590 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800256e:	6839      	ldr	r1, [r7, #0]
 8002570:	6938      	ldr	r0, [r7, #16]
 8002572:	f000 fdef 	bl	8003154 <xQueueSemaphoreTake>
 8002576:	4603      	mov	r3, r0
 8002578:	2b01      	cmp	r3, #1
 800257a:	d009      	beq.n	8002590 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8002582:	f06f 0301 	mvn.w	r3, #1
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	e002      	b.n	8002590 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800258a:	f06f 0302 	mvn.w	r3, #2
 800258e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8002590:	697b      	ldr	r3, [r7, #20]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	e000ed04 	.word	0xe000ed04

080025a0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d103      	bne.n	80025be <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80025b6:	f06f 0303 	mvn.w	r3, #3
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	e02c      	b.n	8002618 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025be:	f3ef 8305 	mrs	r3, IPSR
 80025c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80025c4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d01a      	beq.n	8002600 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80025ca:	2300      	movs	r3, #0
 80025cc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80025ce:	f107 0308 	add.w	r3, r7, #8
 80025d2:	4619      	mov	r1, r3
 80025d4:	6938      	ldr	r0, [r7, #16]
 80025d6:	f000 fc50 	bl	8002e7a <xQueueGiveFromISR>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d003      	beq.n	80025e8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80025e0:	f06f 0302 	mvn.w	r3, #2
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	e017      	b.n	8002618 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d014      	beq.n	8002618 <osSemaphoreRelease+0x78>
 80025ee:	4b0d      	ldr	r3, [pc, #52]	; (8002624 <osSemaphoreRelease+0x84>)
 80025f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	f3bf 8f4f 	dsb	sy
 80025fa:	f3bf 8f6f 	isb	sy
 80025fe:	e00b      	b.n	8002618 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002600:	2300      	movs	r3, #0
 8002602:	2200      	movs	r2, #0
 8002604:	2100      	movs	r1, #0
 8002606:	6938      	ldr	r0, [r7, #16]
 8002608:	f000 fa9e 	bl	8002b48 <xQueueGenericSend>
 800260c:	4603      	mov	r3, r0
 800260e:	2b01      	cmp	r3, #1
 8002610:	d002      	beq.n	8002618 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8002612:	f06f 0302 	mvn.w	r3, #2
 8002616:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8002618:	697b      	ldr	r3, [r7, #20]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	e000ed04 	.word	0xe000ed04

08002628 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4a07      	ldr	r2, [pc, #28]	; (8002654 <vApplicationGetIdleTaskMemory+0x2c>)
 8002638:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	4a06      	ldr	r2, [pc, #24]	; (8002658 <vApplicationGetIdleTaskMemory+0x30>)
 800263e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2280      	movs	r2, #128	; 0x80
 8002644:	601a      	str	r2, [r3, #0]
}
 8002646:	bf00      	nop
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	200000e8 	.word	0x200000e8
 8002658:	20000190 	.word	0x20000190

0800265c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4a07      	ldr	r2, [pc, #28]	; (8002688 <vApplicationGetTimerTaskMemory+0x2c>)
 800266c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	4a06      	ldr	r2, [pc, #24]	; (800268c <vApplicationGetTimerTaskMemory+0x30>)
 8002672:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f44f 7280 	mov.w	r2, #256	; 0x100
 800267a:	601a      	str	r2, [r3, #0]
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	20000390 	.word	0x20000390
 800268c:	20000438 	.word	0x20000438

08002690 <vListInitialise>:
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f103 0208 	add.w	r2, r3, #8
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f04f 32ff 	mov.w	r2, #4294967295
 80026a8:	609a      	str	r2, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f103 0208 	add.w	r2, r3, #8
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	60da      	str	r2, [r3, #12]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f103 0208 	add.w	r2, r3, #8
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	611a      	str	r2, [r3, #16]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <vListInitialiseItem>:
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	611a      	str	r2, [r3, #16]
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <vListInsertEnd>:
 80026ea:	b480      	push	{r7}
 80026ec:	b085      	sub	sp, #20
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
 80026f2:	6039      	str	r1, [r7, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	605a      	str	r2, [r3, #4]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	605a      	str	r2, [r3, #4]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	609a      	str	r2, [r3, #8]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	611a      	str	r2, [r3, #16]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	bf00      	nop
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <vListInsert>:
 8002732:	b480      	push	{r7}
 8002734:	b085      	sub	sp, #20
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	6039      	str	r1, [r7, #0]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002748:	d103      	bne.n	8002752 <vListInsert+0x20>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	e00c      	b.n	800276c <vListInsert+0x3a>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3308      	adds	r3, #8
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	e002      	b.n	8002760 <vListInsert+0x2e>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	429a      	cmp	r2, r3
 800276a:	d2f6      	bcs.n	800275a <vListInsert+0x28>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	605a      	str	r2, [r3, #4]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	609a      	str	r2, [r3, #8]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	605a      	str	r2, [r3, #4]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	611a      	str	r2, [r3, #16]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <uxListRemove>:
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6892      	ldr	r2, [r2, #8]
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6852      	ldr	r2, [r2, #4]
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d103      	bne.n	80027d8 <uxListRemove+0x34>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	605a      	str	r2, [r3, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	611a      	str	r2, [r3, #16]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	1e5a      	subs	r2, r3, #1
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <xQueueGenericReset>:
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10a      	bne.n	8002822 <xQueueGenericReset+0x2a>
 800280c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002810:	f383 8811 	msr	BASEPRI, r3
 8002814:	f3bf 8f6f 	isb	sy
 8002818:	f3bf 8f4f 	dsb	sy
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	bf00      	nop
 8002820:	e7fe      	b.n	8002820 <xQueueGenericReset+0x28>
 8002822:	f002 fc97 	bl	8005154 <vPortEnterCritical>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282e:	68f9      	ldr	r1, [r7, #12]
 8002830:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002832:	fb01 f303 	mul.w	r3, r1, r3
 8002836:	441a      	add	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	639a      	str	r2, [r3, #56]	; 0x38
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002852:	3b01      	subs	r3, #1
 8002854:	68f9      	ldr	r1, [r7, #12]
 8002856:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	441a      	add	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	60da      	str	r2, [r3, #12]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	22ff      	movs	r2, #255	; 0xff
 8002866:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	22ff      	movs	r2, #255	; 0xff
 800286e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d114      	bne.n	80028a2 <xQueueGenericReset+0xaa>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d01a      	beq.n	80028b6 <xQueueGenericReset+0xbe>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	3310      	adds	r3, #16
 8002884:	4618      	mov	r0, r3
 8002886:	f001 fc4b 	bl	8004120 <xTaskRemoveFromEventList>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d012      	beq.n	80028b6 <xQueueGenericReset+0xbe>
 8002890:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <xQueueGenericReset+0xcc>)
 8002892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	f3bf 8f4f 	dsb	sy
 800289c:	f3bf 8f6f 	isb	sy
 80028a0:	e009      	b.n	80028b6 <xQueueGenericReset+0xbe>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	3310      	adds	r3, #16
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fef2 	bl	8002690 <vListInitialise>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	3324      	adds	r3, #36	; 0x24
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff feed 	bl	8002690 <vListInitialise>
 80028b6:	f002 fc7d 	bl	80051b4 <vPortExitCritical>
 80028ba:	2301      	movs	r3, #1
 80028bc:	4618      	mov	r0, r3
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	e000ed04 	.word	0xe000ed04

080028c8 <xQueueGenericCreateStatic>:
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08e      	sub	sp, #56	; 0x38
 80028cc:	af02      	add	r7, sp, #8
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
 80028d4:	603b      	str	r3, [r7, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10a      	bne.n	80028f2 <xQueueGenericCreateStatic+0x2a>
 80028dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e0:	f383 8811 	msr	BASEPRI, r3
 80028e4:	f3bf 8f6f 	isb	sy
 80028e8:	f3bf 8f4f 	dsb	sy
 80028ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ee:	bf00      	nop
 80028f0:	e7fe      	b.n	80028f0 <xQueueGenericCreateStatic+0x28>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10a      	bne.n	800290e <xQueueGenericCreateStatic+0x46>
 80028f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fc:	f383 8811 	msr	BASEPRI, r3
 8002900:	f3bf 8f6f 	isb	sy
 8002904:	f3bf 8f4f 	dsb	sy
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
 800290a:	bf00      	nop
 800290c:	e7fe      	b.n	800290c <xQueueGenericCreateStatic+0x44>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d002      	beq.n	800291a <xQueueGenericCreateStatic+0x52>
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <xQueueGenericCreateStatic+0x56>
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <xQueueGenericCreateStatic+0x58>
 800291e:	2300      	movs	r3, #0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10a      	bne.n	800293a <xQueueGenericCreateStatic+0x72>
 8002924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002928:	f383 8811 	msr	BASEPRI, r3
 800292c:	f3bf 8f6f 	isb	sy
 8002930:	f3bf 8f4f 	dsb	sy
 8002934:	623b      	str	r3, [r7, #32]
 8002936:	bf00      	nop
 8002938:	e7fe      	b.n	8002938 <xQueueGenericCreateStatic+0x70>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d102      	bne.n	8002946 <xQueueGenericCreateStatic+0x7e>
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <xQueueGenericCreateStatic+0x82>
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <xQueueGenericCreateStatic+0x84>
 800294a:	2300      	movs	r3, #0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10a      	bne.n	8002966 <xQueueGenericCreateStatic+0x9e>
 8002950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002954:	f383 8811 	msr	BASEPRI, r3
 8002958:	f3bf 8f6f 	isb	sy
 800295c:	f3bf 8f4f 	dsb	sy
 8002960:	61fb      	str	r3, [r7, #28]
 8002962:	bf00      	nop
 8002964:	e7fe      	b.n	8002964 <xQueueGenericCreateStatic+0x9c>
 8002966:	2350      	movs	r3, #80	; 0x50
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2b50      	cmp	r3, #80	; 0x50
 800296e:	d00a      	beq.n	8002986 <xQueueGenericCreateStatic+0xbe>
 8002970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002974:	f383 8811 	msr	BASEPRI, r3
 8002978:	f3bf 8f6f 	isb	sy
 800297c:	f3bf 8f4f 	dsb	sy
 8002980:	61bb      	str	r3, [r7, #24]
 8002982:	bf00      	nop
 8002984:	e7fe      	b.n	8002984 <xQueueGenericCreateStatic+0xbc>
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800298c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00d      	beq.n	80029ae <xQueueGenericCreateStatic+0xe6>
 8002992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800299a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800299e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	4613      	mov	r3, r2
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	68b9      	ldr	r1, [r7, #8]
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 f83f 	bl	8002a2c <prvInitialiseNewQueue>
 80029ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b0:	4618      	mov	r0, r3
 80029b2:	3730      	adds	r7, #48	; 0x30
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <xQueueGenericCreate>:
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08a      	sub	sp, #40	; 0x28
 80029bc:	af02      	add	r7, sp, #8
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	4613      	mov	r3, r2
 80029c4:	71fb      	strb	r3, [r7, #7]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10a      	bne.n	80029e2 <xQueueGenericCreate+0x2a>
 80029cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d0:	f383 8811 	msr	BASEPRI, r3
 80029d4:	f3bf 8f6f 	isb	sy
 80029d8:	f3bf 8f4f 	dsb	sy
 80029dc:	613b      	str	r3, [r7, #16]
 80029de:	bf00      	nop
 80029e0:	e7fe      	b.n	80029e0 <xQueueGenericCreate+0x28>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	fb02 f303 	mul.w	r3, r2, r3
 80029ea:	61fb      	str	r3, [r7, #28]
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	3350      	adds	r3, #80	; 0x50
 80029f0:	4618      	mov	r0, r3
 80029f2:	f002 fcd1 	bl	8005398 <pvPortMalloc>
 80029f6:	61b8      	str	r0, [r7, #24]
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d011      	beq.n	8002a22 <xQueueGenericCreate+0x6a>
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	617b      	str	r3, [r7, #20]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	3350      	adds	r3, #80	; 0x50
 8002a06:	617b      	str	r3, [r7, #20]
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a10:	79fa      	ldrb	r2, [r7, #7]
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	4613      	mov	r3, r2
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	68b9      	ldr	r1, [r7, #8]
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 f805 	bl	8002a2c <prvInitialiseNewQueue>
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	4618      	mov	r0, r3
 8002a26:	3720      	adds	r7, #32
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <prvInitialiseNewQueue>:
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
 8002a38:	70fb      	strb	r3, [r7, #3]
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d103      	bne.n	8002a48 <prvInitialiseNewQueue+0x1c>
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	e002      	b.n	8002a4e <prvInitialiseNewQueue+0x22>
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	641a      	str	r2, [r3, #64]	; 0x40
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	69b8      	ldr	r0, [r7, #24]
 8002a5e:	f7ff fecb 	bl	80027f8 <xQueueGenericReset>
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <xQueueCreateCountingSemaphoreStatic>:
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b08a      	sub	sp, #40	; 0x28
 8002a76:	af02      	add	r7, sp, #8
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607a      	str	r2, [r7, #4]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10a      	bne.n	8002a9a <xQueueCreateCountingSemaphoreStatic+0x28>
 8002a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a88:	f383 8811 	msr	BASEPRI, r3
 8002a8c:	f3bf 8f6f 	isb	sy
 8002a90:	f3bf 8f4f 	dsb	sy
 8002a94:	61bb      	str	r3, [r7, #24]
 8002a96:	bf00      	nop
 8002a98:	e7fe      	b.n	8002a98 <xQueueCreateCountingSemaphoreStatic+0x26>
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d90a      	bls.n	8002ab8 <xQueueCreateCountingSemaphoreStatic+0x46>
 8002aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa6:	f383 8811 	msr	BASEPRI, r3
 8002aaa:	f3bf 8f6f 	isb	sy
 8002aae:	f3bf 8f4f 	dsb	sy
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	bf00      	nop
 8002ab6:	e7fe      	b.n	8002ab6 <xQueueCreateCountingSemaphoreStatic+0x44>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f7ff ff00 	bl	80028c8 <xQueueGenericCreateStatic>
 8002ac8:	61f8      	str	r0, [r7, #28]
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d002      	beq.n	8002ad6 <xQueueCreateCountingSemaphoreStatic+0x64>
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	639a      	str	r2, [r3, #56]	; 0x38
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3720      	adds	r7, #32
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <xQueueCreateCountingSemaphore>:
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10a      	bne.n	8002b06 <xQueueCreateCountingSemaphore+0x26>
 8002af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af4:	f383 8811 	msr	BASEPRI, r3
 8002af8:	f3bf 8f6f 	isb	sy
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	bf00      	nop
 8002b04:	e7fe      	b.n	8002b04 <xQueueCreateCountingSemaphore+0x24>
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d90a      	bls.n	8002b24 <xQueueCreateCountingSemaphore+0x44>
 8002b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b12:	f383 8811 	msr	BASEPRI, r3
 8002b16:	f3bf 8f6f 	isb	sy
 8002b1a:	f3bf 8f4f 	dsb	sy
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	bf00      	nop
 8002b22:	e7fe      	b.n	8002b22 <xQueueCreateCountingSemaphore+0x42>
 8002b24:	2202      	movs	r2, #2
 8002b26:	2100      	movs	r1, #0
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff ff45 	bl	80029b8 <xQueueGenericCreate>
 8002b2e:	6178      	str	r0, [r7, #20]
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <xQueueCreateCountingSemaphore+0x5c>
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	639a      	str	r2, [r3, #56]	; 0x38
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3718      	adds	r7, #24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <xQueueGenericSend>:
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08e      	sub	sp, #56	; 0x38
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
 8002b54:	603b      	str	r3, [r7, #0]
 8002b56:	2300      	movs	r3, #0
 8002b58:	637b      	str	r3, [r7, #52]	; 0x34
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10a      	bne.n	8002b7a <xQueueGenericSend+0x32>
 8002b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b68:	f383 8811 	msr	BASEPRI, r3
 8002b6c:	f3bf 8f6f 	isb	sy
 8002b70:	f3bf 8f4f 	dsb	sy
 8002b74:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b76:	bf00      	nop
 8002b78:	e7fe      	b.n	8002b78 <xQueueGenericSend+0x30>
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d103      	bne.n	8002b88 <xQueueGenericSend+0x40>
 8002b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <xQueueGenericSend+0x44>
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e000      	b.n	8002b8e <xQueueGenericSend+0x46>
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10a      	bne.n	8002ba8 <xQueueGenericSend+0x60>
 8002b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b96:	f383 8811 	msr	BASEPRI, r3
 8002b9a:	f3bf 8f6f 	isb	sy
 8002b9e:	f3bf 8f4f 	dsb	sy
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba4:	bf00      	nop
 8002ba6:	e7fe      	b.n	8002ba6 <xQueueGenericSend+0x5e>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d103      	bne.n	8002bb6 <xQueueGenericSend+0x6e>
 8002bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d101      	bne.n	8002bba <xQueueGenericSend+0x72>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <xQueueGenericSend+0x74>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10a      	bne.n	8002bd6 <xQueueGenericSend+0x8e>
 8002bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc4:	f383 8811 	msr	BASEPRI, r3
 8002bc8:	f3bf 8f6f 	isb	sy
 8002bcc:	f3bf 8f4f 	dsb	sy
 8002bd0:	623b      	str	r3, [r7, #32]
 8002bd2:	bf00      	nop
 8002bd4:	e7fe      	b.n	8002bd4 <xQueueGenericSend+0x8c>
 8002bd6:	f001 fc65 	bl	80044a4 <xTaskGetSchedulerState>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d102      	bne.n	8002be6 <xQueueGenericSend+0x9e>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <xQueueGenericSend+0xa2>
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <xQueueGenericSend+0xa4>
 8002bea:	2300      	movs	r3, #0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10a      	bne.n	8002c06 <xQueueGenericSend+0xbe>
 8002bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf4:	f383 8811 	msr	BASEPRI, r3
 8002bf8:	f3bf 8f6f 	isb	sy
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	61fb      	str	r3, [r7, #28]
 8002c02:	bf00      	nop
 8002c04:	e7fe      	b.n	8002c04 <xQueueGenericSend+0xbc>
 8002c06:	f002 faa5 	bl	8005154 <vPortEnterCritical>
 8002c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d302      	bcc.n	8002c1c <xQueueGenericSend+0xd4>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d129      	bne.n	8002c70 <xQueueGenericSend+0x128>
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	68b9      	ldr	r1, [r7, #8]
 8002c20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c22:	f000 fc5e 	bl	80034e2 <prvCopyDataToQueue>
 8002c26:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d010      	beq.n	8002c52 <xQueueGenericSend+0x10a>
 8002c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c32:	3324      	adds	r3, #36	; 0x24
 8002c34:	4618      	mov	r0, r3
 8002c36:	f001 fa73 	bl	8004120 <xTaskRemoveFromEventList>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d013      	beq.n	8002c68 <xQueueGenericSend+0x120>
 8002c40:	4b3f      	ldr	r3, [pc, #252]	; (8002d40 <xQueueGenericSend+0x1f8>)
 8002c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	f3bf 8f4f 	dsb	sy
 8002c4c:	f3bf 8f6f 	isb	sy
 8002c50:	e00a      	b.n	8002c68 <xQueueGenericSend+0x120>
 8002c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d007      	beq.n	8002c68 <xQueueGenericSend+0x120>
 8002c58:	4b39      	ldr	r3, [pc, #228]	; (8002d40 <xQueueGenericSend+0x1f8>)
 8002c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	f3bf 8f4f 	dsb	sy
 8002c64:	f3bf 8f6f 	isb	sy
 8002c68:	f002 faa4 	bl	80051b4 <vPortExitCritical>
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e063      	b.n	8002d38 <xQueueGenericSend+0x1f0>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d103      	bne.n	8002c7e <xQueueGenericSend+0x136>
 8002c76:	f002 fa9d 	bl	80051b4 <vPortExitCritical>
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	e05c      	b.n	8002d38 <xQueueGenericSend+0x1f0>
 8002c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d106      	bne.n	8002c92 <xQueueGenericSend+0x14a>
 8002c84:	f107 0314 	add.w	r3, r7, #20
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f001 faad 	bl	80041e8 <vTaskInternalSetTimeOutState>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	637b      	str	r3, [r7, #52]	; 0x34
 8002c92:	f002 fa8f 	bl	80051b4 <vPortExitCritical>
 8002c96:	f001 f819 	bl	8003ccc <vTaskSuspendAll>
 8002c9a:	f002 fa5b 	bl	8005154 <vPortEnterCritical>
 8002c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ca4:	b25b      	sxtb	r3, r3
 8002ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002caa:	d103      	bne.n	8002cb4 <xQueueGenericSend+0x16c>
 8002cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cba:	b25b      	sxtb	r3, r3
 8002cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc0:	d103      	bne.n	8002cca <xQueueGenericSend+0x182>
 8002cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cca:	f002 fa73 	bl	80051b4 <vPortExitCritical>
 8002cce:	1d3a      	adds	r2, r7, #4
 8002cd0:	f107 0314 	add.w	r3, r7, #20
 8002cd4:	4611      	mov	r1, r2
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f001 fa9c 	bl	8004214 <xTaskCheckForTimeOut>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d124      	bne.n	8002d2c <xQueueGenericSend+0x1e4>
 8002ce2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ce4:	f000 fcf5 	bl	80036d2 <prvIsQueueFull>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d018      	beq.n	8002d20 <xQueueGenericSend+0x1d8>
 8002cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf0:	3310      	adds	r3, #16
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	4611      	mov	r1, r2
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f001 f9c2 	bl	8004080 <vTaskPlaceOnEventList>
 8002cfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cfe:	f000 fc80 	bl	8003602 <prvUnlockQueue>
 8002d02:	f000 fff1 	bl	8003ce8 <xTaskResumeAll>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f47f af7c 	bne.w	8002c06 <xQueueGenericSend+0xbe>
 8002d0e:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <xQueueGenericSend+0x1f8>)
 8002d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	f3bf 8f4f 	dsb	sy
 8002d1a:	f3bf 8f6f 	isb	sy
 8002d1e:	e772      	b.n	8002c06 <xQueueGenericSend+0xbe>
 8002d20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d22:	f000 fc6e 	bl	8003602 <prvUnlockQueue>
 8002d26:	f000 ffdf 	bl	8003ce8 <xTaskResumeAll>
 8002d2a:	e76c      	b.n	8002c06 <xQueueGenericSend+0xbe>
 8002d2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d2e:	f000 fc68 	bl	8003602 <prvUnlockQueue>
 8002d32:	f000 ffd9 	bl	8003ce8 <xTaskResumeAll>
 8002d36:	2300      	movs	r3, #0
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3738      	adds	r7, #56	; 0x38
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	e000ed04 	.word	0xe000ed04

08002d44 <xQueueGenericSendFromISR>:
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b090      	sub	sp, #64	; 0x40
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
 8002d50:	603b      	str	r3, [r7, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10a      	bne.n	8002d72 <xQueueGenericSendFromISR+0x2e>
 8002d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d60:	f383 8811 	msr	BASEPRI, r3
 8002d64:	f3bf 8f6f 	isb	sy
 8002d68:	f3bf 8f4f 	dsb	sy
 8002d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d6e:	bf00      	nop
 8002d70:	e7fe      	b.n	8002d70 <xQueueGenericSendFromISR+0x2c>
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d103      	bne.n	8002d80 <xQueueGenericSendFromISR+0x3c>
 8002d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <xQueueGenericSendFromISR+0x40>
 8002d80:	2301      	movs	r3, #1
 8002d82:	e000      	b.n	8002d86 <xQueueGenericSendFromISR+0x42>
 8002d84:	2300      	movs	r3, #0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10a      	bne.n	8002da0 <xQueueGenericSendFromISR+0x5c>
 8002d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8e:	f383 8811 	msr	BASEPRI, r3
 8002d92:	f3bf 8f6f 	isb	sy
 8002d96:	f3bf 8f4f 	dsb	sy
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d9c:	bf00      	nop
 8002d9e:	e7fe      	b.n	8002d9e <xQueueGenericSendFromISR+0x5a>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d103      	bne.n	8002dae <xQueueGenericSendFromISR+0x6a>
 8002da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d101      	bne.n	8002db2 <xQueueGenericSendFromISR+0x6e>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <xQueueGenericSendFromISR+0x70>
 8002db2:	2300      	movs	r3, #0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10a      	bne.n	8002dce <xQueueGenericSendFromISR+0x8a>
 8002db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dbc:	f383 8811 	msr	BASEPRI, r3
 8002dc0:	f3bf 8f6f 	isb	sy
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	623b      	str	r3, [r7, #32]
 8002dca:	bf00      	nop
 8002dcc:	e7fe      	b.n	8002dcc <xQueueGenericSendFromISR+0x88>
 8002dce:	f002 faa3 	bl	8005318 <vPortValidateInterruptPriority>
 8002dd2:	f3ef 8211 	mrs	r2, BASEPRI
 8002dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dda:	f383 8811 	msr	BASEPRI, r3
 8002dde:	f3bf 8f6f 	isb	sy
 8002de2:	f3bf 8f4f 	dsb	sy
 8002de6:	61fa      	str	r2, [r7, #28]
 8002de8:	61bb      	str	r3, [r7, #24]
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	637b      	str	r3, [r7, #52]	; 0x34
 8002dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d302      	bcc.n	8002e00 <xQueueGenericSendFromISR+0xbc>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d12f      	bne.n	8002e60 <xQueueGenericSendFromISR+0x11c>
 8002e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	68b9      	ldr	r1, [r7, #8]
 8002e14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002e16:	f000 fb64 	bl	80034e2 <prvCopyDataToQueue>
 8002e1a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e22:	d112      	bne.n	8002e4a <xQueueGenericSendFromISR+0x106>
 8002e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d016      	beq.n	8002e5a <xQueueGenericSendFromISR+0x116>
 8002e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2e:	3324      	adds	r3, #36	; 0x24
 8002e30:	4618      	mov	r0, r3
 8002e32:	f001 f975 	bl	8004120 <xTaskRemoveFromEventList>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00e      	beq.n	8002e5a <xQueueGenericSendFromISR+0x116>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00b      	beq.n	8002e5a <xQueueGenericSendFromISR+0x116>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	e007      	b.n	8002e5a <xQueueGenericSendFromISR+0x116>
 8002e4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e4e:	3301      	adds	r3, #1
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	b25a      	sxtb	r2, r3
 8002e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e5e:	e001      	b.n	8002e64 <xQueueGenericSendFromISR+0x120>
 8002e60:	2300      	movs	r3, #0
 8002e62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f383 8811 	msr	BASEPRI, r3
 8002e6e:	bf00      	nop
 8002e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e72:	4618      	mov	r0, r3
 8002e74:	3740      	adds	r7, #64	; 0x40
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <xQueueGiveFromISR>:
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b08e      	sub	sp, #56	; 0x38
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
 8002e82:	6039      	str	r1, [r7, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	633b      	str	r3, [r7, #48]	; 0x30
 8002e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10a      	bne.n	8002ea4 <xQueueGiveFromISR+0x2a>
 8002e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e92:	f383 8811 	msr	BASEPRI, r3
 8002e96:	f3bf 8f6f 	isb	sy
 8002e9a:	f3bf 8f4f 	dsb	sy
 8002e9e:	623b      	str	r3, [r7, #32]
 8002ea0:	bf00      	nop
 8002ea2:	e7fe      	b.n	8002ea2 <xQueueGiveFromISR+0x28>
 8002ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00a      	beq.n	8002ec2 <xQueueGiveFromISR+0x48>
 8002eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb0:	f383 8811 	msr	BASEPRI, r3
 8002eb4:	f3bf 8f6f 	isb	sy
 8002eb8:	f3bf 8f4f 	dsb	sy
 8002ebc:	61fb      	str	r3, [r7, #28]
 8002ebe:	bf00      	nop
 8002ec0:	e7fe      	b.n	8002ec0 <xQueueGiveFromISR+0x46>
 8002ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d103      	bne.n	8002ed2 <xQueueGiveFromISR+0x58>
 8002eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <xQueueGiveFromISR+0x5c>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e000      	b.n	8002ed8 <xQueueGiveFromISR+0x5e>
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10a      	bne.n	8002ef2 <xQueueGiveFromISR+0x78>
 8002edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee0:	f383 8811 	msr	BASEPRI, r3
 8002ee4:	f3bf 8f6f 	isb	sy
 8002ee8:	f3bf 8f4f 	dsb	sy
 8002eec:	61bb      	str	r3, [r7, #24]
 8002eee:	bf00      	nop
 8002ef0:	e7fe      	b.n	8002ef0 <xQueueGiveFromISR+0x76>
 8002ef2:	f002 fa11 	bl	8005318 <vPortValidateInterruptPriority>
 8002ef6:	f3ef 8211 	mrs	r2, BASEPRI
 8002efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002efe:	f383 8811 	msr	BASEPRI, r3
 8002f02:	f3bf 8f6f 	isb	sy
 8002f06:	f3bf 8f4f 	dsb	sy
 8002f0a:	617a      	str	r2, [r7, #20]
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f16:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d22b      	bcs.n	8002f7a <xQueueGiveFromISR+0x100>
 8002f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f32:	639a      	str	r2, [r3, #56]	; 0x38
 8002f34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3c:	d112      	bne.n	8002f64 <xQueueGiveFromISR+0xea>
 8002f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d016      	beq.n	8002f74 <xQueueGiveFromISR+0xfa>
 8002f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f48:	3324      	adds	r3, #36	; 0x24
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f001 f8e8 	bl	8004120 <xTaskRemoveFromEventList>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00e      	beq.n	8002f74 <xQueueGiveFromISR+0xfa>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00b      	beq.n	8002f74 <xQueueGiveFromISR+0xfa>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	e007      	b.n	8002f74 <xQueueGiveFromISR+0xfa>
 8002f64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f68:	3301      	adds	r3, #1
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	b25a      	sxtb	r2, r3
 8002f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f74:	2301      	movs	r3, #1
 8002f76:	637b      	str	r3, [r7, #52]	; 0x34
 8002f78:	e001      	b.n	8002f7e <xQueueGiveFromISR+0x104>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	bf00      	nop
 8002f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3738      	adds	r7, #56	; 0x38
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <xQueueReceive>:
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b08c      	sub	sp, #48	; 0x30
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10a      	bne.n	8002fc4 <xQueueReceive+0x30>
 8002fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb2:	f383 8811 	msr	BASEPRI, r3
 8002fb6:	f3bf 8f6f 	isb	sy
 8002fba:	f3bf 8f4f 	dsb	sy
 8002fbe:	623b      	str	r3, [r7, #32]
 8002fc0:	bf00      	nop
 8002fc2:	e7fe      	b.n	8002fc2 <xQueueReceive+0x2e>
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d103      	bne.n	8002fd2 <xQueueReceive+0x3e>
 8002fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <xQueueReceive+0x42>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <xQueueReceive+0x44>
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10a      	bne.n	8002ff2 <xQueueReceive+0x5e>
 8002fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe0:	f383 8811 	msr	BASEPRI, r3
 8002fe4:	f3bf 8f6f 	isb	sy
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	61fb      	str	r3, [r7, #28]
 8002fee:	bf00      	nop
 8002ff0:	e7fe      	b.n	8002ff0 <xQueueReceive+0x5c>
 8002ff2:	f001 fa57 	bl	80044a4 <xTaskGetSchedulerState>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d102      	bne.n	8003002 <xQueueReceive+0x6e>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <xQueueReceive+0x72>
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <xQueueReceive+0x74>
 8003006:	2300      	movs	r3, #0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10a      	bne.n	8003022 <xQueueReceive+0x8e>
 800300c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003010:	f383 8811 	msr	BASEPRI, r3
 8003014:	f3bf 8f6f 	isb	sy
 8003018:	f3bf 8f4f 	dsb	sy
 800301c:	61bb      	str	r3, [r7, #24]
 800301e:	bf00      	nop
 8003020:	e7fe      	b.n	8003020 <xQueueReceive+0x8c>
 8003022:	f002 f897 	bl	8005154 <vPortEnterCritical>
 8003026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302a:	627b      	str	r3, [r7, #36]	; 0x24
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	2b00      	cmp	r3, #0
 8003030:	d01f      	beq.n	8003072 <xQueueReceive+0xde>
 8003032:	68b9      	ldr	r1, [r7, #8]
 8003034:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003036:	f000 fabe 	bl	80035b6 <prvCopyDataFromQueue>
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	1e5a      	subs	r2, r3, #1
 800303e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003040:	639a      	str	r2, [r3, #56]	; 0x38
 8003042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00f      	beq.n	800306a <xQueueReceive+0xd6>
 800304a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304c:	3310      	adds	r3, #16
 800304e:	4618      	mov	r0, r3
 8003050:	f001 f866 	bl	8004120 <xTaskRemoveFromEventList>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d007      	beq.n	800306a <xQueueReceive+0xd6>
 800305a:	4b3d      	ldr	r3, [pc, #244]	; (8003150 <xQueueReceive+0x1bc>)
 800305c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	f3bf 8f4f 	dsb	sy
 8003066:	f3bf 8f6f 	isb	sy
 800306a:	f002 f8a3 	bl	80051b4 <vPortExitCritical>
 800306e:	2301      	movs	r3, #1
 8003070:	e069      	b.n	8003146 <xQueueReceive+0x1b2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d103      	bne.n	8003080 <xQueueReceive+0xec>
 8003078:	f002 f89c 	bl	80051b4 <vPortExitCritical>
 800307c:	2300      	movs	r3, #0
 800307e:	e062      	b.n	8003146 <xQueueReceive+0x1b2>
 8003080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003082:	2b00      	cmp	r3, #0
 8003084:	d106      	bne.n	8003094 <xQueueReceive+0x100>
 8003086:	f107 0310 	add.w	r3, r7, #16
 800308a:	4618      	mov	r0, r3
 800308c:	f001 f8ac 	bl	80041e8 <vTaskInternalSetTimeOutState>
 8003090:	2301      	movs	r3, #1
 8003092:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003094:	f002 f88e 	bl	80051b4 <vPortExitCritical>
 8003098:	f000 fe18 	bl	8003ccc <vTaskSuspendAll>
 800309c:	f002 f85a 	bl	8005154 <vPortEnterCritical>
 80030a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030a6:	b25b      	sxtb	r3, r3
 80030a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ac:	d103      	bne.n	80030b6 <xQueueReceive+0x122>
 80030ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030bc:	b25b      	sxtb	r3, r3
 80030be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c2:	d103      	bne.n	80030cc <xQueueReceive+0x138>
 80030c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030cc:	f002 f872 	bl	80051b4 <vPortExitCritical>
 80030d0:	1d3a      	adds	r2, r7, #4
 80030d2:	f107 0310 	add.w	r3, r7, #16
 80030d6:	4611      	mov	r1, r2
 80030d8:	4618      	mov	r0, r3
 80030da:	f001 f89b 	bl	8004214 <xTaskCheckForTimeOut>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d123      	bne.n	800312c <xQueueReceive+0x198>
 80030e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030e6:	f000 fade 	bl	80036a6 <prvIsQueueEmpty>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d017      	beq.n	8003120 <xQueueReceive+0x18c>
 80030f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f2:	3324      	adds	r3, #36	; 0x24
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	4611      	mov	r1, r2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 ffc1 	bl	8004080 <vTaskPlaceOnEventList>
 80030fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003100:	f000 fa7f 	bl	8003602 <prvUnlockQueue>
 8003104:	f000 fdf0 	bl	8003ce8 <xTaskResumeAll>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d189      	bne.n	8003022 <xQueueReceive+0x8e>
 800310e:	4b10      	ldr	r3, [pc, #64]	; (8003150 <xQueueReceive+0x1bc>)
 8003110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	f3bf 8f4f 	dsb	sy
 800311a:	f3bf 8f6f 	isb	sy
 800311e:	e780      	b.n	8003022 <xQueueReceive+0x8e>
 8003120:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003122:	f000 fa6e 	bl	8003602 <prvUnlockQueue>
 8003126:	f000 fddf 	bl	8003ce8 <xTaskResumeAll>
 800312a:	e77a      	b.n	8003022 <xQueueReceive+0x8e>
 800312c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800312e:	f000 fa68 	bl	8003602 <prvUnlockQueue>
 8003132:	f000 fdd9 	bl	8003ce8 <xTaskResumeAll>
 8003136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003138:	f000 fab5 	bl	80036a6 <prvIsQueueEmpty>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	f43f af6f 	beq.w	8003022 <xQueueReceive+0x8e>
 8003144:	2300      	movs	r3, #0
 8003146:	4618      	mov	r0, r3
 8003148:	3730      	adds	r7, #48	; 0x30
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	e000ed04 	.word	0xe000ed04

08003154 <xQueueSemaphoreTake>:
 8003154:	b580      	push	{r7, lr}
 8003156:	b08e      	sub	sp, #56	; 0x38
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
 800315e:	2300      	movs	r3, #0
 8003160:	637b      	str	r3, [r7, #52]	; 0x34
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003166:	2300      	movs	r3, #0
 8003168:	633b      	str	r3, [r7, #48]	; 0x30
 800316a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10a      	bne.n	8003186 <xQueueSemaphoreTake+0x32>
 8003170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003174:	f383 8811 	msr	BASEPRI, r3
 8003178:	f3bf 8f6f 	isb	sy
 800317c:	f3bf 8f4f 	dsb	sy
 8003180:	623b      	str	r3, [r7, #32]
 8003182:	bf00      	nop
 8003184:	e7fe      	b.n	8003184 <xQueueSemaphoreTake+0x30>
 8003186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00a      	beq.n	80031a4 <xQueueSemaphoreTake+0x50>
 800318e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003192:	f383 8811 	msr	BASEPRI, r3
 8003196:	f3bf 8f6f 	isb	sy
 800319a:	f3bf 8f4f 	dsb	sy
 800319e:	61fb      	str	r3, [r7, #28]
 80031a0:	bf00      	nop
 80031a2:	e7fe      	b.n	80031a2 <xQueueSemaphoreTake+0x4e>
 80031a4:	f001 f97e 	bl	80044a4 <xTaskGetSchedulerState>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d102      	bne.n	80031b4 <xQueueSemaphoreTake+0x60>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <xQueueSemaphoreTake+0x64>
 80031b4:	2301      	movs	r3, #1
 80031b6:	e000      	b.n	80031ba <xQueueSemaphoreTake+0x66>
 80031b8:	2300      	movs	r3, #0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10a      	bne.n	80031d4 <xQueueSemaphoreTake+0x80>
 80031be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c2:	f383 8811 	msr	BASEPRI, r3
 80031c6:	f3bf 8f6f 	isb	sy
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	61bb      	str	r3, [r7, #24]
 80031d0:	bf00      	nop
 80031d2:	e7fe      	b.n	80031d2 <xQueueSemaphoreTake+0x7e>
 80031d4:	f001 ffbe 	bl	8005154 <vPortEnterCritical>
 80031d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80031de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d024      	beq.n	800322e <xQueueSemaphoreTake+0xda>
 80031e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e6:	1e5a      	subs	r2, r3, #1
 80031e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ea:	639a      	str	r2, [r3, #56]	; 0x38
 80031ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d104      	bne.n	80031fe <xQueueSemaphoreTake+0xaa>
 80031f4:	f001 facc 	bl	8004790 <pvTaskIncrementMutexHeldCount>
 80031f8:	4602      	mov	r2, r0
 80031fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fc:	609a      	str	r2, [r3, #8]
 80031fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00f      	beq.n	8003226 <xQueueSemaphoreTake+0xd2>
 8003206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003208:	3310      	adds	r3, #16
 800320a:	4618      	mov	r0, r3
 800320c:	f000 ff88 	bl	8004120 <xTaskRemoveFromEventList>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d007      	beq.n	8003226 <xQueueSemaphoreTake+0xd2>
 8003216:	4b54      	ldr	r3, [pc, #336]	; (8003368 <xQueueSemaphoreTake+0x214>)
 8003218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	f3bf 8f4f 	dsb	sy
 8003222:	f3bf 8f6f 	isb	sy
 8003226:	f001 ffc5 	bl	80051b4 <vPortExitCritical>
 800322a:	2301      	movs	r3, #1
 800322c:	e097      	b.n	800335e <xQueueSemaphoreTake+0x20a>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d111      	bne.n	8003258 <xQueueSemaphoreTake+0x104>
 8003234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00a      	beq.n	8003250 <xQueueSemaphoreTake+0xfc>
 800323a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323e:	f383 8811 	msr	BASEPRI, r3
 8003242:	f3bf 8f6f 	isb	sy
 8003246:	f3bf 8f4f 	dsb	sy
 800324a:	617b      	str	r3, [r7, #20]
 800324c:	bf00      	nop
 800324e:	e7fe      	b.n	800324e <xQueueSemaphoreTake+0xfa>
 8003250:	f001 ffb0 	bl	80051b4 <vPortExitCritical>
 8003254:	2300      	movs	r3, #0
 8003256:	e082      	b.n	800335e <xQueueSemaphoreTake+0x20a>
 8003258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800325a:	2b00      	cmp	r3, #0
 800325c:	d106      	bne.n	800326c <xQueueSemaphoreTake+0x118>
 800325e:	f107 030c 	add.w	r3, r7, #12
 8003262:	4618      	mov	r0, r3
 8003264:	f000 ffc0 	bl	80041e8 <vTaskInternalSetTimeOutState>
 8003268:	2301      	movs	r3, #1
 800326a:	637b      	str	r3, [r7, #52]	; 0x34
 800326c:	f001 ffa2 	bl	80051b4 <vPortExitCritical>
 8003270:	f000 fd2c 	bl	8003ccc <vTaskSuspendAll>
 8003274:	f001 ff6e 	bl	8005154 <vPortEnterCritical>
 8003278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800327e:	b25b      	sxtb	r3, r3
 8003280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003284:	d103      	bne.n	800328e <xQueueSemaphoreTake+0x13a>
 8003286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800328e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003290:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003294:	b25b      	sxtb	r3, r3
 8003296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800329a:	d103      	bne.n	80032a4 <xQueueSemaphoreTake+0x150>
 800329c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032a4:	f001 ff86 	bl	80051b4 <vPortExitCritical>
 80032a8:	463a      	mov	r2, r7
 80032aa:	f107 030c 	add.w	r3, r7, #12
 80032ae:	4611      	mov	r1, r2
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 ffaf 	bl	8004214 <xTaskCheckForTimeOut>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d132      	bne.n	8003322 <xQueueSemaphoreTake+0x1ce>
 80032bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032be:	f000 f9f2 	bl	80036a6 <prvIsQueueEmpty>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d026      	beq.n	8003316 <xQueueSemaphoreTake+0x1c2>
 80032c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d109      	bne.n	80032e4 <xQueueSemaphoreTake+0x190>
 80032d0:	f001 ff40 	bl	8005154 <vPortEnterCritical>
 80032d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	4618      	mov	r0, r3
 80032da:	f001 f901 	bl	80044e0 <xTaskPriorityInherit>
 80032de:	6338      	str	r0, [r7, #48]	; 0x30
 80032e0:	f001 ff68 	bl	80051b4 <vPortExitCritical>
 80032e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e6:	3324      	adds	r3, #36	; 0x24
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	4611      	mov	r1, r2
 80032ec:	4618      	mov	r0, r3
 80032ee:	f000 fec7 	bl	8004080 <vTaskPlaceOnEventList>
 80032f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032f4:	f000 f985 	bl	8003602 <prvUnlockQueue>
 80032f8:	f000 fcf6 	bl	8003ce8 <xTaskResumeAll>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f47f af68 	bne.w	80031d4 <xQueueSemaphoreTake+0x80>
 8003304:	4b18      	ldr	r3, [pc, #96]	; (8003368 <xQueueSemaphoreTake+0x214>)
 8003306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	f3bf 8f6f 	isb	sy
 8003314:	e75e      	b.n	80031d4 <xQueueSemaphoreTake+0x80>
 8003316:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003318:	f000 f973 	bl	8003602 <prvUnlockQueue>
 800331c:	f000 fce4 	bl	8003ce8 <xTaskResumeAll>
 8003320:	e758      	b.n	80031d4 <xQueueSemaphoreTake+0x80>
 8003322:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003324:	f000 f96d 	bl	8003602 <prvUnlockQueue>
 8003328:	f000 fcde 	bl	8003ce8 <xTaskResumeAll>
 800332c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800332e:	f000 f9ba 	bl	80036a6 <prvIsQueueEmpty>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	f43f af4d 	beq.w	80031d4 <xQueueSemaphoreTake+0x80>
 800333a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00d      	beq.n	800335c <xQueueSemaphoreTake+0x208>
 8003340:	f001 ff08 	bl	8005154 <vPortEnterCritical>
 8003344:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003346:	f000 f8b4 	bl	80034b2 <prvGetDisinheritPriorityAfterTimeout>
 800334a:	6278      	str	r0, [r7, #36]	; 0x24
 800334c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003352:	4618      	mov	r0, r3
 8003354:	f001 f99a 	bl	800468c <vTaskPriorityDisinheritAfterTimeout>
 8003358:	f001 ff2c 	bl	80051b4 <vPortExitCritical>
 800335c:	2300      	movs	r3, #0
 800335e:	4618      	mov	r0, r3
 8003360:	3738      	adds	r7, #56	; 0x38
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	e000ed04 	.word	0xe000ed04

0800336c <xQueueReceiveFromISR>:
 800336c:	b580      	push	{r7, lr}
 800336e:	b08e      	sub	sp, #56	; 0x38
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	633b      	str	r3, [r7, #48]	; 0x30
 800337c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10a      	bne.n	8003398 <xQueueReceiveFromISR+0x2c>
 8003382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003386:	f383 8811 	msr	BASEPRI, r3
 800338a:	f3bf 8f6f 	isb	sy
 800338e:	f3bf 8f4f 	dsb	sy
 8003392:	623b      	str	r3, [r7, #32]
 8003394:	bf00      	nop
 8003396:	e7fe      	b.n	8003396 <xQueueReceiveFromISR+0x2a>
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d103      	bne.n	80033a6 <xQueueReceiveFromISR+0x3a>
 800339e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <xQueueReceiveFromISR+0x3e>
 80033a6:	2301      	movs	r3, #1
 80033a8:	e000      	b.n	80033ac <xQueueReceiveFromISR+0x40>
 80033aa:	2300      	movs	r3, #0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10a      	bne.n	80033c6 <xQueueReceiveFromISR+0x5a>
 80033b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b4:	f383 8811 	msr	BASEPRI, r3
 80033b8:	f3bf 8f6f 	isb	sy
 80033bc:	f3bf 8f4f 	dsb	sy
 80033c0:	61fb      	str	r3, [r7, #28]
 80033c2:	bf00      	nop
 80033c4:	e7fe      	b.n	80033c4 <xQueueReceiveFromISR+0x58>
 80033c6:	f001 ffa7 	bl	8005318 <vPortValidateInterruptPriority>
 80033ca:	f3ef 8211 	mrs	r2, BASEPRI
 80033ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d2:	f383 8811 	msr	BASEPRI, r3
 80033d6:	f3bf 8f6f 	isb	sy
 80033da:	f3bf 8f4f 	dsb	sy
 80033de:	61ba      	str	r2, [r7, #24]
 80033e0:	617b      	str	r3, [r7, #20]
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d02f      	beq.n	8003452 <xQueueReceiveFromISR+0xe6>
 80033f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80033fc:	68b9      	ldr	r1, [r7, #8]
 80033fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003400:	f000 f8d9 	bl	80035b6 <prvCopyDataFromQueue>
 8003404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003406:	1e5a      	subs	r2, r3, #1
 8003408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340a:	639a      	str	r2, [r3, #56]	; 0x38
 800340c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003414:	d112      	bne.n	800343c <xQueueReceiveFromISR+0xd0>
 8003416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d016      	beq.n	800344c <xQueueReceiveFromISR+0xe0>
 800341e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003420:	3310      	adds	r3, #16
 8003422:	4618      	mov	r0, r3
 8003424:	f000 fe7c 	bl	8004120 <xTaskRemoveFromEventList>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00e      	beq.n	800344c <xQueueReceiveFromISR+0xe0>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00b      	beq.n	800344c <xQueueReceiveFromISR+0xe0>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	e007      	b.n	800344c <xQueueReceiveFromISR+0xe0>
 800343c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003440:	3301      	adds	r3, #1
 8003442:	b2db      	uxtb	r3, r3
 8003444:	b25a      	sxtb	r2, r3
 8003446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800344c:	2301      	movs	r3, #1
 800344e:	637b      	str	r3, [r7, #52]	; 0x34
 8003450:	e001      	b.n	8003456 <xQueueReceiveFromISR+0xea>
 8003452:	2300      	movs	r3, #0
 8003454:	637b      	str	r3, [r7, #52]	; 0x34
 8003456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f383 8811 	msr	BASEPRI, r3
 8003460:	bf00      	nop
 8003462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003464:	4618      	mov	r0, r3
 8003466:	3738      	adds	r7, #56	; 0x38
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <vQueueDelete>:
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10a      	bne.n	8003494 <vQueueDelete+0x28>
 800347e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003482:	f383 8811 	msr	BASEPRI, r3
 8003486:	f3bf 8f6f 	isb	sy
 800348a:	f3bf 8f4f 	dsb	sy
 800348e:	60bb      	str	r3, [r7, #8]
 8003490:	bf00      	nop
 8003492:	e7fe      	b.n	8003492 <vQueueDelete+0x26>
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 f95f 	bl	8003758 <vQueueUnregisterQueue>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d102      	bne.n	80034aa <vQueueDelete+0x3e>
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f002 f843 	bl	8005530 <vPortFree>
 80034aa:	bf00      	nop
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <prvGetDisinheritPriorityAfterTimeout>:
 80034b2:	b480      	push	{r7}
 80034b4:	b085      	sub	sp, #20
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d006      	beq.n	80034d0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	e001      	b.n	80034d4 <prvGetDisinheritPriorityAfterTimeout+0x22>
 80034d0:	2300      	movs	r3, #0
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4618      	mov	r0, r3
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <prvCopyDataToQueue>:
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b086      	sub	sp, #24
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	60f8      	str	r0, [r7, #12]
 80034ea:	60b9      	str	r1, [r7, #8]
 80034ec:	607a      	str	r2, [r7, #4]
 80034ee:	2300      	movs	r3, #0
 80034f0:	617b      	str	r3, [r7, #20]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f6:	613b      	str	r3, [r7, #16]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10d      	bne.n	800351c <prvCopyDataToQueue+0x3a>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d14d      	bne.n	80035a4 <prvCopyDataToQueue+0xc2>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	4618      	mov	r0, r3
 800350e:	f001 f84f 	bl	80045b0 <xTaskPriorityDisinherit>
 8003512:	6178      	str	r0, [r7, #20]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	609a      	str	r2, [r3, #8]
 800351a:	e043      	b.n	80035a4 <prvCopyDataToQueue+0xc2>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d119      	bne.n	8003556 <prvCopyDataToQueue+0x74>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6858      	ldr	r0, [r3, #4]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	461a      	mov	r2, r3
 800352c:	68b9      	ldr	r1, [r7, #8]
 800352e:	f002 fbf6 	bl	8005d1e <memcpy>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	441a      	add	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	605a      	str	r2, [r3, #4]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	429a      	cmp	r2, r3
 800354a:	d32b      	bcc.n	80035a4 <prvCopyDataToQueue+0xc2>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	605a      	str	r2, [r3, #4]
 8003554:	e026      	b.n	80035a4 <prvCopyDataToQueue+0xc2>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	68d8      	ldr	r0, [r3, #12]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	461a      	mov	r2, r3
 8003560:	68b9      	ldr	r1, [r7, #8]
 8003562:	f002 fbdc 	bl	8005d1e <memcpy>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	68da      	ldr	r2, [r3, #12]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	425b      	negs	r3, r3
 8003570:	441a      	add	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	60da      	str	r2, [r3, #12]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d207      	bcs.n	8003592 <prvCopyDataToQueue+0xb0>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	425b      	negs	r3, r3
 800358c:	441a      	add	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	60da      	str	r2, [r3, #12]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b02      	cmp	r3, #2
 8003596:	d105      	bne.n	80035a4 <prvCopyDataToQueue+0xc2>
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <prvCopyDataToQueue+0xc2>
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	3b01      	subs	r3, #1
 80035a2:	613b      	str	r3, [r7, #16]
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	639a      	str	r2, [r3, #56]	; 0x38
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	4618      	mov	r0, r3
 80035b0:	3718      	adds	r7, #24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <prvCopyDataFromQueue>:
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b082      	sub	sp, #8
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
 80035be:	6039      	str	r1, [r7, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d018      	beq.n	80035fa <prvCopyDataFromQueue+0x44>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	441a      	add	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	60da      	str	r2, [r3, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d303      	bcc.n	80035ea <prvCopyDataFromQueue+0x34>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	60da      	str	r2, [r3, #12]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68d9      	ldr	r1, [r3, #12]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	461a      	mov	r2, r3
 80035f4:	6838      	ldr	r0, [r7, #0]
 80035f6:	f002 fb92 	bl	8005d1e <memcpy>
 80035fa:	bf00      	nop
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <prvUnlockQueue>:
 8003602:	b580      	push	{r7, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	f001 fda3 	bl	8005154 <vPortEnterCritical>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003614:	73fb      	strb	r3, [r7, #15]
 8003616:	e011      	b.n	800363c <prvUnlockQueue+0x3a>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	2b00      	cmp	r3, #0
 800361e:	d012      	beq.n	8003646 <prvUnlockQueue+0x44>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3324      	adds	r3, #36	; 0x24
 8003624:	4618      	mov	r0, r3
 8003626:	f000 fd7b 	bl	8004120 <xTaskRemoveFromEventList>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <prvUnlockQueue+0x32>
 8003630:	f000 fe52 	bl	80042d8 <vTaskMissedYield>
 8003634:	7bfb      	ldrb	r3, [r7, #15]
 8003636:	3b01      	subs	r3, #1
 8003638:	b2db      	uxtb	r3, r3
 800363a:	73fb      	strb	r3, [r7, #15]
 800363c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003640:	2b00      	cmp	r3, #0
 8003642:	dce9      	bgt.n	8003618 <prvUnlockQueue+0x16>
 8003644:	e000      	b.n	8003648 <prvUnlockQueue+0x46>
 8003646:	bf00      	nop
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	22ff      	movs	r2, #255	; 0xff
 800364c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003650:	f001 fdb0 	bl	80051b4 <vPortExitCritical>
 8003654:	f001 fd7e 	bl	8005154 <vPortEnterCritical>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800365e:	73bb      	strb	r3, [r7, #14]
 8003660:	e011      	b.n	8003686 <prvUnlockQueue+0x84>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d012      	beq.n	8003690 <prvUnlockQueue+0x8e>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	3310      	adds	r3, #16
 800366e:	4618      	mov	r0, r3
 8003670:	f000 fd56 	bl	8004120 <xTaskRemoveFromEventList>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <prvUnlockQueue+0x7c>
 800367a:	f000 fe2d 	bl	80042d8 <vTaskMissedYield>
 800367e:	7bbb      	ldrb	r3, [r7, #14]
 8003680:	3b01      	subs	r3, #1
 8003682:	b2db      	uxtb	r3, r3
 8003684:	73bb      	strb	r3, [r7, #14]
 8003686:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800368a:	2b00      	cmp	r3, #0
 800368c:	dce9      	bgt.n	8003662 <prvUnlockQueue+0x60>
 800368e:	e000      	b.n	8003692 <prvUnlockQueue+0x90>
 8003690:	bf00      	nop
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	22ff      	movs	r2, #255	; 0xff
 8003696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800369a:	f001 fd8b 	bl	80051b4 <vPortExitCritical>
 800369e:	bf00      	nop
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <prvIsQueueEmpty>:
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b084      	sub	sp, #16
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
 80036ae:	f001 fd51 	bl	8005154 <vPortEnterCritical>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d102      	bne.n	80036c0 <prvIsQueueEmpty+0x1a>
 80036ba:	2301      	movs	r3, #1
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	e001      	b.n	80036c4 <prvIsQueueEmpty+0x1e>
 80036c0:	2300      	movs	r3, #0
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	f001 fd76 	bl	80051b4 <vPortExitCritical>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <prvIsQueueFull>:
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b084      	sub	sp, #16
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
 80036da:	f001 fd3b 	bl	8005154 <vPortEnterCritical>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d102      	bne.n	80036f0 <prvIsQueueFull+0x1e>
 80036ea:	2301      	movs	r3, #1
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	e001      	b.n	80036f4 <prvIsQueueFull+0x22>
 80036f0:	2300      	movs	r3, #0
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	f001 fd5e 	bl	80051b4 <vPortExitCritical>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
	...

08003704 <vQueueAddToRegistry>:
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
 800370e:	2300      	movs	r3, #0
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	e014      	b.n	800373e <vQueueAddToRegistry+0x3a>
 8003714:	4a0f      	ldr	r2, [pc, #60]	; (8003754 <vQueueAddToRegistry+0x50>)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10b      	bne.n	8003738 <vQueueAddToRegistry+0x34>
 8003720:	490c      	ldr	r1, [pc, #48]	; (8003754 <vQueueAddToRegistry+0x50>)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800372a:	4a0a      	ldr	r2, [pc, #40]	; (8003754 <vQueueAddToRegistry+0x50>)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	4413      	add	r3, r2
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	605a      	str	r2, [r3, #4]
 8003736:	e006      	b.n	8003746 <vQueueAddToRegistry+0x42>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	3301      	adds	r3, #1
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2b07      	cmp	r3, #7
 8003742:	d9e7      	bls.n	8003714 <vQueueAddToRegistry+0x10>
 8003744:	bf00      	nop
 8003746:	bf00      	nop
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	20000838 	.word	0x20000838

08003758 <vQueueUnregisterQueue>:
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	e016      	b.n	8003794 <vQueueUnregisterQueue+0x3c>
 8003766:	4a10      	ldr	r2, [pc, #64]	; (80037a8 <vQueueUnregisterQueue+0x50>)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	4413      	add	r3, r2
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	429a      	cmp	r2, r3
 8003774:	d10b      	bne.n	800378e <vQueueUnregisterQueue+0x36>
 8003776:	4a0c      	ldr	r2, [pc, #48]	; (80037a8 <vQueueUnregisterQueue+0x50>)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2100      	movs	r1, #0
 800377c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8003780:	4a09      	ldr	r2, [pc, #36]	; (80037a8 <vQueueUnregisterQueue+0x50>)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	4413      	add	r3, r2
 8003788:	2200      	movs	r2, #0
 800378a:	605a      	str	r2, [r3, #4]
 800378c:	e006      	b.n	800379c <vQueueUnregisterQueue+0x44>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	3301      	adds	r3, #1
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2b07      	cmp	r3, #7
 8003798:	d9e5      	bls.n	8003766 <vQueueUnregisterQueue+0xe>
 800379a:	bf00      	nop
 800379c:	bf00      	nop
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	20000838 	.word	0x20000838

080037ac <vQueueWaitForMessageRestricted>:
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	f001 fcca 	bl	8005154 <vPortEnterCritical>
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037c6:	b25b      	sxtb	r3, r3
 80037c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037cc:	d103      	bne.n	80037d6 <vQueueWaitForMessageRestricted+0x2a>
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037dc:	b25b      	sxtb	r3, r3
 80037de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e2:	d103      	bne.n	80037ec <vQueueWaitForMessageRestricted+0x40>
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037ec:	f001 fce2 	bl	80051b4 <vPortExitCritical>
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d106      	bne.n	8003806 <vQueueWaitForMessageRestricted+0x5a>
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	3324      	adds	r3, #36	; 0x24
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	68b9      	ldr	r1, [r7, #8]
 8003800:	4618      	mov	r0, r3
 8003802:	f000 fc61 	bl	80040c8 <vTaskPlaceOnEventListRestricted>
 8003806:	6978      	ldr	r0, [r7, #20]
 8003808:	f7ff fefb 	bl	8003602 <prvUnlockQueue>
 800380c:	bf00      	nop
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <xTaskCreateStatic>:
 8003814:	b580      	push	{r7, lr}
 8003816:	b08e      	sub	sp, #56	; 0x38
 8003818:	af04      	add	r7, sp, #16
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
 8003820:	603b      	str	r3, [r7, #0]
 8003822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10a      	bne.n	800383e <xTaskCreateStatic+0x2a>
 8003828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382c:	f383 8811 	msr	BASEPRI, r3
 8003830:	f3bf 8f6f 	isb	sy
 8003834:	f3bf 8f4f 	dsb	sy
 8003838:	623b      	str	r3, [r7, #32]
 800383a:	bf00      	nop
 800383c:	e7fe      	b.n	800383c <xTaskCreateStatic+0x28>
 800383e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10a      	bne.n	800385a <xTaskCreateStatic+0x46>
 8003844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003848:	f383 8811 	msr	BASEPRI, r3
 800384c:	f3bf 8f6f 	isb	sy
 8003850:	f3bf 8f4f 	dsb	sy
 8003854:	61fb      	str	r3, [r7, #28]
 8003856:	bf00      	nop
 8003858:	e7fe      	b.n	8003858 <xTaskCreateStatic+0x44>
 800385a:	23a8      	movs	r3, #168	; 0xa8
 800385c:	613b      	str	r3, [r7, #16]
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	2ba8      	cmp	r3, #168	; 0xa8
 8003862:	d00a      	beq.n	800387a <xTaskCreateStatic+0x66>
 8003864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003868:	f383 8811 	msr	BASEPRI, r3
 800386c:	f3bf 8f6f 	isb	sy
 8003870:	f3bf 8f4f 	dsb	sy
 8003874:	61bb      	str	r3, [r7, #24]
 8003876:	bf00      	nop
 8003878:	e7fe      	b.n	8003878 <xTaskCreateStatic+0x64>
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387e:	2b00      	cmp	r3, #0
 8003880:	d01e      	beq.n	80038c0 <xTaskCreateStatic+0xac>
 8003882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003884:	2b00      	cmp	r3, #0
 8003886:	d01b      	beq.n	80038c0 <xTaskCreateStatic+0xac>
 8003888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388a:	627b      	str	r3, [r7, #36]	; 0x24
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003890:	631a      	str	r2, [r3, #48]	; 0x30
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	2202      	movs	r2, #2
 8003896:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 800389a:	2300      	movs	r3, #0
 800389c:	9303      	str	r3, [sp, #12]
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	9302      	str	r3, [sp, #8]
 80038a2:	f107 0314 	add.w	r3, r7, #20
 80038a6:	9301      	str	r3, [sp, #4]
 80038a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 f850 	bl	8003958 <prvInitialiseNewTask>
 80038b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038ba:	f000 f8f3 	bl	8003aa4 <prvAddNewTaskToReadyList>
 80038be:	e001      	b.n	80038c4 <xTaskCreateStatic+0xb0>
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	4618      	mov	r0, r3
 80038c8:	3728      	adds	r7, #40	; 0x28
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <xTaskCreate>:
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b08c      	sub	sp, #48	; 0x30
 80038d2:	af04      	add	r7, sp, #16
 80038d4:	60f8      	str	r0, [r7, #12]
 80038d6:	60b9      	str	r1, [r7, #8]
 80038d8:	603b      	str	r3, [r7, #0]
 80038da:	4613      	mov	r3, r2
 80038dc:	80fb      	strh	r3, [r7, #6]
 80038de:	88fb      	ldrh	r3, [r7, #6]
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4618      	mov	r0, r3
 80038e4:	f001 fd58 	bl	8005398 <pvPortMalloc>
 80038e8:	6178      	str	r0, [r7, #20]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00e      	beq.n	800390e <xTaskCreate+0x40>
 80038f0:	20a8      	movs	r0, #168	; 0xa8
 80038f2:	f001 fd51 	bl	8005398 <pvPortMalloc>
 80038f6:	61f8      	str	r0, [r7, #28]
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <xTaskCreate+0x38>
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	631a      	str	r2, [r3, #48]	; 0x30
 8003904:	e005      	b.n	8003912 <xTaskCreate+0x44>
 8003906:	6978      	ldr	r0, [r7, #20]
 8003908:	f001 fe12 	bl	8005530 <vPortFree>
 800390c:	e001      	b.n	8003912 <xTaskCreate+0x44>
 800390e:	2300      	movs	r3, #0
 8003910:	61fb      	str	r3, [r7, #28]
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d017      	beq.n	8003948 <xTaskCreate+0x7a>
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 8003920:	88fa      	ldrh	r2, [r7, #6]
 8003922:	2300      	movs	r3, #0
 8003924:	9303      	str	r3, [sp, #12]
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	9302      	str	r3, [sp, #8]
 800392a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392c:	9301      	str	r3, [sp, #4]
 800392e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68b9      	ldr	r1, [r7, #8]
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 f80e 	bl	8003958 <prvInitialiseNewTask>
 800393c:	69f8      	ldr	r0, [r7, #28]
 800393e:	f000 f8b1 	bl	8003aa4 <prvAddNewTaskToReadyList>
 8003942:	2301      	movs	r3, #1
 8003944:	61bb      	str	r3, [r7, #24]
 8003946:	e002      	b.n	800394e <xTaskCreate+0x80>
 8003948:	f04f 33ff 	mov.w	r3, #4294967295
 800394c:	61bb      	str	r3, [r7, #24]
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	4618      	mov	r0, r3
 8003952:	3720      	adds	r7, #32
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <prvInitialiseNewTask>:
 8003958:	b580      	push	{r7, lr}
 800395a:	b088      	sub	sp, #32
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	603b      	str	r3, [r7, #0]
 8003966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003968:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	461a      	mov	r2, r3
 8003970:	21a5      	movs	r1, #165	; 0xa5
 8003972:	f002 f903 	bl	8005b7c <memset>
 8003976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003978:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003980:	3b01      	subs	r3, #1
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	f023 0307 	bic.w	r3, r3, #7
 800398e:	61bb      	str	r3, [r7, #24]
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <prvInitialiseNewTask+0x58>
 800399a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399e:	f383 8811 	msr	BASEPRI, r3
 80039a2:	f3bf 8f6f 	isb	sy
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	617b      	str	r3, [r7, #20]
 80039ac:	bf00      	nop
 80039ae:	e7fe      	b.n	80039ae <prvInitialiseNewTask+0x56>
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d01f      	beq.n	80039f6 <prvInitialiseNewTask+0x9e>
 80039b6:	2300      	movs	r3, #0
 80039b8:	61fb      	str	r3, [r7, #28]
 80039ba:	e012      	b.n	80039e2 <prvInitialiseNewTask+0x8a>
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	4413      	add	r3, r2
 80039c2:	7819      	ldrb	r1, [r3, #0]
 80039c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	4413      	add	r3, r2
 80039ca:	3334      	adds	r3, #52	; 0x34
 80039cc:	460a      	mov	r2, r1
 80039ce:	701a      	strb	r2, [r3, #0]
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	4413      	add	r3, r2
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d006      	beq.n	80039ea <prvInitialiseNewTask+0x92>
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	3301      	adds	r3, #1
 80039e0:	61fb      	str	r3, [r7, #28]
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	2b0f      	cmp	r3, #15
 80039e6:	d9e9      	bls.n	80039bc <prvInitialiseNewTask+0x64>
 80039e8:	e000      	b.n	80039ec <prvInitialiseNewTask+0x94>
 80039ea:	bf00      	nop
 80039ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039f4:	e003      	b.n	80039fe <prvInitialiseNewTask+0xa6>
 80039f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80039fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a00:	2b37      	cmp	r3, #55	; 0x37
 8003a02:	d901      	bls.n	8003a08 <prvInitialiseNewTask+0xb0>
 8003a04:	2337      	movs	r3, #55	; 0x37
 8003a06:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a12:	64da      	str	r2, [r3, #76]	; 0x4c
 8003a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a16:	2200      	movs	r2, #0
 8003a18:	651a      	str	r2, [r3, #80]	; 0x50
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fe fe56 	bl	80026d0 <vListInitialiseItem>
 8003a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a26:	3318      	adds	r3, #24
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fe fe51 	bl	80026d0 <vListInitialiseItem>
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a32:	611a      	str	r2, [r3, #16]
 8003a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3c:	619a      	str	r2, [r3, #24]
 8003a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a42:	625a      	str	r2, [r3, #36]	; 0x24
 8003a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a46:	2200      	movs	r2, #0
 8003a48:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8003a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 8003a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a56:	3354      	adds	r3, #84	; 0x54
 8003a58:	224c      	movs	r2, #76	; 0x4c
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f002 f88d 	bl	8005b7c <memset>
 8003a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a64:	4a0c      	ldr	r2, [pc, #48]	; (8003a98 <prvInitialiseNewTask+0x140>)
 8003a66:	659a      	str	r2, [r3, #88]	; 0x58
 8003a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6a:	4a0c      	ldr	r2, [pc, #48]	; (8003a9c <prvInitialiseNewTask+0x144>)
 8003a6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a70:	4a0b      	ldr	r2, [pc, #44]	; (8003aa0 <prvInitialiseNewTask+0x148>)
 8003a72:	661a      	str	r2, [r3, #96]	; 0x60
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	68f9      	ldr	r1, [r7, #12]
 8003a78:	69b8      	ldr	r0, [r7, #24]
 8003a7a:	f001 fa3f 	bl	8004efc <pxPortInitialiseStack>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d002      	beq.n	8003a90 <prvInitialiseNewTask+0x138>
 8003a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	bf00      	nop
 8003a92:	3720      	adds	r7, #32
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	20004acc 	.word	0x20004acc
 8003a9c:	20004b34 	.word	0x20004b34
 8003aa0:	20004b9c 	.word	0x20004b9c

08003aa4 <prvAddNewTaskToReadyList>:
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	f001 fb52 	bl	8005154 <vPortEnterCritical>
 8003ab0:	4b2d      	ldr	r3, [pc, #180]	; (8003b68 <prvAddNewTaskToReadyList+0xc4>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	4a2c      	ldr	r2, [pc, #176]	; (8003b68 <prvAddNewTaskToReadyList+0xc4>)
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	4b2c      	ldr	r3, [pc, #176]	; (8003b6c <prvAddNewTaskToReadyList+0xc8>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d109      	bne.n	8003ad6 <prvAddNewTaskToReadyList+0x32>
 8003ac2:	4a2a      	ldr	r2, [pc, #168]	; (8003b6c <prvAddNewTaskToReadyList+0xc8>)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	4b27      	ldr	r3, [pc, #156]	; (8003b68 <prvAddNewTaskToReadyList+0xc4>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d110      	bne.n	8003af2 <prvAddNewTaskToReadyList+0x4e>
 8003ad0:	f000 fc26 	bl	8004320 <prvInitialiseTaskLists>
 8003ad4:	e00d      	b.n	8003af2 <prvAddNewTaskToReadyList+0x4e>
 8003ad6:	4b26      	ldr	r3, [pc, #152]	; (8003b70 <prvAddNewTaskToReadyList+0xcc>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d109      	bne.n	8003af2 <prvAddNewTaskToReadyList+0x4e>
 8003ade:	4b23      	ldr	r3, [pc, #140]	; (8003b6c <prvAddNewTaskToReadyList+0xc8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d802      	bhi.n	8003af2 <prvAddNewTaskToReadyList+0x4e>
 8003aec:	4a1f      	ldr	r2, [pc, #124]	; (8003b6c <prvAddNewTaskToReadyList+0xc8>)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	4b20      	ldr	r3, [pc, #128]	; (8003b74 <prvAddNewTaskToReadyList+0xd0>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3301      	adds	r3, #1
 8003af8:	4a1e      	ldr	r2, [pc, #120]	; (8003b74 <prvAddNewTaskToReadyList+0xd0>)
 8003afa:	6013      	str	r3, [r2, #0]
 8003afc:	4b1d      	ldr	r3, [pc, #116]	; (8003b74 <prvAddNewTaskToReadyList+0xd0>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	645a      	str	r2, [r3, #68]	; 0x44
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b08:	4b1b      	ldr	r3, [pc, #108]	; (8003b78 <prvAddNewTaskToReadyList+0xd4>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d903      	bls.n	8003b18 <prvAddNewTaskToReadyList+0x74>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b14:	4a18      	ldr	r2, [pc, #96]	; (8003b78 <prvAddNewTaskToReadyList+0xd4>)
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4a15      	ldr	r2, [pc, #84]	; (8003b7c <prvAddNewTaskToReadyList+0xd8>)
 8003b26:	441a      	add	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4610      	mov	r0, r2
 8003b30:	f7fe fddb 	bl	80026ea <vListInsertEnd>
 8003b34:	f001 fb3e 	bl	80051b4 <vPortExitCritical>
 8003b38:	4b0d      	ldr	r3, [pc, #52]	; (8003b70 <prvAddNewTaskToReadyList+0xcc>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00e      	beq.n	8003b5e <prvAddNewTaskToReadyList+0xba>
 8003b40:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <prvAddNewTaskToReadyList+0xc8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d207      	bcs.n	8003b5e <prvAddNewTaskToReadyList+0xba>
 8003b4e:	4b0c      	ldr	r3, [pc, #48]	; (8003b80 <prvAddNewTaskToReadyList+0xdc>)
 8003b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	f3bf 8f4f 	dsb	sy
 8003b5a:	f3bf 8f6f 	isb	sy
 8003b5e:	bf00      	nop
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	20000d4c 	.word	0x20000d4c
 8003b6c:	20000878 	.word	0x20000878
 8003b70:	20000d58 	.word	0x20000d58
 8003b74:	20000d68 	.word	0x20000d68
 8003b78:	20000d54 	.word	0x20000d54
 8003b7c:	2000087c 	.word	0x2000087c
 8003b80:	e000ed04 	.word	0xe000ed04

08003b84 <vTaskDelay>:
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d017      	beq.n	8003bc6 <vTaskDelay+0x42>
 8003b96:	4b13      	ldr	r3, [pc, #76]	; (8003be4 <vTaskDelay+0x60>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00a      	beq.n	8003bb4 <vTaskDelay+0x30>
 8003b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba2:	f383 8811 	msr	BASEPRI, r3
 8003ba6:	f3bf 8f6f 	isb	sy
 8003baa:	f3bf 8f4f 	dsb	sy
 8003bae:	60bb      	str	r3, [r7, #8]
 8003bb0:	bf00      	nop
 8003bb2:	e7fe      	b.n	8003bb2 <vTaskDelay+0x2e>
 8003bb4:	f000 f88a 	bl	8003ccc <vTaskSuspendAll>
 8003bb8:	2100      	movs	r1, #0
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 fdfc 	bl	80047b8 <prvAddCurrentTaskToDelayedList>
 8003bc0:	f000 f892 	bl	8003ce8 <xTaskResumeAll>
 8003bc4:	60f8      	str	r0, [r7, #12]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d107      	bne.n	8003bdc <vTaskDelay+0x58>
 8003bcc:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <vTaskDelay+0x64>)
 8003bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	f3bf 8f4f 	dsb	sy
 8003bd8:	f3bf 8f6f 	isb	sy
 8003bdc:	bf00      	nop
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	20000d74 	.word	0x20000d74
 8003be8:	e000ed04 	.word	0xe000ed04

08003bec <vTaskStartScheduler>:
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08a      	sub	sp, #40	; 0x28
 8003bf0:	af04      	add	r7, sp, #16
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60bb      	str	r3, [r7, #8]
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	607b      	str	r3, [r7, #4]
 8003bfa:	463a      	mov	r2, r7
 8003bfc:	1d39      	adds	r1, r7, #4
 8003bfe:	f107 0308 	add.w	r3, r7, #8
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fe fd10 	bl	8002628 <vApplicationGetIdleTaskMemory>
 8003c08:	6839      	ldr	r1, [r7, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	9202      	str	r2, [sp, #8]
 8003c10:	9301      	str	r3, [sp, #4]
 8003c12:	2300      	movs	r3, #0
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	2300      	movs	r3, #0
 8003c18:	460a      	mov	r2, r1
 8003c1a:	4924      	ldr	r1, [pc, #144]	; (8003cac <vTaskStartScheduler+0xc0>)
 8003c1c:	4824      	ldr	r0, [pc, #144]	; (8003cb0 <vTaskStartScheduler+0xc4>)
 8003c1e:	f7ff fdf9 	bl	8003814 <xTaskCreateStatic>
 8003c22:	4603      	mov	r3, r0
 8003c24:	4a23      	ldr	r2, [pc, #140]	; (8003cb4 <vTaskStartScheduler+0xc8>)
 8003c26:	6013      	str	r3, [r2, #0]
 8003c28:	4b22      	ldr	r3, [pc, #136]	; (8003cb4 <vTaskStartScheduler+0xc8>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <vTaskStartScheduler+0x4a>
 8003c30:	2301      	movs	r3, #1
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	e001      	b.n	8003c3a <vTaskStartScheduler+0x4e>
 8003c36:	2300      	movs	r3, #0
 8003c38:	617b      	str	r3, [r7, #20]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d102      	bne.n	8003c46 <vTaskStartScheduler+0x5a>
 8003c40:	f000 fe0e 	bl	8004860 <xTimerCreateTimerTask>
 8003c44:	6178      	str	r0, [r7, #20]
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d11b      	bne.n	8003c84 <vTaskStartScheduler+0x98>
 8003c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c50:	f383 8811 	msr	BASEPRI, r3
 8003c54:	f3bf 8f6f 	isb	sy
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	613b      	str	r3, [r7, #16]
 8003c5e:	bf00      	nop
 8003c60:	4b15      	ldr	r3, [pc, #84]	; (8003cb8 <vTaskStartScheduler+0xcc>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	3354      	adds	r3, #84	; 0x54
 8003c66:	4a15      	ldr	r2, [pc, #84]	; (8003cbc <vTaskStartScheduler+0xd0>)
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	4b15      	ldr	r3, [pc, #84]	; (8003cc0 <vTaskStartScheduler+0xd4>)
 8003c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	4b14      	ldr	r3, [pc, #80]	; (8003cc4 <vTaskStartScheduler+0xd8>)
 8003c74:	2201      	movs	r2, #1
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	4b13      	ldr	r3, [pc, #76]	; (8003cc8 <vTaskStartScheduler+0xdc>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	f001 f9c7 	bl	8005010 <xPortStartScheduler>
 8003c82:	e00e      	b.n	8003ca2 <vTaskStartScheduler+0xb6>
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c8a:	d10a      	bne.n	8003ca2 <vTaskStartScheduler+0xb6>
 8003c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c90:	f383 8811 	msr	BASEPRI, r3
 8003c94:	f3bf 8f6f 	isb	sy
 8003c98:	f3bf 8f4f 	dsb	sy
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	bf00      	nop
 8003ca0:	e7fe      	b.n	8003ca0 <vTaskStartScheduler+0xb4>
 8003ca2:	bf00      	nop
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	080067c8 	.word	0x080067c8
 8003cb0:	080042f1 	.word	0x080042f1
 8003cb4:	20000d70 	.word	0x20000d70
 8003cb8:	20000878 	.word	0x20000878
 8003cbc:	20000068 	.word	0x20000068
 8003cc0:	20000d6c 	.word	0x20000d6c
 8003cc4:	20000d58 	.word	0x20000d58
 8003cc8:	20000d50 	.word	0x20000d50

08003ccc <vTaskSuspendAll>:
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	4b04      	ldr	r3, [pc, #16]	; (8003ce4 <vTaskSuspendAll+0x18>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	4a03      	ldr	r2, [pc, #12]	; (8003ce4 <vTaskSuspendAll+0x18>)
 8003cd8:	6013      	str	r3, [r2, #0]
 8003cda:	bf00      	nop
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	20000d74 	.word	0x20000d74

08003ce8 <xTaskResumeAll>:
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	4b42      	ldr	r3, [pc, #264]	; (8003e00 <xTaskResumeAll+0x118>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10a      	bne.n	8003d14 <xTaskResumeAll+0x2c>
 8003cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	bf00      	nop
 8003d12:	e7fe      	b.n	8003d12 <xTaskResumeAll+0x2a>
 8003d14:	f001 fa1e 	bl	8005154 <vPortEnterCritical>
 8003d18:	4b39      	ldr	r3, [pc, #228]	; (8003e00 <xTaskResumeAll+0x118>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	4a38      	ldr	r2, [pc, #224]	; (8003e00 <xTaskResumeAll+0x118>)
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	4b37      	ldr	r3, [pc, #220]	; (8003e00 <xTaskResumeAll+0x118>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d162      	bne.n	8003df0 <xTaskResumeAll+0x108>
 8003d2a:	4b36      	ldr	r3, [pc, #216]	; (8003e04 <xTaskResumeAll+0x11c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d05e      	beq.n	8003df0 <xTaskResumeAll+0x108>
 8003d32:	e02f      	b.n	8003d94 <xTaskResumeAll+0xac>
 8003d34:	4b34      	ldr	r3, [pc, #208]	; (8003e08 <xTaskResumeAll+0x120>)
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	3318      	adds	r3, #24
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7fe fd2f 	bl	80027a4 <uxListRemove>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	3304      	adds	r3, #4
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fe fd2a 	bl	80027a4 <uxListRemove>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d54:	4b2d      	ldr	r3, [pc, #180]	; (8003e0c <xTaskResumeAll+0x124>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d903      	bls.n	8003d64 <xTaskResumeAll+0x7c>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	4a2a      	ldr	r2, [pc, #168]	; (8003e0c <xTaskResumeAll+0x124>)
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d68:	4613      	mov	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4a27      	ldr	r2, [pc, #156]	; (8003e10 <xTaskResumeAll+0x128>)
 8003d72:	441a      	add	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	3304      	adds	r3, #4
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	f7fe fcb5 	bl	80026ea <vListInsertEnd>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d84:	4b23      	ldr	r3, [pc, #140]	; (8003e14 <xTaskResumeAll+0x12c>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d302      	bcc.n	8003d94 <xTaskResumeAll+0xac>
 8003d8e:	4b22      	ldr	r3, [pc, #136]	; (8003e18 <xTaskResumeAll+0x130>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	4b1c      	ldr	r3, [pc, #112]	; (8003e08 <xTaskResumeAll+0x120>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1cb      	bne.n	8003d34 <xTaskResumeAll+0x4c>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <xTaskResumeAll+0xbe>
 8003da2:	f000 fb5f 	bl	8004464 <prvResetNextTaskUnblockTime>
 8003da6:	4b1d      	ldr	r3, [pc, #116]	; (8003e1c <xTaskResumeAll+0x134>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	607b      	str	r3, [r7, #4]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d010      	beq.n	8003dd4 <xTaskResumeAll+0xec>
 8003db2:	f000 f847 	bl	8003e44 <xTaskIncrementTick>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <xTaskResumeAll+0xda>
 8003dbc:	4b16      	ldr	r3, [pc, #88]	; (8003e18 <xTaskResumeAll+0x130>)
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	607b      	str	r3, [r7, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1f1      	bne.n	8003db2 <xTaskResumeAll+0xca>
 8003dce:	4b13      	ldr	r3, [pc, #76]	; (8003e1c <xTaskResumeAll+0x134>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	4b10      	ldr	r3, [pc, #64]	; (8003e18 <xTaskResumeAll+0x130>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d009      	beq.n	8003df0 <xTaskResumeAll+0x108>
 8003ddc:	2301      	movs	r3, #1
 8003dde:	60bb      	str	r3, [r7, #8]
 8003de0:	4b0f      	ldr	r3, [pc, #60]	; (8003e20 <xTaskResumeAll+0x138>)
 8003de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	f3bf 8f4f 	dsb	sy
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	f001 f9e0 	bl	80051b4 <vPortExitCritical>
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	20000d74 	.word	0x20000d74
 8003e04:	20000d4c 	.word	0x20000d4c
 8003e08:	20000d0c 	.word	0x20000d0c
 8003e0c:	20000d54 	.word	0x20000d54
 8003e10:	2000087c 	.word	0x2000087c
 8003e14:	20000878 	.word	0x20000878
 8003e18:	20000d60 	.word	0x20000d60
 8003e1c:	20000d5c 	.word	0x20000d5c
 8003e20:	e000ed04 	.word	0xe000ed04

08003e24 <xTaskGetTickCount>:
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4b05      	ldr	r3, [pc, #20]	; (8003e40 <xTaskGetTickCount+0x1c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	607b      	str	r3, [r7, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4618      	mov	r0, r3
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	20000d50 	.word	0x20000d50

08003e44 <xTaskIncrementTick>:
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	617b      	str	r3, [r7, #20]
 8003e4e:	4b4f      	ldr	r3, [pc, #316]	; (8003f8c <xTaskIncrementTick+0x148>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f040 808f 	bne.w	8003f76 <xTaskIncrementTick+0x132>
 8003e58:	4b4d      	ldr	r3, [pc, #308]	; (8003f90 <xTaskIncrementTick+0x14c>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	613b      	str	r3, [r7, #16]
 8003e60:	4a4b      	ldr	r2, [pc, #300]	; (8003f90 <xTaskIncrementTick+0x14c>)
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d120      	bne.n	8003eae <xTaskIncrementTick+0x6a>
 8003e6c:	4b49      	ldr	r3, [pc, #292]	; (8003f94 <xTaskIncrementTick+0x150>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <xTaskIncrementTick+0x48>
 8003e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7a:	f383 8811 	msr	BASEPRI, r3
 8003e7e:	f3bf 8f6f 	isb	sy
 8003e82:	f3bf 8f4f 	dsb	sy
 8003e86:	603b      	str	r3, [r7, #0]
 8003e88:	bf00      	nop
 8003e8a:	e7fe      	b.n	8003e8a <xTaskIncrementTick+0x46>
 8003e8c:	4b41      	ldr	r3, [pc, #260]	; (8003f94 <xTaskIncrementTick+0x150>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	4b41      	ldr	r3, [pc, #260]	; (8003f98 <xTaskIncrementTick+0x154>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a3f      	ldr	r2, [pc, #252]	; (8003f94 <xTaskIncrementTick+0x150>)
 8003e98:	6013      	str	r3, [r2, #0]
 8003e9a:	4a3f      	ldr	r2, [pc, #252]	; (8003f98 <xTaskIncrementTick+0x154>)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6013      	str	r3, [r2, #0]
 8003ea0:	4b3e      	ldr	r3, [pc, #248]	; (8003f9c <xTaskIncrementTick+0x158>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	4a3d      	ldr	r2, [pc, #244]	; (8003f9c <xTaskIncrementTick+0x158>)
 8003ea8:	6013      	str	r3, [r2, #0]
 8003eaa:	f000 fadb 	bl	8004464 <prvResetNextTaskUnblockTime>
 8003eae:	4b3c      	ldr	r3, [pc, #240]	; (8003fa0 <xTaskIncrementTick+0x15c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d349      	bcc.n	8003f4c <xTaskIncrementTick+0x108>
 8003eb8:	4b36      	ldr	r3, [pc, #216]	; (8003f94 <xTaskIncrementTick+0x150>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d104      	bne.n	8003ecc <xTaskIncrementTick+0x88>
 8003ec2:	4b37      	ldr	r3, [pc, #220]	; (8003fa0 <xTaskIncrementTick+0x15c>)
 8003ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	e03f      	b.n	8003f4c <xTaskIncrementTick+0x108>
 8003ecc:	4b31      	ldr	r3, [pc, #196]	; (8003f94 <xTaskIncrementTick+0x150>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	60bb      	str	r3, [r7, #8]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	607b      	str	r3, [r7, #4]
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d203      	bcs.n	8003eec <xTaskIncrementTick+0xa8>
 8003ee4:	4a2e      	ldr	r2, [pc, #184]	; (8003fa0 <xTaskIncrementTick+0x15c>)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	e02f      	b.n	8003f4c <xTaskIncrementTick+0x108>
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	3304      	adds	r3, #4
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7fe fc57 	bl	80027a4 <uxListRemove>
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d004      	beq.n	8003f08 <xTaskIncrementTick+0xc4>
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	3318      	adds	r3, #24
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fe fc4e 	bl	80027a4 <uxListRemove>
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f0c:	4b25      	ldr	r3, [pc, #148]	; (8003fa4 <xTaskIncrementTick+0x160>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d903      	bls.n	8003f1c <xTaskIncrementTick+0xd8>
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f18:	4a22      	ldr	r2, [pc, #136]	; (8003fa4 <xTaskIncrementTick+0x160>)
 8003f1a:	6013      	str	r3, [r2, #0]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f20:	4613      	mov	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4a1f      	ldr	r2, [pc, #124]	; (8003fa8 <xTaskIncrementTick+0x164>)
 8003f2a:	441a      	add	r2, r3
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	3304      	adds	r3, #4
 8003f30:	4619      	mov	r1, r3
 8003f32:	4610      	mov	r0, r2
 8003f34:	f7fe fbd9 	bl	80026ea <vListInsertEnd>
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3c:	4b1b      	ldr	r3, [pc, #108]	; (8003fac <xTaskIncrementTick+0x168>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d3b8      	bcc.n	8003eb8 <xTaskIncrementTick+0x74>
 8003f46:	2301      	movs	r3, #1
 8003f48:	617b      	str	r3, [r7, #20]
 8003f4a:	e7b5      	b.n	8003eb8 <xTaskIncrementTick+0x74>
 8003f4c:	4b17      	ldr	r3, [pc, #92]	; (8003fac <xTaskIncrementTick+0x168>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f52:	4915      	ldr	r1, [pc, #84]	; (8003fa8 <xTaskIncrementTick+0x164>)
 8003f54:	4613      	mov	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d901      	bls.n	8003f68 <xTaskIncrementTick+0x124>
 8003f64:	2301      	movs	r3, #1
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	4b11      	ldr	r3, [pc, #68]	; (8003fb0 <xTaskIncrementTick+0x16c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d007      	beq.n	8003f80 <xTaskIncrementTick+0x13c>
 8003f70:	2301      	movs	r3, #1
 8003f72:	617b      	str	r3, [r7, #20]
 8003f74:	e004      	b.n	8003f80 <xTaskIncrementTick+0x13c>
 8003f76:	4b0f      	ldr	r3, [pc, #60]	; (8003fb4 <xTaskIncrementTick+0x170>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	4a0d      	ldr	r2, [pc, #52]	; (8003fb4 <xTaskIncrementTick+0x170>)
 8003f7e:	6013      	str	r3, [r2, #0]
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	4618      	mov	r0, r3
 8003f84:	3718      	adds	r7, #24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20000d74 	.word	0x20000d74
 8003f90:	20000d50 	.word	0x20000d50
 8003f94:	20000d04 	.word	0x20000d04
 8003f98:	20000d08 	.word	0x20000d08
 8003f9c:	20000d64 	.word	0x20000d64
 8003fa0:	20000d6c 	.word	0x20000d6c
 8003fa4:	20000d54 	.word	0x20000d54
 8003fa8:	2000087c 	.word	0x2000087c
 8003fac:	20000878 	.word	0x20000878
 8003fb0:	20000d60 	.word	0x20000d60
 8003fb4:	20000d5c 	.word	0x20000d5c

08003fb8 <vTaskSwitchContext>:
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	4b2a      	ldr	r3, [pc, #168]	; (8004068 <vTaskSwitchContext+0xb0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <vTaskSwitchContext+0x16>
 8003fc6:	4b29      	ldr	r3, [pc, #164]	; (800406c <vTaskSwitchContext+0xb4>)
 8003fc8:	2201      	movs	r2, #1
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	e046      	b.n	800405c <vTaskSwitchContext+0xa4>
 8003fce:	4b27      	ldr	r3, [pc, #156]	; (800406c <vTaskSwitchContext+0xb4>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	4b26      	ldr	r3, [pc, #152]	; (8004070 <vTaskSwitchContext+0xb8>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	e010      	b.n	8003ffe <vTaskSwitchContext+0x46>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10a      	bne.n	8003ff8 <vTaskSwitchContext+0x40>
 8003fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe6:	f383 8811 	msr	BASEPRI, r3
 8003fea:	f3bf 8f6f 	isb	sy
 8003fee:	f3bf 8f4f 	dsb	sy
 8003ff2:	607b      	str	r3, [r7, #4]
 8003ff4:	bf00      	nop
 8003ff6:	e7fe      	b.n	8003ff6 <vTaskSwitchContext+0x3e>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	491d      	ldr	r1, [pc, #116]	; (8004074 <vTaskSwitchContext+0xbc>)
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4613      	mov	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0e4      	beq.n	8003fdc <vTaskSwitchContext+0x24>
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	4613      	mov	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4a15      	ldr	r2, [pc, #84]	; (8004074 <vTaskSwitchContext+0xbc>)
 800401e:	4413      	add	r3, r2
 8004020:	60bb      	str	r3, [r7, #8]
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	605a      	str	r2, [r3, #4]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	3308      	adds	r3, #8
 8004034:	429a      	cmp	r2, r3
 8004036:	d104      	bne.n	8004042 <vTaskSwitchContext+0x8a>
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	605a      	str	r2, [r3, #4]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	4a0b      	ldr	r2, [pc, #44]	; (8004078 <vTaskSwitchContext+0xc0>)
 800404a:	6013      	str	r3, [r2, #0]
 800404c:	4a08      	ldr	r2, [pc, #32]	; (8004070 <vTaskSwitchContext+0xb8>)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	4b09      	ldr	r3, [pc, #36]	; (8004078 <vTaskSwitchContext+0xc0>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	3354      	adds	r3, #84	; 0x54
 8004058:	4a08      	ldr	r2, [pc, #32]	; (800407c <vTaskSwitchContext+0xc4>)
 800405a:	6013      	str	r3, [r2, #0]
 800405c:	bf00      	nop
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	20000d74 	.word	0x20000d74
 800406c:	20000d60 	.word	0x20000d60
 8004070:	20000d54 	.word	0x20000d54
 8004074:	2000087c 	.word	0x2000087c
 8004078:	20000878 	.word	0x20000878
 800407c:	20000068 	.word	0x20000068

08004080 <vTaskPlaceOnEventList>:
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10a      	bne.n	80040a6 <vTaskPlaceOnEventList+0x26>
 8004090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	bf00      	nop
 80040a4:	e7fe      	b.n	80040a4 <vTaskPlaceOnEventList+0x24>
 80040a6:	4b07      	ldr	r3, [pc, #28]	; (80040c4 <vTaskPlaceOnEventList+0x44>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	3318      	adds	r3, #24
 80040ac:	4619      	mov	r1, r3
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7fe fb3f 	bl	8002732 <vListInsert>
 80040b4:	2101      	movs	r1, #1
 80040b6:	6838      	ldr	r0, [r7, #0]
 80040b8:	f000 fb7e 	bl	80047b8 <prvAddCurrentTaskToDelayedList>
 80040bc:	bf00      	nop
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	20000878 	.word	0x20000878

080040c8 <vTaskPlaceOnEventListRestricted>:
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10a      	bne.n	80040f0 <vTaskPlaceOnEventListRestricted+0x28>
 80040da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040de:	f383 8811 	msr	BASEPRI, r3
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	f3bf 8f4f 	dsb	sy
 80040ea:	617b      	str	r3, [r7, #20]
 80040ec:	bf00      	nop
 80040ee:	e7fe      	b.n	80040ee <vTaskPlaceOnEventListRestricted+0x26>
 80040f0:	4b0a      	ldr	r3, [pc, #40]	; (800411c <vTaskPlaceOnEventListRestricted+0x54>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	3318      	adds	r3, #24
 80040f6:	4619      	mov	r1, r3
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f7fe faf6 	bl	80026ea <vListInsertEnd>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <vTaskPlaceOnEventListRestricted+0x42>
 8004104:	f04f 33ff 	mov.w	r3, #4294967295
 8004108:	60bb      	str	r3, [r7, #8]
 800410a:	6879      	ldr	r1, [r7, #4]
 800410c:	68b8      	ldr	r0, [r7, #8]
 800410e:	f000 fb53 	bl	80047b8 <prvAddCurrentTaskToDelayedList>
 8004112:	bf00      	nop
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	20000878 	.word	0x20000878

08004120 <xTaskRemoveFromEventList>:
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	613b      	str	r3, [r7, #16]
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10a      	bne.n	800414c <xTaskRemoveFromEventList+0x2c>
 8004136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413a:	f383 8811 	msr	BASEPRI, r3
 800413e:	f3bf 8f6f 	isb	sy
 8004142:	f3bf 8f4f 	dsb	sy
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	bf00      	nop
 800414a:	e7fe      	b.n	800414a <xTaskRemoveFromEventList+0x2a>
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	3318      	adds	r3, #24
 8004150:	4618      	mov	r0, r3
 8004152:	f7fe fb27 	bl	80027a4 <uxListRemove>
 8004156:	4b1e      	ldr	r3, [pc, #120]	; (80041d0 <xTaskRemoveFromEventList+0xb0>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d11d      	bne.n	800419a <xTaskRemoveFromEventList+0x7a>
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	3304      	adds	r3, #4
 8004162:	4618      	mov	r0, r3
 8004164:	f7fe fb1e 	bl	80027a4 <uxListRemove>
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800416c:	4b19      	ldr	r3, [pc, #100]	; (80041d4 <xTaskRemoveFromEventList+0xb4>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	429a      	cmp	r2, r3
 8004172:	d903      	bls.n	800417c <xTaskRemoveFromEventList+0x5c>
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004178:	4a16      	ldr	r2, [pc, #88]	; (80041d4 <xTaskRemoveFromEventList+0xb4>)
 800417a:	6013      	str	r3, [r2, #0]
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004180:	4613      	mov	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4a13      	ldr	r2, [pc, #76]	; (80041d8 <xTaskRemoveFromEventList+0xb8>)
 800418a:	441a      	add	r2, r3
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	3304      	adds	r3, #4
 8004190:	4619      	mov	r1, r3
 8004192:	4610      	mov	r0, r2
 8004194:	f7fe faa9 	bl	80026ea <vListInsertEnd>
 8004198:	e005      	b.n	80041a6 <xTaskRemoveFromEventList+0x86>
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	3318      	adds	r3, #24
 800419e:	4619      	mov	r1, r3
 80041a0:	480e      	ldr	r0, [pc, #56]	; (80041dc <xTaskRemoveFromEventList+0xbc>)
 80041a2:	f7fe faa2 	bl	80026ea <vListInsertEnd>
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041aa:	4b0d      	ldr	r3, [pc, #52]	; (80041e0 <xTaskRemoveFromEventList+0xc0>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d905      	bls.n	80041c0 <xTaskRemoveFromEventList+0xa0>
 80041b4:	2301      	movs	r3, #1
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	4b0a      	ldr	r3, [pc, #40]	; (80041e4 <xTaskRemoveFromEventList+0xc4>)
 80041ba:	2201      	movs	r2, #1
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	e001      	b.n	80041c4 <xTaskRemoveFromEventList+0xa4>
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	4618      	mov	r0, r3
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	20000d74 	.word	0x20000d74
 80041d4:	20000d54 	.word	0x20000d54
 80041d8:	2000087c 	.word	0x2000087c
 80041dc:	20000d0c 	.word	0x20000d0c
 80041e0:	20000878 	.word	0x20000878
 80041e4:	20000d60 	.word	0x20000d60

080041e8 <vTaskInternalSetTimeOutState>:
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	4b06      	ldr	r3, [pc, #24]	; (800420c <vTaskInternalSetTimeOutState+0x24>)
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	4b05      	ldr	r3, [pc, #20]	; (8004210 <vTaskInternalSetTimeOutState+0x28>)
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	605a      	str	r2, [r3, #4]
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	20000d64 	.word	0x20000d64
 8004210:	20000d50 	.word	0x20000d50

08004214 <xTaskCheckForTimeOut>:
 8004214:	b580      	push	{r7, lr}
 8004216:	b088      	sub	sp, #32
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10a      	bne.n	800423a <xTaskCheckForTimeOut+0x26>
 8004224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004228:	f383 8811 	msr	BASEPRI, r3
 800422c:	f3bf 8f6f 	isb	sy
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	613b      	str	r3, [r7, #16]
 8004236:	bf00      	nop
 8004238:	e7fe      	b.n	8004238 <xTaskCheckForTimeOut+0x24>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10a      	bne.n	8004256 <xTaskCheckForTimeOut+0x42>
 8004240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004244:	f383 8811 	msr	BASEPRI, r3
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	bf00      	nop
 8004254:	e7fe      	b.n	8004254 <xTaskCheckForTimeOut+0x40>
 8004256:	f000 ff7d 	bl	8005154 <vPortEnterCritical>
 800425a:	4b1d      	ldr	r3, [pc, #116]	; (80042d0 <xTaskCheckForTimeOut+0xbc>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	61bb      	str	r3, [r7, #24]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	617b      	str	r3, [r7, #20]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004272:	d102      	bne.n	800427a <xTaskCheckForTimeOut+0x66>
 8004274:	2300      	movs	r3, #0
 8004276:	61fb      	str	r3, [r7, #28]
 8004278:	e023      	b.n	80042c2 <xTaskCheckForTimeOut+0xae>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	4b15      	ldr	r3, [pc, #84]	; (80042d4 <xTaskCheckForTimeOut+0xc0>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	429a      	cmp	r2, r3
 8004284:	d007      	beq.n	8004296 <xTaskCheckForTimeOut+0x82>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	429a      	cmp	r2, r3
 800428e:	d302      	bcc.n	8004296 <xTaskCheckForTimeOut+0x82>
 8004290:	2301      	movs	r3, #1
 8004292:	61fb      	str	r3, [r7, #28]
 8004294:	e015      	b.n	80042c2 <xTaskCheckForTimeOut+0xae>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	429a      	cmp	r2, r3
 800429e:	d20b      	bcs.n	80042b8 <xTaskCheckForTimeOut+0xa4>
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	1ad2      	subs	r2, r2, r3
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7ff ff9b 	bl	80041e8 <vTaskInternalSetTimeOutState>
 80042b2:	2300      	movs	r3, #0
 80042b4:	61fb      	str	r3, [r7, #28]
 80042b6:	e004      	b.n	80042c2 <xTaskCheckForTimeOut+0xae>
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	2200      	movs	r2, #0
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	2301      	movs	r3, #1
 80042c0:	61fb      	str	r3, [r7, #28]
 80042c2:	f000 ff77 	bl	80051b4 <vPortExitCritical>
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	4618      	mov	r0, r3
 80042ca:	3720      	adds	r7, #32
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	20000d50 	.word	0x20000d50
 80042d4:	20000d64 	.word	0x20000d64

080042d8 <vTaskMissedYield>:
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
 80042dc:	4b03      	ldr	r3, [pc, #12]	; (80042ec <vTaskMissedYield+0x14>)
 80042de:	2201      	movs	r2, #1
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	bf00      	nop
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	20000d60 	.word	0x20000d60

080042f0 <prvIdleTask>:
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	f000 f852 	bl	80043a0 <prvCheckTasksWaitingTermination>
 80042fc:	4b06      	ldr	r3, [pc, #24]	; (8004318 <prvIdleTask+0x28>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d9f9      	bls.n	80042f8 <prvIdleTask+0x8>
 8004304:	4b05      	ldr	r3, [pc, #20]	; (800431c <prvIdleTask+0x2c>)
 8004306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	e7f0      	b.n	80042f8 <prvIdleTask+0x8>
 8004316:	bf00      	nop
 8004318:	2000087c 	.word	0x2000087c
 800431c:	e000ed04 	.word	0xe000ed04

08004320 <prvInitialiseTaskLists>:
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	2300      	movs	r3, #0
 8004328:	607b      	str	r3, [r7, #4]
 800432a:	e00c      	b.n	8004346 <prvInitialiseTaskLists+0x26>
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	4613      	mov	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4a12      	ldr	r2, [pc, #72]	; (8004380 <prvInitialiseTaskLists+0x60>)
 8004338:	4413      	add	r3, r2
 800433a:	4618      	mov	r0, r3
 800433c:	f7fe f9a8 	bl	8002690 <vListInitialise>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3301      	adds	r3, #1
 8004344:	607b      	str	r3, [r7, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b37      	cmp	r3, #55	; 0x37
 800434a:	d9ef      	bls.n	800432c <prvInitialiseTaskLists+0xc>
 800434c:	480d      	ldr	r0, [pc, #52]	; (8004384 <prvInitialiseTaskLists+0x64>)
 800434e:	f7fe f99f 	bl	8002690 <vListInitialise>
 8004352:	480d      	ldr	r0, [pc, #52]	; (8004388 <prvInitialiseTaskLists+0x68>)
 8004354:	f7fe f99c 	bl	8002690 <vListInitialise>
 8004358:	480c      	ldr	r0, [pc, #48]	; (800438c <prvInitialiseTaskLists+0x6c>)
 800435a:	f7fe f999 	bl	8002690 <vListInitialise>
 800435e:	480c      	ldr	r0, [pc, #48]	; (8004390 <prvInitialiseTaskLists+0x70>)
 8004360:	f7fe f996 	bl	8002690 <vListInitialise>
 8004364:	480b      	ldr	r0, [pc, #44]	; (8004394 <prvInitialiseTaskLists+0x74>)
 8004366:	f7fe f993 	bl	8002690 <vListInitialise>
 800436a:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <prvInitialiseTaskLists+0x78>)
 800436c:	4a05      	ldr	r2, [pc, #20]	; (8004384 <prvInitialiseTaskLists+0x64>)
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	4b0a      	ldr	r3, [pc, #40]	; (800439c <prvInitialiseTaskLists+0x7c>)
 8004372:	4a05      	ldr	r2, [pc, #20]	; (8004388 <prvInitialiseTaskLists+0x68>)
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	bf00      	nop
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	2000087c 	.word	0x2000087c
 8004384:	20000cdc 	.word	0x20000cdc
 8004388:	20000cf0 	.word	0x20000cf0
 800438c:	20000d0c 	.word	0x20000d0c
 8004390:	20000d20 	.word	0x20000d20
 8004394:	20000d38 	.word	0x20000d38
 8004398:	20000d04 	.word	0x20000d04
 800439c:	20000d08 	.word	0x20000d08

080043a0 <prvCheckTasksWaitingTermination>:
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	e019      	b.n	80043dc <prvCheckTasksWaitingTermination+0x3c>
 80043a8:	f000 fed4 	bl	8005154 <vPortEnterCritical>
 80043ac:	4b10      	ldr	r3, [pc, #64]	; (80043f0 <prvCheckTasksWaitingTermination+0x50>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	607b      	str	r3, [r7, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3304      	adds	r3, #4
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7fe f9f3 	bl	80027a4 <uxListRemove>
 80043be:	4b0d      	ldr	r3, [pc, #52]	; (80043f4 <prvCheckTasksWaitingTermination+0x54>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	4a0b      	ldr	r2, [pc, #44]	; (80043f4 <prvCheckTasksWaitingTermination+0x54>)
 80043c6:	6013      	str	r3, [r2, #0]
 80043c8:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <prvCheckTasksWaitingTermination+0x58>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3b01      	subs	r3, #1
 80043ce:	4a0a      	ldr	r2, [pc, #40]	; (80043f8 <prvCheckTasksWaitingTermination+0x58>)
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	f000 feef 	bl	80051b4 <vPortExitCritical>
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f810 	bl	80043fc <prvDeleteTCB>
 80043dc:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <prvCheckTasksWaitingTermination+0x58>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1e1      	bne.n	80043a8 <prvCheckTasksWaitingTermination+0x8>
 80043e4:	bf00      	nop
 80043e6:	bf00      	nop
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	20000d20 	.word	0x20000d20
 80043f4:	20000d4c 	.word	0x20000d4c
 80043f8:	20000d34 	.word	0x20000d34

080043fc <prvDeleteTCB>:
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3354      	adds	r3, #84	; 0x54
 8004408:	4618      	mov	r0, r3
 800440a:	f001 fbcf 	bl	8005bac <_reclaim_reent>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004414:	2b00      	cmp	r3, #0
 8004416:	d108      	bne.n	800442a <prvDeleteTCB+0x2e>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	4618      	mov	r0, r3
 800441e:	f001 f887 	bl	8005530 <vPortFree>
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f001 f884 	bl	8005530 <vPortFree>
 8004428:	e018      	b.n	800445c <prvDeleteTCB+0x60>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004430:	2b01      	cmp	r3, #1
 8004432:	d103      	bne.n	800443c <prvDeleteTCB+0x40>
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f001 f87b 	bl	8005530 <vPortFree>
 800443a:	e00f      	b.n	800445c <prvDeleteTCB+0x60>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004442:	2b02      	cmp	r3, #2
 8004444:	d00a      	beq.n	800445c <prvDeleteTCB+0x60>
 8004446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444a:	f383 8811 	msr	BASEPRI, r3
 800444e:	f3bf 8f6f 	isb	sy
 8004452:	f3bf 8f4f 	dsb	sy
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	bf00      	nop
 800445a:	e7fe      	b.n	800445a <prvDeleteTCB+0x5e>
 800445c:	bf00      	nop
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <prvResetNextTaskUnblockTime>:
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	4b0c      	ldr	r3, [pc, #48]	; (800449c <prvResetNextTaskUnblockTime+0x38>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d104      	bne.n	800447e <prvResetNextTaskUnblockTime+0x1a>
 8004474:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <prvResetNextTaskUnblockTime+0x3c>)
 8004476:	f04f 32ff 	mov.w	r2, #4294967295
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	e008      	b.n	8004490 <prvResetNextTaskUnblockTime+0x2c>
 800447e:	4b07      	ldr	r3, [pc, #28]	; (800449c <prvResetNextTaskUnblockTime+0x38>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	607b      	str	r3, [r7, #4]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	4a04      	ldr	r2, [pc, #16]	; (80044a0 <prvResetNextTaskUnblockTime+0x3c>)
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	20000d04 	.word	0x20000d04
 80044a0:	20000d6c 	.word	0x20000d6c

080044a4 <xTaskGetSchedulerState>:
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	4b0b      	ldr	r3, [pc, #44]	; (80044d8 <xTaskGetSchedulerState+0x34>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d102      	bne.n	80044b8 <xTaskGetSchedulerState+0x14>
 80044b2:	2301      	movs	r3, #1
 80044b4:	607b      	str	r3, [r7, #4]
 80044b6:	e008      	b.n	80044ca <xTaskGetSchedulerState+0x26>
 80044b8:	4b08      	ldr	r3, [pc, #32]	; (80044dc <xTaskGetSchedulerState+0x38>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d102      	bne.n	80044c6 <xTaskGetSchedulerState+0x22>
 80044c0:	2302      	movs	r3, #2
 80044c2:	607b      	str	r3, [r7, #4]
 80044c4:	e001      	b.n	80044ca <xTaskGetSchedulerState+0x26>
 80044c6:	2300      	movs	r3, #0
 80044c8:	607b      	str	r3, [r7, #4]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4618      	mov	r0, r3
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	20000d58 	.word	0x20000d58
 80044dc:	20000d74 	.word	0x20000d74

080044e0 <xTaskPriorityInherit>:
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	60bb      	str	r3, [r7, #8]
 80044ec:	2300      	movs	r3, #0
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d051      	beq.n	800459a <xTaskPriorityInherit+0xba>
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044fa:	4b2a      	ldr	r3, [pc, #168]	; (80045a4 <xTaskPriorityInherit+0xc4>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	429a      	cmp	r2, r3
 8004502:	d241      	bcs.n	8004588 <xTaskPriorityInherit+0xa8>
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	2b00      	cmp	r3, #0
 800450a:	db06      	blt.n	800451a <xTaskPriorityInherit+0x3a>
 800450c:	4b25      	ldr	r3, [pc, #148]	; (80045a4 <xTaskPriorityInherit+0xc4>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004512:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	619a      	str	r2, [r3, #24]
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	6959      	ldr	r1, [r3, #20]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004522:	4613      	mov	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4a1f      	ldr	r2, [pc, #124]	; (80045a8 <xTaskPriorityInherit+0xc8>)
 800452c:	4413      	add	r3, r2
 800452e:	4299      	cmp	r1, r3
 8004530:	d122      	bne.n	8004578 <xTaskPriorityInherit+0x98>
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	3304      	adds	r3, #4
 8004536:	4618      	mov	r0, r3
 8004538:	f7fe f934 	bl	80027a4 <uxListRemove>
 800453c:	4b19      	ldr	r3, [pc, #100]	; (80045a4 <xTaskPriorityInherit+0xc4>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	62da      	str	r2, [r3, #44]	; 0x2c
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800454a:	4b18      	ldr	r3, [pc, #96]	; (80045ac <xTaskPriorityInherit+0xcc>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	429a      	cmp	r2, r3
 8004550:	d903      	bls.n	800455a <xTaskPriorityInherit+0x7a>
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004556:	4a15      	ldr	r2, [pc, #84]	; (80045ac <xTaskPriorityInherit+0xcc>)
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800455e:	4613      	mov	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4413      	add	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4a10      	ldr	r2, [pc, #64]	; (80045a8 <xTaskPriorityInherit+0xc8>)
 8004568:	441a      	add	r2, r3
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	3304      	adds	r3, #4
 800456e:	4619      	mov	r1, r3
 8004570:	4610      	mov	r0, r2
 8004572:	f7fe f8ba 	bl	80026ea <vListInsertEnd>
 8004576:	e004      	b.n	8004582 <xTaskPriorityInherit+0xa2>
 8004578:	4b0a      	ldr	r3, [pc, #40]	; (80045a4 <xTaskPriorityInherit+0xc4>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	62da      	str	r2, [r3, #44]	; 0x2c
 8004582:	2301      	movs	r3, #1
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	e008      	b.n	800459a <xTaskPriorityInherit+0xba>
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800458c:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <xTaskPriorityInherit+0xc4>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004592:	429a      	cmp	r2, r3
 8004594:	d201      	bcs.n	800459a <xTaskPriorityInherit+0xba>
 8004596:	2301      	movs	r3, #1
 8004598:	60fb      	str	r3, [r7, #12]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	4618      	mov	r0, r3
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	20000878 	.word	0x20000878
 80045a8:	2000087c 	.word	0x2000087c
 80045ac:	20000d54 	.word	0x20000d54

080045b0 <xTaskPriorityDisinherit>:
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	613b      	str	r3, [r7, #16]
 80045bc:	2300      	movs	r3, #0
 80045be:	617b      	str	r3, [r7, #20]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d056      	beq.n	8004674 <xTaskPriorityDisinherit+0xc4>
 80045c6:	4b2e      	ldr	r3, [pc, #184]	; (8004680 <xTaskPriorityDisinherit+0xd0>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d00a      	beq.n	80045e6 <xTaskPriorityDisinherit+0x36>
 80045d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d4:	f383 8811 	msr	BASEPRI, r3
 80045d8:	f3bf 8f6f 	isb	sy
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	bf00      	nop
 80045e4:	e7fe      	b.n	80045e4 <xTaskPriorityDisinherit+0x34>
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10a      	bne.n	8004604 <xTaskPriorityDisinherit+0x54>
 80045ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	60bb      	str	r3, [r7, #8]
 8004600:	bf00      	nop
 8004602:	e7fe      	b.n	8004602 <xTaskPriorityDisinherit+0x52>
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004608:	1e5a      	subs	r2, r3, #1
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	651a      	str	r2, [r3, #80]	; 0x50
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004616:	429a      	cmp	r2, r3
 8004618:	d02c      	beq.n	8004674 <xTaskPriorityDisinherit+0xc4>
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800461e:	2b00      	cmp	r3, #0
 8004620:	d128      	bne.n	8004674 <xTaskPriorityDisinherit+0xc4>
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	3304      	adds	r3, #4
 8004626:	4618      	mov	r0, r3
 8004628:	f7fe f8bc 	bl	80027a4 <uxListRemove>
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	62da      	str	r2, [r3, #44]	; 0x2c
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	619a      	str	r2, [r3, #24]
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004644:	4b0f      	ldr	r3, [pc, #60]	; (8004684 <xTaskPriorityDisinherit+0xd4>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	429a      	cmp	r2, r3
 800464a:	d903      	bls.n	8004654 <xTaskPriorityDisinherit+0xa4>
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004650:	4a0c      	ldr	r2, [pc, #48]	; (8004684 <xTaskPriorityDisinherit+0xd4>)
 8004652:	6013      	str	r3, [r2, #0]
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004658:	4613      	mov	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4a09      	ldr	r2, [pc, #36]	; (8004688 <xTaskPriorityDisinherit+0xd8>)
 8004662:	441a      	add	r2, r3
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	3304      	adds	r3, #4
 8004668:	4619      	mov	r1, r3
 800466a:	4610      	mov	r0, r2
 800466c:	f7fe f83d 	bl	80026ea <vListInsertEnd>
 8004670:	2301      	movs	r3, #1
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	4618      	mov	r0, r3
 8004678:	3718      	adds	r7, #24
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	20000878 	.word	0x20000878
 8004684:	20000d54 	.word	0x20000d54
 8004688:	2000087c 	.word	0x2000087c

0800468c <vTaskPriorityDisinheritAfterTimeout>:
 800468c:	b580      	push	{r7, lr}
 800468e:	b088      	sub	sp, #32
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	61bb      	str	r3, [r7, #24]
 800469a:	2301      	movs	r3, #1
 800469c:	617b      	str	r3, [r7, #20]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d06a      	beq.n	800477a <vTaskPriorityDisinheritAfterTimeout+0xee>
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10a      	bne.n	80046c2 <vTaskPriorityDisinheritAfterTimeout+0x36>
 80046ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	bf00      	nop
 80046c0:	e7fe      	b.n	80046c0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d902      	bls.n	80046d2 <vTaskPriorityDisinheritAfterTimeout+0x46>
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	61fb      	str	r3, [r7, #28]
 80046d0:	e002      	b.n	80046d8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d6:	61fb      	str	r3, [r7, #28]
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046dc:	69fa      	ldr	r2, [r7, #28]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d04b      	beq.n	800477a <vTaskPriorityDisinheritAfterTimeout+0xee>
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d146      	bne.n	800477a <vTaskPriorityDisinheritAfterTimeout+0xee>
 80046ec:	4b25      	ldr	r3, [pc, #148]	; (8004784 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d10a      	bne.n	800470c <vTaskPriorityDisinheritAfterTimeout+0x80>
 80046f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fa:	f383 8811 	msr	BASEPRI, r3
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f3bf 8f4f 	dsb	sy
 8004706:	60bb      	str	r3, [r7, #8]
 8004708:	bf00      	nop
 800470a:	e7fe      	b.n	800470a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004710:	613b      	str	r3, [r7, #16]
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	69fa      	ldr	r2, [r7, #28]
 8004716:	62da      	str	r2, [r3, #44]	; 0x2c
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	2b00      	cmp	r3, #0
 800471e:	db04      	blt.n	800472a <vTaskPriorityDisinheritAfterTimeout+0x9e>
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	619a      	str	r2, [r3, #24]
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	6959      	ldr	r1, [r3, #20]
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	4613      	mov	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4a13      	ldr	r2, [pc, #76]	; (8004788 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800473a:	4413      	add	r3, r2
 800473c:	4299      	cmp	r1, r3
 800473e:	d11c      	bne.n	800477a <vTaskPriorityDisinheritAfterTimeout+0xee>
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	3304      	adds	r3, #4
 8004744:	4618      	mov	r0, r3
 8004746:	f7fe f82d 	bl	80027a4 <uxListRemove>
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800474e:	4b0f      	ldr	r3, [pc, #60]	; (800478c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	429a      	cmp	r2, r3
 8004754:	d903      	bls.n	800475e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475a:	4a0c      	ldr	r2, [pc, #48]	; (800478c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004762:	4613      	mov	r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	4413      	add	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4a07      	ldr	r2, [pc, #28]	; (8004788 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800476c:	441a      	add	r2, r3
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	3304      	adds	r3, #4
 8004772:	4619      	mov	r1, r3
 8004774:	4610      	mov	r0, r2
 8004776:	f7fd ffb8 	bl	80026ea <vListInsertEnd>
 800477a:	bf00      	nop
 800477c:	3720      	adds	r7, #32
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20000878 	.word	0x20000878
 8004788:	2000087c 	.word	0x2000087c
 800478c:	20000d54 	.word	0x20000d54

08004790 <pvTaskIncrementMutexHeldCount>:
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0
 8004794:	4b07      	ldr	r3, [pc, #28]	; (80047b4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d004      	beq.n	80047a6 <pvTaskIncrementMutexHeldCount+0x16>
 800479c:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <pvTaskIncrementMutexHeldCount+0x24>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047a2:	3201      	adds	r2, #1
 80047a4:	651a      	str	r2, [r3, #80]	; 0x50
 80047a6:	4b03      	ldr	r3, [pc, #12]	; (80047b4 <pvTaskIncrementMutexHeldCount+0x24>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4618      	mov	r0, r3
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	20000878 	.word	0x20000878

080047b8 <prvAddCurrentTaskToDelayedList>:
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
 80047c2:	4b21      	ldr	r3, [pc, #132]	; (8004848 <prvAddCurrentTaskToDelayedList+0x90>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	4b20      	ldr	r3, [pc, #128]	; (800484c <prvAddCurrentTaskToDelayedList+0x94>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3304      	adds	r3, #4
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7fd ffe8 	bl	80027a4 <uxListRemove>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047da:	d10a      	bne.n	80047f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d007      	beq.n	80047f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80047e2:	4b1a      	ldr	r3, [pc, #104]	; (800484c <prvAddCurrentTaskToDelayedList+0x94>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	3304      	adds	r3, #4
 80047e8:	4619      	mov	r1, r3
 80047ea:	4819      	ldr	r0, [pc, #100]	; (8004850 <prvAddCurrentTaskToDelayedList+0x98>)
 80047ec:	f7fd ff7d 	bl	80026ea <vListInsertEnd>
 80047f0:	e026      	b.n	8004840 <prvAddCurrentTaskToDelayedList+0x88>
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4413      	add	r3, r2
 80047f8:	60bb      	str	r3, [r7, #8]
 80047fa:	4b14      	ldr	r3, [pc, #80]	; (800484c <prvAddCurrentTaskToDelayedList+0x94>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	605a      	str	r2, [r3, #4]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	429a      	cmp	r2, r3
 8004808:	d209      	bcs.n	800481e <prvAddCurrentTaskToDelayedList+0x66>
 800480a:	4b12      	ldr	r3, [pc, #72]	; (8004854 <prvAddCurrentTaskToDelayedList+0x9c>)
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	4b0f      	ldr	r3, [pc, #60]	; (800484c <prvAddCurrentTaskToDelayedList+0x94>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3304      	adds	r3, #4
 8004814:	4619      	mov	r1, r3
 8004816:	4610      	mov	r0, r2
 8004818:	f7fd ff8b 	bl	8002732 <vListInsert>
 800481c:	e010      	b.n	8004840 <prvAddCurrentTaskToDelayedList+0x88>
 800481e:	4b0e      	ldr	r3, [pc, #56]	; (8004858 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	4b0a      	ldr	r3, [pc, #40]	; (800484c <prvAddCurrentTaskToDelayedList+0x94>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	3304      	adds	r3, #4
 8004828:	4619      	mov	r1, r3
 800482a:	4610      	mov	r0, r2
 800482c:	f7fd ff81 	bl	8002732 <vListInsert>
 8004830:	4b0a      	ldr	r3, [pc, #40]	; (800485c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	429a      	cmp	r2, r3
 8004838:	d202      	bcs.n	8004840 <prvAddCurrentTaskToDelayedList+0x88>
 800483a:	4a08      	ldr	r2, [pc, #32]	; (800485c <prvAddCurrentTaskToDelayedList+0xa4>)
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	6013      	str	r3, [r2, #0]
 8004840:	bf00      	nop
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	20000d50 	.word	0x20000d50
 800484c:	20000878 	.word	0x20000878
 8004850:	20000d38 	.word	0x20000d38
 8004854:	20000d08 	.word	0x20000d08
 8004858:	20000d04 	.word	0x20000d04
 800485c:	20000d6c 	.word	0x20000d6c

08004860 <xTimerCreateTimerTask>:
 8004860:	b580      	push	{r7, lr}
 8004862:	b08a      	sub	sp, #40	; 0x28
 8004864:	af04      	add	r7, sp, #16
 8004866:	2300      	movs	r3, #0
 8004868:	617b      	str	r3, [r7, #20]
 800486a:	f000 fb07 	bl	8004e7c <prvCheckForValidListAndQueue>
 800486e:	4b1c      	ldr	r3, [pc, #112]	; (80048e0 <xTimerCreateTimerTask+0x80>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d021      	beq.n	80048ba <xTimerCreateTimerTask+0x5a>
 8004876:	2300      	movs	r3, #0
 8004878:	60fb      	str	r3, [r7, #12]
 800487a:	2300      	movs	r3, #0
 800487c:	60bb      	str	r3, [r7, #8]
 800487e:	1d3a      	adds	r2, r7, #4
 8004880:	f107 0108 	add.w	r1, r7, #8
 8004884:	f107 030c 	add.w	r3, r7, #12
 8004888:	4618      	mov	r0, r3
 800488a:	f7fd fee7 	bl	800265c <vApplicationGetTimerTaskMemory>
 800488e:	6879      	ldr	r1, [r7, #4]
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	9202      	str	r2, [sp, #8]
 8004896:	9301      	str	r3, [sp, #4]
 8004898:	2302      	movs	r3, #2
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	2300      	movs	r3, #0
 800489e:	460a      	mov	r2, r1
 80048a0:	4910      	ldr	r1, [pc, #64]	; (80048e4 <xTimerCreateTimerTask+0x84>)
 80048a2:	4811      	ldr	r0, [pc, #68]	; (80048e8 <xTimerCreateTimerTask+0x88>)
 80048a4:	f7fe ffb6 	bl	8003814 <xTaskCreateStatic>
 80048a8:	4603      	mov	r3, r0
 80048aa:	4a10      	ldr	r2, [pc, #64]	; (80048ec <xTimerCreateTimerTask+0x8c>)
 80048ac:	6013      	str	r3, [r2, #0]
 80048ae:	4b0f      	ldr	r3, [pc, #60]	; (80048ec <xTimerCreateTimerTask+0x8c>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <xTimerCreateTimerTask+0x5a>
 80048b6:	2301      	movs	r3, #1
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10a      	bne.n	80048d6 <xTimerCreateTimerTask+0x76>
 80048c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	bf00      	nop
 80048d4:	e7fe      	b.n	80048d4 <xTimerCreateTimerTask+0x74>
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	4618      	mov	r0, r3
 80048da:	3718      	adds	r7, #24
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	20000da8 	.word	0x20000da8
 80048e4:	080067d0 	.word	0x080067d0
 80048e8:	08004a25 	.word	0x08004a25
 80048ec:	20000dac 	.word	0x20000dac

080048f0 <xTimerGenericCommand>:
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b08a      	sub	sp, #40	; 0x28
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	603b      	str	r3, [r7, #0]
 80048fe:	2300      	movs	r3, #0
 8004900:	627b      	str	r3, [r7, #36]	; 0x24
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10a      	bne.n	800491e <xTimerGenericCommand+0x2e>
 8004908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	623b      	str	r3, [r7, #32]
 800491a:	bf00      	nop
 800491c:	e7fe      	b.n	800491c <xTimerGenericCommand+0x2c>
 800491e:	4b1a      	ldr	r3, [pc, #104]	; (8004988 <xTimerGenericCommand+0x98>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d02a      	beq.n	800497c <xTimerGenericCommand+0x8c>
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	613b      	str	r3, [r7, #16]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	617b      	str	r3, [r7, #20]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	61bb      	str	r3, [r7, #24]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2b05      	cmp	r3, #5
 8004936:	dc18      	bgt.n	800496a <xTimerGenericCommand+0x7a>
 8004938:	f7ff fdb4 	bl	80044a4 <xTaskGetSchedulerState>
 800493c:	4603      	mov	r3, r0
 800493e:	2b02      	cmp	r3, #2
 8004940:	d109      	bne.n	8004956 <xTimerGenericCommand+0x66>
 8004942:	4b11      	ldr	r3, [pc, #68]	; (8004988 <xTimerGenericCommand+0x98>)
 8004944:	6818      	ldr	r0, [r3, #0]
 8004946:	f107 0110 	add.w	r1, r7, #16
 800494a:	2300      	movs	r3, #0
 800494c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800494e:	f7fe f8fb 	bl	8002b48 <xQueueGenericSend>
 8004952:	6278      	str	r0, [r7, #36]	; 0x24
 8004954:	e012      	b.n	800497c <xTimerGenericCommand+0x8c>
 8004956:	4b0c      	ldr	r3, [pc, #48]	; (8004988 <xTimerGenericCommand+0x98>)
 8004958:	6818      	ldr	r0, [r3, #0]
 800495a:	f107 0110 	add.w	r1, r7, #16
 800495e:	2300      	movs	r3, #0
 8004960:	2200      	movs	r2, #0
 8004962:	f7fe f8f1 	bl	8002b48 <xQueueGenericSend>
 8004966:	6278      	str	r0, [r7, #36]	; 0x24
 8004968:	e008      	b.n	800497c <xTimerGenericCommand+0x8c>
 800496a:	4b07      	ldr	r3, [pc, #28]	; (8004988 <xTimerGenericCommand+0x98>)
 800496c:	6818      	ldr	r0, [r3, #0]
 800496e:	f107 0110 	add.w	r1, r7, #16
 8004972:	2300      	movs	r3, #0
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	f7fe f9e5 	bl	8002d44 <xQueueGenericSendFromISR>
 800497a:	6278      	str	r0, [r7, #36]	; 0x24
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	4618      	mov	r0, r3
 8004980:	3728      	adds	r7, #40	; 0x28
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	20000da8 	.word	0x20000da8

0800498c <prvProcessExpiredTimer>:
 800498c:	b580      	push	{r7, lr}
 800498e:	b088      	sub	sp, #32
 8004990:	af02      	add	r7, sp, #8
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
 8004996:	4b22      	ldr	r3, [pc, #136]	; (8004a20 <prvProcessExpiredTimer+0x94>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	617b      	str	r3, [r7, #20]
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	3304      	adds	r3, #4
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fd fefd 	bl	80027a4 <uxListRemove>
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d022      	beq.n	80049fe <prvProcessExpiredTimer+0x72>
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	699a      	ldr	r2, [r3, #24]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	18d1      	adds	r1, r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	6978      	ldr	r0, [r7, #20]
 80049c6:	f000 f8d1 	bl	8004b6c <prvInsertTimerInActiveList>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d01f      	beq.n	8004a10 <prvProcessExpiredTimer+0x84>
 80049d0:	2300      	movs	r3, #0
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	2300      	movs	r3, #0
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	2100      	movs	r1, #0
 80049da:	6978      	ldr	r0, [r7, #20]
 80049dc:	f7ff ff88 	bl	80048f0 <xTimerGenericCommand>
 80049e0:	6138      	str	r0, [r7, #16]
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d113      	bne.n	8004a10 <prvProcessExpiredTimer+0x84>
 80049e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ec:	f383 8811 	msr	BASEPRI, r3
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	60fb      	str	r3, [r7, #12]
 80049fa:	bf00      	nop
 80049fc:	e7fe      	b.n	80049fc <prvProcessExpiredTimer+0x70>
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a04:	f023 0301 	bic.w	r3, r3, #1
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	6978      	ldr	r0, [r7, #20]
 8004a16:	4798      	blx	r3
 8004a18:	bf00      	nop
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	20000da0 	.word	0x20000da0

08004a24 <prvTimerTask>:
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	f107 0308 	add.w	r3, r7, #8
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 f857 	bl	8004ae4 <prvGetNextExpireTime>
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f000 f803 	bl	8004a48 <prvProcessTimerOrBlockTask>
 8004a42:	f000 f8d5 	bl	8004bf0 <prvProcessReceivedCommands>
 8004a46:	e7f1      	b.n	8004a2c <prvTimerTask+0x8>

08004a48 <prvProcessTimerOrBlockTask>:
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
 8004a52:	f7ff f93b 	bl	8003ccc <vTaskSuspendAll>
 8004a56:	f107 0308 	add.w	r3, r7, #8
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 f866 	bl	8004b2c <prvSampleTimeNow>
 8004a60:	60f8      	str	r0, [r7, #12]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d130      	bne.n	8004aca <prvProcessTimerOrBlockTask+0x82>
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10a      	bne.n	8004a84 <prvProcessTimerOrBlockTask+0x3c>
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d806      	bhi.n	8004a84 <prvProcessTimerOrBlockTask+0x3c>
 8004a76:	f7ff f937 	bl	8003ce8 <xTaskResumeAll>
 8004a7a:	68f9      	ldr	r1, [r7, #12]
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7ff ff85 	bl	800498c <prvProcessExpiredTimer>
 8004a82:	e024      	b.n	8004ace <prvProcessTimerOrBlockTask+0x86>
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d008      	beq.n	8004a9c <prvProcessTimerOrBlockTask+0x54>
 8004a8a:	4b13      	ldr	r3, [pc, #76]	; (8004ad8 <prvProcessTimerOrBlockTask+0x90>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <prvProcessTimerOrBlockTask+0x50>
 8004a94:	2301      	movs	r3, #1
 8004a96:	e000      	b.n	8004a9a <prvProcessTimerOrBlockTask+0x52>
 8004a98:	2300      	movs	r3, #0
 8004a9a:	603b      	str	r3, [r7, #0]
 8004a9c:	4b0f      	ldr	r3, [pc, #60]	; (8004adc <prvProcessTimerOrBlockTask+0x94>)
 8004a9e:	6818      	ldr	r0, [r3, #0]
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	f7fe fe7f 	bl	80037ac <vQueueWaitForMessageRestricted>
 8004aae:	f7ff f91b 	bl	8003ce8 <xTaskResumeAll>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10a      	bne.n	8004ace <prvProcessTimerOrBlockTask+0x86>
 8004ab8:	4b09      	ldr	r3, [pc, #36]	; (8004ae0 <prvProcessTimerOrBlockTask+0x98>)
 8004aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	e001      	b.n	8004ace <prvProcessTimerOrBlockTask+0x86>
 8004aca:	f7ff f90d 	bl	8003ce8 <xTaskResumeAll>
 8004ace:	bf00      	nop
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20000da4 	.word	0x20000da4
 8004adc:	20000da8 	.word	0x20000da8
 8004ae0:	e000ed04 	.word	0xe000ed04

08004ae4 <prvGetNextExpireTime>:
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	4b0e      	ldr	r3, [pc, #56]	; (8004b28 <prvGetNextExpireTime+0x44>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <prvGetNextExpireTime+0x16>
 8004af6:	2201      	movs	r2, #1
 8004af8:	e000      	b.n	8004afc <prvGetNextExpireTime+0x18>
 8004afa:	2200      	movs	r2, #0
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d105      	bne.n	8004b14 <prvGetNextExpireTime+0x30>
 8004b08:	4b07      	ldr	r3, [pc, #28]	; (8004b28 <prvGetNextExpireTime+0x44>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	e001      	b.n	8004b18 <prvGetNextExpireTime+0x34>
 8004b14:	2300      	movs	r3, #0
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	20000da0 	.word	0x20000da0

08004b2c <prvSampleTimeNow>:
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	f7ff f976 	bl	8003e24 <xTaskGetTickCount>
 8004b38:	60f8      	str	r0, [r7, #12]
 8004b3a:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <prvSampleTimeNow+0x3c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d205      	bcs.n	8004b50 <prvSampleTimeNow+0x24>
 8004b44:	f000 f936 	bl	8004db4 <prvSwitchTimerLists>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	e002      	b.n	8004b56 <prvSampleTimeNow+0x2a>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	601a      	str	r2, [r3, #0]
 8004b56:	4a04      	ldr	r2, [pc, #16]	; (8004b68 <prvSampleTimeNow+0x3c>)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6013      	str	r3, [r2, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	20000db0 	.word	0x20000db0

08004b6c <prvInsertTimerInActiveList>:
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
 8004b78:	603b      	str	r3, [r7, #0]
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	617b      	str	r3, [r7, #20]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	605a      	str	r2, [r3, #4]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	611a      	str	r2, [r3, #16]
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d812      	bhi.n	8004bb8 <prvInsertTimerInActiveList+0x4c>
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	1ad2      	subs	r2, r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d302      	bcc.n	8004ba6 <prvInsertTimerInActiveList+0x3a>
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	617b      	str	r3, [r7, #20]
 8004ba4:	e01b      	b.n	8004bde <prvInsertTimerInActiveList+0x72>
 8004ba6:	4b10      	ldr	r3, [pc, #64]	; (8004be8 <prvInsertTimerInActiveList+0x7c>)
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	3304      	adds	r3, #4
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	f7fd fdbe 	bl	8002732 <vListInsert>
 8004bb6:	e012      	b.n	8004bde <prvInsertTimerInActiveList+0x72>
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d206      	bcs.n	8004bce <prvInsertTimerInActiveList+0x62>
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d302      	bcc.n	8004bce <prvInsertTimerInActiveList+0x62>
 8004bc8:	2301      	movs	r3, #1
 8004bca:	617b      	str	r3, [r7, #20]
 8004bcc:	e007      	b.n	8004bde <prvInsertTimerInActiveList+0x72>
 8004bce:	4b07      	ldr	r3, [pc, #28]	; (8004bec <prvInsertTimerInActiveList+0x80>)
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	4610      	mov	r0, r2
 8004bda:	f7fd fdaa 	bl	8002732 <vListInsert>
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	4618      	mov	r0, r3
 8004be2:	3718      	adds	r7, #24
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	20000da4 	.word	0x20000da4
 8004bec:	20000da0 	.word	0x20000da0

08004bf0 <prvProcessReceivedCommands>:
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08e      	sub	sp, #56	; 0x38
 8004bf4:	af02      	add	r7, sp, #8
 8004bf6:	e0ca      	b.n	8004d8e <prvProcessReceivedCommands+0x19e>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	da18      	bge.n	8004c30 <prvProcessReceivedCommands+0x40>
 8004bfe:	1d3b      	adds	r3, r7, #4
 8004c00:	3304      	adds	r3, #4
 8004c02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10a      	bne.n	8004c20 <prvProcessReceivedCommands+0x30>
 8004c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0e:	f383 8811 	msr	BASEPRI, r3
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	61fb      	str	r3, [r7, #28]
 8004c1c:	bf00      	nop
 8004c1e:	e7fe      	b.n	8004c1e <prvProcessReceivedCommands+0x2e>
 8004c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c26:	6850      	ldr	r0, [r2, #4]
 8004c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c2a:	6892      	ldr	r2, [r2, #8]
 8004c2c:	4611      	mov	r1, r2
 8004c2e:	4798      	blx	r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f2c0 80ab 	blt.w	8004d8e <prvProcessReceivedCommands+0x19e>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d004      	beq.n	8004c4e <prvProcessReceivedCommands+0x5e>
 8004c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c46:	3304      	adds	r3, #4
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7fd fdab 	bl	80027a4 <uxListRemove>
 8004c4e:	463b      	mov	r3, r7
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7ff ff6b 	bl	8004b2c <prvSampleTimeNow>
 8004c56:	6278      	str	r0, [r7, #36]	; 0x24
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b09      	cmp	r3, #9
 8004c5c:	f200 8096 	bhi.w	8004d8c <prvProcessReceivedCommands+0x19c>
 8004c60:	a201      	add	r2, pc, #4	; (adr r2, 8004c68 <prvProcessReceivedCommands+0x78>)
 8004c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c66:	bf00      	nop
 8004c68:	08004c91 	.word	0x08004c91
 8004c6c:	08004c91 	.word	0x08004c91
 8004c70:	08004c91 	.word	0x08004c91
 8004c74:	08004d05 	.word	0x08004d05
 8004c78:	08004d19 	.word	0x08004d19
 8004c7c:	08004d63 	.word	0x08004d63
 8004c80:	08004c91 	.word	0x08004c91
 8004c84:	08004c91 	.word	0x08004c91
 8004c88:	08004d05 	.word	0x08004d05
 8004c8c:	08004d19 	.word	0x08004d19
 8004c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c96:	f043 0301 	orr.w	r3, r3, #1
 8004c9a:	b2da      	uxtb	r2, r3
 8004c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	18d1      	adds	r1, r2, r3
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cb0:	f7ff ff5c 	bl	8004b6c <prvInsertTimerInActiveList>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d069      	beq.n	8004d8e <prvProcessReceivedCommands+0x19e>
 8004cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cc0:	4798      	blx	r3
 8004cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cc8:	f003 0304 	and.w	r3, r3, #4
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d05e      	beq.n	8004d8e <prvProcessReceivedCommands+0x19e>
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	441a      	add	r2, r3
 8004cd8:	2300      	movs	r3, #0
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	2300      	movs	r3, #0
 8004cde:	2100      	movs	r1, #0
 8004ce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ce2:	f7ff fe05 	bl	80048f0 <xTimerGenericCommand>
 8004ce6:	6238      	str	r0, [r7, #32]
 8004ce8:	6a3b      	ldr	r3, [r7, #32]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d14f      	bne.n	8004d8e <prvProcessReceivedCommands+0x19e>
 8004cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf2:	f383 8811 	msr	BASEPRI, r3
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	f3bf 8f4f 	dsb	sy
 8004cfe:	61bb      	str	r3, [r7, #24]
 8004d00:	bf00      	nop
 8004d02:	e7fe      	b.n	8004d02 <prvProcessReceivedCommands+0x112>
 8004d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d0a:	f023 0301 	bic.w	r3, r3, #1
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004d16:	e03a      	b.n	8004d8e <prvProcessReceivedCommands+0x19e>
 8004d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d1e:	f043 0301 	orr.w	r3, r3, #1
 8004d22:	b2da      	uxtb	r2, r3
 8004d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2e:	619a      	str	r2, [r3, #24]
 8004d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10a      	bne.n	8004d4e <prvProcessReceivedCommands+0x15e>
 8004d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3c:	f383 8811 	msr	BASEPRI, r3
 8004d40:	f3bf 8f6f 	isb	sy
 8004d44:	f3bf 8f4f 	dsb	sy
 8004d48:	617b      	str	r3, [r7, #20]
 8004d4a:	bf00      	nop
 8004d4c:	e7fe      	b.n	8004d4c <prvProcessReceivedCommands+0x15c>
 8004d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d50:	699a      	ldr	r2, [r3, #24]
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	18d1      	adds	r1, r2, r3
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d5c:	f7ff ff06 	bl	8004b6c <prvInsertTimerInActiveList>
 8004d60:	e015      	b.n	8004d8e <prvProcessReceivedCommands+0x19e>
 8004d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d103      	bne.n	8004d78 <prvProcessReceivedCommands+0x188>
 8004d70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d72:	f000 fbdd 	bl	8005530 <vPortFree>
 8004d76:	e00a      	b.n	8004d8e <prvProcessReceivedCommands+0x19e>
 8004d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d7e:	f023 0301 	bic.w	r3, r3, #1
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004d8a:	e000      	b.n	8004d8e <prvProcessReceivedCommands+0x19e>
 8004d8c:	bf00      	nop
 8004d8e:	4b08      	ldr	r3, [pc, #32]	; (8004db0 <prvProcessReceivedCommands+0x1c0>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	1d39      	adds	r1, r7, #4
 8004d94:	2200      	movs	r2, #0
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fe f8fc 	bl	8002f94 <xQueueReceive>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f47f af2a 	bne.w	8004bf8 <prvProcessReceivedCommands+0x8>
 8004da4:	bf00      	nop
 8004da6:	bf00      	nop
 8004da8:	3730      	adds	r7, #48	; 0x30
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	20000da8 	.word	0x20000da8

08004db4 <prvSwitchTimerLists>:
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b088      	sub	sp, #32
 8004db8:	af02      	add	r7, sp, #8
 8004dba:	e048      	b.n	8004e4e <prvSwitchTimerLists+0x9a>
 8004dbc:	4b2d      	ldr	r3, [pc, #180]	; (8004e74 <prvSwitchTimerLists+0xc0>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	613b      	str	r3, [r7, #16]
 8004dc6:	4b2b      	ldr	r3, [pc, #172]	; (8004e74 <prvSwitchTimerLists+0xc0>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	60fb      	str	r3, [r7, #12]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	3304      	adds	r3, #4
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7fd fce5 	bl	80027a4 <uxListRemove>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	4798      	blx	r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d02e      	beq.n	8004e4e <prvSwitchTimerLists+0x9a>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	4413      	add	r3, r2
 8004df8:	60bb      	str	r3, [r7, #8]
 8004dfa:	68ba      	ldr	r2, [r7, #8]
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d90e      	bls.n	8004e20 <prvSwitchTimerLists+0x6c>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	605a      	str	r2, [r3, #4]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	611a      	str	r2, [r3, #16]
 8004e0e:	4b19      	ldr	r3, [pc, #100]	; (8004e74 <prvSwitchTimerLists+0xc0>)
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	3304      	adds	r3, #4
 8004e16:	4619      	mov	r1, r3
 8004e18:	4610      	mov	r0, r2
 8004e1a:	f7fd fc8a 	bl	8002732 <vListInsert>
 8004e1e:	e016      	b.n	8004e4e <prvSwitchTimerLists+0x9a>
 8004e20:	2300      	movs	r3, #0
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	2300      	movs	r3, #0
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	2100      	movs	r1, #0
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f7ff fd60 	bl	80048f0 <xTimerGenericCommand>
 8004e30:	6078      	str	r0, [r7, #4]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10a      	bne.n	8004e4e <prvSwitchTimerLists+0x9a>
 8004e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3c:	f383 8811 	msr	BASEPRI, r3
 8004e40:	f3bf 8f6f 	isb	sy
 8004e44:	f3bf 8f4f 	dsb	sy
 8004e48:	603b      	str	r3, [r7, #0]
 8004e4a:	bf00      	nop
 8004e4c:	e7fe      	b.n	8004e4c <prvSwitchTimerLists+0x98>
 8004e4e:	4b09      	ldr	r3, [pc, #36]	; (8004e74 <prvSwitchTimerLists+0xc0>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1b1      	bne.n	8004dbc <prvSwitchTimerLists+0x8>
 8004e58:	4b06      	ldr	r3, [pc, #24]	; (8004e74 <prvSwitchTimerLists+0xc0>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	617b      	str	r3, [r7, #20]
 8004e5e:	4b06      	ldr	r3, [pc, #24]	; (8004e78 <prvSwitchTimerLists+0xc4>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a04      	ldr	r2, [pc, #16]	; (8004e74 <prvSwitchTimerLists+0xc0>)
 8004e64:	6013      	str	r3, [r2, #0]
 8004e66:	4a04      	ldr	r2, [pc, #16]	; (8004e78 <prvSwitchTimerLists+0xc4>)
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	6013      	str	r3, [r2, #0]
 8004e6c:	bf00      	nop
 8004e6e:	3718      	adds	r7, #24
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	20000da0 	.word	0x20000da0
 8004e78:	20000da4 	.word	0x20000da4

08004e7c <prvCheckForValidListAndQueue>:
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af02      	add	r7, sp, #8
 8004e82:	f000 f967 	bl	8005154 <vPortEnterCritical>
 8004e86:	4b15      	ldr	r3, [pc, #84]	; (8004edc <prvCheckForValidListAndQueue+0x60>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d120      	bne.n	8004ed0 <prvCheckForValidListAndQueue+0x54>
 8004e8e:	4814      	ldr	r0, [pc, #80]	; (8004ee0 <prvCheckForValidListAndQueue+0x64>)
 8004e90:	f7fd fbfe 	bl	8002690 <vListInitialise>
 8004e94:	4813      	ldr	r0, [pc, #76]	; (8004ee4 <prvCheckForValidListAndQueue+0x68>)
 8004e96:	f7fd fbfb 	bl	8002690 <vListInitialise>
 8004e9a:	4b13      	ldr	r3, [pc, #76]	; (8004ee8 <prvCheckForValidListAndQueue+0x6c>)
 8004e9c:	4a10      	ldr	r2, [pc, #64]	; (8004ee0 <prvCheckForValidListAndQueue+0x64>)
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	4b12      	ldr	r3, [pc, #72]	; (8004eec <prvCheckForValidListAndQueue+0x70>)
 8004ea2:	4a10      	ldr	r2, [pc, #64]	; (8004ee4 <prvCheckForValidListAndQueue+0x68>)
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	4b11      	ldr	r3, [pc, #68]	; (8004ef0 <prvCheckForValidListAndQueue+0x74>)
 8004eac:	4a11      	ldr	r2, [pc, #68]	; (8004ef4 <prvCheckForValidListAndQueue+0x78>)
 8004eae:	2110      	movs	r1, #16
 8004eb0:	200a      	movs	r0, #10
 8004eb2:	f7fd fd09 	bl	80028c8 <xQueueGenericCreateStatic>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	4a08      	ldr	r2, [pc, #32]	; (8004edc <prvCheckForValidListAndQueue+0x60>)
 8004eba:	6013      	str	r3, [r2, #0]
 8004ebc:	4b07      	ldr	r3, [pc, #28]	; (8004edc <prvCheckForValidListAndQueue+0x60>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d005      	beq.n	8004ed0 <prvCheckForValidListAndQueue+0x54>
 8004ec4:	4b05      	ldr	r3, [pc, #20]	; (8004edc <prvCheckForValidListAndQueue+0x60>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	490b      	ldr	r1, [pc, #44]	; (8004ef8 <prvCheckForValidListAndQueue+0x7c>)
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fe fc1a 	bl	8003704 <vQueueAddToRegistry>
 8004ed0:	f000 f970 	bl	80051b4 <vPortExitCritical>
 8004ed4:	bf00      	nop
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	20000da8 	.word	0x20000da8
 8004ee0:	20000d78 	.word	0x20000d78
 8004ee4:	20000d8c 	.word	0x20000d8c
 8004ee8:	20000da0 	.word	0x20000da0
 8004eec:	20000da4 	.word	0x20000da4
 8004ef0:	20000e54 	.word	0x20000e54
 8004ef4:	20000db4 	.word	0x20000db4
 8004ef8:	080067d8 	.word	0x080067d8

08004efc <pxPortInitialiseStack>:
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	3b04      	subs	r3, #4
 8004f0c:	60fb      	str	r3, [r7, #12]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3b04      	subs	r3, #4
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	f023 0201 	bic.w	r2, r3, #1
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	3b04      	subs	r3, #4
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	4a0c      	ldr	r2, [pc, #48]	; (8004f60 <pxPortInitialiseStack+0x64>)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	3b14      	subs	r3, #20
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	3b04      	subs	r3, #4
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f06f 0202 	mvn.w	r2, #2
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	3b20      	subs	r3, #32
 8004f50:	60fb      	str	r3, [r7, #12]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	4618      	mov	r0, r3
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	08004f65 	.word	0x08004f65

08004f64 <prvTaskExitError>:
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	607b      	str	r3, [r7, #4]
 8004f6e:	4b12      	ldr	r3, [pc, #72]	; (8004fb8 <prvTaskExitError+0x54>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f76:	d00a      	beq.n	8004f8e <prvTaskExitError+0x2a>
 8004f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7c:	f383 8811 	msr	BASEPRI, r3
 8004f80:	f3bf 8f6f 	isb	sy
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	60fb      	str	r3, [r7, #12]
 8004f8a:	bf00      	nop
 8004f8c:	e7fe      	b.n	8004f8c <prvTaskExitError+0x28>
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	60bb      	str	r3, [r7, #8]
 8004fa0:	bf00      	nop
 8004fa2:	bf00      	nop
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0fc      	beq.n	8004fa4 <prvTaskExitError+0x40>
 8004faa:	bf00      	nop
 8004fac:	bf00      	nop
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	2000000c 	.word	0x2000000c
 8004fbc:	00000000 	.word	0x00000000

08004fc0 <SVC_Handler>:
 8004fc0:	4b07      	ldr	r3, [pc, #28]	; (8004fe0 <pxCurrentTCBConst2>)
 8004fc2:	6819      	ldr	r1, [r3, #0]
 8004fc4:	6808      	ldr	r0, [r1, #0]
 8004fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fca:	f380 8809 	msr	PSP, r0
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f04f 0000 	mov.w	r0, #0
 8004fd6:	f380 8811 	msr	BASEPRI, r0
 8004fda:	4770      	bx	lr
 8004fdc:	f3af 8000 	nop.w

08004fe0 <pxCurrentTCBConst2>:
 8004fe0:	20000878 	.word	0x20000878
 8004fe4:	bf00      	nop
 8004fe6:	bf00      	nop

08004fe8 <prvPortStartFirstTask>:
 8004fe8:	4808      	ldr	r0, [pc, #32]	; (800500c <prvPortStartFirstTask+0x24>)
 8004fea:	6800      	ldr	r0, [r0, #0]
 8004fec:	6800      	ldr	r0, [r0, #0]
 8004fee:	f380 8808 	msr	MSP, r0
 8004ff2:	f04f 0000 	mov.w	r0, #0
 8004ff6:	f380 8814 	msr	CONTROL, r0
 8004ffa:	b662      	cpsie	i
 8004ffc:	b661      	cpsie	f
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	f3bf 8f6f 	isb	sy
 8005006:	df00      	svc	0
 8005008:	bf00      	nop
 800500a:	bf00      	nop
 800500c:	e000ed08 	.word	0xe000ed08

08005010 <xPortStartScheduler>:
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	4b46      	ldr	r3, [pc, #280]	; (8005130 <xPortStartScheduler+0x120>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a46      	ldr	r2, [pc, #280]	; (8005134 <xPortStartScheduler+0x124>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d10a      	bne.n	8005036 <xPortStartScheduler+0x26>
 8005020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	613b      	str	r3, [r7, #16]
 8005032:	bf00      	nop
 8005034:	e7fe      	b.n	8005034 <xPortStartScheduler+0x24>
 8005036:	4b3e      	ldr	r3, [pc, #248]	; (8005130 <xPortStartScheduler+0x120>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a3f      	ldr	r2, [pc, #252]	; (8005138 <xPortStartScheduler+0x128>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d10a      	bne.n	8005056 <xPortStartScheduler+0x46>
 8005040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005044:	f383 8811 	msr	BASEPRI, r3
 8005048:	f3bf 8f6f 	isb	sy
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	60fb      	str	r3, [r7, #12]
 8005052:	bf00      	nop
 8005054:	e7fe      	b.n	8005054 <xPortStartScheduler+0x44>
 8005056:	4b39      	ldr	r3, [pc, #228]	; (800513c <xPortStartScheduler+0x12c>)
 8005058:	617b      	str	r3, [r7, #20]
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	b2db      	uxtb	r3, r3
 8005060:	607b      	str	r3, [r7, #4]
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	22ff      	movs	r2, #255	; 0xff
 8005066:	701a      	strb	r2, [r3, #0]
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	b2db      	uxtb	r3, r3
 800506e:	70fb      	strb	r3, [r7, #3]
 8005070:	78fb      	ldrb	r3, [r7, #3]
 8005072:	b2db      	uxtb	r3, r3
 8005074:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005078:	b2da      	uxtb	r2, r3
 800507a:	4b31      	ldr	r3, [pc, #196]	; (8005140 <xPortStartScheduler+0x130>)
 800507c:	701a      	strb	r2, [r3, #0]
 800507e:	4b31      	ldr	r3, [pc, #196]	; (8005144 <xPortStartScheduler+0x134>)
 8005080:	2207      	movs	r2, #7
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	e009      	b.n	800509a <xPortStartScheduler+0x8a>
 8005086:	4b2f      	ldr	r3, [pc, #188]	; (8005144 <xPortStartScheduler+0x134>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	3b01      	subs	r3, #1
 800508c:	4a2d      	ldr	r2, [pc, #180]	; (8005144 <xPortStartScheduler+0x134>)
 800508e:	6013      	str	r3, [r2, #0]
 8005090:	78fb      	ldrb	r3, [r7, #3]
 8005092:	b2db      	uxtb	r3, r3
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	b2db      	uxtb	r3, r3
 8005098:	70fb      	strb	r3, [r7, #3]
 800509a:	78fb      	ldrb	r3, [r7, #3]
 800509c:	b2db      	uxtb	r3, r3
 800509e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a2:	2b80      	cmp	r3, #128	; 0x80
 80050a4:	d0ef      	beq.n	8005086 <xPortStartScheduler+0x76>
 80050a6:	4b27      	ldr	r3, [pc, #156]	; (8005144 <xPortStartScheduler+0x134>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f1c3 0307 	rsb	r3, r3, #7
 80050ae:	2b04      	cmp	r3, #4
 80050b0:	d00a      	beq.n	80050c8 <xPortStartScheduler+0xb8>
 80050b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b6:	f383 8811 	msr	BASEPRI, r3
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	60bb      	str	r3, [r7, #8]
 80050c4:	bf00      	nop
 80050c6:	e7fe      	b.n	80050c6 <xPortStartScheduler+0xb6>
 80050c8:	4b1e      	ldr	r3, [pc, #120]	; (8005144 <xPortStartScheduler+0x134>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	021b      	lsls	r3, r3, #8
 80050ce:	4a1d      	ldr	r2, [pc, #116]	; (8005144 <xPortStartScheduler+0x134>)
 80050d0:	6013      	str	r3, [r2, #0]
 80050d2:	4b1c      	ldr	r3, [pc, #112]	; (8005144 <xPortStartScheduler+0x134>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050da:	4a1a      	ldr	r2, [pc, #104]	; (8005144 <xPortStartScheduler+0x134>)
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	701a      	strb	r2, [r3, #0]
 80050e6:	4b18      	ldr	r3, [pc, #96]	; (8005148 <xPortStartScheduler+0x138>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a17      	ldr	r2, [pc, #92]	; (8005148 <xPortStartScheduler+0x138>)
 80050ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	4b15      	ldr	r3, [pc, #84]	; (8005148 <xPortStartScheduler+0x138>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a14      	ldr	r2, [pc, #80]	; (8005148 <xPortStartScheduler+0x138>)
 80050f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	f000 f8dd 	bl	80052bc <vPortSetupTimerInterrupt>
 8005102:	4b12      	ldr	r3, [pc, #72]	; (800514c <xPortStartScheduler+0x13c>)
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	f000 f8fc 	bl	8005304 <vPortEnableVFP>
 800510c:	4b10      	ldr	r3, [pc, #64]	; (8005150 <xPortStartScheduler+0x140>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a0f      	ldr	r2, [pc, #60]	; (8005150 <xPortStartScheduler+0x140>)
 8005112:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005116:	6013      	str	r3, [r2, #0]
 8005118:	f7ff ff66 	bl	8004fe8 <prvPortStartFirstTask>
 800511c:	f7fe ff4c 	bl	8003fb8 <vTaskSwitchContext>
 8005120:	f7ff ff20 	bl	8004f64 <prvTaskExitError>
 8005124:	2300      	movs	r3, #0
 8005126:	4618      	mov	r0, r3
 8005128:	3718      	adds	r7, #24
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	e000ed00 	.word	0xe000ed00
 8005134:	410fc271 	.word	0x410fc271
 8005138:	410fc270 	.word	0x410fc270
 800513c:	e000e400 	.word	0xe000e400
 8005140:	20000ea4 	.word	0x20000ea4
 8005144:	20000ea8 	.word	0x20000ea8
 8005148:	e000ed20 	.word	0xe000ed20
 800514c:	2000000c 	.word	0x2000000c
 8005150:	e000ef34 	.word	0xe000ef34

08005154 <vPortEnterCritical>:
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515e:	f383 8811 	msr	BASEPRI, r3
 8005162:	f3bf 8f6f 	isb	sy
 8005166:	f3bf 8f4f 	dsb	sy
 800516a:	607b      	str	r3, [r7, #4]
 800516c:	bf00      	nop
 800516e:	4b0f      	ldr	r3, [pc, #60]	; (80051ac <vPortEnterCritical+0x58>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	3301      	adds	r3, #1
 8005174:	4a0d      	ldr	r2, [pc, #52]	; (80051ac <vPortEnterCritical+0x58>)
 8005176:	6013      	str	r3, [r2, #0]
 8005178:	4b0c      	ldr	r3, [pc, #48]	; (80051ac <vPortEnterCritical+0x58>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d10f      	bne.n	80051a0 <vPortEnterCritical+0x4c>
 8005180:	4b0b      	ldr	r3, [pc, #44]	; (80051b0 <vPortEnterCritical+0x5c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00a      	beq.n	80051a0 <vPortEnterCritical+0x4c>
 800518a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518e:	f383 8811 	msr	BASEPRI, r3
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	603b      	str	r3, [r7, #0]
 800519c:	bf00      	nop
 800519e:	e7fe      	b.n	800519e <vPortEnterCritical+0x4a>
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	2000000c 	.word	0x2000000c
 80051b0:	e000ed04 	.word	0xe000ed04

080051b4 <vPortExitCritical>:
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	4b12      	ldr	r3, [pc, #72]	; (8005204 <vPortExitCritical+0x50>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10a      	bne.n	80051d8 <vPortExitCritical+0x24>
 80051c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	607b      	str	r3, [r7, #4]
 80051d4:	bf00      	nop
 80051d6:	e7fe      	b.n	80051d6 <vPortExitCritical+0x22>
 80051d8:	4b0a      	ldr	r3, [pc, #40]	; (8005204 <vPortExitCritical+0x50>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	3b01      	subs	r3, #1
 80051de:	4a09      	ldr	r2, [pc, #36]	; (8005204 <vPortExitCritical+0x50>)
 80051e0:	6013      	str	r3, [r2, #0]
 80051e2:	4b08      	ldr	r3, [pc, #32]	; (8005204 <vPortExitCritical+0x50>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d105      	bne.n	80051f6 <vPortExitCritical+0x42>
 80051ea:	2300      	movs	r3, #0
 80051ec:	603b      	str	r3, [r7, #0]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	f383 8811 	msr	BASEPRI, r3
 80051f4:	bf00      	nop
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	2000000c 	.word	0x2000000c
	...

08005210 <PendSV_Handler>:
 8005210:	f3ef 8009 	mrs	r0, PSP
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	4b15      	ldr	r3, [pc, #84]	; (8005270 <pxCurrentTCBConst>)
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	f01e 0f10 	tst.w	lr, #16
 8005220:	bf08      	it	eq
 8005222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800522a:	6010      	str	r0, [r2, #0]
 800522c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005230:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005234:	f380 8811 	msr	BASEPRI, r0
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f7fe feba 	bl	8003fb8 <vTaskSwitchContext>
 8005244:	f04f 0000 	mov.w	r0, #0
 8005248:	f380 8811 	msr	BASEPRI, r0
 800524c:	bc09      	pop	{r0, r3}
 800524e:	6819      	ldr	r1, [r3, #0]
 8005250:	6808      	ldr	r0, [r1, #0]
 8005252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005256:	f01e 0f10 	tst.w	lr, #16
 800525a:	bf08      	it	eq
 800525c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005260:	f380 8809 	msr	PSP, r0
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	f3af 8000 	nop.w

08005270 <pxCurrentTCBConst>:
 8005270:	20000878 	.word	0x20000878
 8005274:	bf00      	nop
 8005276:	bf00      	nop

08005278 <xPortSysTickHandler>:
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	607b      	str	r3, [r7, #4]
 8005290:	bf00      	nop
 8005292:	f7fe fdd7 	bl	8003e44 <xTaskIncrementTick>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d003      	beq.n	80052a4 <xPortSysTickHandler+0x2c>
 800529c:	4b06      	ldr	r3, [pc, #24]	; (80052b8 <xPortSysTickHandler+0x40>)
 800529e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	2300      	movs	r3, #0
 80052a6:	603b      	str	r3, [r7, #0]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	f383 8811 	msr	BASEPRI, r3
 80052ae:	bf00      	nop
 80052b0:	bf00      	nop
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	e000ed04 	.word	0xe000ed04

080052bc <vPortSetupTimerInterrupt>:
 80052bc:	b480      	push	{r7}
 80052be:	af00      	add	r7, sp, #0
 80052c0:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <vPortSetupTimerInterrupt+0x34>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	4b0b      	ldr	r3, [pc, #44]	; (80052f4 <vPortSetupTimerInterrupt+0x38>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]
 80052cc:	4b0a      	ldr	r3, [pc, #40]	; (80052f8 <vPortSetupTimerInterrupt+0x3c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a0a      	ldr	r2, [pc, #40]	; (80052fc <vPortSetupTimerInterrupt+0x40>)
 80052d2:	fba2 2303 	umull	r2, r3, r2, r3
 80052d6:	099b      	lsrs	r3, r3, #6
 80052d8:	4a09      	ldr	r2, [pc, #36]	; (8005300 <vPortSetupTimerInterrupt+0x44>)
 80052da:	3b01      	subs	r3, #1
 80052dc:	6013      	str	r3, [r2, #0]
 80052de:	4b04      	ldr	r3, [pc, #16]	; (80052f0 <vPortSetupTimerInterrupt+0x34>)
 80052e0:	2207      	movs	r2, #7
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	bf00      	nop
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	e000e010 	.word	0xe000e010
 80052f4:	e000e018 	.word	0xe000e018
 80052f8:	20000000 	.word	0x20000000
 80052fc:	10624dd3 	.word	0x10624dd3
 8005300:	e000e014 	.word	0xe000e014

08005304 <vPortEnableVFP>:
 8005304:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005314 <vPortEnableVFP+0x10>
 8005308:	6801      	ldr	r1, [r0, #0]
 800530a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800530e:	6001      	str	r1, [r0, #0]
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	e000ed88 	.word	0xe000ed88

08005318 <vPortValidateInterruptPriority>:
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	f3ef 8305 	mrs	r3, IPSR
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2b0f      	cmp	r3, #15
 8005328:	d914      	bls.n	8005354 <vPortValidateInterruptPriority+0x3c>
 800532a:	4a17      	ldr	r2, [pc, #92]	; (8005388 <vPortValidateInterruptPriority+0x70>)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4413      	add	r3, r2
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	72fb      	strb	r3, [r7, #11]
 8005334:	4b15      	ldr	r3, [pc, #84]	; (800538c <vPortValidateInterruptPriority+0x74>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	7afa      	ldrb	r2, [r7, #11]
 800533a:	429a      	cmp	r2, r3
 800533c:	d20a      	bcs.n	8005354 <vPortValidateInterruptPriority+0x3c>
 800533e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005342:	f383 8811 	msr	BASEPRI, r3
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	607b      	str	r3, [r7, #4]
 8005350:	bf00      	nop
 8005352:	e7fe      	b.n	8005352 <vPortValidateInterruptPriority+0x3a>
 8005354:	4b0e      	ldr	r3, [pc, #56]	; (8005390 <vPortValidateInterruptPriority+0x78>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800535c:	4b0d      	ldr	r3, [pc, #52]	; (8005394 <vPortValidateInterruptPriority+0x7c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	429a      	cmp	r2, r3
 8005362:	d90a      	bls.n	800537a <vPortValidateInterruptPriority+0x62>
 8005364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005368:	f383 8811 	msr	BASEPRI, r3
 800536c:	f3bf 8f6f 	isb	sy
 8005370:	f3bf 8f4f 	dsb	sy
 8005374:	603b      	str	r3, [r7, #0]
 8005376:	bf00      	nop
 8005378:	e7fe      	b.n	8005378 <vPortValidateInterruptPriority+0x60>
 800537a:	bf00      	nop
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	e000e3f0 	.word	0xe000e3f0
 800538c:	20000ea4 	.word	0x20000ea4
 8005390:	e000ed0c 	.word	0xe000ed0c
 8005394:	20000ea8 	.word	0x20000ea8

08005398 <pvPortMalloc>:
 8005398:	b580      	push	{r7, lr}
 800539a:	b08a      	sub	sp, #40	; 0x28
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	2300      	movs	r3, #0
 80053a2:	61fb      	str	r3, [r7, #28]
 80053a4:	f7fe fc92 	bl	8003ccc <vTaskSuspendAll>
 80053a8:	4b5b      	ldr	r3, [pc, #364]	; (8005518 <pvPortMalloc+0x180>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d101      	bne.n	80053b4 <pvPortMalloc+0x1c>
 80053b0:	f000 f920 	bl	80055f4 <prvHeapInit>
 80053b4:	4b59      	ldr	r3, [pc, #356]	; (800551c <pvPortMalloc+0x184>)
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4013      	ands	r3, r2
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f040 8093 	bne.w	80054e8 <pvPortMalloc+0x150>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d01d      	beq.n	8005404 <pvPortMalloc+0x6c>
 80053c8:	2208      	movs	r2, #8
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4413      	add	r3, r2
 80053ce:	607b      	str	r3, [r7, #4]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f003 0307 	and.w	r3, r3, #7
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d014      	beq.n	8005404 <pvPortMalloc+0x6c>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f023 0307 	bic.w	r3, r3, #7
 80053e0:	3308      	adds	r3, #8
 80053e2:	607b      	str	r3, [r7, #4]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f003 0307 	and.w	r3, r3, #7
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <pvPortMalloc+0x6c>
 80053ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f2:	f383 8811 	msr	BASEPRI, r3
 80053f6:	f3bf 8f6f 	isb	sy
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	617b      	str	r3, [r7, #20]
 8005400:	bf00      	nop
 8005402:	e7fe      	b.n	8005402 <pvPortMalloc+0x6a>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d06e      	beq.n	80054e8 <pvPortMalloc+0x150>
 800540a:	4b45      	ldr	r3, [pc, #276]	; (8005520 <pvPortMalloc+0x188>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	429a      	cmp	r2, r3
 8005412:	d869      	bhi.n	80054e8 <pvPortMalloc+0x150>
 8005414:	4b43      	ldr	r3, [pc, #268]	; (8005524 <pvPortMalloc+0x18c>)
 8005416:	623b      	str	r3, [r7, #32]
 8005418:	4b42      	ldr	r3, [pc, #264]	; (8005524 <pvPortMalloc+0x18c>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	627b      	str	r3, [r7, #36]	; 0x24
 800541e:	e004      	b.n	800542a <pvPortMalloc+0x92>
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	623b      	str	r3, [r7, #32]
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	627b      	str	r3, [r7, #36]	; 0x24
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	429a      	cmp	r2, r3
 8005432:	d903      	bls.n	800543c <pvPortMalloc+0xa4>
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1f1      	bne.n	8005420 <pvPortMalloc+0x88>
 800543c:	4b36      	ldr	r3, [pc, #216]	; (8005518 <pvPortMalloc+0x180>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005442:	429a      	cmp	r2, r3
 8005444:	d050      	beq.n	80054e8 <pvPortMalloc+0x150>
 8005446:	6a3b      	ldr	r3, [r7, #32]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2208      	movs	r2, #8
 800544c:	4413      	add	r3, r2
 800544e:	61fb      	str	r3, [r7, #28]
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	1ad2      	subs	r2, r2, r3
 8005460:	2308      	movs	r3, #8
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	429a      	cmp	r2, r3
 8005466:	d91f      	bls.n	80054a8 <pvPortMalloc+0x110>
 8005468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4413      	add	r3, r2
 800546e:	61bb      	str	r3, [r7, #24]
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	f003 0307 	and.w	r3, r3, #7
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00a      	beq.n	8005490 <pvPortMalloc+0xf8>
 800547a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547e:	f383 8811 	msr	BASEPRI, r3
 8005482:	f3bf 8f6f 	isb	sy
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	613b      	str	r3, [r7, #16]
 800548c:	bf00      	nop
 800548e:	e7fe      	b.n	800548e <pvPortMalloc+0xf6>
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	685a      	ldr	r2, [r3, #4]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	1ad2      	subs	r2, r2, r3
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	605a      	str	r2, [r3, #4]
 800549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	605a      	str	r2, [r3, #4]
 80054a2:	69b8      	ldr	r0, [r7, #24]
 80054a4:	f000 f908 	bl	80056b8 <prvInsertBlockIntoFreeList>
 80054a8:	4b1d      	ldr	r3, [pc, #116]	; (8005520 <pvPortMalloc+0x188>)
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	4a1b      	ldr	r2, [pc, #108]	; (8005520 <pvPortMalloc+0x188>)
 80054b4:	6013      	str	r3, [r2, #0]
 80054b6:	4b1a      	ldr	r3, [pc, #104]	; (8005520 <pvPortMalloc+0x188>)
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	4b1b      	ldr	r3, [pc, #108]	; (8005528 <pvPortMalloc+0x190>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d203      	bcs.n	80054ca <pvPortMalloc+0x132>
 80054c2:	4b17      	ldr	r3, [pc, #92]	; (8005520 <pvPortMalloc+0x188>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a18      	ldr	r2, [pc, #96]	; (8005528 <pvPortMalloc+0x190>)
 80054c8:	6013      	str	r3, [r2, #0]
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	4b13      	ldr	r3, [pc, #76]	; (800551c <pvPortMalloc+0x184>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	431a      	orrs	r2, r3
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	605a      	str	r2, [r3, #4]
 80054d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054da:	2200      	movs	r2, #0
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	4b13      	ldr	r3, [pc, #76]	; (800552c <pvPortMalloc+0x194>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	3301      	adds	r3, #1
 80054e4:	4a11      	ldr	r2, [pc, #68]	; (800552c <pvPortMalloc+0x194>)
 80054e6:	6013      	str	r3, [r2, #0]
 80054e8:	f7fe fbfe 	bl	8003ce8 <xTaskResumeAll>
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	f003 0307 	and.w	r3, r3, #7
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00a      	beq.n	800550c <pvPortMalloc+0x174>
 80054f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fa:	f383 8811 	msr	BASEPRI, r3
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	60fb      	str	r3, [r7, #12]
 8005508:	bf00      	nop
 800550a:	e7fe      	b.n	800550a <pvPortMalloc+0x172>
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	4618      	mov	r0, r3
 8005510:	3728      	adds	r7, #40	; 0x28
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	20004ab4 	.word	0x20004ab4
 800551c:	20004ac8 	.word	0x20004ac8
 8005520:	20004ab8 	.word	0x20004ab8
 8005524:	20004aac 	.word	0x20004aac
 8005528:	20004abc 	.word	0x20004abc
 800552c:	20004ac0 	.word	0x20004ac0

08005530 <vPortFree>:
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	617b      	str	r3, [r7, #20]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d04d      	beq.n	80055de <vPortFree+0xae>
 8005542:	2308      	movs	r3, #8
 8005544:	425b      	negs	r3, r3
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	4413      	add	r3, r2
 800554a:	617b      	str	r3, [r7, #20]
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	613b      	str	r3, [r7, #16]
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	4b24      	ldr	r3, [pc, #144]	; (80055e8 <vPortFree+0xb8>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4013      	ands	r3, r2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10a      	bne.n	8005574 <vPortFree+0x44>
 800555e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	60fb      	str	r3, [r7, #12]
 8005570:	bf00      	nop
 8005572:	e7fe      	b.n	8005572 <vPortFree+0x42>
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00a      	beq.n	8005592 <vPortFree+0x62>
 800557c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005580:	f383 8811 	msr	BASEPRI, r3
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	60bb      	str	r3, [r7, #8]
 800558e:	bf00      	nop
 8005590:	e7fe      	b.n	8005590 <vPortFree+0x60>
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	4b14      	ldr	r3, [pc, #80]	; (80055e8 <vPortFree+0xb8>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4013      	ands	r3, r2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d01e      	beq.n	80055de <vPortFree+0xae>
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d11a      	bne.n	80055de <vPortFree+0xae>
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	4b0e      	ldr	r3, [pc, #56]	; (80055e8 <vPortFree+0xb8>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	43db      	mvns	r3, r3
 80055b2:	401a      	ands	r2, r3
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	605a      	str	r2, [r3, #4]
 80055b8:	f7fe fb88 	bl	8003ccc <vTaskSuspendAll>
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	4b0a      	ldr	r3, [pc, #40]	; (80055ec <vPortFree+0xbc>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4413      	add	r3, r2
 80055c6:	4a09      	ldr	r2, [pc, #36]	; (80055ec <vPortFree+0xbc>)
 80055c8:	6013      	str	r3, [r2, #0]
 80055ca:	6938      	ldr	r0, [r7, #16]
 80055cc:	f000 f874 	bl	80056b8 <prvInsertBlockIntoFreeList>
 80055d0:	4b07      	ldr	r3, [pc, #28]	; (80055f0 <vPortFree+0xc0>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3301      	adds	r3, #1
 80055d6:	4a06      	ldr	r2, [pc, #24]	; (80055f0 <vPortFree+0xc0>)
 80055d8:	6013      	str	r3, [r2, #0]
 80055da:	f7fe fb85 	bl	8003ce8 <xTaskResumeAll>
 80055de:	bf00      	nop
 80055e0:	3718      	adds	r7, #24
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	20004ac8 	.word	0x20004ac8
 80055ec:	20004ab8 	.word	0x20004ab8
 80055f0:	20004ac4 	.word	0x20004ac4

080055f4 <prvHeapInit>:
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80055fe:	60bb      	str	r3, [r7, #8]
 8005600:	4b27      	ldr	r3, [pc, #156]	; (80056a0 <prvHeapInit+0xac>)
 8005602:	60fb      	str	r3, [r7, #12]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f003 0307 	and.w	r3, r3, #7
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00c      	beq.n	8005628 <prvHeapInit+0x34>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	3307      	adds	r3, #7
 8005612:	60fb      	str	r3, [r7, #12]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f023 0307 	bic.w	r3, r3, #7
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	4a1f      	ldr	r2, [pc, #124]	; (80056a0 <prvHeapInit+0xac>)
 8005624:	4413      	add	r3, r2
 8005626:	60bb      	str	r3, [r7, #8]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	607b      	str	r3, [r7, #4]
 800562c:	4a1d      	ldr	r2, [pc, #116]	; (80056a4 <prvHeapInit+0xb0>)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6013      	str	r3, [r2, #0]
 8005632:	4b1c      	ldr	r3, [pc, #112]	; (80056a4 <prvHeapInit+0xb0>)
 8005634:	2200      	movs	r2, #0
 8005636:	605a      	str	r2, [r3, #4]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	4413      	add	r3, r2
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	2208      	movs	r2, #8
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	1a9b      	subs	r3, r3, r2
 8005646:	60fb      	str	r3, [r7, #12]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f023 0307 	bic.w	r3, r3, #7
 800564e:	60fb      	str	r3, [r7, #12]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4a15      	ldr	r2, [pc, #84]	; (80056a8 <prvHeapInit+0xb4>)
 8005654:	6013      	str	r3, [r2, #0]
 8005656:	4b14      	ldr	r3, [pc, #80]	; (80056a8 <prvHeapInit+0xb4>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2200      	movs	r2, #0
 800565c:	605a      	str	r2, [r3, #4]
 800565e:	4b12      	ldr	r3, [pc, #72]	; (80056a8 <prvHeapInit+0xb4>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2200      	movs	r2, #0
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	603b      	str	r3, [r7, #0]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	1ad2      	subs	r2, r2, r3
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	605a      	str	r2, [r3, #4]
 8005674:	4b0c      	ldr	r3, [pc, #48]	; (80056a8 <prvHeapInit+0xb4>)
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	601a      	str	r2, [r3, #0]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	4a0a      	ldr	r2, [pc, #40]	; (80056ac <prvHeapInit+0xb8>)
 8005682:	6013      	str	r3, [r2, #0]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	4a09      	ldr	r2, [pc, #36]	; (80056b0 <prvHeapInit+0xbc>)
 800568a:	6013      	str	r3, [r2, #0]
 800568c:	4b09      	ldr	r3, [pc, #36]	; (80056b4 <prvHeapInit+0xc0>)
 800568e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005692:	601a      	str	r2, [r3, #0]
 8005694:	bf00      	nop
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	20000eac 	.word	0x20000eac
 80056a4:	20004aac 	.word	0x20004aac
 80056a8:	20004ab4 	.word	0x20004ab4
 80056ac:	20004abc 	.word	0x20004abc
 80056b0:	20004ab8 	.word	0x20004ab8
 80056b4:	20004ac8 	.word	0x20004ac8

080056b8 <prvInsertBlockIntoFreeList>:
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	4b28      	ldr	r3, [pc, #160]	; (8005764 <prvInsertBlockIntoFreeList+0xac>)
 80056c2:	60fb      	str	r3, [r7, #12]
 80056c4:	e002      	b.n	80056cc <prvInsertBlockIntoFreeList+0x14>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	60fb      	str	r3, [r7, #12]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d8f7      	bhi.n	80056c6 <prvInsertBlockIntoFreeList+0xe>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	60bb      	str	r3, [r7, #8]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	4413      	add	r3, r2
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d108      	bne.n	80056fa <prvInsertBlockIntoFreeList+0x42>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	441a      	add	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	605a      	str	r2, [r3, #4]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	607b      	str	r3, [r7, #4]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	60bb      	str	r3, [r7, #8]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	441a      	add	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	429a      	cmp	r2, r3
 800570c:	d118      	bne.n	8005740 <prvInsertBlockIntoFreeList+0x88>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	4b15      	ldr	r3, [pc, #84]	; (8005768 <prvInsertBlockIntoFreeList+0xb0>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	429a      	cmp	r2, r3
 8005718:	d00d      	beq.n	8005736 <prvInsertBlockIntoFreeList+0x7e>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	441a      	add	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	605a      	str	r2, [r3, #4]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	e008      	b.n	8005748 <prvInsertBlockIntoFreeList+0x90>
 8005736:	4b0c      	ldr	r3, [pc, #48]	; (8005768 <prvInsertBlockIntoFreeList+0xb0>)
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	e003      	b.n	8005748 <prvInsertBlockIntoFreeList+0x90>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	429a      	cmp	r2, r3
 800574e:	d002      	beq.n	8005756 <prvInsertBlockIntoFreeList+0x9e>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	601a      	str	r2, [r3, #0]
 8005756:	bf00      	nop
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	20004aac 	.word	0x20004aac
 8005768:	20004ab4 	.word	0x20004ab4

0800576c <std>:
 800576c:	2300      	movs	r3, #0
 800576e:	b510      	push	{r4, lr}
 8005770:	4604      	mov	r4, r0
 8005772:	e9c0 3300 	strd	r3, r3, [r0]
 8005776:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800577a:	6083      	str	r3, [r0, #8]
 800577c:	8181      	strh	r1, [r0, #12]
 800577e:	6643      	str	r3, [r0, #100]	; 0x64
 8005780:	81c2      	strh	r2, [r0, #14]
 8005782:	6183      	str	r3, [r0, #24]
 8005784:	4619      	mov	r1, r3
 8005786:	2208      	movs	r2, #8
 8005788:	305c      	adds	r0, #92	; 0x5c
 800578a:	f000 f9f7 	bl	8005b7c <memset>
 800578e:	4b0d      	ldr	r3, [pc, #52]	; (80057c4 <std+0x58>)
 8005790:	6263      	str	r3, [r4, #36]	; 0x24
 8005792:	4b0d      	ldr	r3, [pc, #52]	; (80057c8 <std+0x5c>)
 8005794:	62a3      	str	r3, [r4, #40]	; 0x28
 8005796:	4b0d      	ldr	r3, [pc, #52]	; (80057cc <std+0x60>)
 8005798:	62e3      	str	r3, [r4, #44]	; 0x2c
 800579a:	4b0d      	ldr	r3, [pc, #52]	; (80057d0 <std+0x64>)
 800579c:	6323      	str	r3, [r4, #48]	; 0x30
 800579e:	4b0d      	ldr	r3, [pc, #52]	; (80057d4 <std+0x68>)
 80057a0:	6224      	str	r4, [r4, #32]
 80057a2:	429c      	cmp	r4, r3
 80057a4:	d006      	beq.n	80057b4 <std+0x48>
 80057a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80057aa:	4294      	cmp	r4, r2
 80057ac:	d002      	beq.n	80057b4 <std+0x48>
 80057ae:	33d0      	adds	r3, #208	; 0xd0
 80057b0:	429c      	cmp	r4, r3
 80057b2:	d105      	bne.n	80057c0 <std+0x54>
 80057b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80057b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057bc:	f000 baac 	b.w	8005d18 <__retarget_lock_init_recursive>
 80057c0:	bd10      	pop	{r4, pc}
 80057c2:	bf00      	nop
 80057c4:	080059cd 	.word	0x080059cd
 80057c8:	080059ef 	.word	0x080059ef
 80057cc:	08005a27 	.word	0x08005a27
 80057d0:	08005a4b 	.word	0x08005a4b
 80057d4:	20004acc 	.word	0x20004acc

080057d8 <stdio_exit_handler>:
 80057d8:	4a02      	ldr	r2, [pc, #8]	; (80057e4 <stdio_exit_handler+0xc>)
 80057da:	4903      	ldr	r1, [pc, #12]	; (80057e8 <stdio_exit_handler+0x10>)
 80057dc:	4803      	ldr	r0, [pc, #12]	; (80057ec <stdio_exit_handler+0x14>)
 80057de:	f000 b869 	b.w	80058b4 <_fwalk_sglue>
 80057e2:	bf00      	nop
 80057e4:	20000010 	.word	0x20000010
 80057e8:	080065e1 	.word	0x080065e1
 80057ec:	2000001c 	.word	0x2000001c

080057f0 <cleanup_stdio>:
 80057f0:	6841      	ldr	r1, [r0, #4]
 80057f2:	4b0c      	ldr	r3, [pc, #48]	; (8005824 <cleanup_stdio+0x34>)
 80057f4:	4299      	cmp	r1, r3
 80057f6:	b510      	push	{r4, lr}
 80057f8:	4604      	mov	r4, r0
 80057fa:	d001      	beq.n	8005800 <cleanup_stdio+0x10>
 80057fc:	f000 fef0 	bl	80065e0 <_fflush_r>
 8005800:	68a1      	ldr	r1, [r4, #8]
 8005802:	4b09      	ldr	r3, [pc, #36]	; (8005828 <cleanup_stdio+0x38>)
 8005804:	4299      	cmp	r1, r3
 8005806:	d002      	beq.n	800580e <cleanup_stdio+0x1e>
 8005808:	4620      	mov	r0, r4
 800580a:	f000 fee9 	bl	80065e0 <_fflush_r>
 800580e:	68e1      	ldr	r1, [r4, #12]
 8005810:	4b06      	ldr	r3, [pc, #24]	; (800582c <cleanup_stdio+0x3c>)
 8005812:	4299      	cmp	r1, r3
 8005814:	d004      	beq.n	8005820 <cleanup_stdio+0x30>
 8005816:	4620      	mov	r0, r4
 8005818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800581c:	f000 bee0 	b.w	80065e0 <_fflush_r>
 8005820:	bd10      	pop	{r4, pc}
 8005822:	bf00      	nop
 8005824:	20004acc 	.word	0x20004acc
 8005828:	20004b34 	.word	0x20004b34
 800582c:	20004b9c 	.word	0x20004b9c

08005830 <global_stdio_init.part.0>:
 8005830:	b510      	push	{r4, lr}
 8005832:	4b0b      	ldr	r3, [pc, #44]	; (8005860 <global_stdio_init.part.0+0x30>)
 8005834:	4c0b      	ldr	r4, [pc, #44]	; (8005864 <global_stdio_init.part.0+0x34>)
 8005836:	4a0c      	ldr	r2, [pc, #48]	; (8005868 <global_stdio_init.part.0+0x38>)
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	4620      	mov	r0, r4
 800583c:	2200      	movs	r2, #0
 800583e:	2104      	movs	r1, #4
 8005840:	f7ff ff94 	bl	800576c <std>
 8005844:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005848:	2201      	movs	r2, #1
 800584a:	2109      	movs	r1, #9
 800584c:	f7ff ff8e 	bl	800576c <std>
 8005850:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005854:	2202      	movs	r2, #2
 8005856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800585a:	2112      	movs	r1, #18
 800585c:	f7ff bf86 	b.w	800576c <std>
 8005860:	20004c04 	.word	0x20004c04
 8005864:	20004acc 	.word	0x20004acc
 8005868:	080057d9 	.word	0x080057d9

0800586c <__sfp_lock_acquire>:
 800586c:	4801      	ldr	r0, [pc, #4]	; (8005874 <__sfp_lock_acquire+0x8>)
 800586e:	f000 ba54 	b.w	8005d1a <__retarget_lock_acquire_recursive>
 8005872:	bf00      	nop
 8005874:	20004c0d 	.word	0x20004c0d

08005878 <__sfp_lock_release>:
 8005878:	4801      	ldr	r0, [pc, #4]	; (8005880 <__sfp_lock_release+0x8>)
 800587a:	f000 ba4f 	b.w	8005d1c <__retarget_lock_release_recursive>
 800587e:	bf00      	nop
 8005880:	20004c0d 	.word	0x20004c0d

08005884 <__sinit>:
 8005884:	b510      	push	{r4, lr}
 8005886:	4604      	mov	r4, r0
 8005888:	f7ff fff0 	bl	800586c <__sfp_lock_acquire>
 800588c:	6a23      	ldr	r3, [r4, #32]
 800588e:	b11b      	cbz	r3, 8005898 <__sinit+0x14>
 8005890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005894:	f7ff bff0 	b.w	8005878 <__sfp_lock_release>
 8005898:	4b04      	ldr	r3, [pc, #16]	; (80058ac <__sinit+0x28>)
 800589a:	6223      	str	r3, [r4, #32]
 800589c:	4b04      	ldr	r3, [pc, #16]	; (80058b0 <__sinit+0x2c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1f5      	bne.n	8005890 <__sinit+0xc>
 80058a4:	f7ff ffc4 	bl	8005830 <global_stdio_init.part.0>
 80058a8:	e7f2      	b.n	8005890 <__sinit+0xc>
 80058aa:	bf00      	nop
 80058ac:	080057f1 	.word	0x080057f1
 80058b0:	20004c04 	.word	0x20004c04

080058b4 <_fwalk_sglue>:
 80058b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058b8:	4607      	mov	r7, r0
 80058ba:	4688      	mov	r8, r1
 80058bc:	4614      	mov	r4, r2
 80058be:	2600      	movs	r6, #0
 80058c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058c4:	f1b9 0901 	subs.w	r9, r9, #1
 80058c8:	d505      	bpl.n	80058d6 <_fwalk_sglue+0x22>
 80058ca:	6824      	ldr	r4, [r4, #0]
 80058cc:	2c00      	cmp	r4, #0
 80058ce:	d1f7      	bne.n	80058c0 <_fwalk_sglue+0xc>
 80058d0:	4630      	mov	r0, r6
 80058d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058d6:	89ab      	ldrh	r3, [r5, #12]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d907      	bls.n	80058ec <_fwalk_sglue+0x38>
 80058dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058e0:	3301      	adds	r3, #1
 80058e2:	d003      	beq.n	80058ec <_fwalk_sglue+0x38>
 80058e4:	4629      	mov	r1, r5
 80058e6:	4638      	mov	r0, r7
 80058e8:	47c0      	blx	r8
 80058ea:	4306      	orrs	r6, r0
 80058ec:	3568      	adds	r5, #104	; 0x68
 80058ee:	e7e9      	b.n	80058c4 <_fwalk_sglue+0x10>

080058f0 <iprintf>:
 80058f0:	b40f      	push	{r0, r1, r2, r3}
 80058f2:	b507      	push	{r0, r1, r2, lr}
 80058f4:	4906      	ldr	r1, [pc, #24]	; (8005910 <iprintf+0x20>)
 80058f6:	ab04      	add	r3, sp, #16
 80058f8:	6808      	ldr	r0, [r1, #0]
 80058fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80058fe:	6881      	ldr	r1, [r0, #8]
 8005900:	9301      	str	r3, [sp, #4]
 8005902:	f000 fb3d 	bl	8005f80 <_vfiprintf_r>
 8005906:	b003      	add	sp, #12
 8005908:	f85d eb04 	ldr.w	lr, [sp], #4
 800590c:	b004      	add	sp, #16
 800590e:	4770      	bx	lr
 8005910:	20000068 	.word	0x20000068

08005914 <_puts_r>:
 8005914:	6a03      	ldr	r3, [r0, #32]
 8005916:	b570      	push	{r4, r5, r6, lr}
 8005918:	6884      	ldr	r4, [r0, #8]
 800591a:	4605      	mov	r5, r0
 800591c:	460e      	mov	r6, r1
 800591e:	b90b      	cbnz	r3, 8005924 <_puts_r+0x10>
 8005920:	f7ff ffb0 	bl	8005884 <__sinit>
 8005924:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005926:	07db      	lsls	r3, r3, #31
 8005928:	d405      	bmi.n	8005936 <_puts_r+0x22>
 800592a:	89a3      	ldrh	r3, [r4, #12]
 800592c:	0598      	lsls	r0, r3, #22
 800592e:	d402      	bmi.n	8005936 <_puts_r+0x22>
 8005930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005932:	f000 f9f2 	bl	8005d1a <__retarget_lock_acquire_recursive>
 8005936:	89a3      	ldrh	r3, [r4, #12]
 8005938:	0719      	lsls	r1, r3, #28
 800593a:	d513      	bpl.n	8005964 <_puts_r+0x50>
 800593c:	6923      	ldr	r3, [r4, #16]
 800593e:	b18b      	cbz	r3, 8005964 <_puts_r+0x50>
 8005940:	3e01      	subs	r6, #1
 8005942:	68a3      	ldr	r3, [r4, #8]
 8005944:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005948:	3b01      	subs	r3, #1
 800594a:	60a3      	str	r3, [r4, #8]
 800594c:	b9e9      	cbnz	r1, 800598a <_puts_r+0x76>
 800594e:	2b00      	cmp	r3, #0
 8005950:	da2e      	bge.n	80059b0 <_puts_r+0x9c>
 8005952:	4622      	mov	r2, r4
 8005954:	210a      	movs	r1, #10
 8005956:	4628      	mov	r0, r5
 8005958:	f000 f87b 	bl	8005a52 <__swbuf_r>
 800595c:	3001      	adds	r0, #1
 800595e:	d007      	beq.n	8005970 <_puts_r+0x5c>
 8005960:	250a      	movs	r5, #10
 8005962:	e007      	b.n	8005974 <_puts_r+0x60>
 8005964:	4621      	mov	r1, r4
 8005966:	4628      	mov	r0, r5
 8005968:	f000 f8b0 	bl	8005acc <__swsetup_r>
 800596c:	2800      	cmp	r0, #0
 800596e:	d0e7      	beq.n	8005940 <_puts_r+0x2c>
 8005970:	f04f 35ff 	mov.w	r5, #4294967295
 8005974:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005976:	07da      	lsls	r2, r3, #31
 8005978:	d405      	bmi.n	8005986 <_puts_r+0x72>
 800597a:	89a3      	ldrh	r3, [r4, #12]
 800597c:	059b      	lsls	r3, r3, #22
 800597e:	d402      	bmi.n	8005986 <_puts_r+0x72>
 8005980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005982:	f000 f9cb 	bl	8005d1c <__retarget_lock_release_recursive>
 8005986:	4628      	mov	r0, r5
 8005988:	bd70      	pop	{r4, r5, r6, pc}
 800598a:	2b00      	cmp	r3, #0
 800598c:	da04      	bge.n	8005998 <_puts_r+0x84>
 800598e:	69a2      	ldr	r2, [r4, #24]
 8005990:	429a      	cmp	r2, r3
 8005992:	dc06      	bgt.n	80059a2 <_puts_r+0x8e>
 8005994:	290a      	cmp	r1, #10
 8005996:	d004      	beq.n	80059a2 <_puts_r+0x8e>
 8005998:	6823      	ldr	r3, [r4, #0]
 800599a:	1c5a      	adds	r2, r3, #1
 800599c:	6022      	str	r2, [r4, #0]
 800599e:	7019      	strb	r1, [r3, #0]
 80059a0:	e7cf      	b.n	8005942 <_puts_r+0x2e>
 80059a2:	4622      	mov	r2, r4
 80059a4:	4628      	mov	r0, r5
 80059a6:	f000 f854 	bl	8005a52 <__swbuf_r>
 80059aa:	3001      	adds	r0, #1
 80059ac:	d1c9      	bne.n	8005942 <_puts_r+0x2e>
 80059ae:	e7df      	b.n	8005970 <_puts_r+0x5c>
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	250a      	movs	r5, #10
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	6022      	str	r2, [r4, #0]
 80059b8:	701d      	strb	r5, [r3, #0]
 80059ba:	e7db      	b.n	8005974 <_puts_r+0x60>

080059bc <puts>:
 80059bc:	4b02      	ldr	r3, [pc, #8]	; (80059c8 <puts+0xc>)
 80059be:	4601      	mov	r1, r0
 80059c0:	6818      	ldr	r0, [r3, #0]
 80059c2:	f7ff bfa7 	b.w	8005914 <_puts_r>
 80059c6:	bf00      	nop
 80059c8:	20000068 	.word	0x20000068

080059cc <__sread>:
 80059cc:	b510      	push	{r4, lr}
 80059ce:	460c      	mov	r4, r1
 80059d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059d4:	f000 f952 	bl	8005c7c <_read_r>
 80059d8:	2800      	cmp	r0, #0
 80059da:	bfab      	itete	ge
 80059dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80059de:	89a3      	ldrhlt	r3, [r4, #12]
 80059e0:	181b      	addge	r3, r3, r0
 80059e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059e6:	bfac      	ite	ge
 80059e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80059ea:	81a3      	strhlt	r3, [r4, #12]
 80059ec:	bd10      	pop	{r4, pc}

080059ee <__swrite>:
 80059ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059f2:	461f      	mov	r7, r3
 80059f4:	898b      	ldrh	r3, [r1, #12]
 80059f6:	05db      	lsls	r3, r3, #23
 80059f8:	4605      	mov	r5, r0
 80059fa:	460c      	mov	r4, r1
 80059fc:	4616      	mov	r6, r2
 80059fe:	d505      	bpl.n	8005a0c <__swrite+0x1e>
 8005a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a04:	2302      	movs	r3, #2
 8005a06:	2200      	movs	r2, #0
 8005a08:	f000 f926 	bl	8005c58 <_lseek_r>
 8005a0c:	89a3      	ldrh	r3, [r4, #12]
 8005a0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a16:	81a3      	strh	r3, [r4, #12]
 8005a18:	4632      	mov	r2, r6
 8005a1a:	463b      	mov	r3, r7
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a22:	f000 b93d 	b.w	8005ca0 <_write_r>

08005a26 <__sseek>:
 8005a26:	b510      	push	{r4, lr}
 8005a28:	460c      	mov	r4, r1
 8005a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a2e:	f000 f913 	bl	8005c58 <_lseek_r>
 8005a32:	1c43      	adds	r3, r0, #1
 8005a34:	89a3      	ldrh	r3, [r4, #12]
 8005a36:	bf15      	itete	ne
 8005a38:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a42:	81a3      	strheq	r3, [r4, #12]
 8005a44:	bf18      	it	ne
 8005a46:	81a3      	strhne	r3, [r4, #12]
 8005a48:	bd10      	pop	{r4, pc}

08005a4a <__sclose>:
 8005a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a4e:	f000 b89d 	b.w	8005b8c <_close_r>

08005a52 <__swbuf_r>:
 8005a52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a54:	460e      	mov	r6, r1
 8005a56:	4614      	mov	r4, r2
 8005a58:	4605      	mov	r5, r0
 8005a5a:	b118      	cbz	r0, 8005a64 <__swbuf_r+0x12>
 8005a5c:	6a03      	ldr	r3, [r0, #32]
 8005a5e:	b90b      	cbnz	r3, 8005a64 <__swbuf_r+0x12>
 8005a60:	f7ff ff10 	bl	8005884 <__sinit>
 8005a64:	69a3      	ldr	r3, [r4, #24]
 8005a66:	60a3      	str	r3, [r4, #8]
 8005a68:	89a3      	ldrh	r3, [r4, #12]
 8005a6a:	071a      	lsls	r2, r3, #28
 8005a6c:	d525      	bpl.n	8005aba <__swbuf_r+0x68>
 8005a6e:	6923      	ldr	r3, [r4, #16]
 8005a70:	b31b      	cbz	r3, 8005aba <__swbuf_r+0x68>
 8005a72:	6823      	ldr	r3, [r4, #0]
 8005a74:	6922      	ldr	r2, [r4, #16]
 8005a76:	1a98      	subs	r0, r3, r2
 8005a78:	6963      	ldr	r3, [r4, #20]
 8005a7a:	b2f6      	uxtb	r6, r6
 8005a7c:	4283      	cmp	r3, r0
 8005a7e:	4637      	mov	r7, r6
 8005a80:	dc04      	bgt.n	8005a8c <__swbuf_r+0x3a>
 8005a82:	4621      	mov	r1, r4
 8005a84:	4628      	mov	r0, r5
 8005a86:	f000 fdab 	bl	80065e0 <_fflush_r>
 8005a8a:	b9e0      	cbnz	r0, 8005ac6 <__swbuf_r+0x74>
 8005a8c:	68a3      	ldr	r3, [r4, #8]
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	60a3      	str	r3, [r4, #8]
 8005a92:	6823      	ldr	r3, [r4, #0]
 8005a94:	1c5a      	adds	r2, r3, #1
 8005a96:	6022      	str	r2, [r4, #0]
 8005a98:	701e      	strb	r6, [r3, #0]
 8005a9a:	6962      	ldr	r2, [r4, #20]
 8005a9c:	1c43      	adds	r3, r0, #1
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d004      	beq.n	8005aac <__swbuf_r+0x5a>
 8005aa2:	89a3      	ldrh	r3, [r4, #12]
 8005aa4:	07db      	lsls	r3, r3, #31
 8005aa6:	d506      	bpl.n	8005ab6 <__swbuf_r+0x64>
 8005aa8:	2e0a      	cmp	r6, #10
 8005aaa:	d104      	bne.n	8005ab6 <__swbuf_r+0x64>
 8005aac:	4621      	mov	r1, r4
 8005aae:	4628      	mov	r0, r5
 8005ab0:	f000 fd96 	bl	80065e0 <_fflush_r>
 8005ab4:	b938      	cbnz	r0, 8005ac6 <__swbuf_r+0x74>
 8005ab6:	4638      	mov	r0, r7
 8005ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aba:	4621      	mov	r1, r4
 8005abc:	4628      	mov	r0, r5
 8005abe:	f000 f805 	bl	8005acc <__swsetup_r>
 8005ac2:	2800      	cmp	r0, #0
 8005ac4:	d0d5      	beq.n	8005a72 <__swbuf_r+0x20>
 8005ac6:	f04f 37ff 	mov.w	r7, #4294967295
 8005aca:	e7f4      	b.n	8005ab6 <__swbuf_r+0x64>

08005acc <__swsetup_r>:
 8005acc:	b538      	push	{r3, r4, r5, lr}
 8005ace:	4b2a      	ldr	r3, [pc, #168]	; (8005b78 <__swsetup_r+0xac>)
 8005ad0:	4605      	mov	r5, r0
 8005ad2:	6818      	ldr	r0, [r3, #0]
 8005ad4:	460c      	mov	r4, r1
 8005ad6:	b118      	cbz	r0, 8005ae0 <__swsetup_r+0x14>
 8005ad8:	6a03      	ldr	r3, [r0, #32]
 8005ada:	b90b      	cbnz	r3, 8005ae0 <__swsetup_r+0x14>
 8005adc:	f7ff fed2 	bl	8005884 <__sinit>
 8005ae0:	89a3      	ldrh	r3, [r4, #12]
 8005ae2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ae6:	0718      	lsls	r0, r3, #28
 8005ae8:	d422      	bmi.n	8005b30 <__swsetup_r+0x64>
 8005aea:	06d9      	lsls	r1, r3, #27
 8005aec:	d407      	bmi.n	8005afe <__swsetup_r+0x32>
 8005aee:	2309      	movs	r3, #9
 8005af0:	602b      	str	r3, [r5, #0]
 8005af2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005af6:	81a3      	strh	r3, [r4, #12]
 8005af8:	f04f 30ff 	mov.w	r0, #4294967295
 8005afc:	e034      	b.n	8005b68 <__swsetup_r+0x9c>
 8005afe:	0758      	lsls	r0, r3, #29
 8005b00:	d512      	bpl.n	8005b28 <__swsetup_r+0x5c>
 8005b02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b04:	b141      	cbz	r1, 8005b18 <__swsetup_r+0x4c>
 8005b06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b0a:	4299      	cmp	r1, r3
 8005b0c:	d002      	beq.n	8005b14 <__swsetup_r+0x48>
 8005b0e:	4628      	mov	r0, r5
 8005b10:	f000 f914 	bl	8005d3c <_free_r>
 8005b14:	2300      	movs	r3, #0
 8005b16:	6363      	str	r3, [r4, #52]	; 0x34
 8005b18:	89a3      	ldrh	r3, [r4, #12]
 8005b1a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b1e:	81a3      	strh	r3, [r4, #12]
 8005b20:	2300      	movs	r3, #0
 8005b22:	6063      	str	r3, [r4, #4]
 8005b24:	6923      	ldr	r3, [r4, #16]
 8005b26:	6023      	str	r3, [r4, #0]
 8005b28:	89a3      	ldrh	r3, [r4, #12]
 8005b2a:	f043 0308 	orr.w	r3, r3, #8
 8005b2e:	81a3      	strh	r3, [r4, #12]
 8005b30:	6923      	ldr	r3, [r4, #16]
 8005b32:	b94b      	cbnz	r3, 8005b48 <__swsetup_r+0x7c>
 8005b34:	89a3      	ldrh	r3, [r4, #12]
 8005b36:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b3e:	d003      	beq.n	8005b48 <__swsetup_r+0x7c>
 8005b40:	4621      	mov	r1, r4
 8005b42:	4628      	mov	r0, r5
 8005b44:	f000 fd9a 	bl	800667c <__smakebuf_r>
 8005b48:	89a0      	ldrh	r0, [r4, #12]
 8005b4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b4e:	f010 0301 	ands.w	r3, r0, #1
 8005b52:	d00a      	beq.n	8005b6a <__swsetup_r+0x9e>
 8005b54:	2300      	movs	r3, #0
 8005b56:	60a3      	str	r3, [r4, #8]
 8005b58:	6963      	ldr	r3, [r4, #20]
 8005b5a:	425b      	negs	r3, r3
 8005b5c:	61a3      	str	r3, [r4, #24]
 8005b5e:	6923      	ldr	r3, [r4, #16]
 8005b60:	b943      	cbnz	r3, 8005b74 <__swsetup_r+0xa8>
 8005b62:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b66:	d1c4      	bne.n	8005af2 <__swsetup_r+0x26>
 8005b68:	bd38      	pop	{r3, r4, r5, pc}
 8005b6a:	0781      	lsls	r1, r0, #30
 8005b6c:	bf58      	it	pl
 8005b6e:	6963      	ldrpl	r3, [r4, #20]
 8005b70:	60a3      	str	r3, [r4, #8]
 8005b72:	e7f4      	b.n	8005b5e <__swsetup_r+0x92>
 8005b74:	2000      	movs	r0, #0
 8005b76:	e7f7      	b.n	8005b68 <__swsetup_r+0x9c>
 8005b78:	20000068 	.word	0x20000068

08005b7c <memset>:
 8005b7c:	4402      	add	r2, r0
 8005b7e:	4603      	mov	r3, r0
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d100      	bne.n	8005b86 <memset+0xa>
 8005b84:	4770      	bx	lr
 8005b86:	f803 1b01 	strb.w	r1, [r3], #1
 8005b8a:	e7f9      	b.n	8005b80 <memset+0x4>

08005b8c <_close_r>:
 8005b8c:	b538      	push	{r3, r4, r5, lr}
 8005b8e:	4d06      	ldr	r5, [pc, #24]	; (8005ba8 <_close_r+0x1c>)
 8005b90:	2300      	movs	r3, #0
 8005b92:	4604      	mov	r4, r0
 8005b94:	4608      	mov	r0, r1
 8005b96:	602b      	str	r3, [r5, #0]
 8005b98:	f7fa ff6f 	bl	8000a7a <_close>
 8005b9c:	1c43      	adds	r3, r0, #1
 8005b9e:	d102      	bne.n	8005ba6 <_close_r+0x1a>
 8005ba0:	682b      	ldr	r3, [r5, #0]
 8005ba2:	b103      	cbz	r3, 8005ba6 <_close_r+0x1a>
 8005ba4:	6023      	str	r3, [r4, #0]
 8005ba6:	bd38      	pop	{r3, r4, r5, pc}
 8005ba8:	20004c08 	.word	0x20004c08

08005bac <_reclaim_reent>:
 8005bac:	4b29      	ldr	r3, [pc, #164]	; (8005c54 <_reclaim_reent+0xa8>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4283      	cmp	r3, r0
 8005bb2:	b570      	push	{r4, r5, r6, lr}
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	d04b      	beq.n	8005c50 <_reclaim_reent+0xa4>
 8005bb8:	69c3      	ldr	r3, [r0, #28]
 8005bba:	b143      	cbz	r3, 8005bce <_reclaim_reent+0x22>
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d144      	bne.n	8005c4c <_reclaim_reent+0xa0>
 8005bc2:	69e3      	ldr	r3, [r4, #28]
 8005bc4:	6819      	ldr	r1, [r3, #0]
 8005bc6:	b111      	cbz	r1, 8005bce <_reclaim_reent+0x22>
 8005bc8:	4620      	mov	r0, r4
 8005bca:	f000 f8b7 	bl	8005d3c <_free_r>
 8005bce:	6961      	ldr	r1, [r4, #20]
 8005bd0:	b111      	cbz	r1, 8005bd8 <_reclaim_reent+0x2c>
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	f000 f8b2 	bl	8005d3c <_free_r>
 8005bd8:	69e1      	ldr	r1, [r4, #28]
 8005bda:	b111      	cbz	r1, 8005be2 <_reclaim_reent+0x36>
 8005bdc:	4620      	mov	r0, r4
 8005bde:	f000 f8ad 	bl	8005d3c <_free_r>
 8005be2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005be4:	b111      	cbz	r1, 8005bec <_reclaim_reent+0x40>
 8005be6:	4620      	mov	r0, r4
 8005be8:	f000 f8a8 	bl	8005d3c <_free_r>
 8005bec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bee:	b111      	cbz	r1, 8005bf6 <_reclaim_reent+0x4a>
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	f000 f8a3 	bl	8005d3c <_free_r>
 8005bf6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005bf8:	b111      	cbz	r1, 8005c00 <_reclaim_reent+0x54>
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	f000 f89e 	bl	8005d3c <_free_r>
 8005c00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005c02:	b111      	cbz	r1, 8005c0a <_reclaim_reent+0x5e>
 8005c04:	4620      	mov	r0, r4
 8005c06:	f000 f899 	bl	8005d3c <_free_r>
 8005c0a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005c0c:	b111      	cbz	r1, 8005c14 <_reclaim_reent+0x68>
 8005c0e:	4620      	mov	r0, r4
 8005c10:	f000 f894 	bl	8005d3c <_free_r>
 8005c14:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005c16:	b111      	cbz	r1, 8005c1e <_reclaim_reent+0x72>
 8005c18:	4620      	mov	r0, r4
 8005c1a:	f000 f88f 	bl	8005d3c <_free_r>
 8005c1e:	6a23      	ldr	r3, [r4, #32]
 8005c20:	b1b3      	cbz	r3, 8005c50 <_reclaim_reent+0xa4>
 8005c22:	4620      	mov	r0, r4
 8005c24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005c28:	4718      	bx	r3
 8005c2a:	5949      	ldr	r1, [r1, r5]
 8005c2c:	b941      	cbnz	r1, 8005c40 <_reclaim_reent+0x94>
 8005c2e:	3504      	adds	r5, #4
 8005c30:	69e3      	ldr	r3, [r4, #28]
 8005c32:	2d80      	cmp	r5, #128	; 0x80
 8005c34:	68d9      	ldr	r1, [r3, #12]
 8005c36:	d1f8      	bne.n	8005c2a <_reclaim_reent+0x7e>
 8005c38:	4620      	mov	r0, r4
 8005c3a:	f000 f87f 	bl	8005d3c <_free_r>
 8005c3e:	e7c0      	b.n	8005bc2 <_reclaim_reent+0x16>
 8005c40:	680e      	ldr	r6, [r1, #0]
 8005c42:	4620      	mov	r0, r4
 8005c44:	f000 f87a 	bl	8005d3c <_free_r>
 8005c48:	4631      	mov	r1, r6
 8005c4a:	e7ef      	b.n	8005c2c <_reclaim_reent+0x80>
 8005c4c:	2500      	movs	r5, #0
 8005c4e:	e7ef      	b.n	8005c30 <_reclaim_reent+0x84>
 8005c50:	bd70      	pop	{r4, r5, r6, pc}
 8005c52:	bf00      	nop
 8005c54:	20000068 	.word	0x20000068

08005c58 <_lseek_r>:
 8005c58:	b538      	push	{r3, r4, r5, lr}
 8005c5a:	4d07      	ldr	r5, [pc, #28]	; (8005c78 <_lseek_r+0x20>)
 8005c5c:	4604      	mov	r4, r0
 8005c5e:	4608      	mov	r0, r1
 8005c60:	4611      	mov	r1, r2
 8005c62:	2200      	movs	r2, #0
 8005c64:	602a      	str	r2, [r5, #0]
 8005c66:	461a      	mov	r2, r3
 8005c68:	f7fa ff2e 	bl	8000ac8 <_lseek>
 8005c6c:	1c43      	adds	r3, r0, #1
 8005c6e:	d102      	bne.n	8005c76 <_lseek_r+0x1e>
 8005c70:	682b      	ldr	r3, [r5, #0]
 8005c72:	b103      	cbz	r3, 8005c76 <_lseek_r+0x1e>
 8005c74:	6023      	str	r3, [r4, #0]
 8005c76:	bd38      	pop	{r3, r4, r5, pc}
 8005c78:	20004c08 	.word	0x20004c08

08005c7c <_read_r>:
 8005c7c:	b538      	push	{r3, r4, r5, lr}
 8005c7e:	4d07      	ldr	r5, [pc, #28]	; (8005c9c <_read_r+0x20>)
 8005c80:	4604      	mov	r4, r0
 8005c82:	4608      	mov	r0, r1
 8005c84:	4611      	mov	r1, r2
 8005c86:	2200      	movs	r2, #0
 8005c88:	602a      	str	r2, [r5, #0]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	f7fa fed8 	bl	8000a40 <_read>
 8005c90:	1c43      	adds	r3, r0, #1
 8005c92:	d102      	bne.n	8005c9a <_read_r+0x1e>
 8005c94:	682b      	ldr	r3, [r5, #0]
 8005c96:	b103      	cbz	r3, 8005c9a <_read_r+0x1e>
 8005c98:	6023      	str	r3, [r4, #0]
 8005c9a:	bd38      	pop	{r3, r4, r5, pc}
 8005c9c:	20004c08 	.word	0x20004c08

08005ca0 <_write_r>:
 8005ca0:	b538      	push	{r3, r4, r5, lr}
 8005ca2:	4d07      	ldr	r5, [pc, #28]	; (8005cc0 <_write_r+0x20>)
 8005ca4:	4604      	mov	r4, r0
 8005ca6:	4608      	mov	r0, r1
 8005ca8:	4611      	mov	r1, r2
 8005caa:	2200      	movs	r2, #0
 8005cac:	602a      	str	r2, [r5, #0]
 8005cae:	461a      	mov	r2, r3
 8005cb0:	f7fa fc93 	bl	80005da <_write>
 8005cb4:	1c43      	adds	r3, r0, #1
 8005cb6:	d102      	bne.n	8005cbe <_write_r+0x1e>
 8005cb8:	682b      	ldr	r3, [r5, #0]
 8005cba:	b103      	cbz	r3, 8005cbe <_write_r+0x1e>
 8005cbc:	6023      	str	r3, [r4, #0]
 8005cbe:	bd38      	pop	{r3, r4, r5, pc}
 8005cc0:	20004c08 	.word	0x20004c08

08005cc4 <__errno>:
 8005cc4:	4b01      	ldr	r3, [pc, #4]	; (8005ccc <__errno+0x8>)
 8005cc6:	6818      	ldr	r0, [r3, #0]
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	20000068 	.word	0x20000068

08005cd0 <__libc_init_array>:
 8005cd0:	b570      	push	{r4, r5, r6, lr}
 8005cd2:	4d0d      	ldr	r5, [pc, #52]	; (8005d08 <__libc_init_array+0x38>)
 8005cd4:	4c0d      	ldr	r4, [pc, #52]	; (8005d0c <__libc_init_array+0x3c>)
 8005cd6:	1b64      	subs	r4, r4, r5
 8005cd8:	10a4      	asrs	r4, r4, #2
 8005cda:	2600      	movs	r6, #0
 8005cdc:	42a6      	cmp	r6, r4
 8005cde:	d109      	bne.n	8005cf4 <__libc_init_array+0x24>
 8005ce0:	4d0b      	ldr	r5, [pc, #44]	; (8005d10 <__libc_init_array+0x40>)
 8005ce2:	4c0c      	ldr	r4, [pc, #48]	; (8005d14 <__libc_init_array+0x44>)
 8005ce4:	f000 fd38 	bl	8006758 <_init>
 8005ce8:	1b64      	subs	r4, r4, r5
 8005cea:	10a4      	asrs	r4, r4, #2
 8005cec:	2600      	movs	r6, #0
 8005cee:	42a6      	cmp	r6, r4
 8005cf0:	d105      	bne.n	8005cfe <__libc_init_array+0x2e>
 8005cf2:	bd70      	pop	{r4, r5, r6, pc}
 8005cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cf8:	4798      	blx	r3
 8005cfa:	3601      	adds	r6, #1
 8005cfc:	e7ee      	b.n	8005cdc <__libc_init_array+0xc>
 8005cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d02:	4798      	blx	r3
 8005d04:	3601      	adds	r6, #1
 8005d06:	e7f2      	b.n	8005cee <__libc_init_array+0x1e>
 8005d08:	0800688c 	.word	0x0800688c
 8005d0c:	0800688c 	.word	0x0800688c
 8005d10:	0800688c 	.word	0x0800688c
 8005d14:	08006890 	.word	0x08006890

08005d18 <__retarget_lock_init_recursive>:
 8005d18:	4770      	bx	lr

08005d1a <__retarget_lock_acquire_recursive>:
 8005d1a:	4770      	bx	lr

08005d1c <__retarget_lock_release_recursive>:
 8005d1c:	4770      	bx	lr

08005d1e <memcpy>:
 8005d1e:	440a      	add	r2, r1
 8005d20:	4291      	cmp	r1, r2
 8005d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d26:	d100      	bne.n	8005d2a <memcpy+0xc>
 8005d28:	4770      	bx	lr
 8005d2a:	b510      	push	{r4, lr}
 8005d2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d34:	4291      	cmp	r1, r2
 8005d36:	d1f9      	bne.n	8005d2c <memcpy+0xe>
 8005d38:	bd10      	pop	{r4, pc}
	...

08005d3c <_free_r>:
 8005d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d3e:	2900      	cmp	r1, #0
 8005d40:	d044      	beq.n	8005dcc <_free_r+0x90>
 8005d42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d46:	9001      	str	r0, [sp, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f1a1 0404 	sub.w	r4, r1, #4
 8005d4e:	bfb8      	it	lt
 8005d50:	18e4      	addlt	r4, r4, r3
 8005d52:	f000 f8df 	bl	8005f14 <__malloc_lock>
 8005d56:	4a1e      	ldr	r2, [pc, #120]	; (8005dd0 <_free_r+0x94>)
 8005d58:	9801      	ldr	r0, [sp, #4]
 8005d5a:	6813      	ldr	r3, [r2, #0]
 8005d5c:	b933      	cbnz	r3, 8005d6c <_free_r+0x30>
 8005d5e:	6063      	str	r3, [r4, #4]
 8005d60:	6014      	str	r4, [r2, #0]
 8005d62:	b003      	add	sp, #12
 8005d64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d68:	f000 b8da 	b.w	8005f20 <__malloc_unlock>
 8005d6c:	42a3      	cmp	r3, r4
 8005d6e:	d908      	bls.n	8005d82 <_free_r+0x46>
 8005d70:	6825      	ldr	r5, [r4, #0]
 8005d72:	1961      	adds	r1, r4, r5
 8005d74:	428b      	cmp	r3, r1
 8005d76:	bf01      	itttt	eq
 8005d78:	6819      	ldreq	r1, [r3, #0]
 8005d7a:	685b      	ldreq	r3, [r3, #4]
 8005d7c:	1949      	addeq	r1, r1, r5
 8005d7e:	6021      	streq	r1, [r4, #0]
 8005d80:	e7ed      	b.n	8005d5e <_free_r+0x22>
 8005d82:	461a      	mov	r2, r3
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	b10b      	cbz	r3, 8005d8c <_free_r+0x50>
 8005d88:	42a3      	cmp	r3, r4
 8005d8a:	d9fa      	bls.n	8005d82 <_free_r+0x46>
 8005d8c:	6811      	ldr	r1, [r2, #0]
 8005d8e:	1855      	adds	r5, r2, r1
 8005d90:	42a5      	cmp	r5, r4
 8005d92:	d10b      	bne.n	8005dac <_free_r+0x70>
 8005d94:	6824      	ldr	r4, [r4, #0]
 8005d96:	4421      	add	r1, r4
 8005d98:	1854      	adds	r4, r2, r1
 8005d9a:	42a3      	cmp	r3, r4
 8005d9c:	6011      	str	r1, [r2, #0]
 8005d9e:	d1e0      	bne.n	8005d62 <_free_r+0x26>
 8005da0:	681c      	ldr	r4, [r3, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	6053      	str	r3, [r2, #4]
 8005da6:	440c      	add	r4, r1
 8005da8:	6014      	str	r4, [r2, #0]
 8005daa:	e7da      	b.n	8005d62 <_free_r+0x26>
 8005dac:	d902      	bls.n	8005db4 <_free_r+0x78>
 8005dae:	230c      	movs	r3, #12
 8005db0:	6003      	str	r3, [r0, #0]
 8005db2:	e7d6      	b.n	8005d62 <_free_r+0x26>
 8005db4:	6825      	ldr	r5, [r4, #0]
 8005db6:	1961      	adds	r1, r4, r5
 8005db8:	428b      	cmp	r3, r1
 8005dba:	bf04      	itt	eq
 8005dbc:	6819      	ldreq	r1, [r3, #0]
 8005dbe:	685b      	ldreq	r3, [r3, #4]
 8005dc0:	6063      	str	r3, [r4, #4]
 8005dc2:	bf04      	itt	eq
 8005dc4:	1949      	addeq	r1, r1, r5
 8005dc6:	6021      	streq	r1, [r4, #0]
 8005dc8:	6054      	str	r4, [r2, #4]
 8005dca:	e7ca      	b.n	8005d62 <_free_r+0x26>
 8005dcc:	b003      	add	sp, #12
 8005dce:	bd30      	pop	{r4, r5, pc}
 8005dd0:	20004c10 	.word	0x20004c10

08005dd4 <sbrk_aligned>:
 8005dd4:	b570      	push	{r4, r5, r6, lr}
 8005dd6:	4e0e      	ldr	r6, [pc, #56]	; (8005e10 <sbrk_aligned+0x3c>)
 8005dd8:	460c      	mov	r4, r1
 8005dda:	6831      	ldr	r1, [r6, #0]
 8005ddc:	4605      	mov	r5, r0
 8005dde:	b911      	cbnz	r1, 8005de6 <sbrk_aligned+0x12>
 8005de0:	f000 fcaa 	bl	8006738 <_sbrk_r>
 8005de4:	6030      	str	r0, [r6, #0]
 8005de6:	4621      	mov	r1, r4
 8005de8:	4628      	mov	r0, r5
 8005dea:	f000 fca5 	bl	8006738 <_sbrk_r>
 8005dee:	1c43      	adds	r3, r0, #1
 8005df0:	d00a      	beq.n	8005e08 <sbrk_aligned+0x34>
 8005df2:	1cc4      	adds	r4, r0, #3
 8005df4:	f024 0403 	bic.w	r4, r4, #3
 8005df8:	42a0      	cmp	r0, r4
 8005dfa:	d007      	beq.n	8005e0c <sbrk_aligned+0x38>
 8005dfc:	1a21      	subs	r1, r4, r0
 8005dfe:	4628      	mov	r0, r5
 8005e00:	f000 fc9a 	bl	8006738 <_sbrk_r>
 8005e04:	3001      	adds	r0, #1
 8005e06:	d101      	bne.n	8005e0c <sbrk_aligned+0x38>
 8005e08:	f04f 34ff 	mov.w	r4, #4294967295
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	bd70      	pop	{r4, r5, r6, pc}
 8005e10:	20004c14 	.word	0x20004c14

08005e14 <_malloc_r>:
 8005e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e18:	1ccd      	adds	r5, r1, #3
 8005e1a:	f025 0503 	bic.w	r5, r5, #3
 8005e1e:	3508      	adds	r5, #8
 8005e20:	2d0c      	cmp	r5, #12
 8005e22:	bf38      	it	cc
 8005e24:	250c      	movcc	r5, #12
 8005e26:	2d00      	cmp	r5, #0
 8005e28:	4607      	mov	r7, r0
 8005e2a:	db01      	blt.n	8005e30 <_malloc_r+0x1c>
 8005e2c:	42a9      	cmp	r1, r5
 8005e2e:	d905      	bls.n	8005e3c <_malloc_r+0x28>
 8005e30:	230c      	movs	r3, #12
 8005e32:	603b      	str	r3, [r7, #0]
 8005e34:	2600      	movs	r6, #0
 8005e36:	4630      	mov	r0, r6
 8005e38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e3c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005f10 <_malloc_r+0xfc>
 8005e40:	f000 f868 	bl	8005f14 <__malloc_lock>
 8005e44:	f8d8 3000 	ldr.w	r3, [r8]
 8005e48:	461c      	mov	r4, r3
 8005e4a:	bb5c      	cbnz	r4, 8005ea4 <_malloc_r+0x90>
 8005e4c:	4629      	mov	r1, r5
 8005e4e:	4638      	mov	r0, r7
 8005e50:	f7ff ffc0 	bl	8005dd4 <sbrk_aligned>
 8005e54:	1c43      	adds	r3, r0, #1
 8005e56:	4604      	mov	r4, r0
 8005e58:	d155      	bne.n	8005f06 <_malloc_r+0xf2>
 8005e5a:	f8d8 4000 	ldr.w	r4, [r8]
 8005e5e:	4626      	mov	r6, r4
 8005e60:	2e00      	cmp	r6, #0
 8005e62:	d145      	bne.n	8005ef0 <_malloc_r+0xdc>
 8005e64:	2c00      	cmp	r4, #0
 8005e66:	d048      	beq.n	8005efa <_malloc_r+0xe6>
 8005e68:	6823      	ldr	r3, [r4, #0]
 8005e6a:	4631      	mov	r1, r6
 8005e6c:	4638      	mov	r0, r7
 8005e6e:	eb04 0903 	add.w	r9, r4, r3
 8005e72:	f000 fc61 	bl	8006738 <_sbrk_r>
 8005e76:	4581      	cmp	r9, r0
 8005e78:	d13f      	bne.n	8005efa <_malloc_r+0xe6>
 8005e7a:	6821      	ldr	r1, [r4, #0]
 8005e7c:	1a6d      	subs	r5, r5, r1
 8005e7e:	4629      	mov	r1, r5
 8005e80:	4638      	mov	r0, r7
 8005e82:	f7ff ffa7 	bl	8005dd4 <sbrk_aligned>
 8005e86:	3001      	adds	r0, #1
 8005e88:	d037      	beq.n	8005efa <_malloc_r+0xe6>
 8005e8a:	6823      	ldr	r3, [r4, #0]
 8005e8c:	442b      	add	r3, r5
 8005e8e:	6023      	str	r3, [r4, #0]
 8005e90:	f8d8 3000 	ldr.w	r3, [r8]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d038      	beq.n	8005f0a <_malloc_r+0xf6>
 8005e98:	685a      	ldr	r2, [r3, #4]
 8005e9a:	42a2      	cmp	r2, r4
 8005e9c:	d12b      	bne.n	8005ef6 <_malloc_r+0xe2>
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	605a      	str	r2, [r3, #4]
 8005ea2:	e00f      	b.n	8005ec4 <_malloc_r+0xb0>
 8005ea4:	6822      	ldr	r2, [r4, #0]
 8005ea6:	1b52      	subs	r2, r2, r5
 8005ea8:	d41f      	bmi.n	8005eea <_malloc_r+0xd6>
 8005eaa:	2a0b      	cmp	r2, #11
 8005eac:	d917      	bls.n	8005ede <_malloc_r+0xca>
 8005eae:	1961      	adds	r1, r4, r5
 8005eb0:	42a3      	cmp	r3, r4
 8005eb2:	6025      	str	r5, [r4, #0]
 8005eb4:	bf18      	it	ne
 8005eb6:	6059      	strne	r1, [r3, #4]
 8005eb8:	6863      	ldr	r3, [r4, #4]
 8005eba:	bf08      	it	eq
 8005ebc:	f8c8 1000 	streq.w	r1, [r8]
 8005ec0:	5162      	str	r2, [r4, r5]
 8005ec2:	604b      	str	r3, [r1, #4]
 8005ec4:	4638      	mov	r0, r7
 8005ec6:	f104 060b 	add.w	r6, r4, #11
 8005eca:	f000 f829 	bl	8005f20 <__malloc_unlock>
 8005ece:	f026 0607 	bic.w	r6, r6, #7
 8005ed2:	1d23      	adds	r3, r4, #4
 8005ed4:	1af2      	subs	r2, r6, r3
 8005ed6:	d0ae      	beq.n	8005e36 <_malloc_r+0x22>
 8005ed8:	1b9b      	subs	r3, r3, r6
 8005eda:	50a3      	str	r3, [r4, r2]
 8005edc:	e7ab      	b.n	8005e36 <_malloc_r+0x22>
 8005ede:	42a3      	cmp	r3, r4
 8005ee0:	6862      	ldr	r2, [r4, #4]
 8005ee2:	d1dd      	bne.n	8005ea0 <_malloc_r+0x8c>
 8005ee4:	f8c8 2000 	str.w	r2, [r8]
 8005ee8:	e7ec      	b.n	8005ec4 <_malloc_r+0xb0>
 8005eea:	4623      	mov	r3, r4
 8005eec:	6864      	ldr	r4, [r4, #4]
 8005eee:	e7ac      	b.n	8005e4a <_malloc_r+0x36>
 8005ef0:	4634      	mov	r4, r6
 8005ef2:	6876      	ldr	r6, [r6, #4]
 8005ef4:	e7b4      	b.n	8005e60 <_malloc_r+0x4c>
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	e7cc      	b.n	8005e94 <_malloc_r+0x80>
 8005efa:	230c      	movs	r3, #12
 8005efc:	603b      	str	r3, [r7, #0]
 8005efe:	4638      	mov	r0, r7
 8005f00:	f000 f80e 	bl	8005f20 <__malloc_unlock>
 8005f04:	e797      	b.n	8005e36 <_malloc_r+0x22>
 8005f06:	6025      	str	r5, [r4, #0]
 8005f08:	e7dc      	b.n	8005ec4 <_malloc_r+0xb0>
 8005f0a:	605b      	str	r3, [r3, #4]
 8005f0c:	deff      	udf	#255	; 0xff
 8005f0e:	bf00      	nop
 8005f10:	20004c10 	.word	0x20004c10

08005f14 <__malloc_lock>:
 8005f14:	4801      	ldr	r0, [pc, #4]	; (8005f1c <__malloc_lock+0x8>)
 8005f16:	f7ff bf00 	b.w	8005d1a <__retarget_lock_acquire_recursive>
 8005f1a:	bf00      	nop
 8005f1c:	20004c0c 	.word	0x20004c0c

08005f20 <__malloc_unlock>:
 8005f20:	4801      	ldr	r0, [pc, #4]	; (8005f28 <__malloc_unlock+0x8>)
 8005f22:	f7ff befb 	b.w	8005d1c <__retarget_lock_release_recursive>
 8005f26:	bf00      	nop
 8005f28:	20004c0c 	.word	0x20004c0c

08005f2c <__sfputc_r>:
 8005f2c:	6893      	ldr	r3, [r2, #8]
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	b410      	push	{r4}
 8005f34:	6093      	str	r3, [r2, #8]
 8005f36:	da08      	bge.n	8005f4a <__sfputc_r+0x1e>
 8005f38:	6994      	ldr	r4, [r2, #24]
 8005f3a:	42a3      	cmp	r3, r4
 8005f3c:	db01      	blt.n	8005f42 <__sfputc_r+0x16>
 8005f3e:	290a      	cmp	r1, #10
 8005f40:	d103      	bne.n	8005f4a <__sfputc_r+0x1e>
 8005f42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f46:	f7ff bd84 	b.w	8005a52 <__swbuf_r>
 8005f4a:	6813      	ldr	r3, [r2, #0]
 8005f4c:	1c58      	adds	r0, r3, #1
 8005f4e:	6010      	str	r0, [r2, #0]
 8005f50:	7019      	strb	r1, [r3, #0]
 8005f52:	4608      	mov	r0, r1
 8005f54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f58:	4770      	bx	lr

08005f5a <__sfputs_r>:
 8005f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f5c:	4606      	mov	r6, r0
 8005f5e:	460f      	mov	r7, r1
 8005f60:	4614      	mov	r4, r2
 8005f62:	18d5      	adds	r5, r2, r3
 8005f64:	42ac      	cmp	r4, r5
 8005f66:	d101      	bne.n	8005f6c <__sfputs_r+0x12>
 8005f68:	2000      	movs	r0, #0
 8005f6a:	e007      	b.n	8005f7c <__sfputs_r+0x22>
 8005f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f70:	463a      	mov	r2, r7
 8005f72:	4630      	mov	r0, r6
 8005f74:	f7ff ffda 	bl	8005f2c <__sfputc_r>
 8005f78:	1c43      	adds	r3, r0, #1
 8005f7a:	d1f3      	bne.n	8005f64 <__sfputs_r+0xa>
 8005f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f80 <_vfiprintf_r>:
 8005f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f84:	460d      	mov	r5, r1
 8005f86:	b09d      	sub	sp, #116	; 0x74
 8005f88:	4614      	mov	r4, r2
 8005f8a:	4698      	mov	r8, r3
 8005f8c:	4606      	mov	r6, r0
 8005f8e:	b118      	cbz	r0, 8005f98 <_vfiprintf_r+0x18>
 8005f90:	6a03      	ldr	r3, [r0, #32]
 8005f92:	b90b      	cbnz	r3, 8005f98 <_vfiprintf_r+0x18>
 8005f94:	f7ff fc76 	bl	8005884 <__sinit>
 8005f98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f9a:	07d9      	lsls	r1, r3, #31
 8005f9c:	d405      	bmi.n	8005faa <_vfiprintf_r+0x2a>
 8005f9e:	89ab      	ldrh	r3, [r5, #12]
 8005fa0:	059a      	lsls	r2, r3, #22
 8005fa2:	d402      	bmi.n	8005faa <_vfiprintf_r+0x2a>
 8005fa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fa6:	f7ff feb8 	bl	8005d1a <__retarget_lock_acquire_recursive>
 8005faa:	89ab      	ldrh	r3, [r5, #12]
 8005fac:	071b      	lsls	r3, r3, #28
 8005fae:	d501      	bpl.n	8005fb4 <_vfiprintf_r+0x34>
 8005fb0:	692b      	ldr	r3, [r5, #16]
 8005fb2:	b99b      	cbnz	r3, 8005fdc <_vfiprintf_r+0x5c>
 8005fb4:	4629      	mov	r1, r5
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	f7ff fd88 	bl	8005acc <__swsetup_r>
 8005fbc:	b170      	cbz	r0, 8005fdc <_vfiprintf_r+0x5c>
 8005fbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fc0:	07dc      	lsls	r4, r3, #31
 8005fc2:	d504      	bpl.n	8005fce <_vfiprintf_r+0x4e>
 8005fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc8:	b01d      	add	sp, #116	; 0x74
 8005fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fce:	89ab      	ldrh	r3, [r5, #12]
 8005fd0:	0598      	lsls	r0, r3, #22
 8005fd2:	d4f7      	bmi.n	8005fc4 <_vfiprintf_r+0x44>
 8005fd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fd6:	f7ff fea1 	bl	8005d1c <__retarget_lock_release_recursive>
 8005fda:	e7f3      	b.n	8005fc4 <_vfiprintf_r+0x44>
 8005fdc:	2300      	movs	r3, #0
 8005fde:	9309      	str	r3, [sp, #36]	; 0x24
 8005fe0:	2320      	movs	r3, #32
 8005fe2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005fe6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fea:	2330      	movs	r3, #48	; 0x30
 8005fec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80061a0 <_vfiprintf_r+0x220>
 8005ff0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ff4:	f04f 0901 	mov.w	r9, #1
 8005ff8:	4623      	mov	r3, r4
 8005ffa:	469a      	mov	sl, r3
 8005ffc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006000:	b10a      	cbz	r2, 8006006 <_vfiprintf_r+0x86>
 8006002:	2a25      	cmp	r2, #37	; 0x25
 8006004:	d1f9      	bne.n	8005ffa <_vfiprintf_r+0x7a>
 8006006:	ebba 0b04 	subs.w	fp, sl, r4
 800600a:	d00b      	beq.n	8006024 <_vfiprintf_r+0xa4>
 800600c:	465b      	mov	r3, fp
 800600e:	4622      	mov	r2, r4
 8006010:	4629      	mov	r1, r5
 8006012:	4630      	mov	r0, r6
 8006014:	f7ff ffa1 	bl	8005f5a <__sfputs_r>
 8006018:	3001      	adds	r0, #1
 800601a:	f000 80a9 	beq.w	8006170 <_vfiprintf_r+0x1f0>
 800601e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006020:	445a      	add	r2, fp
 8006022:	9209      	str	r2, [sp, #36]	; 0x24
 8006024:	f89a 3000 	ldrb.w	r3, [sl]
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 80a1 	beq.w	8006170 <_vfiprintf_r+0x1f0>
 800602e:	2300      	movs	r3, #0
 8006030:	f04f 32ff 	mov.w	r2, #4294967295
 8006034:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006038:	f10a 0a01 	add.w	sl, sl, #1
 800603c:	9304      	str	r3, [sp, #16]
 800603e:	9307      	str	r3, [sp, #28]
 8006040:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006044:	931a      	str	r3, [sp, #104]	; 0x68
 8006046:	4654      	mov	r4, sl
 8006048:	2205      	movs	r2, #5
 800604a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800604e:	4854      	ldr	r0, [pc, #336]	; (80061a0 <_vfiprintf_r+0x220>)
 8006050:	f7fa f8ce 	bl	80001f0 <memchr>
 8006054:	9a04      	ldr	r2, [sp, #16]
 8006056:	b9d8      	cbnz	r0, 8006090 <_vfiprintf_r+0x110>
 8006058:	06d1      	lsls	r1, r2, #27
 800605a:	bf44      	itt	mi
 800605c:	2320      	movmi	r3, #32
 800605e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006062:	0713      	lsls	r3, r2, #28
 8006064:	bf44      	itt	mi
 8006066:	232b      	movmi	r3, #43	; 0x2b
 8006068:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800606c:	f89a 3000 	ldrb.w	r3, [sl]
 8006070:	2b2a      	cmp	r3, #42	; 0x2a
 8006072:	d015      	beq.n	80060a0 <_vfiprintf_r+0x120>
 8006074:	9a07      	ldr	r2, [sp, #28]
 8006076:	4654      	mov	r4, sl
 8006078:	2000      	movs	r0, #0
 800607a:	f04f 0c0a 	mov.w	ip, #10
 800607e:	4621      	mov	r1, r4
 8006080:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006084:	3b30      	subs	r3, #48	; 0x30
 8006086:	2b09      	cmp	r3, #9
 8006088:	d94d      	bls.n	8006126 <_vfiprintf_r+0x1a6>
 800608a:	b1b0      	cbz	r0, 80060ba <_vfiprintf_r+0x13a>
 800608c:	9207      	str	r2, [sp, #28]
 800608e:	e014      	b.n	80060ba <_vfiprintf_r+0x13a>
 8006090:	eba0 0308 	sub.w	r3, r0, r8
 8006094:	fa09 f303 	lsl.w	r3, r9, r3
 8006098:	4313      	orrs	r3, r2
 800609a:	9304      	str	r3, [sp, #16]
 800609c:	46a2      	mov	sl, r4
 800609e:	e7d2      	b.n	8006046 <_vfiprintf_r+0xc6>
 80060a0:	9b03      	ldr	r3, [sp, #12]
 80060a2:	1d19      	adds	r1, r3, #4
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	9103      	str	r1, [sp, #12]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	bfbb      	ittet	lt
 80060ac:	425b      	neglt	r3, r3
 80060ae:	f042 0202 	orrlt.w	r2, r2, #2
 80060b2:	9307      	strge	r3, [sp, #28]
 80060b4:	9307      	strlt	r3, [sp, #28]
 80060b6:	bfb8      	it	lt
 80060b8:	9204      	strlt	r2, [sp, #16]
 80060ba:	7823      	ldrb	r3, [r4, #0]
 80060bc:	2b2e      	cmp	r3, #46	; 0x2e
 80060be:	d10c      	bne.n	80060da <_vfiprintf_r+0x15a>
 80060c0:	7863      	ldrb	r3, [r4, #1]
 80060c2:	2b2a      	cmp	r3, #42	; 0x2a
 80060c4:	d134      	bne.n	8006130 <_vfiprintf_r+0x1b0>
 80060c6:	9b03      	ldr	r3, [sp, #12]
 80060c8:	1d1a      	adds	r2, r3, #4
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	9203      	str	r2, [sp, #12]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	bfb8      	it	lt
 80060d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80060d6:	3402      	adds	r4, #2
 80060d8:	9305      	str	r3, [sp, #20]
 80060da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80061b0 <_vfiprintf_r+0x230>
 80060de:	7821      	ldrb	r1, [r4, #0]
 80060e0:	2203      	movs	r2, #3
 80060e2:	4650      	mov	r0, sl
 80060e4:	f7fa f884 	bl	80001f0 <memchr>
 80060e8:	b138      	cbz	r0, 80060fa <_vfiprintf_r+0x17a>
 80060ea:	9b04      	ldr	r3, [sp, #16]
 80060ec:	eba0 000a 	sub.w	r0, r0, sl
 80060f0:	2240      	movs	r2, #64	; 0x40
 80060f2:	4082      	lsls	r2, r0
 80060f4:	4313      	orrs	r3, r2
 80060f6:	3401      	adds	r4, #1
 80060f8:	9304      	str	r3, [sp, #16]
 80060fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060fe:	4829      	ldr	r0, [pc, #164]	; (80061a4 <_vfiprintf_r+0x224>)
 8006100:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006104:	2206      	movs	r2, #6
 8006106:	f7fa f873 	bl	80001f0 <memchr>
 800610a:	2800      	cmp	r0, #0
 800610c:	d03f      	beq.n	800618e <_vfiprintf_r+0x20e>
 800610e:	4b26      	ldr	r3, [pc, #152]	; (80061a8 <_vfiprintf_r+0x228>)
 8006110:	bb1b      	cbnz	r3, 800615a <_vfiprintf_r+0x1da>
 8006112:	9b03      	ldr	r3, [sp, #12]
 8006114:	3307      	adds	r3, #7
 8006116:	f023 0307 	bic.w	r3, r3, #7
 800611a:	3308      	adds	r3, #8
 800611c:	9303      	str	r3, [sp, #12]
 800611e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006120:	443b      	add	r3, r7
 8006122:	9309      	str	r3, [sp, #36]	; 0x24
 8006124:	e768      	b.n	8005ff8 <_vfiprintf_r+0x78>
 8006126:	fb0c 3202 	mla	r2, ip, r2, r3
 800612a:	460c      	mov	r4, r1
 800612c:	2001      	movs	r0, #1
 800612e:	e7a6      	b.n	800607e <_vfiprintf_r+0xfe>
 8006130:	2300      	movs	r3, #0
 8006132:	3401      	adds	r4, #1
 8006134:	9305      	str	r3, [sp, #20]
 8006136:	4619      	mov	r1, r3
 8006138:	f04f 0c0a 	mov.w	ip, #10
 800613c:	4620      	mov	r0, r4
 800613e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006142:	3a30      	subs	r2, #48	; 0x30
 8006144:	2a09      	cmp	r2, #9
 8006146:	d903      	bls.n	8006150 <_vfiprintf_r+0x1d0>
 8006148:	2b00      	cmp	r3, #0
 800614a:	d0c6      	beq.n	80060da <_vfiprintf_r+0x15a>
 800614c:	9105      	str	r1, [sp, #20]
 800614e:	e7c4      	b.n	80060da <_vfiprintf_r+0x15a>
 8006150:	fb0c 2101 	mla	r1, ip, r1, r2
 8006154:	4604      	mov	r4, r0
 8006156:	2301      	movs	r3, #1
 8006158:	e7f0      	b.n	800613c <_vfiprintf_r+0x1bc>
 800615a:	ab03      	add	r3, sp, #12
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	462a      	mov	r2, r5
 8006160:	4b12      	ldr	r3, [pc, #72]	; (80061ac <_vfiprintf_r+0x22c>)
 8006162:	a904      	add	r1, sp, #16
 8006164:	4630      	mov	r0, r6
 8006166:	f3af 8000 	nop.w
 800616a:	4607      	mov	r7, r0
 800616c:	1c78      	adds	r0, r7, #1
 800616e:	d1d6      	bne.n	800611e <_vfiprintf_r+0x19e>
 8006170:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006172:	07d9      	lsls	r1, r3, #31
 8006174:	d405      	bmi.n	8006182 <_vfiprintf_r+0x202>
 8006176:	89ab      	ldrh	r3, [r5, #12]
 8006178:	059a      	lsls	r2, r3, #22
 800617a:	d402      	bmi.n	8006182 <_vfiprintf_r+0x202>
 800617c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800617e:	f7ff fdcd 	bl	8005d1c <__retarget_lock_release_recursive>
 8006182:	89ab      	ldrh	r3, [r5, #12]
 8006184:	065b      	lsls	r3, r3, #25
 8006186:	f53f af1d 	bmi.w	8005fc4 <_vfiprintf_r+0x44>
 800618a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800618c:	e71c      	b.n	8005fc8 <_vfiprintf_r+0x48>
 800618e:	ab03      	add	r3, sp, #12
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	462a      	mov	r2, r5
 8006194:	4b05      	ldr	r3, [pc, #20]	; (80061ac <_vfiprintf_r+0x22c>)
 8006196:	a904      	add	r1, sp, #16
 8006198:	4630      	mov	r0, r6
 800619a:	f000 f879 	bl	8006290 <_printf_i>
 800619e:	e7e4      	b.n	800616a <_vfiprintf_r+0x1ea>
 80061a0:	08006850 	.word	0x08006850
 80061a4:	0800685a 	.word	0x0800685a
 80061a8:	00000000 	.word	0x00000000
 80061ac:	08005f5b 	.word	0x08005f5b
 80061b0:	08006856 	.word	0x08006856

080061b4 <_printf_common>:
 80061b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061b8:	4616      	mov	r6, r2
 80061ba:	4699      	mov	r9, r3
 80061bc:	688a      	ldr	r2, [r1, #8]
 80061be:	690b      	ldr	r3, [r1, #16]
 80061c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061c4:	4293      	cmp	r3, r2
 80061c6:	bfb8      	it	lt
 80061c8:	4613      	movlt	r3, r2
 80061ca:	6033      	str	r3, [r6, #0]
 80061cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061d0:	4607      	mov	r7, r0
 80061d2:	460c      	mov	r4, r1
 80061d4:	b10a      	cbz	r2, 80061da <_printf_common+0x26>
 80061d6:	3301      	adds	r3, #1
 80061d8:	6033      	str	r3, [r6, #0]
 80061da:	6823      	ldr	r3, [r4, #0]
 80061dc:	0699      	lsls	r1, r3, #26
 80061de:	bf42      	ittt	mi
 80061e0:	6833      	ldrmi	r3, [r6, #0]
 80061e2:	3302      	addmi	r3, #2
 80061e4:	6033      	strmi	r3, [r6, #0]
 80061e6:	6825      	ldr	r5, [r4, #0]
 80061e8:	f015 0506 	ands.w	r5, r5, #6
 80061ec:	d106      	bne.n	80061fc <_printf_common+0x48>
 80061ee:	f104 0a19 	add.w	sl, r4, #25
 80061f2:	68e3      	ldr	r3, [r4, #12]
 80061f4:	6832      	ldr	r2, [r6, #0]
 80061f6:	1a9b      	subs	r3, r3, r2
 80061f8:	42ab      	cmp	r3, r5
 80061fa:	dc26      	bgt.n	800624a <_printf_common+0x96>
 80061fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006200:	1e13      	subs	r3, r2, #0
 8006202:	6822      	ldr	r2, [r4, #0]
 8006204:	bf18      	it	ne
 8006206:	2301      	movne	r3, #1
 8006208:	0692      	lsls	r2, r2, #26
 800620a:	d42b      	bmi.n	8006264 <_printf_common+0xb0>
 800620c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006210:	4649      	mov	r1, r9
 8006212:	4638      	mov	r0, r7
 8006214:	47c0      	blx	r8
 8006216:	3001      	adds	r0, #1
 8006218:	d01e      	beq.n	8006258 <_printf_common+0xa4>
 800621a:	6823      	ldr	r3, [r4, #0]
 800621c:	6922      	ldr	r2, [r4, #16]
 800621e:	f003 0306 	and.w	r3, r3, #6
 8006222:	2b04      	cmp	r3, #4
 8006224:	bf02      	ittt	eq
 8006226:	68e5      	ldreq	r5, [r4, #12]
 8006228:	6833      	ldreq	r3, [r6, #0]
 800622a:	1aed      	subeq	r5, r5, r3
 800622c:	68a3      	ldr	r3, [r4, #8]
 800622e:	bf0c      	ite	eq
 8006230:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006234:	2500      	movne	r5, #0
 8006236:	4293      	cmp	r3, r2
 8006238:	bfc4      	itt	gt
 800623a:	1a9b      	subgt	r3, r3, r2
 800623c:	18ed      	addgt	r5, r5, r3
 800623e:	2600      	movs	r6, #0
 8006240:	341a      	adds	r4, #26
 8006242:	42b5      	cmp	r5, r6
 8006244:	d11a      	bne.n	800627c <_printf_common+0xc8>
 8006246:	2000      	movs	r0, #0
 8006248:	e008      	b.n	800625c <_printf_common+0xa8>
 800624a:	2301      	movs	r3, #1
 800624c:	4652      	mov	r2, sl
 800624e:	4649      	mov	r1, r9
 8006250:	4638      	mov	r0, r7
 8006252:	47c0      	blx	r8
 8006254:	3001      	adds	r0, #1
 8006256:	d103      	bne.n	8006260 <_printf_common+0xac>
 8006258:	f04f 30ff 	mov.w	r0, #4294967295
 800625c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006260:	3501      	adds	r5, #1
 8006262:	e7c6      	b.n	80061f2 <_printf_common+0x3e>
 8006264:	18e1      	adds	r1, r4, r3
 8006266:	1c5a      	adds	r2, r3, #1
 8006268:	2030      	movs	r0, #48	; 0x30
 800626a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800626e:	4422      	add	r2, r4
 8006270:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006274:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006278:	3302      	adds	r3, #2
 800627a:	e7c7      	b.n	800620c <_printf_common+0x58>
 800627c:	2301      	movs	r3, #1
 800627e:	4622      	mov	r2, r4
 8006280:	4649      	mov	r1, r9
 8006282:	4638      	mov	r0, r7
 8006284:	47c0      	blx	r8
 8006286:	3001      	adds	r0, #1
 8006288:	d0e6      	beq.n	8006258 <_printf_common+0xa4>
 800628a:	3601      	adds	r6, #1
 800628c:	e7d9      	b.n	8006242 <_printf_common+0x8e>
	...

08006290 <_printf_i>:
 8006290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006294:	7e0f      	ldrb	r7, [r1, #24]
 8006296:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006298:	2f78      	cmp	r7, #120	; 0x78
 800629a:	4691      	mov	r9, r2
 800629c:	4680      	mov	r8, r0
 800629e:	460c      	mov	r4, r1
 80062a0:	469a      	mov	sl, r3
 80062a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80062a6:	d807      	bhi.n	80062b8 <_printf_i+0x28>
 80062a8:	2f62      	cmp	r7, #98	; 0x62
 80062aa:	d80a      	bhi.n	80062c2 <_printf_i+0x32>
 80062ac:	2f00      	cmp	r7, #0
 80062ae:	f000 80d4 	beq.w	800645a <_printf_i+0x1ca>
 80062b2:	2f58      	cmp	r7, #88	; 0x58
 80062b4:	f000 80c0 	beq.w	8006438 <_printf_i+0x1a8>
 80062b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062c0:	e03a      	b.n	8006338 <_printf_i+0xa8>
 80062c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062c6:	2b15      	cmp	r3, #21
 80062c8:	d8f6      	bhi.n	80062b8 <_printf_i+0x28>
 80062ca:	a101      	add	r1, pc, #4	; (adr r1, 80062d0 <_printf_i+0x40>)
 80062cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062d0:	08006329 	.word	0x08006329
 80062d4:	0800633d 	.word	0x0800633d
 80062d8:	080062b9 	.word	0x080062b9
 80062dc:	080062b9 	.word	0x080062b9
 80062e0:	080062b9 	.word	0x080062b9
 80062e4:	080062b9 	.word	0x080062b9
 80062e8:	0800633d 	.word	0x0800633d
 80062ec:	080062b9 	.word	0x080062b9
 80062f0:	080062b9 	.word	0x080062b9
 80062f4:	080062b9 	.word	0x080062b9
 80062f8:	080062b9 	.word	0x080062b9
 80062fc:	08006441 	.word	0x08006441
 8006300:	08006369 	.word	0x08006369
 8006304:	080063fb 	.word	0x080063fb
 8006308:	080062b9 	.word	0x080062b9
 800630c:	080062b9 	.word	0x080062b9
 8006310:	08006463 	.word	0x08006463
 8006314:	080062b9 	.word	0x080062b9
 8006318:	08006369 	.word	0x08006369
 800631c:	080062b9 	.word	0x080062b9
 8006320:	080062b9 	.word	0x080062b9
 8006324:	08006403 	.word	0x08006403
 8006328:	682b      	ldr	r3, [r5, #0]
 800632a:	1d1a      	adds	r2, r3, #4
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	602a      	str	r2, [r5, #0]
 8006330:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006334:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006338:	2301      	movs	r3, #1
 800633a:	e09f      	b.n	800647c <_printf_i+0x1ec>
 800633c:	6820      	ldr	r0, [r4, #0]
 800633e:	682b      	ldr	r3, [r5, #0]
 8006340:	0607      	lsls	r7, r0, #24
 8006342:	f103 0104 	add.w	r1, r3, #4
 8006346:	6029      	str	r1, [r5, #0]
 8006348:	d501      	bpl.n	800634e <_printf_i+0xbe>
 800634a:	681e      	ldr	r6, [r3, #0]
 800634c:	e003      	b.n	8006356 <_printf_i+0xc6>
 800634e:	0646      	lsls	r6, r0, #25
 8006350:	d5fb      	bpl.n	800634a <_printf_i+0xba>
 8006352:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006356:	2e00      	cmp	r6, #0
 8006358:	da03      	bge.n	8006362 <_printf_i+0xd2>
 800635a:	232d      	movs	r3, #45	; 0x2d
 800635c:	4276      	negs	r6, r6
 800635e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006362:	485a      	ldr	r0, [pc, #360]	; (80064cc <_printf_i+0x23c>)
 8006364:	230a      	movs	r3, #10
 8006366:	e012      	b.n	800638e <_printf_i+0xfe>
 8006368:	682b      	ldr	r3, [r5, #0]
 800636a:	6820      	ldr	r0, [r4, #0]
 800636c:	1d19      	adds	r1, r3, #4
 800636e:	6029      	str	r1, [r5, #0]
 8006370:	0605      	lsls	r5, r0, #24
 8006372:	d501      	bpl.n	8006378 <_printf_i+0xe8>
 8006374:	681e      	ldr	r6, [r3, #0]
 8006376:	e002      	b.n	800637e <_printf_i+0xee>
 8006378:	0641      	lsls	r1, r0, #25
 800637a:	d5fb      	bpl.n	8006374 <_printf_i+0xe4>
 800637c:	881e      	ldrh	r6, [r3, #0]
 800637e:	4853      	ldr	r0, [pc, #332]	; (80064cc <_printf_i+0x23c>)
 8006380:	2f6f      	cmp	r7, #111	; 0x6f
 8006382:	bf0c      	ite	eq
 8006384:	2308      	moveq	r3, #8
 8006386:	230a      	movne	r3, #10
 8006388:	2100      	movs	r1, #0
 800638a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800638e:	6865      	ldr	r5, [r4, #4]
 8006390:	60a5      	str	r5, [r4, #8]
 8006392:	2d00      	cmp	r5, #0
 8006394:	bfa2      	ittt	ge
 8006396:	6821      	ldrge	r1, [r4, #0]
 8006398:	f021 0104 	bicge.w	r1, r1, #4
 800639c:	6021      	strge	r1, [r4, #0]
 800639e:	b90e      	cbnz	r6, 80063a4 <_printf_i+0x114>
 80063a0:	2d00      	cmp	r5, #0
 80063a2:	d04b      	beq.n	800643c <_printf_i+0x1ac>
 80063a4:	4615      	mov	r5, r2
 80063a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80063aa:	fb03 6711 	mls	r7, r3, r1, r6
 80063ae:	5dc7      	ldrb	r7, [r0, r7]
 80063b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80063b4:	4637      	mov	r7, r6
 80063b6:	42bb      	cmp	r3, r7
 80063b8:	460e      	mov	r6, r1
 80063ba:	d9f4      	bls.n	80063a6 <_printf_i+0x116>
 80063bc:	2b08      	cmp	r3, #8
 80063be:	d10b      	bne.n	80063d8 <_printf_i+0x148>
 80063c0:	6823      	ldr	r3, [r4, #0]
 80063c2:	07de      	lsls	r6, r3, #31
 80063c4:	d508      	bpl.n	80063d8 <_printf_i+0x148>
 80063c6:	6923      	ldr	r3, [r4, #16]
 80063c8:	6861      	ldr	r1, [r4, #4]
 80063ca:	4299      	cmp	r1, r3
 80063cc:	bfde      	ittt	le
 80063ce:	2330      	movle	r3, #48	; 0x30
 80063d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80063d8:	1b52      	subs	r2, r2, r5
 80063da:	6122      	str	r2, [r4, #16]
 80063dc:	f8cd a000 	str.w	sl, [sp]
 80063e0:	464b      	mov	r3, r9
 80063e2:	aa03      	add	r2, sp, #12
 80063e4:	4621      	mov	r1, r4
 80063e6:	4640      	mov	r0, r8
 80063e8:	f7ff fee4 	bl	80061b4 <_printf_common>
 80063ec:	3001      	adds	r0, #1
 80063ee:	d14a      	bne.n	8006486 <_printf_i+0x1f6>
 80063f0:	f04f 30ff 	mov.w	r0, #4294967295
 80063f4:	b004      	add	sp, #16
 80063f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063fa:	6823      	ldr	r3, [r4, #0]
 80063fc:	f043 0320 	orr.w	r3, r3, #32
 8006400:	6023      	str	r3, [r4, #0]
 8006402:	4833      	ldr	r0, [pc, #204]	; (80064d0 <_printf_i+0x240>)
 8006404:	2778      	movs	r7, #120	; 0x78
 8006406:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800640a:	6823      	ldr	r3, [r4, #0]
 800640c:	6829      	ldr	r1, [r5, #0]
 800640e:	061f      	lsls	r7, r3, #24
 8006410:	f851 6b04 	ldr.w	r6, [r1], #4
 8006414:	d402      	bmi.n	800641c <_printf_i+0x18c>
 8006416:	065f      	lsls	r7, r3, #25
 8006418:	bf48      	it	mi
 800641a:	b2b6      	uxthmi	r6, r6
 800641c:	07df      	lsls	r7, r3, #31
 800641e:	bf48      	it	mi
 8006420:	f043 0320 	orrmi.w	r3, r3, #32
 8006424:	6029      	str	r1, [r5, #0]
 8006426:	bf48      	it	mi
 8006428:	6023      	strmi	r3, [r4, #0]
 800642a:	b91e      	cbnz	r6, 8006434 <_printf_i+0x1a4>
 800642c:	6823      	ldr	r3, [r4, #0]
 800642e:	f023 0320 	bic.w	r3, r3, #32
 8006432:	6023      	str	r3, [r4, #0]
 8006434:	2310      	movs	r3, #16
 8006436:	e7a7      	b.n	8006388 <_printf_i+0xf8>
 8006438:	4824      	ldr	r0, [pc, #144]	; (80064cc <_printf_i+0x23c>)
 800643a:	e7e4      	b.n	8006406 <_printf_i+0x176>
 800643c:	4615      	mov	r5, r2
 800643e:	e7bd      	b.n	80063bc <_printf_i+0x12c>
 8006440:	682b      	ldr	r3, [r5, #0]
 8006442:	6826      	ldr	r6, [r4, #0]
 8006444:	6961      	ldr	r1, [r4, #20]
 8006446:	1d18      	adds	r0, r3, #4
 8006448:	6028      	str	r0, [r5, #0]
 800644a:	0635      	lsls	r5, r6, #24
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	d501      	bpl.n	8006454 <_printf_i+0x1c4>
 8006450:	6019      	str	r1, [r3, #0]
 8006452:	e002      	b.n	800645a <_printf_i+0x1ca>
 8006454:	0670      	lsls	r0, r6, #25
 8006456:	d5fb      	bpl.n	8006450 <_printf_i+0x1c0>
 8006458:	8019      	strh	r1, [r3, #0]
 800645a:	2300      	movs	r3, #0
 800645c:	6123      	str	r3, [r4, #16]
 800645e:	4615      	mov	r5, r2
 8006460:	e7bc      	b.n	80063dc <_printf_i+0x14c>
 8006462:	682b      	ldr	r3, [r5, #0]
 8006464:	1d1a      	adds	r2, r3, #4
 8006466:	602a      	str	r2, [r5, #0]
 8006468:	681d      	ldr	r5, [r3, #0]
 800646a:	6862      	ldr	r2, [r4, #4]
 800646c:	2100      	movs	r1, #0
 800646e:	4628      	mov	r0, r5
 8006470:	f7f9 febe 	bl	80001f0 <memchr>
 8006474:	b108      	cbz	r0, 800647a <_printf_i+0x1ea>
 8006476:	1b40      	subs	r0, r0, r5
 8006478:	6060      	str	r0, [r4, #4]
 800647a:	6863      	ldr	r3, [r4, #4]
 800647c:	6123      	str	r3, [r4, #16]
 800647e:	2300      	movs	r3, #0
 8006480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006484:	e7aa      	b.n	80063dc <_printf_i+0x14c>
 8006486:	6923      	ldr	r3, [r4, #16]
 8006488:	462a      	mov	r2, r5
 800648a:	4649      	mov	r1, r9
 800648c:	4640      	mov	r0, r8
 800648e:	47d0      	blx	sl
 8006490:	3001      	adds	r0, #1
 8006492:	d0ad      	beq.n	80063f0 <_printf_i+0x160>
 8006494:	6823      	ldr	r3, [r4, #0]
 8006496:	079b      	lsls	r3, r3, #30
 8006498:	d413      	bmi.n	80064c2 <_printf_i+0x232>
 800649a:	68e0      	ldr	r0, [r4, #12]
 800649c:	9b03      	ldr	r3, [sp, #12]
 800649e:	4298      	cmp	r0, r3
 80064a0:	bfb8      	it	lt
 80064a2:	4618      	movlt	r0, r3
 80064a4:	e7a6      	b.n	80063f4 <_printf_i+0x164>
 80064a6:	2301      	movs	r3, #1
 80064a8:	4632      	mov	r2, r6
 80064aa:	4649      	mov	r1, r9
 80064ac:	4640      	mov	r0, r8
 80064ae:	47d0      	blx	sl
 80064b0:	3001      	adds	r0, #1
 80064b2:	d09d      	beq.n	80063f0 <_printf_i+0x160>
 80064b4:	3501      	adds	r5, #1
 80064b6:	68e3      	ldr	r3, [r4, #12]
 80064b8:	9903      	ldr	r1, [sp, #12]
 80064ba:	1a5b      	subs	r3, r3, r1
 80064bc:	42ab      	cmp	r3, r5
 80064be:	dcf2      	bgt.n	80064a6 <_printf_i+0x216>
 80064c0:	e7eb      	b.n	800649a <_printf_i+0x20a>
 80064c2:	2500      	movs	r5, #0
 80064c4:	f104 0619 	add.w	r6, r4, #25
 80064c8:	e7f5      	b.n	80064b6 <_printf_i+0x226>
 80064ca:	bf00      	nop
 80064cc:	08006861 	.word	0x08006861
 80064d0:	08006872 	.word	0x08006872

080064d4 <__sflush_r>:
 80064d4:	898a      	ldrh	r2, [r1, #12]
 80064d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064da:	4605      	mov	r5, r0
 80064dc:	0710      	lsls	r0, r2, #28
 80064de:	460c      	mov	r4, r1
 80064e0:	d458      	bmi.n	8006594 <__sflush_r+0xc0>
 80064e2:	684b      	ldr	r3, [r1, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	dc05      	bgt.n	80064f4 <__sflush_r+0x20>
 80064e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	dc02      	bgt.n	80064f4 <__sflush_r+0x20>
 80064ee:	2000      	movs	r0, #0
 80064f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064f6:	2e00      	cmp	r6, #0
 80064f8:	d0f9      	beq.n	80064ee <__sflush_r+0x1a>
 80064fa:	2300      	movs	r3, #0
 80064fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006500:	682f      	ldr	r7, [r5, #0]
 8006502:	6a21      	ldr	r1, [r4, #32]
 8006504:	602b      	str	r3, [r5, #0]
 8006506:	d032      	beq.n	800656e <__sflush_r+0x9a>
 8006508:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800650a:	89a3      	ldrh	r3, [r4, #12]
 800650c:	075a      	lsls	r2, r3, #29
 800650e:	d505      	bpl.n	800651c <__sflush_r+0x48>
 8006510:	6863      	ldr	r3, [r4, #4]
 8006512:	1ac0      	subs	r0, r0, r3
 8006514:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006516:	b10b      	cbz	r3, 800651c <__sflush_r+0x48>
 8006518:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800651a:	1ac0      	subs	r0, r0, r3
 800651c:	2300      	movs	r3, #0
 800651e:	4602      	mov	r2, r0
 8006520:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006522:	6a21      	ldr	r1, [r4, #32]
 8006524:	4628      	mov	r0, r5
 8006526:	47b0      	blx	r6
 8006528:	1c43      	adds	r3, r0, #1
 800652a:	89a3      	ldrh	r3, [r4, #12]
 800652c:	d106      	bne.n	800653c <__sflush_r+0x68>
 800652e:	6829      	ldr	r1, [r5, #0]
 8006530:	291d      	cmp	r1, #29
 8006532:	d82b      	bhi.n	800658c <__sflush_r+0xb8>
 8006534:	4a29      	ldr	r2, [pc, #164]	; (80065dc <__sflush_r+0x108>)
 8006536:	410a      	asrs	r2, r1
 8006538:	07d6      	lsls	r6, r2, #31
 800653a:	d427      	bmi.n	800658c <__sflush_r+0xb8>
 800653c:	2200      	movs	r2, #0
 800653e:	6062      	str	r2, [r4, #4]
 8006540:	04d9      	lsls	r1, r3, #19
 8006542:	6922      	ldr	r2, [r4, #16]
 8006544:	6022      	str	r2, [r4, #0]
 8006546:	d504      	bpl.n	8006552 <__sflush_r+0x7e>
 8006548:	1c42      	adds	r2, r0, #1
 800654a:	d101      	bne.n	8006550 <__sflush_r+0x7c>
 800654c:	682b      	ldr	r3, [r5, #0]
 800654e:	b903      	cbnz	r3, 8006552 <__sflush_r+0x7e>
 8006550:	6560      	str	r0, [r4, #84]	; 0x54
 8006552:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006554:	602f      	str	r7, [r5, #0]
 8006556:	2900      	cmp	r1, #0
 8006558:	d0c9      	beq.n	80064ee <__sflush_r+0x1a>
 800655a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800655e:	4299      	cmp	r1, r3
 8006560:	d002      	beq.n	8006568 <__sflush_r+0x94>
 8006562:	4628      	mov	r0, r5
 8006564:	f7ff fbea 	bl	8005d3c <_free_r>
 8006568:	2000      	movs	r0, #0
 800656a:	6360      	str	r0, [r4, #52]	; 0x34
 800656c:	e7c0      	b.n	80064f0 <__sflush_r+0x1c>
 800656e:	2301      	movs	r3, #1
 8006570:	4628      	mov	r0, r5
 8006572:	47b0      	blx	r6
 8006574:	1c41      	adds	r1, r0, #1
 8006576:	d1c8      	bne.n	800650a <__sflush_r+0x36>
 8006578:	682b      	ldr	r3, [r5, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d0c5      	beq.n	800650a <__sflush_r+0x36>
 800657e:	2b1d      	cmp	r3, #29
 8006580:	d001      	beq.n	8006586 <__sflush_r+0xb2>
 8006582:	2b16      	cmp	r3, #22
 8006584:	d101      	bne.n	800658a <__sflush_r+0xb6>
 8006586:	602f      	str	r7, [r5, #0]
 8006588:	e7b1      	b.n	80064ee <__sflush_r+0x1a>
 800658a:	89a3      	ldrh	r3, [r4, #12]
 800658c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006590:	81a3      	strh	r3, [r4, #12]
 8006592:	e7ad      	b.n	80064f0 <__sflush_r+0x1c>
 8006594:	690f      	ldr	r7, [r1, #16]
 8006596:	2f00      	cmp	r7, #0
 8006598:	d0a9      	beq.n	80064ee <__sflush_r+0x1a>
 800659a:	0793      	lsls	r3, r2, #30
 800659c:	680e      	ldr	r6, [r1, #0]
 800659e:	bf08      	it	eq
 80065a0:	694b      	ldreq	r3, [r1, #20]
 80065a2:	600f      	str	r7, [r1, #0]
 80065a4:	bf18      	it	ne
 80065a6:	2300      	movne	r3, #0
 80065a8:	eba6 0807 	sub.w	r8, r6, r7
 80065ac:	608b      	str	r3, [r1, #8]
 80065ae:	f1b8 0f00 	cmp.w	r8, #0
 80065b2:	dd9c      	ble.n	80064ee <__sflush_r+0x1a>
 80065b4:	6a21      	ldr	r1, [r4, #32]
 80065b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80065b8:	4643      	mov	r3, r8
 80065ba:	463a      	mov	r2, r7
 80065bc:	4628      	mov	r0, r5
 80065be:	47b0      	blx	r6
 80065c0:	2800      	cmp	r0, #0
 80065c2:	dc06      	bgt.n	80065d2 <__sflush_r+0xfe>
 80065c4:	89a3      	ldrh	r3, [r4, #12]
 80065c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065ca:	81a3      	strh	r3, [r4, #12]
 80065cc:	f04f 30ff 	mov.w	r0, #4294967295
 80065d0:	e78e      	b.n	80064f0 <__sflush_r+0x1c>
 80065d2:	4407      	add	r7, r0
 80065d4:	eba8 0800 	sub.w	r8, r8, r0
 80065d8:	e7e9      	b.n	80065ae <__sflush_r+0xda>
 80065da:	bf00      	nop
 80065dc:	dfbffffe 	.word	0xdfbffffe

080065e0 <_fflush_r>:
 80065e0:	b538      	push	{r3, r4, r5, lr}
 80065e2:	690b      	ldr	r3, [r1, #16]
 80065e4:	4605      	mov	r5, r0
 80065e6:	460c      	mov	r4, r1
 80065e8:	b913      	cbnz	r3, 80065f0 <_fflush_r+0x10>
 80065ea:	2500      	movs	r5, #0
 80065ec:	4628      	mov	r0, r5
 80065ee:	bd38      	pop	{r3, r4, r5, pc}
 80065f0:	b118      	cbz	r0, 80065fa <_fflush_r+0x1a>
 80065f2:	6a03      	ldr	r3, [r0, #32]
 80065f4:	b90b      	cbnz	r3, 80065fa <_fflush_r+0x1a>
 80065f6:	f7ff f945 	bl	8005884 <__sinit>
 80065fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d0f3      	beq.n	80065ea <_fflush_r+0xa>
 8006602:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006604:	07d0      	lsls	r0, r2, #31
 8006606:	d404      	bmi.n	8006612 <_fflush_r+0x32>
 8006608:	0599      	lsls	r1, r3, #22
 800660a:	d402      	bmi.n	8006612 <_fflush_r+0x32>
 800660c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800660e:	f7ff fb84 	bl	8005d1a <__retarget_lock_acquire_recursive>
 8006612:	4628      	mov	r0, r5
 8006614:	4621      	mov	r1, r4
 8006616:	f7ff ff5d 	bl	80064d4 <__sflush_r>
 800661a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800661c:	07da      	lsls	r2, r3, #31
 800661e:	4605      	mov	r5, r0
 8006620:	d4e4      	bmi.n	80065ec <_fflush_r+0xc>
 8006622:	89a3      	ldrh	r3, [r4, #12]
 8006624:	059b      	lsls	r3, r3, #22
 8006626:	d4e1      	bmi.n	80065ec <_fflush_r+0xc>
 8006628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800662a:	f7ff fb77 	bl	8005d1c <__retarget_lock_release_recursive>
 800662e:	e7dd      	b.n	80065ec <_fflush_r+0xc>

08006630 <__swhatbuf_r>:
 8006630:	b570      	push	{r4, r5, r6, lr}
 8006632:	460c      	mov	r4, r1
 8006634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006638:	2900      	cmp	r1, #0
 800663a:	b096      	sub	sp, #88	; 0x58
 800663c:	4615      	mov	r5, r2
 800663e:	461e      	mov	r6, r3
 8006640:	da0d      	bge.n	800665e <__swhatbuf_r+0x2e>
 8006642:	89a3      	ldrh	r3, [r4, #12]
 8006644:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006648:	f04f 0100 	mov.w	r1, #0
 800664c:	bf0c      	ite	eq
 800664e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006652:	2340      	movne	r3, #64	; 0x40
 8006654:	2000      	movs	r0, #0
 8006656:	6031      	str	r1, [r6, #0]
 8006658:	602b      	str	r3, [r5, #0]
 800665a:	b016      	add	sp, #88	; 0x58
 800665c:	bd70      	pop	{r4, r5, r6, pc}
 800665e:	466a      	mov	r2, sp
 8006660:	f000 f848 	bl	80066f4 <_fstat_r>
 8006664:	2800      	cmp	r0, #0
 8006666:	dbec      	blt.n	8006642 <__swhatbuf_r+0x12>
 8006668:	9901      	ldr	r1, [sp, #4]
 800666a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800666e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006672:	4259      	negs	r1, r3
 8006674:	4159      	adcs	r1, r3
 8006676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800667a:	e7eb      	b.n	8006654 <__swhatbuf_r+0x24>

0800667c <__smakebuf_r>:
 800667c:	898b      	ldrh	r3, [r1, #12]
 800667e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006680:	079d      	lsls	r5, r3, #30
 8006682:	4606      	mov	r6, r0
 8006684:	460c      	mov	r4, r1
 8006686:	d507      	bpl.n	8006698 <__smakebuf_r+0x1c>
 8006688:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800668c:	6023      	str	r3, [r4, #0]
 800668e:	6123      	str	r3, [r4, #16]
 8006690:	2301      	movs	r3, #1
 8006692:	6163      	str	r3, [r4, #20]
 8006694:	b002      	add	sp, #8
 8006696:	bd70      	pop	{r4, r5, r6, pc}
 8006698:	ab01      	add	r3, sp, #4
 800669a:	466a      	mov	r2, sp
 800669c:	f7ff ffc8 	bl	8006630 <__swhatbuf_r>
 80066a0:	9900      	ldr	r1, [sp, #0]
 80066a2:	4605      	mov	r5, r0
 80066a4:	4630      	mov	r0, r6
 80066a6:	f7ff fbb5 	bl	8005e14 <_malloc_r>
 80066aa:	b948      	cbnz	r0, 80066c0 <__smakebuf_r+0x44>
 80066ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066b0:	059a      	lsls	r2, r3, #22
 80066b2:	d4ef      	bmi.n	8006694 <__smakebuf_r+0x18>
 80066b4:	f023 0303 	bic.w	r3, r3, #3
 80066b8:	f043 0302 	orr.w	r3, r3, #2
 80066bc:	81a3      	strh	r3, [r4, #12]
 80066be:	e7e3      	b.n	8006688 <__smakebuf_r+0xc>
 80066c0:	89a3      	ldrh	r3, [r4, #12]
 80066c2:	6020      	str	r0, [r4, #0]
 80066c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066c8:	81a3      	strh	r3, [r4, #12]
 80066ca:	9b00      	ldr	r3, [sp, #0]
 80066cc:	6163      	str	r3, [r4, #20]
 80066ce:	9b01      	ldr	r3, [sp, #4]
 80066d0:	6120      	str	r0, [r4, #16]
 80066d2:	b15b      	cbz	r3, 80066ec <__smakebuf_r+0x70>
 80066d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066d8:	4630      	mov	r0, r6
 80066da:	f000 f81d 	bl	8006718 <_isatty_r>
 80066de:	b128      	cbz	r0, 80066ec <__smakebuf_r+0x70>
 80066e0:	89a3      	ldrh	r3, [r4, #12]
 80066e2:	f023 0303 	bic.w	r3, r3, #3
 80066e6:	f043 0301 	orr.w	r3, r3, #1
 80066ea:	81a3      	strh	r3, [r4, #12]
 80066ec:	89a3      	ldrh	r3, [r4, #12]
 80066ee:	431d      	orrs	r5, r3
 80066f0:	81a5      	strh	r5, [r4, #12]
 80066f2:	e7cf      	b.n	8006694 <__smakebuf_r+0x18>

080066f4 <_fstat_r>:
 80066f4:	b538      	push	{r3, r4, r5, lr}
 80066f6:	4d07      	ldr	r5, [pc, #28]	; (8006714 <_fstat_r+0x20>)
 80066f8:	2300      	movs	r3, #0
 80066fa:	4604      	mov	r4, r0
 80066fc:	4608      	mov	r0, r1
 80066fe:	4611      	mov	r1, r2
 8006700:	602b      	str	r3, [r5, #0]
 8006702:	f7fa f9c6 	bl	8000a92 <_fstat>
 8006706:	1c43      	adds	r3, r0, #1
 8006708:	d102      	bne.n	8006710 <_fstat_r+0x1c>
 800670a:	682b      	ldr	r3, [r5, #0]
 800670c:	b103      	cbz	r3, 8006710 <_fstat_r+0x1c>
 800670e:	6023      	str	r3, [r4, #0]
 8006710:	bd38      	pop	{r3, r4, r5, pc}
 8006712:	bf00      	nop
 8006714:	20004c08 	.word	0x20004c08

08006718 <_isatty_r>:
 8006718:	b538      	push	{r3, r4, r5, lr}
 800671a:	4d06      	ldr	r5, [pc, #24]	; (8006734 <_isatty_r+0x1c>)
 800671c:	2300      	movs	r3, #0
 800671e:	4604      	mov	r4, r0
 8006720:	4608      	mov	r0, r1
 8006722:	602b      	str	r3, [r5, #0]
 8006724:	f7fa f9c5 	bl	8000ab2 <_isatty>
 8006728:	1c43      	adds	r3, r0, #1
 800672a:	d102      	bne.n	8006732 <_isatty_r+0x1a>
 800672c:	682b      	ldr	r3, [r5, #0]
 800672e:	b103      	cbz	r3, 8006732 <_isatty_r+0x1a>
 8006730:	6023      	str	r3, [r4, #0]
 8006732:	bd38      	pop	{r3, r4, r5, pc}
 8006734:	20004c08 	.word	0x20004c08

08006738 <_sbrk_r>:
 8006738:	b538      	push	{r3, r4, r5, lr}
 800673a:	4d06      	ldr	r5, [pc, #24]	; (8006754 <_sbrk_r+0x1c>)
 800673c:	2300      	movs	r3, #0
 800673e:	4604      	mov	r4, r0
 8006740:	4608      	mov	r0, r1
 8006742:	602b      	str	r3, [r5, #0]
 8006744:	f7fa f9ce 	bl	8000ae4 <_sbrk>
 8006748:	1c43      	adds	r3, r0, #1
 800674a:	d102      	bne.n	8006752 <_sbrk_r+0x1a>
 800674c:	682b      	ldr	r3, [r5, #0]
 800674e:	b103      	cbz	r3, 8006752 <_sbrk_r+0x1a>
 8006750:	6023      	str	r3, [r4, #0]
 8006752:	bd38      	pop	{r3, r4, r5, pc}
 8006754:	20004c08 	.word	0x20004c08

08006758 <_init>:
 8006758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675a:	bf00      	nop
 800675c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800675e:	bc08      	pop	{r3}
 8006760:	469e      	mov	lr, r3
 8006762:	4770      	bx	lr

08006764 <_fini>:
 8006764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006766:	bf00      	nop
 8006768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800676a:	bc08      	pop	{r3}
 800676c:	469e      	mov	lr, r3
 800676e:	4770      	bx	lr
