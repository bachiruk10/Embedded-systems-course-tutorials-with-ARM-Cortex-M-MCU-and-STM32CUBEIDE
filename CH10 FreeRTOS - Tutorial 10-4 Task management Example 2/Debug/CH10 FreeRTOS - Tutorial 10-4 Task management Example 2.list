
CH10 FreeRTOS - Tutorial 10-4 Task management Example 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a38  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004be8  08004be8  00014be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c48  08004c48  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08004c48  08004c48  00014c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c50  08004c50  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c50  08004c50  00014c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c54  08004c54  00014c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00004b94  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004bf4  20004bf4  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001481c  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002fe8  00000000  00000000  000348ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001210  00000000  00000000  000378d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ddf  00000000  00000000  00038ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002505e  00000000  00000000  000398c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014192  00000000  00000000  0005e925  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e1c0b  00000000  00000000  00072ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004df4  00000000  00000000  001546c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a0  00000000  00000000  001594b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004bd0 	.word	0x08004bd0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08004bd0 	.word	0x08004bd0

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */

	HAL_GPIO_WritePin(GPIOG , GPIO_PIN_14 , GPIO_PIN_RESET);
 80004f0:	2200      	movs	r2, #0
 80004f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004f6:	4802      	ldr	r0, [pc, #8]	; (8000500 <vApplicationIdleHook+0x14>)
 80004f8:	f000 fcfa 	bl	8000ef0 <HAL_GPIO_WritePin>
}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40021800 	.word	0x40021800

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f000 f9fe 	bl	8000908 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f816 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 f884 	bl	800061c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000514:	f001 fcf2 	bl	8001efc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000518:	4a05      	ldr	r2, [pc, #20]	; (8000530 <main+0x2c>)
 800051a:	2100      	movs	r1, #0
 800051c:	4805      	ldr	r0, [pc, #20]	; (8000534 <main+0x30>)
 800051e:	f001 fd37 	bl	8001f90 <osThreadNew>
 8000522:	4603      	mov	r3, r0
 8000524:	4a04      	ldr	r2, [pc, #16]	; (8000538 <main+0x34>)
 8000526:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000528:	f001 fd0c 	bl	8001f44 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052c:	e7fe      	b.n	800052c <main+0x28>
 800052e:	bf00      	nop
 8000530:	08004c0c 	.word	0x08004c0c
 8000534:	080006a5 	.word	0x080006a5
 8000538:	2000007c 	.word	0x2000007c

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	; 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	; 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f004 fa56 	bl	80049fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	4b2b      	ldr	r3, [pc, #172]	; (8000614 <SystemClock_Config+0xd8>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	4a2a      	ldr	r2, [pc, #168]	; (8000614 <SystemClock_Config+0xd8>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	; 0x40
 8000570:	4b28      	ldr	r3, [pc, #160]	; (8000614 <SystemClock_Config+0xd8>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b25      	ldr	r3, [pc, #148]	; (8000618 <SystemClock_Config+0xdc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a24      	ldr	r2, [pc, #144]	; (8000618 <SystemClock_Config+0xdc>)
 8000586:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b22      	ldr	r3, [pc, #136]	; (8000618 <SystemClock_Config+0xdc>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000598:	2301      	movs	r3, #1
 800059a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ac:	2304      	movs	r3, #4
 80005ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005b0:	23b4      	movs	r3, #180	; 0xb4
 80005b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b8:	2307      	movs	r3, #7
 80005ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f107 0320 	add.w	r3, r7, #32
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 fcff 	bl	8000fc4 <HAL_RCC_OscConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005cc:	f000 f892 	bl	80006f4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005d0:	f000 fca8 	bl	8000f24 <HAL_PWREx_EnableOverDrive>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80005da:	f000 f88b 	bl	80006f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005de:	230f      	movs	r3, #15
 80005e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e2:	2302      	movs	r3, #2
 80005e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	2105      	movs	r1, #5
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 ff59 	bl	80014b4 <HAL_RCC_ClockConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000608:	f000 f874 	bl	80006f4 <Error_Handler>
  }
}
 800060c:	bf00      	nop
 800060e:	3750      	adds	r7, #80	; 0x50
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40023800 	.word	0x40023800
 8000618:	40007000 	.word	0x40007000

0800061c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	4b19      	ldr	r3, [pc, #100]	; (800069c <MX_GPIO_Init+0x80>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a18      	ldr	r2, [pc, #96]	; (800069c <MX_GPIO_Init+0x80>)
 800063c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b16      	ldr	r3, [pc, #88]	; (800069c <MX_GPIO_Init+0x80>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	4b12      	ldr	r3, [pc, #72]	; (800069c <MX_GPIO_Init+0x80>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a11      	ldr	r2, [pc, #68]	; (800069c <MX_GPIO_Init+0x80>)
 8000658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_GPIO_Init+0x80>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000670:	480b      	ldr	r0, [pc, #44]	; (80006a0 <MX_GPIO_Init+0x84>)
 8000672:	f000 fc3d 	bl	8000ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000676:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800067a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067c:	2301      	movs	r3, #1
 800067e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	2300      	movs	r3, #0
 8000686:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	4619      	mov	r1, r3
 800068e:	4804      	ldr	r0, [pc, #16]	; (80006a0 <MX_GPIO_Init+0x84>)
 8000690:	f000 fa82 	bl	8000b98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000694:	bf00      	nop
 8000696:	3720      	adds	r7, #32
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40023800 	.word	0x40023800
 80006a0:	40021800 	.word	0x40021800

080006a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_14 , GPIO_PIN_SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b2:	4806      	ldr	r0, [pc, #24]	; (80006cc <StartDefaultTask+0x28>)
 80006b4:	f000 fc1c 	bl	8000ef0 <HAL_GPIO_WritePin>
	  HAL_Delay(500); // Halts the program execution at this task
 80006b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006bc:	f000 f966 	bl	800098c <HAL_Delay>
	  osDelay(500); // This yields for the idle task to execute as not other task is defined
 80006c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006c4:	f001 fcf6 	bl	80020b4 <osDelay>
	  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_14 , GPIO_PIN_SET);
 80006c8:	e7f0      	b.n	80006ac <StartDefaultTask+0x8>
 80006ca:	bf00      	nop
 80006cc:	40021800 	.word	0x40021800

080006d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d101      	bne.n	80006e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006e2:	f000 f933 	bl	800094c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40001000 	.word	0x40001000

080006f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f8:	b672      	cpsid	i
}
 80006fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006fc:	e7fe      	b.n	80006fc <Error_Handler+0x8>
	...

08000700 <HAL_MspInit>:
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <HAL_MspInit+0x54>)
 800070c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070e:	4a11      	ldr	r2, [pc, #68]	; (8000754 <HAL_MspInit+0x54>)
 8000710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000714:	6453      	str	r3, [r2, #68]	; 0x44
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <HAL_MspInit+0x54>)
 8000718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2300      	movs	r3, #0
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <HAL_MspInit+0x54>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072a:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <HAL_MspInit+0x54>)
 800072c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000730:	6413      	str	r3, [r2, #64]	; 0x40
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <HAL_MspInit+0x54>)
 8000734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	2200      	movs	r2, #0
 8000740:	210f      	movs	r1, #15
 8000742:	f06f 0001 	mvn.w	r0, #1
 8000746:	f000 f9fd 	bl	8000b44 <HAL_NVIC_SetPriority>
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800

08000758 <HAL_InitTick>:
 8000758:	b580      	push	{r7, lr}
 800075a:	b08e      	sub	sp, #56	; 0x38
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	2300      	movs	r3, #0
 8000762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000764:	2300      	movs	r3, #0
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	4b33      	ldr	r3, [pc, #204]	; (800083c <HAL_InitTick+0xe4>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	4a32      	ldr	r2, [pc, #200]	; (800083c <HAL_InitTick+0xe4>)
 8000772:	f043 0310 	orr.w	r3, r3, #16
 8000776:	6413      	str	r3, [r2, #64]	; 0x40
 8000778:	4b30      	ldr	r3, [pc, #192]	; (800083c <HAL_InitTick+0xe4>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	f003 0310 	and.w	r3, r3, #16
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	f107 0210 	add.w	r2, r7, #16
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4611      	mov	r1, r2
 800078e:	4618      	mov	r0, r3
 8000790:	f001 f89c 	bl	80018cc <HAL_RCC_GetClockConfig>
 8000794:	6a3b      	ldr	r3, [r7, #32]
 8000796:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800079a:	2b00      	cmp	r3, #0
 800079c:	d103      	bne.n	80007a6 <HAL_InitTick+0x4e>
 800079e:	f001 f881 	bl	80018a4 <HAL_RCC_GetPCLK1Freq>
 80007a2:	6378      	str	r0, [r7, #52]	; 0x34
 80007a4:	e004      	b.n	80007b0 <HAL_InitTick+0x58>
 80007a6:	f001 f87d 	bl	80018a4 <HAL_RCC_GetPCLK1Freq>
 80007aa:	4603      	mov	r3, r0
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	637b      	str	r3, [r7, #52]	; 0x34
 80007b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007b2:	4a23      	ldr	r2, [pc, #140]	; (8000840 <HAL_InitTick+0xe8>)
 80007b4:	fba2 2303 	umull	r2, r3, r2, r3
 80007b8:	0c9b      	lsrs	r3, r3, #18
 80007ba:	3b01      	subs	r3, #1
 80007bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80007be:	4b21      	ldr	r3, [pc, #132]	; (8000844 <HAL_InitTick+0xec>)
 80007c0:	4a21      	ldr	r2, [pc, #132]	; (8000848 <HAL_InitTick+0xf0>)
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <HAL_InitTick+0xec>)
 80007c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	4a1d      	ldr	r2, [pc, #116]	; (8000844 <HAL_InitTick+0xec>)
 80007ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007d0:	6053      	str	r3, [r2, #4]
 80007d2:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <HAL_InitTick+0xec>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
 80007d8:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <HAL_InitTick+0xec>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <HAL_InitTick+0xec>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
 80007e4:	4817      	ldr	r0, [pc, #92]	; (8000844 <HAL_InitTick+0xec>)
 80007e6:	f001 f8a3 	bl	8001930 <HAL_TIM_Base_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80007f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d11b      	bne.n	8000830 <HAL_InitTick+0xd8>
 80007f8:	4812      	ldr	r0, [pc, #72]	; (8000844 <HAL_InitTick+0xec>)
 80007fa:	f001 f8f3 	bl	80019e4 <HAL_TIM_Base_Start_IT>
 80007fe:	4603      	mov	r3, r0
 8000800:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000804:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000808:	2b00      	cmp	r3, #0
 800080a:	d111      	bne.n	8000830 <HAL_InitTick+0xd8>
 800080c:	2036      	movs	r0, #54	; 0x36
 800080e:	f000 f9b5 	bl	8000b7c <HAL_NVIC_EnableIRQ>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2b0f      	cmp	r3, #15
 8000816:	d808      	bhi.n	800082a <HAL_InitTick+0xd2>
 8000818:	2200      	movs	r2, #0
 800081a:	6879      	ldr	r1, [r7, #4]
 800081c:	2036      	movs	r0, #54	; 0x36
 800081e:	f000 f991 	bl	8000b44 <HAL_NVIC_SetPriority>
 8000822:	4a0a      	ldr	r2, [pc, #40]	; (800084c <HAL_InitTick+0xf4>)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	6013      	str	r3, [r2, #0]
 8000828:	e002      	b.n	8000830 <HAL_InitTick+0xd8>
 800082a:	2301      	movs	r3, #1
 800082c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000830:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000834:	4618      	mov	r0, r3
 8000836:	3738      	adds	r7, #56	; 0x38
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40023800 	.word	0x40023800
 8000840:	431bde83 	.word	0x431bde83
 8000844:	20000080 	.word	0x20000080
 8000848:	40001000 	.word	0x40001000
 800084c:	20000004 	.word	0x20000004

08000850 <NMI_Handler>:
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
 8000854:	e7fe      	b.n	8000854 <NMI_Handler+0x4>

08000856 <HardFault_Handler>:
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
 800085a:	e7fe      	b.n	800085a <HardFault_Handler+0x4>

0800085c <MemManage_Handler>:
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
 8000860:	e7fe      	b.n	8000860 <MemManage_Handler+0x4>

08000862 <BusFault_Handler>:
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
 8000866:	e7fe      	b.n	8000866 <BusFault_Handler+0x4>

08000868 <UsageFault_Handler>:
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
 800086c:	e7fe      	b.n	800086c <UsageFault_Handler+0x4>

0800086e <DebugMon_Handler>:
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <TIM6_DAC_IRQHandler>:
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
 8000880:	4802      	ldr	r0, [pc, #8]	; (800088c <TIM6_DAC_IRQHandler+0x10>)
 8000882:	f001 f91f 	bl	8001ac4 <HAL_TIM_IRQHandler>
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000080 	.word	0x20000080

08000890 <SystemInit>:
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <SystemInit+0x20>)
 8000896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800089a:	4a05      	ldr	r2, [pc, #20]	; (80008b0 <SystemInit+0x20>)
 800089c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <Reset_Handler>:
 80008b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008ec <LoopFillZerobss+0xe>
 80008b8:	f7ff ffea 	bl	8000890 <SystemInit>
 80008bc:	480c      	ldr	r0, [pc, #48]	; (80008f0 <LoopFillZerobss+0x12>)
 80008be:	490d      	ldr	r1, [pc, #52]	; (80008f4 <LoopFillZerobss+0x16>)
 80008c0:	4a0d      	ldr	r2, [pc, #52]	; (80008f8 <LoopFillZerobss+0x1a>)
 80008c2:	2300      	movs	r3, #0
 80008c4:	e002      	b.n	80008cc <LoopCopyDataInit>

080008c6 <CopyDataInit>:
 80008c6:	58d4      	ldr	r4, [r2, r3]
 80008c8:	50c4      	str	r4, [r0, r3]
 80008ca:	3304      	adds	r3, #4

080008cc <LoopCopyDataInit>:
 80008cc:	18c4      	adds	r4, r0, r3
 80008ce:	428c      	cmp	r4, r1
 80008d0:	d3f9      	bcc.n	80008c6 <CopyDataInit>
 80008d2:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <LoopFillZerobss+0x1e>)
 80008d4:	4c0a      	ldr	r4, [pc, #40]	; (8000900 <LoopFillZerobss+0x22>)
 80008d6:	2300      	movs	r3, #0
 80008d8:	e001      	b.n	80008de <LoopFillZerobss>

080008da <FillZerobss>:
 80008da:	6013      	str	r3, [r2, #0]
 80008dc:	3204      	adds	r2, #4

080008de <LoopFillZerobss>:
 80008de:	42a2      	cmp	r2, r4
 80008e0:	d3fb      	bcc.n	80008da <FillZerobss>
 80008e2:	f004 f8e9 	bl	8004ab8 <__libc_init_array>
 80008e6:	f7ff fe0d 	bl	8000504 <main>
 80008ea:	4770      	bx	lr
 80008ec:	20030000 	.word	0x20030000
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000060 	.word	0x20000060
 80008f8:	08004c58 	.word	0x08004c58
 80008fc:	20000060 	.word	0x20000060
 8000900:	20004bf4 	.word	0x20004bf4

08000904 <ADC_IRQHandler>:
 8000904:	e7fe      	b.n	8000904 <ADC_IRQHandler>
	...

08000908 <HAL_Init>:
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
 800090c:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <HAL_Init+0x40>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a0d      	ldr	r2, [pc, #52]	; (8000948 <HAL_Init+0x40>)
 8000912:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000916:	6013      	str	r3, [r2, #0]
 8000918:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <HAL_Init+0x40>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a0a      	ldr	r2, [pc, #40]	; (8000948 <HAL_Init+0x40>)
 800091e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000922:	6013      	str	r3, [r2, #0]
 8000924:	4b08      	ldr	r3, [pc, #32]	; (8000948 <HAL_Init+0x40>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a07      	ldr	r2, [pc, #28]	; (8000948 <HAL_Init+0x40>)
 800092a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800092e:	6013      	str	r3, [r2, #0]
 8000930:	2003      	movs	r0, #3
 8000932:	f000 f8fc 	bl	8000b2e <HAL_NVIC_SetPriorityGrouping>
 8000936:	200f      	movs	r0, #15
 8000938:	f7ff ff0e 	bl	8000758 <HAL_InitTick>
 800093c:	f7ff fee0 	bl	8000700 <HAL_MspInit>
 8000940:	2300      	movs	r3, #0
 8000942:	4618      	mov	r0, r3
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023c00 	.word	0x40023c00

0800094c <HAL_IncTick>:
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_IncTick+0x20>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	461a      	mov	r2, r3
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <HAL_IncTick+0x24>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4413      	add	r3, r2
 800095c:	4a04      	ldr	r2, [pc, #16]	; (8000970 <HAL_IncTick+0x24>)
 800095e:	6013      	str	r3, [r2, #0]
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	20000008 	.word	0x20000008
 8000970:	200000c8 	.word	0x200000c8

08000974 <HAL_GetTick>:
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
 8000978:	4b03      	ldr	r3, [pc, #12]	; (8000988 <HAL_GetTick+0x14>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4618      	mov	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	200000c8 	.word	0x200000c8

0800098c <HAL_Delay>:
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	f7ff ffee 	bl	8000974 <HAL_GetTick>
 8000998:	60b8      	str	r0, [r7, #8]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009a4:	d005      	beq.n	80009b2 <HAL_Delay+0x26>
 80009a6:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <HAL_Delay+0x44>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	461a      	mov	r2, r3
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	4413      	add	r3, r2
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	bf00      	nop
 80009b4:	f7ff ffde 	bl	8000974 <HAL_GetTick>
 80009b8:	4602      	mov	r2, r0
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d8f7      	bhi.n	80009b4 <HAL_Delay+0x28>
 80009c4:	bf00      	nop
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000008 	.word	0x20000008

080009d4 <__NVIC_SetPriorityGrouping>:
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68ba      	ldr	r2, [r7, #8]
 80009ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009f0:	4013      	ands	r3, r2
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	021a      	lsls	r2, r3, #8
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	60d3      	str	r3, [r2, #12]
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <__NVIC_GetPriorityGrouping>:
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <__NVIC_GetPriorityGrouping+0x18>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	0a1b      	lsrs	r3, r3, #8
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <__NVIC_EnableIRQ>:
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	db0b      	blt.n	8000a62 <__NVIC_EnableIRQ+0x2a>
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	f003 021f 	and.w	r2, r3, #31
 8000a50:	4907      	ldr	r1, [pc, #28]	; (8000a70 <__NVIC_EnableIRQ+0x38>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	095b      	lsrs	r3, r3, #5
 8000a58:	2001      	movs	r0, #1
 8000a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000e100 	.word	0xe000e100

08000a74 <__NVIC_SetPriority>:
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	6039      	str	r1, [r7, #0]
 8000a7e:	71fb      	strb	r3, [r7, #7]
 8000a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	db0a      	blt.n	8000a9e <__NVIC_SetPriority+0x2a>
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	490c      	ldr	r1, [pc, #48]	; (8000ac0 <__NVIC_SetPriority+0x4c>)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	0112      	lsls	r2, r2, #4
 8000a94:	b2d2      	uxtb	r2, r2
 8000a96:	440b      	add	r3, r1
 8000a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8000a9c:	e00a      	b.n	8000ab4 <__NVIC_SetPriority+0x40>
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	4908      	ldr	r1, [pc, #32]	; (8000ac4 <__NVIC_SetPriority+0x50>)
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	f003 030f 	and.w	r3, r3, #15
 8000aaa:	3b04      	subs	r3, #4
 8000aac:	0112      	lsls	r2, r2, #4
 8000aae:	b2d2      	uxtb	r2, r2
 8000ab0:	440b      	add	r3, r1
 8000ab2:	761a      	strb	r2, [r3, #24]
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	e000e100 	.word	0xe000e100
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <NVIC_EncodePriority>:
 8000ac8:	b480      	push	{r7}
 8000aca:	b089      	sub	sp, #36	; 0x24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f003 0307 	and.w	r3, r3, #7
 8000ada:	61fb      	str	r3, [r7, #28]
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	f1c3 0307 	rsb	r3, r3, #7
 8000ae2:	2b04      	cmp	r3, #4
 8000ae4:	bf28      	it	cs
 8000ae6:	2304      	movcs	r3, #4
 8000ae8:	61bb      	str	r3, [r7, #24]
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	3304      	adds	r3, #4
 8000aee:	2b06      	cmp	r3, #6
 8000af0:	d902      	bls.n	8000af8 <NVIC_EncodePriority+0x30>
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3b03      	subs	r3, #3
 8000af6:	e000      	b.n	8000afa <NVIC_EncodePriority+0x32>
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	f04f 32ff 	mov.w	r2, #4294967295
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	43da      	mvns	r2, r3
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	401a      	ands	r2, r3
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	409a      	lsls	r2, r3
 8000b10:	f04f 31ff 	mov.w	r1, #4294967295
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1a:	43d9      	mvns	r1, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	400b      	ands	r3, r1
 8000b20:	4313      	orrs	r3, r2
 8000b22:	4618      	mov	r0, r3
 8000b24:	3724      	adds	r7, #36	; 0x24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <HAL_NVIC_SetPriorityGrouping>:
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b082      	sub	sp, #8
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff ff4c 	bl	80009d4 <__NVIC_SetPriorityGrouping>
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <HAL_NVIC_SetPriority>:
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
 8000b50:	73fb      	strb	r3, [r7, #15]
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
 8000b56:	f7ff ff61 	bl	8000a1c <__NVIC_GetPriorityGrouping>
 8000b5a:	6178      	str	r0, [r7, #20]
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	68b9      	ldr	r1, [r7, #8]
 8000b60:	6978      	ldr	r0, [r7, #20]
 8000b62:	f7ff ffb1 	bl	8000ac8 <NVIC_EncodePriority>
 8000b66:	4602      	mov	r2, r0
 8000b68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b6c:	4611      	mov	r1, r2
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff ff80 	bl	8000a74 <__NVIC_SetPriority>
 8000b74:	bf00      	nop
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <HAL_NVIC_EnableIRQ>:
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff ff54 	bl	8000a38 <__NVIC_EnableIRQ>
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <HAL_GPIO_Init>:
 8000b98:	b480      	push	{r7}
 8000b9a:	b089      	sub	sp, #36	; 0x24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	2300      	movs	r3, #0
 8000bac:	61bb      	str	r3, [r7, #24]
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
 8000bb2:	e177      	b.n	8000ea4 <HAL_GPIO_Init+0x30c>
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	617b      	str	r3, [r7, #20]
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	697a      	ldr	r2, [r7, #20]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	f040 8166 	bne.w	8000e9e <HAL_GPIO_Init+0x306>
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f003 0303 	and.w	r3, r3, #3
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d005      	beq.n	8000bea <HAL_GPIO_Init+0x52>
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f003 0303 	and.w	r3, r3, #3
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d130      	bne.n	8000c4c <HAL_GPIO_Init+0xb4>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	61bb      	str	r3, [r7, #24]
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	43db      	mvns	r3, r3
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	61bb      	str	r3, [r7, #24]
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	68da      	ldr	r2, [r3, #12]
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	69ba      	ldr	r2, [r7, #24]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	61bb      	str	r3, [r7, #24]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	61bb      	str	r3, [r7, #24]
 8000c20:	2201      	movs	r2, #1
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	69ba      	ldr	r2, [r7, #24]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	61bb      	str	r3, [r7, #24]
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	091b      	lsrs	r3, r3, #4
 8000c36:	f003 0201 	and.w	r2, r3, #1
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	61bb      	str	r3, [r7, #24]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f003 0303 	and.w	r3, r3, #3
 8000c54:	2b03      	cmp	r3, #3
 8000c56:	d017      	beq.n	8000c88 <HAL_GPIO_Init+0xf0>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	61bb      	str	r3, [r7, #24]
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	2203      	movs	r2, #3
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	69ba      	ldr	r2, [r7, #24]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	61bb      	str	r3, [r7, #24]
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	689a      	ldr	r2, [r3, #8]
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f003 0303 	and.w	r3, r3, #3
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d123      	bne.n	8000cdc <HAL_GPIO_Init+0x144>
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	08da      	lsrs	r2, r3, #3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3208      	adds	r2, #8
 8000c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ca0:	61bb      	str	r3, [r7, #24]
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	f003 0307 	and.w	r3, r3, #7
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	220f      	movs	r2, #15
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	691a      	ldr	r2, [r3, #16]
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	61bb      	str	r3, [r7, #24]
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	08da      	lsrs	r2, r3, #3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	3208      	adds	r2, #8
 8000cd6:	69b9      	ldr	r1, [r7, #24]
 8000cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	61bb      	str	r3, [r7, #24]
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	61bb      	str	r3, [r7, #24]
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f003 0203 	and.w	r2, r3, #3
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	f000 80c0 	beq.w	8000e9e <HAL_GPIO_Init+0x306>
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	4b66      	ldr	r3, [pc, #408]	; (8000ebc <HAL_GPIO_Init+0x324>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	4a65      	ldr	r2, [pc, #404]	; (8000ebc <HAL_GPIO_Init+0x324>)
 8000d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2e:	4b63      	ldr	r3, [pc, #396]	; (8000ebc <HAL_GPIO_Init+0x324>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4a61      	ldr	r2, [pc, #388]	; (8000ec0 <HAL_GPIO_Init+0x328>)
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	089b      	lsrs	r3, r3, #2
 8000d40:	3302      	adds	r3, #2
 8000d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d46:	61bb      	str	r3, [r7, #24]
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f003 0303 	and.w	r3, r3, #3
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	220f      	movs	r2, #15
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43db      	mvns	r3, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a58      	ldr	r2, [pc, #352]	; (8000ec4 <HAL_GPIO_Init+0x32c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d037      	beq.n	8000dd6 <HAL_GPIO_Init+0x23e>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a57      	ldr	r2, [pc, #348]	; (8000ec8 <HAL_GPIO_Init+0x330>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d031      	beq.n	8000dd2 <HAL_GPIO_Init+0x23a>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a56      	ldr	r2, [pc, #344]	; (8000ecc <HAL_GPIO_Init+0x334>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d02b      	beq.n	8000dce <HAL_GPIO_Init+0x236>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a55      	ldr	r2, [pc, #340]	; (8000ed0 <HAL_GPIO_Init+0x338>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d025      	beq.n	8000dca <HAL_GPIO_Init+0x232>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a54      	ldr	r2, [pc, #336]	; (8000ed4 <HAL_GPIO_Init+0x33c>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d01f      	beq.n	8000dc6 <HAL_GPIO_Init+0x22e>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a53      	ldr	r2, [pc, #332]	; (8000ed8 <HAL_GPIO_Init+0x340>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d019      	beq.n	8000dc2 <HAL_GPIO_Init+0x22a>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a52      	ldr	r2, [pc, #328]	; (8000edc <HAL_GPIO_Init+0x344>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d013      	beq.n	8000dbe <HAL_GPIO_Init+0x226>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a51      	ldr	r2, [pc, #324]	; (8000ee0 <HAL_GPIO_Init+0x348>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d00d      	beq.n	8000dba <HAL_GPIO_Init+0x222>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a50      	ldr	r2, [pc, #320]	; (8000ee4 <HAL_GPIO_Init+0x34c>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d007      	beq.n	8000db6 <HAL_GPIO_Init+0x21e>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a4f      	ldr	r2, [pc, #316]	; (8000ee8 <HAL_GPIO_Init+0x350>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d101      	bne.n	8000db2 <HAL_GPIO_Init+0x21a>
 8000dae:	2309      	movs	r3, #9
 8000db0:	e012      	b.n	8000dd8 <HAL_GPIO_Init+0x240>
 8000db2:	230a      	movs	r3, #10
 8000db4:	e010      	b.n	8000dd8 <HAL_GPIO_Init+0x240>
 8000db6:	2308      	movs	r3, #8
 8000db8:	e00e      	b.n	8000dd8 <HAL_GPIO_Init+0x240>
 8000dba:	2307      	movs	r3, #7
 8000dbc:	e00c      	b.n	8000dd8 <HAL_GPIO_Init+0x240>
 8000dbe:	2306      	movs	r3, #6
 8000dc0:	e00a      	b.n	8000dd8 <HAL_GPIO_Init+0x240>
 8000dc2:	2305      	movs	r3, #5
 8000dc4:	e008      	b.n	8000dd8 <HAL_GPIO_Init+0x240>
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	e006      	b.n	8000dd8 <HAL_GPIO_Init+0x240>
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e004      	b.n	8000dd8 <HAL_GPIO_Init+0x240>
 8000dce:	2302      	movs	r3, #2
 8000dd0:	e002      	b.n	8000dd8 <HAL_GPIO_Init+0x240>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e000      	b.n	8000dd8 <HAL_GPIO_Init+0x240>
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	69fa      	ldr	r2, [r7, #28]
 8000dda:	f002 0203 	and.w	r2, r2, #3
 8000dde:	0092      	lsls	r2, r2, #2
 8000de0:	4093      	lsls	r3, r2
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
 8000de8:	4935      	ldr	r1, [pc, #212]	; (8000ec0 <HAL_GPIO_Init+0x328>)
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	089b      	lsrs	r3, r3, #2
 8000dee:	3302      	adds	r3, #2
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000df6:	4b3d      	ldr	r3, [pc, #244]	; (8000eec <HAL_GPIO_Init+0x354>)
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	61bb      	str	r3, [r7, #24]
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4013      	ands	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_Init+0x282>
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
 8000e1a:	4a34      	ldr	r2, [pc, #208]	; (8000eec <HAL_GPIO_Init+0x354>)
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	6093      	str	r3, [r2, #8]
 8000e20:	4b32      	ldr	r3, [pc, #200]	; (8000eec <HAL_GPIO_Init+0x354>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	61bb      	str	r3, [r7, #24]
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <HAL_GPIO_Init+0x2ac>
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
 8000e44:	4a29      	ldr	r2, [pc, #164]	; (8000eec <HAL_GPIO_Init+0x354>)
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	60d3      	str	r3, [r2, #12]
 8000e4a:	4b28      	ldr	r3, [pc, #160]	; (8000eec <HAL_GPIO_Init+0x354>)
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	61bb      	str	r3, [r7, #24]
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	43db      	mvns	r3, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4013      	ands	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <HAL_GPIO_Init+0x2d6>
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
 8000e6e:	4a1f      	ldr	r2, [pc, #124]	; (8000eec <HAL_GPIO_Init+0x354>)
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	6053      	str	r3, [r2, #4]
 8000e74:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <HAL_GPIO_Init+0x354>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	61bb      	str	r3, [r7, #24]
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d003      	beq.n	8000e98 <HAL_GPIO_Init+0x300>
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
 8000e98:	4a14      	ldr	r2, [pc, #80]	; (8000eec <HAL_GPIO_Init+0x354>)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	6013      	str	r3, [r2, #0]
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	61fb      	str	r3, [r7, #28]
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	2b0f      	cmp	r3, #15
 8000ea8:	f67f ae84 	bls.w	8000bb4 <HAL_GPIO_Init+0x1c>
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	3724      	adds	r7, #36	; 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40013800 	.word	0x40013800
 8000ec4:	40020000 	.word	0x40020000
 8000ec8:	40020400 	.word	0x40020400
 8000ecc:	40020800 	.word	0x40020800
 8000ed0:	40020c00 	.word	0x40020c00
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40021400 	.word	0x40021400
 8000edc:	40021800 	.word	0x40021800
 8000ee0:	40021c00 	.word	0x40021c00
 8000ee4:	40022000 	.word	0x40022000
 8000ee8:	40022400 	.word	0x40022400
 8000eec:	40013c00 	.word	0x40013c00

08000ef0 <HAL_GPIO_WritePin>:
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	807b      	strh	r3, [r7, #2]
 8000efc:	4613      	mov	r3, r2
 8000efe:	707b      	strb	r3, [r7, #1]
 8000f00:	787b      	ldrb	r3, [r7, #1]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_WritePin+0x1e>
 8000f06:	887a      	ldrh	r2, [r7, #2]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	619a      	str	r2, [r3, #24]
 8000f0c:	e003      	b.n	8000f16 <HAL_GPIO_WritePin+0x26>
 8000f0e:	887b      	ldrh	r3, [r7, #2]
 8000f10:	041a      	lsls	r2, r3, #16
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	619a      	str	r2, [r3, #24]
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
	...

08000f24 <HAL_PWREx_EnableOverDrive>:
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	2300      	movs	r3, #0
 8000f30:	603b      	str	r3, [r7, #0]
 8000f32:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <HAL_PWREx_EnableOverDrive+0x90>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	4a1f      	ldr	r2, [pc, #124]	; (8000fb4 <HAL_PWREx_EnableOverDrive+0x90>)
 8000f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <HAL_PWREx_EnableOverDrive+0x90>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <HAL_PWREx_EnableOverDrive+0x94>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	f7ff fd10 	bl	8000974 <HAL_GetTick>
 8000f54:	6078      	str	r0, [r7, #4]
 8000f56:	e009      	b.n	8000f6c <HAL_PWREx_EnableOverDrive+0x48>
 8000f58:	f7ff fd0c 	bl	8000974 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f66:	d901      	bls.n	8000f6c <HAL_PWREx_EnableOverDrive+0x48>
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e01f      	b.n	8000fac <HAL_PWREx_EnableOverDrive+0x88>
 8000f6c:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <HAL_PWREx_EnableOverDrive+0x98>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f78:	d1ee      	bne.n	8000f58 <HAL_PWREx_EnableOverDrive+0x34>
 8000f7a:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	f7ff fcf8 	bl	8000974 <HAL_GetTick>
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	e009      	b.n	8000f9c <HAL_PWREx_EnableOverDrive+0x78>
 8000f88:	f7ff fcf4 	bl	8000974 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f96:	d901      	bls.n	8000f9c <HAL_PWREx_EnableOverDrive+0x78>
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e007      	b.n	8000fac <HAL_PWREx_EnableOverDrive+0x88>
 8000f9c:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <HAL_PWREx_EnableOverDrive+0x98>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000fa8:	d1ee      	bne.n	8000f88 <HAL_PWREx_EnableOverDrive+0x64>
 8000faa:	2300      	movs	r3, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	420e0040 	.word	0x420e0040
 8000fbc:	40007000 	.word	0x40007000
 8000fc0:	420e0044 	.word	0x420e0044

08000fc4 <HAL_RCC_OscConfig>:
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d101      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x12>
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e267      	b.n	80014a6 <HAL_RCC_OscConfig+0x4e2>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d075      	beq.n	80010ce <HAL_RCC_OscConfig+0x10a>
 8000fe2:	4b88      	ldr	r3, [pc, #544]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f003 030c 	and.w	r3, r3, #12
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	d00c      	beq.n	8001008 <HAL_RCC_OscConfig+0x44>
 8000fee:	4b85      	ldr	r3, [pc, #532]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f003 030c 	and.w	r3, r3, #12
 8000ff6:	2b08      	cmp	r3, #8
 8000ff8:	d112      	bne.n	8001020 <HAL_RCC_OscConfig+0x5c>
 8000ffa:	4b82      	ldr	r3, [pc, #520]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001002:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001006:	d10b      	bne.n	8001020 <HAL_RCC_OscConfig+0x5c>
 8001008:	4b7e      	ldr	r3, [pc, #504]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d05b      	beq.n	80010cc <HAL_RCC_OscConfig+0x108>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d157      	bne.n	80010cc <HAL_RCC_OscConfig+0x108>
 800101c:	2301      	movs	r3, #1
 800101e:	e242      	b.n	80014a6 <HAL_RCC_OscConfig+0x4e2>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001028:	d106      	bne.n	8001038 <HAL_RCC_OscConfig+0x74>
 800102a:	4b76      	ldr	r3, [pc, #472]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a75      	ldr	r2, [pc, #468]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	e01d      	b.n	8001074 <HAL_RCC_OscConfig+0xb0>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001040:	d10c      	bne.n	800105c <HAL_RCC_OscConfig+0x98>
 8001042:	4b70      	ldr	r3, [pc, #448]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a6f      	ldr	r2, [pc, #444]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800104c:	6013      	str	r3, [r2, #0]
 800104e:	4b6d      	ldr	r3, [pc, #436]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a6c      	ldr	r2, [pc, #432]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001058:	6013      	str	r3, [r2, #0]
 800105a:	e00b      	b.n	8001074 <HAL_RCC_OscConfig+0xb0>
 800105c:	4b69      	ldr	r3, [pc, #420]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a68      	ldr	r2, [pc, #416]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001066:	6013      	str	r3, [r2, #0]
 8001068:	4b66      	ldr	r3, [pc, #408]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a65      	ldr	r2, [pc, #404]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 800106e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001072:	6013      	str	r3, [r2, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d013      	beq.n	80010a4 <HAL_RCC_OscConfig+0xe0>
 800107c:	f7ff fc7a 	bl	8000974 <HAL_GetTick>
 8001080:	6138      	str	r0, [r7, #16]
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0xd2>
 8001084:	f7ff fc76 	bl	8000974 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b64      	cmp	r3, #100	; 0x64
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0xd2>
 8001092:	2303      	movs	r3, #3
 8001094:	e207      	b.n	80014a6 <HAL_RCC_OscConfig+0x4e2>
 8001096:	4b5b      	ldr	r3, [pc, #364]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d0f0      	beq.n	8001084 <HAL_RCC_OscConfig+0xc0>
 80010a2:	e014      	b.n	80010ce <HAL_RCC_OscConfig+0x10a>
 80010a4:	f7ff fc66 	bl	8000974 <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0xfa>
 80010ac:	f7ff fc62 	bl	8000974 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b64      	cmp	r3, #100	; 0x64
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0xfa>
 80010ba:	2303      	movs	r3, #3
 80010bc:	e1f3      	b.n	80014a6 <HAL_RCC_OscConfig+0x4e2>
 80010be:	4b51      	ldr	r3, [pc, #324]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1f0      	bne.n	80010ac <HAL_RCC_OscConfig+0xe8>
 80010ca:	e000      	b.n	80010ce <HAL_RCC_OscConfig+0x10a>
 80010cc:	bf00      	nop
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d063      	beq.n	80011a2 <HAL_RCC_OscConfig+0x1de>
 80010da:	4b4a      	ldr	r3, [pc, #296]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 030c 	and.w	r3, r3, #12
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00b      	beq.n	80010fe <HAL_RCC_OscConfig+0x13a>
 80010e6:	4b47      	ldr	r3, [pc, #284]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f003 030c 	and.w	r3, r3, #12
 80010ee:	2b08      	cmp	r3, #8
 80010f0:	d11c      	bne.n	800112c <HAL_RCC_OscConfig+0x168>
 80010f2:	4b44      	ldr	r3, [pc, #272]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d116      	bne.n	800112c <HAL_RCC_OscConfig+0x168>
 80010fe:	4b41      	ldr	r3, [pc, #260]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d005      	beq.n	8001116 <HAL_RCC_OscConfig+0x152>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d001      	beq.n	8001116 <HAL_RCC_OscConfig+0x152>
 8001112:	2301      	movs	r3, #1
 8001114:	e1c7      	b.n	80014a6 <HAL_RCC_OscConfig+0x4e2>
 8001116:	4b3b      	ldr	r3, [pc, #236]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	4937      	ldr	r1, [pc, #220]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001126:	4313      	orrs	r3, r2
 8001128:	600b      	str	r3, [r1, #0]
 800112a:	e03a      	b.n	80011a2 <HAL_RCC_OscConfig+0x1de>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d020      	beq.n	8001176 <HAL_RCC_OscConfig+0x1b2>
 8001134:	4b34      	ldr	r3, [pc, #208]	; (8001208 <HAL_RCC_OscConfig+0x244>)
 8001136:	2201      	movs	r2, #1
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	f7ff fc1b 	bl	8000974 <HAL_GetTick>
 800113e:	6138      	str	r0, [r7, #16]
 8001140:	e008      	b.n	8001154 <HAL_RCC_OscConfig+0x190>
 8001142:	f7ff fc17 	bl	8000974 <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d901      	bls.n	8001154 <HAL_RCC_OscConfig+0x190>
 8001150:	2303      	movs	r3, #3
 8001152:	e1a8      	b.n	80014a6 <HAL_RCC_OscConfig+0x4e2>
 8001154:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0f0      	beq.n	8001142 <HAL_RCC_OscConfig+0x17e>
 8001160:	4b28      	ldr	r3, [pc, #160]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	691b      	ldr	r3, [r3, #16]
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	4925      	ldr	r1, [pc, #148]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001170:	4313      	orrs	r3, r2
 8001172:	600b      	str	r3, [r1, #0]
 8001174:	e015      	b.n	80011a2 <HAL_RCC_OscConfig+0x1de>
 8001176:	4b24      	ldr	r3, [pc, #144]	; (8001208 <HAL_RCC_OscConfig+0x244>)
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	f7ff fbfa 	bl	8000974 <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0x1d2>
 8001184:	f7ff fbf6 	bl	8000974 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x1d2>
 8001192:	2303      	movs	r3, #3
 8001194:	e187      	b.n	80014a6 <HAL_RCC_OscConfig+0x4e2>
 8001196:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f0      	bne.n	8001184 <HAL_RCC_OscConfig+0x1c0>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d036      	beq.n	800121c <HAL_RCC_OscConfig+0x258>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d016      	beq.n	80011e4 <HAL_RCC_OscConfig+0x220>
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_RCC_OscConfig+0x248>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	f7ff fbda 	bl	8000974 <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]
 80011c2:	e008      	b.n	80011d6 <HAL_RCC_OscConfig+0x212>
 80011c4:	f7ff fbd6 	bl	8000974 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0x212>
 80011d2:	2303      	movs	r3, #3
 80011d4:	e167      	b.n	80014a6 <HAL_RCC_OscConfig+0x4e2>
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 80011d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0f0      	beq.n	80011c4 <HAL_RCC_OscConfig+0x200>
 80011e2:	e01b      	b.n	800121c <HAL_RCC_OscConfig+0x258>
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <HAL_RCC_OscConfig+0x248>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	f7ff fbc3 	bl	8000974 <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]
 80011f0:	e00e      	b.n	8001210 <HAL_RCC_OscConfig+0x24c>
 80011f2:	f7ff fbbf 	bl	8000974 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d907      	bls.n	8001210 <HAL_RCC_OscConfig+0x24c>
 8001200:	2303      	movs	r3, #3
 8001202:	e150      	b.n	80014a6 <HAL_RCC_OscConfig+0x4e2>
 8001204:	40023800 	.word	0x40023800
 8001208:	42470000 	.word	0x42470000
 800120c:	42470e80 	.word	0x42470e80
 8001210:	4b88      	ldr	r3, [pc, #544]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 8001212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1ea      	bne.n	80011f2 <HAL_RCC_OscConfig+0x22e>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 8097 	beq.w	8001358 <HAL_RCC_OscConfig+0x394>
 800122a:	2300      	movs	r3, #0
 800122c:	75fb      	strb	r3, [r7, #23]
 800122e:	4b81      	ldr	r3, [pc, #516]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10f      	bne.n	800125a <HAL_RCC_OscConfig+0x296>
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	4b7d      	ldr	r3, [pc, #500]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	4a7c      	ldr	r2, [pc, #496]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 8001244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
 800124a:	4b7a      	ldr	r3, [pc, #488]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	2301      	movs	r3, #1
 8001258:	75fb      	strb	r3, [r7, #23]
 800125a:	4b77      	ldr	r3, [pc, #476]	; (8001438 <HAL_RCC_OscConfig+0x474>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001262:	2b00      	cmp	r3, #0
 8001264:	d118      	bne.n	8001298 <HAL_RCC_OscConfig+0x2d4>
 8001266:	4b74      	ldr	r3, [pc, #464]	; (8001438 <HAL_RCC_OscConfig+0x474>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a73      	ldr	r2, [pc, #460]	; (8001438 <HAL_RCC_OscConfig+0x474>)
 800126c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	f7ff fb7f 	bl	8000974 <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x2c8>
 800127a:	f7ff fb7b 	bl	8000974 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x2c8>
 8001288:	2303      	movs	r3, #3
 800128a:	e10c      	b.n	80014a6 <HAL_RCC_OscConfig+0x4e2>
 800128c:	4b6a      	ldr	r3, [pc, #424]	; (8001438 <HAL_RCC_OscConfig+0x474>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f0      	beq.n	800127a <HAL_RCC_OscConfig+0x2b6>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d106      	bne.n	80012ae <HAL_RCC_OscConfig+0x2ea>
 80012a0:	4b64      	ldr	r3, [pc, #400]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80012a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012a4:	4a63      	ldr	r2, [pc, #396]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	6713      	str	r3, [r2, #112]	; 0x70
 80012ac:	e01c      	b.n	80012e8 <HAL_RCC_OscConfig+0x324>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	2b05      	cmp	r3, #5
 80012b4:	d10c      	bne.n	80012d0 <HAL_RCC_OscConfig+0x30c>
 80012b6:	4b5f      	ldr	r3, [pc, #380]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80012b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ba:	4a5e      	ldr	r2, [pc, #376]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80012bc:	f043 0304 	orr.w	r3, r3, #4
 80012c0:	6713      	str	r3, [r2, #112]	; 0x70
 80012c2:	4b5c      	ldr	r3, [pc, #368]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80012c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c6:	4a5b      	ldr	r2, [pc, #364]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6713      	str	r3, [r2, #112]	; 0x70
 80012ce:	e00b      	b.n	80012e8 <HAL_RCC_OscConfig+0x324>
 80012d0:	4b58      	ldr	r3, [pc, #352]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80012d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d4:	4a57      	ldr	r2, [pc, #348]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80012d6:	f023 0301 	bic.w	r3, r3, #1
 80012da:	6713      	str	r3, [r2, #112]	; 0x70
 80012dc:	4b55      	ldr	r3, [pc, #340]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80012de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e0:	4a54      	ldr	r2, [pc, #336]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80012e2:	f023 0304 	bic.w	r3, r3, #4
 80012e6:	6713      	str	r3, [r2, #112]	; 0x70
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d015      	beq.n	800131c <HAL_RCC_OscConfig+0x358>
 80012f0:	f7ff fb40 	bl	8000974 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]
 80012f6:	e00a      	b.n	800130e <HAL_RCC_OscConfig+0x34a>
 80012f8:	f7ff fb3c 	bl	8000974 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	f241 3288 	movw	r2, #5000	; 0x1388
 8001306:	4293      	cmp	r3, r2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x34a>
 800130a:	2303      	movs	r3, #3
 800130c:	e0cb      	b.n	80014a6 <HAL_RCC_OscConfig+0x4e2>
 800130e:	4b49      	ldr	r3, [pc, #292]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 8001310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0ee      	beq.n	80012f8 <HAL_RCC_OscConfig+0x334>
 800131a:	e014      	b.n	8001346 <HAL_RCC_OscConfig+0x382>
 800131c:	f7ff fb2a 	bl	8000974 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]
 8001322:	e00a      	b.n	800133a <HAL_RCC_OscConfig+0x376>
 8001324:	f7ff fb26 	bl	8000974 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001332:	4293      	cmp	r3, r2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x376>
 8001336:	2303      	movs	r3, #3
 8001338:	e0b5      	b.n	80014a6 <HAL_RCC_OscConfig+0x4e2>
 800133a:	4b3e      	ldr	r3, [pc, #248]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 800133c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1ee      	bne.n	8001324 <HAL_RCC_OscConfig+0x360>
 8001346:	7dfb      	ldrb	r3, [r7, #23]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d105      	bne.n	8001358 <HAL_RCC_OscConfig+0x394>
 800134c:	4b39      	ldr	r3, [pc, #228]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	4a38      	ldr	r2, [pc, #224]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 8001352:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001356:	6413      	str	r3, [r2, #64]	; 0x40
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 80a1 	beq.w	80014a4 <HAL_RCC_OscConfig+0x4e0>
 8001362:	4b34      	ldr	r3, [pc, #208]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 030c 	and.w	r3, r3, #12
 800136a:	2b08      	cmp	r3, #8
 800136c:	d05c      	beq.n	8001428 <HAL_RCC_OscConfig+0x464>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	2b02      	cmp	r3, #2
 8001374:	d141      	bne.n	80013fa <HAL_RCC_OscConfig+0x436>
 8001376:	4b31      	ldr	r3, [pc, #196]	; (800143c <HAL_RCC_OscConfig+0x478>)
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	f7ff fafa 	bl	8000974 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x3d2>
 8001384:	f7ff faf6 	bl	8000974 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x3d2>
 8001392:	2303      	movs	r3, #3
 8001394:	e087      	b.n	80014a6 <HAL_RCC_OscConfig+0x4e2>
 8001396:	4b27      	ldr	r3, [pc, #156]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1f0      	bne.n	8001384 <HAL_RCC_OscConfig+0x3c0>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69da      	ldr	r2, [r3, #28]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	431a      	orrs	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b0:	019b      	lsls	r3, r3, #6
 80013b2:	431a      	orrs	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b8:	085b      	lsrs	r3, r3, #1
 80013ba:	3b01      	subs	r3, #1
 80013bc:	041b      	lsls	r3, r3, #16
 80013be:	431a      	orrs	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c4:	061b      	lsls	r3, r3, #24
 80013c6:	491b      	ldr	r1, [pc, #108]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <HAL_RCC_OscConfig+0x478>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	f7ff facf 	bl	8000974 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x428>
 80013da:	f7ff facb 	bl	8000974 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x428>
 80013e8:	2303      	movs	r3, #3
 80013ea:	e05c      	b.n	80014a6 <HAL_RCC_OscConfig+0x4e2>
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0f0      	beq.n	80013da <HAL_RCC_OscConfig+0x416>
 80013f8:	e054      	b.n	80014a4 <HAL_RCC_OscConfig+0x4e0>
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <HAL_RCC_OscConfig+0x478>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	f7ff fab8 	bl	8000974 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x456>
 8001408:	f7ff fab4 	bl	8000974 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x456>
 8001416:	2303      	movs	r3, #3
 8001418:	e045      	b.n	80014a6 <HAL_RCC_OscConfig+0x4e2>
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f0      	bne.n	8001408 <HAL_RCC_OscConfig+0x444>
 8001426:	e03d      	b.n	80014a4 <HAL_RCC_OscConfig+0x4e0>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d107      	bne.n	8001440 <HAL_RCC_OscConfig+0x47c>
 8001430:	2301      	movs	r3, #1
 8001432:	e038      	b.n	80014a6 <HAL_RCC_OscConfig+0x4e2>
 8001434:	40023800 	.word	0x40023800
 8001438:	40007000 	.word	0x40007000
 800143c:	42470060 	.word	0x42470060
 8001440:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <HAL_RCC_OscConfig+0x4ec>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d028      	beq.n	80014a0 <HAL_RCC_OscConfig+0x4dc>
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69db      	ldr	r3, [r3, #28]
 8001458:	429a      	cmp	r2, r3
 800145a:	d121      	bne.n	80014a0 <HAL_RCC_OscConfig+0x4dc>
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a1b      	ldr	r3, [r3, #32]
 8001466:	429a      	cmp	r2, r3
 8001468:	d11a      	bne.n	80014a0 <HAL_RCC_OscConfig+0x4dc>
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001470:	4013      	ands	r3, r2
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001476:	0192      	lsls	r2, r2, #6
 8001478:	4293      	cmp	r3, r2
 800147a:	d111      	bne.n	80014a0 <HAL_RCC_OscConfig+0x4dc>
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001486:	085b      	lsrs	r3, r3, #1
 8001488:	3b01      	subs	r3, #1
 800148a:	041b      	lsls	r3, r3, #16
 800148c:	429a      	cmp	r2, r3
 800148e:	d107      	bne.n	80014a0 <HAL_RCC_OscConfig+0x4dc>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149a:	061b      	lsls	r3, r3, #24
 800149c:	429a      	cmp	r2, r3
 800149e:	d001      	beq.n	80014a4 <HAL_RCC_OscConfig+0x4e0>
 80014a0:	2301      	movs	r3, #1
 80014a2:	e000      	b.n	80014a6 <HAL_RCC_OscConfig+0x4e2>
 80014a4:	2300      	movs	r3, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800

080014b4 <HAL_RCC_ClockConfig>:
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <HAL_RCC_ClockConfig+0x14>
 80014c4:	2301      	movs	r3, #1
 80014c6:	e0cc      	b.n	8001662 <HAL_RCC_ClockConfig+0x1ae>
 80014c8:	4b68      	ldr	r3, [pc, #416]	; (800166c <HAL_RCC_ClockConfig+0x1b8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 030f 	and.w	r3, r3, #15
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d90c      	bls.n	80014f0 <HAL_RCC_ClockConfig+0x3c>
 80014d6:	4b65      	ldr	r3, [pc, #404]	; (800166c <HAL_RCC_ClockConfig+0x1b8>)
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	701a      	strb	r2, [r3, #0]
 80014de:	4b63      	ldr	r3, [pc, #396]	; (800166c <HAL_RCC_ClockConfig+0x1b8>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d001      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x3c>
 80014ec:	2301      	movs	r3, #1
 80014ee:	e0b8      	b.n	8001662 <HAL_RCC_ClockConfig+0x1ae>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d020      	beq.n	800153e <HAL_RCC_ClockConfig+0x8a>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	2b00      	cmp	r3, #0
 8001506:	d005      	beq.n	8001514 <HAL_RCC_ClockConfig+0x60>
 8001508:	4b59      	ldr	r3, [pc, #356]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	4a58      	ldr	r2, [pc, #352]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 800150e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001512:	6093      	str	r3, [r2, #8]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0308 	and.w	r3, r3, #8
 800151c:	2b00      	cmp	r3, #0
 800151e:	d005      	beq.n	800152c <HAL_RCC_ClockConfig+0x78>
 8001520:	4b53      	ldr	r3, [pc, #332]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	4a52      	ldr	r2, [pc, #328]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 8001526:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800152a:	6093      	str	r3, [r2, #8]
 800152c:	4b50      	ldr	r3, [pc, #320]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	494d      	ldr	r1, [pc, #308]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 800153a:	4313      	orrs	r3, r2
 800153c:	608b      	str	r3, [r1, #8]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b00      	cmp	r3, #0
 8001548:	d044      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x120>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d107      	bne.n	8001562 <HAL_RCC_ClockConfig+0xae>
 8001552:	4b47      	ldr	r3, [pc, #284]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d119      	bne.n	8001592 <HAL_RCC_ClockConfig+0xde>
 800155e:	2301      	movs	r3, #1
 8001560:	e07f      	b.n	8001662 <HAL_RCC_ClockConfig+0x1ae>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d003      	beq.n	8001572 <HAL_RCC_ClockConfig+0xbe>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b03      	cmp	r3, #3
 8001570:	d107      	bne.n	8001582 <HAL_RCC_ClockConfig+0xce>
 8001572:	4b3f      	ldr	r3, [pc, #252]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d109      	bne.n	8001592 <HAL_RCC_ClockConfig+0xde>
 800157e:	2301      	movs	r3, #1
 8001580:	e06f      	b.n	8001662 <HAL_RCC_ClockConfig+0x1ae>
 8001582:	4b3b      	ldr	r3, [pc, #236]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_RCC_ClockConfig+0xde>
 800158e:	2301      	movs	r3, #1
 8001590:	e067      	b.n	8001662 <HAL_RCC_ClockConfig+0x1ae>
 8001592:	4b37      	ldr	r3, [pc, #220]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f023 0203 	bic.w	r2, r3, #3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	4934      	ldr	r1, [pc, #208]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	608b      	str	r3, [r1, #8]
 80015a4:	f7ff f9e6 	bl	8000974 <HAL_GetTick>
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	e00a      	b.n	80015c2 <HAL_RCC_ClockConfig+0x10e>
 80015ac:	f7ff f9e2 	bl	8000974 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_ClockConfig+0x10e>
 80015be:	2303      	movs	r3, #3
 80015c0:	e04f      	b.n	8001662 <HAL_RCC_ClockConfig+0x1ae>
 80015c2:	4b2b      	ldr	r3, [pc, #172]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 020c 	and.w	r2, r3, #12
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d1eb      	bne.n	80015ac <HAL_RCC_ClockConfig+0xf8>
 80015d4:	4b25      	ldr	r3, [pc, #148]	; (800166c <HAL_RCC_ClockConfig+0x1b8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 030f 	and.w	r3, r3, #15
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d20c      	bcs.n	80015fc <HAL_RCC_ClockConfig+0x148>
 80015e2:	4b22      	ldr	r3, [pc, #136]	; (800166c <HAL_RCC_ClockConfig+0x1b8>)
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	701a      	strb	r2, [r3, #0]
 80015ea:	4b20      	ldr	r3, [pc, #128]	; (800166c <HAL_RCC_ClockConfig+0x1b8>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d001      	beq.n	80015fc <HAL_RCC_ClockConfig+0x148>
 80015f8:	2301      	movs	r3, #1
 80015fa:	e032      	b.n	8001662 <HAL_RCC_ClockConfig+0x1ae>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b00      	cmp	r3, #0
 8001606:	d008      	beq.n	800161a <HAL_RCC_ClockConfig+0x166>
 8001608:	4b19      	ldr	r3, [pc, #100]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	4916      	ldr	r1, [pc, #88]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	4313      	orrs	r3, r2
 8001618:	608b      	str	r3, [r1, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	2b00      	cmp	r3, #0
 8001624:	d009      	beq.n	800163a <HAL_RCC_ClockConfig+0x186>
 8001626:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	490e      	ldr	r1, [pc, #56]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	4313      	orrs	r3, r2
 8001638:	608b      	str	r3, [r1, #8]
 800163a:	f000 f821 	bl	8001680 <HAL_RCC_GetSysClockFreq>
 800163e:	4602      	mov	r2, r0
 8001640:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	091b      	lsrs	r3, r3, #4
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	490a      	ldr	r1, [pc, #40]	; (8001674 <HAL_RCC_ClockConfig+0x1c0>)
 800164c:	5ccb      	ldrb	r3, [r1, r3]
 800164e:	fa22 f303 	lsr.w	r3, r2, r3
 8001652:	4a09      	ldr	r2, [pc, #36]	; (8001678 <HAL_RCC_ClockConfig+0x1c4>)
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <HAL_RCC_ClockConfig+0x1c8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff f87c 	bl	8000758 <HAL_InitTick>
 8001660:	2300      	movs	r3, #0
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40023c00 	.word	0x40023c00
 8001670:	40023800 	.word	0x40023800
 8001674:	08004c30 	.word	0x08004c30
 8001678:	20000000 	.word	0x20000000
 800167c:	20000004 	.word	0x20000004

08001680 <HAL_RCC_GetSysClockFreq>:
 8001680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001684:	b094      	sub	sp, #80	; 0x50
 8001686:	af00      	add	r7, sp, #0
 8001688:	2300      	movs	r3, #0
 800168a:	647b      	str	r3, [r7, #68]	; 0x44
 800168c:	2300      	movs	r3, #0
 800168e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001690:	2300      	movs	r3, #0
 8001692:	643b      	str	r3, [r7, #64]	; 0x40
 8001694:	2300      	movs	r3, #0
 8001696:	64bb      	str	r3, [r7, #72]	; 0x48
 8001698:	4b79      	ldr	r3, [pc, #484]	; (8001880 <HAL_RCC_GetSysClockFreq+0x200>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 030c 	and.w	r3, r3, #12
 80016a0:	2b08      	cmp	r3, #8
 80016a2:	d00d      	beq.n	80016c0 <HAL_RCC_GetSysClockFreq+0x40>
 80016a4:	2b08      	cmp	r3, #8
 80016a6:	f200 80e1 	bhi.w	800186c <HAL_RCC_GetSysClockFreq+0x1ec>
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d002      	beq.n	80016b4 <HAL_RCC_GetSysClockFreq+0x34>
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	d003      	beq.n	80016ba <HAL_RCC_GetSysClockFreq+0x3a>
 80016b2:	e0db      	b.n	800186c <HAL_RCC_GetSysClockFreq+0x1ec>
 80016b4:	4b73      	ldr	r3, [pc, #460]	; (8001884 <HAL_RCC_GetSysClockFreq+0x204>)
 80016b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80016b8:	e0db      	b.n	8001872 <HAL_RCC_GetSysClockFreq+0x1f2>
 80016ba:	4b73      	ldr	r3, [pc, #460]	; (8001888 <HAL_RCC_GetSysClockFreq+0x208>)
 80016bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80016be:	e0d8      	b.n	8001872 <HAL_RCC_GetSysClockFreq+0x1f2>
 80016c0:	4b6f      	ldr	r3, [pc, #444]	; (8001880 <HAL_RCC_GetSysClockFreq+0x200>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016c8:	647b      	str	r3, [r7, #68]	; 0x44
 80016ca:	4b6d      	ldr	r3, [pc, #436]	; (8001880 <HAL_RCC_GetSysClockFreq+0x200>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d063      	beq.n	800179e <HAL_RCC_GetSysClockFreq+0x11e>
 80016d6:	4b6a      	ldr	r3, [pc, #424]	; (8001880 <HAL_RCC_GetSysClockFreq+0x200>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	099b      	lsrs	r3, r3, #6
 80016dc:	2200      	movs	r2, #0
 80016de:	63bb      	str	r3, [r7, #56]	; 0x38
 80016e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80016e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016e8:	633b      	str	r3, [r7, #48]	; 0x30
 80016ea:	2300      	movs	r3, #0
 80016ec:	637b      	str	r3, [r7, #52]	; 0x34
 80016ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80016f2:	4622      	mov	r2, r4
 80016f4:	462b      	mov	r3, r5
 80016f6:	f04f 0000 	mov.w	r0, #0
 80016fa:	f04f 0100 	mov.w	r1, #0
 80016fe:	0159      	lsls	r1, r3, #5
 8001700:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001704:	0150      	lsls	r0, r2, #5
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4621      	mov	r1, r4
 800170c:	1a51      	subs	r1, r2, r1
 800170e:	6139      	str	r1, [r7, #16]
 8001710:	4629      	mov	r1, r5
 8001712:	eb63 0301 	sbc.w	r3, r3, r1
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001724:	4659      	mov	r1, fp
 8001726:	018b      	lsls	r3, r1, #6
 8001728:	4651      	mov	r1, sl
 800172a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800172e:	4651      	mov	r1, sl
 8001730:	018a      	lsls	r2, r1, #6
 8001732:	4651      	mov	r1, sl
 8001734:	ebb2 0801 	subs.w	r8, r2, r1
 8001738:	4659      	mov	r1, fp
 800173a:	eb63 0901 	sbc.w	r9, r3, r1
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	f04f 0300 	mov.w	r3, #0
 8001746:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800174a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800174e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001752:	4690      	mov	r8, r2
 8001754:	4699      	mov	r9, r3
 8001756:	4623      	mov	r3, r4
 8001758:	eb18 0303 	adds.w	r3, r8, r3
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	462b      	mov	r3, r5
 8001760:	eb49 0303 	adc.w	r3, r9, r3
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001772:	4629      	mov	r1, r5
 8001774:	024b      	lsls	r3, r1, #9
 8001776:	4621      	mov	r1, r4
 8001778:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800177c:	4621      	mov	r1, r4
 800177e:	024a      	lsls	r2, r1, #9
 8001780:	4610      	mov	r0, r2
 8001782:	4619      	mov	r1, r3
 8001784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001786:	2200      	movs	r2, #0
 8001788:	62bb      	str	r3, [r7, #40]	; 0x28
 800178a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800178c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001790:	f7fe fd2e 	bl	80001f0 <__aeabi_uldivmod>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4613      	mov	r3, r2
 800179a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800179c:	e058      	b.n	8001850 <HAL_RCC_GetSysClockFreq+0x1d0>
 800179e:	4b38      	ldr	r3, [pc, #224]	; (8001880 <HAL_RCC_GetSysClockFreq+0x200>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	099b      	lsrs	r3, r3, #6
 80017a4:	2200      	movs	r2, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	4611      	mov	r1, r2
 80017aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80017ae:	623b      	str	r3, [r7, #32]
 80017b0:	2300      	movs	r3, #0
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
 80017b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80017b8:	4642      	mov	r2, r8
 80017ba:	464b      	mov	r3, r9
 80017bc:	f04f 0000 	mov.w	r0, #0
 80017c0:	f04f 0100 	mov.w	r1, #0
 80017c4:	0159      	lsls	r1, r3, #5
 80017c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017ca:	0150      	lsls	r0, r2, #5
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4641      	mov	r1, r8
 80017d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80017d6:	4649      	mov	r1, r9
 80017d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80017dc:	f04f 0200 	mov.w	r2, #0
 80017e0:	f04f 0300 	mov.w	r3, #0
 80017e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80017e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80017ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80017f0:	ebb2 040a 	subs.w	r4, r2, sl
 80017f4:	eb63 050b 	sbc.w	r5, r3, fp
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	00eb      	lsls	r3, r5, #3
 8001802:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001806:	00e2      	lsls	r2, r4, #3
 8001808:	4614      	mov	r4, r2
 800180a:	461d      	mov	r5, r3
 800180c:	4643      	mov	r3, r8
 800180e:	18e3      	adds	r3, r4, r3
 8001810:	603b      	str	r3, [r7, #0]
 8001812:	464b      	mov	r3, r9
 8001814:	eb45 0303 	adc.w	r3, r5, r3
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001826:	4629      	mov	r1, r5
 8001828:	028b      	lsls	r3, r1, #10
 800182a:	4621      	mov	r1, r4
 800182c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001830:	4621      	mov	r1, r4
 8001832:	028a      	lsls	r2, r1, #10
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800183a:	2200      	movs	r2, #0
 800183c:	61bb      	str	r3, [r7, #24]
 800183e:	61fa      	str	r2, [r7, #28]
 8001840:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001844:	f7fe fcd4 	bl	80001f0 <__aeabi_uldivmod>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4613      	mov	r3, r2
 800184e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <HAL_RCC_GetSysClockFreq+0x200>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	0c1b      	lsrs	r3, r3, #16
 8001856:	f003 0303 	and.w	r3, r3, #3
 800185a:	3301      	adds	r3, #1
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	643b      	str	r3, [r7, #64]	; 0x40
 8001860:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001864:	fbb2 f3f3 	udiv	r3, r2, r3
 8001868:	64bb      	str	r3, [r7, #72]	; 0x48
 800186a:	e002      	b.n	8001872 <HAL_RCC_GetSysClockFreq+0x1f2>
 800186c:	4b05      	ldr	r3, [pc, #20]	; (8001884 <HAL_RCC_GetSysClockFreq+0x204>)
 800186e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001870:	bf00      	nop
 8001872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001874:	4618      	mov	r0, r3
 8001876:	3750      	adds	r7, #80	; 0x50
 8001878:	46bd      	mov	sp, r7
 800187a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800187e:	bf00      	nop
 8001880:	40023800 	.word	0x40023800
 8001884:	00f42400 	.word	0x00f42400
 8001888:	007a1200 	.word	0x007a1200

0800188c <HAL_RCC_GetHCLKFreq>:
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
 8001890:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	20000000 	.word	0x20000000

080018a4 <HAL_RCC_GetPCLK1Freq>:
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	f7ff fff0 	bl	800188c <HAL_RCC_GetHCLKFreq>
 80018ac:	4602      	mov	r2, r0
 80018ae:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	0a9b      	lsrs	r3, r3, #10
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	4903      	ldr	r1, [pc, #12]	; (80018c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018ba:	5ccb      	ldrb	r3, [r1, r3]
 80018bc:	fa22 f303 	lsr.w	r3, r2, r3
 80018c0:	4618      	mov	r0, r3
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40023800 	.word	0x40023800
 80018c8:	08004c40 	.word	0x08004c40

080018cc <HAL_RCC_GetClockConfig>:
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	220f      	movs	r2, #15
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_RCC_GetClockConfig+0x5c>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 0203 	and.w	r2, r3, #3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <HAL_RCC_GetClockConfig+0x5c>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <HAL_RCC_GetClockConfig+0x5c>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	60da      	str	r2, [r3, #12]
 8001900:	4b09      	ldr	r3, [pc, #36]	; (8001928 <HAL_RCC_GetClockConfig+0x5c>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	08db      	lsrs	r3, r3, #3
 8001906:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	611a      	str	r2, [r3, #16]
 800190e:	4b07      	ldr	r3, [pc, #28]	; (800192c <HAL_RCC_GetClockConfig+0x60>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 020f 	and.w	r2, r3, #15
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40023800 	.word	0x40023800
 800192c:	40023c00 	.word	0x40023c00

08001930 <HAL_TIM_Base_Init>:
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_TIM_Base_Init+0x12>
 800193e:	2301      	movs	r3, #1
 8001940:	e041      	b.n	80019c6 <HAL_TIM_Base_Init+0x96>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d106      	bne.n	800195c <HAL_TIM_Base_Init+0x2c>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 f839 	bl	80019ce <HAL_TIM_Base_MspInit>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2202      	movs	r2, #2
 8001960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3304      	adds	r3, #4
 800196c:	4619      	mov	r1, r3
 800196e:	4610      	mov	r0, r2
 8001970:	f000 f9c0 	bl	8001cf4 <TIM_Base_SetConfig>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80019c4:	2300      	movs	r3, #0
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_TIM_Base_MspInit>:
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <HAL_TIM_Base_Start_IT>:
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d001      	beq.n	80019fc <HAL_TIM_Base_Start_IT+0x18>
 80019f8:	2301      	movs	r3, #1
 80019fa:	e04e      	b.n	8001a9a <HAL_TIM_Base_Start_IT+0xb6>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2202      	movs	r2, #2
 8001a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68da      	ldr	r2, [r3, #12]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 0201 	orr.w	r2, r2, #1
 8001a12:	60da      	str	r2, [r3, #12]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a23      	ldr	r2, [pc, #140]	; (8001aa8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d022      	beq.n	8001a64 <HAL_TIM_Base_Start_IT+0x80>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a26:	d01d      	beq.n	8001a64 <HAL_TIM_Base_Start_IT+0x80>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a1f      	ldr	r2, [pc, #124]	; (8001aac <HAL_TIM_Base_Start_IT+0xc8>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d018      	beq.n	8001a64 <HAL_TIM_Base_Start_IT+0x80>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a1e      	ldr	r2, [pc, #120]	; (8001ab0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d013      	beq.n	8001a64 <HAL_TIM_Base_Start_IT+0x80>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a1c      	ldr	r2, [pc, #112]	; (8001ab4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d00e      	beq.n	8001a64 <HAL_TIM_Base_Start_IT+0x80>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a1b      	ldr	r2, [pc, #108]	; (8001ab8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d009      	beq.n	8001a64 <HAL_TIM_Base_Start_IT+0x80>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a19      	ldr	r2, [pc, #100]	; (8001abc <HAL_TIM_Base_Start_IT+0xd8>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d004      	beq.n	8001a64 <HAL_TIM_Base_Start_IT+0x80>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a18      	ldr	r2, [pc, #96]	; (8001ac0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d111      	bne.n	8001a88 <HAL_TIM_Base_Start_IT+0xa4>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2b06      	cmp	r3, #6
 8001a74:	d010      	beq.n	8001a98 <HAL_TIM_Base_Start_IT+0xb4>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f042 0201 	orr.w	r2, r2, #1
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	e007      	b.n	8001a98 <HAL_TIM_Base_Start_IT+0xb4>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f042 0201 	orr.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	2300      	movs	r3, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40010000 	.word	0x40010000
 8001aac:	40000400 	.word	0x40000400
 8001ab0:	40000800 	.word	0x40000800
 8001ab4:	40000c00 	.word	0x40000c00
 8001ab8:	40010400 	.word	0x40010400
 8001abc:	40014000 	.word	0x40014000
 8001ac0:	40001800 	.word	0x40001800

08001ac4 <HAL_TIM_IRQHandler>:
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d020      	beq.n	8001b28 <HAL_TIM_IRQHandler+0x64>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d01b      	beq.n	8001b28 <HAL_TIM_IRQHandler+0x64>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f06f 0202 	mvn.w	r2, #2
 8001af8:	611a      	str	r2, [r3, #16]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	771a      	strb	r2, [r3, #28]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_TIM_IRQHandler+0x52>
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f8d2 	bl	8001cb8 <HAL_TIM_IC_CaptureCallback>
 8001b14:	e005      	b.n	8001b22 <HAL_TIM_IRQHandler+0x5e>
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f8c4 	bl	8001ca4 <HAL_TIM_OC_DelayElapsedCallback>
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f8d5 	bl	8001ccc <HAL_TIM_PWM_PulseFinishedCallback>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	771a      	strb	r2, [r3, #28]
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d020      	beq.n	8001b74 <HAL_TIM_IRQHandler+0xb0>
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d01b      	beq.n	8001b74 <HAL_TIM_IRQHandler+0xb0>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f06f 0204 	mvn.w	r2, #4
 8001b44:	611a      	str	r2, [r3, #16]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2202      	movs	r2, #2
 8001b4a:	771a      	strb	r2, [r3, #28]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_TIM_IRQHandler+0x9e>
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f8ac 	bl	8001cb8 <HAL_TIM_IC_CaptureCallback>
 8001b60:	e005      	b.n	8001b6e <HAL_TIM_IRQHandler+0xaa>
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f89e 	bl	8001ca4 <HAL_TIM_OC_DelayElapsedCallback>
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f8af 	bl	8001ccc <HAL_TIM_PWM_PulseFinishedCallback>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	771a      	strb	r2, [r3, #28]
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d020      	beq.n	8001bc0 <HAL_TIM_IRQHandler+0xfc>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d01b      	beq.n	8001bc0 <HAL_TIM_IRQHandler+0xfc>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f06f 0208 	mvn.w	r2, #8
 8001b90:	611a      	str	r2, [r3, #16]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2204      	movs	r2, #4
 8001b96:	771a      	strb	r2, [r3, #28]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_TIM_IRQHandler+0xea>
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f886 	bl	8001cb8 <HAL_TIM_IC_CaptureCallback>
 8001bac:	e005      	b.n	8001bba <HAL_TIM_IRQHandler+0xf6>
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f878 	bl	8001ca4 <HAL_TIM_OC_DelayElapsedCallback>
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f889 	bl	8001ccc <HAL_TIM_PWM_PulseFinishedCallback>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	771a      	strb	r2, [r3, #28]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	f003 0310 	and.w	r3, r3, #16
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d020      	beq.n	8001c0c <HAL_TIM_IRQHandler+0x148>
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f003 0310 	and.w	r3, r3, #16
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d01b      	beq.n	8001c0c <HAL_TIM_IRQHandler+0x148>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f06f 0210 	mvn.w	r2, #16
 8001bdc:	611a      	str	r2, [r3, #16]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2208      	movs	r2, #8
 8001be2:	771a      	strb	r2, [r3, #28]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_TIM_IRQHandler+0x136>
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f860 	bl	8001cb8 <HAL_TIM_IC_CaptureCallback>
 8001bf8:	e005      	b.n	8001c06 <HAL_TIM_IRQHandler+0x142>
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f852 	bl	8001ca4 <HAL_TIM_OC_DelayElapsedCallback>
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 f863 	bl	8001ccc <HAL_TIM_PWM_PulseFinishedCallback>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	771a      	strb	r2, [r3, #28]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00c      	beq.n	8001c30 <HAL_TIM_IRQHandler+0x16c>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d007      	beq.n	8001c30 <HAL_TIM_IRQHandler+0x16c>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f06f 0201 	mvn.w	r2, #1
 8001c28:	611a      	str	r2, [r3, #16]
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7fe fd50 	bl	80006d0 <HAL_TIM_PeriodElapsedCallback>
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00c      	beq.n	8001c54 <HAL_TIM_IRQHandler+0x190>
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d007      	beq.n	8001c54 <HAL_TIM_IRQHandler+0x190>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c4c:	611a      	str	r2, [r3, #16]
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f906 	bl	8001e60 <HAL_TIMEx_BreakCallback>
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00c      	beq.n	8001c78 <HAL_TIM_IRQHandler+0x1b4>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d007      	beq.n	8001c78 <HAL_TIM_IRQHandler+0x1b4>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c70:	611a      	str	r2, [r3, #16]
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f834 	bl	8001ce0 <HAL_TIM_TriggerCallback>
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	f003 0320 	and.w	r3, r3, #32
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00c      	beq.n	8001c9c <HAL_TIM_IRQHandler+0x1d8>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f003 0320 	and.w	r3, r3, #32
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d007      	beq.n	8001c9c <HAL_TIM_IRQHandler+0x1d8>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f06f 0220 	mvn.w	r2, #32
 8001c94:	611a      	str	r2, [r3, #16]
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f8d8 	bl	8001e4c <HAL_TIMEx_CommutCallback>
 8001c9c:	bf00      	nop
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_TIM_OC_DelayElapsedCallback>:
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_TIM_IC_CaptureCallback>:
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <HAL_TIM_PWM_PulseFinishedCallback>:
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <HAL_TIM_TriggerCallback>:
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <TIM_Base_SetConfig>:
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a46      	ldr	r2, [pc, #280]	; (8001e20 <TIM_Base_SetConfig+0x12c>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d013      	beq.n	8001d34 <TIM_Base_SetConfig+0x40>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d12:	d00f      	beq.n	8001d34 <TIM_Base_SetConfig+0x40>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a43      	ldr	r2, [pc, #268]	; (8001e24 <TIM_Base_SetConfig+0x130>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d00b      	beq.n	8001d34 <TIM_Base_SetConfig+0x40>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a42      	ldr	r2, [pc, #264]	; (8001e28 <TIM_Base_SetConfig+0x134>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d007      	beq.n	8001d34 <TIM_Base_SetConfig+0x40>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a41      	ldr	r2, [pc, #260]	; (8001e2c <TIM_Base_SetConfig+0x138>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d003      	beq.n	8001d34 <TIM_Base_SetConfig+0x40>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a40      	ldr	r2, [pc, #256]	; (8001e30 <TIM_Base_SetConfig+0x13c>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d108      	bne.n	8001d46 <TIM_Base_SetConfig+0x52>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a35      	ldr	r2, [pc, #212]	; (8001e20 <TIM_Base_SetConfig+0x12c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d02b      	beq.n	8001da6 <TIM_Base_SetConfig+0xb2>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d54:	d027      	beq.n	8001da6 <TIM_Base_SetConfig+0xb2>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a32      	ldr	r2, [pc, #200]	; (8001e24 <TIM_Base_SetConfig+0x130>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d023      	beq.n	8001da6 <TIM_Base_SetConfig+0xb2>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a31      	ldr	r2, [pc, #196]	; (8001e28 <TIM_Base_SetConfig+0x134>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d01f      	beq.n	8001da6 <TIM_Base_SetConfig+0xb2>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a30      	ldr	r2, [pc, #192]	; (8001e2c <TIM_Base_SetConfig+0x138>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d01b      	beq.n	8001da6 <TIM_Base_SetConfig+0xb2>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a2f      	ldr	r2, [pc, #188]	; (8001e30 <TIM_Base_SetConfig+0x13c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d017      	beq.n	8001da6 <TIM_Base_SetConfig+0xb2>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a2e      	ldr	r2, [pc, #184]	; (8001e34 <TIM_Base_SetConfig+0x140>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d013      	beq.n	8001da6 <TIM_Base_SetConfig+0xb2>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a2d      	ldr	r2, [pc, #180]	; (8001e38 <TIM_Base_SetConfig+0x144>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d00f      	beq.n	8001da6 <TIM_Base_SetConfig+0xb2>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a2c      	ldr	r2, [pc, #176]	; (8001e3c <TIM_Base_SetConfig+0x148>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d00b      	beq.n	8001da6 <TIM_Base_SetConfig+0xb2>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a2b      	ldr	r2, [pc, #172]	; (8001e40 <TIM_Base_SetConfig+0x14c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d007      	beq.n	8001da6 <TIM_Base_SetConfig+0xb2>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a2a      	ldr	r2, [pc, #168]	; (8001e44 <TIM_Base_SetConfig+0x150>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d003      	beq.n	8001da6 <TIM_Base_SetConfig+0xb2>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a29      	ldr	r2, [pc, #164]	; (8001e48 <TIM_Base_SetConfig+0x154>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d108      	bne.n	8001db8 <TIM_Base_SetConfig+0xc4>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	62da      	str	r2, [r3, #44]	; 0x2c
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	629a      	str	r2, [r3, #40]	; 0x28
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a10      	ldr	r2, [pc, #64]	; (8001e20 <TIM_Base_SetConfig+0x12c>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d003      	beq.n	8001dec <TIM_Base_SetConfig+0xf8>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a12      	ldr	r2, [pc, #72]	; (8001e30 <TIM_Base_SetConfig+0x13c>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d103      	bne.n	8001df4 <TIM_Base_SetConfig+0x100>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	631a      	str	r2, [r3, #48]	; 0x30
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	615a      	str	r2, [r3, #20]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d105      	bne.n	8001e12 <TIM_Base_SetConfig+0x11e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	f023 0201 	bic.w	r2, r3, #1
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	611a      	str	r2, [r3, #16]
 8001e12:	bf00      	nop
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40010000 	.word	0x40010000
 8001e24:	40000400 	.word	0x40000400
 8001e28:	40000800 	.word	0x40000800
 8001e2c:	40000c00 	.word	0x40000c00
 8001e30:	40010400 	.word	0x40010400
 8001e34:	40014000 	.word	0x40014000
 8001e38:	40014400 	.word	0x40014400
 8001e3c:	40014800 	.word	0x40014800
 8001e40:	40001800 	.word	0x40001800
 8001e44:	40001c00 	.word	0x40001c00
 8001e48:	40002000 	.word	0x40002000

08001e4c <HAL_TIMEx_CommutCallback>:
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_TIMEx_BreakCallback>:
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	6039      	str	r1, [r7, #0]
 8001e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	db0a      	blt.n	8001e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	490c      	ldr	r1, [pc, #48]	; (8001ec0 <__NVIC_SetPriority+0x4c>)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	0112      	lsls	r2, r2, #4
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	440b      	add	r3, r1
 8001e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e9c:	e00a      	b.n	8001eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	4908      	ldr	r1, [pc, #32]	; (8001ec4 <__NVIC_SetPriority+0x50>)
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	3b04      	subs	r3, #4
 8001eac:	0112      	lsls	r2, r2, #4
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	761a      	strb	r2, [r3, #24]
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000e100 	.word	0xe000e100
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <SysTick_Handler+0x1c>)
 8001ece:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001ed0:	f001 fd2a 	bl	8003928 <xTaskGetSchedulerState>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d001      	beq.n	8001ede <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001eda:	f002 fb15 	bl	8004508 <xPortSysTickHandler>
  }
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	e000e010 	.word	0xe000e010

08001ee8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001eec:	2100      	movs	r1, #0
 8001eee:	f06f 0004 	mvn.w	r0, #4
 8001ef2:	f7ff ffbf 	bl	8001e74 <__NVIC_SetPriority>
#endif
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f02:	f3ef 8305 	mrs	r3, IPSR
 8001f06:	603b      	str	r3, [r7, #0]
  return(result);
 8001f08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001f0e:	f06f 0305 	mvn.w	r3, #5
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	e00c      	b.n	8001f30 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001f16:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <osKernelInitialize+0x44>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d105      	bne.n	8001f2a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001f1e:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <osKernelInitialize+0x44>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001f24:	2300      	movs	r3, #0
 8001f26:	607b      	str	r3, [r7, #4]
 8001f28:	e002      	b.n	8001f30 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001f30:	687b      	ldr	r3, [r7, #4]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	200000cc 	.word	0x200000cc

08001f44 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f4a:	f3ef 8305 	mrs	r3, IPSR
 8001f4e:	603b      	str	r3, [r7, #0]
  return(result);
 8001f50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <osKernelStart+0x1a>
    stat = osErrorISR;
 8001f56:	f06f 0305 	mvn.w	r3, #5
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	e010      	b.n	8001f80 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <osKernelStart+0x48>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d109      	bne.n	8001f7a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001f66:	f7ff ffbf 	bl	8001ee8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001f6a:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <osKernelStart+0x48>)
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001f70:	f001 f87c 	bl	800306c <vTaskStartScheduler>
      stat = osOK;
 8001f74:	2300      	movs	r3, #0
 8001f76:	607b      	str	r3, [r7, #4]
 8001f78:	e002      	b.n	8001f80 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001f80:	687b      	ldr	r3, [r7, #4]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	200000cc 	.word	0x200000cc

08001f90 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08e      	sub	sp, #56	; 0x38
 8001f94:	af04      	add	r7, sp, #16
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fa0:	f3ef 8305 	mrs	r3, IPSR
 8001fa4:	617b      	str	r3, [r7, #20]
  return(result);
 8001fa6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d17e      	bne.n	80020aa <osThreadNew+0x11a>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d07b      	beq.n	80020aa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001fb2:	2380      	movs	r3, #128	; 0x80
 8001fb4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001fb6:	2318      	movs	r3, #24
 8001fb8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8001fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d045      	beq.n	8002056 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d002      	beq.n	8001fd8 <osThreadNew+0x48>
        name = attr->name;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d002      	beq.n	8001fe6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d008      	beq.n	8001ffe <osThreadNew+0x6e>
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	2b38      	cmp	r3, #56	; 0x38
 8001ff0:	d805      	bhi.n	8001ffe <osThreadNew+0x6e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <osThreadNew+0x72>
        return (NULL);
 8001ffe:	2300      	movs	r3, #0
 8002000:	e054      	b.n	80020ac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	089b      	lsrs	r3, r3, #2
 8002010:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00e      	beq.n	8002038 <osThreadNew+0xa8>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	2ba7      	cmp	r3, #167	; 0xa7
 8002020:	d90a      	bls.n	8002038 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002026:	2b00      	cmp	r3, #0
 8002028:	d006      	beq.n	8002038 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d002      	beq.n	8002038 <osThreadNew+0xa8>
        mem = 1;
 8002032:	2301      	movs	r3, #1
 8002034:	61bb      	str	r3, [r7, #24]
 8002036:	e010      	b.n	800205a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d10c      	bne.n	800205a <osThreadNew+0xca>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d108      	bne.n	800205a <osThreadNew+0xca>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d104      	bne.n	800205a <osThreadNew+0xca>
          mem = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	61bb      	str	r3, [r7, #24]
 8002054:	e001      	b.n	800205a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d110      	bne.n	8002082 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002068:	9202      	str	r2, [sp, #8]
 800206a:	9301      	str	r3, [sp, #4]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	6a3a      	ldr	r2, [r7, #32]
 8002074:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 fe0c 	bl	8002c94 <xTaskCreateStatic>
 800207c:	4603      	mov	r3, r0
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	e013      	b.n	80020aa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d110      	bne.n	80020aa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002088:	6a3b      	ldr	r3, [r7, #32]
 800208a:	b29a      	uxth	r2, r3
 800208c:	f107 0310 	add.w	r3, r7, #16
 8002090:	9301      	str	r3, [sp, #4]
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 fe57 	bl	8002d4e <xTaskCreate>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d001      	beq.n	80020aa <osThreadNew+0x11a>
            hTask = NULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80020aa:	693b      	ldr	r3, [r7, #16]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3728      	adds	r7, #40	; 0x28
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020bc:	f3ef 8305 	mrs	r3, IPSR
 80020c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80020c2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <osDelay+0x1c>
    stat = osErrorISR;
 80020c8:	f06f 0305 	mvn.w	r3, #5
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	e007      	b.n	80020e0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d002      	beq.n	80020e0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 ff92 	bl	8003004 <vTaskDelay>
    }
  }

  return (stat);
 80020e0:	68fb      	ldr	r3, [r7, #12]
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4a07      	ldr	r2, [pc, #28]	; (8002118 <vApplicationGetIdleTaskMemory+0x2c>)
 80020fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	4a06      	ldr	r2, [pc, #24]	; (800211c <vApplicationGetIdleTaskMemory+0x30>)
 8002102:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2280      	movs	r2, #128	; 0x80
 8002108:	601a      	str	r2, [r3, #0]
}
 800210a:	bf00      	nop
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	200000d0 	.word	0x200000d0
 800211c:	20000178 	.word	0x20000178

08002120 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4a07      	ldr	r2, [pc, #28]	; (800214c <vApplicationGetTimerTaskMemory+0x2c>)
 8002130:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	4a06      	ldr	r2, [pc, #24]	; (8002150 <vApplicationGetTimerTaskMemory+0x30>)
 8002136:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800213e:	601a      	str	r2, [r3, #0]
}
 8002140:	bf00      	nop
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	20000378 	.word	0x20000378
 8002150:	20000420 	.word	0x20000420

08002154 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f103 0208 	add.w	r2, r3, #8
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f04f 32ff 	mov.w	r2, #4294967295
 800216c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f103 0208 	add.w	r2, r3, #8
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f103 0208 	add.w	r2, r3, #8
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021ae:	b480      	push	{r7}
 80021b0:	b085      	sub	sp, #20
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	1c5a      	adds	r2, r3, #1
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	601a      	str	r2, [r3, #0]
}
 80021ea:	bf00      	nop
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021f6:	b480      	push	{r7}
 80021f8:	b085      	sub	sp, #20
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
 80021fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220c:	d103      	bne.n	8002216 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	e00c      	b.n	8002230 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3308      	adds	r3, #8
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	e002      	b.n	8002224 <vListInsert+0x2e>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	429a      	cmp	r2, r3
 800222e:	d2f6      	bcs.n	800221e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	601a      	str	r2, [r3, #0]
}
 800225c:	bf00      	nop
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6892      	ldr	r2, [r2, #8]
 800227e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6852      	ldr	r2, [r2, #4]
 8002288:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	429a      	cmp	r2, r3
 8002292:	d103      	bne.n	800229c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	1e5a      	subs	r2, r3, #1
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10a      	bne.n	80022e6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80022d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d4:	f383 8811 	msr	BASEPRI, r3
 80022d8:	f3bf 8f6f 	isb	sy
 80022dc:	f3bf 8f4f 	dsb	sy
 80022e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80022e2:	bf00      	nop
 80022e4:	e7fe      	b.n	80022e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80022e6:	f002 f87d 	bl	80043e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f2:	68f9      	ldr	r1, [r7, #12]
 80022f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022f6:	fb01 f303 	mul.w	r3, r1, r3
 80022fa:	441a      	add	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002316:	3b01      	subs	r3, #1
 8002318:	68f9      	ldr	r1, [r7, #12]
 800231a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800231c:	fb01 f303 	mul.w	r3, r1, r3
 8002320:	441a      	add	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	22ff      	movs	r2, #255	; 0xff
 800232a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	22ff      	movs	r2, #255	; 0xff
 8002332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d114      	bne.n	8002366 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d01a      	beq.n	800237a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	3310      	adds	r3, #16
 8002348:	4618      	mov	r0, r3
 800234a:	f001 f929 	bl	80035a0 <xTaskRemoveFromEventList>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d012      	beq.n	800237a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002354:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <xQueueGenericReset+0xcc>)
 8002356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	f3bf 8f4f 	dsb	sy
 8002360:	f3bf 8f6f 	isb	sy
 8002364:	e009      	b.n	800237a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	3310      	adds	r3, #16
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fef2 	bl	8002154 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	3324      	adds	r3, #36	; 0x24
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff feed 	bl	8002154 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800237a:	f002 f863 	bl	8004444 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800237e:	2301      	movs	r3, #1
}
 8002380:	4618      	mov	r0, r3
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	e000ed04 	.word	0xe000ed04

0800238c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08e      	sub	sp, #56	; 0x38
 8002390:	af02      	add	r7, sp, #8
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
 8002398:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10a      	bne.n	80023b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80023a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a4:	f383 8811 	msr	BASEPRI, r3
 80023a8:	f3bf 8f6f 	isb	sy
 80023ac:	f3bf 8f4f 	dsb	sy
 80023b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80023b2:	bf00      	nop
 80023b4:	e7fe      	b.n	80023b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10a      	bne.n	80023d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80023bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c0:	f383 8811 	msr	BASEPRI, r3
 80023c4:	f3bf 8f6f 	isb	sy
 80023c8:	f3bf 8f4f 	dsb	sy
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80023ce:	bf00      	nop
 80023d0:	e7fe      	b.n	80023d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d002      	beq.n	80023de <xQueueGenericCreateStatic+0x52>
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <xQueueGenericCreateStatic+0x56>
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <xQueueGenericCreateStatic+0x58>
 80023e2:	2300      	movs	r3, #0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10a      	bne.n	80023fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80023e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ec:	f383 8811 	msr	BASEPRI, r3
 80023f0:	f3bf 8f6f 	isb	sy
 80023f4:	f3bf 8f4f 	dsb	sy
 80023f8:	623b      	str	r3, [r7, #32]
}
 80023fa:	bf00      	nop
 80023fc:	e7fe      	b.n	80023fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d102      	bne.n	800240a <xQueueGenericCreateStatic+0x7e>
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <xQueueGenericCreateStatic+0x82>
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <xQueueGenericCreateStatic+0x84>
 800240e:	2300      	movs	r3, #0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10a      	bne.n	800242a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002418:	f383 8811 	msr	BASEPRI, r3
 800241c:	f3bf 8f6f 	isb	sy
 8002420:	f3bf 8f4f 	dsb	sy
 8002424:	61fb      	str	r3, [r7, #28]
}
 8002426:	bf00      	nop
 8002428:	e7fe      	b.n	8002428 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800242a:	2350      	movs	r3, #80	; 0x50
 800242c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	2b50      	cmp	r3, #80	; 0x50
 8002432:	d00a      	beq.n	800244a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002438:	f383 8811 	msr	BASEPRI, r3
 800243c:	f3bf 8f6f 	isb	sy
 8002440:	f3bf 8f4f 	dsb	sy
 8002444:	61bb      	str	r3, [r7, #24]
}
 8002446:	bf00      	nop
 8002448:	e7fe      	b.n	8002448 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800244a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00d      	beq.n	8002472 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800245e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	4613      	mov	r3, r2
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	68b9      	ldr	r1, [r7, #8]
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 f805 	bl	800247c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002474:	4618      	mov	r0, r3
 8002476:	3730      	adds	r7, #48	; 0x30
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
 8002488:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d103      	bne.n	8002498 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	e002      	b.n	800249e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024aa:	2101      	movs	r1, #1
 80024ac:	69b8      	ldr	r0, [r7, #24]
 80024ae:	f7ff ff05 	bl	80022bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	78fa      	ldrb	r2, [r7, #3]
 80024b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80024ba:	bf00      	nop
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08e      	sub	sp, #56	; 0x38
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
 80024d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80024d2:	2300      	movs	r3, #0
 80024d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80024da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10a      	bne.n	80024f6 <xQueueGenericSend+0x32>
	__asm volatile
 80024e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e4:	f383 8811 	msr	BASEPRI, r3
 80024e8:	f3bf 8f6f 	isb	sy
 80024ec:	f3bf 8f4f 	dsb	sy
 80024f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80024f2:	bf00      	nop
 80024f4:	e7fe      	b.n	80024f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d103      	bne.n	8002504 <xQueueGenericSend+0x40>
 80024fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <xQueueGenericSend+0x44>
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <xQueueGenericSend+0x46>
 8002508:	2300      	movs	r3, #0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10a      	bne.n	8002524 <xQueueGenericSend+0x60>
	__asm volatile
 800250e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002512:	f383 8811 	msr	BASEPRI, r3
 8002516:	f3bf 8f6f 	isb	sy
 800251a:	f3bf 8f4f 	dsb	sy
 800251e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002520:	bf00      	nop
 8002522:	e7fe      	b.n	8002522 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d103      	bne.n	8002532 <xQueueGenericSend+0x6e>
 800252a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252e:	2b01      	cmp	r3, #1
 8002530:	d101      	bne.n	8002536 <xQueueGenericSend+0x72>
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <xQueueGenericSend+0x74>
 8002536:	2300      	movs	r3, #0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10a      	bne.n	8002552 <xQueueGenericSend+0x8e>
	__asm volatile
 800253c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002540:	f383 8811 	msr	BASEPRI, r3
 8002544:	f3bf 8f6f 	isb	sy
 8002548:	f3bf 8f4f 	dsb	sy
 800254c:	623b      	str	r3, [r7, #32]
}
 800254e:	bf00      	nop
 8002550:	e7fe      	b.n	8002550 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002552:	f001 f9e9 	bl	8003928 <xTaskGetSchedulerState>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d102      	bne.n	8002562 <xQueueGenericSend+0x9e>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <xQueueGenericSend+0xa2>
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <xQueueGenericSend+0xa4>
 8002566:	2300      	movs	r3, #0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10a      	bne.n	8002582 <xQueueGenericSend+0xbe>
	__asm volatile
 800256c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002570:	f383 8811 	msr	BASEPRI, r3
 8002574:	f3bf 8f6f 	isb	sy
 8002578:	f3bf 8f4f 	dsb	sy
 800257c:	61fb      	str	r3, [r7, #28]
}
 800257e:	bf00      	nop
 8002580:	e7fe      	b.n	8002580 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002582:	f001 ff2f 	bl	80043e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800258a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258e:	429a      	cmp	r2, r3
 8002590:	d302      	bcc.n	8002598 <xQueueGenericSend+0xd4>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b02      	cmp	r3, #2
 8002596:	d129      	bne.n	80025ec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	68b9      	ldr	r1, [r7, #8]
 800259c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800259e:	f000 fa0b 	bl	80029b8 <prvCopyDataToQueue>
 80025a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d010      	beq.n	80025ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ae:	3324      	adds	r3, #36	; 0x24
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 fff5 	bl	80035a0 <xTaskRemoveFromEventList>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d013      	beq.n	80025e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80025bc:	4b3f      	ldr	r3, [pc, #252]	; (80026bc <xQueueGenericSend+0x1f8>)
 80025be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	f3bf 8f4f 	dsb	sy
 80025c8:	f3bf 8f6f 	isb	sy
 80025cc:	e00a      	b.n	80025e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80025ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d007      	beq.n	80025e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80025d4:	4b39      	ldr	r3, [pc, #228]	; (80026bc <xQueueGenericSend+0x1f8>)
 80025d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	f3bf 8f4f 	dsb	sy
 80025e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80025e4:	f001 ff2e 	bl	8004444 <vPortExitCritical>
				return pdPASS;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e063      	b.n	80026b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d103      	bne.n	80025fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80025f2:	f001 ff27 	bl	8004444 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	e05c      	b.n	80026b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80025fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d106      	bne.n	800260e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002600:	f107 0314 	add.w	r3, r7, #20
 8002604:	4618      	mov	r0, r3
 8002606:	f001 f82f 	bl	8003668 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800260a:	2301      	movs	r3, #1
 800260c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800260e:	f001 ff19 	bl	8004444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002612:	f000 fd9b 	bl	800314c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002616:	f001 fee5 	bl	80043e4 <vPortEnterCritical>
 800261a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002620:	b25b      	sxtb	r3, r3
 8002622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002626:	d103      	bne.n	8002630 <xQueueGenericSend+0x16c>
 8002628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002632:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002636:	b25b      	sxtb	r3, r3
 8002638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263c:	d103      	bne.n	8002646 <xQueueGenericSend+0x182>
 800263e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002646:	f001 fefd 	bl	8004444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800264a:	1d3a      	adds	r2, r7, #4
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	4611      	mov	r1, r2
 8002652:	4618      	mov	r0, r3
 8002654:	f001 f81e 	bl	8003694 <xTaskCheckForTimeOut>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d124      	bne.n	80026a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800265e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002660:	f000 faa2 	bl	8002ba8 <prvIsQueueFull>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d018      	beq.n	800269c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800266a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266c:	3310      	adds	r3, #16
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	4611      	mov	r1, r2
 8002672:	4618      	mov	r0, r3
 8002674:	f000 ff44 	bl	8003500 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800267a:	f000 fa2d 	bl	8002ad8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800267e:	f000 fd73 	bl	8003168 <xTaskResumeAll>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	f47f af7c 	bne.w	8002582 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800268a:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <xQueueGenericSend+0x1f8>)
 800268c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	f3bf 8f4f 	dsb	sy
 8002696:	f3bf 8f6f 	isb	sy
 800269a:	e772      	b.n	8002582 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800269c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800269e:	f000 fa1b 	bl	8002ad8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80026a2:	f000 fd61 	bl	8003168 <xTaskResumeAll>
 80026a6:	e76c      	b.n	8002582 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80026a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026aa:	f000 fa15 	bl	8002ad8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80026ae:	f000 fd5b 	bl	8003168 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80026b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3738      	adds	r7, #56	; 0x38
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	e000ed04 	.word	0xe000ed04

080026c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b090      	sub	sp, #64	; 0x40
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
 80026cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80026d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10a      	bne.n	80026ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80026d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026dc:	f383 8811 	msr	BASEPRI, r3
 80026e0:	f3bf 8f6f 	isb	sy
 80026e4:	f3bf 8f4f 	dsb	sy
 80026e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80026ea:	bf00      	nop
 80026ec:	e7fe      	b.n	80026ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d103      	bne.n	80026fc <xQueueGenericSendFromISR+0x3c>
 80026f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <xQueueGenericSendFromISR+0x40>
 80026fc:	2301      	movs	r3, #1
 80026fe:	e000      	b.n	8002702 <xQueueGenericSendFromISR+0x42>
 8002700:	2300      	movs	r3, #0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10a      	bne.n	800271c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800270a:	f383 8811 	msr	BASEPRI, r3
 800270e:	f3bf 8f6f 	isb	sy
 8002712:	f3bf 8f4f 	dsb	sy
 8002716:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002718:	bf00      	nop
 800271a:	e7fe      	b.n	800271a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d103      	bne.n	800272a <xQueueGenericSendFromISR+0x6a>
 8002722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002726:	2b01      	cmp	r3, #1
 8002728:	d101      	bne.n	800272e <xQueueGenericSendFromISR+0x6e>
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <xQueueGenericSendFromISR+0x70>
 800272e:	2300      	movs	r3, #0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10a      	bne.n	800274a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002738:	f383 8811 	msr	BASEPRI, r3
 800273c:	f3bf 8f6f 	isb	sy
 8002740:	f3bf 8f4f 	dsb	sy
 8002744:	623b      	str	r3, [r7, #32]
}
 8002746:	bf00      	nop
 8002748:	e7fe      	b.n	8002748 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800274a:	f001 ff2d 	bl	80045a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800274e:	f3ef 8211 	mrs	r2, BASEPRI
 8002752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002756:	f383 8811 	msr	BASEPRI, r3
 800275a:	f3bf 8f6f 	isb	sy
 800275e:	f3bf 8f4f 	dsb	sy
 8002762:	61fa      	str	r2, [r7, #28]
 8002764:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002766:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002768:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800276a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800276e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002772:	429a      	cmp	r2, r3
 8002774:	d302      	bcc.n	800277c <xQueueGenericSendFromISR+0xbc>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2b02      	cmp	r3, #2
 800277a:	d12f      	bne.n	80027dc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800277c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	68b9      	ldr	r1, [r7, #8]
 8002790:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002792:	f000 f911 	bl	80029b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002796:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800279a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279e:	d112      	bne.n	80027c6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d016      	beq.n	80027d6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027aa:	3324      	adds	r3, #36	; 0x24
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 fef7 	bl	80035a0 <xTaskRemoveFromEventList>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00e      	beq.n	80027d6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00b      	beq.n	80027d6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	e007      	b.n	80027d6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80027c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80027ca:	3301      	adds	r3, #1
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	b25a      	sxtb	r2, r3
 80027d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80027d6:	2301      	movs	r3, #1
 80027d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80027da:	e001      	b.n	80027e0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80027ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80027ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3740      	adds	r7, #64	; 0x40
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08c      	sub	sp, #48	; 0x30
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002804:	2300      	movs	r3, #0
 8002806:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800280c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10a      	bne.n	8002828 <xQueueReceive+0x30>
	__asm volatile
 8002812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002816:	f383 8811 	msr	BASEPRI, r3
 800281a:	f3bf 8f6f 	isb	sy
 800281e:	f3bf 8f4f 	dsb	sy
 8002822:	623b      	str	r3, [r7, #32]
}
 8002824:	bf00      	nop
 8002826:	e7fe      	b.n	8002826 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d103      	bne.n	8002836 <xQueueReceive+0x3e>
 800282e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <xQueueReceive+0x42>
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <xQueueReceive+0x44>
 800283a:	2300      	movs	r3, #0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10a      	bne.n	8002856 <xQueueReceive+0x5e>
	__asm volatile
 8002840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002844:	f383 8811 	msr	BASEPRI, r3
 8002848:	f3bf 8f6f 	isb	sy
 800284c:	f3bf 8f4f 	dsb	sy
 8002850:	61fb      	str	r3, [r7, #28]
}
 8002852:	bf00      	nop
 8002854:	e7fe      	b.n	8002854 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002856:	f001 f867 	bl	8003928 <xTaskGetSchedulerState>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d102      	bne.n	8002866 <xQueueReceive+0x6e>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <xQueueReceive+0x72>
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <xQueueReceive+0x74>
 800286a:	2300      	movs	r3, #0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10a      	bne.n	8002886 <xQueueReceive+0x8e>
	__asm volatile
 8002870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002874:	f383 8811 	msr	BASEPRI, r3
 8002878:	f3bf 8f6f 	isb	sy
 800287c:	f3bf 8f4f 	dsb	sy
 8002880:	61bb      	str	r3, [r7, #24]
}
 8002882:	bf00      	nop
 8002884:	e7fe      	b.n	8002884 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002886:	f001 fdad 	bl	80043e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800288a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	2b00      	cmp	r3, #0
 8002894:	d01f      	beq.n	80028d6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002896:	68b9      	ldr	r1, [r7, #8]
 8002898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800289a:	f000 f8f7 	bl	8002a8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	1e5a      	subs	r2, r3, #1
 80028a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00f      	beq.n	80028ce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b0:	3310      	adds	r3, #16
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 fe74 	bl	80035a0 <xTaskRemoveFromEventList>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d007      	beq.n	80028ce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80028be:	4b3d      	ldr	r3, [pc, #244]	; (80029b4 <xQueueReceive+0x1bc>)
 80028c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	f3bf 8f4f 	dsb	sy
 80028ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80028ce:	f001 fdb9 	bl	8004444 <vPortExitCritical>
				return pdPASS;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e069      	b.n	80029aa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d103      	bne.n	80028e4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80028dc:	f001 fdb2 	bl	8004444 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80028e0:	2300      	movs	r3, #0
 80028e2:	e062      	b.n	80029aa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80028e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d106      	bne.n	80028f8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80028ea:	f107 0310 	add.w	r3, r7, #16
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 feba 	bl	8003668 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80028f4:	2301      	movs	r3, #1
 80028f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80028f8:	f001 fda4 	bl	8004444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80028fc:	f000 fc26 	bl	800314c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002900:	f001 fd70 	bl	80043e4 <vPortEnterCritical>
 8002904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002906:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800290a:	b25b      	sxtb	r3, r3
 800290c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002910:	d103      	bne.n	800291a <xQueueReceive+0x122>
 8002912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800291a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002920:	b25b      	sxtb	r3, r3
 8002922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002926:	d103      	bne.n	8002930 <xQueueReceive+0x138>
 8002928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002930:	f001 fd88 	bl	8004444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002934:	1d3a      	adds	r2, r7, #4
 8002936:	f107 0310 	add.w	r3, r7, #16
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f000 fea9 	bl	8003694 <xTaskCheckForTimeOut>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d123      	bne.n	8002990 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800294a:	f000 f917 	bl	8002b7c <prvIsQueueEmpty>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d017      	beq.n	8002984 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002956:	3324      	adds	r3, #36	; 0x24
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	4611      	mov	r1, r2
 800295c:	4618      	mov	r0, r3
 800295e:	f000 fdcf 	bl	8003500 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002962:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002964:	f000 f8b8 	bl	8002ad8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002968:	f000 fbfe 	bl	8003168 <xTaskResumeAll>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d189      	bne.n	8002886 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002972:	4b10      	ldr	r3, [pc, #64]	; (80029b4 <xQueueReceive+0x1bc>)
 8002974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	f3bf 8f4f 	dsb	sy
 800297e:	f3bf 8f6f 	isb	sy
 8002982:	e780      	b.n	8002886 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002984:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002986:	f000 f8a7 	bl	8002ad8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800298a:	f000 fbed 	bl	8003168 <xTaskResumeAll>
 800298e:	e77a      	b.n	8002886 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002992:	f000 f8a1 	bl	8002ad8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002996:	f000 fbe7 	bl	8003168 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800299a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800299c:	f000 f8ee 	bl	8002b7c <prvIsQueueEmpty>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f43f af6f 	beq.w	8002886 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80029a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3730      	adds	r7, #48	; 0x30
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	e000ed04 	.word	0xe000ed04

080029b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10d      	bne.n	80029f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d14d      	bne.n	8002a7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 ffbe 	bl	8003964 <xTaskPriorityDisinherit>
 80029e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	e043      	b.n	8002a7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d119      	bne.n	8002a2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6858      	ldr	r0, [r3, #4]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	461a      	mov	r2, r3
 8002a02:	68b9      	ldr	r1, [r7, #8]
 8002a04:	f002 f87e 	bl	8004b04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	441a      	add	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d32b      	bcc.n	8002a7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	e026      	b.n	8002a7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	68d8      	ldr	r0, [r3, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	461a      	mov	r2, r3
 8002a36:	68b9      	ldr	r1, [r7, #8]
 8002a38:	f002 f864 	bl	8004b04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	425b      	negs	r3, r3
 8002a46:	441a      	add	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d207      	bcs.n	8002a68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	425b      	negs	r3, r3
 8002a62:	441a      	add	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d105      	bne.n	8002a7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d002      	beq.n	8002a7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002a82:	697b      	ldr	r3, [r7, #20]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d018      	beq.n	8002ad0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	441a      	add	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d303      	bcc.n	8002ac0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68d9      	ldr	r1, [r3, #12]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	461a      	mov	r2, r3
 8002aca:	6838      	ldr	r0, [r7, #0]
 8002acc:	f002 f81a 	bl	8004b04 <memcpy>
	}
}
 8002ad0:	bf00      	nop
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002ae0:	f001 fc80 	bl	80043e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002aea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002aec:	e011      	b.n	8002b12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d012      	beq.n	8002b1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3324      	adds	r3, #36	; 0x24
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 fd50 	bl	80035a0 <xTaskRemoveFromEventList>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002b06:	f000 fe27 	bl	8003758 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	dce9      	bgt.n	8002aee <prvUnlockQueue+0x16>
 8002b1a:	e000      	b.n	8002b1e <prvUnlockQueue+0x46>
					break;
 8002b1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	22ff      	movs	r2, #255	; 0xff
 8002b22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002b26:	f001 fc8d 	bl	8004444 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002b2a:	f001 fc5b 	bl	80043e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b36:	e011      	b.n	8002b5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d012      	beq.n	8002b66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3310      	adds	r3, #16
 8002b44:	4618      	mov	r0, r3
 8002b46:	f000 fd2b 	bl	80035a0 <xTaskRemoveFromEventList>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002b50:	f000 fe02 	bl	8003758 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002b54:	7bbb      	ldrb	r3, [r7, #14]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	dce9      	bgt.n	8002b38 <prvUnlockQueue+0x60>
 8002b64:	e000      	b.n	8002b68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002b66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	22ff      	movs	r2, #255	; 0xff
 8002b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002b70:	f001 fc68 	bl	8004444 <vPortExitCritical>
}
 8002b74:	bf00      	nop
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b84:	f001 fc2e 	bl	80043e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d102      	bne.n	8002b96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002b90:	2301      	movs	r3, #1
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	e001      	b.n	8002b9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b9a:	f001 fc53 	bl	8004444 <vPortExitCritical>

	return xReturn;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002bb0:	f001 fc18 	bl	80043e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d102      	bne.n	8002bc6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	e001      	b.n	8002bca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002bca:	f001 fc3b 	bl	8004444 <vPortExitCritical>

	return xReturn;
 8002bce:	68fb      	ldr	r3, [r7, #12]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	e014      	b.n	8002c12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002be8:	4a0f      	ldr	r2, [pc, #60]	; (8002c28 <vQueueAddToRegistry+0x50>)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10b      	bne.n	8002c0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002bf4:	490c      	ldr	r1, [pc, #48]	; (8002c28 <vQueueAddToRegistry+0x50>)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002bfe:	4a0a      	ldr	r2, [pc, #40]	; (8002c28 <vQueueAddToRegistry+0x50>)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	4413      	add	r3, r2
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002c0a:	e006      	b.n	8002c1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2b07      	cmp	r3, #7
 8002c16:	d9e7      	bls.n	8002be8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002c18:	bf00      	nop
 8002c1a:	bf00      	nop
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	20000820 	.word	0x20000820

08002c2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002c3c:	f001 fbd2 	bl	80043e4 <vPortEnterCritical>
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c46:	b25b      	sxtb	r3, r3
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4c:	d103      	bne.n	8002c56 <vQueueWaitForMessageRestricted+0x2a>
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c5c:	b25b      	sxtb	r3, r3
 8002c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c62:	d103      	bne.n	8002c6c <vQueueWaitForMessageRestricted+0x40>
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c6c:	f001 fbea 	bl	8004444 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d106      	bne.n	8002c86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	3324      	adds	r3, #36	; 0x24
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 fc61 	bl	8003548 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002c86:	6978      	ldr	r0, [r7, #20]
 8002c88:	f7ff ff26 	bl	8002ad8 <prvUnlockQueue>
	}
 8002c8c:	bf00      	nop
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08e      	sub	sp, #56	; 0x38
 8002c98:	af04      	add	r7, sp, #16
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
 8002ca0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10a      	bne.n	8002cbe <xTaskCreateStatic+0x2a>
	__asm volatile
 8002ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cac:	f383 8811 	msr	BASEPRI, r3
 8002cb0:	f3bf 8f6f 	isb	sy
 8002cb4:	f3bf 8f4f 	dsb	sy
 8002cb8:	623b      	str	r3, [r7, #32]
}
 8002cba:	bf00      	nop
 8002cbc:	e7fe      	b.n	8002cbc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10a      	bne.n	8002cda <xTaskCreateStatic+0x46>
	__asm volatile
 8002cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc8:	f383 8811 	msr	BASEPRI, r3
 8002ccc:	f3bf 8f6f 	isb	sy
 8002cd0:	f3bf 8f4f 	dsb	sy
 8002cd4:	61fb      	str	r3, [r7, #28]
}
 8002cd6:	bf00      	nop
 8002cd8:	e7fe      	b.n	8002cd8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002cda:	23a8      	movs	r3, #168	; 0xa8
 8002cdc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	2ba8      	cmp	r3, #168	; 0xa8
 8002ce2:	d00a      	beq.n	8002cfa <xTaskCreateStatic+0x66>
	__asm volatile
 8002ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce8:	f383 8811 	msr	BASEPRI, r3
 8002cec:	f3bf 8f6f 	isb	sy
 8002cf0:	f3bf 8f4f 	dsb	sy
 8002cf4:	61bb      	str	r3, [r7, #24]
}
 8002cf6:	bf00      	nop
 8002cf8:	e7fe      	b.n	8002cf8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002cfa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d01e      	beq.n	8002d40 <xTaskCreateStatic+0xac>
 8002d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d01b      	beq.n	8002d40 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d10:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	2202      	movs	r2, #2
 8002d16:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	9303      	str	r3, [sp, #12]
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	9302      	str	r3, [sp, #8]
 8002d22:	f107 0314 	add.w	r3, r7, #20
 8002d26:	9301      	str	r3, [sp, #4]
 8002d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	68b9      	ldr	r1, [r7, #8]
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 f850 	bl	8002dd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d3a:	f000 f8f3 	bl	8002f24 <prvAddNewTaskToReadyList>
 8002d3e:	e001      	b.n	8002d44 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002d44:	697b      	ldr	r3, [r7, #20]
	}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3728      	adds	r7, #40	; 0x28
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b08c      	sub	sp, #48	; 0x30
 8002d52:	af04      	add	r7, sp, #16
 8002d54:	60f8      	str	r0, [r7, #12]
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	603b      	str	r3, [r7, #0]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d5e:	88fb      	ldrh	r3, [r7, #6]
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f001 fc60 	bl	8004628 <pvPortMalloc>
 8002d68:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00e      	beq.n	8002d8e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d70:	20a8      	movs	r0, #168	; 0xa8
 8002d72:	f001 fc59 	bl	8004628 <pvPortMalloc>
 8002d76:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	631a      	str	r2, [r3, #48]	; 0x30
 8002d84:	e005      	b.n	8002d92 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002d86:	6978      	ldr	r0, [r7, #20]
 8002d88:	f001 fd1a 	bl	80047c0 <vPortFree>
 8002d8c:	e001      	b.n	8002d92 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d017      	beq.n	8002dc8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002da0:	88fa      	ldrh	r2, [r7, #6]
 8002da2:	2300      	movs	r3, #0
 8002da4:	9303      	str	r3, [sp, #12]
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	9302      	str	r3, [sp, #8]
 8002daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dac:	9301      	str	r3, [sp, #4]
 8002dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	68b9      	ldr	r1, [r7, #8]
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f80e 	bl	8002dd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002dbc:	69f8      	ldr	r0, [r7, #28]
 8002dbe:	f000 f8b1 	bl	8002f24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	61bb      	str	r3, [r7, #24]
 8002dc6:	e002      	b.n	8002dce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dcc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002dce:	69bb      	ldr	r3, [r7, #24]
	}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3720      	adds	r7, #32
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
 8002de4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	461a      	mov	r2, r3
 8002df0:	21a5      	movs	r1, #165	; 0xa5
 8002df2:	f001 fe03 	bl	80049fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e00:	3b01      	subs	r3, #1
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	f023 0307 	bic.w	r3, r3, #7
 8002e0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1e:	f383 8811 	msr	BASEPRI, r3
 8002e22:	f3bf 8f6f 	isb	sy
 8002e26:	f3bf 8f4f 	dsb	sy
 8002e2a:	617b      	str	r3, [r7, #20]
}
 8002e2c:	bf00      	nop
 8002e2e:	e7fe      	b.n	8002e2e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d01f      	beq.n	8002e76 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
 8002e3a:	e012      	b.n	8002e62 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	4413      	add	r3, r2
 8002e42:	7819      	ldrb	r1, [r3, #0]
 8002e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	4413      	add	r3, r2
 8002e4a:	3334      	adds	r3, #52	; 0x34
 8002e4c:	460a      	mov	r2, r1
 8002e4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	4413      	add	r3, r2
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d006      	beq.n	8002e6a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	61fb      	str	r3, [r7, #28]
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	2b0f      	cmp	r3, #15
 8002e66:	d9e9      	bls.n	8002e3c <prvInitialiseNewTask+0x64>
 8002e68:	e000      	b.n	8002e6c <prvInitialiseNewTask+0x94>
			{
				break;
 8002e6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e74:	e003      	b.n	8002e7e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e80:	2b37      	cmp	r3, #55	; 0x37
 8002e82:	d901      	bls.n	8002e88 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e84:	2337      	movs	r3, #55	; 0x37
 8002e86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e92:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e96:	2200      	movs	r2, #0
 8002e98:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff f978 	bl	8002194 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea6:	3318      	adds	r3, #24
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff f973 	bl	8002194 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eb2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ec2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed6:	3354      	adds	r3, #84	; 0x54
 8002ed8:	224c      	movs	r2, #76	; 0x4c
 8002eda:	2100      	movs	r1, #0
 8002edc:	4618      	mov	r0, r3
 8002ede:	f001 fd8d 	bl	80049fc <memset>
 8002ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee4:	4a0c      	ldr	r2, [pc, #48]	; (8002f18 <prvInitialiseNewTask+0x140>)
 8002ee6:	659a      	str	r2, [r3, #88]	; 0x58
 8002ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eea:	4a0c      	ldr	r2, [pc, #48]	; (8002f1c <prvInitialiseNewTask+0x144>)
 8002eec:	65da      	str	r2, [r3, #92]	; 0x5c
 8002eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef0:	4a0b      	ldr	r2, [pc, #44]	; (8002f20 <prvInitialiseNewTask+0x148>)
 8002ef2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	68f9      	ldr	r1, [r7, #12]
 8002ef8:	69b8      	ldr	r0, [r7, #24]
 8002efa:	f001 f943 	bl	8004184 <pxPortInitialiseStack>
 8002efe:	4602      	mov	r2, r0
 8002f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f02:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d002      	beq.n	8002f10 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f0e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f10:	bf00      	nop
 8002f12:	3720      	adds	r7, #32
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	20004ab4 	.word	0x20004ab4
 8002f1c:	20004b1c 	.word	0x20004b1c
 8002f20:	20004b84 	.word	0x20004b84

08002f24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f2c:	f001 fa5a 	bl	80043e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f30:	4b2d      	ldr	r3, [pc, #180]	; (8002fe8 <prvAddNewTaskToReadyList+0xc4>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	3301      	adds	r3, #1
 8002f36:	4a2c      	ldr	r2, [pc, #176]	; (8002fe8 <prvAddNewTaskToReadyList+0xc4>)
 8002f38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002f3a:	4b2c      	ldr	r3, [pc, #176]	; (8002fec <prvAddNewTaskToReadyList+0xc8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d109      	bne.n	8002f56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002f42:	4a2a      	ldr	r2, [pc, #168]	; (8002fec <prvAddNewTaskToReadyList+0xc8>)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f48:	4b27      	ldr	r3, [pc, #156]	; (8002fe8 <prvAddNewTaskToReadyList+0xc4>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d110      	bne.n	8002f72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002f50:	f000 fc28 	bl	80037a4 <prvInitialiseTaskLists>
 8002f54:	e00d      	b.n	8002f72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002f56:	4b26      	ldr	r3, [pc, #152]	; (8002ff0 <prvAddNewTaskToReadyList+0xcc>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d109      	bne.n	8002f72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f5e:	4b23      	ldr	r3, [pc, #140]	; (8002fec <prvAddNewTaskToReadyList+0xc8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d802      	bhi.n	8002f72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002f6c:	4a1f      	ldr	r2, [pc, #124]	; (8002fec <prvAddNewTaskToReadyList+0xc8>)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002f72:	4b20      	ldr	r3, [pc, #128]	; (8002ff4 <prvAddNewTaskToReadyList+0xd0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	3301      	adds	r3, #1
 8002f78:	4a1e      	ldr	r2, [pc, #120]	; (8002ff4 <prvAddNewTaskToReadyList+0xd0>)
 8002f7a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f7c:	4b1d      	ldr	r3, [pc, #116]	; (8002ff4 <prvAddNewTaskToReadyList+0xd0>)
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f88:	4b1b      	ldr	r3, [pc, #108]	; (8002ff8 <prvAddNewTaskToReadyList+0xd4>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d903      	bls.n	8002f98 <prvAddNewTaskToReadyList+0x74>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	4a18      	ldr	r2, [pc, #96]	; (8002ff8 <prvAddNewTaskToReadyList+0xd4>)
 8002f96:	6013      	str	r3, [r2, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4a15      	ldr	r2, [pc, #84]	; (8002ffc <prvAddNewTaskToReadyList+0xd8>)
 8002fa6:	441a      	add	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3304      	adds	r3, #4
 8002fac:	4619      	mov	r1, r3
 8002fae:	4610      	mov	r0, r2
 8002fb0:	f7ff f8fd 	bl	80021ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002fb4:	f001 fa46 	bl	8004444 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002fb8:	4b0d      	ldr	r3, [pc, #52]	; (8002ff0 <prvAddNewTaskToReadyList+0xcc>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00e      	beq.n	8002fde <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002fc0:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <prvAddNewTaskToReadyList+0xc8>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d207      	bcs.n	8002fde <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002fce:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <prvAddNewTaskToReadyList+0xdc>)
 8002fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	20000d34 	.word	0x20000d34
 8002fec:	20000860 	.word	0x20000860
 8002ff0:	20000d40 	.word	0x20000d40
 8002ff4:	20000d50 	.word	0x20000d50
 8002ff8:	20000d3c 	.word	0x20000d3c
 8002ffc:	20000864 	.word	0x20000864
 8003000:	e000ed04 	.word	0xe000ed04

08003004 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800300c:	2300      	movs	r3, #0
 800300e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d017      	beq.n	8003046 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003016:	4b13      	ldr	r3, [pc, #76]	; (8003064 <vTaskDelay+0x60>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00a      	beq.n	8003034 <vTaskDelay+0x30>
	__asm volatile
 800301e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003022:	f383 8811 	msr	BASEPRI, r3
 8003026:	f3bf 8f6f 	isb	sy
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	60bb      	str	r3, [r7, #8]
}
 8003030:	bf00      	nop
 8003032:	e7fe      	b.n	8003032 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003034:	f000 f88a 	bl	800314c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003038:	2100      	movs	r1, #0
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 fd00 	bl	8003a40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003040:	f000 f892 	bl	8003168 <xTaskResumeAll>
 8003044:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d107      	bne.n	800305c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800304c:	4b06      	ldr	r3, [pc, #24]	; (8003068 <vTaskDelay+0x64>)
 800304e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	f3bf 8f4f 	dsb	sy
 8003058:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800305c:	bf00      	nop
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	20000d5c 	.word	0x20000d5c
 8003068:	e000ed04 	.word	0xe000ed04

0800306c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b08a      	sub	sp, #40	; 0x28
 8003070:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003072:	2300      	movs	r3, #0
 8003074:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003076:	2300      	movs	r3, #0
 8003078:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800307a:	463a      	mov	r2, r7
 800307c:	1d39      	adds	r1, r7, #4
 800307e:	f107 0308 	add.w	r3, r7, #8
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff f832 	bl	80020ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003088:	6839      	ldr	r1, [r7, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	9202      	str	r2, [sp, #8]
 8003090:	9301      	str	r3, [sp, #4]
 8003092:	2300      	movs	r3, #0
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	2300      	movs	r3, #0
 8003098:	460a      	mov	r2, r1
 800309a:	4924      	ldr	r1, [pc, #144]	; (800312c <vTaskStartScheduler+0xc0>)
 800309c:	4824      	ldr	r0, [pc, #144]	; (8003130 <vTaskStartScheduler+0xc4>)
 800309e:	f7ff fdf9 	bl	8002c94 <xTaskCreateStatic>
 80030a2:	4603      	mov	r3, r0
 80030a4:	4a23      	ldr	r2, [pc, #140]	; (8003134 <vTaskStartScheduler+0xc8>)
 80030a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80030a8:	4b22      	ldr	r3, [pc, #136]	; (8003134 <vTaskStartScheduler+0xc8>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d002      	beq.n	80030b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80030b0:	2301      	movs	r3, #1
 80030b2:	617b      	str	r3, [r7, #20]
 80030b4:	e001      	b.n	80030ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d102      	bne.n	80030c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80030c0:	f000 fd12 	bl	8003ae8 <xTimerCreateTimerTask>
 80030c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d11b      	bne.n	8003104 <vTaskStartScheduler+0x98>
	__asm volatile
 80030cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d0:	f383 8811 	msr	BASEPRI, r3
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	f3bf 8f4f 	dsb	sy
 80030dc:	613b      	str	r3, [r7, #16]
}
 80030de:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80030e0:	4b15      	ldr	r3, [pc, #84]	; (8003138 <vTaskStartScheduler+0xcc>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	3354      	adds	r3, #84	; 0x54
 80030e6:	4a15      	ldr	r2, [pc, #84]	; (800313c <vTaskStartScheduler+0xd0>)
 80030e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80030ea:	4b15      	ldr	r3, [pc, #84]	; (8003140 <vTaskStartScheduler+0xd4>)
 80030ec:	f04f 32ff 	mov.w	r2, #4294967295
 80030f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80030f2:	4b14      	ldr	r3, [pc, #80]	; (8003144 <vTaskStartScheduler+0xd8>)
 80030f4:	2201      	movs	r2, #1
 80030f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80030f8:	4b13      	ldr	r3, [pc, #76]	; (8003148 <vTaskStartScheduler+0xdc>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80030fe:	f001 f8cf 	bl	80042a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003102:	e00e      	b.n	8003122 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310a:	d10a      	bne.n	8003122 <vTaskStartScheduler+0xb6>
	__asm volatile
 800310c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003110:	f383 8811 	msr	BASEPRI, r3
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	60fb      	str	r3, [r7, #12]
}
 800311e:	bf00      	nop
 8003120:	e7fe      	b.n	8003120 <vTaskStartScheduler+0xb4>
}
 8003122:	bf00      	nop
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	08004bf4 	.word	0x08004bf4
 8003130:	08003771 	.word	0x08003771
 8003134:	20000d58 	.word	0x20000d58
 8003138:	20000860 	.word	0x20000860
 800313c:	2000005c 	.word	0x2000005c
 8003140:	20000d54 	.word	0x20000d54
 8003144:	20000d40 	.word	0x20000d40
 8003148:	20000d38 	.word	0x20000d38

0800314c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003150:	4b04      	ldr	r3, [pc, #16]	; (8003164 <vTaskSuspendAll+0x18>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	3301      	adds	r3, #1
 8003156:	4a03      	ldr	r2, [pc, #12]	; (8003164 <vTaskSuspendAll+0x18>)
 8003158:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800315a:	bf00      	nop
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	20000d5c 	.word	0x20000d5c

08003168 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003172:	2300      	movs	r3, #0
 8003174:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003176:	4b42      	ldr	r3, [pc, #264]	; (8003280 <xTaskResumeAll+0x118>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10a      	bne.n	8003194 <xTaskResumeAll+0x2c>
	__asm volatile
 800317e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003182:	f383 8811 	msr	BASEPRI, r3
 8003186:	f3bf 8f6f 	isb	sy
 800318a:	f3bf 8f4f 	dsb	sy
 800318e:	603b      	str	r3, [r7, #0]
}
 8003190:	bf00      	nop
 8003192:	e7fe      	b.n	8003192 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003194:	f001 f926 	bl	80043e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003198:	4b39      	ldr	r3, [pc, #228]	; (8003280 <xTaskResumeAll+0x118>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	3b01      	subs	r3, #1
 800319e:	4a38      	ldr	r2, [pc, #224]	; (8003280 <xTaskResumeAll+0x118>)
 80031a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031a2:	4b37      	ldr	r3, [pc, #220]	; (8003280 <xTaskResumeAll+0x118>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d162      	bne.n	8003270 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031aa:	4b36      	ldr	r3, [pc, #216]	; (8003284 <xTaskResumeAll+0x11c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d05e      	beq.n	8003270 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031b2:	e02f      	b.n	8003214 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031b4:	4b34      	ldr	r3, [pc, #208]	; (8003288 <xTaskResumeAll+0x120>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	3318      	adds	r3, #24
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff f851 	bl	8002268 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	3304      	adds	r3, #4
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff f84c 	bl	8002268 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d4:	4b2d      	ldr	r3, [pc, #180]	; (800328c <xTaskResumeAll+0x124>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d903      	bls.n	80031e4 <xTaskResumeAll+0x7c>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	4a2a      	ldr	r2, [pc, #168]	; (800328c <xTaskResumeAll+0x124>)
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e8:	4613      	mov	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4a27      	ldr	r2, [pc, #156]	; (8003290 <xTaskResumeAll+0x128>)
 80031f2:	441a      	add	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	3304      	adds	r3, #4
 80031f8:	4619      	mov	r1, r3
 80031fa:	4610      	mov	r0, r2
 80031fc:	f7fe ffd7 	bl	80021ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003204:	4b23      	ldr	r3, [pc, #140]	; (8003294 <xTaskResumeAll+0x12c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320a:	429a      	cmp	r2, r3
 800320c:	d302      	bcc.n	8003214 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800320e:	4b22      	ldr	r3, [pc, #136]	; (8003298 <xTaskResumeAll+0x130>)
 8003210:	2201      	movs	r2, #1
 8003212:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003214:	4b1c      	ldr	r3, [pc, #112]	; (8003288 <xTaskResumeAll+0x120>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1cb      	bne.n	80031b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003222:	f000 fb61 	bl	80038e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003226:	4b1d      	ldr	r3, [pc, #116]	; (800329c <xTaskResumeAll+0x134>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d010      	beq.n	8003254 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003232:	f000 f847 	bl	80032c4 <xTaskIncrementTick>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d002      	beq.n	8003242 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800323c:	4b16      	ldr	r3, [pc, #88]	; (8003298 <xTaskResumeAll+0x130>)
 800323e:	2201      	movs	r2, #1
 8003240:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	3b01      	subs	r3, #1
 8003246:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f1      	bne.n	8003232 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800324e:	4b13      	ldr	r3, [pc, #76]	; (800329c <xTaskResumeAll+0x134>)
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003254:	4b10      	ldr	r3, [pc, #64]	; (8003298 <xTaskResumeAll+0x130>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d009      	beq.n	8003270 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800325c:	2301      	movs	r3, #1
 800325e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003260:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <xTaskResumeAll+0x138>)
 8003262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	f3bf 8f4f 	dsb	sy
 800326c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003270:	f001 f8e8 	bl	8004444 <vPortExitCritical>

	return xAlreadyYielded;
 8003274:	68bb      	ldr	r3, [r7, #8]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	20000d5c 	.word	0x20000d5c
 8003284:	20000d34 	.word	0x20000d34
 8003288:	20000cf4 	.word	0x20000cf4
 800328c:	20000d3c 	.word	0x20000d3c
 8003290:	20000864 	.word	0x20000864
 8003294:	20000860 	.word	0x20000860
 8003298:	20000d48 	.word	0x20000d48
 800329c:	20000d44 	.word	0x20000d44
 80032a0:	e000ed04 	.word	0xe000ed04

080032a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80032aa:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <xTaskGetTickCount+0x1c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80032b0:	687b      	ldr	r3, [r7, #4]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	20000d38 	.word	0x20000d38

080032c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80032ca:	2300      	movs	r3, #0
 80032cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032ce:	4b4f      	ldr	r3, [pc, #316]	; (800340c <xTaskIncrementTick+0x148>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f040 808f 	bne.w	80033f6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80032d8:	4b4d      	ldr	r3, [pc, #308]	; (8003410 <xTaskIncrementTick+0x14c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	3301      	adds	r3, #1
 80032de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80032e0:	4a4b      	ldr	r2, [pc, #300]	; (8003410 <xTaskIncrementTick+0x14c>)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d120      	bne.n	800332e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80032ec:	4b49      	ldr	r3, [pc, #292]	; (8003414 <xTaskIncrementTick+0x150>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <xTaskIncrementTick+0x48>
	__asm volatile
 80032f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fa:	f383 8811 	msr	BASEPRI, r3
 80032fe:	f3bf 8f6f 	isb	sy
 8003302:	f3bf 8f4f 	dsb	sy
 8003306:	603b      	str	r3, [r7, #0]
}
 8003308:	bf00      	nop
 800330a:	e7fe      	b.n	800330a <xTaskIncrementTick+0x46>
 800330c:	4b41      	ldr	r3, [pc, #260]	; (8003414 <xTaskIncrementTick+0x150>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	4b41      	ldr	r3, [pc, #260]	; (8003418 <xTaskIncrementTick+0x154>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a3f      	ldr	r2, [pc, #252]	; (8003414 <xTaskIncrementTick+0x150>)
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	4a3f      	ldr	r2, [pc, #252]	; (8003418 <xTaskIncrementTick+0x154>)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6013      	str	r3, [r2, #0]
 8003320:	4b3e      	ldr	r3, [pc, #248]	; (800341c <xTaskIncrementTick+0x158>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	3301      	adds	r3, #1
 8003326:	4a3d      	ldr	r2, [pc, #244]	; (800341c <xTaskIncrementTick+0x158>)
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	f000 fadd 	bl	80038e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800332e:	4b3c      	ldr	r3, [pc, #240]	; (8003420 <xTaskIncrementTick+0x15c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	429a      	cmp	r2, r3
 8003336:	d349      	bcc.n	80033cc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003338:	4b36      	ldr	r3, [pc, #216]	; (8003414 <xTaskIncrementTick+0x150>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d104      	bne.n	800334c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003342:	4b37      	ldr	r3, [pc, #220]	; (8003420 <xTaskIncrementTick+0x15c>)
 8003344:	f04f 32ff 	mov.w	r2, #4294967295
 8003348:	601a      	str	r2, [r3, #0]
					break;
 800334a:	e03f      	b.n	80033cc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800334c:	4b31      	ldr	r3, [pc, #196]	; (8003414 <xTaskIncrementTick+0x150>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	429a      	cmp	r2, r3
 8003362:	d203      	bcs.n	800336c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003364:	4a2e      	ldr	r2, [pc, #184]	; (8003420 <xTaskIncrementTick+0x15c>)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800336a:	e02f      	b.n	80033cc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	3304      	adds	r3, #4
 8003370:	4618      	mov	r0, r3
 8003372:	f7fe ff79 	bl	8002268 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337a:	2b00      	cmp	r3, #0
 800337c:	d004      	beq.n	8003388 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	3318      	adds	r3, #24
 8003382:	4618      	mov	r0, r3
 8003384:	f7fe ff70 	bl	8002268 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800338c:	4b25      	ldr	r3, [pc, #148]	; (8003424 <xTaskIncrementTick+0x160>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d903      	bls.n	800339c <xTaskIncrementTick+0xd8>
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	4a22      	ldr	r2, [pc, #136]	; (8003424 <xTaskIncrementTick+0x160>)
 800339a:	6013      	str	r3, [r2, #0]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4a1f      	ldr	r2, [pc, #124]	; (8003428 <xTaskIncrementTick+0x164>)
 80033aa:	441a      	add	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	3304      	adds	r3, #4
 80033b0:	4619      	mov	r1, r3
 80033b2:	4610      	mov	r0, r2
 80033b4:	f7fe fefb 	bl	80021ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033bc:	4b1b      	ldr	r3, [pc, #108]	; (800342c <xTaskIncrementTick+0x168>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d3b8      	bcc.n	8003338 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80033c6:	2301      	movs	r3, #1
 80033c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033ca:	e7b5      	b.n	8003338 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80033cc:	4b17      	ldr	r3, [pc, #92]	; (800342c <xTaskIncrementTick+0x168>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d2:	4915      	ldr	r1, [pc, #84]	; (8003428 <xTaskIncrementTick+0x164>)
 80033d4:	4613      	mov	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d901      	bls.n	80033e8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80033e4:	2301      	movs	r3, #1
 80033e6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80033e8:	4b11      	ldr	r3, [pc, #68]	; (8003430 <xTaskIncrementTick+0x16c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d007      	beq.n	8003400 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80033f0:	2301      	movs	r3, #1
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	e004      	b.n	8003400 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80033f6:	4b0f      	ldr	r3, [pc, #60]	; (8003434 <xTaskIncrementTick+0x170>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	3301      	adds	r3, #1
 80033fc:	4a0d      	ldr	r2, [pc, #52]	; (8003434 <xTaskIncrementTick+0x170>)
 80033fe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003400:	697b      	ldr	r3, [r7, #20]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20000d5c 	.word	0x20000d5c
 8003410:	20000d38 	.word	0x20000d38
 8003414:	20000cec 	.word	0x20000cec
 8003418:	20000cf0 	.word	0x20000cf0
 800341c:	20000d4c 	.word	0x20000d4c
 8003420:	20000d54 	.word	0x20000d54
 8003424:	20000d3c 	.word	0x20000d3c
 8003428:	20000864 	.word	0x20000864
 800342c:	20000860 	.word	0x20000860
 8003430:	20000d48 	.word	0x20000d48
 8003434:	20000d44 	.word	0x20000d44

08003438 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800343e:	4b2a      	ldr	r3, [pc, #168]	; (80034e8 <vTaskSwitchContext+0xb0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003446:	4b29      	ldr	r3, [pc, #164]	; (80034ec <vTaskSwitchContext+0xb4>)
 8003448:	2201      	movs	r2, #1
 800344a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800344c:	e046      	b.n	80034dc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800344e:	4b27      	ldr	r3, [pc, #156]	; (80034ec <vTaskSwitchContext+0xb4>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003454:	4b26      	ldr	r3, [pc, #152]	; (80034f0 <vTaskSwitchContext+0xb8>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	e010      	b.n	800347e <vTaskSwitchContext+0x46>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10a      	bne.n	8003478 <vTaskSwitchContext+0x40>
	__asm volatile
 8003462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003466:	f383 8811 	msr	BASEPRI, r3
 800346a:	f3bf 8f6f 	isb	sy
 800346e:	f3bf 8f4f 	dsb	sy
 8003472:	607b      	str	r3, [r7, #4]
}
 8003474:	bf00      	nop
 8003476:	e7fe      	b.n	8003476 <vTaskSwitchContext+0x3e>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	3b01      	subs	r3, #1
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	491d      	ldr	r1, [pc, #116]	; (80034f4 <vTaskSwitchContext+0xbc>)
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	440b      	add	r3, r1
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0e4      	beq.n	800345c <vTaskSwitchContext+0x24>
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4a15      	ldr	r2, [pc, #84]	; (80034f4 <vTaskSwitchContext+0xbc>)
 800349e:	4413      	add	r3, r2
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	605a      	str	r2, [r3, #4]
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	3308      	adds	r3, #8
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d104      	bne.n	80034c2 <vTaskSwitchContext+0x8a>
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	605a      	str	r2, [r3, #4]
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	4a0b      	ldr	r2, [pc, #44]	; (80034f8 <vTaskSwitchContext+0xc0>)
 80034ca:	6013      	str	r3, [r2, #0]
 80034cc:	4a08      	ldr	r2, [pc, #32]	; (80034f0 <vTaskSwitchContext+0xb8>)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80034d2:	4b09      	ldr	r3, [pc, #36]	; (80034f8 <vTaskSwitchContext+0xc0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3354      	adds	r3, #84	; 0x54
 80034d8:	4a08      	ldr	r2, [pc, #32]	; (80034fc <vTaskSwitchContext+0xc4>)
 80034da:	6013      	str	r3, [r2, #0]
}
 80034dc:	bf00      	nop
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	20000d5c 	.word	0x20000d5c
 80034ec:	20000d48 	.word	0x20000d48
 80034f0:	20000d3c 	.word	0x20000d3c
 80034f4:	20000864 	.word	0x20000864
 80034f8:	20000860 	.word	0x20000860
 80034fc:	2000005c 	.word	0x2000005c

08003500 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10a      	bne.n	8003526 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003514:	f383 8811 	msr	BASEPRI, r3
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	60fb      	str	r3, [r7, #12]
}
 8003522:	bf00      	nop
 8003524:	e7fe      	b.n	8003524 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003526:	4b07      	ldr	r3, [pc, #28]	; (8003544 <vTaskPlaceOnEventList+0x44>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	3318      	adds	r3, #24
 800352c:	4619      	mov	r1, r3
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7fe fe61 	bl	80021f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003534:	2101      	movs	r1, #1
 8003536:	6838      	ldr	r0, [r7, #0]
 8003538:	f000 fa82 	bl	8003a40 <prvAddCurrentTaskToDelayedList>
}
 800353c:	bf00      	nop
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	20000860 	.word	0x20000860

08003548 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10a      	bne.n	8003570 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800355a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355e:	f383 8811 	msr	BASEPRI, r3
 8003562:	f3bf 8f6f 	isb	sy
 8003566:	f3bf 8f4f 	dsb	sy
 800356a:	617b      	str	r3, [r7, #20]
}
 800356c:	bf00      	nop
 800356e:	e7fe      	b.n	800356e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003570:	4b0a      	ldr	r3, [pc, #40]	; (800359c <vTaskPlaceOnEventListRestricted+0x54>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	3318      	adds	r3, #24
 8003576:	4619      	mov	r1, r3
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f7fe fe18 	bl	80021ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003584:	f04f 33ff 	mov.w	r3, #4294967295
 8003588:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	68b8      	ldr	r0, [r7, #8]
 800358e:	f000 fa57 	bl	8003a40 <prvAddCurrentTaskToDelayedList>
	}
 8003592:	bf00      	nop
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20000860 	.word	0x20000860

080035a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10a      	bne.n	80035cc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80035b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ba:	f383 8811 	msr	BASEPRI, r3
 80035be:	f3bf 8f6f 	isb	sy
 80035c2:	f3bf 8f4f 	dsb	sy
 80035c6:	60fb      	str	r3, [r7, #12]
}
 80035c8:	bf00      	nop
 80035ca:	e7fe      	b.n	80035ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	3318      	adds	r3, #24
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fe fe49 	bl	8002268 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035d6:	4b1e      	ldr	r3, [pc, #120]	; (8003650 <xTaskRemoveFromEventList+0xb0>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d11d      	bne.n	800361a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	3304      	adds	r3, #4
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fe fe40 	bl	8002268 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ec:	4b19      	ldr	r3, [pc, #100]	; (8003654 <xTaskRemoveFromEventList+0xb4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d903      	bls.n	80035fc <xTaskRemoveFromEventList+0x5c>
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	4a16      	ldr	r2, [pc, #88]	; (8003654 <xTaskRemoveFromEventList+0xb4>)
 80035fa:	6013      	str	r3, [r2, #0]
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4a13      	ldr	r2, [pc, #76]	; (8003658 <xTaskRemoveFromEventList+0xb8>)
 800360a:	441a      	add	r2, r3
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	3304      	adds	r3, #4
 8003610:	4619      	mov	r1, r3
 8003612:	4610      	mov	r0, r2
 8003614:	f7fe fdcb 	bl	80021ae <vListInsertEnd>
 8003618:	e005      	b.n	8003626 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	3318      	adds	r3, #24
 800361e:	4619      	mov	r1, r3
 8003620:	480e      	ldr	r0, [pc, #56]	; (800365c <xTaskRemoveFromEventList+0xbc>)
 8003622:	f7fe fdc4 	bl	80021ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800362a:	4b0d      	ldr	r3, [pc, #52]	; (8003660 <xTaskRemoveFromEventList+0xc0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	429a      	cmp	r2, r3
 8003632:	d905      	bls.n	8003640 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003634:	2301      	movs	r3, #1
 8003636:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003638:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <xTaskRemoveFromEventList+0xc4>)
 800363a:	2201      	movs	r2, #1
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	e001      	b.n	8003644 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003640:	2300      	movs	r3, #0
 8003642:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003644:	697b      	ldr	r3, [r7, #20]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	20000d5c 	.word	0x20000d5c
 8003654:	20000d3c 	.word	0x20000d3c
 8003658:	20000864 	.word	0x20000864
 800365c:	20000cf4 	.word	0x20000cf4
 8003660:	20000860 	.word	0x20000860
 8003664:	20000d48 	.word	0x20000d48

08003668 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003670:	4b06      	ldr	r3, [pc, #24]	; (800368c <vTaskInternalSetTimeOutState+0x24>)
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003678:	4b05      	ldr	r3, [pc, #20]	; (8003690 <vTaskInternalSetTimeOutState+0x28>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	605a      	str	r2, [r3, #4]
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	20000d4c 	.word	0x20000d4c
 8003690:	20000d38 	.word	0x20000d38

08003694 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b088      	sub	sp, #32
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10a      	bne.n	80036ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80036a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a8:	f383 8811 	msr	BASEPRI, r3
 80036ac:	f3bf 8f6f 	isb	sy
 80036b0:	f3bf 8f4f 	dsb	sy
 80036b4:	613b      	str	r3, [r7, #16]
}
 80036b6:	bf00      	nop
 80036b8:	e7fe      	b.n	80036b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10a      	bne.n	80036d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80036c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c4:	f383 8811 	msr	BASEPRI, r3
 80036c8:	f3bf 8f6f 	isb	sy
 80036cc:	f3bf 8f4f 	dsb	sy
 80036d0:	60fb      	str	r3, [r7, #12]
}
 80036d2:	bf00      	nop
 80036d4:	e7fe      	b.n	80036d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80036d6:	f000 fe85 	bl	80043e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80036da:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <xTaskCheckForTimeOut+0xbc>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f2:	d102      	bne.n	80036fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80036f4:	2300      	movs	r3, #0
 80036f6:	61fb      	str	r3, [r7, #28]
 80036f8:	e023      	b.n	8003742 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	4b15      	ldr	r3, [pc, #84]	; (8003754 <xTaskCheckForTimeOut+0xc0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d007      	beq.n	8003716 <xTaskCheckForTimeOut+0x82>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	429a      	cmp	r2, r3
 800370e:	d302      	bcc.n	8003716 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003710:	2301      	movs	r3, #1
 8003712:	61fb      	str	r3, [r7, #28]
 8003714:	e015      	b.n	8003742 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	429a      	cmp	r2, r3
 800371e:	d20b      	bcs.n	8003738 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	1ad2      	subs	r2, r2, r3
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff ff9b 	bl	8003668 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003732:	2300      	movs	r3, #0
 8003734:	61fb      	str	r3, [r7, #28]
 8003736:	e004      	b.n	8003742 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800373e:	2301      	movs	r3, #1
 8003740:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003742:	f000 fe7f 	bl	8004444 <vPortExitCritical>

	return xReturn;
 8003746:	69fb      	ldr	r3, [r7, #28]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3720      	adds	r7, #32
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	20000d38 	.word	0x20000d38
 8003754:	20000d4c 	.word	0x20000d4c

08003758 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800375c:	4b03      	ldr	r3, [pc, #12]	; (800376c <vTaskMissedYield+0x14>)
 800375e:	2201      	movs	r2, #1
 8003760:	601a      	str	r2, [r3, #0]
}
 8003762:	bf00      	nop
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	20000d48 	.word	0x20000d48

08003770 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003778:	f000 f854 	bl	8003824 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800377c:	4b07      	ldr	r3, [pc, #28]	; (800379c <prvIdleTask+0x2c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d907      	bls.n	8003794 <prvIdleTask+0x24>
			{
				taskYIELD();
 8003784:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <prvIdleTask+0x30>)
 8003786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8003794:	f7fc feaa 	bl	80004ec <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8003798:	e7ee      	b.n	8003778 <prvIdleTask+0x8>
 800379a:	bf00      	nop
 800379c:	20000864 	.word	0x20000864
 80037a0:	e000ed04 	.word	0xe000ed04

080037a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037aa:	2300      	movs	r3, #0
 80037ac:	607b      	str	r3, [r7, #4]
 80037ae:	e00c      	b.n	80037ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	4613      	mov	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4a12      	ldr	r2, [pc, #72]	; (8003804 <prvInitialiseTaskLists+0x60>)
 80037bc:	4413      	add	r3, r2
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fe fcc8 	bl	8002154 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3301      	adds	r3, #1
 80037c8:	607b      	str	r3, [r7, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b37      	cmp	r3, #55	; 0x37
 80037ce:	d9ef      	bls.n	80037b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80037d0:	480d      	ldr	r0, [pc, #52]	; (8003808 <prvInitialiseTaskLists+0x64>)
 80037d2:	f7fe fcbf 	bl	8002154 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80037d6:	480d      	ldr	r0, [pc, #52]	; (800380c <prvInitialiseTaskLists+0x68>)
 80037d8:	f7fe fcbc 	bl	8002154 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80037dc:	480c      	ldr	r0, [pc, #48]	; (8003810 <prvInitialiseTaskLists+0x6c>)
 80037de:	f7fe fcb9 	bl	8002154 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80037e2:	480c      	ldr	r0, [pc, #48]	; (8003814 <prvInitialiseTaskLists+0x70>)
 80037e4:	f7fe fcb6 	bl	8002154 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80037e8:	480b      	ldr	r0, [pc, #44]	; (8003818 <prvInitialiseTaskLists+0x74>)
 80037ea:	f7fe fcb3 	bl	8002154 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80037ee:	4b0b      	ldr	r3, [pc, #44]	; (800381c <prvInitialiseTaskLists+0x78>)
 80037f0:	4a05      	ldr	r2, [pc, #20]	; (8003808 <prvInitialiseTaskLists+0x64>)
 80037f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80037f4:	4b0a      	ldr	r3, [pc, #40]	; (8003820 <prvInitialiseTaskLists+0x7c>)
 80037f6:	4a05      	ldr	r2, [pc, #20]	; (800380c <prvInitialiseTaskLists+0x68>)
 80037f8:	601a      	str	r2, [r3, #0]
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	20000864 	.word	0x20000864
 8003808:	20000cc4 	.word	0x20000cc4
 800380c:	20000cd8 	.word	0x20000cd8
 8003810:	20000cf4 	.word	0x20000cf4
 8003814:	20000d08 	.word	0x20000d08
 8003818:	20000d20 	.word	0x20000d20
 800381c:	20000cec 	.word	0x20000cec
 8003820:	20000cf0 	.word	0x20000cf0

08003824 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800382a:	e019      	b.n	8003860 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800382c:	f000 fdda 	bl	80043e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003830:	4b10      	ldr	r3, [pc, #64]	; (8003874 <prvCheckTasksWaitingTermination+0x50>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3304      	adds	r3, #4
 800383c:	4618      	mov	r0, r3
 800383e:	f7fe fd13 	bl	8002268 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003842:	4b0d      	ldr	r3, [pc, #52]	; (8003878 <prvCheckTasksWaitingTermination+0x54>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	3b01      	subs	r3, #1
 8003848:	4a0b      	ldr	r2, [pc, #44]	; (8003878 <prvCheckTasksWaitingTermination+0x54>)
 800384a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800384c:	4b0b      	ldr	r3, [pc, #44]	; (800387c <prvCheckTasksWaitingTermination+0x58>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3b01      	subs	r3, #1
 8003852:	4a0a      	ldr	r2, [pc, #40]	; (800387c <prvCheckTasksWaitingTermination+0x58>)
 8003854:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003856:	f000 fdf5 	bl	8004444 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f810 	bl	8003880 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003860:	4b06      	ldr	r3, [pc, #24]	; (800387c <prvCheckTasksWaitingTermination+0x58>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1e1      	bne.n	800382c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003868:	bf00      	nop
 800386a:	bf00      	nop
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	20000d08 	.word	0x20000d08
 8003878:	20000d34 	.word	0x20000d34
 800387c:	20000d1c 	.word	0x20000d1c

08003880 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3354      	adds	r3, #84	; 0x54
 800388c:	4618      	mov	r0, r3
 800388e:	f001 f8bd 	bl	8004a0c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003898:	2b00      	cmp	r3, #0
 800389a:	d108      	bne.n	80038ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 ff8d 	bl	80047c0 <vPortFree>
				vPortFree( pxTCB );
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 ff8a 	bl	80047c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80038ac:	e018      	b.n	80038e0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d103      	bne.n	80038c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 ff81 	bl	80047c0 <vPortFree>
	}
 80038be:	e00f      	b.n	80038e0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d00a      	beq.n	80038e0 <prvDeleteTCB+0x60>
	__asm volatile
 80038ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ce:	f383 8811 	msr	BASEPRI, r3
 80038d2:	f3bf 8f6f 	isb	sy
 80038d6:	f3bf 8f4f 	dsb	sy
 80038da:	60fb      	str	r3, [r7, #12]
}
 80038dc:	bf00      	nop
 80038de:	e7fe      	b.n	80038de <prvDeleteTCB+0x5e>
	}
 80038e0:	bf00      	nop
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038ee:	4b0c      	ldr	r3, [pc, #48]	; (8003920 <prvResetNextTaskUnblockTime+0x38>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d104      	bne.n	8003902 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80038f8:	4b0a      	ldr	r3, [pc, #40]	; (8003924 <prvResetNextTaskUnblockTime+0x3c>)
 80038fa:	f04f 32ff 	mov.w	r2, #4294967295
 80038fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003900:	e008      	b.n	8003914 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003902:	4b07      	ldr	r3, [pc, #28]	; (8003920 <prvResetNextTaskUnblockTime+0x38>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	4a04      	ldr	r2, [pc, #16]	; (8003924 <prvResetNextTaskUnblockTime+0x3c>)
 8003912:	6013      	str	r3, [r2, #0]
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	20000cec 	.word	0x20000cec
 8003924:	20000d54 	.word	0x20000d54

08003928 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800392e:	4b0b      	ldr	r3, [pc, #44]	; (800395c <xTaskGetSchedulerState+0x34>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d102      	bne.n	800393c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003936:	2301      	movs	r3, #1
 8003938:	607b      	str	r3, [r7, #4]
 800393a:	e008      	b.n	800394e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800393c:	4b08      	ldr	r3, [pc, #32]	; (8003960 <xTaskGetSchedulerState+0x38>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d102      	bne.n	800394a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003944:	2302      	movs	r3, #2
 8003946:	607b      	str	r3, [r7, #4]
 8003948:	e001      	b.n	800394e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800394a:	2300      	movs	r3, #0
 800394c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800394e:	687b      	ldr	r3, [r7, #4]
	}
 8003950:	4618      	mov	r0, r3
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	20000d40 	.word	0x20000d40
 8003960:	20000d5c 	.word	0x20000d5c

08003964 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003970:	2300      	movs	r3, #0
 8003972:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d056      	beq.n	8003a28 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800397a:	4b2e      	ldr	r3, [pc, #184]	; (8003a34 <xTaskPriorityDisinherit+0xd0>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	429a      	cmp	r2, r3
 8003982:	d00a      	beq.n	800399a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003988:	f383 8811 	msr	BASEPRI, r3
 800398c:	f3bf 8f6f 	isb	sy
 8003990:	f3bf 8f4f 	dsb	sy
 8003994:	60fb      	str	r3, [r7, #12]
}
 8003996:	bf00      	nop
 8003998:	e7fe      	b.n	8003998 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10a      	bne.n	80039b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80039a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a6:	f383 8811 	msr	BASEPRI, r3
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	60bb      	str	r3, [r7, #8]
}
 80039b4:	bf00      	nop
 80039b6:	e7fe      	b.n	80039b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039bc:	1e5a      	subs	r2, r3, #1
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d02c      	beq.n	8003a28 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d128      	bne.n	8003a28 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	3304      	adds	r3, #4
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fe fc44 	bl	8002268 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f8:	4b0f      	ldr	r3, [pc, #60]	; (8003a38 <xTaskPriorityDisinherit+0xd4>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d903      	bls.n	8003a08 <xTaskPriorityDisinherit+0xa4>
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a04:	4a0c      	ldr	r2, [pc, #48]	; (8003a38 <xTaskPriorityDisinherit+0xd4>)
 8003a06:	6013      	str	r3, [r2, #0]
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4a09      	ldr	r2, [pc, #36]	; (8003a3c <xTaskPriorityDisinherit+0xd8>)
 8003a16:	441a      	add	r2, r3
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4610      	mov	r0, r2
 8003a20:	f7fe fbc5 	bl	80021ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003a24:	2301      	movs	r3, #1
 8003a26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003a28:	697b      	ldr	r3, [r7, #20]
	}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3718      	adds	r7, #24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	20000860 	.word	0x20000860
 8003a38:	20000d3c 	.word	0x20000d3c
 8003a3c:	20000864 	.word	0x20000864

08003a40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003a4a:	4b21      	ldr	r3, [pc, #132]	; (8003ad0 <prvAddCurrentTaskToDelayedList+0x90>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a50:	4b20      	ldr	r3, [pc, #128]	; (8003ad4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3304      	adds	r3, #4
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fe fc06 	bl	8002268 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a62:	d10a      	bne.n	8003a7a <prvAddCurrentTaskToDelayedList+0x3a>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d007      	beq.n	8003a7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a6a:	4b1a      	ldr	r3, [pc, #104]	; (8003ad4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	3304      	adds	r3, #4
 8003a70:	4619      	mov	r1, r3
 8003a72:	4819      	ldr	r0, [pc, #100]	; (8003ad8 <prvAddCurrentTaskToDelayedList+0x98>)
 8003a74:	f7fe fb9b 	bl	80021ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003a78:	e026      	b.n	8003ac8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4413      	add	r3, r2
 8003a80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a82:	4b14      	ldr	r3, [pc, #80]	; (8003ad4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d209      	bcs.n	8003aa6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a92:	4b12      	ldr	r3, [pc, #72]	; (8003adc <prvAddCurrentTaskToDelayedList+0x9c>)
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	4b0f      	ldr	r3, [pc, #60]	; (8003ad4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	4610      	mov	r0, r2
 8003aa0:	f7fe fba9 	bl	80021f6 <vListInsert>
}
 8003aa4:	e010      	b.n	8003ac8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003aa6:	4b0e      	ldr	r3, [pc, #56]	; (8003ae0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	4b0a      	ldr	r3, [pc, #40]	; (8003ad4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3304      	adds	r3, #4
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	f7fe fb9f 	bl	80021f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003ab8:	4b0a      	ldr	r3, [pc, #40]	; (8003ae4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d202      	bcs.n	8003ac8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003ac2:	4a08      	ldr	r2, [pc, #32]	; (8003ae4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	6013      	str	r3, [r2, #0]
}
 8003ac8:	bf00      	nop
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	20000d38 	.word	0x20000d38
 8003ad4:	20000860 	.word	0x20000860
 8003ad8:	20000d20 	.word	0x20000d20
 8003adc:	20000cf0 	.word	0x20000cf0
 8003ae0:	20000cec 	.word	0x20000cec
 8003ae4:	20000d54 	.word	0x20000d54

08003ae8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08a      	sub	sp, #40	; 0x28
 8003aec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003af2:	f000 fb07 	bl	8004104 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003af6:	4b1c      	ldr	r3, [pc, #112]	; (8003b68 <xTimerCreateTimerTask+0x80>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d021      	beq.n	8003b42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003b06:	1d3a      	adds	r2, r7, #4
 8003b08:	f107 0108 	add.w	r1, r7, #8
 8003b0c:	f107 030c 	add.w	r3, r7, #12
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fe fb05 	bl	8002120 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	9202      	str	r2, [sp, #8]
 8003b1e:	9301      	str	r3, [sp, #4]
 8003b20:	2302      	movs	r3, #2
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	2300      	movs	r3, #0
 8003b26:	460a      	mov	r2, r1
 8003b28:	4910      	ldr	r1, [pc, #64]	; (8003b6c <xTimerCreateTimerTask+0x84>)
 8003b2a:	4811      	ldr	r0, [pc, #68]	; (8003b70 <xTimerCreateTimerTask+0x88>)
 8003b2c:	f7ff f8b2 	bl	8002c94 <xTaskCreateStatic>
 8003b30:	4603      	mov	r3, r0
 8003b32:	4a10      	ldr	r2, [pc, #64]	; (8003b74 <xTimerCreateTimerTask+0x8c>)
 8003b34:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003b36:	4b0f      	ldr	r3, [pc, #60]	; (8003b74 <xTimerCreateTimerTask+0x8c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10a      	bne.n	8003b5e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	613b      	str	r3, [r7, #16]
}
 8003b5a:	bf00      	nop
 8003b5c:	e7fe      	b.n	8003b5c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003b5e:	697b      	ldr	r3, [r7, #20]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	20000d90 	.word	0x20000d90
 8003b6c:	08004bfc 	.word	0x08004bfc
 8003b70:	08003cad 	.word	0x08003cad
 8003b74:	20000d94 	.word	0x20000d94

08003b78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08a      	sub	sp, #40	; 0x28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10a      	bne.n	8003ba6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b94:	f383 8811 	msr	BASEPRI, r3
 8003b98:	f3bf 8f6f 	isb	sy
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	623b      	str	r3, [r7, #32]
}
 8003ba2:	bf00      	nop
 8003ba4:	e7fe      	b.n	8003ba4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003ba6:	4b1a      	ldr	r3, [pc, #104]	; (8003c10 <xTimerGenericCommand+0x98>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d02a      	beq.n	8003c04 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2b05      	cmp	r3, #5
 8003bbe:	dc18      	bgt.n	8003bf2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003bc0:	f7ff feb2 	bl	8003928 <xTaskGetSchedulerState>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d109      	bne.n	8003bde <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003bca:	4b11      	ldr	r3, [pc, #68]	; (8003c10 <xTimerGenericCommand+0x98>)
 8003bcc:	6818      	ldr	r0, [r3, #0]
 8003bce:	f107 0110 	add.w	r1, r7, #16
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bd6:	f7fe fc75 	bl	80024c4 <xQueueGenericSend>
 8003bda:	6278      	str	r0, [r7, #36]	; 0x24
 8003bdc:	e012      	b.n	8003c04 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003bde:	4b0c      	ldr	r3, [pc, #48]	; (8003c10 <xTimerGenericCommand+0x98>)
 8003be0:	6818      	ldr	r0, [r3, #0]
 8003be2:	f107 0110 	add.w	r1, r7, #16
 8003be6:	2300      	movs	r3, #0
 8003be8:	2200      	movs	r2, #0
 8003bea:	f7fe fc6b 	bl	80024c4 <xQueueGenericSend>
 8003bee:	6278      	str	r0, [r7, #36]	; 0x24
 8003bf0:	e008      	b.n	8003c04 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003bf2:	4b07      	ldr	r3, [pc, #28]	; (8003c10 <xTimerGenericCommand+0x98>)
 8003bf4:	6818      	ldr	r0, [r3, #0]
 8003bf6:	f107 0110 	add.w	r1, r7, #16
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	f7fe fd5f 	bl	80026c0 <xQueueGenericSendFromISR>
 8003c02:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3728      	adds	r7, #40	; 0x28
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	20000d90 	.word	0x20000d90

08003c14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b088      	sub	sp, #32
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c1e:	4b22      	ldr	r3, [pc, #136]	; (8003ca8 <prvProcessExpiredTimer+0x94>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7fe fb1b 	bl	8002268 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d022      	beq.n	8003c86 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	699a      	ldr	r2, [r3, #24]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	18d1      	adds	r1, r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	6978      	ldr	r0, [r7, #20]
 8003c4e:	f000 f8d1 	bl	8003df4 <prvInsertTimerInActiveList>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d01f      	beq.n	8003c98 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c58:	2300      	movs	r3, #0
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	2100      	movs	r1, #0
 8003c62:	6978      	ldr	r0, [r7, #20]
 8003c64:	f7ff ff88 	bl	8003b78 <xTimerGenericCommand>
 8003c68:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d113      	bne.n	8003c98 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c74:	f383 8811 	msr	BASEPRI, r3
 8003c78:	f3bf 8f6f 	isb	sy
 8003c7c:	f3bf 8f4f 	dsb	sy
 8003c80:	60fb      	str	r3, [r7, #12]
}
 8003c82:	bf00      	nop
 8003c84:	e7fe      	b.n	8003c84 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c8c:	f023 0301 	bic.w	r3, r3, #1
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	6978      	ldr	r0, [r7, #20]
 8003c9e:	4798      	blx	r3
}
 8003ca0:	bf00      	nop
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	20000d88 	.word	0x20000d88

08003cac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003cb4:	f107 0308 	add.w	r3, r7, #8
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 f857 	bl	8003d6c <prvGetNextExpireTime>
 8003cbe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 f803 	bl	8003cd0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003cca:	f000 f8d5 	bl	8003e78 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003cce:	e7f1      	b.n	8003cb4 <prvTimerTask+0x8>

08003cd0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003cda:	f7ff fa37 	bl	800314c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003cde:	f107 0308 	add.w	r3, r7, #8
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 f866 	bl	8003db4 <prvSampleTimeNow>
 8003ce8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d130      	bne.n	8003d52 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10a      	bne.n	8003d0c <prvProcessTimerOrBlockTask+0x3c>
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d806      	bhi.n	8003d0c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003cfe:	f7ff fa33 	bl	8003168 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d02:	68f9      	ldr	r1, [r7, #12]
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7ff ff85 	bl	8003c14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003d0a:	e024      	b.n	8003d56 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d008      	beq.n	8003d24 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d12:	4b13      	ldr	r3, [pc, #76]	; (8003d60 <prvProcessTimerOrBlockTask+0x90>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <prvProcessTimerOrBlockTask+0x50>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e000      	b.n	8003d22 <prvProcessTimerOrBlockTask+0x52>
 8003d20:	2300      	movs	r3, #0
 8003d22:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d24:	4b0f      	ldr	r3, [pc, #60]	; (8003d64 <prvProcessTimerOrBlockTask+0x94>)
 8003d26:	6818      	ldr	r0, [r3, #0]
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	4619      	mov	r1, r3
 8003d32:	f7fe ff7b 	bl	8002c2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003d36:	f7ff fa17 	bl	8003168 <xTaskResumeAll>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10a      	bne.n	8003d56 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003d40:	4b09      	ldr	r3, [pc, #36]	; (8003d68 <prvProcessTimerOrBlockTask+0x98>)
 8003d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	f3bf 8f6f 	isb	sy
}
 8003d50:	e001      	b.n	8003d56 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003d52:	f7ff fa09 	bl	8003168 <xTaskResumeAll>
}
 8003d56:	bf00      	nop
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	20000d8c 	.word	0x20000d8c
 8003d64:	20000d90 	.word	0x20000d90
 8003d68:	e000ed04 	.word	0xe000ed04

08003d6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003d74:	4b0e      	ldr	r3, [pc, #56]	; (8003db0 <prvGetNextExpireTime+0x44>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <prvGetNextExpireTime+0x16>
 8003d7e:	2201      	movs	r2, #1
 8003d80:	e000      	b.n	8003d84 <prvGetNextExpireTime+0x18>
 8003d82:	2200      	movs	r2, #0
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d105      	bne.n	8003d9c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d90:	4b07      	ldr	r3, [pc, #28]	; (8003db0 <prvGetNextExpireTime+0x44>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	e001      	b.n	8003da0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003da0:	68fb      	ldr	r3, [r7, #12]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	20000d88 	.word	0x20000d88

08003db4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003dbc:	f7ff fa72 	bl	80032a4 <xTaskGetTickCount>
 8003dc0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003dc2:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <prvSampleTimeNow+0x3c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d205      	bcs.n	8003dd8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003dcc:	f000 f936 	bl	800403c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	e002      	b.n	8003dde <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003dde:	4a04      	ldr	r2, [pc, #16]	; (8003df0 <prvSampleTimeNow+0x3c>)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003de4:	68fb      	ldr	r3, [r7, #12]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	20000d98 	.word	0x20000d98

08003df4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
 8003e00:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003e02:	2300      	movs	r3, #0
 8003e04:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d812      	bhi.n	8003e40 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	1ad2      	subs	r2, r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d302      	bcc.n	8003e2e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	e01b      	b.n	8003e66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003e2e:	4b10      	ldr	r3, [pc, #64]	; (8003e70 <prvInsertTimerInActiveList+0x7c>)
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	3304      	adds	r3, #4
 8003e36:	4619      	mov	r1, r3
 8003e38:	4610      	mov	r0, r2
 8003e3a:	f7fe f9dc 	bl	80021f6 <vListInsert>
 8003e3e:	e012      	b.n	8003e66 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d206      	bcs.n	8003e56 <prvInsertTimerInActiveList+0x62>
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d302      	bcc.n	8003e56 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003e50:	2301      	movs	r3, #1
 8003e52:	617b      	str	r3, [r7, #20]
 8003e54:	e007      	b.n	8003e66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e56:	4b07      	ldr	r3, [pc, #28]	; (8003e74 <prvInsertTimerInActiveList+0x80>)
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4610      	mov	r0, r2
 8003e62:	f7fe f9c8 	bl	80021f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003e66:	697b      	ldr	r3, [r7, #20]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	20000d8c 	.word	0x20000d8c
 8003e74:	20000d88 	.word	0x20000d88

08003e78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08e      	sub	sp, #56	; 0x38
 8003e7c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e7e:	e0ca      	b.n	8004016 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	da18      	bge.n	8003eb8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003e86:	1d3b      	adds	r3, r7, #4
 8003e88:	3304      	adds	r3, #4
 8003e8a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10a      	bne.n	8003ea8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e96:	f383 8811 	msr	BASEPRI, r3
 8003e9a:	f3bf 8f6f 	isb	sy
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	61fb      	str	r3, [r7, #28]
}
 8003ea4:	bf00      	nop
 8003ea6:	e7fe      	b.n	8003ea6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eae:	6850      	ldr	r0, [r2, #4]
 8003eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eb2:	6892      	ldr	r2, [r2, #8]
 8003eb4:	4611      	mov	r1, r2
 8003eb6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f2c0 80ab 	blt.w	8004016 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d004      	beq.n	8003ed6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ece:	3304      	adds	r3, #4
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fe f9c9 	bl	8002268 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ed6:	463b      	mov	r3, r7
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff ff6b 	bl	8003db4 <prvSampleTimeNow>
 8003ede:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b09      	cmp	r3, #9
 8003ee4:	f200 8096 	bhi.w	8004014 <prvProcessReceivedCommands+0x19c>
 8003ee8:	a201      	add	r2, pc, #4	; (adr r2, 8003ef0 <prvProcessReceivedCommands+0x78>)
 8003eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eee:	bf00      	nop
 8003ef0:	08003f19 	.word	0x08003f19
 8003ef4:	08003f19 	.word	0x08003f19
 8003ef8:	08003f19 	.word	0x08003f19
 8003efc:	08003f8d 	.word	0x08003f8d
 8003f00:	08003fa1 	.word	0x08003fa1
 8003f04:	08003feb 	.word	0x08003feb
 8003f08:	08003f19 	.word	0x08003f19
 8003f0c:	08003f19 	.word	0x08003f19
 8003f10:	08003f8d 	.word	0x08003f8d
 8003f14:	08003fa1 	.word	0x08003fa1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f1e:	f043 0301 	orr.w	r3, r3, #1
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	18d1      	adds	r1, r2, r3
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f38:	f7ff ff5c 	bl	8003df4 <prvInsertTimerInActiveList>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d069      	beq.n	8004016 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f48:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d05e      	beq.n	8004016 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	441a      	add	r2, r3
 8003f60:	2300      	movs	r3, #0
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	2300      	movs	r3, #0
 8003f66:	2100      	movs	r1, #0
 8003f68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f6a:	f7ff fe05 	bl	8003b78 <xTimerGenericCommand>
 8003f6e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d14f      	bne.n	8004016 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7a:	f383 8811 	msr	BASEPRI, r3
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	f3bf 8f4f 	dsb	sy
 8003f86:	61bb      	str	r3, [r7, #24]
}
 8003f88:	bf00      	nop
 8003f8a:	e7fe      	b.n	8003f8a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f92:	f023 0301 	bic.w	r3, r3, #1
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003f9e:	e03a      	b.n	8004016 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fa6:	f043 0301 	orr.w	r3, r3, #1
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10a      	bne.n	8003fd6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc4:	f383 8811 	msr	BASEPRI, r3
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	617b      	str	r3, [r7, #20]
}
 8003fd2:	bf00      	nop
 8003fd4:	e7fe      	b.n	8003fd4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd8:	699a      	ldr	r2, [r3, #24]
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	18d1      	adds	r1, r2, r3
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fe4:	f7ff ff06 	bl	8003df4 <prvInsertTimerInActiveList>
					break;
 8003fe8:	e015      	b.n	8004016 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d103      	bne.n	8004000 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003ff8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ffa:	f000 fbe1 	bl	80047c0 <vPortFree>
 8003ffe:	e00a      	b.n	8004016 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004002:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004006:	f023 0301 	bic.w	r3, r3, #1
 800400a:	b2da      	uxtb	r2, r3
 800400c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004012:	e000      	b.n	8004016 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004014:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004016:	4b08      	ldr	r3, [pc, #32]	; (8004038 <prvProcessReceivedCommands+0x1c0>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	1d39      	adds	r1, r7, #4
 800401c:	2200      	movs	r2, #0
 800401e:	4618      	mov	r0, r3
 8004020:	f7fe fbea 	bl	80027f8 <xQueueReceive>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	f47f af2a 	bne.w	8003e80 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800402c:	bf00      	nop
 800402e:	bf00      	nop
 8004030:	3730      	adds	r7, #48	; 0x30
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	20000d90 	.word	0x20000d90

0800403c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b088      	sub	sp, #32
 8004040:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004042:	e048      	b.n	80040d6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004044:	4b2d      	ldr	r3, [pc, #180]	; (80040fc <prvSwitchTimerLists+0xc0>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800404e:	4b2b      	ldr	r3, [pc, #172]	; (80040fc <prvSwitchTimerLists+0xc0>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	3304      	adds	r3, #4
 800405c:	4618      	mov	r0, r3
 800405e:	f7fe f903 	bl	8002268 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b00      	cmp	r3, #0
 8004076:	d02e      	beq.n	80040d6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4413      	add	r3, r2
 8004080:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	429a      	cmp	r2, r3
 8004088:	d90e      	bls.n	80040a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004096:	4b19      	ldr	r3, [pc, #100]	; (80040fc <prvSwitchTimerLists+0xc0>)
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	3304      	adds	r3, #4
 800409e:	4619      	mov	r1, r3
 80040a0:	4610      	mov	r0, r2
 80040a2:	f7fe f8a8 	bl	80021f6 <vListInsert>
 80040a6:	e016      	b.n	80040d6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80040a8:	2300      	movs	r3, #0
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	2300      	movs	r3, #0
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	2100      	movs	r1, #0
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f7ff fd60 	bl	8003b78 <xTimerGenericCommand>
 80040b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10a      	bne.n	80040d6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80040c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	603b      	str	r3, [r7, #0]
}
 80040d2:	bf00      	nop
 80040d4:	e7fe      	b.n	80040d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040d6:	4b09      	ldr	r3, [pc, #36]	; (80040fc <prvSwitchTimerLists+0xc0>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1b1      	bne.n	8004044 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80040e0:	4b06      	ldr	r3, [pc, #24]	; (80040fc <prvSwitchTimerLists+0xc0>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80040e6:	4b06      	ldr	r3, [pc, #24]	; (8004100 <prvSwitchTimerLists+0xc4>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a04      	ldr	r2, [pc, #16]	; (80040fc <prvSwitchTimerLists+0xc0>)
 80040ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80040ee:	4a04      	ldr	r2, [pc, #16]	; (8004100 <prvSwitchTimerLists+0xc4>)
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	6013      	str	r3, [r2, #0]
}
 80040f4:	bf00      	nop
 80040f6:	3718      	adds	r7, #24
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	20000d88 	.word	0x20000d88
 8004100:	20000d8c 	.word	0x20000d8c

08004104 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800410a:	f000 f96b 	bl	80043e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800410e:	4b15      	ldr	r3, [pc, #84]	; (8004164 <prvCheckForValidListAndQueue+0x60>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d120      	bne.n	8004158 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004116:	4814      	ldr	r0, [pc, #80]	; (8004168 <prvCheckForValidListAndQueue+0x64>)
 8004118:	f7fe f81c 	bl	8002154 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800411c:	4813      	ldr	r0, [pc, #76]	; (800416c <prvCheckForValidListAndQueue+0x68>)
 800411e:	f7fe f819 	bl	8002154 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004122:	4b13      	ldr	r3, [pc, #76]	; (8004170 <prvCheckForValidListAndQueue+0x6c>)
 8004124:	4a10      	ldr	r2, [pc, #64]	; (8004168 <prvCheckForValidListAndQueue+0x64>)
 8004126:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004128:	4b12      	ldr	r3, [pc, #72]	; (8004174 <prvCheckForValidListAndQueue+0x70>)
 800412a:	4a10      	ldr	r2, [pc, #64]	; (800416c <prvCheckForValidListAndQueue+0x68>)
 800412c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800412e:	2300      	movs	r3, #0
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	4b11      	ldr	r3, [pc, #68]	; (8004178 <prvCheckForValidListAndQueue+0x74>)
 8004134:	4a11      	ldr	r2, [pc, #68]	; (800417c <prvCheckForValidListAndQueue+0x78>)
 8004136:	2110      	movs	r1, #16
 8004138:	200a      	movs	r0, #10
 800413a:	f7fe f927 	bl	800238c <xQueueGenericCreateStatic>
 800413e:	4603      	mov	r3, r0
 8004140:	4a08      	ldr	r2, [pc, #32]	; (8004164 <prvCheckForValidListAndQueue+0x60>)
 8004142:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004144:	4b07      	ldr	r3, [pc, #28]	; (8004164 <prvCheckForValidListAndQueue+0x60>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d005      	beq.n	8004158 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800414c:	4b05      	ldr	r3, [pc, #20]	; (8004164 <prvCheckForValidListAndQueue+0x60>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	490b      	ldr	r1, [pc, #44]	; (8004180 <prvCheckForValidListAndQueue+0x7c>)
 8004152:	4618      	mov	r0, r3
 8004154:	f7fe fd40 	bl	8002bd8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004158:	f000 f974 	bl	8004444 <vPortExitCritical>
}
 800415c:	bf00      	nop
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	20000d90 	.word	0x20000d90
 8004168:	20000d60 	.word	0x20000d60
 800416c:	20000d74 	.word	0x20000d74
 8004170:	20000d88 	.word	0x20000d88
 8004174:	20000d8c 	.word	0x20000d8c
 8004178:	20000e3c 	.word	0x20000e3c
 800417c:	20000d9c 	.word	0x20000d9c
 8004180:	08004c04 	.word	0x08004c04

08004184 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	3b04      	subs	r3, #4
 8004194:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800419c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	3b04      	subs	r3, #4
 80041a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	f023 0201 	bic.w	r2, r3, #1
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	3b04      	subs	r3, #4
 80041b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80041b4:	4a0c      	ldr	r2, [pc, #48]	; (80041e8 <pxPortInitialiseStack+0x64>)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	3b14      	subs	r3, #20
 80041be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	3b04      	subs	r3, #4
 80041ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f06f 0202 	mvn.w	r2, #2
 80041d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	3b20      	subs	r3, #32
 80041d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80041da:	68fb      	ldr	r3, [r7, #12]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	080041ed 	.word	0x080041ed

080041ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80041f2:	2300      	movs	r3, #0
 80041f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80041f6:	4b12      	ldr	r3, [pc, #72]	; (8004240 <prvTaskExitError+0x54>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fe:	d00a      	beq.n	8004216 <prvTaskExitError+0x2a>
	__asm volatile
 8004200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	60fb      	str	r3, [r7, #12]
}
 8004212:	bf00      	nop
 8004214:	e7fe      	b.n	8004214 <prvTaskExitError+0x28>
	__asm volatile
 8004216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421a:	f383 8811 	msr	BASEPRI, r3
 800421e:	f3bf 8f6f 	isb	sy
 8004222:	f3bf 8f4f 	dsb	sy
 8004226:	60bb      	str	r3, [r7, #8]
}
 8004228:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800422a:	bf00      	nop
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0fc      	beq.n	800422c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004232:	bf00      	nop
 8004234:	bf00      	nop
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	2000000c 	.word	0x2000000c
	...

08004250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004250:	4b07      	ldr	r3, [pc, #28]	; (8004270 <pxCurrentTCBConst2>)
 8004252:	6819      	ldr	r1, [r3, #0]
 8004254:	6808      	ldr	r0, [r1, #0]
 8004256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800425a:	f380 8809 	msr	PSP, r0
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	f04f 0000 	mov.w	r0, #0
 8004266:	f380 8811 	msr	BASEPRI, r0
 800426a:	4770      	bx	lr
 800426c:	f3af 8000 	nop.w

08004270 <pxCurrentTCBConst2>:
 8004270:	20000860 	.word	0x20000860
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004274:	bf00      	nop
 8004276:	bf00      	nop

08004278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004278:	4808      	ldr	r0, [pc, #32]	; (800429c <prvPortStartFirstTask+0x24>)
 800427a:	6800      	ldr	r0, [r0, #0]
 800427c:	6800      	ldr	r0, [r0, #0]
 800427e:	f380 8808 	msr	MSP, r0
 8004282:	f04f 0000 	mov.w	r0, #0
 8004286:	f380 8814 	msr	CONTROL, r0
 800428a:	b662      	cpsie	i
 800428c:	b661      	cpsie	f
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	f3bf 8f6f 	isb	sy
 8004296:	df00      	svc	0
 8004298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800429a:	bf00      	nop
 800429c:	e000ed08 	.word	0xe000ed08

080042a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80042a6:	4b46      	ldr	r3, [pc, #280]	; (80043c0 <xPortStartScheduler+0x120>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a46      	ldr	r2, [pc, #280]	; (80043c4 <xPortStartScheduler+0x124>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d10a      	bne.n	80042c6 <xPortStartScheduler+0x26>
	__asm volatile
 80042b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b4:	f383 8811 	msr	BASEPRI, r3
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	613b      	str	r3, [r7, #16]
}
 80042c2:	bf00      	nop
 80042c4:	e7fe      	b.n	80042c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80042c6:	4b3e      	ldr	r3, [pc, #248]	; (80043c0 <xPortStartScheduler+0x120>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a3f      	ldr	r2, [pc, #252]	; (80043c8 <xPortStartScheduler+0x128>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d10a      	bne.n	80042e6 <xPortStartScheduler+0x46>
	__asm volatile
 80042d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	60fb      	str	r3, [r7, #12]
}
 80042e2:	bf00      	nop
 80042e4:	e7fe      	b.n	80042e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042e6:	4b39      	ldr	r3, [pc, #228]	; (80043cc <xPortStartScheduler+0x12c>)
 80042e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	22ff      	movs	r2, #255	; 0xff
 80042f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004300:	78fb      	ldrb	r3, [r7, #3]
 8004302:	b2db      	uxtb	r3, r3
 8004304:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004308:	b2da      	uxtb	r2, r3
 800430a:	4b31      	ldr	r3, [pc, #196]	; (80043d0 <xPortStartScheduler+0x130>)
 800430c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800430e:	4b31      	ldr	r3, [pc, #196]	; (80043d4 <xPortStartScheduler+0x134>)
 8004310:	2207      	movs	r2, #7
 8004312:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004314:	e009      	b.n	800432a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004316:	4b2f      	ldr	r3, [pc, #188]	; (80043d4 <xPortStartScheduler+0x134>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3b01      	subs	r3, #1
 800431c:	4a2d      	ldr	r2, [pc, #180]	; (80043d4 <xPortStartScheduler+0x134>)
 800431e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004320:	78fb      	ldrb	r3, [r7, #3]
 8004322:	b2db      	uxtb	r3, r3
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	b2db      	uxtb	r3, r3
 8004328:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800432a:	78fb      	ldrb	r3, [r7, #3]
 800432c:	b2db      	uxtb	r3, r3
 800432e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004332:	2b80      	cmp	r3, #128	; 0x80
 8004334:	d0ef      	beq.n	8004316 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004336:	4b27      	ldr	r3, [pc, #156]	; (80043d4 <xPortStartScheduler+0x134>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f1c3 0307 	rsb	r3, r3, #7
 800433e:	2b04      	cmp	r3, #4
 8004340:	d00a      	beq.n	8004358 <xPortStartScheduler+0xb8>
	__asm volatile
 8004342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004346:	f383 8811 	msr	BASEPRI, r3
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	60bb      	str	r3, [r7, #8]
}
 8004354:	bf00      	nop
 8004356:	e7fe      	b.n	8004356 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004358:	4b1e      	ldr	r3, [pc, #120]	; (80043d4 <xPortStartScheduler+0x134>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	021b      	lsls	r3, r3, #8
 800435e:	4a1d      	ldr	r2, [pc, #116]	; (80043d4 <xPortStartScheduler+0x134>)
 8004360:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004362:	4b1c      	ldr	r3, [pc, #112]	; (80043d4 <xPortStartScheduler+0x134>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800436a:	4a1a      	ldr	r2, [pc, #104]	; (80043d4 <xPortStartScheduler+0x134>)
 800436c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	b2da      	uxtb	r2, r3
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004376:	4b18      	ldr	r3, [pc, #96]	; (80043d8 <xPortStartScheduler+0x138>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a17      	ldr	r2, [pc, #92]	; (80043d8 <xPortStartScheduler+0x138>)
 800437c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004380:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004382:	4b15      	ldr	r3, [pc, #84]	; (80043d8 <xPortStartScheduler+0x138>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a14      	ldr	r2, [pc, #80]	; (80043d8 <xPortStartScheduler+0x138>)
 8004388:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800438c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800438e:	f000 f8dd 	bl	800454c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004392:	4b12      	ldr	r3, [pc, #72]	; (80043dc <xPortStartScheduler+0x13c>)
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004398:	f000 f8fc 	bl	8004594 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800439c:	4b10      	ldr	r3, [pc, #64]	; (80043e0 <xPortStartScheduler+0x140>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a0f      	ldr	r2, [pc, #60]	; (80043e0 <xPortStartScheduler+0x140>)
 80043a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80043a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80043a8:	f7ff ff66 	bl	8004278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80043ac:	f7ff f844 	bl	8003438 <vTaskSwitchContext>
	prvTaskExitError();
 80043b0:	f7ff ff1c 	bl	80041ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	e000ed00 	.word	0xe000ed00
 80043c4:	410fc271 	.word	0x410fc271
 80043c8:	410fc270 	.word	0x410fc270
 80043cc:	e000e400 	.word	0xe000e400
 80043d0:	20000e8c 	.word	0x20000e8c
 80043d4:	20000e90 	.word	0x20000e90
 80043d8:	e000ed20 	.word	0xe000ed20
 80043dc:	2000000c 	.word	0x2000000c
 80043e0:	e000ef34 	.word	0xe000ef34

080043e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
	__asm volatile
 80043ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ee:	f383 8811 	msr	BASEPRI, r3
 80043f2:	f3bf 8f6f 	isb	sy
 80043f6:	f3bf 8f4f 	dsb	sy
 80043fa:	607b      	str	r3, [r7, #4]
}
 80043fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80043fe:	4b0f      	ldr	r3, [pc, #60]	; (800443c <vPortEnterCritical+0x58>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3301      	adds	r3, #1
 8004404:	4a0d      	ldr	r2, [pc, #52]	; (800443c <vPortEnterCritical+0x58>)
 8004406:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004408:	4b0c      	ldr	r3, [pc, #48]	; (800443c <vPortEnterCritical+0x58>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d10f      	bne.n	8004430 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004410:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <vPortEnterCritical+0x5c>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <vPortEnterCritical+0x4c>
	__asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	603b      	str	r3, [r7, #0]
}
 800442c:	bf00      	nop
 800442e:	e7fe      	b.n	800442e <vPortEnterCritical+0x4a>
	}
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	2000000c 	.word	0x2000000c
 8004440:	e000ed04 	.word	0xe000ed04

08004444 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800444a:	4b12      	ldr	r3, [pc, #72]	; (8004494 <vPortExitCritical+0x50>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10a      	bne.n	8004468 <vPortExitCritical+0x24>
	__asm volatile
 8004452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004456:	f383 8811 	msr	BASEPRI, r3
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	607b      	str	r3, [r7, #4]
}
 8004464:	bf00      	nop
 8004466:	e7fe      	b.n	8004466 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004468:	4b0a      	ldr	r3, [pc, #40]	; (8004494 <vPortExitCritical+0x50>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	3b01      	subs	r3, #1
 800446e:	4a09      	ldr	r2, [pc, #36]	; (8004494 <vPortExitCritical+0x50>)
 8004470:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004472:	4b08      	ldr	r3, [pc, #32]	; (8004494 <vPortExitCritical+0x50>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d105      	bne.n	8004486 <vPortExitCritical+0x42>
 800447a:	2300      	movs	r3, #0
 800447c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	f383 8811 	msr	BASEPRI, r3
}
 8004484:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	2000000c 	.word	0x2000000c
	...

080044a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80044a0:	f3ef 8009 	mrs	r0, PSP
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	4b15      	ldr	r3, [pc, #84]	; (8004500 <pxCurrentTCBConst>)
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	f01e 0f10 	tst.w	lr, #16
 80044b0:	bf08      	it	eq
 80044b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80044b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ba:	6010      	str	r0, [r2, #0]
 80044bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80044c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80044c4:	f380 8811 	msr	BASEPRI, r0
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f7fe ffb2 	bl	8003438 <vTaskSwitchContext>
 80044d4:	f04f 0000 	mov.w	r0, #0
 80044d8:	f380 8811 	msr	BASEPRI, r0
 80044dc:	bc09      	pop	{r0, r3}
 80044de:	6819      	ldr	r1, [r3, #0]
 80044e0:	6808      	ldr	r0, [r1, #0]
 80044e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044e6:	f01e 0f10 	tst.w	lr, #16
 80044ea:	bf08      	it	eq
 80044ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80044f0:	f380 8809 	msr	PSP, r0
 80044f4:	f3bf 8f6f 	isb	sy
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	f3af 8000 	nop.w

08004500 <pxCurrentTCBConst>:
 8004500:	20000860 	.word	0x20000860
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004504:	bf00      	nop
 8004506:	bf00      	nop

08004508 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
	__asm volatile
 800450e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004512:	f383 8811 	msr	BASEPRI, r3
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	607b      	str	r3, [r7, #4]
}
 8004520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004522:	f7fe fecf 	bl	80032c4 <xTaskIncrementTick>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800452c:	4b06      	ldr	r3, [pc, #24]	; (8004548 <xPortSysTickHandler+0x40>)
 800452e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	2300      	movs	r3, #0
 8004536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	f383 8811 	msr	BASEPRI, r3
}
 800453e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004540:	bf00      	nop
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	e000ed04 	.word	0xe000ed04

0800454c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004550:	4b0b      	ldr	r3, [pc, #44]	; (8004580 <vPortSetupTimerInterrupt+0x34>)
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004556:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <vPortSetupTimerInterrupt+0x38>)
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800455c:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <vPortSetupTimerInterrupt+0x3c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a0a      	ldr	r2, [pc, #40]	; (800458c <vPortSetupTimerInterrupt+0x40>)
 8004562:	fba2 2303 	umull	r2, r3, r2, r3
 8004566:	099b      	lsrs	r3, r3, #6
 8004568:	4a09      	ldr	r2, [pc, #36]	; (8004590 <vPortSetupTimerInterrupt+0x44>)
 800456a:	3b01      	subs	r3, #1
 800456c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800456e:	4b04      	ldr	r3, [pc, #16]	; (8004580 <vPortSetupTimerInterrupt+0x34>)
 8004570:	2207      	movs	r2, #7
 8004572:	601a      	str	r2, [r3, #0]
}
 8004574:	bf00      	nop
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	e000e010 	.word	0xe000e010
 8004584:	e000e018 	.word	0xe000e018
 8004588:	20000000 	.word	0x20000000
 800458c:	10624dd3 	.word	0x10624dd3
 8004590:	e000e014 	.word	0xe000e014

08004594 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004594:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80045a4 <vPortEnableVFP+0x10>
 8004598:	6801      	ldr	r1, [r0, #0]
 800459a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800459e:	6001      	str	r1, [r0, #0]
 80045a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80045a2:	bf00      	nop
 80045a4:	e000ed88 	.word	0xe000ed88

080045a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80045ae:	f3ef 8305 	mrs	r3, IPSR
 80045b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2b0f      	cmp	r3, #15
 80045b8:	d914      	bls.n	80045e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80045ba:	4a17      	ldr	r2, [pc, #92]	; (8004618 <vPortValidateInterruptPriority+0x70>)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4413      	add	r3, r2
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80045c4:	4b15      	ldr	r3, [pc, #84]	; (800461c <vPortValidateInterruptPriority+0x74>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	7afa      	ldrb	r2, [r7, #11]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d20a      	bcs.n	80045e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80045ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d2:	f383 8811 	msr	BASEPRI, r3
 80045d6:	f3bf 8f6f 	isb	sy
 80045da:	f3bf 8f4f 	dsb	sy
 80045de:	607b      	str	r3, [r7, #4]
}
 80045e0:	bf00      	nop
 80045e2:	e7fe      	b.n	80045e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80045e4:	4b0e      	ldr	r3, [pc, #56]	; (8004620 <vPortValidateInterruptPriority+0x78>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045ec:	4b0d      	ldr	r3, [pc, #52]	; (8004624 <vPortValidateInterruptPriority+0x7c>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d90a      	bls.n	800460a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80045f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f8:	f383 8811 	msr	BASEPRI, r3
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	603b      	str	r3, [r7, #0]
}
 8004606:	bf00      	nop
 8004608:	e7fe      	b.n	8004608 <vPortValidateInterruptPriority+0x60>
	}
 800460a:	bf00      	nop
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	e000e3f0 	.word	0xe000e3f0
 800461c:	20000e8c 	.word	0x20000e8c
 8004620:	e000ed0c 	.word	0xe000ed0c
 8004624:	20000e90 	.word	0x20000e90

08004628 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b08a      	sub	sp, #40	; 0x28
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004630:	2300      	movs	r3, #0
 8004632:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004634:	f7fe fd8a 	bl	800314c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004638:	4b5b      	ldr	r3, [pc, #364]	; (80047a8 <pvPortMalloc+0x180>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004640:	f000 f920 	bl	8004884 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004644:	4b59      	ldr	r3, [pc, #356]	; (80047ac <pvPortMalloc+0x184>)
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4013      	ands	r3, r2
 800464c:	2b00      	cmp	r3, #0
 800464e:	f040 8093 	bne.w	8004778 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d01d      	beq.n	8004694 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004658:	2208      	movs	r2, #8
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4413      	add	r3, r2
 800465e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	2b00      	cmp	r3, #0
 8004668:	d014      	beq.n	8004694 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f023 0307 	bic.w	r3, r3, #7
 8004670:	3308      	adds	r3, #8
 8004672:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <pvPortMalloc+0x6c>
	__asm volatile
 800467e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004682:	f383 8811 	msr	BASEPRI, r3
 8004686:	f3bf 8f6f 	isb	sy
 800468a:	f3bf 8f4f 	dsb	sy
 800468e:	617b      	str	r3, [r7, #20]
}
 8004690:	bf00      	nop
 8004692:	e7fe      	b.n	8004692 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d06e      	beq.n	8004778 <pvPortMalloc+0x150>
 800469a:	4b45      	ldr	r3, [pc, #276]	; (80047b0 <pvPortMalloc+0x188>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d869      	bhi.n	8004778 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80046a4:	4b43      	ldr	r3, [pc, #268]	; (80047b4 <pvPortMalloc+0x18c>)
 80046a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80046a8:	4b42      	ldr	r3, [pc, #264]	; (80047b4 <pvPortMalloc+0x18c>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046ae:	e004      	b.n	80046ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d903      	bls.n	80046cc <pvPortMalloc+0xa4>
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1f1      	bne.n	80046b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80046cc:	4b36      	ldr	r3, [pc, #216]	; (80047a8 <pvPortMalloc+0x180>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d050      	beq.n	8004778 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2208      	movs	r2, #8
 80046dc:	4413      	add	r3, r2
 80046de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	1ad2      	subs	r2, r2, r3
 80046f0:	2308      	movs	r3, #8
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d91f      	bls.n	8004738 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4413      	add	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <pvPortMalloc+0xf8>
	__asm volatile
 800470a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470e:	f383 8811 	msr	BASEPRI, r3
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	613b      	str	r3, [r7, #16]
}
 800471c:	bf00      	nop
 800471e:	e7fe      	b.n	800471e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	1ad2      	subs	r2, r2, r3
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004732:	69b8      	ldr	r0, [r7, #24]
 8004734:	f000 f908 	bl	8004948 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004738:	4b1d      	ldr	r3, [pc, #116]	; (80047b0 <pvPortMalloc+0x188>)
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	4a1b      	ldr	r2, [pc, #108]	; (80047b0 <pvPortMalloc+0x188>)
 8004744:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004746:	4b1a      	ldr	r3, [pc, #104]	; (80047b0 <pvPortMalloc+0x188>)
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	4b1b      	ldr	r3, [pc, #108]	; (80047b8 <pvPortMalloc+0x190>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d203      	bcs.n	800475a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004752:	4b17      	ldr	r3, [pc, #92]	; (80047b0 <pvPortMalloc+0x188>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a18      	ldr	r2, [pc, #96]	; (80047b8 <pvPortMalloc+0x190>)
 8004758:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	4b13      	ldr	r3, [pc, #76]	; (80047ac <pvPortMalloc+0x184>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	431a      	orrs	r2, r3
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	2200      	movs	r2, #0
 800476c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800476e:	4b13      	ldr	r3, [pc, #76]	; (80047bc <pvPortMalloc+0x194>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	3301      	adds	r3, #1
 8004774:	4a11      	ldr	r2, [pc, #68]	; (80047bc <pvPortMalloc+0x194>)
 8004776:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004778:	f7fe fcf6 	bl	8003168 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	f003 0307 	and.w	r3, r3, #7
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <pvPortMalloc+0x174>
	__asm volatile
 8004786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478a:	f383 8811 	msr	BASEPRI, r3
 800478e:	f3bf 8f6f 	isb	sy
 8004792:	f3bf 8f4f 	dsb	sy
 8004796:	60fb      	str	r3, [r7, #12]
}
 8004798:	bf00      	nop
 800479a:	e7fe      	b.n	800479a <pvPortMalloc+0x172>
	return pvReturn;
 800479c:	69fb      	ldr	r3, [r7, #28]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3728      	adds	r7, #40	; 0x28
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	20004a9c 	.word	0x20004a9c
 80047ac:	20004ab0 	.word	0x20004ab0
 80047b0:	20004aa0 	.word	0x20004aa0
 80047b4:	20004a94 	.word	0x20004a94
 80047b8:	20004aa4 	.word	0x20004aa4
 80047bc:	20004aa8 	.word	0x20004aa8

080047c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d04d      	beq.n	800486e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80047d2:	2308      	movs	r3, #8
 80047d4:	425b      	negs	r3, r3
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	4413      	add	r3, r2
 80047da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	4b24      	ldr	r3, [pc, #144]	; (8004878 <vPortFree+0xb8>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4013      	ands	r3, r2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10a      	bne.n	8004804 <vPortFree+0x44>
	__asm volatile
 80047ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	60fb      	str	r3, [r7, #12]
}
 8004800:	bf00      	nop
 8004802:	e7fe      	b.n	8004802 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00a      	beq.n	8004822 <vPortFree+0x62>
	__asm volatile
 800480c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004810:	f383 8811 	msr	BASEPRI, r3
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	60bb      	str	r3, [r7, #8]
}
 800481e:	bf00      	nop
 8004820:	e7fe      	b.n	8004820 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	4b14      	ldr	r3, [pc, #80]	; (8004878 <vPortFree+0xb8>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4013      	ands	r3, r2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d01e      	beq.n	800486e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d11a      	bne.n	800486e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	4b0e      	ldr	r3, [pc, #56]	; (8004878 <vPortFree+0xb8>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	43db      	mvns	r3, r3
 8004842:	401a      	ands	r2, r3
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004848:	f7fe fc80 	bl	800314c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	4b0a      	ldr	r3, [pc, #40]	; (800487c <vPortFree+0xbc>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4413      	add	r3, r2
 8004856:	4a09      	ldr	r2, [pc, #36]	; (800487c <vPortFree+0xbc>)
 8004858:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800485a:	6938      	ldr	r0, [r7, #16]
 800485c:	f000 f874 	bl	8004948 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004860:	4b07      	ldr	r3, [pc, #28]	; (8004880 <vPortFree+0xc0>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3301      	adds	r3, #1
 8004866:	4a06      	ldr	r2, [pc, #24]	; (8004880 <vPortFree+0xc0>)
 8004868:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800486a:	f7fe fc7d 	bl	8003168 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800486e:	bf00      	nop
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	20004ab0 	.word	0x20004ab0
 800487c:	20004aa0 	.word	0x20004aa0
 8004880:	20004aac 	.word	0x20004aac

08004884 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800488a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800488e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004890:	4b27      	ldr	r3, [pc, #156]	; (8004930 <prvHeapInit+0xac>)
 8004892:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f003 0307 	and.w	r3, r3, #7
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00c      	beq.n	80048b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	3307      	adds	r3, #7
 80048a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f023 0307 	bic.w	r3, r3, #7
 80048aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	4a1f      	ldr	r2, [pc, #124]	; (8004930 <prvHeapInit+0xac>)
 80048b4:	4413      	add	r3, r2
 80048b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80048bc:	4a1d      	ldr	r2, [pc, #116]	; (8004934 <prvHeapInit+0xb0>)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80048c2:	4b1c      	ldr	r3, [pc, #112]	; (8004934 <prvHeapInit+0xb0>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	4413      	add	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80048d0:	2208      	movs	r2, #8
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	1a9b      	subs	r3, r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f023 0307 	bic.w	r3, r3, #7
 80048de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4a15      	ldr	r2, [pc, #84]	; (8004938 <prvHeapInit+0xb4>)
 80048e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80048e6:	4b14      	ldr	r3, [pc, #80]	; (8004938 <prvHeapInit+0xb4>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2200      	movs	r2, #0
 80048ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80048ee:	4b12      	ldr	r3, [pc, #72]	; (8004938 <prvHeapInit+0xb4>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2200      	movs	r2, #0
 80048f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	1ad2      	subs	r2, r2, r3
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004904:	4b0c      	ldr	r3, [pc, #48]	; (8004938 <prvHeapInit+0xb4>)
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	4a0a      	ldr	r2, [pc, #40]	; (800493c <prvHeapInit+0xb8>)
 8004912:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	4a09      	ldr	r2, [pc, #36]	; (8004940 <prvHeapInit+0xbc>)
 800491a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800491c:	4b09      	ldr	r3, [pc, #36]	; (8004944 <prvHeapInit+0xc0>)
 800491e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004922:	601a      	str	r2, [r3, #0]
}
 8004924:	bf00      	nop
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	20000e94 	.word	0x20000e94
 8004934:	20004a94 	.word	0x20004a94
 8004938:	20004a9c 	.word	0x20004a9c
 800493c:	20004aa4 	.word	0x20004aa4
 8004940:	20004aa0 	.word	0x20004aa0
 8004944:	20004ab0 	.word	0x20004ab0

08004948 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004950:	4b28      	ldr	r3, [pc, #160]	; (80049f4 <prvInsertBlockIntoFreeList+0xac>)
 8004952:	60fb      	str	r3, [r7, #12]
 8004954:	e002      	b.n	800495c <prvInsertBlockIntoFreeList+0x14>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	429a      	cmp	r2, r3
 8004964:	d8f7      	bhi.n	8004956 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	4413      	add	r3, r2
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	429a      	cmp	r2, r3
 8004976:	d108      	bne.n	800498a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	441a      	add	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	441a      	add	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	429a      	cmp	r2, r3
 800499c:	d118      	bne.n	80049d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	4b15      	ldr	r3, [pc, #84]	; (80049f8 <prvInsertBlockIntoFreeList+0xb0>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d00d      	beq.n	80049c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	441a      	add	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	e008      	b.n	80049d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80049c6:	4b0c      	ldr	r3, [pc, #48]	; (80049f8 <prvInsertBlockIntoFreeList+0xb0>)
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	e003      	b.n	80049d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d002      	beq.n	80049e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049e6:	bf00      	nop
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	20004a94 	.word	0x20004a94
 80049f8:	20004a9c 	.word	0x20004a9c

080049fc <memset>:
 80049fc:	4402      	add	r2, r0
 80049fe:	4603      	mov	r3, r0
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d100      	bne.n	8004a06 <memset+0xa>
 8004a04:	4770      	bx	lr
 8004a06:	f803 1b01 	strb.w	r1, [r3], #1
 8004a0a:	e7f9      	b.n	8004a00 <memset+0x4>

08004a0c <_reclaim_reent>:
 8004a0c:	4b29      	ldr	r3, [pc, #164]	; (8004ab4 <_reclaim_reent+0xa8>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4283      	cmp	r3, r0
 8004a12:	b570      	push	{r4, r5, r6, lr}
 8004a14:	4604      	mov	r4, r0
 8004a16:	d04b      	beq.n	8004ab0 <_reclaim_reent+0xa4>
 8004a18:	69c3      	ldr	r3, [r0, #28]
 8004a1a:	b143      	cbz	r3, 8004a2e <_reclaim_reent+0x22>
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d144      	bne.n	8004aac <_reclaim_reent+0xa0>
 8004a22:	69e3      	ldr	r3, [r4, #28]
 8004a24:	6819      	ldr	r1, [r3, #0]
 8004a26:	b111      	cbz	r1, 8004a2e <_reclaim_reent+0x22>
 8004a28:	4620      	mov	r0, r4
 8004a2a:	f000 f879 	bl	8004b20 <_free_r>
 8004a2e:	6961      	ldr	r1, [r4, #20]
 8004a30:	b111      	cbz	r1, 8004a38 <_reclaim_reent+0x2c>
 8004a32:	4620      	mov	r0, r4
 8004a34:	f000 f874 	bl	8004b20 <_free_r>
 8004a38:	69e1      	ldr	r1, [r4, #28]
 8004a3a:	b111      	cbz	r1, 8004a42 <_reclaim_reent+0x36>
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	f000 f86f 	bl	8004b20 <_free_r>
 8004a42:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004a44:	b111      	cbz	r1, 8004a4c <_reclaim_reent+0x40>
 8004a46:	4620      	mov	r0, r4
 8004a48:	f000 f86a 	bl	8004b20 <_free_r>
 8004a4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a4e:	b111      	cbz	r1, 8004a56 <_reclaim_reent+0x4a>
 8004a50:	4620      	mov	r0, r4
 8004a52:	f000 f865 	bl	8004b20 <_free_r>
 8004a56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004a58:	b111      	cbz	r1, 8004a60 <_reclaim_reent+0x54>
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	f000 f860 	bl	8004b20 <_free_r>
 8004a60:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004a62:	b111      	cbz	r1, 8004a6a <_reclaim_reent+0x5e>
 8004a64:	4620      	mov	r0, r4
 8004a66:	f000 f85b 	bl	8004b20 <_free_r>
 8004a6a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004a6c:	b111      	cbz	r1, 8004a74 <_reclaim_reent+0x68>
 8004a6e:	4620      	mov	r0, r4
 8004a70:	f000 f856 	bl	8004b20 <_free_r>
 8004a74:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004a76:	b111      	cbz	r1, 8004a7e <_reclaim_reent+0x72>
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f000 f851 	bl	8004b20 <_free_r>
 8004a7e:	6a23      	ldr	r3, [r4, #32]
 8004a80:	b1b3      	cbz	r3, 8004ab0 <_reclaim_reent+0xa4>
 8004a82:	4620      	mov	r0, r4
 8004a84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004a88:	4718      	bx	r3
 8004a8a:	5949      	ldr	r1, [r1, r5]
 8004a8c:	b941      	cbnz	r1, 8004aa0 <_reclaim_reent+0x94>
 8004a8e:	3504      	adds	r5, #4
 8004a90:	69e3      	ldr	r3, [r4, #28]
 8004a92:	2d80      	cmp	r5, #128	; 0x80
 8004a94:	68d9      	ldr	r1, [r3, #12]
 8004a96:	d1f8      	bne.n	8004a8a <_reclaim_reent+0x7e>
 8004a98:	4620      	mov	r0, r4
 8004a9a:	f000 f841 	bl	8004b20 <_free_r>
 8004a9e:	e7c0      	b.n	8004a22 <_reclaim_reent+0x16>
 8004aa0:	680e      	ldr	r6, [r1, #0]
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	f000 f83c 	bl	8004b20 <_free_r>
 8004aa8:	4631      	mov	r1, r6
 8004aaa:	e7ef      	b.n	8004a8c <_reclaim_reent+0x80>
 8004aac:	2500      	movs	r5, #0
 8004aae:	e7ef      	b.n	8004a90 <_reclaim_reent+0x84>
 8004ab0:	bd70      	pop	{r4, r5, r6, pc}
 8004ab2:	bf00      	nop
 8004ab4:	2000005c 	.word	0x2000005c

08004ab8 <__libc_init_array>:
 8004ab8:	b570      	push	{r4, r5, r6, lr}
 8004aba:	4d0d      	ldr	r5, [pc, #52]	; (8004af0 <__libc_init_array+0x38>)
 8004abc:	4c0d      	ldr	r4, [pc, #52]	; (8004af4 <__libc_init_array+0x3c>)
 8004abe:	1b64      	subs	r4, r4, r5
 8004ac0:	10a4      	asrs	r4, r4, #2
 8004ac2:	2600      	movs	r6, #0
 8004ac4:	42a6      	cmp	r6, r4
 8004ac6:	d109      	bne.n	8004adc <__libc_init_array+0x24>
 8004ac8:	4d0b      	ldr	r5, [pc, #44]	; (8004af8 <__libc_init_array+0x40>)
 8004aca:	4c0c      	ldr	r4, [pc, #48]	; (8004afc <__libc_init_array+0x44>)
 8004acc:	f000 f880 	bl	8004bd0 <_init>
 8004ad0:	1b64      	subs	r4, r4, r5
 8004ad2:	10a4      	asrs	r4, r4, #2
 8004ad4:	2600      	movs	r6, #0
 8004ad6:	42a6      	cmp	r6, r4
 8004ad8:	d105      	bne.n	8004ae6 <__libc_init_array+0x2e>
 8004ada:	bd70      	pop	{r4, r5, r6, pc}
 8004adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ae0:	4798      	blx	r3
 8004ae2:	3601      	adds	r6, #1
 8004ae4:	e7ee      	b.n	8004ac4 <__libc_init_array+0xc>
 8004ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aea:	4798      	blx	r3
 8004aec:	3601      	adds	r6, #1
 8004aee:	e7f2      	b.n	8004ad6 <__libc_init_array+0x1e>
 8004af0:	08004c50 	.word	0x08004c50
 8004af4:	08004c50 	.word	0x08004c50
 8004af8:	08004c50 	.word	0x08004c50
 8004afc:	08004c54 	.word	0x08004c54

08004b00 <__retarget_lock_acquire_recursive>:
 8004b00:	4770      	bx	lr

08004b02 <__retarget_lock_release_recursive>:
 8004b02:	4770      	bx	lr

08004b04 <memcpy>:
 8004b04:	440a      	add	r2, r1
 8004b06:	4291      	cmp	r1, r2
 8004b08:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b0c:	d100      	bne.n	8004b10 <memcpy+0xc>
 8004b0e:	4770      	bx	lr
 8004b10:	b510      	push	{r4, lr}
 8004b12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b1a:	4291      	cmp	r1, r2
 8004b1c:	d1f9      	bne.n	8004b12 <memcpy+0xe>
 8004b1e:	bd10      	pop	{r4, pc}

08004b20 <_free_r>:
 8004b20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b22:	2900      	cmp	r1, #0
 8004b24:	d044      	beq.n	8004bb0 <_free_r+0x90>
 8004b26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b2a:	9001      	str	r0, [sp, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f1a1 0404 	sub.w	r4, r1, #4
 8004b32:	bfb8      	it	lt
 8004b34:	18e4      	addlt	r4, r4, r3
 8004b36:	f000 f83f 	bl	8004bb8 <__malloc_lock>
 8004b3a:	4a1e      	ldr	r2, [pc, #120]	; (8004bb4 <_free_r+0x94>)
 8004b3c:	9801      	ldr	r0, [sp, #4]
 8004b3e:	6813      	ldr	r3, [r2, #0]
 8004b40:	b933      	cbnz	r3, 8004b50 <_free_r+0x30>
 8004b42:	6063      	str	r3, [r4, #4]
 8004b44:	6014      	str	r4, [r2, #0]
 8004b46:	b003      	add	sp, #12
 8004b48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b4c:	f000 b83a 	b.w	8004bc4 <__malloc_unlock>
 8004b50:	42a3      	cmp	r3, r4
 8004b52:	d908      	bls.n	8004b66 <_free_r+0x46>
 8004b54:	6825      	ldr	r5, [r4, #0]
 8004b56:	1961      	adds	r1, r4, r5
 8004b58:	428b      	cmp	r3, r1
 8004b5a:	bf01      	itttt	eq
 8004b5c:	6819      	ldreq	r1, [r3, #0]
 8004b5e:	685b      	ldreq	r3, [r3, #4]
 8004b60:	1949      	addeq	r1, r1, r5
 8004b62:	6021      	streq	r1, [r4, #0]
 8004b64:	e7ed      	b.n	8004b42 <_free_r+0x22>
 8004b66:	461a      	mov	r2, r3
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	b10b      	cbz	r3, 8004b70 <_free_r+0x50>
 8004b6c:	42a3      	cmp	r3, r4
 8004b6e:	d9fa      	bls.n	8004b66 <_free_r+0x46>
 8004b70:	6811      	ldr	r1, [r2, #0]
 8004b72:	1855      	adds	r5, r2, r1
 8004b74:	42a5      	cmp	r5, r4
 8004b76:	d10b      	bne.n	8004b90 <_free_r+0x70>
 8004b78:	6824      	ldr	r4, [r4, #0]
 8004b7a:	4421      	add	r1, r4
 8004b7c:	1854      	adds	r4, r2, r1
 8004b7e:	42a3      	cmp	r3, r4
 8004b80:	6011      	str	r1, [r2, #0]
 8004b82:	d1e0      	bne.n	8004b46 <_free_r+0x26>
 8004b84:	681c      	ldr	r4, [r3, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	6053      	str	r3, [r2, #4]
 8004b8a:	440c      	add	r4, r1
 8004b8c:	6014      	str	r4, [r2, #0]
 8004b8e:	e7da      	b.n	8004b46 <_free_r+0x26>
 8004b90:	d902      	bls.n	8004b98 <_free_r+0x78>
 8004b92:	230c      	movs	r3, #12
 8004b94:	6003      	str	r3, [r0, #0]
 8004b96:	e7d6      	b.n	8004b46 <_free_r+0x26>
 8004b98:	6825      	ldr	r5, [r4, #0]
 8004b9a:	1961      	adds	r1, r4, r5
 8004b9c:	428b      	cmp	r3, r1
 8004b9e:	bf04      	itt	eq
 8004ba0:	6819      	ldreq	r1, [r3, #0]
 8004ba2:	685b      	ldreq	r3, [r3, #4]
 8004ba4:	6063      	str	r3, [r4, #4]
 8004ba6:	bf04      	itt	eq
 8004ba8:	1949      	addeq	r1, r1, r5
 8004baa:	6021      	streq	r1, [r4, #0]
 8004bac:	6054      	str	r4, [r2, #4]
 8004bae:	e7ca      	b.n	8004b46 <_free_r+0x26>
 8004bb0:	b003      	add	sp, #12
 8004bb2:	bd30      	pop	{r4, r5, pc}
 8004bb4:	20004bf0 	.word	0x20004bf0

08004bb8 <__malloc_lock>:
 8004bb8:	4801      	ldr	r0, [pc, #4]	; (8004bc0 <__malloc_lock+0x8>)
 8004bba:	f7ff bfa1 	b.w	8004b00 <__retarget_lock_acquire_recursive>
 8004bbe:	bf00      	nop
 8004bc0:	20004bec 	.word	0x20004bec

08004bc4 <__malloc_unlock>:
 8004bc4:	4801      	ldr	r0, [pc, #4]	; (8004bcc <__malloc_unlock+0x8>)
 8004bc6:	f7ff bf9c 	b.w	8004b02 <__retarget_lock_release_recursive>
 8004bca:	bf00      	nop
 8004bcc:	20004bec 	.word	0x20004bec

08004bd0 <_init>:
 8004bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd2:	bf00      	nop
 8004bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bd6:	bc08      	pop	{r3}
 8004bd8:	469e      	mov	lr, r3
 8004bda:	4770      	bx	lr

08004bdc <_fini>:
 8004bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bde:	bf00      	nop
 8004be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004be2:	bc08      	pop	{r3}
 8004be4:	469e      	mov	lr, r3
 8004be6:	4770      	bx	lr
